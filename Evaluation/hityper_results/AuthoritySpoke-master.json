{
    "AuthoritySpoke-master/setup.py": {},
    "AuthoritySpoke-master/authorityspoke/courts.py": {},
    "AuthoritySpoke-master/authorityspoke/decisions.py": {
        "DecisionReading.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionReading.majority": {
            "name": "majority",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionReading.opinions": {
            "name": "opinions",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecisionReading.find_matching_opinion": {
            "name": "find_matching_opinion",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "opinion_type": [
                    "typing.Text"
                ],
                "opinion_author": [
                    "typing.Text"
                ]
            }
        },
        "DecisionReading.find_opinion_matching_reading": {
            "name": "find_opinion_matching_reading",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "opinion_reading": [
                    "int",
                    "str"
                ]
            }
        },
        "DecisionReading.select_text": {
            "name": "select_text",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ],
                "opinion_type": [
                    "typing.Text"
                ],
                "opinion_author": [
                    "typing.Text"
                ]
            }
        },
        "DecisionReading.add_opinion_reading": {
            "name": "add_opinion_reading",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opinion_reading": [
                    "bool"
                ]
            }
        },
        "DecisionReading.get_majority": {
            "name": "get_majority",
            "location": 122,
            "return": [
                "int",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "typing.Type",
                "OpinionReading",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionReading.holdings": {
            "name": "holdings",
            "location": 137,
            "return": [
                "HoldingGroup"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecisionReading.add_opinion": {
            "name": "add_opinion",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opinion": [
                    "str",
                    "bool"
                ]
            }
        },
        "DecisionReading.contradicts": {
            "name": "contradicts",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Iterable[T]"
                ]
            }
        },
        "DecisionReading.explain_contradiction": {
            "name": "explain_contradiction",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DecisionReading.explanations_contradiction": {
            "name": "explanations_contradiction",
            "location": 170,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "DecisionReading.explain_implication": {
            "name": "explain_implication",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DecisionReading.explanations_implication": {
            "name": "explanations_implication",
            "location": 199,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "DecisionReading.posit": {
            "name": "posit",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "holdings": [
                    "str",
                    "list[int]",
                    "tuple[]",
                    "int"
                ],
                "holding_anchors": [
                    "None",
                    "str",
                    "list[int]",
                    "tuple[]",
                    "int"
                ],
                "named_anchors": [
                    "None",
                    "str",
                    "list[int]",
                    "tuple[]",
                    "int"
                ],
                "enactment_anchors": [
                    "None",
                    "str",
                    "list[int]",
                    "tuple[]",
                    "int"
                ],
                "context": [
                    "None",
                    "str",
                    "list[int]",
                    "tuple[]",
                    "int"
                ]
            }
        },
        "DecisionReading.__ge__": {
            "name": "__ge__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.AbstractSet"
                ]
            }
        },
        "DecisionReading.__gt__": {
            "name": "__gt__",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DecisionReading.implied_by_holding": {
            "name": "implied_by_holding",
            "location": 261,
            "return": [
                "typing.Generator[Explanation]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "None",
                    "tuple[typing.Union[int,int]]"
                ],
                "context": [
                    "None"
                ]
            }
        },
        "DecisionReading.explanations_implied_by": {
            "name": "explanations_implied_by",
            "location": 274,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "context": [
                    "None"
                ]
            }
        },
        "DecisionReading.implied_by": {
            "name": "implied_by",
            "location": 290,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "None"
                ],
                "context": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "DecisionReading.implies_holding": {
            "name": "implies_holding",
            "location": 298,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Exception",
                    "None"
                ],
                "context": [
                    "None",
                    "Exception"
                ]
            }
        },
        "DecisionReading.implies_rule": {
            "name": "implies_rule",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "set[str]",
                    "float"
                ],
                "context": [
                    "None",
                    "bool",
                    "set[str]",
                    "float"
                ]
            }
        },
        "DecisionReading.implies": {
            "name": "implies",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "context": [
                    "None",
                    "Exception"
                ]
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/facts.py": {
        "build_fact": {
            "name": "build_fact",
            "location": 358,
            "return": [],
            "arguments": {
                "predicate": [],
                "indices": [],
                "case_factors": [],
                "name": [],
                "standard_of_proof": [],
                "absent": [],
                "generic": []
            }
        },
        "Fact.nest_predicate_fields": {
            "name": "nest_predicate_fields",
            "location": 99,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "Fact.terms_as_sequence": {
            "name": "terms_as_sequence",
            "location": 130,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "Fact.term_sequence": {
            "name": "term_sequence",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fact.terms_without_nulls": {
            "name": "terms_without_nulls",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fact.slug": {
            "name": "slug",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fact.str_with_concrete_context": {
            "name": "str_with_concrete_context",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fact.truth": {
            "name": "truth",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fact._validate_terms": {
            "name": "_validate_terms",
            "location": 186,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "Fact.wrapped_string": {
            "name": "wrapped_string",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fact.validate_standard_of_proof": {
            "name": "validate_standard_of_proof",
            "location": 215,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        },
        "Fact.__str__": {
            "name": "__str__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fact.content": {
            "name": "content",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fact._means_if_concrete": {
            "name": "_means_if_concrete",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Fact.__len__": {
            "name": "__len__",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fact._implies_if_concrete": {
            "name": "_implies_if_concrete",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Fact._contradicts_if_present": {
            "name": "_contradicts_if_present",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "explanation": []
            }
        },
        "Fact.negated": {
            "name": "negated",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Fact.new_context": {
            "name": "new_context",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "changes": []
            }
        },
        "Fact._registers_for_interchangeable_context": {
            "name": "_registers_for_interchangeable_context",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "matches": []
            }
        },
        "Fact.term_permutations": {
            "name": "term_permutations",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exhibit._means_if_concrete": {
            "name": "_means_if_concrete",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Exhibit._implies_if_concrete": {
            "name": "_implies_if_concrete",
            "location": 486,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Exhibit.__str__": {
            "name": "__str__",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exhibit.wrapped_string": {
            "name": "wrapped_string",
            "location": 503,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Evidence.check_type_field": {
            "name": "check_type_field",
            "location": 560,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "Evidence.__str__": {
            "name": "__str__",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Evidence.wrapped_string": {
            "name": "wrapped_string",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pleading.__str__": {
            "name": "__str__",
            "location": 610,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Allegation.wrapped_string": {
            "name": "wrapped_string",
            "location": 643,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Allegation.__str__": {
            "name": "__str__",
            "location": 656,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/holdings.py": {
        "Holding.nest_factor_fields": {
            "name": "nest_factor_fields",
            "location": 86,
            "return": [],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "Holding.not_invalid_and_exclusive": {
            "name": "not_invalid_and_exclusive",
            "location": 106,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "Holding.not_undecided_and_exclusive": {
            "name": "not_undecided_and_exclusive",
            "location": 119,
            "return": [],
            "arguments": {
                "cls": [],
                "v": [],
                "values": []
            }
        },
        "Holding.from_factors": {
            "name": "from_factors",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "outputs": [],
                "inputs": [],
                "despite": [],
                "enactments": [],
                "enactments_despite": [],
                "mandatory": [],
                "universal": [],
                "generic": [],
                "decided": [],
                "exclusive": [],
                "absent": []
            }
        },
        "Holding.procedure": {
            "name": "procedure",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.despite": {
            "name": "despite",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.inputs": {
            "name": "inputs",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.outputs": {
            "name": "outputs",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.enactments": {
            "name": "enactments",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.enactments_despite": {
            "name": "enactments_despite",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.recursive_terms": {
            "name": "recursive_terms",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.terms": {
            "name": "terms",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.generic_terms_by_str": {
            "name": "generic_terms_by_str",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.mandatory": {
            "name": "mandatory",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.universal": {
            "name": "universal",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.add_if_not_exclusive": {
            "name": "add_if_not_exclusive",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Holding.add_enactment": {
            "name": "add_enactment",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "enactment": []
            }
        },
        "Holding.add_enactment_despite": {
            "name": "add_enactment_despite",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "enactment": []
            }
        },
        "Holding.add_holding": {
            "name": "add_holding",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Holding.__add__": {
            "name": "__add__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Holding._explanations_contradiction_of_holding": {
            "name": "_explanations_contradiction_of_holding",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Holding.explanations_contradiction": {
            "name": "explanations_contradiction",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Holding._contradicts_if_not_exclusive": {
            "name": "_contradicts_if_not_exclusive",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Holding._explanations_implies_if_not_exclusive": {
            "name": "_explanations_implies_if_not_exclusive",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Holding.__ge__": {
            "name": "__ge__",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Holding.comparable_with": {
            "name": "comparable_with",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Holding.implies": {
            "name": "implies",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Holding.explanations_implication": {
            "name": "explanations_implication",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Holding.implied_by": {
            "name": "implied_by",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Holding._implies_if_decided": {
            "name": "_implies_if_decided",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Holding.__len__": {
            "name": "__len__",
            "location": 481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.inferred_from_exclusive": {
            "name": "inferred_from_exclusive",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.explanations_same_meaning": {
            "name": "explanations_same_meaning",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Holding.negated": {
            "name": "negated",
            "location": 517,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.new_context": {
            "name": "new_context",
            "location": 525,
            "return": [],
            "arguments": {
                "self": [],
                "changes": []
            }
        },
        "Holding.nonexclusive_holdings": {
            "name": "nonexclusive_holdings",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Holding.set_inputs": {
            "name": "set_inputs",
            "location": 548,
            "return": [],
            "arguments": {
                "self": [],
                "factors": []
            }
        },
        "Holding.set_despite": {
            "name": "set_despite",
            "location": 552,
            "return": [],
            "arguments": {
                "self": [],
                "factors": []
            }
        },
        "Holding.set_outputs": {
            "name": "set_outputs",
            "location": 556,
            "return": [],
            "arguments": {
                "self": [],
                "factors": []
            }
        },
        "Holding.set_enactments": {
            "name": "set_enactments",
            "location": 560,
            "return": [],
            "arguments": {
                "self": [],
                "enactments": []
            }
        },
        "Holding.set_enactments_despite": {
            "name": "set_enactments_despite",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "enactments": []
            }
        },
        "Holding._union_if_not_exclusive": {
            "name": "_union_if_not_exclusive",
            "location": 568,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Holding._union_with_holding": {
            "name": "_union_with_holding",
            "location": 601,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Holding.union": {
            "name": "union",
            "location": 613,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Holding.__or__": {
            "name": "__or__",
            "location": 638,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Holding.__str__": {
            "name": "__str__",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HoldingGroup.__init__": {
            "name": "__init__",
            "location": 673,
            "return": [],
            "arguments": {
                "self": [],
                "holdings": []
            }
        },
        "HoldingGroup._explanations_implication_of_holding": {
            "name": "_explanations_implication_of_holding",
            "location": 683,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "HoldingGroup.explanations_implication": {
            "name": "explanations_implication",
            "location": 692,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "HoldingGroup.verbose_comparison": {
            "name": "verbose_comparison",
            "location": 714,
            "return": [],
            "arguments": {
                "self": [],
                "operation": [],
                "still_need_matches": [],
                "explanation": []
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/opinions.py": {
        "EnactmentWithAnchors.validate_anchors": {
            "name": "validate_anchors",
            "location": 38,
            "return": [
                "TextPositionSet",
                "str",
                "dict[str, typing.Any]",
                "int",
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ],
                "value": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "TermWithAnchors.validate_anchors": {
            "name": "validate_anchors",
            "location": 53,
            "return": [
                "TextPositionSet",
                "str",
                "dict[str, typing.Any]",
                "int",
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ],
                "value": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "HoldingWithAnchors.validate_anchors": {
            "name": "validate_anchors",
            "location": 68,
            "return": [
                "TextPositionSet",
                "str",
                "dict[str, typing.Any]",
                "int",
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ],
                "value": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "AnchoredHoldings.find_term_index": {
            "name": "find_term_index",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "dict[, ]",
                    "dict[str, list[typing.Any]]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "AnchoredHoldings.add_term": {
            "name": "add_term",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "str",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Iterable[int]"
                ],
                "anchors": [
                    "float"
                ]
            }
        },
        "AnchoredHoldings.get_term_anchors": {
            "name": "get_term_anchors",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "AnchoredHoldings.find_enactment_index": {
            "name": "find_enactment_index",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enactment": [
                    "list[int]",
                    "str",
                    "tuple[typing.Any]",
                    "dict[str, str]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "AnchoredHoldings.add_enactment": {
            "name": "add_enactment",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enactment": [
                    "typing.Callable[, ]",
                    "dict[int, dict[int, typing.Any]]"
                ],
                "anchors": [
                    "typing.Callable[[], None]",
                    "str",
                    "list[]",
                    "tuple[]"
                ]
            }
        },
        "AnchoredHoldings.get_enactment_anchors": {
            "name": "get_enactment_anchors",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "OpinionReading.holdings": {
            "name": "holdings",
            "location": 141,
            "return": [
                "HoldingGroup"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpinionReading.holding_anchors": {
            "name": "holding_anchors",
            "location": 146,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpinionReading.anchored_factors": {
            "name": "anchored_factors",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpinionReading.anchored_enactments": {
            "name": "anchored_enactments",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpinionReading.__str__": {
            "name": "__str__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OpinionReading.factors": {
            "name": "factors",
            "location": 163,
            "return": [
                "list[list[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpinionReading.factors_by_name": {
            "name": "factors_by_name",
            "location": 168,
            "return": [
                "FactorIndex"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpinionReading.clear_holdings": {
            "name": "clear_holdings",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpinionReading.get_enactment_anchors": {
            "name": "get_enactment_anchors",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "OpinionReading.get_term_anchors": {
            "name": "get_term_anchors",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "OpinionReading.explanations_contradiction": {
            "name": "explanations_contradiction",
            "location": 190,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "OpinionReading.comparable_with": {
            "name": "comparable_with",
            "location": 213,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "OpinionReading.contradicts": {
            "name": "contradicts",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "None",
                    "typing.Iterable[typing.Any]"
                ],
                "context": [
                    "None",
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "OpinionReading.implies": {
            "name": "implies",
            "location": 235,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None"
                ],
                "context": [
                    "None",
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "OpinionReading.explain_implication": {
            "name": "explain_implication",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OpinionReading.explain_contradiction": {
            "name": "explain_contradiction",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OpinionReading.explanations_implication": {
            "name": "explanations_implication",
            "location": 264,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "OpinionReading.generic_terms_by_str": {
            "name": "generic_terms_by_str",
            "location": 285,
            "return": [
                "dict[str, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpinionReading.get_factor_by_name": {
            "name": "get_factor_by_name",
            "location": 301,
            "return": [
                "dict[, ]",
                "dict[str, list[str]]",
                "dict[int, str]",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "OpinionReading.get_factor_by_str": {
            "name": "get_factor_by_str",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "OpinionReading.get_matching_holding": {
            "name": "get_matching_holding",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "holding": [
                    "str",
                    "bool"
                ]
            }
        },
        "OpinionReading.posit_holding": {
            "name": "posit_holding",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "holding": [
                    "str",
                    "int",
                    "dict[str, int]"
                ],
                "holding_anchors": [
                    "str"
                ],
                "named_anchors": [
                    "None",
                    "str"
                ],
                "enactment_anchors": [
                    "None",
                    "bool",
                    "dict[, ]"
                ],
                "context": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "OpinionReading.posit_holdings": {
            "name": "posit_holdings",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "holdings": [
                    "str",
                    "int"
                ],
                "holding_anchors": [
                    "None",
                    "typing.Iterable[T]",
                    "typing.Callable[, ]"
                ],
                "named_anchors": [
                    "None",
                    "typing.Type"
                ],
                "enactment_anchors": [
                    "None",
                    "typing.Type"
                ],
                "context": [
                    "None",
                    "typing.Type"
                ]
            }
        },
        "OpinionReading.posit": {
            "name": "posit",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "holdings": [
                    "list[int]",
                    "int",
                    "list[]",
                    "typing.Callable[, ]",
                    "str",
                    "float"
                ],
                "holding_anchors": [
                    "None",
                    "typing.Type",
                    "str",
                    "bool"
                ],
                "named_anchors": [
                    "None",
                    "typing.Type",
                    "str",
                    "bool"
                ],
                "enactment_anchors": [
                    "None",
                    "typing.Type",
                    "str",
                    "bool"
                ],
                "context": [
                    "None",
                    "typing.Type",
                    "str",
                    "bool"
                ]
            }
        },
        "OpinionReading._implied_by_holding": {
            "name": "_implied_by_holding",
            "location": 481,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "None",
                    "BaseException",
                    "int"
                ],
                "context": []
            }
        },
        "OpinionReading._implied_by_rule": {
            "name": "_implied_by_rule",
            "location": 487,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "OpinionReading.implied_by": {
            "name": "implied_by",
            "location": 490,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Hashable",
                    "str"
                ],
                "context": []
            }
        },
        "OpinionReading.__ge__": {
            "name": "__ge__",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.AbstractSet"
                ]
            }
        },
        "OpinionReading.__gt__": {
            "name": "__gt__",
            "location": 515,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FactorIndex.insert_by_name": {
            "name": "insert_by_name",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None",
                    "typing.Hashable"
                ]
            }
        },
        "FactorIndex.insert": {
            "name": "insert",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/procedures.py": {
        "Procedure.outputs_group": {
            "name": "outputs_group",
            "location": 94,
            "return": [
                "FactorGroup"
            ],
            "arguments": {
                "self": []
            }
        },
        "Procedure.inputs_group": {
            "name": "inputs_group",
            "location": 99,
            "return": [
                "FactorGroup"
            ],
            "arguments": {
                "self": []
            }
        },
        "Procedure.despite_group": {
            "name": "despite_group",
            "location": 104,
            "return": [
                "FactorGroup"
            ],
            "arguments": {
                "self": []
            }
        },
        "Procedure.groups": {
            "name": "groups",
            "location": 109,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Procedure._validate_outputs": {
            "name": "_validate_outputs",
            "location": 114,
            "return": [
                "list[typing.Union[int,str,dict[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str], typing.Any]]]",
                "list[str]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "int",
                    "list[typing.Union[str,int]]",
                    "typing.Callable[, ]"
                ],
                "v": [
                    "int",
                    "str",
                    "dict[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str], typing.Any]"
                ]
            }
        },
        "Procedure._validate_factor_groups": {
            "name": "_validate_factor_groups",
            "location": 124,
            "return": [
                "list[typing.Union[dict[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str], set[str]],str,int,typing.Callable[, ]]]",
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]"
                ],
                "v": [
                    "dict[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str], set[str]]",
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Procedure.add": {
            "name": "add",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Match"
                ],
                "context": [
                    "None",
                    "typing.Callable[None, None]"
                ]
            }
        },
        "Procedure.__add__": {
            "name": "__add__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "list[str]",
                    "typing.AbstractSet",
                    "str"
                ]
            }
        },
        "Procedure._add_if_universal": {
            "name": "_add_if_universal",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "explanation": [
                    "None",
                    "dict[str, typing.Any]",
                    "Exception"
                ]
            }
        },
        "Procedure._trigger_addition": {
            "name": "_trigger_addition",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "typing.Callable[..., None]",
                    "bool",
                    "list[int]"
                ],
                "explanation": [
                    "str",
                    "typing.Callable[..., None]",
                    "bool",
                    "list[int]"
                ]
            }
        },
        "Procedure._explanations_union_partial": {
            "name": "_explanations_union_partial",
            "location": 195,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bytes"
                ],
                "context": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "Procedure.explanations_union": {
            "name": "explanations_union",
            "location": 201,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "None",
                    "Exception",
                    "bool"
                ],
                "context": [
                    "None",
                    "dict[str, typing.Any]",
                    "str",
                    "int"
                ]
            }
        },
        "Procedure._union_from_explanation": {
            "name": "_union_from_explanation",
            "location": 215,
            "return": [
                "None",
                "Procedure"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "None",
                    "bool"
                ],
                "context": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "Procedure.__len__": {
            "name": "__len__",
            "location": 242,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Procedure.__str__": {
            "name": "__str__",
            "location": 253,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Procedure.factors_all": {
            "name": "factors_all",
            "location": 270,
            "return": [
                "list[typing.Union[typing.Type,dict[str, str],int,float,str,dict[, ],tuple[typing.Union[typing.Any,typing.Any]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Procedure.recursive_terms": {
            "name": "recursive_terms",
            "location": 283,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Procedure.terms": {
            "name": "terms",
            "location": 299,
            "return": [
                "TermSequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "Procedure.generic_terms_by_str": {
            "name": "generic_terms_by_str",
            "location": 314,
            "return": [
                "dict[str, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Procedure.add_factor": {
            "name": "add_factor",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "incoming": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Procedure.with_factor": {
            "name": "with_factor",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "incoming": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Procedure.contradicts": {
            "name": "contradicts",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ],
                "context": [
                    "None",
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "Procedure.contradicts_some_to_all": {
            "name": "contradicts_some_to_all",
            "location": 379,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ],
                "context": [
                    "None",
                    "typing.Sequence[str]",
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "int",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Procedure._has_input_or_despite_factors_implied_by_all_inputs_of": {
            "name": "_has_input_or_despite_factors_implied_by_all_inputs_of",
            "location": 398,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "str"
                ],
                "context": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "Procedure._has_input_or_despite_factors_implying_all_inputs_of": {
            "name": "_has_input_or_despite_factors_implying_all_inputs_of",
            "location": 409,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "str"
                ],
                "context": [
                    "bool",
                    "str"
                ]
            }
        },
        "Procedure.explain_contradiction_some_to_all": {
            "name": "explain_contradiction_some_to_all",
            "location": 420,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "set[str]",
                    "None",
                    "str",
                    "bool",
                    "float"
                ],
                "context": [
                    "None",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]"
                ]
            }
        },
        "Procedure._explain_implication_all_to_all_of_procedure": {
            "name": "_explain_implication_all_to_all_of_procedure",
            "location": 451,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "None"
                ],
                "context": [
                    "dict[str, typing.Any]",
                    "dict[str, bool]"
                ]
            }
        },
        "Procedure.explain_implication_all_to_all": {
            "name": "explain_implication_all_to_all",
            "location": 475,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str"
                ],
                "context": [
                    "None",
                    "typing.Any",
                    "float"
                ]
            }
        },
        "Procedure.implies_all_to_all": {
            "name": "implies_all_to_all",
            "location": 483,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Sequence[str]",
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "typing.Callable[, ]",
                    "int"
                ],
                "context": [
                    "None",
                    "typing.Sequence[str]",
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "Procedure._explain_implication_of_procedure_all_to_some": {
            "name": "_explain_implication_of_procedure_all_to_some",
            "location": 507,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]",
                    "list[dict[, ]]",
                    "typing.Type",
                    "list[str]",
                    "str"
                ],
                "context": [
                    "int"
                ]
            }
        },
        "Procedure.explain_implication_all_to_some": {
            "name": "explain_implication_all_to_some",
            "location": 534,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "context": [
                    "None",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "Procedure.implies_all_to_some": {
            "name": "implies_all_to_some",
            "location": 547,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]",
                    "int",
                    "None"
                ],
                "context": [
                    "None",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "Procedure._implies_procedure_if_present": {
            "name": "_implies_procedure_if_present",
            "location": 573,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ],
                "context": [
                    "str",
                    "list[]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Procedure._implies_if_present": {
            "name": "_implies_if_present",
            "location": 598,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ],
                "context": [
                    "None"
                ]
            }
        },
        "Procedure._explanations_same_meaning_as_procedure": {
            "name": "_explanations_same_meaning_as_procedure",
            "location": 625,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Exception"
                ],
                "context": [
                    "list[typing.Any]",
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Procedure.explanations_same_meaning": {
            "name": "explanations_same_meaning",
            "location": 650,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "context": [
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Procedure.means": {
            "name": "means",
            "location": 663,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "None",
                    "typing.Callable[T, bool]"
                ],
                "context": [
                    "None",
                    "typing.Callable[T, bool]"
                ]
            }
        },
        "Procedure.new_context": {
            "name": "new_context",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "changes": [
                    "dict[str, set[str]]",
                    "dict[str, float]"
                ]
            }
        },
        "Procedure.set_inputs": {
            "name": "set_inputs",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factors": [
                    "bool",
                    "float"
                ]
            }
        },
        "Procedure.set_despite": {
            "name": "set_despite",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factors": [
                    "bool",
                    "float"
                ]
            }
        },
        "Procedure.set_outputs": {
            "name": "set_outputs",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factors": [
                    "typing.Callable[bytes, None]",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "Procedure.triggers_next_procedure": {
            "name": "triggers_next_procedure",
            "location": 711,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]",
                    "typing.Iterable[typing.Any]",
                    "typing.Type",
                    "typing.AbstractSet"
                ],
                "context": [
                    "None",
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "Procedure.__or__": {
            "name": "__or__",
            "location": 746,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Procedure.union": {
            "name": "union",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "None",
                    "typing.Iterable[]",
                    "float"
                ],
                "context": [
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Procedure.valid_for_exclusive_tag": {
            "name": "valid_for_exclusive_tag",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Procedure._explain_implication_all_to_all_of_procedure.other_outputs_implied": {
            "name": "other_outputs_implied",
            "location": 456,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "context": []
            }
        },
        "Procedure._explain_implication_all_to_all_of_procedure.self_inputs_implied": {
            "name": "self_inputs_implied",
            "location": 462,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "explanations": []
            }
        },
        "Procedure._explain_implication_of_procedure_all_to_some.other_outputs_implied": {
            "name": "other_outputs_implied",
            "location": 515,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "context": []
            }
        },
        "Procedure._explain_implication_of_procedure_all_to_some.other_despite_implied": {
            "name": "other_despite_implied",
            "location": 521,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "explanations": []
            }
        },
        "Procedure._implies_procedure_if_present.other_outputs_implied": {
            "name": "other_outputs_implied",
            "location": 576,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "context": []
            }
        },
        "Procedure._implies_procedure_if_present.other_inputs_implied": {
            "name": "other_inputs_implied",
            "location": 581,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "context": []
            }
        },
        "Procedure._implies_procedure_if_present.other_despite_implied": {
            "name": "other_despite_implied",
            "location": 586,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "context": []
            }
        },
        "Procedure._explanations_same_meaning_as_procedure.same_outputs": {
            "name": "same_outputs",
            "location": 628,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "context": []
            }
        },
        "Procedure._explanations_same_meaning_as_procedure.same_inputs": {
            "name": "same_inputs",
            "location": 634,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "contexts": []
            }
        },
        "Procedure._explanations_same_meaning_as_procedure.same_despite": {
            "name": "same_despite",
            "location": 641,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "contexts": []
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/rules.py": {
        "Rule.validate_enactment_groups": {
            "name": "validate_enactment_groups",
            "location": 97,
            "return": [
                "list[]",
                "list[float]",
                "list[str]",
                "EnactmentGroup",
                "dict[typing.Text, list[EnactmentPassage]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]"
                ],
                "v": [
                    "list[]",
                    "tuple[]"
                ]
            }
        },
        "Rule.select_enactment_text": {
            "name": "select_enactment_text",
            "location": 113,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "v": []
            }
        },
        "Rule.despite": {
            "name": "despite",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rule.inputs": {
            "name": "inputs",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rule.outputs": {
            "name": "outputs",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rule.recursive_terms": {
            "name": "recursive_terms",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rule.add": {
            "name": "add",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "context": [
                    "None"
                ]
            }
        },
        "Rule.__add__": {
            "name": "__add__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "list[str]",
                    "typing.AbstractSet",
                    "str"
                ]
            }
        },
        "Rule.get_contrapositives": {
            "name": "get_contrapositives",
            "location": 208,
            "return": [
                "typing.Generator[typing.Union[dict[str, str],str,list[list[str]],list[str]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.terms": {
            "name": "terms",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rule.generic_terms_by_str": {
            "name": "generic_terms_by_str",
            "location": 247,
            "return": [
                "dict[str, Rule]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.add_enactment": {
            "name": "add_enactment",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "incoming": [
                    "float"
                ]
            }
        },
        "Rule.add_enactment_despite": {
            "name": "add_enactment_despite",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "incoming": [
                    "float"
                ]
            }
        },
        "Rule.with_enactment": {
            "name": "with_enactment",
            "location": 290,
            "return": [
                "list[int]",
                "typing.DefaultDict",
                "dict[typing.Any, str]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "incoming": [
                    "float"
                ]
            }
        },
        "Rule.with_enactment_despite": {
            "name": "with_enactment_despite",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "incoming": [
                    "float"
                ]
            }
        },
        "Rule.add_factor": {
            "name": "add_factor",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "incoming": [
                    "int"
                ]
            }
        },
        "Rule.with_factor": {
            "name": "with_factor",
            "location": 336,
            "return": [
                "None",
                "dict[int, str]",
                "dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "incoming": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Rule.comparable_with": {
            "name": "comparable_with",
            "location": 353,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "list[T]"
                ]
            }
        },
        "Rule.contradicts": {
            "name": "contradicts",
            "location": 361,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "typing.Iterable[typing.Any]"
                ],
                "context": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "Rule._explanations_contradiction": {
            "name": "_explanations_contradiction",
            "location": 397,
            "return": [
                "typing.Generator[typing.Union[int,list[int],str,float,list[list[int]],list[]]]",
                "typing.Generator[typing.Generator[]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ],
                "context": []
            }
        },
        "Rule.explanations_contradiction": {
            "name": "explanations_contradiction",
            "location": 416,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "context": [
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Rule.needs_subset_of_enactments": {
            "name": "needs_subset_of_enactments",
            "location": 425,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Rule.explanations_implication": {
            "name": "explanations_implication",
            "location": 447,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "context": [
                    "None"
                ]
            }
        },
        "Rule.implies": {
            "name": "implies",
            "location": 472,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "context": []
            }
        },
        "Rule.__ge__": {
            "name": "__ge__",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Rule.__len__": {
            "name": "__len__",
            "location": 509,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rule.has_all_same_enactments": {
            "name": "has_all_same_enactments",
            "location": 520,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Rule.explanations_same_meaning": {
            "name": "explanations_same_meaning",
            "location": 538,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "context": [
                    "None",
                    "float"
                ]
            }
        },
        "Rule.means": {
            "name": "means",
            "location": 553,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "None",
                    "str"
                ],
                "context": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "Rule._union_with_rule": {
            "name": "_union_with_rule",
            "location": 568,
            "return": [
                "None",
                "Rule"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "None"
                ],
                "context": [
                    "None"
                ]
            }
        },
        "Rule.union": {
            "name": "union",
            "location": 598,
            "return": [
                "Rule"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "None"
                ],
                "context": [
                    "None"
                ]
            }
        },
        "Rule.__or__": {
            "name": "__or__",
            "location": 611,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Rule.set_inputs": {
            "name": "set_inputs",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factors": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "Rule.set_despite": {
            "name": "set_despite",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factors": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "Rule.set_outputs": {
            "name": "set_outputs",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factors": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Rule.set_enactments": {
            "name": "set_enactments",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enactments": [
                    "bool",
                    "float"
                ]
            }
        },
        "Rule.set_enactments_despite": {
            "name": "set_enactments_despite",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enactments": [
                    "bool",
                    "float"
                ]
            }
        },
        "Rule.__str__": {
            "name": "__str__",
            "location": 666,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/__init__.py": {},
    "AuthoritySpoke-master/authorityspoke/io/fake_enactments.py": {
        "FakeClient.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "responses": [
                    "list[dict[, ]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FakeClient.from_file": {
            "name": "from_file",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "None",
                    "bytes",
                    "typing.Type"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "FakeClient.get_entry_closest_to_cited_path": {
            "name": "get_entry_closest_to_cited_path",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "FakeClient.search_tree_for_path": {
            "name": "search_tree_for_path",
            "location": 74,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "branch": [
                    "str"
                ]
            }
        },
        "FakeClient.fetch": {
            "name": "fetch",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "date": [
                    "typing.Text"
                ]
            }
        },
        "FakeClient._fetch_from_url": {
            "name": "_fetch_from_url",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "FakeClient.read": {
            "name": "read",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ],
                "date": [
                    "typing.Text"
                ]
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/io/filepaths.py": {
        "make_filepath": {
            "name": "make_filepath",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "filename": [
                    "None",
                    "str"
                ],
                "directory": [
                    "int"
                ],
                "filepath": [
                    "None",
                    "str"
                ],
                "default_folder": [
                    "typing.Text"
                ]
            }
        },
        "get_directory_path": {
            "name": "get_directory_path",
            "location": 40,
            "return": [],
            "arguments": {
                "stem": [
                    "typing.Iterable[str]",
                    "str"
                ]
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/io/loaders.py": {
        "load_holdings": {
            "name": "load_holdings",
            "location": 23,
            "return": [],
            "arguments": {
                "filename": [
                    "None"
                ],
                "directory": [
                    "None"
                ],
                "filepath": [
                    "None"
                ]
            }
        },
        "read_holdings_from_file": {
            "name": "read_holdings_from_file",
            "location": 61,
            "return": [],
            "arguments": {
                "filename": [
                    "None"
                ],
                "directory": [
                    "None"
                ],
                "filepath": [
                    "None"
                ],
                "client": [
                    "None"
                ]
            }
        },
        "read_anchored_holdings_from_file": {
            "name": "read_anchored_holdings_from_file",
            "location": 89,
            "return": [],
            "arguments": {
                "filename": [
                    "None"
                ],
                "directory": [
                    "None"
                ],
                "filepath": [
                    "None"
                ],
                "client": [
                    "None"
                ]
            }
        },
        "load_decision": {
            "name": "load_decision",
            "location": 127,
            "return": [],
            "arguments": {
                "filename": [
                    "None"
                ],
                "directory": [
                    "None"
                ],
                "filepath": [
                    "None"
                ]
            }
        },
        "load_decision_as_reading": {
            "name": "load_decision_as_reading",
            "location": 157,
            "return": [],
            "arguments": {
                "filename": [
                    "None"
                ],
                "directory": [
                    "None"
                ],
                "filepath": [
                    "None"
                ]
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/io/name_index.py": {
        "assign_name_from_content": {
            "name": "assign_name_from_content",
            "location": 68,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "assign_name_for_evidence": {
            "name": "assign_name_for_evidence",
            "location": 97,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "assign_name_for_pleading": {
            "name": "assign_name_for_pleading",
            "location": 113,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "create_name_for_enactment": {
            "name": "create_name_for_enactment",
            "location": 127,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "create_name_for_enactment_passage": {
            "name": "create_name_for_enactment_passage",
            "location": 141,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "create_name_for_factor": {
            "name": "create_name_for_factor",
            "location": 154,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "ensure_factor_has_name": {
            "name": "ensure_factor_has_name",
            "location": 198,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "update_name_index_from_terms": {
            "name": "update_name_index_from_terms",
            "location": 213,
            "return": [],
            "arguments": {
                "terms": [],
                "mentioned": []
            }
        },
        "update_name_index_from_bracketed_phrases": {
            "name": "update_name_index_from_bracketed_phrases",
            "location": 245,
            "return": [],
            "arguments": {
                "content": [],
                "mentioned": []
            }
        },
        "update_name_index_from_fact_content": {
            "name": "update_name_index_from_fact_content",
            "location": 260,
            "return": [],
            "arguments": {
                "obj": [],
                "mentioned": []
            }
        },
        "update_name_index_with_factor": {
            "name": "update_name_index_with_factor",
            "location": 297,
            "return": [],
            "arguments": {
                "obj": [],
                "mentioned": []
            }
        },
        "collect_mentioned": {
            "name": "collect_mentioned",
            "location": 338,
            "return": [],
            "arguments": {
                "obj": [],
                "mentioned": [],
                "ignore": []
            }
        },
        "collect_enactments": {
            "name": "collect_enactments",
            "location": 389,
            "return": [],
            "arguments": {
                "obj": [],
                "mentioned": [],
                "ignore": []
            }
        },
        "index_names": {
            "name": "index_names",
            "location": 410,
            "return": [],
            "arguments": {
                "record": []
            }
        },
        "Mentioned.insert_by_name": {
            "name": "insert_by_name",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Mentioned.get_by_name": {
            "name": "get_by_name",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Mentioned.get_if_present": {
            "name": "get_if_present",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Mentioned.sorted_by_length": {
            "name": "sorted_by_length",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mentioned.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/io/nesting.py": {
        "nest_fields": {
            "name": "nest_fields",
            "location": 6,
            "return": [],
            "arguments": {
                "data": [],
                "nest": [],
                "eggs": []
            }
        },
        "walk_tree_and_modify": {
            "name": "walk_tree_and_modify",
            "location": 16,
            "return": [],
            "arguments": {
                "obj": [],
                "func": [],
                "ignore": []
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/io/readers.py": {
        "collect_anchors_from_index": {
            "name": "collect_anchors_from_index",
            "location": 46,
            "return": [],
            "arguments": {
                "object_index": [],
                "field_name": []
            }
        },
        "read_holdings_with_anchors": {
            "name": "read_holdings_with_anchors",
            "location": 61,
            "return": [],
            "arguments": {
                "record": [],
                "client": []
            }
        },
        "expand_factor": {
            "name": "expand_factor",
            "location": 97,
            "return": [],
            "arguments": {
                "record": [],
                "factor_index": []
            }
        },
        "expand_names": {
            "name": "expand_names",
            "location": 124,
            "return": [],
            "arguments": {
                "record": [],
                "factor_index": []
            }
        },
        "expand_enactments": {
            "name": "expand_enactments",
            "location": 142,
            "return": [],
            "arguments": {
                "record": [],
                "enactment_index": []
            }
        },
        "walk_tree_and_expand": {
            "name": "walk_tree_and_expand",
            "location": 160,
            "return": [],
            "arguments": {
                "obj": [],
                "mentioned": [],
                "ignore": []
            }
        },
        "expand_holding": {
            "name": "expand_holding",
            "location": 198,
            "return": [],
            "arguments": {
                "record": [],
                "factor_index": [],
                "enactment_index": []
            }
        },
        "expand_holdings": {
            "name": "expand_holdings",
            "location": 210,
            "return": [],
            "arguments": {
                "record": [],
                "factor_index": [],
                "enactment_index": []
            }
        },
        "extract_anchors_from_holding_record": {
            "name": "extract_anchors_from_holding_record",
            "location": 228,
            "return": [],
            "arguments": {
                "record": [],
                "client": []
            }
        },
        "read_holdings": {
            "name": "read_holdings",
            "location": 296,
            "return": [],
            "arguments": {
                "record": [],
                "client": []
            }
        },
        "read_decision": {
            "name": "read_decision",
            "location": 323,
            "return": [],
            "arguments": {
                "decision": []
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/io/text_expansion.py": {
        "expand_shorthand": {
            "name": "expand_shorthand",
            "location": 13,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "expand_node_shorthand": {
            "name": "expand_node_shorthand",
            "location": 20,
            "return": [],
            "arguments": {
                "obj": [
                    "dict[, ]"
                ]
            }
        },
        "collapse_known_factors": {
            "name": "collapse_known_factors",
            "location": 34,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "replace_brackets_with_placeholder": {
            "name": "replace_brackets_with_placeholder",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "content": [
                    "str"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "collapse_name_in_content": {
            "name": "collapse_name_in_content",
            "location": 63,
            "return": [
                "str",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "content": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "add_found_context_with_brackets": {
            "name": "add_found_context_with_brackets",
            "location": 73,
            "return": [
                "tuple[typing.Union[str,tuple[str],dict[str, str],list[typing.Union[typing.Any,typing.Any]],list[tuple[typing.Union[str,str]]],list[str],list[typing.Union[str,int,list[str]]]]]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "tuple[str]"
                ],
                "terms": [
                    "list[str]"
                ],
                "factor": [
                    "str",
                    "list[str]"
                ],
                "placeholder": [
                    "typing.Text"
                ]
            }
        },
        "add_found_context": {
            "name": "add_found_context",
            "location": 93,
            "return": [
                "tuple[typing.Union[str,list[str],list[typing.Union[str,int,list[]]]]]"
            ],
            "arguments": {
                "content": [
                    "str"
                ],
                "terms": [
                    "list[str]"
                ],
                "factor": [
                    "str",
                    "list[]"
                ]
            }
        },
        "get_references_from_string": {
            "name": "get_references_from_string",
            "location": 126,
            "return": [
                "tuple[typing.Union[str,None,int,typing.Container,tuple[typing.Union[typing.Any,typing.Any]],list[]]]"
            ],
            "arguments": {
                "content": [
                    "int",
                    "typing.Container"
                ],
                "terms": [
                    "str",
                    "bool"
                ]
            }
        },
        "wrap_single_element_in_list": {
            "name": "wrap_single_element_in_list",
            "location": 163,
            "return": [],
            "arguments": {
                "data": [],
                "many_element": [
                    "bytes",
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/io/writers.py": {
        "case_to_file": {
            "name": "case_to_file",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "case": [],
                "filename": [
                    "None",
                    "str",
                    "int"
                ],
                "directory": [
                    "None",
                    "str",
                    "int"
                ],
                "filepath": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "AuthoritySpoke-master/authorityspoke/io/__init__.py": {},
    "AuthoritySpoke-master/docs/conf.py": {},
    "AuthoritySpoke-master/example_data/to_yaml.py": {
        "convert_json_file_to_yaml": {
            "name": "convert_json_file_to_yaml",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "make_yaml_holding_files": {
            "name": "make_yaml_holding_files",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "AuthoritySpoke-master/tests/conftest.py": {
        "vcr_config": {
            "name": "vcr_config",
            "location": 37,
            "return": [
                "dict[typing.Text, list[tuple[typing.Text]]]"
            ],
            "arguments": {}
        },
        "test_client": {
            "name": "test_client",
            "location": 45,
            "return": [
                "Client"
            ],
            "arguments": {}
        },
        "section6d": {
            "name": "section6d",
            "location": 63,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,None,list[dict[typing.Text, typing.Union[typing.Text,list[],None]]]]]"
            ],
            "arguments": {}
        },
        "section_11_subdivided": {
            "name": "section_11_subdivided",
            "location": 96,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[int,typing.Text]],None,list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[int,typing.Text]],None,list[]]]]]]"
            ],
            "arguments": {}
        },
        "fifth_a": {
            "name": "fifth_a",
            "location": 200,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[],None,bool]]"
            ],
            "arguments": {}
        },
        "make_entity": {
            "name": "make_entity",
            "location": 215,
            "return": [
                "dict[typing.Text, Entity]"
            ],
            "arguments": {}
        },
        "make_predicate": {
            "name": "make_predicate",
            "location": 235,
            "return": [
                "dict[typing.Text, typing.Union[Predicate,Comparison]]"
            ],
            "arguments": {}
        },
        "watt_mentioned": {
            "name": "watt_mentioned",
            "location": 420,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "make_entity": []
            }
        },
        "watt_factor": {
            "name": "watt_factor",
            "location": 426,
            "return": [],
            "arguments": {
                "make_predicate": [],
                "make_entity": [],
                "watt_mentioned": []
            }
        },
        "make_factor": {
            "name": "make_factor",
            "location": 519,
            "return": [],
            "arguments": {
                "make_predicate": [],
                "make_entity": []
            }
        },
        "make_exhibit": {
            "name": "make_exhibit",
            "location": 581,
            "return": [
                "dict[typing.Text, Exhibit]"
            ],
            "arguments": {
                "make_entity": [],
                "make_predicate": [],
                "make_factor": [],
                "watt_factor": [],
                "make_complex_fact": []
            }
        },
        "make_complex_fact": {
            "name": "make_complex_fact",
            "location": 704,
            "return": [
                "dict[typing.Text, Fact]"
            ],
            "arguments": {
                "make_predicate": [],
                "make_factor": []
            }
        },
        "make_fact_about_exhibit": {
            "name": "make_fact_about_exhibit",
            "location": 744,
            "return": [
                "dict[typing.Text, Fact]"
            ],
            "arguments": {
                "make_predicate": [],
                "make_exhibit": []
            }
        },
        "make_complex_rule": {
            "name": "make_complex_rule",
            "location": 758,
            "return": [
                "dict[typing.Text, Rule]"
            ],
            "arguments": {
                "make_factor": [],
                "make_exhibit": [],
                "make_complex_fact": [],
                "make_fact_about_exhibit": []
            }
        },
        "make_evidence": {
            "name": "make_evidence",
            "location": 824,
            "return": [
                "dict[typing.Text, Evidence]"
            ],
            "arguments": {
                "make_predicate": [],
                "make_factor": [],
                "watt_factor": [],
                "make_exhibit": []
            }
        },
        "make_pleading": {
            "name": "make_pleading",
            "location": 885,
            "return": [
                "dict[typing.Text, Pleading]"
            ],
            "arguments": {
                "make_entity": []
            }
        },
        "make_allegation": {
            "name": "make_allegation",
            "location": 890,
            "return": [
                "dict[typing.Text, Allegation]"
            ],
            "arguments": {
                "make_pleading": [],
                "make_factor": []
            }
        },
        "make_selector": {
            "name": "make_selector",
            "location": 899,
            "return": [
                "dict[typing.Text, TextQuoteSelector]"
            ],
            "arguments": {}
        },
        "make_response": {
            "name": "make_response",
            "location": 917,
            "return": [],
            "arguments": {}
        },
        "fake_usc_client": {
            "name": "fake_usc_client",
            "location": 928,
            "return": [],
            "arguments": {}
        },
        "beard_response": {
            "name": "beard_response",
            "location": 933,
            "return": [],
            "arguments": {}
        },
        "fake_beard_client": {
            "name": "fake_beard_client",
            "location": 944,
            "return": [],
            "arguments": {}
        },
        "e_fourth_a": {
            "name": "e_fourth_a",
            "location": 949,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_search_clause": {
            "name": "e_search_clause",
            "location": 956,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_warrants_clause": {
            "name": "e_warrants_clause",
            "location": 964,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_due_process_5": {
            "name": "e_due_process_5",
            "location": 971,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_due_process_14": {
            "name": "e_due_process_14",
            "location": 978,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_securing_for_authors": {
            "name": "e_securing_for_authors",
            "location": 986,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_securing_exclusive_right_to_writings": {
            "name": "e_securing_exclusive_right_to_writings",
            "location": 999,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_and_inventors": {
            "name": "e_and_inventors",
            "location": 1009,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_right_to_writings": {
            "name": "e_right_to_writings",
            "location": 1016,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_copyright_protection": {
            "name": "e_copyright_protection",
            "location": 1023,
            "return": [],
            "arguments": {
                "make_response": [],
                "make_selector": []
            }
        },
        "e_copyright_requires_originality": {
            "name": "e_copyright_requires_originality",
            "location": 1030,
            "return": [],
            "arguments": {
                "make_response": [],
                "make_selector": []
            }
        },
        "e_copyright": {
            "name": "e_copyright",
            "location": 1037,
            "return": [],
            "arguments": {
                "make_response": [],
                "make_selector": []
            }
        },
        "e_copyright_exceptions": {
            "name": "e_copyright_exceptions",
            "location": 1044,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_copyright_exceptions_full": {
            "name": "e_copyright_exceptions_full",
            "location": 1051,
            "return": [
                "Enactment"
            ],
            "arguments": {
                "make_response": []
            }
        },
        "e_in_no_case": {
            "name": "e_in_no_case",
            "location": 1057,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_method_of_operation": {
            "name": "e_method_of_operation",
            "location": 1066,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_compilation": {
            "name": "e_compilation",
            "location": 1073,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "e_preexisting_material": {
            "name": "e_preexisting_material",
            "location": 1080,
            "return": [],
            "arguments": {
                "make_response": []
            }
        },
        "make_procedure": {
            "name": "make_procedure",
            "location": 1092,
            "return": [],
            "arguments": {
                "make_evidence": [],
                "make_factor": [],
                "watt_factor": []
            }
        },
        "real_holding": {
            "name": "real_holding",
            "location": 1262,
            "return": [
                "dict[typing.Text, Holding]"
            ],
            "arguments": {
                "make_procedure": [],
                "e_search_clause": []
            }
        },
        "make_rule": {
            "name": "make_rule",
            "location": 1287,
            "return": [],
            "arguments": {
                "make_procedure": [],
                "e_fourth_a": [],
                "e_search_clause": [],
                "e_due_process_5": []
            }
        },
        "make_beard_rule": {
            "name": "make_beard_rule",
            "location": 1488,
            "return": [
                "list[]"
            ],
            "arguments": {
                "beard_response": []
            }
        },
        "make_holding": {
            "name": "make_holding",
            "location": 1497,
            "return": [
                "dict[typing.Text, Holding]"
            ],
            "arguments": {
                "make_rule": []
            }
        },
        "load_decisions_for_fixtures": {
            "name": "load_decisions_for_fixtures",
            "location": 1550,
            "return": [
                "dict[typing.Text, Decision]"
            ],
            "arguments": {}
        },
        "make_decision": {
            "name": "make_decision",
            "location": 1560,
            "return": [],
            "arguments": {}
        },
        "make_anchored_holding": {
            "name": "make_anchored_holding",
            "location": 1565,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "make_response": [],
                "make_decision": []
            }
        },
        "make_decision_with_holding": {
            "name": "make_decision_with_holding",
            "location": 1577,
            "return": [
                "dict[, DecisionReading]"
            ],
            "arguments": {
                "make_response": [],
                "make_decision": [],
                "make_anchored_holding": []
            }
        },
        "make_opinion": {
            "name": "make_opinion",
            "location": 1597,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "make_decision": []
            }
        },
        "make_opinion_with_holding": {
            "name": "make_opinion_with_holding",
            "location": 1606,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "make_decision_with_holding": []
            }
        },
        "make_analysis": {
            "name": "make_analysis",
            "location": 1615,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, dict[typing.Text, typing.Text]]]]"
            ],
            "arguments": {}
        },
        "raw_factor": {
            "name": "raw_factor",
            "location": 1641,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]]]]]"
            ],
            "arguments": {}
        },
        "raw_holding": {
            "name": "raw_holding",
            "location": 1663,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text],bool]]],dict[typing.Text, typing.Union[dict[typing.Text, list[dict[typing.Text, typing.Text]]],list[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]]]]]]]"
            ],
            "arguments": {}
        },
        "make_context_register": {
            "name": "make_context_register",
            "location": 1699,
            "return": [
                "ContextRegister"
            ],
            "arguments": {}
        }
    },
    "AuthoritySpoke-master/tests/test_codes.py": {
        "TestCodes.test_cfr_repr": {
            "name": "test_cfr_repr",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCodes.test_us_code_title": {
            "name": "test_us_code_title",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCodes.test_const_code_title": {
            "name": "test_const_code_title",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCodes.test_acts_code_title": {
            "name": "test_acts_code_title",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCodes.test_code_select_text": {
            "name": "test_code_select_text",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestCodes.test_code_select_text_chapeau": {
            "name": "test_code_select_text_chapeau",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestCodes.test_get_bill_of_rights_effective_date": {
            "name": "test_get_bill_of_rights_effective_date",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestCodes.test_text_interval_constitution_section": {
            "name": "test_text_interval_constitution_section",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestCodes.test_text_interval_beyond_end_of_section": {
            "name": "test_text_interval_beyond_end_of_section",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestCodes.test_bad_section": {
            "name": "test_bad_section",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestCodes.test_text_interval_bad_selector": {
            "name": "test_text_interval_bad_selector",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_selector": [],
                "make_response": []
            }
        }
    },
    "AuthoritySpoke-master/tests/test_context.py": {
        "TestContextRegisters.test_possible_context_without_empty_spaces": {
            "name": "test_possible_context_without_empty_spaces",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ],
                "make_entity": []
            }
        },
        "TestContextRegisters.test_all_possible_contexts_identical_factor": {
            "name": "test_all_possible_contexts_identical_factor",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ],
                "make_entity": [
                    "str",
                    "typing.Type",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "TestContextRegisters.test_context_not_equal_to_list": {
            "name": "test_context_not_equal_to_list",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextRegisters.test_cannot_update_context_register_from_lists": {
            "name": "test_cannot_update_context_register_from_lists",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContextRegisters.test_limited_possible_contexts_identical_factor": {
            "name": "test_limited_possible_contexts_identical_factor",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ],
                "make_entity": []
            }
        },
        "TestContextRegisters.test_context_register_empty": {
            "name": "test_context_register_empty",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": [
                    "str"
                ],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestContextRegisters.test_context_register_valid": {
            "name": "test_context_register_valid",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestContextRegisters.test_import_to_context_register": {
            "name": "test_import_to_context_register",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str",
                    "list[str]"
                ],
                "watt_factor": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "TestContextRegisters.test_import_to_mapping_no_change": {
            "name": "test_import_to_mapping_no_change",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "TestContextRegisters.test_import_to_mapping_conflict": {
            "name": "test_import_to_mapping_conflict",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "list[list[typing.Any]]",
                    "list[]",
                    "list[str]",
                    "list[dict[str, str]]",
                    "str"
                ]
            }
        },
        "TestContextRegisters.test_import_to_mapping_reciprocal": {
            "name": "test_import_to_mapping_reciprocal",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestContextRegisters.test_registers_for_interchangeable_context": {
            "name": "test_registers_for_interchangeable_context",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str",
                    "int",
                    "dict[str, object]"
                ],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestLikelyContext.test_likely_context_one_factor": {
            "name": "test_likely_context_one_factor",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestLikelyContext.test_likely_context_implication_one_factor": {
            "name": "test_likely_context_implication_one_factor",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestLikelyContext.test_likely_context_two_factors": {
            "name": "test_likely_context_two_factors",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestLikelyContext.test_likely_context_two_by_two": {
            "name": "test_likely_context_two_by_two",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestLikelyContext.test_likely_context_different_terms": {
            "name": "test_likely_context_different_terms",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestLikelyContext.test_likely_context_from_factor_meaning": {
            "name": "test_likely_context_from_factor_meaning",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestLikelyContext.test_union_one_generic_not_matched": {
            "name": "test_union_one_generic_not_matched",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestChangeRegisters.test_reverse_key_and_value_of_register": {
            "name": "test_reverse_key_and_value_of_register",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChangeRegisters.test_factor_pairs": {
            "name": "test_factor_pairs",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/tests/test_decisions.py": {
        "TestDecision.test_decision_string": {
            "name": "test_decision_string",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": [
                    "str"
                ]
            }
        },
        "TestDecision.test_decision_no_opinions": {
            "name": "test_decision_no_opinions",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecision.test_decision_reading_with_opinion_instead_of_decision": {
            "name": "test_decision_reading_with_opinion_instead_of_decision",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion": []
            }
        },
        "TestDecision.test_posit_holdings": {
            "name": "test_posit_holdings",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": [
                    "str"
                ],
                "make_holding": [
                    "str"
                ]
            }
        },
        "TestDecision.test_make_reading_with_holdings": {
            "name": "test_make_reading_with_holdings",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": [
                    "str"
                ],
                "make_holding": [
                    "str"
                ]
            }
        },
        "TestDecision.test_make_reading_with_anchored_holdings": {
            "name": "test_make_reading_with_anchored_holdings",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": [
                    "str"
                ],
                "make_anchored_holding": [
                    "str"
                ]
            }
        },
        "TestDecision.test_need_reading_to_posit_holding": {
            "name": "test_need_reading_to_posit_holding",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestDecision.test_decision_reading_has_opinion_readings": {
            "name": "test_decision_reading_has_opinion_readings",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": [
                    "str"
                ],
                "make_holding": [
                    "str"
                ]
            }
        },
        "TestDecision.test_decision_posits_holding": {
            "name": "test_decision_posits_holding",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": [],
                "make_decision": [
                    "str"
                ]
            }
        },
        "TestDecision.test_decision_with_opinion_reading_posits_holding": {
            "name": "test_decision_with_opinion_reading_posits_holding",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestDecision.test_error_decision_with_no_majority_posits_holding": {
            "name": "test_error_decision_with_no_majority_posits_holding",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestDecision.test_add_opinion_to_decision": {
            "name": "test_add_opinion_to_decision",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": [
                    "str",
                    "bool"
                ],
                "make_opinion": [],
                "make_opinion_with_holding": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestDecision.test_add_opinion_with_holdings": {
            "name": "test_add_opinion_with_holdings",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": [
                    "str"
                ],
                "make_opinion": [
                    "str",
                    "list[str]"
                ],
                "make_opinion_with_holding": []
            }
        },
        "TestImplication.test_implication_of_decision_with_one_of_same_holdings": {
            "name": "test_implication_of_decision_with_one_of_same_holdings",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": [],
                "make_decision_with_holding": []
            }
        },
        "TestImplication.test_decision_implied_by_holding": {
            "name": "test_decision_implied_by_holding",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": [
                    "str"
                ],
                "make_holding": [
                    "str"
                ]
            }
        },
        "TestImplication.test_decision_explain_implication": {
            "name": "test_decision_explain_implication",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ],
                "make_holding": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "TestImplication.test_decision_no_explanation_implication": {
            "name": "test_decision_no_explanation_implication",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": []
            }
        },
        "TestImplication.test_typeerror_to_compare_with_factor": {
            "name": "test_typeerror_to_compare_with_factor",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [],
                "make_factor": []
            }
        },
        "TestImplication.test_decision_implies_decision_without_holdings": {
            "name": "test_decision_implies_decision_without_holdings",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ],
                "make_decision": [
                    "str"
                ]
            }
        },
        "TestImplication.test_no_holdings_of_blank_decision": {
            "name": "test_no_holdings_of_blank_decision",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_decision_implies_its_opinion": {
            "name": "test_decision_implies_its_opinion",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        },
        "TestImplication.test_opinion_implies_its_decision": {
            "name": "test_opinion_implies_its_decision",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        },
        "TestImplication.test_decision_implies_holding_and_rule": {
            "name": "test_decision_implies_holding_and_rule",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        },
        "TestImplication.test_decision_does_not_imply_procedure": {
            "name": "test_decision_does_not_imply_procedure",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [],
                "make_decision_with_holding": []
            }
        },
        "TestImplication.test_opinion_implies_decision": {
            "name": "test_opinion_implies_decision",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        },
        "TestImplication.test_rule_implied_by_decision": {
            "name": "test_rule_implied_by_decision",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        },
        "TestImplication.test_decision_not_implied_by_rule": {
            "name": "test_decision_not_implied_by_rule",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        },
        "TestContradiction.test_oracle_contradicts_lotus": {
            "name": "test_oracle_contradicts_lotus",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_explanations": {
            "name": "test_no_contradiction_explanations",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "tuple[typing.Union[float,float,float,float,float]]"
                ]
            }
        },
        "TestContradiction.test_cannot_check_contradiction_of_str": {
            "name": "test_cannot_check_contradiction_of_str",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": []
            }
        },
        "TestContradiction.test_no_contradiction_with_plurality": {
            "name": "test_no_contradiction_with_plurality",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "tuple[typing.Union[float,float,float,float,float]]"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_of_majority_without_holdings": {
            "name": "test_no_contradiction_of_majority_without_holdings",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        },
        "TestContradiction.test_decision_contradicts_holding": {
            "name": "test_decision_contradicts_holding",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        }
    },
    "AuthoritySpoke-master/tests/test_enactments.py": {
        "TestEnactments.test_make_enactment": {
            "name": "test_make_enactment",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_search_clause": []
            }
        },
        "TestEnactments.test_create_enactment_with_init": {
            "name": "test_create_enactment_with_init",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestEnactments.test_make_enactment_from_selector_without_code": {
            "name": "test_make_enactment_from_selector_without_code",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestEnactments.test_make_enactment_from_dict_with_reader": {
            "name": "test_make_enactment_from_dict_with_reader",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestEnactments.test_passage_from_imported_statute": {
            "name": "test_passage_from_imported_statute",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestEnactments.test_chapeau_and_subsections_from_uslm_code": {
            "name": "test_chapeau_and_subsections_from_uslm_code",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestEnactments.test_cite_path_in_str": {
            "name": "test_cite_path_in_str",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_search_clause": []
            }
        },
        "TestEnactments.test_unequal_to_statement": {
            "name": "test_unequal_to_statement",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [],
                "e_copyright": []
            }
        },
        "TestEnactments.test_equal_enactment_text": {
            "name": "test_equal_enactment_text",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_due_process_5": [],
                "e_due_process_14": []
            }
        },
        "TestEnactments.test_not_gt_if_equal": {
            "name": "test_not_gt_if_equal",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_search_clause": []
            }
        },
        "TestEnactments.test_enactment_subset_or_equal": {
            "name": "test_enactment_subset_or_equal",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_due_process_5": [],
                "e_due_process_14": []
            }
        },
        "TestEnactments.test_unequal_enactment_text": {
            "name": "test_unequal_enactment_text",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_search_clause": [],
                "e_fourth_a": []
            }
        },
        "TestEnactments.test_enactment_subset": {
            "name": "test_enactment_subset",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_search_clause": [],
                "e_fourth_a": []
            }
        },
        "TestEnactments.test_comparison_to_factor_false": {
            "name": "test_comparison_to_factor_false",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_due_process_5": [],
                "watt_factor": []
            }
        },
        "TestEnactments.test_implication_of_factor_fails": {
            "name": "test_implication_of_factor_fails",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_due_process_5": [],
                "watt_factor": []
            }
        },
        "TestEnactments.test_implication_by_factor_fails": {
            "name": "test_implication_by_factor_fails",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_due_process_5": [],
                "watt_factor": []
            }
        },
        "TestEnactments.test_read_constitution_for_effective_date": {
            "name": "test_read_constitution_for_effective_date",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestEnactments.test_bill_of_rights_effective_date": {
            "name": "test_bill_of_rights_effective_date",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_search_clause": []
            }
        },
        "TestEnactments.test_date_and_text_from_path_and_regime": {
            "name": "test_date_and_text_from_path_and_regime",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestEnactments.test_compare_effective_dates": {
            "name": "test_compare_effective_dates",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_due_process_5": [],
                "e_due_process_14": []
            }
        },
        "TestEnactments.test_invalid_selector_text": {
            "name": "test_invalid_selector_text",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_selector": []
            }
        },
        "TestEnactments.test_add_overlapping_enactments": {
            "name": "test_add_overlapping_enactments",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_search_clause": [],
                "e_warrants_clause": []
            }
        },
        "TestEnactments.test_add_shorter_plus_longer": {
            "name": "test_add_shorter_plus_longer",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_fourth_a": [],
                "e_search_clause": []
            }
        },
        "TestEnactments.test_add_longer_plus_shorter": {
            "name": "test_add_longer_plus_shorter",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_fourth_a": [],
                "e_search_clause": []
            }
        },
        "TestEnactments.test_consolidate_adjacent_passages": {
            "name": "test_consolidate_adjacent_passages",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestEnactments.test_do_not_consolidate_from_different_sections": {
            "name": "test_do_not_consolidate_from_different_sections",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestEnactments.test_cannot_add_fact_to_enactment": {
            "name": "test_cannot_add_fact_to_enactment",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [],
                "e_search_clause": []
            }
        },
        "TestEnactments.test_cannot_add_enactment_to_statement": {
            "name": "test_cannot_add_enactment_to_statement",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_search_clause": []
            }
        },
        "TestEnactments.test_cannot_add_statement_to_enactment": {
            "name": "test_cannot_add_statement_to_enactment",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_search_clause": []
            }
        },
        "TestEnactments.test_cant_add_enactment_that_is_not_ancestor_or_descendant": {
            "name": "test_cant_add_enactment_that_is_not_ancestor_or_descendant",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_search_clause": [],
                "e_copyright": []
            }
        },
        "TestDump.test_dump_json": {
            "name": "test_dump_json",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestDump.test_round_trip_dict": {
            "name": "test_round_trip_dict",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestTextSelection.test_code_from_selector": {
            "name": "test_code_from_selector",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestTextSelection.test_usc_selection": {
            "name": "test_usc_selection",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_selector": [],
                "fake_usc_client": []
            }
        },
        "TestTextSelection.test_omit_terminal_slash": {
            "name": "test_omit_terminal_slash",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestTextSelection.test_add_omitted_initial_slash": {
            "name": "test_add_omitted_initial_slash",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestTextSelection.test_whitespace_when_selecting_with_suffix": {
            "name": "test_whitespace_when_selecting_with_suffix",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_copyright": []
            }
        },
        "TestTextSelection.test_section_text_from_path": {
            "name": "test_section_text_from_path",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestTextSelection.test_exact_text_not_in_selection": {
            "name": "test_exact_text_not_in_selection",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestTextSelection.test_multiple_non_Factor_selectors_for_Holding": {
            "name": "test_multiple_non_Factor_selectors_for_Holding",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/tests/test_entities.py": {
        "TestMakeEntities.test_make_entity_from_str_without_mentioned": {
            "name": "test_make_entity_from_str_without_mentioned",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMakeEntities.test_conversion_to_generic": {
            "name": "test_conversion_to_generic",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ]
            }
        },
        "TestMakeEntities.test_repr_equal_after_make_generic": {
            "name": "test_repr_equal_after_make_generic",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ]
            }
        },
        "TestMakeEntities.test_new_context": {
            "name": "test_new_context",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ]
            }
        },
        "TestSameMeaning.test_specific_to_generic_different_object": {
            "name": "test_specific_to_generic_different_object",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ]
            }
        },
        "TestSameMeaning.test_equality_generic_entities": {
            "name": "test_equality_generic_entities",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ]
            }
        },
        "TestSameMeaning.test_entity_does_not_mean_statement": {
            "name": "test_entity_does_not_mean_statement",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_implication_of_generic_entity": {
            "name": "test_implication_of_generic_entity",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ]
            }
        },
        "TestImplication.test_generic_entity_does_not_imply_specific_and_different": {
            "name": "test_generic_entity_does_not_imply_specific_and_different",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ]
            }
        },
        "TestImplication.test_implication_same_except_generic": {
            "name": "test_implication_same_except_generic",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ]
            }
        },
        "TestImplication.test_generic_entity_does_not_imply_specific_and_same": {
            "name": "test_generic_entity_does_not_imply_specific_and_same",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ]
            }
        },
        "TestImplication.test_same_entity_not_ge": {
            "name": "test_same_entity_not_ge",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ]
            }
        },
        "TestImplication.test_implication_subclass": {
            "name": "test_implication_subclass",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ]
            }
        },
        "TestImplication.test_plural_true": {
            "name": "test_plural_true",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestImplication.test_implies_concrete_with_same_name": {
            "name": "test_implies_concrete_with_same_name",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_implication_concrete_with_different_name": {
            "name": "test_implication_concrete_with_different_name",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_entity_does_not_imply_statement": {
            "name": "test_entity_does_not_imply_statement",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_error_contradiction_with_non_factor": {
            "name": "test_error_contradiction_with_non_factor",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str",
                    "int"
                ],
                "make_predicate": [
                    "str",
                    "int"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_of_other_factor": {
            "name": "test_no_contradiction_of_other_factor",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str",
                    "int"
                ],
                "watt_factor": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "AuthoritySpoke-master/tests/test_evidence.py": {
        "TestEvidence.test_make_evidence_object": {
            "name": "test_make_evidence_object",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestEvidence.test_default_len_based_on_unique_entity_slots": {
            "name": "test_default_len_based_on_unique_entity_slots",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "make_factor": [
                    "str"
                ]
            }
        },
        "TestEvidence.test_no_extra_space_around_exhibit_in_string": {
            "name": "test_no_extra_space_around_exhibit_in_string",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestEvidence.test_no_caps_in_short_string": {
            "name": "test_no_caps_in_short_string",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestEvidence.test_get_entity_orders": {
            "name": "test_get_entity_orders",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": []
            }
        },
        "TestEvidence.test_get_entity_orders_no_statement": {
            "name": "test_get_entity_orders_no_statement",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_factor": []
            }
        },
        "TestEvidence.test_evidence_str_with_context": {
            "name": "test_evidence_str_with_context",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": []
            }
        },
        "TestEvidence.test_type_of_terms": {
            "name": "test_type_of_terms",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": [
                    "str",
                    "typing.Iterator",
                    "int"
                ]
            }
        },
        "TestEvidenceSameMeaning.test_equality_with_entity_order": {
            "name": "test_equality_with_entity_order",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "TestEvidenceSameMeaning.test_equality_with_no_statement": {
            "name": "test_equality_with_no_statement",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": []
            }
        },
        "TestEvidenceSameMeaning.test_unequal_due_to_entity_order": {
            "name": "test_unequal_due_to_entity_order",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestEvidenceSameMeaning.test_implies_due_to_more_complex_entity_order": {
            "name": "test_implies_due_to_more_complex_entity_order",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str"
                ]
            }
        },
        "TestEvidenceSameMeaning.test_unequal_different_attributes": {
            "name": "test_unequal_different_attributes",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": [
                    "str",
                    "float"
                ]
            }
        },
        "TestEvidenceSameMeaning.test_not_equal_no_effect": {
            "name": "test_not_equal_no_effect",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": []
            }
        },
        "TestEvidenceImplication.test_implication_missing_witness": {
            "name": "test_implication_missing_witness",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": [
                    "str",
                    "float"
                ]
            }
        },
        "TestEvidenceImplication.test_implication_missing_effect": {
            "name": "test_implication_missing_effect",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": [
                    "str",
                    "float"
                ]
            }
        },
        "TestEvidenceImplication.test_no_implication_of_fact": {
            "name": "test_no_implication_of_fact",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str"
                ],
                "make_evidence": [
                    "str",
                    "dict[, ]"
                ],
                "watt_mentioned": [
                    "str",
                    "int"
                ]
            }
        },
        "TestEvidenceContradiction.test_no_contradiction_of_fact": {
            "name": "test_no_contradiction_of_fact",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": [
                    "str",
                    "dict[, ]"
                ],
                "make_factor": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestEvidenceContradiction.test_no_contradiction_from_supporting_contradictory_facts": {
            "name": "test_no_contradiction_from_supporting_contradictory_facts",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestEvidenceContradiction.test_contradiction_of_absent_version_of_self": {
            "name": "test_contradiction_of_absent_version_of_self",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": []
            }
        },
        "TestEvidenceContradiction.test_contradict_absent_version_of_implied_factor": {
            "name": "test_contradict_absent_version_of_implied_factor",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": []
            }
        },
        "TestEvidenceContradiction.test_no_contradiction_absent_same_witness": {
            "name": "test_no_contradiction_absent_same_witness",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestEvidenceContradiction.test_no_contradiction_of_implied_factor": {
            "name": "test_no_contradiction_of_implied_factor",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "AuthoritySpoke-master/tests/test_exhibits.py": {
        "TestExhibits.test_make_exhibit_object": {
            "name": "test_make_exhibit_object",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExhibits.test_exhibit_short_string": {
            "name": "test_exhibit_short_string",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": []
            }
        },
        "TestExhibits.test_comma_when_exhibit_is_in_fact": {
            "name": "test_comma_when_exhibit_is_in_fact",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExhibitsSameMeaning.test_equality": {
            "name": "test_equality",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExhibitsSameMeaning.test_not_equal_different_speaker": {
            "name": "test_not_equal_different_speaker",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExhibitsSameMeaning.test_equal_complex_statement": {
            "name": "test_equal_complex_statement",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": []
            }
        },
        "TestExhibitsSameMeaning.test_not_equal_complex_statement": {
            "name": "test_not_equal_complex_statement",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": []
            }
        },
        "TestExhibitsSameMeaning.test_not_equal_different_form": {
            "name": "test_not_equal_different_form",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExhibitsSameMeaning.test_explain_same_meaning": {
            "name": "test_explain_same_meaning",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str"
                ]
            }
        },
        "TestExhibitsImplication.test_implication": {
            "name": "test_implication",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ],
                "caplog": [
                    "None"
                ]
            }
        },
        "TestExhibitsImplication.test_no_implication_different_speaker": {
            "name": "test_no_implication_different_speaker",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestExhibitsImplication.test_any_exhibit_implies_generic": {
            "name": "test_any_exhibit_implies_generic",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExhibitsImplication.test_exhibit_with_features_implies_featureless": {
            "name": "test_exhibit_with_features_implies_featureless",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExhibitsImplication.test_exhibit_no_implication_different_form": {
            "name": "test_exhibit_no_implication_different_form",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": []
            }
        },
        "TestExhibitsImplication.test_implication_more_specific_testimony": {
            "name": "test_implication_more_specific_testimony",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExhibitsImplication.test_implication_present_and_absent_testimony": {
            "name": "test_implication_present_and_absent_testimony",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExhibitsImplication.test_absent_implies_more_specific_absent": {
            "name": "test_absent_implies_more_specific_absent",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExhibitsImplication.test_absent_does_not_imply_less_specific_absent": {
            "name": "test_absent_does_not_imply_less_specific_absent",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": []
            }
        },
        "TestExhibitsImplication.test_implication_fact_with_quantity": {
            "name": "test_implication_fact_with_quantity",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_fact_about_exhibit": []
            }
        },
        "TestExhibitsContradiction.test_conflicting_exhibits_not_contradictory": {
            "name": "test_conflicting_exhibits_not_contradictory",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExhibitsContradiction.test_absent_contradicts_same_present": {
            "name": "test_absent_contradicts_same_present",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExhibitsContradiction.test_present_contradicts_same_absent": {
            "name": "test_present_contradicts_same_absent",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExhibitsContradiction.test_more_specific_contradicts_absent": {
            "name": "test_more_specific_contradicts_absent",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "str",
                    "float"
                ]
            }
        },
        "TestExhibitsContradiction.test_no_contradiction_with_factor_subclass": {
            "name": "test_no_contradiction_with_factor_subclass",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ],
                "watt_factor": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "AuthoritySpoke-master/tests/test_explanations.py": {
        "TestContext.test_impossible_register": {
            "name": "test_impossible_register",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContext.test_possible_register": {
            "name": "test_possible_register",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContext.test_explain_consistency": {
            "name": "test_explain_consistency",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExplainHoldings.test_explain_implication": {
            "name": "test_explain_implication",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        }
    },
    "AuthoritySpoke-master/tests/test_factors.py": {
        "TestFacts.test_default_terms_for_fact": {
            "name": "test_default_terms_for_fact",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "make_predicate": [
                    "str",
                    "list[str]"
                ],
                "watt_mentioned": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "TestFacts.test_no_terms_for_fact": {
            "name": "test_no_terms_for_fact",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFacts.test_build_fact": {
            "name": "test_build_fact",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [],
                "watt_mentioned": [
                    "bool",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestFacts.test_terms_from_case_factor_indices": {
            "name": "test_terms_from_case_factor_indices",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "make_predicate": [
                    "str",
                    "list[str]"
                ],
                "watt_mentioned": [
                    "str",
                    "list[str]",
                    "bool",
                    "set[]",
                    "set[str]"
                ]
            }
        },
        "TestFacts.test_correct_factors_from_indices_in_build_fact": {
            "name": "test_correct_factors_from_indices_in_build_fact",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "make_predicate": [
                    "str",
                    "list[str]"
                ],
                "watt_mentioned": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "TestFacts.test_wrong_type_in_terms_in_init": {
            "name": "test_wrong_type_in_terms_in_init",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "make_predicate": [
                    "str"
                ],
                "watt_mentioned": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "TestFacts.test_invalid_index_for_case_factors_in_init": {
            "name": "test_invalid_index_for_case_factors_in_init",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str"
                ],
                "make_entity": [
                    "str"
                ]
            }
        },
        "TestFacts.test_convert_int_terms_to_tuple": {
            "name": "test_convert_int_terms_to_tuple",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str"
                ],
                "watt_mentioned": [
                    "str"
                ]
            }
        },
        "TestFacts.test_string_representation_of_factor": {
            "name": "test_string_representation_of_factor",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "TestFacts.test_string_no_truth_value": {
            "name": "test_string_no_truth_value",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestFacts.test_repeating_entity_string": {
            "name": "test_repeating_entity_string",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": []
            }
        },
        "TestFacts.test_string_representation_with_concrete_entities": {
            "name": "test_string_representation_with_concrete_entities",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestFacts.test_string_for_fact_with_identical_terms": {
            "name": "test_string_for_fact_with_identical_terms",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFacts.test_str_with_concrete_context": {
            "name": "test_str_with_concrete_context",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestFacts.test_complex_fact_no_line_break_in_predicate": {
            "name": "test_complex_fact_no_line_break_in_predicate",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestFacts.test_new_context_replace_fact": {
            "name": "test_new_context_replace_fact",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "watt_factor": []
            }
        },
        "TestFacts.test_get_factor_from_recursive_search": {
            "name": "test_get_factor_from_recursive_search",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestFacts.test_no_duplicate_comma_in_evidence": {
            "name": "test_no_duplicate_comma_in_evidence",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestFacts.test_new_concrete_context": {
            "name": "test_new_concrete_context",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "watt_factor": []
            }
        },
        "TestFacts.test_type_of_terms": {
            "name": "test_type_of_terms",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "typing.Iterator",
                    "int"
                ]
            }
        },
        "TestFacts.test_concrete_to_abstract": {
            "name": "test_concrete_to_abstract",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "make_predicate": []
            }
        },
        "TestFacts.test_entity_slots_as_length_of_factor": {
            "name": "test_entity_slots_as_length_of_factor",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestFacts.test_predicate_with_entities": {
            "name": "test_predicate_with_entities",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestFacts.test_factor_terms_do_not_match_predicate": {
            "name": "test_factor_terms_do_not_match_predicate",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "tuple[]"
                ],
                "watt_mentioned": [
                    "str",
                    "bool",
                    "typing.Any",
                    "None",
                    "dict[str, typing.Any]",
                    "tuple[]"
                ]
            }
        },
        "TestFacts.test_reciprocal_with_wrong_number_of_entities": {
            "name": "test_reciprocal_with_wrong_number_of_entities",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestFacts.test_entity_and_human_in_predicate": {
            "name": "test_entity_and_human_in_predicate",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "watt_factor": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestFacts.test_standard_of_proof_must_be_listed": {
            "name": "test_standard_of_proof_must_be_listed",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str"
                ],
                "watt_mentioned": [
                    "str",
                    "typing.Callable[List,bool, None]",
                    "int"
                ]
            }
        },
        "TestFacts.test_standard_of_proof_in_str": {
            "name": "test_standard_of_proof_in_str",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestFacts.test_case_factors_deleted_from_fact": {
            "name": "test_case_factors_deleted_from_fact",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestFacts.test_repeated_placeholder_in_fact": {
            "name": "test_repeated_placeholder_in_fact",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestSameMeaning.test_equality_factor_from_same_predicate": {
            "name": "test_equality_factor_from_same_predicate",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestSameMeaning.test_equality_factor_from_equal_predicate": {
            "name": "test_equality_factor_from_equal_predicate",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestSameMeaning.test_equality_because_factors_are_generic_entities": {
            "name": "test_equality_because_factors_are_generic_entities",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestSameMeaning.test_unequal_because_a_factor_is_not_generic": {
            "name": "test_unequal_because_a_factor_is_not_generic",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestSameMeaning.test_generic_terms_equal": {
            "name": "test_generic_terms_equal",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSameMeaning.test_equal_referencing_diffent_generic_terms": {
            "name": "test_equal_referencing_diffent_generic_terms",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSameMeaning.test_generic_and_specific_factors_unequal": {
            "name": "test_generic_and_specific_factors_unequal",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSameMeaning.test_factor_unequal_due_to_repeated_term": {
            "name": "test_factor_unequal_due_to_repeated_term",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestSameMeaning.test_factor_different_predicate_truth_unequal": {
            "name": "test_factor_different_predicate_truth_unequal",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSameMeaning.test_unequal_because_one_factor_is_absent": {
            "name": "test_unequal_because_one_factor_is_absent",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestSameMeaning.test_copies_of_identical_factor": {
            "name": "test_copies_of_identical_factor",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_factor": [
                    "dict[, ]"
                ]
            }
        },
        "TestSameMeaning.test_equal_with_different_generic_subfactors": {
            "name": "test_equal_with_different_generic_subfactors",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSameMeaning.test_reciprocal_context_register": {
            "name": "test_reciprocal_context_register",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSameMeaning.test_interchangeable_concrete_terms": {
            "name": "test_interchangeable_concrete_terms",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_unequal_to_enactment": {
            "name": "test_unequal_to_enactment",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [],
                "e_copyright": []
            }
        },
        "TestSameMeaning.test_standard_of_proof_inequality": {
            "name": "test_standard_of_proof_inequality",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "dict[, ]"
                ]
            }
        },
        "TestSameMeaning.test_means_despite_plural": {
            "name": "test_means_despite_plural",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_same_meaning_no_terms": {
            "name": "test_same_meaning_no_terms",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": []
            }
        },
        "TestImplication.test_fact_implies_none": {
            "name": "test_fact_implies_none",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestImplication.test_no_implication_of_rule": {
            "name": "test_no_implication_of_rule",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "dict[, ]"
                ],
                "make_rule": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestImplication.test_fact_does_not_imply_holding": {
            "name": "test_fact_does_not_imply_holding",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [],
                "make_holding": []
            }
        },
        "TestImplication.test_specific_factor_implies_generic": {
            "name": "test_specific_factor_implies_generic",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImplication.test_specific_factor_implies_generic_explain": {
            "name": "test_specific_factor_implies_generic_explain",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestImplication.test_specific_implies_generic_form_of_another_fact": {
            "name": "test_specific_implies_generic_form_of_another_fact",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestImplication.test_specific_fact_does_not_imply_generic_entity": {
            "name": "test_specific_fact_does_not_imply_generic_entity",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str",
                    "int"
                ],
                "watt_factor": [
                    "str",
                    "int"
                ]
            }
        },
        "TestImplication.test_factor_does_not_imply_predicate": {
            "name": "test_factor_does_not_imply_predicate",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [],
                "watt_factor": []
            }
        },
        "TestImplication.test_factor_implies_because_of_quantity": {
            "name": "test_factor_implies_because_of_quantity",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestImplication.test_factor_implies_no_truth_value": {
            "name": "test_factor_implies_no_truth_value",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestImplication.test_comparison_implies_no_truth_value": {
            "name": "test_comparison_implies_no_truth_value",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestImplication.test_implication_standard_of_proof": {
            "name": "test_implication_standard_of_proof",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_factor": []
            }
        },
        "TestImplication.test_factor_implies_because_of_exact_quantity": {
            "name": "test_factor_implies_because_of_exact_quantity",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestImplication.test_no_implication_pint_quantity_and_int": {
            "name": "test_no_implication_pint_quantity_and_int",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestImplication.test_absent_factor_implies_absent_factor_with_lesser_quantity": {
            "name": "test_absent_factor_implies_absent_factor_with_lesser_quantity",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImplication.test_equal_factors_not_gt": {
            "name": "test_equal_factors_not_gt",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImplication.test_standard_of_proof_comparison": {
            "name": "test_standard_of_proof_comparison",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "dict[, ]"
                ]
            }
        },
        "TestImplication.test_no_implication_between_factors_with_and_without_standards": {
            "name": "test_no_implication_between_factors_with_and_without_standards",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestImplication.test_implication_complex": {
            "name": "test_implication_complex",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImplication.test_context_register_text": {
            "name": "test_context_register_text",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_context_register": [
                    "str",
                    "int"
                ]
            }
        },
        "TestImplication.test_implication_complex_explain": {
            "name": "test_implication_complex_explain",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": [
                    "str"
                ],
                "make_context_register": []
            }
        },
        "TestImplication.test_implication_explain_keys_only_from_left": {
            "name": "test_implication_explain_keys_only_from_left",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": [
                    "str"
                ],
                "make_context_register": []
            }
        },
        "TestImplication.test_context_registers_for_complex_comparison": {
            "name": "test_context_registers_for_complex_comparison",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": []
            }
        },
        "TestImplication.test_no_implication_complex": {
            "name": "test_no_implication_complex",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": [
                    "tuple[typing.Union[float,float,float,float,float]]"
                ]
            }
        },
        "TestImplication.test_implied_by": {
            "name": "test_implied_by",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImplication.test_explanation_implied_by": {
            "name": "test_explanation_implied_by",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": [
                    "str"
                ]
            }
        },
        "TestImplication.test_explain_not_implied_by": {
            "name": "test_explain_not_implied_by",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": [
                    "str"
                ]
            }
        },
        "TestImplication.test_not_implied_by_none": {
            "name": "test_not_implied_by_none",
            "location": 502,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": []
            }
        },
        "TestImplication.test_some_interchangeable_entities": {
            "name": "test_some_interchangeable_entities",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_interchangeable_entities_in_group": {
            "name": "test_interchangeable_entities_in_group",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_factor_different_predicate_truth_contradicts": {
            "name": "test_factor_different_predicate_truth_contradicts",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_same_predicate_true_vs_false": {
            "name": "test_same_predicate_true_vs_false",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestContradiction.test_factor_does_not_contradict_predicate": {
            "name": "test_factor_does_not_contradict_predicate",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [],
                "watt_factor": []
            }
        },
        "TestContradiction.test_factor_contradiction_absent_predicate": {
            "name": "test_factor_contradiction_absent_predicate",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_absences_of_contradictory_facts_consistent": {
            "name": "test_absences_of_contradictory_facts_consistent",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_factor_no_contradiction_no_truth_value": {
            "name": "test_factor_no_contradiction_no_truth_value",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_absent_factor_contradicts_broader_quantity_statement": {
            "name": "test_absent_factor_contradicts_broader_quantity_statement",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_less_specific_absent_contradicts_more_specific": {
            "name": "test_less_specific_absent_contradicts_more_specific",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_with_more_specific_absent": {
            "name": "test_no_contradiction_with_more_specific_absent",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestContradiction.test_contradiction_complex": {
            "name": "test_contradiction_complex",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_complex": {
            "name": "test_no_contradiction_complex",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_fact": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_of_None": {
            "name": "test_no_contradiction_of_None",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestContradiction.test_contradicts_if_present_both_present": {
            "name": "test_contradicts_if_present_both_present",
            "location": 598,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_contradicts_if_present_one_absent": {
            "name": "test_contradicts_if_present_one_absent",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_false_does_not_contradict_absent": {
            "name": "test_false_does_not_contradict_absent",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_inconsistent_statements_about_different_entities": {
            "name": "test_inconsistent_statements_about_different_entities",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_inconsistent_statements_about_corresponding_entities": {
            "name": "test_inconsistent_statements_about_corresponding_entities",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_copy_with_foreign_context": {
            "name": "test_copy_with_foreign_context",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_mentioned": [
                    "str",
                    "float"
                ],
                "watt_factor": [
                    "int"
                ]
            }
        },
        "TestContradiction.test_check_entity_consistency_true": {
            "name": "test_check_entity_consistency_true",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "make_factor": [
                    "str"
                ]
            }
        },
        "TestContradiction.test_check_entity_consistency_false": {
            "name": "test_check_entity_consistency_false",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "make_factor": [
                    "bytes"
                ]
            }
        },
        "TestContradiction.test_entity_consistency_identity_not_equality": {
            "name": "test_entity_consistency_identity_not_equality",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "make_factor": [
                    "list[list[typing.Any]]",
                    "bytes"
                ]
            }
        },
        "TestContradiction.test_check_entity_consistency_type_error": {
            "name": "test_check_entity_consistency_type_error",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "make_factor": [
                    "str"
                ],
                "make_predicate": [
                    "str"
                ]
            }
        },
        "TestConsistent.test_contradictory_facts_about_same_entity": {
            "name": "test_contradictory_facts_about_same_entity",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestConsistent.test_explanations_consistent_with": {
            "name": "test_explanations_consistent_with",
            "location": 747,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestConsistent.test_factor_consistent_with_none": {
            "name": "test_factor_consistent_with_none",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": []
            }
        },
        "TestAddition.test_addition": {
            "name": "test_addition",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_factor": [
                    "str"
                ],
                "left": [
                    "bool"
                ],
                "right": [
                    "bool"
                ],
                "expected": [
                    "str",
                    "float",
                    "bool",
                    "bytes"
                ]
            }
        },
        "TestAddition.test_add_unrelated_factors": {
            "name": "test_add_unrelated_factors",
            "location": 778,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_factor": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestAddition.test_cant_add_enactment_to_fact": {
            "name": "test_cant_add_enactment_to_fact",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ],
                "e_search_clause": [
                    "str"
                ]
            }
        }
    },
    "AuthoritySpoke-master/tests/test_holdings.py": {
        "TestHolding.test_complex_string": {
            "name": "test_complex_string",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": [
                    "str"
                ]
            }
        },
        "TestHolding.test_string_indentation": {
            "name": "test_string_indentation",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestHolding.test_repr": {
            "name": "test_repr",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "float"
                ]
            }
        },
        "TestHolding.test_line_break_in_fact_within_holding": {
            "name": "test_line_break_in_fact_within_holding",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestHolding.test_case_class_name_for_fact_within_holding": {
            "name": "test_case_class_name_for_fact_within_holding",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestHolding.test_holding_without_inputs_not_exclusive": {
            "name": "test_holding_without_inputs_not_exclusive",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_factor": []
            }
        },
        "TestHolding.test_holding_with_absent_output_not_exclusive": {
            "name": "test_holding_with_absent_output_not_exclusive",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_exhibit": []
            }
        },
        "TestHolding.test_holding_with_two_outputs_not_exclusive": {
            "name": "test_holding_with_two_outputs_not_exclusive",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_factor": []
            }
        },
        "TestHolding.test_infer_from_exclusive": {
            "name": "test_infer_from_exclusive",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestHolding.test_infer_from_not_exclusive": {
            "name": "test_infer_from_not_exclusive",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestHolding.test_type_of_terms": {
            "name": "test_type_of_terms",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "typing.Iterator",
                    "int"
                ]
            }
        },
        "TestHolding.test_get_evidence_by_name_from_holding": {
            "name": "test_get_evidence_by_name_from_holding",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestHolding.test_enactment_text_in_holding_str": {
            "name": "test_enactment_text_in_holding_str",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestHolding.test_holding_with_standard_of_proof": {
            "name": "test_holding_with_standard_of_proof",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_factor": []
            }
        },
        "TestHolding.test_holding_applies_despite_enactments": {
            "name": "test_holding_applies_despite_enactments",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [],
                "e_copyright_requires_originality": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "TestHolding.test_regulation_ordered_after_statute": {
            "name": "test_regulation_ordered_after_statute",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [],
                "e_copyright_requires_originality": []
            }
        },
        "TestHolding.test_set_blank_despite": {
            "name": "test_set_blank_despite",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "TestHolding.test_change_outputs": {
            "name": "test_change_outputs",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [],
                "watt_factor": []
            }
        },
        "TestHolding.test_cannot_be_exclusive_and_invalid": {
            "name": "test_cannot_be_exclusive_and_invalid",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": [
                    "str"
                ]
            }
        },
        "TestHolding.test_cannot_be_exclusive_and_undecided": {
            "name": "test_cannot_be_exclusive_and_undecided",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestSameMeaning.test_identical_holdings_equal": {
            "name": "test_identical_holdings_equal",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSameMeaning.test_holding_does_not_mean_None": {
            "name": "test_holding_does_not_mean_None",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestSameMeaning.test_negated_method": {
            "name": "test_negated_method",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestImplication.test_undecided_holding_no_implication_more_inputs": {
            "name": "test_undecided_holding_no_implication_more_inputs",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestImplication.test_undecided_holding_no_implication_fewer_inputs": {
            "name": "test_undecided_holding_no_implication_fewer_inputs",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestImplication.test_no_undecided_holding_implication_by_MUST": {
            "name": "test_no_undecided_holding_implication_by_MUST",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestImplication.test_no_undecided_holding_implication_of_MUST": {
            "name": "test_no_undecided_holding_implication_of_MUST",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "TestImplication.test_no_undecided_holding_implication_with_ALL": {
            "name": "test_no_undecided_holding_implication_with_ALL",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestImplication.test_undecided_implies_negation_is_undecided": {
            "name": "test_undecided_implies_negation_is_undecided",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestImplication.test_no_implication_undecided_to_decided": {
            "name": "test_no_implication_undecided_to_decided",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "dict[, ]"
                ]
            }
        },
        "TestImplication.test_no_implication_decided_to_undecided": {
            "name": "test_no_implication_decided_to_undecided",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "dict[, ]"
                ]
            }
        },
        "TestImplication.test_no_implication_of_procedure": {
            "name": "test_no_implication_of_procedure",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "dict[, ]"
                ],
                "make_procedure": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestImplication.test_holding_implies_opinion_with_no_holdings": {
            "name": "test_holding_implies_opinion_with_no_holdings",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ],
                "make_opinion": [
                    "str"
                ]
            }
        },
        "TestImplication.test_holding_implies_none": {
            "name": "test_holding_implies_none",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestImplication.test_holding_implies_rule": {
            "name": "test_holding_implies_rule",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "float"
                ],
                "make_rule": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImplication.test_implication_due_to_always": {
            "name": "test_implication_due_to_always",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": []
            }
        },
        "TestImplication.test_implication_by_exclusive_holding": {
            "name": "test_implication_by_exclusive_holding",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [],
                "e_copyright_protection": []
            }
        },
        "TestImplication.test_explanation_same_generic_factor": {
            "name": "test_explanation_same_generic_factor",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        },
        "TestImplication.test_not_implied_by_statement": {
            "name": "test_not_implied_by_statement",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestImplication.test_cannot_check_if_holding_implies_factor": {
            "name": "test_cannot_check_if_holding_implies_factor",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str"
                ],
                "make_factor": [
                    "str"
                ]
            }
        },
        "TestImplication.test_cannot_check_if_holding_implies_string": {
            "name": "test_cannot_check_if_holding_implies_string",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestContradiction.test_holding_contradicts_invalid_version_of_self": {
            "name": "test_holding_contradicts_invalid_version_of_self",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestContradiction.test_contradicts_if_valid": {
            "name": "test_contradicts_if_valid",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestContradiction.test_contradicts_if_valid_invalid_holding": {
            "name": "test_contradicts_if_valid_invalid_holding",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestContradiction.test_negation_of_h2_contradicts_holding_that_implies_h2": {
            "name": "test_negation_of_h2_contradicts_holding_that_implies_h2",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_invalid_holding_contradicts_h2": {
            "name": "test_invalid_holding_contradicts_h2",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_holding_that_implies_h2_contradicts_negation_of_h2": {
            "name": "test_holding_that_implies_h2_contradicts_negation_of_h2",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_invalidity_of_implying_holding_contradicts_implied": {
            "name": "test_invalidity_of_implying_holding_contradicts_implied",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_contradiction_with_ALL_MUST_and_invalid_SOME_MUST": {
            "name": "test_contradiction_with_ALL_MUST_and_invalid_SOME_MUST",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_contradiction_with_ALL_MUST_and_invalid_ALL_MAY": {
            "name": "test_contradiction_with_ALL_MUST_and_invalid_ALL_MAY",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str"
                ]
            }
        },
        "TestContradiction.test_contradiction_with_distance": {
            "name": "test_contradiction_with_distance",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ],
                "make_holding": [
                    "str"
                ]
            }
        },
        "TestContradiction.test_holding_contradicts_opinion": {
            "name": "test_holding_contradicts_opinion",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestContradiction.test_explain_holding_contradicting_opinion": {
            "name": "test_explain_holding_contradicting_opinion",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestContradiction.test_no_holding_contradiction_explanations": {
            "name": "test_no_holding_contradiction_explanations",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "tuple[typing.Union[float,float,float,float,float]]"
                ]
            }
        },
        "TestContradiction.test_no_comparison_holding_to_fact": {
            "name": "test_no_comparison_holding_to_fact",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [],
                "watt_factor": []
            }
        },
        "TestContradiction.test_holding_does_not_contradict_fact": {
            "name": "test_holding_does_not_contradict_fact",
            "location": 478,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [],
                "watt_factor": []
            }
        },
        "TestContradiction.test_error_no_contradiction_test": {
            "name": "test_error_no_contradiction_test",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestContradiction.test_contradiction_with_ALL_MUST_and_false_output_ALL_MAY": {
            "name": "test_contradiction_with_ALL_MUST_and_false_output_ALL_MAY",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "int"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_when_added_enactment_makes_rule_valid": {
            "name": "test_no_contradiction_when_added_enactment_makes_rule_valid",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_contradiction_with_fewer_enactments": {
            "name": "test_contradiction_with_fewer_enactments",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_same_undecided_holding": {
            "name": "test_no_contradiction_same_undecided_holding",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestContradiction.test_undecided_contradicts_holding": {
            "name": "test_undecided_contradicts_holding",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_undecided_contradicts_holding_reverse": {
            "name": "test_undecided_contradicts_holding_reverse",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_undecided_contradicts_decided_invalid_holding": {
            "name": "test_undecided_contradicts_decided_invalid_holding",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_of_undecided_holding": {
            "name": "test_no_contradiction_of_undecided_holding",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_undecided_holding_implied_contradiction": {
            "name": "test_undecided_holding_implied_contradiction",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_undecided_holding_no_implied_contradiction_with_SOME": {
            "name": "test_undecided_holding_no_implied_contradiction_with_SOME",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestContradiction.test_undecided_holding_no_implied_contradiction": {
            "name": "test_undecided_holding_no_implied_contradiction",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestContradiction.test_contradiction_with_evidence": {
            "name": "test_contradiction_with_evidence",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_holding_with_evidence": {
            "name": "test_no_contradiction_holding_with_evidence",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestContradiction.test_contradiction_with_procedure": {
            "name": "test_contradiction_with_procedure",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str",
                    "float"
                ],
                "make_procedure": [
                    "str",
                    "float"
                ]
            }
        },
        "TestAddition.test_adding_same_ALL_holdings_results_in_same": {
            "name": "test_adding_same_ALL_holdings_results_in_same",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestAddition.test_adding_same_SOME_holdings_results_in_None": {
            "name": "test_adding_same_SOME_holdings_results_in_None",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestAddition.test_add_rule_to_holding": {
            "name": "test_add_rule_to_holding",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestAddition.test_add_exclusive_holding": {
            "name": "test_add_exclusive_holding",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestAddition.test_universal_holding_that_cannot_be_added": {
            "name": "test_universal_holding_that_cannot_be_added",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestAddition.test_add_contradictory_factor": {
            "name": "test_add_contradictory_factor",
            "location": 643,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str"
                ]
            }
        },
        "TestAddition.test_cannot_add_invalid": {
            "name": "test_cannot_add_invalid",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestAddition.test_cannot_add_undecided": {
            "name": "test_cannot_add_undecided",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestUnion.test_union_neither_universal": {
            "name": "test_union_neither_universal",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestUnion.test_union_and_addition_different": {
            "name": "test_union_and_addition_different",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestUnion.test_union_with_exclusive_flag": {
            "name": "test_union_with_exclusive_flag",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestUnion.test_union_of_mandatory_and_mandatory_is_mandatory": {
            "name": "test_union_of_mandatory_and_mandatory_is_mandatory",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestUnion.test_no_union_with_opinion": {
            "name": "test_no_union_with_opinion",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "tuple[typing.Union[float,float,float,float,float]]"
                ],
                "make_opinion_with_holding": [
                    "tuple[typing.Union[float,float,float,float,float]]"
                ]
            }
        },
        "TestUnion.test_union_with_rule": {
            "name": "test_union_with_rule",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestUnion.test_no_union_with_an_undecided_holding": {
            "name": "test_no_union_with_an_undecided_holding",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "tuple[typing.Union[float,float,float,float,float]]"
                ]
            }
        },
        "TestUnion.test_union_with_two_undecided_holdings": {
            "name": "test_union_with_two_undecided_holdings",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str"
                ]
            }
        },
        "TestUnion.test_union_unrelated_undecided": {
            "name": "test_union_unrelated_undecided",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str"
                ]
            }
        }
    },
    "AuthoritySpoke-master/tests/test_holding_groups.py": {
        "TestMakeHoldingGroup.test_all_members_must_be_holdings": {
            "name": "test_all_members_must_be_holdings",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": [
                    "str"
                ]
            }
        },
        "TestHoldingGroupImplies.test_explain_holdinggroup_implication": {
            "name": "test_explain_holdinggroup_implication",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str"
                ]
            }
        },
        "TestHoldingGroupImplies.test_implication_of_holding": {
            "name": "test_implication_of_holding",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestHoldingGroupImplies.test_implication_of_rule": {
            "name": "test_implication_of_rule",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [],
                "make_rule": []
            }
        },
        "TestHoldingGroupImplies.test_implication_of_none": {
            "name": "test_implication_of_none",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str"
                ]
            }
        }
    },
    "AuthoritySpoke-master/tests/test_notebooks.py": {
        "TestIntroduction.test_download_case": {
            "name": "test_download_case",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntroduction.test_oracle_20_holdings": {
            "name": "test_oracle_20_holdings",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str",
                    "float"
                ]
            }
        },
        "TestIntroduction.test_replace_generic_factor": {
            "name": "test_replace_generic_factor",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestIntroduction.test_inferred_holdings_after_exclusive_holding": {
            "name": "test_inferred_holdings_after_exclusive_holding",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestIntroduction.test_change_rule_replacing_enactment": {
            "name": "test_change_rule_replacing_enactment",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestIntroduction.test_opinion_contradiction": {
            "name": "test_opinion_contradiction",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestIntroduction.test_opinion_explain_contradiction": {
            "name": "test_opinion_explain_contradiction",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestIntroduction.test_decision_explain_contradiction": {
            "name": "test_decision_explain_contradiction",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        },
        "TestIntroduction.test_register_string": {
            "name": "test_register_string",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestIntroduction.test_specific_holding_contradiction": {
            "name": "test_specific_holding_contradiction",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestIntroduction.test_addition_some_to_some": {
            "name": "test_addition_some_to_some",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestIntroduction.test_adding_holdings": {
            "name": "test_adding_holdings",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestIntroduction.test_union_holdings_from_different_cases": {
            "name": "test_union_holdings_from_different_cases",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestIntroduction.test_only_one_explanation_for_contradiction": {
            "name": "test_only_one_explanation_for_contradiction",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestTemplateStrings.test_no_line_break_in_fact_string": {
            "name": "test_no_line_break_in_fact_string",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemplateStrings.test_changing_order_of_concrete_terms_changes_meaning": {
            "name": "test_changing_order_of_concrete_terms_changes_meaning",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/tests/test_opinions.py": {
        "TestOpinions.test_opinion_features": {
            "name": "test_opinion_features",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": []
            }
        },
        "TestOpinions.test_repr": {
            "name": "test_repr",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion": []
            }
        },
        "TestOpinions.test_repr_excludes_text": {
            "name": "test_repr_excludes_text",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion": []
            }
        },
        "TestOpinions.test_opinion_author": {
            "name": "test_opinion_author",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion": []
            }
        },
        "TestOpinions.test_opinion_holding_list": {
            "name": "test_opinion_holding_list",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "real_holding": []
            }
        },
        "TestOpinions.test_opinion_entity_list": {
            "name": "test_opinion_entity_list",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion": [],
                "real_holding": [],
                "make_entity": [],
                "make_evidence": []
            }
        },
        "TestOpinions.test_opinion_date": {
            "name": "test_opinion_date",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": []
            }
        },
        "TestOpinions.test_opinion_string": {
            "name": "test_opinion_string",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion": []
            }
        },
        "TestOpinionText.test_opinion_text": {
            "name": "test_opinion_text",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion": []
            }
        },
        "TestOpinionText.test_opinion_text_anchor": {
            "name": "test_opinion_text_anchor",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestOpinionText.test_select_opinion_text_for_factor": {
            "name": "test_select_opinion_text_for_factor",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion": [],
                "make_anchored_holding": []
            }
        },
        "TestOpinionText.test_select_opinion_text_for_enactment": {
            "name": "test_select_opinion_text_for_enactment",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": []
            }
        },
        "TestOpinionText.test_select_opinion_text_for_holding": {
            "name": "test_select_opinion_text_for_holding",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion": [],
                "make_anchored_holding": []
            }
        },
        "TestOpinionText.test_invalid_text_selector": {
            "name": "test_invalid_text_selector",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": []
            }
        },
        "TestOpinionHoldings.test_positing_non_rule_error": {
            "name": "test_positing_non_rule_error",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_procedure": []
            }
        },
        "TestOpinionHoldings.test_error_posit_with_no_rule_source": {
            "name": "test_error_posit_with_no_rule_source",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestOpinionHoldings.test_posit_rule": {
            "name": "test_posit_rule",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_rule": [],
                "make_holding": []
            }
        },
        "TestOpinionHoldings.test_new_context_wrong_number_of_changes": {
            "name": "test_new_context_wrong_number_of_changes",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_holding": []
            }
        },
        "TestOpinionHoldings.test_new_context_naming_nonexistent_factor": {
            "name": "test_new_context_naming_nonexistent_factor",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_holding": []
            }
        },
        "TestOpinionHoldings.test_new_context_creates_equal_rule": {
            "name": "test_new_context_creates_equal_rule",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_response": []
            }
        },
        "TestOpinionHoldings.test_getting_factors_from_opinion": {
            "name": "test_getting_factors_from_opinion",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_response": []
            }
        },
        "TestOpinionHoldings.test_new_context_inferring_factors_to_change": {
            "name": "test_new_context_inferring_factors_to_change",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_response": []
            }
        },
        "TestOpinionHoldings.test_getting_factors_from_new_holding": {
            "name": "test_getting_factors_from_new_holding",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestOpinionFactors.test_only_one_factor_with_same_content": {
            "name": "test_only_one_factor_with_same_content",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestOpinionFactors.test_insert_duplicate_anchor_in_factor_index": {
            "name": "test_insert_duplicate_anchor_in_factor_index",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOpinionFactors.test_get_factor_from_opinion": {
            "name": "test_get_factor_from_opinion",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestOpinionFactors.test_factors_by_name": {
            "name": "test_factors_by_name",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestImplication.test_opinion_implies_holding_group": {
            "name": "test_opinion_implies_holding_group",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestImplication.test_opinion_implied_by_rule": {
            "name": "test_opinion_implied_by_rule",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_holding": [],
                "make_rule": []
            }
        },
        "TestImplication.test_no_implication": {
            "name": "test_no_implication",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestImplication.test_posit_list_of_holdings_and_imply": {
            "name": "test_posit_list_of_holdings_and_imply",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_response": []
            }
        },
        "TestImplication.test_error_to_compare_to_str": {
            "name": "test_error_to_compare_to_str",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestImplication.test_error_to_check_contradiction_of_str": {
            "name": "test_error_to_check_contradiction_of_str",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestImplication.test_opinion_implies_None": {
            "name": "test_opinion_implies_None",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_holding": []
            }
        },
        "TestImplication.test_opinion_implies_holding": {
            "name": "test_opinion_implies_holding",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_holding": []
            }
        },
        "TestImplication.test_opinion_does_not_imply_holding": {
            "name": "test_opinion_does_not_imply_holding",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_holding": []
            }
        },
        "TestImplication.test_opinion_does_not_imply_holding_group": {
            "name": "test_opinion_does_not_imply_holding_group",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestImplication.test_opinion_implied_by_decision": {
            "name": "test_opinion_implied_by_decision",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [],
                "make_decision_with_holding": []
            }
        },
        "TestContradiction.test_opinion_contradicts_opinion": {
            "name": "test_opinion_contradicts_opinion",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestContradiction.test_contradiction_of_holding": {
            "name": "test_contradiction_of_holding",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "e_search_clause": [],
                "make_holding": []
            }
        },
        "TestContradiction.test_explain_opinion_contradicting_holding": {
            "name": "test_explain_opinion_contradicting_holding",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestContradiction.test_explain_opinion_contradicting_rule": {
            "name": "test_explain_opinion_contradicting_rule",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestContradiction.test_contradiction_of_decision": {
            "name": "test_contradiction_of_decision",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_decision_with_holding": []
            }
        },
        "TestContradiction.test_explain_opinion_contradicting_decision": {
            "name": "test_explain_opinion_contradicting_decision",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_decision_with_holding": []
            }
        },
        "TestContradiction.test_no_explanation_of_contradiction": {
            "name": "test_no_explanation_of_contradiction",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestContradiction.test_error_contradiction_with_procedure": {
            "name": "test_error_contradiction_with_procedure",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_procedure": []
            }
        }
    },
    "AuthoritySpoke-master/tests/test_predicates.py": {
        "TestComparisons.test_comparison_with_wrong_comparison_symbol": {
            "name": "test_comparison_with_wrong_comparison_symbol",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComparisons.test_comparison_interval": {
            "name": "test_comparison_interval",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComparisons.test_comparison_not_equal": {
            "name": "test_comparison_not_equal",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_no_sign_allowed_for_predicate": {
            "name": "test_no_sign_allowed_for_predicate",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_term_positions": {
            "name": "test_term_positions",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_term_positions_with_repetition": {
            "name": "test_term_positions_with_repetition",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_term_permutations": {
            "name": "test_term_permutations",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_term_permutations_with_repetition": {
            "name": "test_term_permutations_with_repetition",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_convert_false_statement_about_quantity_to_obverse": {
            "name": "test_convert_false_statement_about_quantity_to_obverse",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str"
                ]
            }
        },
        "TestPredicates.test_quantity_type": {
            "name": "test_quantity_type",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "typing.Type"
                ]
            }
        },
        "TestPredicates.test_string_for_date_as_expression": {
            "name": "test_string_for_date_as_expression",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_quantity_string": {
            "name": "test_quantity_string",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str"
                ]
            }
        },
        "TestPredicates.test_predicate_content_comparison": {
            "name": "test_predicate_content_comparison",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "bool"
                ]
            }
        },
        "TestPredicates.test_expression_comparison": {
            "name": "test_expression_comparison",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "typing.Callable[, ]",
                    "str",
                    "None",
                    "bytes",
                    "int",
                    "typing.Sequence[int]"
                ]
            }
        },
        "TestPredicates.test_predicate_has_no_expression_comparison": {
            "name": "test_predicate_has_no_expression_comparison",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str"
                ]
            }
        },
        "TestPredicates.test_context_slots": {
            "name": "test_context_slots",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPredicates.test_str_for_predicate_with_number_quantity": {
            "name": "test_str_for_predicate_with_number_quantity",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "bytes",
                    "float",
                    "typing.Callable[, ]",
                    "typing.IO"
                ]
            }
        },
        "TestPredicates.test_template_singular_by_default": {
            "name": "test_template_singular_by_default",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_make_str_plural": {
            "name": "test_make_str_plural",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestPredicates.test_str_not_equal": {
            "name": "test_str_not_equal",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "dict[str, float]",
                    "str"
                ]
            }
        },
        "TestPredicates.test_negated_method": {
            "name": "test_negated_method",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": []
            }
        },
        "TestSameMeaning.test_predicate_equality": {
            "name": "test_predicate_equality",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSameMeaning.test_predicate_inequality": {
            "name": "test_predicate_inequality",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ],
                "watt_factor": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "TestSameMeaning.test_error_predicate_means_fact": {
            "name": "test_error_predicate_means_fact",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [],
                "watt_factor": []
            }
        },
        "TestSameMeaning.test_obverse_predicates_equal": {
            "name": "test_obverse_predicates_equal",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSameMeaning.test_equal_float_and_int": {
            "name": "test_equal_float_and_int",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSameMeaning.test_same_meaning_float_and_int": {
            "name": "test_same_meaning_float_and_int",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSameMeaning.test_no_equality_with_inconsistent_dimensionality": {
            "name": "test_no_equality_with_inconsistent_dimensionality",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestSameMeaning.test_different_truth_value_prevents_equality": {
            "name": "test_different_truth_value_prevents_equality",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": []
            }
        },
        "TestSameMeaning.test_predicate_does_not_mean_fact": {
            "name": "test_predicate_does_not_mean_fact",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [],
                "watt_factor": []
            }
        },
        "TestSameMeaning.test_term_placeholders_do_not_change_result": {
            "name": "test_term_placeholders_do_not_change_result",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_term_positions_change_result": {
            "name": "test_term_positions_change_result",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_greater_than_because_of_quantity": {
            "name": "test_greater_than_because_of_quantity",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": []
            }
        },
        "TestImplication.test_greater_float_and_int": {
            "name": "test_greater_float_and_int",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImplication.test_any_truth_value_implies_none": {
            "name": "test_any_truth_value_implies_none",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": []
            }
        },
        "TestImplication.test_no_implication_by_exact_quantity": {
            "name": "test_no_implication_by_exact_quantity",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestImplication.test_no_implication_of_exact_quantity": {
            "name": "test_no_implication_of_exact_quantity",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestImplication.test_no_implication_by_greater_or_equal_quantity": {
            "name": "test_no_implication_by_greater_or_equal_quantity",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestImplication.test_no_implication_of_greater_or_equal_quantity": {
            "name": "test_no_implication_of_greater_or_equal_quantity",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_no_contradiction_inconsistent_dimensions": {
            "name": "test_no_contradiction_inconsistent_dimensions",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_equal_implies_greater_or_equal": {
            "name": "test_equal_implies_greater_or_equal",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImplication.test_implication_with_not_equal": {
            "name": "test_implication_with_not_equal",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImplication.test_no_implication_with_inconsistent_dimensionality": {
            "name": "test_no_implication_with_inconsistent_dimensionality",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestImplication.test_implication_with_no_truth_value": {
            "name": "test_implication_with_no_truth_value",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": []
            }
        },
        "TestImplication.test_predicate_cannot_imply_factor": {
            "name": "test_predicate_cannot_imply_factor",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ],
                "watt_factor": [
                    "str",
                    "float"
                ]
            }
        },
        "TestImplication.test_implication_due_to_dates": {
            "name": "test_implication_due_to_dates",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_predicate_no_contradictions": {
            "name": "test_predicate_no_contradictions",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": []
            }
        },
        "TestContradiction.test_contradiction_by_exact": {
            "name": "test_contradiction_by_exact",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_contradiction_of_exact": {
            "name": "test_contradiction_of_exact",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_contradiction_by_equal_quantity": {
            "name": "test_contradiction_by_equal_quantity",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_contradiction_of_equal_quantity": {
            "name": "test_contradiction_of_equal_quantity",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_by_greater_or_equal_quantity": {
            "name": "test_no_contradiction_by_greater_or_equal_quantity",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_of_greater_or_equal_quantity": {
            "name": "test_no_contradiction_of_greater_or_equal_quantity",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_error_predicate_contradict_factor": {
            "name": "test_error_predicate_contradict_factor",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [],
                "watt_factor": []
            }
        },
        "TestContradiction.test_no_contradiction_with_no_truth_value": {
            "name": "test_no_contradiction_with_no_truth_value",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "dict[, ]"
                ]
            }
        },
        "TestContradiction.test_no_contradiction_with_inconsistent_dimensionality": {
            "name": "test_no_contradiction_with_inconsistent_dimensionality",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestContradiction.test_contradiction_with_quantity": {
            "name": "test_contradiction_with_quantity",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str",
                    "float"
                ]
            }
        },
        "TestContradiction.test_contradictory_date_ranges": {
            "name": "test_contradictory_date_ranges",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_no_contradiction_without_truth_value": {
            "name": "test_no_contradiction_without_truth_value",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_no_contradiction_date_and_time_period": {
            "name": "test_no_contradiction_date_and_time_period",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_no_contradiction_irrelevant_quantities": {
            "name": "test_no_contradiction_irrelevant_quantities",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_no_contradiction_of_predicate": {
            "name": "test_no_contradiction_of_predicate",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantities.test_does_not_exclude_other_quantity": {
            "name": "test_does_not_exclude_other_quantity",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantities.test_convert_quantity_of_Comparison": {
            "name": "test_convert_quantity_of_Comparison",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQuantities.test_quantity_comparison_to_predicate": {
            "name": "test_quantity_comparison_to_predicate",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/tests/test_procedures.py": {
        "TestProcedures.test_exception_for_wrong_type_for_procedure": {
            "name": "test_exception_for_wrong_type_for_procedure",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str"
                ]
            }
        },
        "TestProcedures.test_exception_for_wrong_type_in_tuple_for_procedure": {
            "name": "test_exception_for_wrong_type_in_tuple_for_procedure",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": [
                    "str"
                ]
            }
        },
        "TestProcedures.test_make_procedure_with_evidence_output": {
            "name": "test_make_procedure_with_evidence_output",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_evidence": []
            }
        },
        "TestProcedures.test_make_procedure_with_output_without_context": {
            "name": "test_make_procedure_with_output_without_context",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": []
            }
        },
        "TestProcedures.test_get_terms": {
            "name": "test_get_terms",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestProcedures.test_procedure_length": {
            "name": "test_procedure_length",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str",
                    "int"
                ]
            }
        },
        "TestProcedures.test_procedure_string_with_entities": {
            "name": "test_procedure_string_with_entities",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": []
            }
        },
        "TestProcedures.test_cannot_add_nonfactor_as_input": {
            "name": "test_cannot_add_nonfactor_as_input",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_factor": []
            }
        },
        "TestProcedures.test_cannot_add_entity_as_input": {
            "name": "test_cannot_add_entity_as_input",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_factor": []
            }
        },
        "TestProcedures.test_generic_terms": {
            "name": "test_generic_terms",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str"
                ],
                "make_procedure": [
                    "str"
                ],
                "make_evidence": [
                    "str"
                ]
            }
        },
        "TestProcedures.test_type_of_terms": {
            "name": "test_type_of_terms",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str",
                    "typing.Iterator",
                    "int"
                ]
            }
        },
        "TestProcedures.test_repr": {
            "name": "test_repr",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str"
                ]
            }
        },
        "TestProcedures.test_entities_of_inputs_for_identical_procedure": {
            "name": "test_entities_of_inputs_for_identical_procedure",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [],
                "make_procedure": [],
                "watt_mentioned": []
            }
        },
        "TestProcedureSameMeaning.test_procedure_equality": {
            "name": "test_procedure_equality",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str",
                    "float"
                ]
            }
        },
        "TestProcedureSameMeaning.test_procedure_equality_entity_order": {
            "name": "test_procedure_equality_entity_order",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "TestProcedureSameMeaning.test_still_equal_after_swapping_reciprocal_entities": {
            "name": "test_still_equal_after_swapping_reciprocal_entities",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str",
                    "int",
                    "typing.Type"
                ],
                "caplog": [
                    "None"
                ]
            }
        },
        "TestProcedureSameMeaning.test_unequal_after_swapping_nonreciprocal_entities": {
            "name": "test_unequal_after_swapping_nonreciprocal_entities",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "TestProcedureSameMeaning.test_same_meaning_no_context": {
            "name": "test_same_meaning_no_context",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_predicate": []
            }
        },
        "TestProcedureSameMeaning.test_explain_same_meaning": {
            "name": "test_explain_same_meaning",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str"
                ]
            }
        },
        "TestProcedureImplication.test_entities_of_implied_inputs_for_implied_procedure": {
            "name": "test_entities_of_implied_inputs_for_implied_procedure",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "dict[, ]"
                ],
                "make_procedure": [
                    "str"
                ]
            }
        },
        "TestProcedureImplication.test_factor_implication_with_exact_quantity": {
            "name": "test_factor_implication_with_exact_quantity",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "float"
                ],
                "make_procedure": [
                    "str",
                    "float"
                ]
            }
        },
        "TestProcedureImplication.test_procedure_implication_with_exact_quantity": {
            "name": "test_procedure_implication_with_exact_quantity",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": []
            }
        },
        "TestProcedureImplication.test_procedure_general_quantity_does_not_imply_exact": {
            "name": "test_procedure_general_quantity_does_not_imply_exact",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "typing.Type"
                ],
                "make_procedure": []
            }
        },
        "TestProcedureImplication.test_implied_procedure_with_reciprocal_entities": {
            "name": "test_implied_procedure_with_reciprocal_entities",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": []
            }
        },
        "TestProcedureImplication.test_entities_of_implied_quantity_outputs_for_implied_procedure": {
            "name": "test_entities_of_implied_quantity_outputs_for_implied_procedure",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str"
                ]
            }
        },
        "TestProcedureImplication.test_procedure_implies_identical_procedure": {
            "name": "test_procedure_implies_identical_procedure",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str",
                    "float"
                ]
            }
        },
        "TestProcedureImplication.test_procedure_implies_same_procedure_fewer_inputs": {
            "name": "test_procedure_implies_same_procedure_fewer_inputs",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str",
                    "float"
                ],
                "caplog": [
                    "None"
                ]
            }
        },
        "TestProcedureImplication.test_procedure_implies_reordered_entities_fewer_inputs": {
            "name": "test_procedure_implies_reordered_entities_fewer_inputs",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "TestProcedureImplication.test_procedure_exact_quantity_in_despite_implication": {
            "name": "test_procedure_exact_quantity_in_despite_implication",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": []
            }
        },
        "TestProcedureImplication.test_procedure_implication_despite_irrelevant_factors": {
            "name": "test_procedure_implication_despite_irrelevant_factors",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str",
                    "float"
                ]
            }
        },
        "TestProcedureImplication.test_implies_all_to_some": {
            "name": "test_implies_all_to_some",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": []
            }
        },
        "TestProcedureImplication.test_all_to_some_implies_input_same_as_despite_of_other": {
            "name": "test_all_to_some_implies_input_same_as_despite_of_other",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "typing.Type"
                ]
            }
        },
        "TestProcedureImplication.test_no_all_to_some_implies_input_contradicts_despite": {
            "name": "test_no_all_to_some_implies_input_contradicts_despite",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "int",
                    "str"
                ]
            }
        },
        "TestProcedureImplication.test_all_to_some_implication_added_despite_factors": {
            "name": "test_all_to_some_implication_added_despite_factors",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "bool",
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "TestProcedureImplication.test_implication_with_more_outputs_than_inputs": {
            "name": "test_implication_with_more_outputs_than_inputs",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": []
            }
        },
        "TestProcedureImplication.test_fewer_inputs_implies_all_to_all": {
            "name": "test_fewer_inputs_implies_all_to_all",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "str",
                    "int"
                ]
            }
        },
        "TestProcedureImplication.test_all_to_all_implies_reciprocal": {
            "name": "test_all_to_all_implies_reciprocal",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "int",
                    "str"
                ],
                "caplog": [
                    "None"
                ]
            }
        },
        "TestProcedureImplication.test_no_implication_of_other_factor": {
            "name": "test_no_implication_of_other_factor",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "watt_factor": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "TestProcedureContradiction.test_no_contradict_between_procedures": {
            "name": "test_no_contradict_between_procedures",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "int"
                ]
            }
        },
        "TestProcedureContradiction.test_no_contradiction_of_other_type": {
            "name": "test_no_contradiction_of_other_type",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "typing.Callable[, ]"
                ],
                "watt_factor": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestProcedureContradiction.test_contradiction_some_to_all": {
            "name": "test_contradiction_some_to_all",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestProcedureUnion.test_simple_union": {
            "name": "test_simple_union",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [
                    "str"
                ]
            }
        },
        "TestFactorGroups.test_consistent_factor_groups": {
            "name": "test_consistent_factor_groups",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFactorGroups.test_consistent_factor_groups_with_context": {
            "name": "test_consistent_factor_groups_with_context",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFactorGroups.test_context_indicates_factors_match": {
            "name": "test_context_indicates_factors_match",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFactorGroups.test_inconsistent_factor_groups": {
            "name": "test_inconsistent_factor_groups",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFactorGroups.test_contradictory_factor_groups": {
            "name": "test_contradictory_factor_groups",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFactorGroups.test_not_contradictory_factor_groups": {
            "name": "test_not_contradictory_factor_groups",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFactorGroups.test_input_or_despite_factors": {
            "name": "test_input_or_despite_factors",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvolve.test_evolve_context_to_absent": {
            "name": "test_evolve_context_to_absent",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": []
            }
        }
    },
    "AuthoritySpoke-master/tests/test_readme.py": {
        "TestReadme.test_posit_anchored_holdings": {
            "name": "test_posit_anchored_holdings",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": [
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ]
            }
        },
        "TestReadme.test_posit_holdings": {
            "name": "test_posit_holdings",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": [
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ]
            }
        },
        "TestReadme.test_explain_contradiction": {
            "name": "test_explain_contradiction",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision_with_holding": [
                    "str"
                ]
            }
        }
    },
    "AuthoritySpoke-master/tests/test_rules.py": {
        "TestRules.test_enactment_type_in_str": {
            "name": "test_enactment_type_in_str",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestRules.test_no_blank_line_in_str": {
            "name": "test_no_blank_line_in_str",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestRules.test_enactment_text_in_str": {
            "name": "test_enactment_text_in_str",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestRules.test_None_not_in_str": {
            "name": "test_None_not_in_str",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestRules.test_str_without_legislation": {
            "name": "test_str_without_legislation",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestRules.test_new_concrete_context": {
            "name": "test_new_concrete_context",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestRules.test_terms_of_rule_are_its_factors": {
            "name": "test_terms_of_rule_are_its_factors",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestRules.test_new_context_non_generic": {
            "name": "test_new_context_non_generic",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [],
                "watt_factor": []
            }
        },
        "TestRules.test_new_context_non_generic_from_list_error": {
            "name": "test_new_context_non_generic_from_list_error",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [],
                "watt_factor": []
            }
        },
        "TestRules.test_generic_term_by_str": {
            "name": "test_generic_term_by_str",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestRules.test_cannot_change_context_with_predicates": {
            "name": "test_cannot_change_context_with_predicates",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [],
                "make_predicate": []
            }
        },
        "TestRules.test_cannot_change_context_with_dict_and_terms": {
            "name": "test_cannot_change_context_with_dict_and_terms",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [],
                "make_predicate": []
            }
        },
        "TestRules.test_new_context_dict_must_be_dict": {
            "name": "test_new_context_dict_must_be_dict",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [],
                "make_predicate": []
            }
        },
        "TestRules.test_new_context_choose_factor_to_replace_by_name": {
            "name": "test_new_context_choose_factor_to_replace_by_name",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_beard_rule": []
            }
        },
        "TestRules.test_generic_terms": {
            "name": "test_generic_terms",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [],
                "make_holding": []
            }
        },
        "TestRules.test_despite_only_in_str_when_relevant": {
            "name": "test_despite_only_in_str_when_relevant",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestRules.test_generic_terms_order": {
            "name": "test_generic_terms_order",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [],
                "make_holding": []
            }
        },
        "TestRules.test_string_with_line_breaks": {
            "name": "test_string_with_line_breaks",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestRules.test_string_mentions_absence": {
            "name": "test_string_mentions_absence",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestRules.test_factor_properties_for_rule": {
            "name": "test_factor_properties_for_rule",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestRules.test_single_enactment_converted_to_tuple": {
            "name": "test_single_enactment_converted_to_tuple",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestRules.test_holding_len": {
            "name": "test_holding_len",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestRules.test_despite_role_for_added_enactment": {
            "name": "test_despite_role_for_added_enactment",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_due_process_14": [],
                "make_holding": []
            }
        },
        "TestRules.test_despite_role_for_added_enactment_typeerror": {
            "name": "test_despite_role_for_added_enactment_typeerror",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestRules.test_add_enactment_typeerror": {
            "name": "test_add_enactment_typeerror",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": []
            }
        },
        "TestSameMeaning.test_holdings_equivalent_entity_orders_equal": {
            "name": "test_holdings_equivalent_entity_orders_equal",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestSameMeaning.test_added_enactment_changes_meaning": {
            "name": "test_added_enactment_changes_meaning",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": [],
                "e_due_process_5": []
            }
        },
        "TestSameMeaning.test_holdings_different_entities_unequal": {
            "name": "test_holdings_different_entities_unequal",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestSameMeaning.test_holdings_differing_in_entity_order_equal": {
            "name": "test_holdings_differing_in_entity_order_equal",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestSameMeaning.test_holdings_citing_different_enactment_text_unequal": {
            "name": "test_holdings_citing_different_enactment_text_unequal",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestSameMeaning.test_explain_rule_differing_in_entity_order": {
            "name": "test_explain_rule_differing_in_entity_order",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": []
            }
        },
        "TestImplication.test_rule_does_not_imply_procedure": {
            "name": "test_rule_does_not_imply_procedure",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_holdings_more_inputs_implies_fewer": {
            "name": "test_holdings_more_inputs_implies_fewer",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_holding_narrower_despite_implies_broader": {
            "name": "test_holding_narrower_despite_implies_broader",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_explain_implication_same_entities": {
            "name": "test_explain_implication_same_entities",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_explain_all_to_all_implies_reciprocal": {
            "name": "test_explain_all_to_all_implies_reciprocal",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_holdings_more_specific_quantity_implies_less_specific": {
            "name": "test_holdings_more_specific_quantity_implies_less_specific",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_holdings_less_specific_with_all_implies_more_specific": {
            "name": "test_holdings_less_specific_with_all_implies_more_specific",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_specific_holding_with_all_implies_more_general_with_some": {
            "name": "test_specific_holding_with_all_implies_more_general_with_some",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_mandatory_implies_permissive": {
            "name": "test_mandatory_implies_permissive",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_all_to_all": {
            "name": "test_all_to_all",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_all_to_all_reciprocal": {
            "name": "test_all_to_all_reciprocal",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": [],
                "caplog": []
            }
        },
        "TestImplication.test_some_holding_does_not_imply_version_with_more_supporting_factors": {
            "name": "test_some_holding_does_not_imply_version_with_more_supporting_factors",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_implication_with_evidence": {
            "name": "test_implication_with_evidence",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_holding_based_on_less_text_implies_more": {
            "name": "test_holding_based_on_less_text_implies_more",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_holding_with_enactment_cite_does_not_imply_without": {
            "name": "test_holding_with_enactment_cite_does_not_imply_without",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_implication_common_law_and_constitutional": {
            "name": "test_implication_common_law_and_constitutional",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_no_implication_of_holding_with_added_despite_enactment": {
            "name": "test_no_implication_of_holding_with_added_despite_enactment",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_implication_of_holding_with_removed_despite_enactment": {
            "name": "test_implication_of_holding_with_removed_despite_enactment",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_implication_more_specific_input": {
            "name": "test_implication_more_specific_input",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": []
            }
        },
        "TestImplication.test_implication_more_specific_output": {
            "name": "test_implication_more_specific_output",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": []
            }
        },
        "TestImplication.test_implies_holding": {
            "name": "test_implies_holding",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": []
            }
        },
        "TestImplication.test_does_not_imply_holding_due_to_context": {
            "name": "test_does_not_imply_holding_due_to_context",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": []
            }
        },
        "TestImplication.test_implication_interchangeable_terms": {
            "name": "test_implication_interchangeable_terms",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_not_implied_by_statement": {
            "name": "test_not_implied_by_statement",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestImplication.test_not_implied_by_procedure": {
            "name": "test_not_implied_by_procedure",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [],
                "make_rule": []
            }
        },
        "TestImplication.test_error_to_check_implies_procedure": {
            "name": "test_error_to_check_implies_procedure",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_some_holding_consistent_with_absent_output": {
            "name": "test_some_holding_consistent_with_absent_output",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_some_holding_consistent_with_false_output": {
            "name": "test_some_holding_consistent_with_false_output",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_some_holding_consistent_with_absent_false_output": {
            "name": "test_some_holding_consistent_with_absent_false_output",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_contradicts_if_valid_some_vs_all": {
            "name": "test_contradicts_if_valid_some_vs_all",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_contradicts_if_valid_some_vs_all_no_contradiction": {
            "name": "test_contradicts_if_valid_some_vs_all_no_contradiction",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_contradicts_if_valid_all_vs_some": {
            "name": "test_contradicts_if_valid_all_vs_some",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_no_contradiction_quantity_outputs": {
            "name": "test_no_contradiction_quantity_outputs",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_contradicts_overlapping_ranges_all_vs_all": {
            "name": "test_contradicts_overlapping_ranges_all_vs_all",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_contradicts_exact_quantity_all_vs_all": {
            "name": "test_contradicts_exact_quantity_all_vs_all",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_always_may_contradicts_sometimes_must_not": {
            "name": "test_always_may_contradicts_sometimes_must_not",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_always_may_contradicts_sometimes_must_omit_output": {
            "name": "test_always_may_contradicts_sometimes_must_omit_output",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_sometimes_must_contradicts_always_may_not": {
            "name": "test_sometimes_must_contradicts_always_may_not",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_sometimes_must_contradicts_always_must_not": {
            "name": "test_sometimes_must_contradicts_always_must_not",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_some_must_no_contradict_some_may": {
            "name": "test_some_must_no_contradict_some_may",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_abbreviated_contradiction_with_distance": {
            "name": "test_abbreviated_contradiction_with_distance",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_holding": []
            }
        },
        "TestContradiction.test_rule_does_not_contradict_none": {
            "name": "test_rule_does_not_contradict_none",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestContradiction.test_sometimes_must_contradicts_holding_always_must_not": {
            "name": "test_sometimes_must_contradicts_holding_always_must_not",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": [],
                "make_holding": []
            }
        },
        "TestContradiction.test_error_testing_contradiction_of_fact": {
            "name": "test_error_testing_contradiction_of_fact",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": [],
                "watt_factor": []
            }
        },
        "TestContradiction.test_error_for_contradiction_of_predicate": {
            "name": "test_error_for_contradiction_of_predicate",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": [],
                "watt_factor": []
            }
        },
        "TestAddition.test_add_factor_and_rule": {
            "name": "test_add_factor_and_rule",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": [],
                "make_factor": []
            }
        },
        "TestAddition.test_add_factor_to_rule_in_place": {
            "name": "test_add_factor_to_rule_in_place",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": [],
                "make_factor": []
            }
        },
        "TestAddition.test_add_contradictory_factor_to_rule_in_place": {
            "name": "test_add_contradictory_factor_to_rule_in_place",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": [],
                "make_factor": []
            }
        },
        "TestAddition.test_cannot_add_holding_to_rule": {
            "name": "test_cannot_add_holding_to_rule",
            "location": 651,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": [],
                "make_holding": []
            }
        },
        "TestAddition.test_add_enactment_to_rule_reverse": {
            "name": "test_add_enactment_to_rule_reverse",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": [],
                "e_due_process_5": []
            }
        },
        "TestAddition.test_add_enactment_to_rule": {
            "name": "test_add_enactment_to_rule",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": [],
                "e_due_process_5": []
            }
        },
        "TestAddition.test_add_simple_rules": {
            "name": "test_add_simple_rules",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddition.test_add_rules_with_duplicate_enactment_text": {
            "name": "test_add_rules_with_duplicate_enactment_text",
            "location": 731,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_copyright_requires_originality": [],
                "make_opinion_with_holding": []
            }
        },
        "TestAddition.test_add_some_plus_some_makes_none": {
            "name": "test_add_some_plus_some_makes_none",
            "location": 770,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": []
            }
        },
        "TestAddition.test_add_complex_rule": {
            "name": "test_add_complex_rule",
            "location": 778,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_complex_rule": []
            }
        },
        "TestAddition.test_add_disconnected_rules_returns_none": {
            "name": "test_add_disconnected_rules_returns_none",
            "location": 798,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestAddition.test_add_universal_to_universal": {
            "name": "test_add_universal_to_universal",
            "location": 801,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_factor": [],
                "make_exhibit": [],
                "make_complex_fact": []
            }
        },
        "TestAddition.test_add_universal_to_universal_irrelevant": {
            "name": "test_add_universal_to_universal_irrelevant",
            "location": 821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_procedure": []
            }
        },
        "TestAddition.test_rule_requiring_more_enactments_will_add": {
            "name": "test_rule_requiring_more_enactments_will_add",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_due_process_5": [],
                "make_complex_rule": []
            }
        },
        "TestUnion.test_union_with_none": {
            "name": "test_union_with_none",
            "location": 843,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestUnion.test_union_contradictory_outputs": {
            "name": "test_union_contradictory_outputs",
            "location": 847,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestUnion.test_union_basic": {
            "name": "test_union_basic",
            "location": 857,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestUnion.test_union_of_rule_and_holding": {
            "name": "test_union_of_rule_and_holding",
            "location": 874,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestUnion.test_union_rule_and_fact": {
            "name": "test_union_rule_and_fact",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_factor": []
            }
        },
        "TestUnion.test_union_longer": {
            "name": "test_union_longer",
            "location": 887,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestUnion.test_union_same_output": {
            "name": "test_union_same_output",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestUnion.test_union_implied_but_not_universal_easy": {
            "name": "test_union_implied_but_not_universal_easy",
            "location": 911,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestUnion.test_union_implied_but_not_universal": {
            "name": "test_union_implied_but_not_universal",
            "location": 919,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestUnion.test_union_implied_change_context": {
            "name": "test_union_implied_change_context",
            "location": 929,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestUnion.test_union_implied_change_context_reverse": {
            "name": "test_union_implied_change_context_reverse",
            "location": 939,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestUnion.test_union_change_context": {
            "name": "test_union_change_context",
            "location": 945,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestUnion.test_union_one_generic_not_matched": {
            "name": "test_union_one_generic_not_matched",
            "location": 965,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestUnion.test_union_returns_universal": {
            "name": "test_union_returns_universal",
            "location": 983,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestUnion.test_union_inconsistent_outputs": {
            "name": "test_union_inconsistent_outputs",
            "location": 994,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": []
            }
        },
        "TestStatuteRules.test_greater_than_implies_equal": {
            "name": "test_greater_than_implies_equal",
            "location": 1016,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beard_response": [],
                "make_beard_rule": []
            }
        },
        "TestStatuteRules.test_reset_inputs_to_create_contradiction": {
            "name": "test_reset_inputs_to_create_contradiction",
            "location": 1025,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beard_response": [],
                "make_beard_rule": []
            }
        },
        "TestStatuteRules.test_greater_than_contradicts_not_greater": {
            "name": "test_greater_than_contradicts_not_greater",
            "location": 1044,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beard_response": [],
                "make_beard_rule": []
            }
        },
        "TestStatuteRules.test_contradictory_fact_about_beard_length": {
            "name": "test_contradictory_fact_about_beard_length",
            "location": 1059,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_beard_client": [],
                "make_beard_rule": []
            }
        },
        "TestStatuteRules.test_is_beard_implied": {
            "name": "test_is_beard_implied",
            "location": 1093,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "facial_hair_over_5mm": [],
                "facial_hair_on_or_below_chin": [],
                "facial_hair_uninterrupted": [],
                "outcome": [],
                "fake_beard_client": [],
                "make_beard_rule": []
            }
        },
        "TestStatuteRules.test_adding_definition_of_transfer": {
            "name": "test_adding_definition_of_transfer",
            "location": 1148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_beard_rule": []
            }
        }
    },
    "AuthoritySpoke-master/tests/test_workflow.py": {
        "TestAddHoldings.test_create_and_add_holdings": {
            "name": "test_create_and_add_holdings",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/tests/__init__.py": {},
    "AuthoritySpoke-master/tests/io/test_anchor.py": {},
    "AuthoritySpoke-master/tests/io/test_download.py": {
        "TestDownload.test_download_case_by_id": {
            "name": "test_download_case_by_id",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_download_case_by_string_id": {
            "name": "test_download_case_by_string_id",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_full_case_download": {
            "name": "test_full_case_download",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_download_and_make_opinion": {
            "name": "test_download_and_make_opinion",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_download_case_by_cite": {
            "name": "test_download_case_by_cite",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_decision_without_opinion_posits_holding": {
            "name": "test_decision_without_opinion_posits_holding",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_holding": [
                    "str"
                ]
            }
        },
        "TestDownload.test_download_save_and_make_opinion": {
            "name": "test_download_save_and_make_opinion",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestDownload.test_error_download_without_case_reference": {
            "name": "test_error_download_without_case_reference",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_error_bad_cap_id": {
            "name": "test_error_bad_cap_id",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_error_bad_cite": {
            "name": "test_error_bad_cite",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_error_full_case_download_without_api_key": {
            "name": "test_error_full_case_download_without_api_key",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_read_case_using_client": {
            "name": "test_read_case_using_client",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_read_case_from_id_using_client": {
            "name": "test_read_case_from_id_using_client",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_read_full_case_from_id_using_client": {
            "name": "test_read_full_case_from_id_using_client",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_read_case_list_from_eyecite_case_citation": {
            "name": "test_read_case_list_from_eyecite_case_citation",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDownload.test_fail_to_read_id_cite": {
            "name": "test_fail_to_read_id_cite",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/tests/io/test_enactment.py": {
        "TestEnactmentImport.test_enactment_from_dict": {
            "name": "test_enactment_from_dict",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestEnactmentImport.test_enactment_with_anchor": {
            "name": "test_enactment_with_anchor",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": [],
                "make_response": []
            }
        },
        "TestEnactmentImport.test_enactment_import_from_yaml": {
            "name": "test_enactment_import_from_yaml",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnactmentImport.test_enactment_import_from_holding": {
            "name": "test_enactment_import_from_holding",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnactmentImport.test_enactment_does_not_fail_for_excess_selector": {
            "name": "test_enactment_does_not_fail_for_excess_selector",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        }
    },
    "AuthoritySpoke-master/tests/io/test_enactment_index.py": {
        "TestIndexEnactments.test_index_section_with_name": {
            "name": "test_index_section_with_name",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section6d": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestIndexEnactments.test_index_key_error": {
            "name": "test_index_key_error",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section6d": []
            }
        },
        "TestCollectEnactments.test_collect_enactments_from_list": {
            "name": "test_collect_enactments_from_list",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section6d": [
                    "str",
                    "bool",
                    "float",
                    "dict[, ]"
                ],
                "section_11_subdivided": [
                    "str",
                    "bool",
                    "float",
                    "dict[, ]"
                ],
                "fifth_a": [
                    "str",
                    "bool",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "TestCollectEnactments.test_collect_enactments_from_dict": {
            "name": "test_collect_enactments_from_dict",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectEnactments.test_replace_enactment_in_source_with_name": {
            "name": "test_replace_enactment_in_source_with_name",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectEnactments.test_collect_enactment_anchors_from_dict": {
            "name": "test_collect_enactment_anchors_from_dict",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectEnactments.test_update_unloaded_enactment_from_api": {
            "name": "test_update_unloaded_enactment_from_api",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_client": []
            }
        },
        "TestCollectEnactments.test_load_updated_enactment_data": {
            "name": "test_load_updated_enactment_data",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_client": []
            }
        },
        "TestCollectEnactments.test_retrieve_enactment_by_name": {
            "name": "test_retrieve_enactment_by_name",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section6d": [
                    "str"
                ],
                "section_11_subdivided": [
                    "str"
                ]
            }
        }
    },
    "AuthoritySpoke-master/tests/io/test_factor.py": {
        "TestFactorFileLoad.test_find_directory_for_json": {
            "name": "test_find_directory_for_json",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntityLoad.test_get_entity_schema": {
            "name": "test_get_entity_schema",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntityLoad.test_load_entity_from_factor_schema": {
            "name": "test_load_entity_from_factor_schema",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntityLoad.test_load_and_dump_entity_from_entity_schema": {
            "name": "test_load_and_dump_entity_from_entity_schema",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFactLoad.test_import_fact_with_entity_name_containing_another": {
            "name": "test_import_fact_with_entity_name_containing_another",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFactLoad.test_import_predicate_with_quantity": {
            "name": "test_import_predicate_with_quantity",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFactLoad.test_make_fact_from_string": {
            "name": "test_make_fact_from_string",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestFactorLoad.test_load_factor_marked_reciprocal": {
            "name": "test_load_factor_marked_reciprocal",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFactorLoad.test_load_fact_with_false": {
            "name": "test_load_fact_with_false",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFactorLoad.test_import_facts_with_factor_schema": {
            "name": "test_import_facts_with_factor_schema",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFactDump.test_dump_with_quantity": {
            "name": "test_dump_with_quantity",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestFactDump.test_dump_complex_fact": {
            "name": "test_dump_complex_fact",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "make_complex_fact": []
            }
        },
        "TestExhibitLoad.test_load_exhibit_with_bracketed_names": {
            "name": "test_load_exhibit_with_bracketed_names",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExhibitDump.test_dump_exhibit": {
            "name": "test_dump_exhibit",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "make_exhibit": []
            }
        },
        "TestExhibitDump.test_dump_and_load_exhibit": {
            "name": "test_dump_and_load_exhibit",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "make_exhibit": []
            }
        },
        "TestEvidenceLoad.test_wrong_schema": {
            "name": "test_wrong_schema",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "make_evidence": []
            }
        },
        "TestEvidenceDump.test_dump_evidence": {
            "name": "test_dump_evidence",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "make_evidence": []
            }
        },
        "TestPleading.test_pleading_short_string": {
            "name": "test_pleading_short_string",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "make_pleading": []
            }
        },
        "TestPleadingDump.test_dump_pleading": {
            "name": "test_dump_pleading",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "make_pleading": []
            }
        },
        "TestAllegationDump.test_dump_allegation": {
            "name": "test_dump_allegation",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "make_allegation": []
            }
        }
    },
    "AuthoritySpoke-master/tests/io/test_holding.py": {
        "TestHoldingDump.test_dump_and_read_holding": {
            "name": "test_dump_and_read_holding",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": [],
                "make_holding": []
            }
        },
        "TestHoldingDump.test_dump_and_load_holding": {
            "name": "test_dump_and_load_holding",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": [],
                "make_holding": []
            }
        },
        "TestHoldingDump.test_dump_holdings_with_comparison": {
            "name": "test_dump_holdings_with_comparison",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestEntityImport.test_index_names_from_otherwise_identical_factors": {
            "name": "test_index_names_from_otherwise_identical_factors",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEntityImport.test_specific_entity": {
            "name": "test_specific_entity",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHoldingImport.test_import_some_holdings": {
            "name": "test_import_some_holdings",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHoldingImport.test_import_enactments_and_anchors": {
            "name": "test_import_enactments_and_anchors",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_opinion_with_holding": [],
                "make_response": []
            }
        },
        "TestHoldingImport.test_read_holdings_and_then_get_anchors": {
            "name": "test_read_holdings_and_then_get_anchors",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestHoldingImport.test_load_and_posit_holdings_with_anchors": {
            "name": "test_load_and_posit_holdings_with_anchors",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestHoldingImport.test_decision_posits_holdings_with_anchors": {
            "name": "test_decision_posits_holdings_with_anchors",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestHoldingImport.test_pass_holdings_to_decision_reading_constructor": {
            "name": "test_pass_holdings_to_decision_reading_constructor",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_read_holding_with_no_anchor": {
            "name": "test_read_holding_with_no_anchor",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_analysis": []
            }
        },
        "TestTextAnchors.test_holding_without_enactments_or_regime": {
            "name": "test_holding_without_enactments_or_regime",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_holding": []
            }
        },
        "TestTextAnchors.test_posit_one_holding_with_anchor": {
            "name": "test_posit_one_holding_with_anchor",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_holding": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_mentioned_context_changing": {
            "name": "test_mentioned_context_changing",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextAnchors.test_holdings_with_allegation_and_exhibit": {
            "name": "test_holdings_with_allegation_and_exhibit",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextAnchors.test_select_enactment_text_by_default": {
            "name": "test_select_enactment_text_by_default",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_enactment_has_subsection": {
            "name": "test_enactment_has_subsection",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_enactment_text_limited_to_subsection": {
            "name": "test_enactment_text_limited_to_subsection",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_imported_holding_same_as_test_object": {
            "name": "test_imported_holding_same_as_test_object",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "real_holding": [],
                "make_opinion": []
            }
        },
        "TestTextAnchors.test_same_enactment_objects_equal": {
            "name": "test_same_enactment_objects_equal",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_same_enactment_in_two_opinions": {
            "name": "test_same_enactment_in_two_opinions",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_same_object_for_enactment_in_import": {
            "name": "test_same_object_for_enactment_in_import",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_fact_from_loaded_holding": {
            "name": "test_fact_from_loaded_holding",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_fact_with_quantity": {
            "name": "test_fact_with_quantity",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_use_int_not_pint_without_dimension": {
            "name": "test_use_int_not_pint_without_dimension",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_opinion_posits_holding": {
            "name": "test_opinion_posits_holding",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_opinion_posits_holding_tuple_context": {
            "name": "test_opinion_posits_holding_tuple_context",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_opinion_posits_holding_dict_context": {
            "name": "test_opinion_posits_holding_dict_context",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_holding_with_non_generic_value": {
            "name": "test_holding_with_non_generic_value",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_error_because_string_does_not_match_factor_name": {
            "name": "test_error_because_string_does_not_match_factor_name",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestTextAnchors.test_error_classname_does_not_exist": {
            "name": "test_error_classname_does_not_exist",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTextAnchors.test_repeating_read_holdings_has_same_result": {
            "name": "test_repeating_read_holdings_has_same_result",
            "location": 617,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_analysis": []
            }
        },
        "TestTextAnchors.test_posit_holding_with_selector": {
            "name": "test_posit_holding_with_selector",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_analysis": [],
                "make_opinion": []
            }
        },
        "TestExclusiveFlag.test_holding_flagged_exclusive": {
            "name": "test_holding_flagged_exclusive",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "e_securing_exclusive_right_to_writings": [],
                "e_copyright_requires_originality": [],
                "make_response": []
            }
        },
        "TestExclusiveFlag.test_fact_containing_wrong_type": {
            "name": "test_fact_containing_wrong_type",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestExclusiveFlag.test_type_field_removed_from_factor": {
            "name": "test_type_field_removed_from_factor",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestExclusiveFlag.test_holding_inferred_from_exclusive": {
            "name": "test_holding_inferred_from_exclusive",
            "location": 695,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_enactment": [],
                "make_response": []
            }
        },
        "TestExclusiveFlag.test_exclusive_does_not_result_in_more_holdings": {
            "name": "test_exclusive_does_not_result_in_more_holdings",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        },
        "TestNestedFactorImport.test_import_holding": {
            "name": "test_import_holding",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_response": []
            }
        }
    },
    "AuthoritySpoke-master/tests/io/test_load.py": {
        "TestHoldingLoad.test_get_json_filepath": {
            "name": "test_get_json_filepath",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHoldingLoad.test_get_yaml_filepath": {
            "name": "test_get_yaml_filepath",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHoldingLoad.test_load_and_read_yaml": {
            "name": "test_load_and_read_yaml",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHoldingLoad.test_load_from_fake_client": {
            "name": "test_load_from_fake_client",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadAndReadFake.test_read_holdings_from_file": {
            "name": "test_read_holdings_from_file",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadAndReadFake.test_read_holdings_in_nested_rule": {
            "name": "test_read_holdings_in_nested_rule",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadAndRead.test_read_holdings_from_yaml": {
            "name": "test_read_holdings_from_yaml",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadAndRead.test_read_holding_anchors_from_yaml": {
            "name": "test_read_holding_anchors_from_yaml",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadAndRead.test_read_enactment_anchors_from_yaml": {
            "name": "test_read_enactment_anchors_from_yaml",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/tests/io/test_name_index.py": {
        "TestCollectMentioned.test_mentioned_from_entity": {
            "name": "test_mentioned_from_entity",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectMentioned.test_insert_in_mentioned_does_not_change_obj": {
            "name": "test_insert_in_mentioned_does_not_change_obj",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectMentioned.test_index_names": {
            "name": "test_index_names",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_factor": []
            }
        },
        "TestCollectMentioned.test_index_names_turns_context_factor_str_into_list": {
            "name": "test_index_names_turns_context_factor_str_into_list",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_factor": []
            }
        },
        "TestCollectMentioned.test_index_before_apostrophe": {
            "name": "test_index_before_apostrophe",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectMentioned.test_update_context_from_bracketed_name": {
            "name": "test_update_context_from_bracketed_name",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectMentioned.test_assign_name": {
            "name": "test_assign_name",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_factor": [
                    "str"
                ]
            }
        },
        "TestCollectMentioned.test_mentioned_from_fact_and_entities": {
            "name": "test_mentioned_from_fact_and_entities",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_factor": []
            }
        },
        "TestCollectMentioned.test_mentioned_ordered_by_length": {
            "name": "test_mentioned_ordered_by_length",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_factor": []
            }
        },
        "TestCollectMentioned.test_name_inferred_from_content": {
            "name": "test_name_inferred_from_content",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectMentioned.test_enactment_name_index": {
            "name": "test_enactment_name_index",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectMentioned.test_context_factor_not_collapsed": {
            "name": "test_context_factor_not_collapsed",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestCollectMentioned.test_enactment_name_in_holding": {
            "name": "test_enactment_name_in_holding",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_usc_client": []
            }
        },
        "TestCollectMentioned.test_update_name_index_with_longer_factor": {
            "name": "test_update_name_index_with_longer_factor",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectMentioned.test_link_longest_terms_first": {
            "name": "test_link_longest_terms_first",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveMentioned.test_add_found_context_to_content": {
            "name": "test_add_found_context_to_content",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveMentioned.test_add_found_context_included_in_placeholder_name": {
            "name": "test_add_found_context_included_in_placeholder_name",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveMentioned.test_retrieve_mentioned_during_load": {
            "name": "test_retrieve_mentioned_during_load",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetrieveMentioned.test_retrieve_references_with_substring": {
            "name": "test_retrieve_references_with_substring",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/tests/io/test_opinion.py": {
        "TestLoadDecision.test_load_decision": {
            "name": "test_load_decision",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadOpinion.test_load_opinion_in_CAP_format": {
            "name": "test_load_opinion_in_CAP_format",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadOpinion.test_load_opinion": {
            "name": "test_load_opinion",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadOpinion.test_empty_holding_list_when_loading_opinion": {
            "name": "test_empty_holding_list_when_loading_opinion",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadOpinion.test_loading_opinion_with_one_holding_in_list": {
            "name": "test_loading_opinion_with_one_holding_in_list",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_anchored_holding": []
            }
        },
        "TestLoadOpinion.test_selectors_not_duplicated": {
            "name": "test_selectors_not_duplicated",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_decision": [
                    "str",
                    "typing.Mapping"
                ],
                "raw_holding": []
            }
        }
    },
    "AuthoritySpoke-master/tests/io/test_predicate.py": {
        "TestPredicateLoad.test_load_just_content": {
            "name": "test_load_just_content",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateLoad.test_load_comparison_not_ending_with_was": {
            "name": "test_load_comparison_not_ending_with_was",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateLoad.test_load_comparison": {
            "name": "test_load_comparison",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateLoad.test_load_and_normalize_quantity": {
            "name": "test_load_and_normalize_quantity",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateLoad.test_load_and_normalize_comparison": {
            "name": "test_load_and_normalize_comparison",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateLoad.test_make_comparison_when_absent": {
            "name": "test_make_comparison_when_absent",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateLoad.test_load_predicate_with_date_expression": {
            "name": "test_load_predicate_with_date_expression",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateDump.test_dump_to_dict_with_units": {
            "name": "test_dump_to_dict_with_units",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateDump.test_round_trip": {
            "name": "test_round_trip",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicateDump.test_dump_predicate_with_date_expression": {
            "name": "test_dump_predicate_with_date_expression",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/tests/io/test_procedure.py": {
        "TestProcedureDump.test_dump_procedure": {
            "name": "test_dump_procedure",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "make_procedure": []
            }
        },
        "TestProcedureDump.test_dump_and_load_procedure": {
            "name": "test_dump_and_load_procedure",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "make_procedure": []
            }
        },
        "TestProcedureLoad.test_load_example": {
            "name": "test_load_example",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/tests/io/test_rule.py": {
        "TestRuleDump.test_dump_rule": {
            "name": "test_dump_rule",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "make_rule": []
            }
        },
        "TestRuleDump.test_dump_and_read_rule": {
            "name": "test_dump_and_read_rule",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "make_procedure": [],
                "e_search_clause": []
            }
        },
        "TestLoadRules.test_loading_rules": {
            "name": "test_loading_rules",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestLoadRules.test_imported_rule_is_type_rule": {
            "name": "test_imported_rule_is_type_rule",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestLoadRules.test_rule_short_string": {
            "name": "test_rule_short_string",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestLoadRules.test_index_names_from_sibling_inputs": {
            "name": "test_index_names_from_sibling_inputs",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLoadRules.test_rule_with_exhibit_as_context_factor": {
            "name": "test_rule_with_exhibit_as_context_factor",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestLoadRules.test_read_rules_without_regime": {
            "name": "test_read_rules_without_regime",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestLoadRules.test_correct_context_after_loading_rules": {
            "name": "test_correct_context_after_loading_rules",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestLoadRules.test_load_any_enactments": {
            "name": "test_load_any_enactments",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        },
        "TestLoadRules.test_generic_terms_after_adding_rules": {
            "name": "test_generic_terms_after_adding_rules",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "fake_beard_client": []
            }
        }
    },
    "AuthoritySpoke-master/tests/io/test_spec.py": {
        "TestSpec.test_fact_in_spec": {
            "name": "test_fact_in_spec",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSpec.test_factor_one_of": {
            "name": "test_factor_one_of",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/tests/statements/test_groups.py": {
        "TestMakeGroup.test_group_from_list": {
            "name": "test_group_from_list",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestMakeGroup.test_group_from_item": {
            "name": "test_group_from_item",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "TestMakeGroup.test_make_empty_group": {
            "name": "test_make_empty_group",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMakeGroup.test_factorgroup_from_factorgroup": {
            "name": "test_factorgroup_from_factorgroup",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestMakeGroup.test_one_factor_implies_and_has_same_context_as_other": {
            "name": "test_one_factor_implies_and_has_same_context_as_other",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestMakeGroup.test_drop_implied_factors": {
            "name": "test_drop_implied_factors",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestMakeGroup.test_drop_implied_factors_unmatched_context": {
            "name": "test_drop_implied_factors_unmatched_context",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestSameFactors.test_group_has_same_factors_as_identical_group": {
            "name": "test_group_has_same_factors_as_identical_group",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestSameFactors.test_group_has_same_factors_as_included_group": {
            "name": "test_group_has_same_factors_as_included_group",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestSameFactors.test_group_does_not_have_same_factors_as_bigger_group": {
            "name": "test_group_does_not_have_same_factors_as_bigger_group",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestSameFactors.test_group_shares_all_factors_with_bigger_group": {
            "name": "test_group_shares_all_factors_with_bigger_group",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestSameFactors.test_group_does_not_share_all_factors_with_smaller_group": {
            "name": "test_group_does_not_share_all_factors_with_smaller_group",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestSameFactors.test_group_means_identical_group": {
            "name": "test_group_means_identical_group",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestSameFactors.test_group_does_not_mean_different_group": {
            "name": "test_group_does_not_mean_different_group",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestSameFactors.test_register_for_matching_entities": {
            "name": "test_register_for_matching_entities",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_factorgroup_implies_none": {
            "name": "test_factorgroup_implies_none",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestImplication.test_factorgroup_implication_of_empty_group": {
            "name": "test_factorgroup_implication_of_empty_group",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestImplication.test_explanation_implication_of_factorgroup": {
            "name": "test_explanation_implication_of_factorgroup",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestContradiction.test_contradiction_of_group": {
            "name": "test_contradiction_of_group",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_add_does_not_consolidate_factors": {
            "name": "test_add_does_not_consolidate_factors",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestAdd.test_add_factor_to_factorgroup": {
            "name": "test_add_factor_to_factorgroup",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestUnion.test_factors_combined_because_of_implication": {
            "name": "test_factors_combined_because_of_implication",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": []
            }
        },
        "TestUnion.test_union_with_factor_outside_group": {
            "name": "test_union_with_factor_outside_group",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestUnion.test_no_contradiction_because_entities_vary": {
            "name": "test_no_contradiction_because_entities_vary",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str"
                ]
            }
        },
        "TestConsistent.test_group_contradicts_single_factor": {
            "name": "test_group_contradicts_single_factor",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConsistent.test_one_statement_does_not_contradict_group": {
            "name": "test_one_statement_does_not_contradict_group",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConsistent.test_group_inconsistent_with_single_factor": {
            "name": "test_group_inconsistent_with_single_factor",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConsistent.test_groups_with_one_statement_consistent": {
            "name": "test_groups_with_one_statement_consistent",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConsistent.test_group_inconsistent_with_one_statement": {
            "name": "test_group_inconsistent_with_one_statement",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConsistent.test_one_statement_inconsistent_with_group": {
            "name": "test_one_statement_inconsistent_with_group",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConsistent.test_one_statement_consistent_with_group": {
            "name": "test_one_statement_consistent_with_group",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConsistent.test_no_contradiction_of_none": {
            "name": "test_no_contradiction_of_none",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConsistent.test_consistent_with_none": {
            "name": "test_consistent_with_none",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AuthoritySpoke-master/tests/statements/test_statement.py": {
        "TestStatements.test_build_fact": {
            "name": "test_build_fact",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_string_representation_of_factor": {
            "name": "test_string_representation_of_factor",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_string_representation_of_absent_factor": {
            "name": "test_string_representation_of_absent_factor",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_string_no_truth_value": {
            "name": "test_string_no_truth_value",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_terms_param_can_be_dict": {
            "name": "test_terms_param_can_be_dict",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_string_for_fact_with_identical_terms": {
            "name": "test_string_for_fact_with_identical_terms",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_complex_fact_no_line_break_in_predicate": {
            "name": "test_complex_fact_no_line_break_in_predicate",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_new_context_replace_fact": {
            "name": "test_new_context_replace_fact",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_too_much_info_to_change_context": {
            "name": "test_too_much_info_to_change_context",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_get_factor_from_recursive_search": {
            "name": "test_get_factor_from_recursive_search",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_new_concrete_context": {
            "name": "test_new_concrete_context",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_new_statement_from_entities": {
            "name": "test_new_statement_from_entities",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_term_cannot_be_string": {
            "name": "test_term_cannot_be_string",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_concrete_to_abstract": {
            "name": "test_concrete_to_abstract",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_entity_slots_as_length_of_factor": {
            "name": "test_entity_slots_as_length_of_factor",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_predicate_with_entities": {
            "name": "test_predicate_with_entities",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_factor_terms_do_not_match_predicate": {
            "name": "test_factor_terms_do_not_match_predicate",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatements.test_repeated_placeholder_in_fact": {
            "name": "test_repeated_placeholder_in_fact",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_equality_factor_from_same_predicate": {
            "name": "test_equality_factor_from_same_predicate",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_equality_factor_from_equal_predicate": {
            "name": "test_equality_factor_from_equal_predicate",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_equality_because_factors_are_generic_entities": {
            "name": "test_equality_because_factors_are_generic_entities",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_unequal_because_a_factor_is_not_generic": {
            "name": "test_unequal_because_a_factor_is_not_generic",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_true_and_false_generic_terms_equal": {
            "name": "test_true_and_false_generic_terms_equal",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_generic_terms_with_different_text_equal": {
            "name": "test_generic_terms_with_different_text_equal",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_equal_referencing_diffent_generic_terms": {
            "name": "test_equal_referencing_diffent_generic_terms",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_factor_reciprocal_unequal": {
            "name": "test_factor_reciprocal_unequal",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_factor_different_predicate_truth_unequal": {
            "name": "test_factor_different_predicate_truth_unequal",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_unequal_because_one_factor_is_absent": {
            "name": "test_unequal_because_one_factor_is_absent",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_equal_with_different_generic_subfactors": {
            "name": "test_equal_with_different_generic_subfactors",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_interchangeable_concrete_terms": {
            "name": "test_interchangeable_concrete_terms",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_means_despite_plural": {
            "name": "test_means_despite_plural",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSameMeaning.test_same_meaning_no_terms": {
            "name": "test_same_meaning_no_terms",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_statement_implies_none": {
            "name": "test_statement_implies_none",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_specific_statement_implies_generic": {
            "name": "test_specific_statement_implies_generic",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_specific_implies_generic_explain": {
            "name": "test_specific_implies_generic_explain",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_specific_implies_generic_form_of_another_fact": {
            "name": "test_specific_implies_generic_form_of_another_fact",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_specific_fact_does_not_imply_generic_entity": {
            "name": "test_specific_fact_does_not_imply_generic_entity",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_statement_does_not_imply_comparison": {
            "name": "test_statement_does_not_imply_comparison",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_statement_implies_because_of_quantity": {
            "name": "test_statement_implies_because_of_quantity",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_statement_implies_with_int_and_float": {
            "name": "test_statement_implies_with_int_and_float",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_statement_implies_with_ints": {
            "name": "test_statement_implies_with_ints",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_statement_implies_no_truth_value": {
            "name": "test_statement_implies_no_truth_value",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_comparison_implies_no_truth_value": {
            "name": "test_comparison_implies_no_truth_value",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_factor_implies_because_of_exact_quantity": {
            "name": "test_factor_implies_because_of_exact_quantity",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_no_implication_pint_quantity_and_int": {
            "name": "test_no_implication_pint_quantity_and_int",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_absent_factor_implies_absent_factor_with_lesser_quantity": {
            "name": "test_absent_factor_implies_absent_factor_with_lesser_quantity",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watt_factor": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "TestImplication.test_equal_factors_not_gt": {
            "name": "test_equal_factors_not_gt",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_implication_complex_whether": {
            "name": "test_implication_complex_whether",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_implication_complex_explain": {
            "name": "test_implication_complex_explain",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_context_registers_for_complex_comparison": {
            "name": "test_context_registers_for_complex_comparison",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_no_implication_complex": {
            "name": "test_no_implication_complex",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_implied_by": {
            "name": "test_implied_by",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImplication.test_explanation_implied_by": {
            "name": "test_explanation_implied_by",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_factor_different_predicate_truth_contradicts": {
            "name": "test_factor_different_predicate_truth_contradicts",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_same_predicate_true_vs_false": {
            "name": "test_same_predicate_true_vs_false",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_factor_does_not_contradict_predicate": {
            "name": "test_factor_does_not_contradict_predicate",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_factor_contradiction_absent_predicate": {
            "name": "test_factor_contradiction_absent_predicate",
            "location": 717,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_absences_of_contradictory_facts_consistent": {
            "name": "test_absences_of_contradictory_facts_consistent",
            "location": 725,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_factor_no_contradiction_no_truth_value": {
            "name": "test_factor_no_contradiction_no_truth_value",
            "location": 743,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_broader_absent_factor_contradicts_quantity_statement": {
            "name": "test_broader_absent_factor_contradicts_quantity_statement",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_less_specific_absent_contradicts_more_specific": {
            "name": "test_less_specific_absent_contradicts_more_specific",
            "location": 773,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_no_contradiction_with_more_specific_absent": {
            "name": "test_no_contradiction_with_more_specific_absent",
            "location": 791,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_contradiction_complex": {
            "name": "test_contradiction_complex",
            "location": 809,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_no_contradiction_complex": {
            "name": "test_no_contradiction_complex",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_no_contradiction_of_None": {
            "name": "test_no_contradiction_of_None",
            "location": 856,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_contradicts_if_present_both_present": {
            "name": "test_contradicts_if_present_both_present",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_contradicts_if_present_one_absent": {
            "name": "test_contradicts_if_present_one_absent",
            "location": 879,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_false_does_not_contradict_absent": {
            "name": "test_false_does_not_contradict_absent",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_inconsistent_statements_about_different_entities": {
            "name": "test_inconsistent_statements_about_different_entities",
            "location": 910,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_inconsistent_statements_about_corresponding_entities": {
            "name": "test_inconsistent_statements_about_corresponding_entities",
            "location": 931,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_check_entity_consistency_true": {
            "name": "test_check_entity_consistency_true",
            "location": 955,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_check_entity_consistency_false": {
            "name": "test_check_entity_consistency_false",
            "location": 970,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_entity_consistency_identity_not_equality": {
            "name": "test_entity_consistency_identity_not_equality",
            "location": 985,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContradiction.test_check_entity_consistency_type_error": {
            "name": "test_check_entity_consistency_type_error",
            "location": 1000,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_entity": [
                    "str",
                    "bool"
                ],
                "make_factor": [
                    "str",
                    "bool"
                ],
                "make_predicate": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestConsistent.test_contradictory_facts_about_same_entity": {
            "name": "test_contradictory_facts_about_same_entity",
            "location": 1037,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConsistent.test_factor_consistent_with_none": {
            "name": "test_factor_consistent_with_none",
            "location": 1046,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddition.test_addition_returns_broader_operand": {
            "name": "test_addition_returns_broader_operand",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddition.test_addition_uses_terms_from_left": {
            "name": "test_addition_uses_terms_from_left",
            "location": 1069,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddition.test_add_unrelated_factors": {
            "name": "test_add_unrelated_factors",
            "location": 1073,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddition.test_union_with_string_fails": {
            "name": "test_union_with_string_fails",
            "location": 1084,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
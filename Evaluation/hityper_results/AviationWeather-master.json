{
    "AviationWeather-master/setup.py": {
        "read": {
            "name": "read",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "find_meta": {
            "name": "find_meta",
            "location": 54,
            "return": [],
            "arguments": {
                "meta": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "AviationWeather-master/docs/source/conf.py": {},
    "AviationWeather-master/src/AviationWeather/calculations.py": {
        "test_equality": {
            "name": "test_equality",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "latlon1": [
                    "str",
                    "float"
                ],
                "latlon2": [
                    "str",
                    "float"
                ]
            }
        },
        "airport_latlon": {
            "name": "airport_latlon",
            "location": 63,
            "return": [
                "LatLon"
            ],
            "arguments": {
                "airport": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_db_session": {
            "name": "get_db_session",
            "location": 76,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "tafs": {
            "name": "tafs",
            "location": 106,
            "return": [
                "list[typing.Union[T,str,int]]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "int",
                    "float"
                ],
                "dep_apt": [
                    "str",
                    "int",
                    "float"
                ],
                "dep_time": [
                    "int"
                ],
                "arr_apt": [
                    "str",
                    "int",
                    "float"
                ],
                "arr_time": [
                    "int"
                ]
            }
        },
        "metars": {
            "name": "metars",
            "location": 138,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "dep_apt": [
                    "str"
                ],
                "arr_apt": [
                    "str"
                ]
            }
        },
        "airsigmets": {
            "name": "airsigmets",
            "location": 158,
            "return": [
                "list[]",
                "str",
                "tuple[typing.Union[int,int]]",
                "int",
                "list[int]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "None"
                ],
                "arrival": [
                    "str",
                    "None"
                ],
                "departure": [
                    "str",
                    "None"
                ]
            }
        },
        "airsigmet_points": {
            "name": "airsigmet_points",
            "location": 174,
            "return": [
                "list[tuple[LatLon]]"
            ],
            "arguments": {
                "airsig": [
                    "int"
                ]
            }
        },
        "find_intersection": {
            "name": "find_intersection",
            "location": 195,
            "return": [
                "list[]"
            ],
            "arguments": {
                "start1": [],
                "end1": [],
                "airsig": [
                    "int",
                    "str"
                ]
            }
        },
        "find_intersecting_airsigs": {
            "name": "find_intersecting_airsigs",
            "location": 216,
            "return": [
                "list[typing.Union[str,object,A]]"
            ],
            "arguments": {
                "airsigs": [
                    "list[str]",
                    "list[object]",
                    "list[A]",
                    "list[]",
                    "str"
                ],
                "route": [
                    "list[str]",
                    "list[object]",
                    "list[A]",
                    "list[]",
                    "str"
                ]
            }
        },
        "get_flightaware_client": {
            "name": "get_flightaware_client",
            "location": 234,
            "return": [
                "Client"
            ],
            "arguments": {
                "config": [
                    "list[tuple[typing.Union[str,str,str,str,str]]]"
                ]
            }
        },
        "get_flightinfostatus": {
            "name": "get_flightinfostatus",
            "location": 251,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "tuple[typing.Text]"
            ],
            "arguments": {
                "flt_num": [
                    "bool",
                    "dict[int, dict[, ]]",
                    "typing.Mapping",
                    "str"
                ],
                "departure_time": [],
                "client": [
                    "int",
                    "str",
                    "dict[int, dict[, ]]",
                    "list[str]",
                    "tuple[typing.Union[str,...]]"
                ]
            }
        },
        "get_faflightid": {
            "name": "get_faflightid",
            "location": 277,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "client": [
                    "str",
                    "None"
                ],
                "flt_ident": [
                    "str"
                ],
                "dep_apt": [
                    "str",
                    "float"
                ],
                "arr_apt": [
                    "str",
                    "float"
                ],
                "departure_epoch": []
            }
        },
        "get_flight_route_data": {
            "name": "get_flight_route_data",
            "location": 310,
            "return": [
                "list[]"
            ],
            "arguments": {
                "client": [
                    "str",
                    "int"
                ],
                "flight_id": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ]
            }
        },
        "load_route": {
            "name": "load_route",
            "location": 333,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "output": {
            "name": "output",
            "location": 356,
            "return": [],
            "arguments": {
                "wx_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "metar_output": {
            "name": "metar_output",
            "location": 364,
            "return": [],
            "arguments": {
                "departure_metar": [
                    "str",
                    "tuple[int]",
                    "list[bytes]",
                    "int"
                ],
                "arrival_metar": [
                    "str",
                    "tuple[int]",
                    "list[bytes]",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clean_args": {
            "name": "clean_args",
            "location": 423,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "tuple[]"
            ],
            "arguments": {
                "args": []
            }
        },
        "Encoder.default": {
            "name": "default",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        }
    },
    "AviationWeather-master/src/AviationWeather/converter.py": {
        "get_data": {
            "name": "get_data",
            "location": 33,
            "return": [],
            "arguments": {
                "weather_type": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "bytes_to_xml": {
            "name": "bytes_to_xml",
            "location": 53,
            "return": [],
            "arguments": {
                "xml_bytes": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "convert_airsigmets": {
            "name": "convert_airsigmets",
            "location": 73,
            "return": [
                "list[]"
            ],
            "arguments": {
                "root": [
                    "bytes",
                    "str"
                ]
            }
        },
        "process_attrib": {
            "name": "process_attrib",
            "location": 118,
            "return": [],
            "arguments": {
                "attrib": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "process_attrib_metar": {
            "name": "process_attrib_metar",
            "location": 135,
            "return": [],
            "arguments": {
                "attrib": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "convert_tafs": {
            "name": "convert_tafs",
            "location": 150,
            "return": [
                "list[]"
            ],
            "arguments": {
                "root": [
                    "bytes",
                    "str"
                ]
            }
        },
        "convert_metars": {
            "name": "convert_metars",
            "location": 190,
            "return": [
                "list[]"
            ],
            "arguments": {
                "root": [
                    "bytes",
                    "str"
                ]
            }
        },
        "delete_old_data": {
            "name": "delete_old_data",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "weather_type": [
                    "str",
                    "bool",
                    "set[str]"
                ],
                "dbsession": [
                    "str"
                ]
            }
        },
        "get_db_session": {
            "name": "get_db_session",
            "location": 246,
            "return": [
                "typing.Type",
                "dict[str, int]",
                "str"
            ],
            "arguments": {
                "config": []
            }
        },
        "to_db": {
            "name": "to_db",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "maps": [
                    "bytes"
                ],
                "session": []
            }
        },
        "main": {
            "name": "main",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "convert_airsigmets.process": {
            "name": "process",
            "location": 81,
            "return": [],
            "arguments": {
                "kids": [],
                "asigx": []
            }
        },
        "convert_tafs.process": {
            "name": "process",
            "location": 158,
            "return": [],
            "arguments": {
                "kids": [],
                "xml_class": []
            }
        },
        "convert_metars.process": {
            "name": "process",
            "location": 197,
            "return": [],
            "arguments": {
                "kids": [],
                "xml_class": []
            }
        }
    },
    "AviationWeather-master/src/AviationWeather/logging_setup.py": {
        "configure_logging": {
            "name": "configure_logging",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "AviationWeather-master/src/AviationWeather/sql_classes.py": {
        "Base.__json__": {
            "name": "__json__",
            "location": 8,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Points.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AirSigmet.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Forecast.__repr__": {
            "name": "__repr__",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taf.__repr__": {
            "name": "__repr__",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkyCondition.__repr__": {
            "name": "__repr__",
            "location": 190,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurbulenceCondition.__repr__": {
            "name": "__repr__",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IcingCondition.__repr__": {
            "name": "__repr__",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metar.__repr__": {
            "name": "__repr__",
            "location": 274,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetarSkyCondition.__repr__": {
            "name": "__repr__",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AviationWeather-master/src/AviationWeather/xml_classes.py": {
        "XMLBaseClass.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLBaseClass.attributes": {
            "name": "attributes",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLBaseClass.set": {
            "name": "set",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLBaseClass.complete": {
            "name": "complete",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLBaseClass.add_child": {
            "name": "add_child",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "float",
                    "int"
                ]
            }
        },
        "XMLBaseClass.unset_fields": {
            "name": "unset_fields",
            "location": 42,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMLBaseClass.create_mapping": {
            "name": "create_mapping",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AirSigmetXML2.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AirSigmetXML2.create_mapping": {
            "name": "create_mapping",
            "location": 71,
            "return": [
                "AirSigmet"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointsXML2.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointsXML2.create_mapping": {
            "name": "create_mapping",
            "location": 91,
            "return": [
                "Points"
            ],
            "arguments": {
                "self": []
            }
        },
        "TafXML.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TafXML.create_mapping": {
            "name": "create_mapping",
            "location": 116,
            "return": [
                "Taf"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForecastXML.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForecastXML.create_mapping": {
            "name": "create_mapping",
            "location": 149,
            "return": [
                "Forecast"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkyConditionXML.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SkyConditionXML.create_mapping": {
            "name": "create_mapping",
            "location": 171,
            "return": [
                "SkyCondition"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurbulenceConditionXML.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TurbulenceConditionXML.create_mapping": {
            "name": "create_mapping",
            "location": 190,
            "return": [
                "TurbulenceCondition"
            ],
            "arguments": {
                "self": []
            }
        },
        "IcingConditionXML.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IcingConditionXML.create_mapping": {
            "name": "create_mapping",
            "location": 209,
            "return": [
                "IcingCondition"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetarXML.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetarXML.create_mapping": {
            "name": "create_mapping",
            "location": 253,
            "return": [
                "Metar"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetarSkyConditionXML.__init__": {
            "name": "__init__",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetarSkyConditionXML.create_mapping": {
            "name": "create_mapping",
            "location": 274,
            "return": [
                "MetarSkyCondition"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AviationWeather-master/src/AviationWeather/__init__.py": {},
    "AviationWeather-master/src/AviationWeather/__main__.py": {
        "calc": {
            "name": "calc",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "conv": {
            "name": "conv",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "AviationWeather-master/src/AviationWeather/tests/conftest.py": {
        "base_url": {
            "name": "base_url",
            "location": 13,
            "return": [
                "URL"
            ],
            "arguments": {}
        },
        "verify_database": {
            "name": "verify_database",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "engine": {
            "name": "engine",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "sample_data_engine": {
            "name": "sample_data_engine",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "tables": {
            "name": "tables",
            "location": 81,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "engine": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "bool"
                ]
            }
        },
        "dbsession": {
            "name": "dbsession",
            "location": 90,
            "return": [
                "typing.Generator[Session]"
            ],
            "arguments": {
                "engine": [],
                "tables": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "AviationWeather-master/src/AviationWeather/tests/test_calculations.py": {
        "test_test_equality": {
            "name": "test_test_equality",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_airport_latlon": {
            "name": "test_airport_latlon",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_db_session": {
            "name": "test_get_db_session",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_airsigmets": {
            "name": "test_airsigmets",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "dbsession": []
            }
        },
        "test_airsigmet_points": {
            "name": "test_airsigmet_points",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_intersection": {
            "name": "test_find_intersection",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_intersecting_airsigs": {
            "name": "test_find_intersecting_airsigs",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_flightinfostatus": {
            "name": "test_get_flightinfostatus",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_flight_route_data": {
            "name": "test_get_flight_route_data",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_metar_data": {
            "name": "test_get_metar_data",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "dbsession": []
            }
        },
        "test_output": {
            "name": "test_output",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_metar_output": {
            "name": "test_metar_output",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tafs": {
            "name": "test_tafs",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "dbsession": []
            }
        },
        "test_tafs2": {
            "name": "test_tafs2",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "dbsession": []
            }
        },
        "test_get_faflightid": {
            "name": "test_get_faflightid",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_faflightid_with_epoch": {
            "name": "test_get_faflightid_with_epoch",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clean_args": {
            "name": "test_clean_args",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_intersecting_airsigs.mockreturn": {
            "name": "mockreturn",
            "location": 81,
            "return": [],
            "arguments": {
                "s1": [],
                "s2": [],
                "airsig": []
            }
        },
        "Service.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "faflightid": [
                    "int",
                    "float",
                    "str"
                ],
                "ident": [
                    "int",
                    "float",
                    "str"
                ],
                "departure_time": [
                    "int",
                    "float",
                    "None"
                ],
                "dep_apt": [
                    "typing.Text"
                ],
                "arr_apt": [
                    "typing.Text"
                ]
            }
        },
        "Service.FlightInfoStatus": {
            "name": "FlightInfoStatus",
            "location": 99,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, dict[typing.Text, int]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.DecodeFlightRoute": {
            "name": "DecodeFlightRoute",
            "location": 113,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, int]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service2.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service2.FlightInfoStatus": {
            "name": "FlightInfoStatus",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "ident": [
                    "dict[, ]",
                    "bool",
                    "str",
                    "bytes",
                    "None",
                    "list[dict[str, typing.Any]]",
                    "list[typing.Sequence[int]]",
                    "typing.Sequence[]"
                ],
                "include_ex_data": [
                    "bool"
                ],
                "filter": [
                    "typing.Text"
                ],
                "howMany": [
                    "int"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "MockClient.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "faflightid": [
                    "dict[str, typing.Any]",
                    "str",
                    "int"
                ],
                "ident": [
                    "dict[str, typing.Any]",
                    "str",
                    "int"
                ],
                "departure_time": [
                    "dict[str, typing.Any]",
                    "str",
                    "int"
                ],
                "dep_apt": [
                    "typing.Text"
                ],
                "arr_apt": [
                    "typing.Text"
                ]
            }
        }
    },
    "AviationWeather-master/src/AviationWeather/tests/test_converter.py": {
        "test_bytes_to_xml": {
            "name": "test_bytes_to_xml",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bytes_to_xml_metar_data": {
            "name": "test_bytes_to_xml_metar_data",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_airsigmets": {
            "name": "test_convert_airsigmets",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_db": {
            "name": "test_to_db",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "dbsession": [
                    "int",
                    "list[dict[, ]]"
                ]
            }
        },
        "test_process_sky_condition": {
            "name": "test_process_sky_condition",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_turbulence_condition": {
            "name": "test_process_turbulence_condition",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_tafs": {
            "name": "test_convert_tafs",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_metars": {
            "name": "test_convert_metars",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_metars_to_db": {
            "name": "test_metars_to_db",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "dbsession": []
            }
        },
        "test_delete_old_data": {
            "name": "test_delete_old_data",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "dbsession": []
            }
        }
    }
}
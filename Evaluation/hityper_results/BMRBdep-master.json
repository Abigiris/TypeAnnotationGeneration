{
    "BMRBdep-master/BackEnd/get_orcid_token.py": {},
    "BMRBdep-master/BackEnd/bmrbdep/common.py": {
        "get_schema": {
            "name": "get_schema",
            "location": 32,
            "return": [
                "typing.IO",
                "str",
                "list[str]",
                "int",
                "dict[str, typing.Any]",
                "dict[, ]"
            ],
            "arguments": {
                "version": [
                    "str"
                ],
                "schema_format": [
                    "typing.Text"
                ]
            }
        },
        "get_release": {
            "name": "get_release",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "secure_filename": {
            "name": "secure_filename",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "secure_full_path": {
            "name": "secure_full_path",
            "location": 71,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "None",
                    "list[str]"
                ]
            }
        },
        "list_all_depositions": {
            "name": "list_all_depositions",
            "location": 86,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "BMRBdep-master/BackEnd/bmrbdep/depositions.py": {
        "DepositionRepo.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "int",
                    "str"
                ],
                "initialize": [
                    "bool"
                ],
                "read_only": [
                    "bool"
                ]
            }
        },
        "DepositionRepo.__enter__": {
            "name": "__enter__",
            "location": 88,
            "return": [
                "DepositionRepo"
            ],
            "arguments": {
                "self": []
            }
        },
        "DepositionRepo.__exit__": {
            "name": "__exit__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "exc_value": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "traceback": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "DepositionRepo.metadata": {
            "name": "metadata",
            "location": 120,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DepositionRepo.last_commit": {
            "name": "last_commit",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DepositionRepo.deposit": {
            "name": "deposit",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "final_entry": []
            }
        },
        "DepositionRepo.get_entry": {
            "name": "get_entry",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DepositionRepo.write_entry": {
            "name": "write_entry",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "str"
                ]
            }
        },
        "DepositionRepo.get_file": {
            "name": "get_file",
            "location": 421,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ],
                "root": [
                    "bool"
                ]
            }
        },
        "DepositionRepo.get_data_file_list": {
            "name": "get_data_file_list",
            "location": 435,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DepositionRepo.delete_data_file": {
            "name": "delete_data_file",
            "location": 440,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "DepositionRepo.raise_write_errors": {
            "name": "raise_write_errors",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DepositionRepo.write_file": {
            "name": "write_file",
            "location": 470,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "dict[, ]"
                ],
                "data": [
                    "None",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "source_path": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "root": [
                    "bool"
                ]
            }
        },
        "DepositionRepo.commit": {
            "name": "commit",
            "location": 515,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "typing.Callable[bytes, bytes]",
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "BMRBdep-master/BackEnd/bmrbdep/exceptions.py": {
        "ServerError.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str"
                ],
                "status_code": [
                    "None",
                    "int",
                    "float"
                ],
                "payload": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "ServerError.__repr__": {
            "name": "__repr__",
            "location": 12,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerError.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerError.to_dict": {
            "name": "to_dict",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequestError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str"
                ],
                "status_code": [
                    "None",
                    "int",
                    "float"
                ],
                "payload": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "RequestError.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestError.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequestError.to_dict": {
            "name": "to_dict",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "BMRBdep-master/BackEnd/bmrbdep/__init__.py": {
        "handle_our_errors": {
            "name": "handle_our_errors",
            "location": 87,
            "return": [],
            "arguments": {
                "exception": []
            }
        },
        "handle_wrong_method": {
            "name": "handle_wrong_method",
            "location": 105,
            "return": [
                "Response"
            ],
            "arguments": {
                "exception": []
            }
        },
        "handle_other_errors": {
            "name": "handle_other_errors",
            "location": 112,
            "return": [
                "Response"
            ],
            "arguments": {
                "exception": []
            }
        },
        "send_local_file": {
            "name": "send_local_file",
            "location": 149,
            "return": [
                "Response"
            ],
            "arguments": {
                "filename": [
                    "None"
                ]
            }
        },
        "send_validation_status": {
            "name": "send_validation_status",
            "location": 166,
            "return": [],
            "arguments": {
                "uuid": []
            }
        },
        "send_validation_email": {
            "name": "send_validation_email",
            "location": 175,
            "return": [],
            "arguments": {
                "uuid": [],
                "repo_object": [
                    "None"
                ]
            }
        },
        "validate_user": {
            "name": "validate_user",
            "location": 254,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "duplicate_deposition": {
            "name": "duplicate_deposition",
            "location": 273,
            "return": [],
            "arguments": {
                "uuid": []
            }
        },
        "new_deposition": {
            "name": "new_deposition",
            "location": 326,
            "return": [],
            "arguments": {}
        },
        "deposit_entry": {
            "name": "deposit_entry",
            "location": 573,
            "return": [],
            "arguments": {
                "uuid": []
            }
        },
        "file_operations": {
            "name": "file_operations",
            "location": 621,
            "return": [],
            "arguments": {
                "uuid": [],
                "path": []
            }
        },
        "store_file": {
            "name": "store_file",
            "location": 637,
            "return": [],
            "arguments": {
                "uuid": []
            }
        },
        "fetch_or_store_deposition": {
            "name": "fetch_or_store_deposition",
            "location": 665,
            "return": [],
            "arguments": {
                "uuid": []
            }
        },
        "handle_other_errors.check_local_ip": {
            "name": "check_local_ip",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "MockMail.send": {
            "name": "send",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "store_file.custom_stream_factory": {
            "name": "custom_stream_factory",
            "location": 645,
            "return": [],
            "arguments": {
                "total_content_length": [],
                "filename": [],
                "content_type": [],
                "content_length": [
                    "None"
                ]
            }
        }
    },
    "BMRBdep-master/BackEnd/bmrbdep/helpers/pubmed.py": {
        "_safe_unidecode": {
            "name": "_safe_unidecode",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "int",
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]",
                    "typing.Type"
                ]
            }
        },
        "_get_tag_value": {
            "name": "_get_tag_value",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "tag_name": [
                    "str",
                    "None"
                ],
                "root": []
            }
        },
        "update_citation_with_pubmed": {
            "name": "update_citation_with_pubmed",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "citation_saveframe": [],
                "schema": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        }
    },
    "BMRBdep-master/BackEnd/bmrbdep/helpers/star_tools.py": {
        "_sort_saveframes": {
            "name": "_sort_saveframes",
            "location": 5,
            "return": [
                "list[typing.Union[str,T]]"
            ],
            "arguments": {
                "sort_list": [
                    "list[]",
                    "list[str]",
                    "list[T]",
                    "typing.Callable[, ]",
                    "dict[str, str]",
                    "str",
                    "None"
                ]
            }
        },
        "merge_entries": {
            "name": "merge_entries",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "template_entry": [
                    "bool",
                    "str",
                    "None"
                ],
                "existing_entry": [],
                "new_schema": [
                    "bytes",
                    "str",
                    "list[\"DictDataLoader\"]"
                ],
                "preserve_entry_information": [
                    "bool"
                ]
            }
        },
        "create_entity_for_saveframe_and_attach": {
            "name": "create_entity_for_saveframe_and_attach",
            "location": 102,
            "return": [],
            "arguments": {
                "parent_entry": [],
                "saveframe": [
                    "str"
                ],
                "schema": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "upgrade_chemcomps_and_create_entities_where_needed": {
            "name": "upgrade_chemcomps_and_create_entities_where_needed",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "entry": [],
                "schema": [
                    "bool",
                    "typing.Callable[typing.Mapping, collections.abc.Awaitable[]]",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "_sort_saveframes.convert": {
            "name": "convert",
            "location": 10,
            "return": [
                "int"
            ],
            "arguments": {
                "text": []
            }
        },
        "_sort_saveframes.alphanum_key": {
            "name": "alphanum_key",
            "location": 13,
            "return": [
                "list[]"
            ],
            "arguments": {
                "key": []
            }
        }
    },
    "BMRBdep-master/BackEnd/bmrbdep/helpers/__init__.py": {},
    "BMRBdep-master/BackEnd/bmrbdep/stats/__init__.py": {},
    "BMRBdep-master/BackEnd/bmrbdep/stats/__main__.py": {},
    "BMRBdep-master/BackEnd/schema/schema_loader.py": {
        "schema_emitter": {
            "name": "schema_emitter",
            "location": 65,
            "return": [
                "typing.Generator[tuple[typing.Union[int,int]]]"
            ],
            "arguments": {
                "small_molecule": [
                    "bool"
                ]
            }
        },
        "get_file": {
            "name": "get_file",
            "location": 79,
            "return": [
                "None",
                "StringIO"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ],
                "commit": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "get_main_schema": {
            "name": "get_main_schema",
            "location": 98,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "commit": [
                    "str",
                    "None"
                ],
                "small_molecule": [
                    "bool"
                ]
            }
        },
        "get_data_file_types": {
            "name": "get_data_file_types",
            "location": 140,
            "return": [
                "None",
                "list[str]"
            ],
            "arguments": {
                "rev": [
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "get_dict": {
            "name": "get_dict",
            "location": 188,
            "return": [
                "dict[typing.Text, typing.Union[str,list[list[]]]]"
            ],
            "arguments": {
                "fob": [
                    "None"
                ],
                "headers": [
                    "str"
                ],
                "number_fields": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "list[dict[, ]]",
                    "list[str]"
                ],
                "skip": [
                    "None"
                ]
            }
        },
        "load_schemas": {
            "name": "load_schemas",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "rev": [
                    "str",
                    "None",
                    "bool"
                ],
                "small_molecule": [
                    "bool"
                ]
            }
        },
        "get_dict.skip_end_and_comments": {
            "name": "skip_end_and_comments",
            "location": 197,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    }
}
{
    "Blackstone-master/setup.py": {},
    "Blackstone-master/blackstone/displacy_palette.py": {},
    "Blackstone-master/blackstone/version.py": {},
    "Blackstone-master/blackstone/__init__.py": {},
    "Blackstone-master/blackstone/pipeline/abbreviations.py": {
        "find_abbreviation": {
            "name": "find_abbreviation",
            "location": 19,
            "return": [
                "tuple[None]",
                "tuple[]"
            ],
            "arguments": {
                "long_form_candidate": [],
                "short_form_candidate": []
            }
        },
        "contains": {
            "name": "contains",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "str": [],
                "set": []
            }
        },
        "filter_matches": {
            "name": "filter_matches",
            "location": 97,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "matcher_output": [],
                "doc": []
            }
        },
        "short_form_filter": {
            "name": "short_form_filter",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "span": []
            }
        },
        "AbbreviationDetector.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nlp": []
            }
        },
        "AbbreviationDetector.find": {
            "name": "find",
            "location": 177,
            "return": [
                "tuple[set[]]"
            ],
            "arguments": {
                "self": [],
                "span": [],
                "doc": []
            }
        },
        "AbbreviationDetector.__call__": {
            "name": "__call__",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "doc": []
            }
        },
        "AbbreviationDetector.find_matches_for": {
            "name": "find_matches_for",
            "location": 204,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "filtered": [],
                "doc": []
            }
        }
    },
    "Blackstone-master/blackstone/pipeline/compound_cases.py": {
        "CompoundCases.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nlp": []
            }
        },
        "CompoundCases.__call__": {
            "name": "__call__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "doc": []
            }
        }
    },
    "Blackstone-master/blackstone/pipeline/concepts.py": {
        "Concepts.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nlp": []
            }
        },
        "Concepts.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "int"
                ]
            }
        }
    },
    "Blackstone-master/blackstone/pipeline/sentence_segmenter.py": {
        "token_in_match_range": {
            "name": "token_in_match_range",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "token": [],
                "matches": []
            }
        },
        "SentenceSegmenter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [],
                "boundary_protection_rules": [
                    "list[]"
                ]
            }
        },
        "SentenceSegmenter.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "doc": []
            }
        }
    },
    "Blackstone-master/blackstone/pipeline/__init__.py": {},
    "Blackstone-master/blackstone/rules/citation_rules.py": {},
    "Blackstone-master/blackstone/rules/concept_rules.py": {},
    "Blackstone-master/blackstone/rules/__init__.py": {},
    "Blackstone-master/blackstone/utils/legislation_linker.py": {
        "filter_spans": {
            "name": "filter_spans",
            "location": 27,
            "return": [
                "list[]"
            ],
            "arguments": {
                "spans": [
                    "int",
                    "list[]"
                ]
            }
        },
        "has_numbers": {
            "name": "has_numbers",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "input_string": [
                    "str",
                    "bytes"
                ]
            }
        },
        "extract_legislation_relations": {
            "name": "extract_legislation_relations",
            "location": 52,
            "return": [
                "list[tuple[typing.Union[list[],typing.Text]]]"
            ],
            "arguments": {
                "doc": []
            }
        },
        "set_legislation_target": {
            "name": "set_legislation_target",
            "location": 99,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "instrument": [
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "set_provision_target": {
            "name": "set_provision_target",
            "location": 126,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "subject": [
                    "str",
                    "None",
                    "bytes",
                    "int"
                ]
            }
        },
        "filter_spans.get_sort_key": {
            "name": "get_sort_key",
            "location": 32,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "span": []
            }
        }
    },
    "Blackstone-master/blackstone/utils/__init__.py": {},
    "Blackstone-master/examples/blackstream.py": {
        "process_request": {
            "name": "process_request",
            "location": 12,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "response": [
                    "typing.Iterator"
                ]
            }
        },
        "process_text": {
            "name": "process_text",
            "location": 24,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "Blackstone-master/examples/dep_and_pos.py": {},
    "Blackstone-master/examples/ner.py": {},
    "Blackstone-master/examples/vectors.py": {
        "most_similar": {
            "name": "most_similar",
            "location": 10,
            "return": [],
            "arguments": {
                "word": [
                    "dict[str, float]",
                    "float",
                    "dict[, ]"
                ]
            }
        }
    },
    "Blackstone-master/scripts/init_model.py": {
        "init_model": {
            "name": "init_model",
            "location": 54,
            "return": [],
            "arguments": {
                "lang": [],
                "output_dir": [],
                "freqs_loc": [],
                "vectors_loc": [],
                "no_expand_vectors": [],
                "meta_overrides": [],
                "prune_vectors": [],
                "min_word_frequency": []
            }
        },
        "open_file": {
            "name": "open_file",
            "location": 90,
            "return": [],
            "arguments": {
                "loc": []
            }
        },
        "create_model": {
            "name": "create_model",
            "location": 106,
            "return": [],
            "arguments": {
                "lang": [],
                "probs": [],
                "oov_prob": [],
                "vectors_data": [],
                "vector_keys": [],
                "expand_vectors": [],
                "prune_vectors": []
            }
        },
        "read_vectors": {
            "name": "read_vectors",
            "location": 151,
            "return": [],
            "arguments": {
                "vectors_loc": []
            }
        },
        "read_freqs": {
            "name": "read_freqs",
            "location": 168,
            "return": [],
            "arguments": {
                "freqs_loc": [],
                "max_length": [],
                "min_doc_freq": [],
                "min_freq": []
            }
        }
    },
    "Blackstone-master/scripts/rule_builder.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "None",
                    "bool",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.TextIO"
                ],
                "TERMINOLOGY": [
                    "str"
                ],
                "output_file": [
                    "str"
                ],
                "label": [
                    "None",
                    "str",
                    "list[str]",
                    "list[tuple[typing.Union[int,int]]]",
                    "int"
                ]
            }
        }
    },
    "Blackstone-master/scripts/simple_training.py": {
        "trim_entity_spans": {
            "name": "trim_entity_spans",
            "location": 24,
            "return": [
                "list[list[dict[typing.Text, list[list[int]]]]]"
            ],
            "arguments": {
                "data": [
                    "list[]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bytes",
                    "tuple[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "None",
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "output_dir": [
                    "None",
                    "str",
                    "int"
                ],
                "n_iter": [
                    "int"
                ]
            }
        }
    },
    "Blackstone-master/scripts/train_ner.py": {
        "trim_entity_spans": {
            "name": "trim_entity_spans",
            "location": 30,
            "return": [
                "list[list[dict[typing.Text, list[list[int]]]]]"
            ],
            "arguments": {
                "data": [
                    "list[]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bytes",
                    "tuple[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "None",
                    "str",
                    "bool",
                    "typing.Any"
                ],
                "TRAIN_DATA": [
                    "None",
                    "str",
                    "list[str]",
                    "list[]",
                    "int"
                ],
                "output_dir": [
                    "None",
                    "str"
                ],
                "n_iter": [
                    "int"
                ]
            }
        }
    },
    "Blackstone-master/scripts/train_vectors.py": {
        "compute_vectors": {
            "name": "compute_vectors",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "input_path": [
                    "str",
                    "list[str]"
                ],
                "output_path": [
                    "str",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "sent_loc": [
                    "str",
                    "list[int]",
                    "dict[str, typing.Any]"
                ],
                "output_dir": [
                    "str",
                    "list[int]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "Blackstone-master/scripts/word_freqs.py": {
        "count_frequencies": {
            "name": "count_frequencies",
            "location": 32,
            "return": [
                "tuple[typing.Union[dict[, ],Counter]]"
            ],
            "arguments": {
                "language_class": [
                    "list[str]",
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "int"
                ],
                "input_path": [
                    "str"
                ]
            }
        },
        "parallelize": {
            "name": "parallelize",
            "location": 52,
            "return": [
                "frozenset",
                "str",
                "int",
                "typing.Type"
            ],
            "arguments": {
                "func": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ],
                "iterator": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ],
                "n_jobs": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "merge_counts": {
            "name": "merge_counts",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "frequencies": [
                    "str",
                    "list[str]",
                    "bytes"
                ],
                "output_path": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_dir": [
                    "str",
                    "tuple[pathlib.Path]"
                ],
                "output_dir": [
                    "int",
                    "str",
                    "bytes",
                    "typing.Mapping"
                ],
                "n_jobs": [
                    "int"
                ]
            }
        }
    },
    "Blackstone-master/tests/test_abbreviation.py": {
        "TestAbbreviationDetector.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_containsQuotes": {
            "name": "test_containsQuotes",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_find_abbreviation": {
            "name": "test_find_abbreviation",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_filter_matches": {
            "name": "test_filter_matches",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_find": {
            "name": "test_find",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Blackstone-master/tests/test_legislation_linker.py": {
        "mock_set_legislation_target": {
            "name": "mock_set_legislation_target",
            "location": 12,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "token": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "TestLegislationLinker.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLegislationLinker.test_filter_spans": {
            "name": "test_filter_spans",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLegislationLinker.test_set_legislation_target": {
            "name": "test_set_legislation_target",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLegislationLinker.test_set_provision_target": {
            "name": "test_set_provision_target",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLegislationLinker.test_extract_legislation_relations": {
            "name": "test_extract_legislation_relations",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Blackstone-master/tests/test_sentence_segmenter.py": {
        "TestSentenceSegmenter.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentenceSegmenter.test_citation": {
            "name": "test_citation",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSentenceSegmenter.sum_iterable": {
            "name": "sum_iterable",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str"
                ]
            }
        }
    },
    "Blackstone-master/tests/__init__.py": {}
}
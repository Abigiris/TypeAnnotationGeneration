{
    "CATT-master/setup.py": {},
    "CATT-master/catt/api.py": {
        "discover": {
            "name": "discover",
            "location": 5,
            "return": [
                "list[CattDevice]"
            ],
            "arguments": {}
        },
        "CattDevice.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "ip_addr": [
                    "typing.Text"
                ],
                "lazy": [
                    "bool"
                ]
            }
        },
        "CattDevice.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CattDevice._create_cast": {
            "name": "_create_cast",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CattDevice._create_controller": {
            "name": "_create_controller",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CattDevice.controller": {
            "name": "controller",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CattDevice.play_url": {
            "name": "play_url",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "typing.Any",
                    "None",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[str, str]"
                ],
                "resolve": [
                    "bool"
                ],
                "block": [
                    "bool"
                ]
            }
        },
        "CattDevice.stop": {
            "name": "stop",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CattDevice.play": {
            "name": "play",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CattDevice.pause": {
            "name": "pause",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CattDevice.seek": {
            "name": "seek",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "CattDevice.rewind": {
            "name": "rewind",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "CattDevice.ffwd": {
            "name": "ffwd",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "CattDevice.volume": {
            "name": "volume",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str"
                ]
            }
        },
        "CattDevice.volumeup": {
            "name": "volumeup",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "CattDevice.volumedown": {
            "name": "volumedown",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "CATT-master/catt/cli.py": {
        "process_url": {
            "name": "process_url",
            "location": 54,
            "return": [
                "str",
                "list[]",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "param": [
                    "str",
                    "tuple[str]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "process_path": {
            "name": "process_path",
            "location": 69,
            "return": [
                "Path",
                "None"
            ],
            "arguments": {
                "ctx": [
                    "tuple[str]",
                    "bool",
                    "str"
                ],
                "param": [
                    "tuple[str]",
                    "bool",
                    "str"
                ],
                "value": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "process_device": {
            "name": "process_device",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "param": [
                    "str",
                    "tuple[str]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "None"
                ],
                "delete_cache": [
                    "bool",
                    "list[]"
                ],
                "device": [
                    "str",
                    "None"
                ]
            }
        },
        "write_config": {
            "name": "write_config",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": []
            }
        },
        "load_subtitle_if_exists": {
            "name": "load_subtitle_if_exists",
            "location": 115,
            "return": [
                "None",
                "str",
                "list[tuple[typing.Union[str,int]]]"
            ],
            "arguments": {
                "subtitle": [
                    "str",
                    "list[tuple[typing.Union[str,int]]]"
                ],
                "video": [
                    "str",
                    "bool"
                ],
                "local_ip": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "port": [
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "process_subtitle": {
            "name": "process_subtitle",
            "location": 142,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "tuple[str]"
                ],
                "param": [
                    "str",
                    "tuple[str]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "cast": {
            "name": "cast",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "video_url": [
                    "bytes",
                    "bool",
                    "str"
                ],
                "subtitle": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None"
                ],
                "force_default": [
                    "tuple[typing.Type]",
                    "str",
                    "float",
                    "None",
                    "typing.Callable[, ]"
                ],
                "random_play": [
                    "bool",
                    "str",
                    "typing.Mapping",
                    "None",
                    "dict[int, set[int]]"
                ],
                "no_subs": [
                    "int",
                    "str",
                    "None"
                ],
                "no_playlist": [
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Callable[..., None]"
                ],
                "ytdl_option": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "cast_site": {
            "name": "cast_site",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "url": [
                    "str",
                    "int"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "video_url": [
                    "str",
                    "int"
                ],
                "play_next": [
                    "str",
                    "typing.Callable[typing.Any, bool]",
                    "None",
                    "list[acres.util.acronym.Acronym]",
                    "bool"
                ]
            }
        },
        "remove": {
            "name": "remove",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "video_url": [
                    "str",
                    "typing.IO",
                    "None"
                ]
            }
        },
        "clear": {
            "name": "clear",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ]
            }
        },
        "pause": {
            "name": "pause",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ]
            }
        },
        "play": {
            "name": "play",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ]
            }
        },
        "stop": {
            "name": "stop",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ]
            }
        },
        "rewind": {
            "name": "rewind",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "timedesc": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ffwd": {
            "name": "ffwd",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "timedesc": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "seek": {
            "name": "seek",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "timedesc": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "skip": {
            "name": "skip",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ]
            }
        },
        "volume": {
            "name": "volume",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "level": []
            }
        },
        "volumeup": {
            "name": "volumeup",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "delta": [
                    "int"
                ]
            }
        },
        "volumedown": {
            "name": "volumedown",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "delta": [
                    "int"
                ]
            }
        },
        "status": {
            "name": "status",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "list[]"
                ]
            }
        },
        "info": {
            "name": "info",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "json_output": [
                    "str",
                    "int"
                ]
            }
        },
        "scan": {
            "name": "scan",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "json_output": [
                    "bool"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "path": []
            }
        },
        "restore": {
            "name": "restore",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "print_status": {
            "name": "print_status",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "status": []
            }
        },
        "writeconfig": {
            "name": "writeconfig",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "readconfig": {
            "name": "readconfig",
            "location": 489,
            "return": [
                "dict[str, str]",
                "dict[, ]",
                "dict[str, int]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 508,
            "return": [],
            "arguments": {}
        },
        "CattTimeParamType.convert": {
            "name": "convert",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "param": [
                    "str",
                    "None"
                ],
                "ctx": [
                    "str",
                    "None"
                ]
            }
        },
        "YtdlOptParamType.convert": {
            "name": "convert",
            "location": 42,
            "return": [
                "tuple[typing.Union[str,bool]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "param": [
                    "str",
                    "None"
                ],
                "ctx": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "CATT-master/catt/controllers.py": {
        "get_chromecasts": {
            "name": "get_chromecasts",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "get_chromecast": {
            "name": "get_chromecast",
            "location": 49,
            "return": [
                "None",
                "typing.Text",
                "str"
            ],
            "arguments": {
                "device_name": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "get_chromecast_with_ip": {
            "name": "get_chromecast_with_ip",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "device_ip": [
                    "str",
                    "int"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "get_cast": {
            "name": "get_cast",
            "location": 72,
            "return": [],
            "arguments": {
                "device": [
                    "None",
                    "int",
                    "list[int]",
                    "float",
                    "str"
                ]
            }
        },
        "get_stream": {
            "name": "get_stream",
            "location": 106,
            "return": [
                "StreamInfo"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Union[str,None]]"
                ],
                "device_info": [
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool",
                    "str",
                    "typing.Callable[dict[, ], bool]",
                    "dict[str, str]"
                ],
                "host": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Union[str,None]]"
                ],
                "ytdl_options": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Union[str,None]]"
                ]
            }
        },
        "get_app": {
            "name": "get_app",
            "location": 115,
            "return": [
                "App"
            ],
            "arguments": {
                "id_or_name": [
                    "str",
                    "None"
                ],
                "cast_type": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "strict": [
                    "bool"
                ],
                "show_warning": [
                    "bool"
                ]
            }
        },
        "get_controller": {
            "name": "get_controller",
            "location": 142,
            "return": [],
            "arguments": {
                "cast": [],
                "app": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "action": [
                    "None",
                    "typing.Container",
                    "str"
                ],
                "prep": [
                    "None"
                ]
            }
        },
        "setup_cast": {
            "name": "setup_cast",
            "location": 149,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "device_name": [
                    "str",
                    "int",
                    "list[]",
                    "dict[, ]",
                    "None"
                ],
                "video_url": [
                    "None",
                    "str",
                    "int",
                    "tuple[typing.Union[str,int]]"
                ],
                "controller": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "str",
                    "list[dict[str, str]]"
                ],
                "ytdl_options": [
                    "None",
                    "str",
                    "int",
                    "tuple[typing.Union[str,int]]"
                ],
                "action": [
                    "None",
                    "int",
                    "str",
                    "float"
                ],
                "prep": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "App.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "str",
                    "bool"
                ],
                "app_id": [
                    "str",
                    "int",
                    "bytes"
                ],
                "supported_device_types": [
                    "str",
                    "typing.Container",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "CattStore.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store_path": [
                    "str"
                ]
            }
        },
        "CattStore._create_store_dir": {
            "name": "_create_store_dir",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CattStore._read_store": {
            "name": "_read_store",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CattStore._write_store": {
            "name": "_write_store",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, object]",
                    "bytes",
                    "int",
                    "None"
                ]
            }
        },
        "CattStore.get_data": {
            "name": "get_data",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CattStore.set_data": {
            "name": "set_data",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CattStore.clear": {
            "name": "clear",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache._create_device_entry": {
            "name": "_create_device_entry",
            "location": 221,
            "return": [
                "dict[typing.Text, typing.Union[int,list[typing.Callable[, ]],float]]"
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "int",
                    "list[typing.Callable[, ]]"
                ],
                "port": [
                    "bool",
                    "float"
                ]
            }
        },
        "Cache.get_data": {
            "name": "get_data",
            "location": 227,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "Cache.set_data": {
            "name": "set_data",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "typing.Callable[, ]",
                    "None",
                    "typing.Any",
                    "typing.Iterable[str]"
                ],
                "ip": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "typing.Callable[, ]",
                    "None",
                    "typing.Any",
                    "typing.Iterable[str]"
                ],
                "port": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "typing.Callable[, ]",
                    "None",
                    "typing.Any",
                    "typing.Iterable[str]"
                ]
            }
        },
        "CastState.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_path": [
                    "str",
                    "None",
                    "int"
                ],
                "mode": [
                    "typing.Callable[T, bool]",
                    "int",
                    "typing.BinaryIO",
                    "dict[str, int]",
                    "str"
                ]
            }
        },
        "CastState.get_data": {
            "name": "get_data",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CastState.set_data": {
            "name": "set_data",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "CastStatusListener.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_id": [
                    "str",
                    "None",
                    "int"
                ],
                "active_app_id": [
                    "str",
                    "int",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CastStatusListener.new_cast_status": {
            "name": "new_cast_status",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int"
                ]
            }
        },
        "CastStatusListener._is_app_ready": {
            "name": "_is_app_ready",
            "location": 294,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int"
                ]
            }
        },
        "MediaStatusListener.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_state": [
                    "typing.Sequence[tuple[typing.Union[str,int]]]",
                    "bytes",
                    "tuple[str]",
                    "list[dict[, ]]",
                    "dict[str, dict[str, int]]",
                    "dict[, ]"
                ],
                "states": [
                    "dict[typing.Type, typing.Any]"
                ],
                "invert": [
                    "bool"
                ],
                "fail": [
                    "bool"
                ]
            }
        },
        "MediaStatusListener.new_media_status": {
            "name": "new_media_status",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "typing.Callable[str, int]",
                    "int"
                ]
            }
        },
        "MediaStatusListener.wait_for_states": {
            "name": "wait_for_states",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "None",
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "SimpleListener.__init__": {
            "name": "__init__",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleListener.new_media_status": {
            "name": "new_media_status",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ]
            }
        },
        "SimpleListener.block_until_status_received": {
            "name": "block_until_status_received",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CastController.__init__": {
            "name": "__init__",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cast": [
                    "str"
                ],
                "app": [
                    "str"
                ],
                "prep": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "CastController.prep_app": {
            "name": "prep_app",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CastController.prep_control": {
            "name": "prep_control",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CastController.prep_info": {
            "name": "prep_info",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CastController._check_inactive": {
            "name": "_check_inactive",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CastController._update_status": {
            "name": "_update_status",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CastController.cc_name": {
            "name": "cc_name",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CastController.info": {
            "name": "info",
            "location": 419,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CastController.media_info": {
            "name": "media_info",
            "location": 428,
            "return": [
                "dict[typing.Text, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CastController.cast_info": {
            "name": "cast_info",
            "location": 438,
            "return": [
                "dict[typing.Text, typing.Union[int,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CastController.is_streaming_local_file": {
            "name": "is_streaming_local_file",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CastController._is_seekable": {
            "name": "_is_seekable",
            "location": 460,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CastController._is_audiovideo": {
            "name": "_is_audiovideo",
            "location": 465,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CastController._is_idle": {
            "name": "_is_idle",
            "location": 473,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CastController.volume": {
            "name": "volume",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str"
                ]
            }
        },
        "CastController.volumeup": {
            "name": "volumeup",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "str"
                ]
            }
        },
        "CastController.volumedown": {
            "name": "volumedown",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "str"
                ]
            }
        },
        "CastController.kill": {
            "name": "kill",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idle_only": [
                    "bool"
                ]
            }
        },
        "MediaControllerMixin.play": {
            "name": "play",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaControllerMixin.pause": {
            "name": "pause",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MediaControllerMixin.seek": {
            "name": "seek",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MediaControllerMixin.rewind": {
            "name": "rewind",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MediaControllerMixin.ffwd": {
            "name": "ffwd",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seconds": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MediaControllerMixin.skip": {
            "name": "skip",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlaybackBaseMixin.play_media_url": {
            "name": "play_media_url",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_url": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "PlaybackBaseMixin.play_media_id": {
            "name": "play_media_id",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "PlaybackBaseMixin.play_playlist": {
            "name": "play_playlist",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "playlist_id": [
                    "str",
                    "bytes",
                    "int"
                ],
                "video_id": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "PlaybackBaseMixin.wait_for": {
            "name": "wait_for",
            "location": 547,
            "return": [],
            "arguments": {
                "self": [],
                "states": [
                    "typing.Callable[, ]"
                ],
                "invert": [
                    "bool"
                ],
                "fail": [
                    "bool"
                ],
                "timeout": [
                    "None",
                    "int",
                    "set[int]",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "PlaybackBaseMixin.restore": {
            "name": "restore",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "DefaultCastController.__init__": {
            "name": "__init__",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cast": [
                    "typing.Callable[list[], None]"
                ],
                "app": [
                    "typing.Callable[list[], None]"
                ],
                "prep": [
                    "None",
                    "typing.Callable[list[], None]"
                ]
            }
        },
        "DefaultCastController.play_media_url": {
            "name": "play_media_url",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_url": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "DefaultCastController.restore": {
            "name": "restore",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "DashCastController.__init__": {
            "name": "__init__",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cast": [
                    "typing.Callable[list[], None]"
                ],
                "app": [
                    "typing.Callable[list[], None]"
                ],
                "prep": [
                    "None",
                    "typing.Callable[list[], None]"
                ]
            }
        },
        "DashCastController.load_url": {
            "name": "load_url",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "DashCastController.prep_app": {
            "name": "prep_app",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YoutubeCastController.__init__": {
            "name": "__init__",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cast": [
                    "typing.Callable[list[], None]"
                ],
                "app": [
                    "typing.Callable[list[], None]"
                ],
                "prep": [
                    "None",
                    "typing.Callable[list[], None]"
                ]
            }
        },
        "YoutubeCastController.play_media_id": {
            "name": "play_media_id",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "int",
                    "str"
                ]
            }
        },
        "YoutubeCastController.play_playlist": {
            "name": "play_playlist",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "playlist_id": [
                    "int",
                    "str",
                    "None"
                ],
                "video_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "YoutubeCastController.add": {
            "name": "add",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str",
                    "int"
                ]
            }
        },
        "YoutubeCastController.add_next": {
            "name": "add_next",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "int",
                    "str"
                ]
            }
        },
        "YoutubeCastController.remove": {
            "name": "remove",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str",
                    "typing.Iterable[int]",
                    "int"
                ]
            }
        },
        "YoutubeCastController.clear": {
            "name": "clear",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YoutubeCastController.restore": {
            "name": "restore",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        },
        "CastController._update_status.update": {
            "name": "update",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CATT-master/catt/error.py": {},
    "CATT-master/catt/http_server.py": {
        "copy_byte_range": {
            "name": "copy_byte_range",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "infile": [],
                "outfile": [
                    "bool",
                    "str",
                    "None"
                ],
                "start": [
                    "None",
                    "int",
                    "list[]",
                    "str",
                    "typing.Callable[str, bool]"
                ],
                "stop": [
                    "int"
                ],
                "bufsize": [
                    "int"
                ]
            }
        },
        "parse_byte_range": {
            "name": "parse_byte_range",
            "location": 27,
            "return": [
                "tuple[None]",
                "tuple[int]"
            ],
            "arguments": {
                "byte_range": [
                    "str"
                ]
            }
        },
        "serve_file": {
            "name": "serve_file",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "address": [
                    "typing.Text"
                ],
                "port": [
                    "int"
                ],
                "content_type": [
                    "None",
                    "str",
                    "int",
                    "typing.Hashable",
                    "typing.Mapping"
                ]
            }
        },
        "serve_file.FileHandler.format_size": {
            "name": "format_size",
            "location": 47,
            "return": [
                "tuple[typing.Text]",
                "tuple[typing.Union[int,typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "serve_file.FileHandler.log_message": {
            "name": "log_message",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "format": []
            }
        },
        "serve_file.FileHandler.do_GET": {
            "name": "do_GET",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CATT-master/catt/stream_info.py": {
        "StreamInfo.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_url": [
                    "str",
                    "dict[, ]"
                ],
                "host": [
                    "None",
                    "int"
                ],
                "model": [
                    "None",
                    "str",
                    "int"
                ],
                "device_type": [
                    "None",
                    "str",
                    "int",
                    "typing.Sequence[typing.Any]",
                    "typing.Type"
                ],
                "ytdl_options": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "StreamInfo.is_remote_file": {
            "name": "is_remote_file",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo._is_direct_link": {
            "name": "_is_direct_link",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.is_playlist": {
            "name": "is_playlist",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.is_playlist_with_active_entry": {
            "name": "is_playlist_with_active_entry",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.extractor": {
            "name": "extractor",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.video_title": {
            "name": "video_title",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.video_url": {
            "name": "video_url",
            "location": 98,
            "return": [
                "typing.Text",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.video_id": {
            "name": "video_id",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.video_thumbnail": {
            "name": "video_thumbnail",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.guessed_content_type": {
            "name": "guessed_content_type",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.playlist_length": {
            "name": "playlist_length",
            "location": 124,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.playlist_all_ids": {
            "name": "playlist_all_ids",
            "location": 128,
            "return": [
                "list[]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.playlist_title": {
            "name": "playlist_title",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.playlist_id": {
            "name": "playlist_id",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamInfo.set_playlist_entry": {
            "name": "set_playlist_entry",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "StreamInfo._get_stream_preinfo": {
            "name": "_get_stream_preinfo",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "video_url": [
                    "str",
                    "None"
                ]
            }
        },
        "StreamInfo._get_stream_info": {
            "name": "_get_stream_info",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "preinfo": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "StreamInfo._get_stream_url": {
            "name": "_get_stream_url",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "str"
                ]
            }
        }
    },
    "CATT-master/catt/util.py": {
        "warning": {
            "name": "warning",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int",
                    "float",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "echo_json": {
            "name": "echo_json",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "data_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "guess_mime": {
            "name": "guess_mime",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "path": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "hunt_subtitle": {
            "name": "hunt_subtitle",
            "location": 42,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "video": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "convert_srt_to_webvtt": {
            "name": "convert_srt_to_webvtt",
            "location": 55,
            "return": [],
            "arguments": {
                "content": [
                    "str"
                ]
            }
        },
        "read_srt_subs": {
            "name": "read_srt_subs",
            "location": 65,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "human_time": {
            "name": "human_time",
            "location": 76,
            "return": [],
            "arguments": {
                "seconds": [
                    "int",
                    "float"
                ]
            }
        },
        "get_local_ip": {
            "name": "get_local_ip",
            "location": 80,
            "return": [
                "list[]"
            ],
            "arguments": {
                "host": [
                    "int",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "is_ipaddress": {
            "name": "is_ipaddress",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "device": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "CATT-master/catt/__init__.py": {},
    "CATT-master/examples/accidents.py": {
        "ouch": {
            "name": "ouch",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "set[str]",
                    "str",
                    "list[]",
                    "set[]"
                ]
            }
        }
    },
    "CATT-master/realcc_tests/test_procedure.py": {
        "subp_run": {
            "name": "subp_run",
            "location": 17,
            "return": [],
            "arguments": {
                "cmd": [],
                "allow_failure": [
                    "bool"
                ]
            }
        },
        "run_tests": {
            "name": "run_tests",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "standard": [
                    "typing.Text"
                ],
                "audio": [
                    "typing.Text"
                ],
                "ultra": [
                    "typing.Text"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "standard": [],
                "audio": [],
                "ultra": []
            }
        },
        "CattTest.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "desc": [],
                "cmd_args": [],
                "sleep": [
                    "int"
                ],
                "should_fail": [
                    "bool"
                ],
                "substring": [
                    "bool"
                ],
                "time_test": [
                    "bool"
                ],
                "check_data": [
                    "None"
                ],
                "check_err": [
                    "typing.Text"
                ]
            }
        },
        "CattTest.set_cmd_base": {
            "name": "set_cmd_base",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base": []
            }
        },
        "CattTest._get_val": {
            "name": "_get_val",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CattTest._should_fail_test": {
            "name": "_should_fail_test",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CattTest._failure_test": {
            "name": "_failure_test",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CattTest._regular_test": {
            "name": "_regular_test",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "time_margin": [
                    "int"
                ]
            }
        },
        "CattTest.run": {
            "name": "run",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CATT-master/tests/test_catt.py": {
        "TestThings.test_stream_info_youtube_video": {
            "name": "test_stream_info_youtube_video",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThings.test_stream_info_youtube_playlist": {
            "name": "test_stream_info_youtube_playlist",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThings.test_stream_info_other_video": {
            "name": "test_stream_info_other_video",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThings.test_cache": {
            "name": "test_cache",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CATT-master/tests/__init__.py": {}
}
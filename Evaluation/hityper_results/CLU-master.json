{
    "CLU-master/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "CLU-master/noxfile.py": {
        "checkmanifest": {
            "name": "checkmanifest",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "checkmodule": {
            "name": "checkmodule",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "module": []
            }
        },
        "pytest": {
            "name": "pytest",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "parametrized_inline_tests": {
            "name": "parametrized_inline_tests",
            "location": 48,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "inline": {
            "name": "inline",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "module": []
            }
        },
        "codecov": {
            "name": "codecov",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        }
    },
    "CLU-master/setup.py": {
        "project_content": {
            "name": "project_content",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "FakeNumpy.get_include": {
            "name": "get_include",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/abstract.py": {
        "Slotted.__new__": {
            "name": "__new__",
            "location": 21,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": [],
                "attributes": []
            }
        },
        "NonSlotted.__new__": {
            "name": "__new__",
            "location": 39,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": [],
                "attributes": []
            }
        },
        "UnhashableMeta.__new__": {
            "name": "__new__",
            "location": 57,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": [],
                "attributes": []
            }
        },
        "Unhashable.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 73,
            "return": [],
            "arguments": {
                "cls": [],
                "subcls": []
            }
        },
        "Format.render": {
            "name": "render",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "Format.__call__": {
            "name": "__call__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "NonFormat.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NonFormat.render": {
            "name": "render",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "Sanitizer.render": {
            "name": "render",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "Cloneable.clone": {
            "name": "clone",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [],
                "memo": []
            }
        },
        "Cloneable.__copy__": {
            "name": "__copy__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cloneable.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "memo": []
            }
        },
        "ReprWrapper.inner_repr": {
            "name": "inner_repr",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReprWrapper.__repr__": {
            "name": "__repr__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SlottedRepr.inner_repr": {
            "name": "inner_repr",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MappingViewRepr.inner_repr": {
            "name": "inner_repr",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDescriptor.__get__": {
            "name": "__get__",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "cls": []
            }
        },
        "DataDescriptor.__set__": {
            "name": "__set__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "DataDescriptor.__delete__": {
            "name": "__delete__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "NamedDescriptor.__set_name__": {
            "name": "__set_name__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "name": []
            }
        },
        "CacheDescriptor.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CacheDescriptor.__get__": {
            "name": "__get__",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CacheDescriptor.__set__": {
            "name": "__set__",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "CacheDescriptor.inner_repr": {
            "name": "inner_repr",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Descriptor.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "name": []
            }
        },
        "Descriptor.__set_name__": {
            "name": "__set_name__",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "name": []
            }
        },
        "Descriptor.__get__": {
            "name": "__get__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Descriptor.__set__": {
            "name": "__set__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "Descriptor.alternative_inner_repr": {
            "name": "alternative_inner_repr",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValueDescriptor.__repr__": {
            "name": "__repr__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasePath.__prepare__": {
            "name": "__prepare__",
            "location": 311,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": [],
                "basepath": []
            }
        },
        "BasePath.__new__": {
            "name": "__new__",
            "location": 315,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": [],
                "attributes": [],
                "basepath": []
            }
        },
        "AppName.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 335,
            "return": [],
            "arguments": {
                "cls": [],
                "appname": []
            }
        },
        "AppName.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagedContext.setup": {
            "name": "setup",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagedContext.teardown": {
            "name": "teardown",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagedContext.__enter__": {
            "name": "__enter__",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ManagedContext.__exit__": {
            "name": "__exit__",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        }
    },
    "CLU-master/clu/all.py": {
        "import_all_modules": {
            "name": "import_all_modules",
            "location": 9,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "basepath": [],
                "appname": [],
                "exportername": [
                    "typing.Text"
                ]
            }
        },
        "import_clu_modules": {
            "name": "import_clu_modules",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "inline_tests": {
            "name": "inline_tests",
            "location": 59,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "testername": [
                    "typing.Text"
                ]
            }
        }
    },
    "CLU-master/clu/application.py": {
        "test": {
            "name": "test",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "AppMeta.exportercls": {
            "name": "exportercls",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AppBase.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AppBase.initialize_finder_and_loader": {
            "name": "initialize_finder_and_loader",
            "location": 61,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "AppBase.initialize_exporter": {
            "name": "initialize_exporter",
            "location": 73,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AppBase.initialize_environ": {
            "name": "initialize_environ",
            "location": 84,
            "return": [
                "Environ"
            ],
            "arguments": {
                "cls": []
            }
        },
        "test.test_one": {
            "name": "test_one",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_app_class_attribs": {
            "name": "show_app_class_attribs",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_spec_cache": {
            "name": "show_spec_cache",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/csv.py": {
        "test": {
            "name": "test",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three": {
            "name": "test_three",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.check_pad_csv": {
            "name": "check_pad_csv",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/dicts.py": {
        "ischainmap": {
            "name": "ischainmap",
            "location": 458,
            "return": [],
            "arguments": {
                "thing": []
            }
        },
        "merge_fast_two": {
            "name": "merge_fast_two",
            "location": 476,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "one": [],
                "two": []
            }
        },
        "merge_fast": {
            "name": "merge_fast",
            "location": 490,
            "return": [
                "dict[, ]",
                "dict[dict[, ], ]"
            ],
            "arguments": {}
        },
        "merge_two": {
            "name": "merge_two",
            "location": 538,
            "return": [],
            "arguments": {
                "one": [],
                "two": [],
                "cls": [
                    "dict[, ]"
                ]
            }
        },
        "merge_as": {
            "name": "merge_as",
            "location": 549,
            "return": [],
            "arguments": {}
        },
        "merge": {
            "name": "merge",
            "location": 561,
            "return": [],
            "arguments": {}
        },
        "asdict": {
            "name": "asdict",
            "location": 571,
            "return": [
                "set[]",
                "dict[, ]"
            ],
            "arguments": {
                "thing": []
            }
        },
        "test": {
            "name": "test",
            "location": 605,
            "return": [],
            "arguments": {}
        },
        "OrderedMappingView.__reversed__": {
            "name": "__reversed__",
            "location": 32,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedMappingView.__getitem__": {
            "name": "__getitem__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "OrderedItemsView.__reversed__": {
            "name": "__reversed__",
            "location": 48,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedItemsView.__getitem__": {
            "name": "__getitem__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "OrderedKeysView.__reversed__": {
            "name": "__reversed__",
            "location": 65,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedKeysView.__getitem__": {
            "name": "__getitem__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "OrderedValuesView.__reversed__": {
            "name": "__reversed__",
            "location": 81,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedValuesView.__getitem__": {
            "name": "__getitem__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "ChainRepr.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainRepr.subrepr": {
            "name": "subrepr",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "thing": [],
                "level": []
            }
        },
        "ChainRepr.primerepr": {
            "name": "primerepr",
            "location": 126,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "mapping": [],
                "level": []
            }
        },
        "ChainRepr.toprepr": {
            "name": "toprepr",
            "location": 151,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "chainmap": [],
                "level": []
            }
        },
        "ChainRepr.repr_dict": {
            "name": "repr_dict",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": [],
                "level": []
            }
        },
        "ChainRepr.repr_UserDict": {
            "name": "repr_UserDict",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": [],
                "level": []
            }
        },
        "ChainRepr.repr_Directory": {
            "name": "repr_Directory",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": [],
                "level": []
            }
        },
        "ChainRepr.repr_TemporaryDirectory": {
            "name": "repr_TemporaryDirectory",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": [],
                "level": []
            }
        },
        "ChainRepr.repr_SimpleNamespace": {
            "name": "repr_SimpleNamespace",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": [],
                "level": []
            }
        },
        "ChainRepr.repr_Namespace": {
            "name": "repr_Namespace",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": [],
                "level": []
            }
        },
        "ChainRepr.repr_defaultdict": {
            "name": "repr_defaultdict",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": [],
                "level": []
            }
        },
        "ChainRepr.repr_OrderedDict": {
            "name": "repr_OrderedDict",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": [],
                "level": []
            }
        },
        "ChainRepr.repr_mappingproxy": {
            "name": "repr_mappingproxy",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "mapping": [],
                "level": []
            }
        },
        "ChainRepr.repr_ChainMap": {
            "name": "repr_ChainMap",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "chainmap": [],
                "level": []
            }
        },
        "ChainRepr.repr_ChainMapPlusPlus": {
            "name": "repr_ChainMapPlusPlus",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "chainmap": [],
                "level": []
            }
        },
        "ChainRepr.shortrepr": {
            "name": "shortrepr",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "thing": []
            }
        },
        "ChainMap.fromkeys": {
            "name": "fromkeys",
            "location": 243,
            "return": [],
            "arguments": {
                "cls": [],
                "iterable": []
            }
        },
        "ChainMap.fromitems": {
            "name": "fromitems",
            "location": 251,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ChainMap.is_a": {
            "name": "is_a",
            "location": 259,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "instance": []
            }
        },
        "ChainMap.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.__missing__": {
            "name": "__missing__",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ChainMap.__getitem__": {
            "name": "__getitem__",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ChainMap.__len__": {
            "name": "__len__",
            "location": 307,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.__iter__": {
            "name": "__iter__",
            "location": 310,
            "return": [
                "typing.Generator[set[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.__contains__": {
            "name": "__contains__",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ChainMap.__bool__": {
            "name": "__bool__",
            "location": 316,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.__str__": {
            "name": "__str__",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.__repr__": {
            "name": "__repr__",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.get": {
            "name": "get",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "ChainMap.mapchain": {
            "name": "mapchain",
            "location": 337,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.top": {
            "name": "top",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.rest": {
            "name": "rest",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.shift": {
            "name": "shift",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.unshift": {
            "name": "unshift",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "map": [
                    "None"
                ]
            }
        },
        "ChainMap.__setitem__": {
            "name": "__setitem__",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ChainMap.__delitem__": {
            "name": "__delitem__",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ChainMap.popitem": {
            "name": "popitem",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.pop": {
            "name": "pop",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "ChainMap.clear": {
            "name": "clear",
            "location": 405,
            "return": [
                "ChainMap"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.mapcontaining": {
            "name": "mapcontaining",
            "location": 410,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "itx": [],
                "default": []
            }
        },
        "ChainMap.flatten": {
            "name": "flatten",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChainMap.clone": {
            "name": "clone",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ],
                "memo": [
                    "None"
                ]
            }
        },
        "ChainMapPlusPlus.__init__": {
            "name": "__init__",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test.dict_arbitrary": {
            "name": "dict_arbitrary",
            "location": 618,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test.fsdata": {
            "name": "fsdata",
            "location": 628,
            "return": [],
            "arguments": {}
        },
        "test.environment": {
            "name": "environment",
            "location": 633,
            "return": [],
            "arguments": {}
        },
        "test.stash_environment": {
            "name": "stash_environment",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three": {
            "name": "test_three",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_four_experimental": {
            "name": "test_four_experimental",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_five": {
            "name": "test_five",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_six_experimental": {
            "name": "test_six_experimental",
            "location": 753,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_seven_experimental": {
            "name": "test_seven_experimental",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_eight": {
            "name": "test_eight",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_nine": {
            "name": "test_nine",
            "location": 817,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.restore_environment": {
            "name": "restore_environment",
            "location": 828,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/dispatch.py": {
        "wraphandler": {
            "name": "wraphandler",
            "location": 23,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "bindhandles": {
            "name": "bindhandles",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "signal_for": {
            "name": "signal_for",
            "location": 56,
            "return": [],
            "arguments": {
                "signum": []
            }
        },
        "exithandle": {
            "name": "exithandle",
            "location": 64,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "unregister": {
            "name": "unregister",
            "location": 72,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "unregister_all": {
            "name": "unregister_all",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "nhandles": {
            "name": "nhandles",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "trigger": {
            "name": "trigger",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "send": [],
                "frame": [
                    "None"
                ]
            }
        },
        "shutdown": {
            "name": "shutdown",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "send": [],
                "frame": [
                    "None"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "wraphandler.wrapper": {
            "name": "wrapper",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.xhandle0": {
            "name": "xhandle0",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "signum": [],
                "frame": [
                    "None"
                ]
            }
        },
        "test.xhandle1": {
            "name": "xhandle1",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "signum": [],
                "frame": [
                    "None"
                ]
            }
        },
        "test.xhandle2": {
            "name": "xhandle2",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "signum": [],
                "frame": [
                    "None"
                ]
            }
        },
        "test.xhandleX": {
            "name": "xhandleX",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "signum": [],
                "frame": [
                    "None"
                ]
            }
        }
    },
    "CLU-master/clu/enums.py": {
        "alias.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [],
                "name": [
                    "None"
                ],
                "cls": [
                    "None"
                ]
            }
        },
        "alias.__get__": {
            "name": "__get__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "None"
                ],
                "cls": [
                    "None"
                ]
            }
        },
        "alias.__set_name__": {
            "name": "__set_name__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [],
                "name": []
            }
        },
        "alias.member_for_value": {
            "name": "member_for_value",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "value": []
            }
        },
        "alias.register": {
            "name": "register",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [],
                "name": []
            }
        },
        "AliasingEnumMeta.__new__": {
            "name": "__new__",
            "location": 104,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": [],
                "attributes": []
            }
        }
    },
    "CLU-master/clu/exporting.py": {
        "itermodule": {
            "name": "itermodule",
            "location": 36,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "module": []
            }
        },
        "moduleids": {
            "name": "moduleids",
            "location": 50,
            "return": [
                "dict[int, tuple[]]"
            ],
            "arguments": {
                "module": []
            }
        },
        "itermoduleids": {
            "name": "itermoduleids",
            "location": 59,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "module": []
            }
        },
        "search_by_id": {
            "name": "search_by_id",
            "location": 100,
            "return": [
                "tuple[]",
                "tuple[None]"
            ],
            "arguments": {
                "thingID": []
            }
        },
        "search_for_name": {
            "name": "search_for_name",
            "location": 128,
            "return": [],
            "arguments": {
                "thing": []
            }
        },
        "search_for_module": {
            "name": "search_for_module",
            "location": 150,
            "return": [],
            "arguments": {
                "thing": []
            }
        },
        "search_modules": {
            "name": "search_modules",
            "location": 172,
            "return": [
                "tuple[]",
                "tuple[None]"
            ],
            "arguments": {
                "thing": []
            }
        },
        "determine_name": {
            "name": "determine_name",
            "location": 185,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "thing": [],
                "name": [
                    "None"
                ],
                "try_repr": [
                    "bool"
                ]
            }
        },
        "path_to_dotpath": {
            "name": "path_to_dotpath",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "relative_to": [
                    "None"
                ]
            }
        },
        "everything": {
            "name": "everything",
            "location": 866,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 876,
            "return": [],
            "arguments": {}
        },
        "Modulespace.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Modulespace.__getattr__": {
            "name": "__getattr__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Registry.exports": {
            "name": "exports",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "appname": [
                    "None"
                ]
            }
        },
        "Registry.all_appnames": {
            "name": "all_appnames",
            "location": 315,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {}
        },
        "Registry.for_appname": {
            "name": "for_appname",
            "location": 320,
            "return": [],
            "arguments": {
                "appname": []
            }
        },
        "Registry.has_appname": {
            "name": "has_appname",
            "location": 329,
            "return": [
                "bool"
            ],
            "arguments": {
                "appname": []
            }
        },
        "Registry.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 334,
            "return": [],
            "arguments": {
                "cls": [],
                "key": []
            }
        },
        "Registry.unregister": {
            "name": "unregister",
            "location": 344,
            "return": [],
            "arguments": {
                "appname": []
            }
        },
        "Registry.all_modules": {
            "name": "all_modules",
            "location": 360,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Registry.nameof": {
            "name": "nameof",
            "location": 366,
            "return": [],
            "arguments": {
                "cls": [],
                "thing": []
            }
        },
        "Registry.moduleof": {
            "name": "moduleof",
            "location": 373,
            "return": [],
            "arguments": {
                "cls": [],
                "thing": []
            }
        },
        "ExporterTypeRepr.__repr__": {
            "name": "__repr__",
            "location": 385,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ExporterBase.__new__": {
            "name": "__new__",
            "location": 416,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ExporterBase.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 440,
            "return": [],
            "arguments": {
                "cls": [],
                "key": []
            }
        },
        "ExporterBase.unregister": {
            "name": "unregister",
            "location": 461,
            "return": [],
            "arguments": {
                "cls": [],
                "dotpath": []
            }
        },
        "ExporterBase.modulenames": {
            "name": "modulenames",
            "location": 471,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ExporterBase.modules": {
            "name": "modules",
            "location": 478,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ExporterBase.nameof": {
            "name": "nameof",
            "location": 487,
            "return": [],
            "arguments": {
                "cls": [],
                "thing": []
            }
        },
        "ExporterBase.moduleof": {
            "name": "moduleof",
            "location": 494,
            "return": [],
            "arguments": {
                "cls": [],
                "thing": []
            }
        },
        "ExporterBase.__init__": {
            "name": "__init__",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.exports": {
            "name": "exports",
            "location": 516,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.keys": {
            "name": "keys",
            "location": 522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.values": {
            "name": "values",
            "location": 526,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.items": {
            "name": "items",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.get": {
            "name": "get",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "ExporterBase.pop": {
            "name": "pop",
            "location": 540,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "ExporterBase.update": {
            "name": "update",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "dictish": []
            }
        },
        "ExporterBase.export": {
            "name": "export",
            "location": 559,
            "return": [
                "self_@___exports__",
                "self"
            ],
            "arguments": {
                "self": [],
                "thing": [],
                "name": [
                    "None"
                ],
                "doc": [
                    "None"
                ]
            }
        },
        "ExporterBase.decorator": {
            "name": "decorator",
            "location": 658,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.all_tuple": {
            "name": "all_tuple",
            "location": 675,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.dir_function": {
            "name": "dir_function",
            "location": 679,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.all_and_dir": {
            "name": "all_and_dir",
            "location": 683,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.dir_and_all": {
            "name": "dir_and_all",
            "location": 695,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.cache_info": {
            "name": "cache_info",
            "location": 708,
            "return": [],
            "arguments": {}
        },
        "ExporterBase.module": {
            "name": "module",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.inner_repr": {
            "name": "inner_repr",
            "location": 724,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.__enter__": {
            "name": "__enter__",
            "location": 738,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.__exit__": {
            "name": "__exit__",
            "location": 741,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None"
                ],
                "exc_val": [
                    "None"
                ],
                "exc_tb": [
                    "None"
                ]
            }
        },
        "ExporterBase.__iter__": {
            "name": "__iter__",
            "location": 746,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.__len__": {
            "name": "__len__",
            "location": 749,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.__contains__": {
            "name": "__contains__",
            "location": 752,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ExporterBase.__getitem__": {
            "name": "__getitem__",
            "location": 755,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ExporterBase.__setitem__": {
            "name": "__setitem__",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ExporterBase.__delitem__": {
            "name": "__delitem__",
            "location": 761,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ExporterBase.__add__": {
            "name": "__add__",
            "location": 764,
            "return": [],
            "arguments": {
                "self": [],
                "operand": []
            }
        },
        "ExporterBase.__radd__": {
            "name": "__radd__",
            "location": 771,
            "return": [],
            "arguments": {
                "self": [],
                "operand": []
            }
        },
        "ExporterBase.__iadd__": {
            "name": "__iadd__",
            "location": 778,
            "return": [
                "ExporterBase"
            ],
            "arguments": {
                "self": [],
                "operand": []
            }
        },
        "ExporterBase.__or__": {
            "name": "__or__",
            "location": 785,
            "return": [],
            "arguments": {
                "self": [],
                "operand": []
            }
        },
        "ExporterBase.__ror__": {
            "name": "__ror__",
            "location": 788,
            "return": [],
            "arguments": {
                "self": [],
                "operand": []
            }
        },
        "ExporterBase.__ior__": {
            "name": "__ior__",
            "location": 791,
            "return": [],
            "arguments": {
                "self": [],
                "operand": []
            }
        },
        "ExporterBase.__bool__": {
            "name": "__bool__",
            "location": 794,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExporterBase.__dir__": {
            "name": "__dir__",
            "location": 797,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test.check_everything": {
            "name": "check_everything",
            "location": 882,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 887,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/extending.py": {
        "pairtype": {
            "name": "pairtype",
            "location": 75,
            "return": [],
            "arguments": {
                "cls0": [],
                "cls1": []
            }
        },
        "pairmro": {
            "name": "pairmro",
            "location": 90,
            "return": [],
            "arguments": {
                "cls0": [],
                "cls1": []
            }
        },
        "pair": {
            "name": "pair",
            "location": 100,
            "return": [],
            "arguments": {
                "one": [],
                "two": []
            }
        },
        "doubledutch": {
            "name": "doubledutch",
            "location": 227,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "test": {
            "name": "test",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "Extensible.__new__": {
            "name": "__new__",
            "location": 55,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": [],
                "attributes": []
            }
        },
        "DoubleDutchRegistry.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DoubleDutchRegistry.__contains__": {
            "name": "__contains__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "clspair": []
            }
        },
        "DoubleDutchRegistry.__getitem__": {
            "name": "__getitem__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "clspair": []
            }
        },
        "DoubleDutchRegistry.__setitem__": {
            "name": "__setitem__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "clspair": [],
                "value": []
            }
        },
        "DoubleDutchRegistry.__delitem__": {
            "name": "__delitem__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "clspair": []
            }
        },
        "DoubleDutchRegistry.__len__": {
            "name": "__len__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DoubleDutchRegistry.__iter__": {
            "name": "__iter__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DoubleDutchRegistry.keyname": {
            "name": "keyname",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DoubleDutchRegistry.funcname": {
            "name": "funcname",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DoubleDutchRegistry.inner_repr": {
            "name": "inner_repr",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DoubleDutchFunction.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "DoubleDutchFunction.__call__": {
            "name": "__call__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "argument0": [],
                "argument1": []
            }
        },
        "DoubleDutchFunction.__contains__": {
            "name": "__contains__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "clspair": []
            }
        },
        "DoubleDutchFunction.remove": {
            "name": "remove",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "cls0": [],
                "cls1": []
            }
        },
        "DoubleDutchFunction.domain": {
            "name": "domain",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "cls0": [],
                "cls1": []
            }
        },
        "DoubleDutchFunction.annotated": {
            "name": "annotated",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test.test_one": {
            "name": "test_one",
            "location": 268,
            "return": [],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 289,
            "return": [],
            "arguments": {}
        },
        "test.test_three": {
            "name": "test_three",
            "location": 300,
            "return": [],
            "arguments": {}
        },
        "test.test_four": {
            "name": "test_four",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "DoubleDutchFunction.domain.decoration": {
            "name": "decoration",
            "location": 208,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "DoubleDutchFunction.annotated.decoration": {
            "name": "decoration",
            "location": 215,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "test.test_four.yodogg": {
            "name": "yodogg",
            "location": 345,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test.test_three.__extend__.ratio": {
            "name": "ratio",
            "location": 306,
            "return": [],
            "arguments": {
                "xy": []
            }
        },
        "test.test_three.__extend__.pack": {
            "name": "pack",
            "location": 316,
            "return": [],
            "arguments": {
                "tup": []
            }
        }
    },
    "CLU-master/clu/keyvalue.py": {
        "has": {
            "name": "has",
            "location": 207,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "count": {
            "name": "count",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "get": {
            "name": "get",
            "location": 217,
            "return": [],
            "arguments": {
                "key": [],
                "default": []
            }
        },
        "set": {
            "name": "set",
            "location": 224,
            "return": [],
            "arguments": {
                "key": [],
                "value": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 229,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "iterate": {
            "name": "iterate",
            "location": 234,
            "return": [
                "typing.Generator[CLUInterface]"
            ],
            "arguments": {}
        },
        "update": {
            "name": "update",
            "location": 239,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "dictish": []
            }
        },
        "keys": {
            "name": "keys",
            "location": 246,
            "return": [],
            "arguments": {}
        },
        "values": {
            "name": "values",
            "location": 251,
            "return": [],
            "arguments": {}
        },
        "items": {
            "name": "items",
            "location": 256,
            "return": [],
            "arguments": {}
        },
        "CLUInterface.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "appname": [
                    "None"
                ],
                "version": [
                    "None"
                ],
                "datadir": [
                    "None"
                ]
            }
        },
        "CLUInterface.is_versioned": {
            "name": "is_versioned",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.migrate_from": {
            "name": "migrate_from",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": []
            }
        },
        "CLUInterface.migrate_from_previous": {
            "name": "migrate_from_previous",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.has": {
            "name": "has",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CLUInterface.count": {
            "name": "count",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.get": {
            "name": "get",
            "location": 90,
            "return": [
                "NoDefault"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "CLUInterface.set": {
            "name": "set",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "CLUInterface.delete": {
            "name": "delete",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CLUInterface.iterate": {
            "name": "iterate",
            "location": 114,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.update": {
            "name": "update",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "dictish": []
            }
        },
        "CLUInterface.keys": {
            "name": "keys",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.values": {
            "name": "values",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.items": {
            "name": "items",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.as_dict": {
            "name": "as_dict",
            "location": 138,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.close": {
            "name": "close",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.closed": {
            "name": "closed",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.to_string": {
            "name": "to_string",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.__repr__": {
            "name": "__repr__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.__str__": {
            "name": "__str__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.__bytes__": {
            "name": "__bytes__",
            "location": 167,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.__enter__": {
            "name": "__enter__",
            "location": 170,
            "return": [
                "CLUInterface"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.__exit__": {
            "name": "__exit__",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None"
                ],
                "exc_val": [
                    "None"
                ],
                "exc_tb": [
                    "None"
                ]
            }
        },
        "CLUInterface.__len__": {
            "name": "__len__",
            "location": 179,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.__fspath__": {
            "name": "__fspath__",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.__bool__": {
            "name": "__bool__",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.__iter__": {
            "name": "__iter__",
            "location": 188,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLUInterface.__contains__": {
            "name": "__contains__",
            "location": 191,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CLUInterface.__getitem__": {
            "name": "__getitem__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CLUInterface.__setitem__": {
            "name": "__setitem__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "CLUInterface.__delitem__": {
            "name": "__delitem__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "CLU-master/clu/mathematics.py": {
        "isdtype": {
            "name": "isdtype",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "thing": []
            }
        },
        "Clamper.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "Clamper.bits": {
            "name": "bits",
            "location": 53,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clamper.kind": {
            "name": "kind",
            "location": 58,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clamper.description": {
            "name": "description",
            "location": 71,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clamper.__call__": {
            "name": "__call__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "a_min": [
                    "None"
                ],
                "a_max": [
                    "None"
                ]
            }
        }
    },
    "CLU-master/clu/naming.py": {
        "determine_module": {
            "name": "determine_module",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "thing": [],
                "name": [
                    "None"
                ]
            }
        },
        "main_module_name": {
            "name": "main_module_name",
            "location": 78,
            "return": [],
            "arguments": {
                "basepath": [
                    "None"
                ]
            }
        },
        "nameof": {
            "name": "nameof",
            "location": 86,
            "return": [
                "NoDefault"
            ],
            "arguments": {
                "thing": [],
                "default": []
            }
        },
        "moduleof": {
            "name": "moduleof",
            "location": 104,
            "return": [
                "NoDefault"
            ],
            "arguments": {
                "thing": [],
                "default": []
            }
        },
        "isnativemodule": {
            "name": "isnativemodule",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "module": []
            }
        },
        "isnative": {
            "name": "isnative",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "thing": []
            }
        },
        "isinspectable": {
            "name": "isinspectable",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "thing": []
            }
        },
        "dotpath_join": {
            "name": "dotpath_join",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "base": []
            }
        },
        "dotpath_split": {
            "name": "dotpath_split",
            "location": 215,
            "return": [
                "tuple[None]",
                "tuple[typing.Optional[str]]"
            ],
            "arguments": {
                "dotpath": []
            }
        },
        "qualified_import": {
            "name": "qualified_import",
            "location": 227,
            "return": [],
            "arguments": {
                "qualified": []
            }
        },
        "qualified_name_tuple": {
            "name": "qualified_name_tuple",
            "location": 242,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "thing": []
            }
        },
        "qualified_name": {
            "name": "qualified_name",
            "location": 249,
            "return": [],
            "arguments": {
                "thing": []
            }
        },
        "dotpath_to_prefix": {
            "name": "dotpath_to_prefix",
            "location": 258,
            "return": [],
            "arguments": {
                "dotpath": [],
                "sep": [
                    "typing.Text"
                ],
                "end": [
                    "typing.Text"
                ]
            }
        },
        "path_to_prefix": {
            "name": "path_to_prefix",
            "location": 271,
            "return": [],
            "arguments": {
                "path": [],
                "sep": [
                    "typing.Text"
                ],
                "end": [
                    "typing.Text"
                ],
                "relative_to": []
            }
        },
        "duplicate": {
            "name": "duplicate",
            "location": 327,
            "return": [],
            "arguments": {
                "target": [],
                "name": [],
                "gs": [
                    "None"
                ]
            }
        },
        "renamer": {
            "name": "renamer",
            "location": 393,
            "return": [],
            "arguments": {
                "name": [],
                "gs": [
                    "None"
                ]
            }
        },
        "split_abbreviations": {
            "name": "split_abbreviations",
            "location": 408,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "s": []
            }
        },
        "rename.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "named": [
                    "None"
                ],
                "path": [
                    "None"
                ],
                "dotpath": [
                    "None"
                ]
            }
        },
        "rename.assign_name": {
            "name": "assign_name",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "name": [
                    "None"
                ]
            }
        },
        "rename.__call__": {
            "name": "__call__",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "thing": []
            }
        },
        "renamer.decoration": {
            "name": "decoration",
            "location": 403,
            "return": [],
            "arguments": {
                "target": []
            }
        },
        "rename.__call__.renamed": {
            "name": "renamed",
            "location": 322,
            "return": [],
            "arguments": {}
        }
    },
    "CLU-master/clu/predicates.py": {
        "resolve": {
            "name": "resolve",
            "location": 113,
            "return": [],
            "arguments": {
                "thing": [],
                "atx": []
            }
        },
        "stresolve": {
            "name": "stresolve",
            "location": 125,
            "return": [],
            "arguments": {
                "thing": [],
                "atx": []
            }
        },
        "try_items": {
            "name": "try_items",
            "location": 176,
            "return": [],
            "arguments": {
                "itx": []
            }
        },
        "newtype": {
            "name": "newtype",
            "location": 220,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "isenum": {
            "name": "isenum",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": []
            }
        },
        "enumchoices": {
            "name": "enumchoices",
            "location": 265,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "wrap_value": {
            "name": "wrap_value",
            "location": 274,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "value": []
            }
        },
        "apply_to": {
            "name": "apply_to",
            "location": 339,
            "return": [
                "Partial"
            ],
            "arguments": {
                "predicate": [],
                "function": []
            }
        },
        "itervariadic": {
            "name": "itervariadic",
            "location": 402,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "tuplize": {
            "name": "tuplize",
            "location": 422,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "uniquify": {
            "name": "uniquify",
            "location": 428,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "listify": {
            "name": "listify",
            "location": 438,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "union": {
            "name": "union",
            "location": 444,
            "return": [
                "set[]"
            ],
            "arguments": {}
        },
        "allof": {
            "name": "allof",
            "location": 458,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "anyof": {
            "name": "anyof",
            "location": 464,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "noneof": {
            "name": "noneof",
            "location": 470,
            "return": [],
            "arguments": {}
        },
        "slots_for": {
            "name": "slots_for",
            "location": 475,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Partial.__init__": {
            "name": "__init__",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partial.predicate": {
            "name": "predicate",
            "location": 325,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partial.function": {
            "name": "function",
            "location": 330,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Partial.__repr__": {
            "name": "__repr__",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "itervariadic.wrapper": {
            "name": "wrapper",
            "location": 411,
            "return": [],
            "arguments": {}
        }
    },
    "CLU-master/clu/repr.py": {
        "strfield": {
            "name": "strfield",
            "location": 28,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "value": []
            }
        },
        "strfields": {
            "name": "strfields",
            "location": 62,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "instance": [],
                "fields": []
            }
        },
        "fullrepr": {
            "name": "fullrepr",
            "location": 111,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "instance": [],
                "string": []
            }
        },
        "stringify": {
            "name": "stringify",
            "location": 130,
            "return": [],
            "arguments": {
                "instance": [],
                "fields": []
            }
        },
        "chop_instance_repr": {
            "name": "chop_instance_repr",
            "location": 162,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "compare_instance_reprs": {
            "name": "compare_instance_reprs",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "repr0": []
            }
        }
    },
    "CLU-master/clu/sanitizer.py": {
        "sanitize": {
            "name": "sanitize",
            "location": 16,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "utf8_encode": {
            "name": "utf8_encode",
            "location": 93,
            "return": [
                "bytes"
            ],
            "arguments": {
                "source": []
            }
        },
        "utf8_decode": {
            "name": "utf8_decode",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "source": []
            }
        }
    },
    "CLU-master/clu/stdio.py": {
        "terminal_size_fd": {
            "name": "terminal_size_fd",
            "location": 48,
            "return": [
                "tuple[]",
                "tuple[None]"
            ],
            "arguments": {}
        },
        "terminal_size": {
            "name": "terminal_size",
            "location": 64,
            "return": [
                "tuple[None]",
                "tuple[]"
            ],
            "arguments": {}
        },
        "ctermid": {
            "name": "ctermid",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "Redirect.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "target": [
                    "None"
                ]
            }
        },
        "Redirect.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_stream": []
            }
        },
        "Streamspace.redirect": {
            "name": "redirect",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_name": [],
                "to_stream": []
            }
        },
        "TermSize.__repr__": {
            "name": "__repr__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test.test_one": {
            "name": "test_one",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/typology.py": {
        "ilen": {
            "name": "ilen",
            "location": 38,
            "return": [],
            "arguments": {
                "iterable": []
            }
        },
        "iterlen": {
            "name": "iterlen",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "isderivative": {
            "name": "isderivative",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "putative": [],
                "thing": []
            }
        }
    },
    "CLU-master/clu/__init__.py": {},
    "CLU-master/clu/__main__.py": {
        "show": {
            "name": "show",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 94,
            "return": [],
            "arguments": {}
        }
    },
    "CLU-master/clu/__version__.py": {},
    "CLU-master/clu/api/__init__.py": {
        "test": {
            "name": "test",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "CommandBase.commandname": {
            "name": "commandname",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandBase.statusbar": {
            "name": "statusbar",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "CommandBase.execute": {
            "name": "execute",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLUI.iter_commands": {
            "name": "iter_commands",
            "location": 44,
            "return": [
                "typing.Generator[typing.Generator[]]"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "CLUI.list_commands": {
            "name": "list_commands",
            "location": 48,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "CLUI.get_command": {
            "name": "get_command",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "key": []
            }
        },
        "test.test_one": {
            "name": "test_one",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/api/__main__.py": {},
    "CLU-master/clu/compilation/compiledb.py": {
        "test": {
            "name": "test",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "CDBSubBase.push": {
            "name": "push",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [],
                "command": [],
                "directory": [
                    "None"
                ],
                "destination": [
                    "None"
                ]
            }
        },
        "CDBSubBase.__iter__": {
            "name": "__iter__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBSubBase.__len__": {
            "name": "__len__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBSubBase.__getitem__": {
            "name": "__getitem__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CDBSubBase.inner_repr": {
            "name": "inner_repr",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBSubBase.to_json": {
            "name": "to_json",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBSubBase.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBSubBase.__bytes__": {
            "name": "__bytes__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBBase.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBBase.__iter__": {
            "name": "__iter__",
            "location": 72,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBBase.__len__": {
            "name": "__len__",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBBase.__getitem__": {
            "name": "__getitem__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CDBBase.push": {
            "name": "push",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "command": [],
                "directory": [
                    "None"
                ],
                "destination": [
                    "None"
                ]
            }
        },
        "CDBBase.clear": {
            "name": "clear",
            "location": 107,
            "return": [
                "CDBBase"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBBase.rollout": {
            "name": "rollout",
            "location": 112,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBBase.inner_repr": {
            "name": "inner_repr",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CDBBase.to_json": {
            "name": "to_json",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CDBBase.__str__": {
            "name": "__str__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CDBBase.__bytes__": {
            "name": "__bytes__",
            "location": 125,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBBase.__bool__": {
            "name": "__bool__",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBJsonFile.in_directory": {
            "name": "in_directory",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "directory": []
            }
        },
        "CDBJsonFile.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "None"
                ],
                "hidden": [
                    "bool"
                ]
            }
        },
        "CDBJsonFile.name": {
            "name": "name",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CDBJsonFile.exists": {
            "name": "exists",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CDBJsonFile.read": {
            "name": "read",
            "location": 191,
            "return": [
                "CDBJsonFile"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ]
            }
        },
        "CDBJsonFile.write": {
            "name": "write",
            "location": 213,
            "return": [
                "CDBJsonFile"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None"
                ]
            }
        },
        "CDBJsonFile.__enter__": {
            "name": "__enter__",
            "location": 234,
            "return": [
                "CDBJsonFile"
            ],
            "arguments": {
                "self": []
            }
        },
        "CDBJsonFile.__exit__": {
            "name": "__exit__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None"
                ],
                "exc_val": [
                    "None"
                ],
                "exc_tb": [
                    "None"
                ]
            }
        },
        "test.test_one": {
            "name": "test_one",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_me_some_values": {
            "name": "show_me_some_values",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/compilation/macros.py": {
        "Macro.is_string_value": {
            "name": "is_string_value",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "putative": [],
                "value": []
            }
        },
        "Macro.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "definition": [
                    "None"
                ]
            }
        },
        "Macro.to_string": {
            "name": "to_string",
            "location": 51,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Macro.to_tuple": {
            "name": "to_tuple",
            "location": 62,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Macro.__repr__": {
            "name": "__repr__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Macro.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Macro.__bytes__": {
            "name": "__bytes__",
            "location": 84,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Macro.__bool__": {
            "name": "__bool__",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Macros.define": {
            "name": "define",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "definition": [
                    "None"
                ]
            }
        },
        "Macros.undefine": {
            "name": "undefine",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Macros.add": {
            "name": "add",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "macro": []
            }
        },
        "Macros.delete": {
            "name": "delete",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Macros.definition_for": {
            "name": "definition_for",
            "location": 138,
            "return": [
                "Macro"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Macros.to_list": {
            "name": "to_list",
            "location": 148,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Macros.to_tuple": {
            "name": "to_tuple",
            "location": 158,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Macros.to_string": {
            "name": "to_string",
            "location": 164,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Macros.__str__": {
            "name": "__str__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Macros.__bytes__": {
            "name": "__bytes__",
            "location": 176,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/compilation/__init__.py": {},
    "CLU-master/clu/config/abc.py": {
        "FrozenKeyMapBase.namespaces": {
            "name": "namespaces",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMapBase.__iter__": {
            "name": "__iter__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMapBase.__len__": {
            "name": "__len__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMapBase.__contains__": {
            "name": "__contains__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "FrozenKeyMapBase.__getitem__": {
            "name": "__getitem__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "FrozenKeyMapBase.__hash__": {
            "name": "__hash__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMapBase.__reversed__": {
            "name": "__reversed__",
            "location": 74,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMapBase.__missing__": {
            "name": "__missing__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "FrozenKeyMapBase.__bool__": {
            "name": "__bool__",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyMapBase.freeze": {
            "name": "freeze",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyMapBase.__setitem__": {
            "name": "__setitem__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nskey": [],
                "value": []
            }
        },
        "KeyMapBase.__delitem__": {
            "name": "__delitem__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "FrozenKeyMap.get": {
            "name": "get",
            "location": 125,
            "return": [
                "NoDefault"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "FrozenKeyMap.submap": {
            "name": "submap",
            "location": 138,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMap.keys": {
            "name": "keys",
            "location": 147,
            "return": [
                "KeyMapKeysView"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMap.items": {
            "name": "items",
            "location": 156,
            "return": [
                "KeyMapItemsView"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMap.values": {
            "name": "values",
            "location": 165,
            "return": [
                "KeyMapValuesView"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMap.__hash__": {
            "name": "__hash__",
            "location": 174,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMap._get_namespace_foset": {
            "name": "_get_namespace_foset",
            "location": 178,
            "return": [
                "FlatOrderedSet"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMap._namespaces": {
            "name": "_namespaces",
            "location": 181,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMap.namespaces": {
            "name": "namespaces",
            "location": 190,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenKeyMap.namespace_count": {
            "name": "namespace_count",
            "location": 193,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyMap.set": {
            "name": "set",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "KeyMap.delete": {
            "name": "delete",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "KeyMap.pop": {
            "name": "pop",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "KeyMap.clear": {
            "name": "clear",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyMap.update": {
            "name": "update",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dictish": []
            }
        },
        "NamespaceWalker.walk": {
            "name": "walk",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceWalker.flatten": {
            "name": "flatten",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [
                    "None"
                ]
            }
        },
        "NamespaceWalker._namespaces": {
            "name": "_namespaces",
            "location": 330,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceWalker._get_namespace_foset": {
            "name": "_get_namespace_foset",
            "location": 339,
            "return": [
                "FlatOrderedSet"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceWalker.keys": {
            "name": "keys",
            "location": 342,
            "return": [
                "NamespaceWalkerKeysView"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceWalker.items": {
            "name": "items",
            "location": 351,
            "return": [
                "NamespaceWalkerItemsView"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceWalker.values": {
            "name": "values",
            "location": 360,
            "return": [
                "NamespaceWalkerValuesView"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceWalker.__iter__": {
            "name": "__iter__",
            "location": 369,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceWalker.__len__": {
            "name": "__len__",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespaceWalker.__contains__": {
            "name": "__contains__",
            "location": 376,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "NamespaceWalker.__getitem__": {
            "name": "__getitem__",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "FlatOrderedSet._from_iterable": {
            "name": "_from_iterable",
            "location": 427,
            "return": [],
            "arguments": {
                "cls": [],
                "iterable": []
            }
        },
        "FlatOrderedSet.is_a": {
            "name": "is_a",
            "location": 432,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "instance": []
            }
        },
        "FlatOrderedSet.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlatOrderedSet.__iter__": {
            "name": "__iter__",
            "location": 464,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlatOrderedSet.__reversed__": {
            "name": "__reversed__",
            "location": 467,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlatOrderedSet.__len__": {
            "name": "__len__",
            "location": 470,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlatOrderedSet.__contains__": {
            "name": "__contains__",
            "location": 473,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "thing": []
            }
        },
        "FlatOrderedSet.__getitem__": {
            "name": "__getitem__",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "FlatOrderedSet.__bool__": {
            "name": "__bool__",
            "location": 481,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlatOrderedSet.__hash__": {
            "name": "__hash__",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlatOrderedSet.__eq__": {
            "name": "__eq__",
            "location": 487,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FlatOrderedSet.__ne__": {
            "name": "__ne__",
            "location": 494,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FlatOrderedSet.clone": {
            "name": "clone",
            "location": 501,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ],
                "memo": [
                    "None"
                ]
            }
        },
        "FlatOrderedSet.inner_repr": {
            "name": "inner_repr",
            "location": 512,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "functional_and.__init__": {
            "name": "__init__",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "functional_and.__call__": {
            "name": "__call__",
            "location": 537,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "functional_set.__init__": {
            "name": "__init__",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "functional_set.__call__": {
            "name": "__call__",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "thing": []
            }
        }
    },
    "CLU-master/clu/config/base.py": {
        "test": {
            "name": "test",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NamespacedMutableMapping.unpack_ns": {
            "name": "unpack_ns",
            "location": 32,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "string": []
            }
        },
        "NamespacedMutableMapping.pack_ns": {
            "name": "pack_ns",
            "location": 46,
            "return": [],
            "arguments": {
                "string": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "NamespacedMutableMapping.get": {
            "name": "get",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "namespace": [
                    "None"
                ],
                "default": []
            }
        },
        "NamespacedMutableMapping.set": {
            "name": "set",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "NamespacedMutableMapping.delete": {
            "name": "delete",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "NamespacedMutableMapping.keys": {
            "name": "keys",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "NamespacedMutableMapping.values": {
            "name": "values",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "NamespacedMutableMapping.items": {
            "name": "items",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "NamespacedMutableMapping.namespaces": {
            "name": "namespaces",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespacedMutableMapping.update": {
            "name": "update",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dictish": []
            }
        },
        "NamespacedMutableMapping.__iter__": {
            "name": "__iter__",
            "location": 131,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespacedMutableMapping.__reversed__": {
            "name": "__reversed__",
            "location": 134,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespacedMutableMapping.__len__": {
            "name": "__len__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespacedMutableMapping.__contains__": {
            "name": "__contains__",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NamespacedMutableMapping.__getitem__": {
            "name": "__getitem__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NamespacedMutableMapping.__setitem__": {
            "name": "__setitem__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "NamespacedMutableMapping.__delitem__": {
            "name": "__delitem__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NamespacedMutableMapping.__missing__": {
            "name": "__missing__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NamespacedMutableMapping.__bool__": {
            "name": "__bool__",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flat.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dictionary": [
                    "None"
                ]
            }
        },
        "Flat.get": {
            "name": "get",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "namespace": [
                    "None"
                ],
                "default": []
            }
        },
        "Flat.set": {
            "name": "set",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "Flat.delete": {
            "name": "delete",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "Flat.keys": {
            "name": "keys",
            "location": 195,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "Flat.values": {
            "name": "values",
            "location": 201,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "Flat.nestify": {
            "name": "nestify",
            "location": 207,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "None"
                ]
            }
        },
        "Flat.namespaces": {
            "name": "namespaces",
            "location": 214,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flat.__getstate__": {
            "name": "__getstate__",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Flat.__setstate__": {
            "name": "__setstate__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Flat.inner_repr": {
            "name": "inner_repr",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flat.clone": {
            "name": "clone",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ],
                "memo": [
                    "None"
                ]
            }
        },
        "Nested.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "None"
                ]
            }
        },
        "Nested.get": {
            "name": "get",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "namespace": [
                    "None"
                ],
                "default": []
            }
        },
        "Nested.set": {
            "name": "set",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "namespace": []
            }
        },
        "Nested.delete": {
            "name": "delete",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "Nested.keys": {
            "name": "keys",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "Nested.values": {
            "name": "values",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "Nested.flatten": {
            "name": "flatten",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [
                    "None"
                ]
            }
        },
        "Nested.namespaces": {
            "name": "namespaces",
            "location": 302,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nested.__getstate__": {
            "name": "__getstate__",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Nested.__setstate__": {
            "name": "__setstate__",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Nested.inner_repr": {
            "name": "inner_repr",
            "location": 313,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nested.clone": {
            "name": "clone",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ],
                "memo": [
                    "None"
                ]
            }
        },
        "EnvBase.prefix": {
            "name": "prefix",
            "location": 339,
            "return": [],
            "arguments": {
                "cls": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "EnvBase.envkey": {
            "name": "envkey",
            "location": 362,
            "return": [],
            "arguments": {
                "cls": [],
                "key": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "EnvBase.deprefix": {
            "name": "deprefix",
            "location": 381,
            "return": [],
            "arguments": {
                "cls": [],
                "key": []
            }
        },
        "EnvBase.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvBase.get": {
            "name": "get",
            "location": 403,
            "return": [
                "NoDefault"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "namespace": [
                    "None"
                ],
                "default": []
            }
        },
        "EnvBase.set": {
            "name": "set",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "EnvBase.delete": {
            "name": "delete",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "EnvBase.keys": {
            "name": "keys",
            "location": 433,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "EnvBase.values": {
            "name": "values",
            "location": 442,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "EnvBase.namespaces": {
            "name": "namespaces",
            "location": 450,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvBase.inner_repr": {
            "name": "inner_repr",
            "location": 459,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvBase.clone": {
            "name": "clone",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test.test_env": {
            "name": "test_env",
            "location": 563,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/config/env.py": {
        "envwalk": {
            "name": "envwalk",
            "location": 23,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "appname": [],
                "mapping": []
            }
        },
        "test": {
            "name": "test",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "FrozenEnviron.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "None"
                ],
                "appname": [
                    "None"
                ]
            }
        },
        "FrozenEnviron.walk": {
            "name": "walk",
            "location": 60,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenEnviron.__contains__": {
            "name": "__contains__",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "FrozenEnviron.__getitem__": {
            "name": "__getitem__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "FrozenEnviron.hasenv": {
            "name": "hasenv",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "envkey": []
            }
        },
        "FrozenEnviron.getenv": {
            "name": "getenv",
            "location": 77,
            "return": [
                "NoDefault"
            ],
            "arguments": {
                "self": [],
                "envkey": [],
                "default": []
            }
        },
        "FrozenEnviron.envkeys": {
            "name": "envkeys",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrozenEnviron.inner_repr": {
            "name": "inner_repr",
            "location": 90,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenEnviron.clone": {
            "name": "clone",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ],
                "memo": [
                    "None"
                ]
            }
        },
        "Environ.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "None"
                ],
                "appname": [
                    "None"
                ]
            }
        },
        "Environ.freeze": {
            "name": "freeze",
            "location": 123,
            "return": [
                "FrozenEnviron"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environ.__setitem__": {
            "name": "__setitem__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nskey": [],
                "value": []
            }
        },
        "Environ.__delitem__": {
            "name": "__delitem__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "Environ.setenv": {
            "name": "setenv",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "envkey": [],
                "value": []
            }
        },
        "Environ.unsetenv": {
            "name": "unsetenv",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "envkey": []
            }
        },
        "Environ.__enter__": {
            "name": "__enter__",
            "location": 143,
            "return": [
                "Environ"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environ.__exit__": {
            "name": "__exit__",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None"
                ],
                "exc_val": [
                    "None"
                ],
                "exc_tb": [
                    "None"
                ]
            }
        },
        "test.show_nestedmaps": {
            "name": "show_nestedmaps",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_one_pt_five": {
            "name": "test_one_pt_five",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three": {
            "name": "test_three",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three_pt_five": {
            "name": "test_three_pt_five",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_four": {
            "name": "test_four",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_environment": {
            "name": "show_environment",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_fixture_cache_stats": {
            "name": "show_fixture_cache_stats",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/config/fieldtypes.py": {
        "field": {
            "name": "field",
            "location": 747,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "__getattr__": {
            "name": "__getattr__",
            "location": 913,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "test": {
            "name": "test",
            "location": 933,
            "return": [],
            "arguments": {}
        },
        "FieldBase.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": [],
                "allow_none": []
            }
        },
        "FieldBase.__set_name__": {
            "name": "__set_name__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "name": []
            }
        },
        "FieldBase.get_default": {
            "name": "get_default",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldBase.__get__": {
            "name": "__get__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "cls": []
            }
        },
        "FieldBase.__set__": {
            "name": "__set__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "FieldBase.__delete__": {
            "name": "__delete__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "FieldBase.__str__": {
            "name": "__str__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldBase.__repr__": {
            "name": "__repr__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldBase.__json__": {
            "name": "__json__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaField.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "validator": []
            }
        },
        "SchemaField.__set__": {
            "name": "__set__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "StringField.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": [],
                "allow_none": [],
                "min_length": [],
                "max_length": []
            }
        },
        "StringField.__set__": {
            "name": "__set__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "PathField.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": [],
                "allow_none": [],
                "requisite": [],
                "min_length": [],
                "max_length": []
            }
        },
        "PathField.__get__": {
            "name": "__get__",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "cls": []
            }
        },
        "IntField.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": [],
                "allow_none": [],
                "min_value": [],
                "max_value": []
            }
        },
        "IntField.__set__": {
            "name": "__set__",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "UIntField.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": [],
                "allow_none": [],
                "min_value": [],
                "max_value": []
            }
        },
        "FloatField.__init__": {
            "name": "__init__",
            "location": 391,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": [],
                "allow_none": [],
                "min_value": [],
                "max_value": []
            }
        },
        "FloatField.__set__": {
            "name": "__set__",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "BooleanField.__init__": {
            "name": "__init__",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": []
            }
        },
        "DateTimeField.__init__": {
            "name": "__init__",
            "location": 464,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": []
            }
        },
        "TimeDeltaField.__init__": {
            "name": "__init__",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": []
            }
        },
        "ListField.__init__": {
            "name": "__init__",
            "location": 503,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "value": [],
                "validator": [],
                "extractor": []
            }
        },
        "ListField.__set__": {
            "name": "__set__",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "TupleField.__init__": {
            "name": "__init__",
            "location": 544,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "value": [],
                "validator": [],
                "extractor": []
            }
        },
        "TupleField.__set__": {
            "name": "__set__",
            "location": 561,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "SetField.__init__": {
            "name": "__init__",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "value": [],
                "validator": [],
                "extractor": []
            }
        },
        "SetField.__set__": {
            "name": "__set__",
            "location": 602,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "FrozenSetField.__init__": {
            "name": "__init__",
            "location": 626,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "value": [],
                "validator": [],
                "extractor": []
            }
        },
        "FrozenSetField.__set__": {
            "name": "__set__",
            "location": 643,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "DictField.__init__": {
            "name": "__init__",
            "location": 667,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "key": [],
                "value": [],
                "validator": [],
                "extractor": []
            }
        },
        "DictField.__set__": {
            "name": "__set__",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "NamespaceContext.__init__": {
            "name": "__init__",
            "location": 723,
            "return": [],
            "arguments": {
                "self": [],
                "fieldmgr": [],
                "namespace": []
            }
        },
        "NamespaceContext.__enter__": {
            "name": "__enter__",
            "location": 739,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespaceContext.__exit__": {
            "name": "__exit__",
            "location": 743,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "field.namespacer": {
            "name": "namespacer",
            "location": 749,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespacedFieldManager.__init__": {
            "name": "__init__",
            "location": 772,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespacedFieldManager.push": {
            "name": "push",
            "location": 781,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": []
            }
        },
        "NamespacedFieldManager.pop": {
            "name": "pop",
            "location": 785,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespacedFieldManager._clear": {
            "name": "_clear",
            "location": 789,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespacedFieldManager.ns": {
            "name": "ns",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": []
            }
        },
        "NamespacedFieldManager.namespace": {
            "name": "namespace",
            "location": 806,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespacedFieldManager.__len__": {
            "name": "__len__",
            "location": 813,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespacedFieldManager.__iter__": {
            "name": "__iter__",
            "location": 816,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespacedFieldManager.__repr__": {
            "name": "__repr__",
            "location": 820,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespacedFieldManager.__bool__": {
            "name": "__bool__",
            "location": 824,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespacedFieldManager.Schema": {
            "name": "Schema",
            "location": 828,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "validator": []
            }
        },
        "NamespacedFieldManager.String": {
            "name": "String",
            "location": 832,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": [],
                "allow_none": [],
                "min_length": [],
                "max_length": []
            }
        },
        "NamespacedFieldManager.Path": {
            "name": "Path",
            "location": 840,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": [],
                "allow_none": [],
                "requisite": [],
                "min_length": [],
                "max_length": []
            }
        },
        "NamespacedFieldManager.Int": {
            "name": "Int",
            "location": 849,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": [],
                "allow_none": [],
                "min_value": [],
                "max_value": []
            }
        },
        "NamespacedFieldManager.UInt": {
            "name": "UInt",
            "location": 857,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": [],
                "allow_none": [],
                "min_value": [],
                "max_value": []
            }
        },
        "NamespacedFieldManager.Float": {
            "name": "Float",
            "location": 865,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": [],
                "allow_none": [],
                "min_value": [],
                "max_value": []
            }
        },
        "NamespacedFieldManager.Boolean": {
            "name": "Boolean",
            "location": 873,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": []
            }
        },
        "NamespacedFieldManager.DateTime": {
            "name": "DateTime",
            "location": 878,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": []
            }
        },
        "NamespacedFieldManager.TimeDelta": {
            "name": "TimeDelta",
            "location": 883,
            "return": [],
            "arguments": {
                "self": [],
                "default": [],
                "validator": [],
                "extractor": []
            }
        },
        "NamespacedFieldManager.List": {
            "name": "List",
            "location": 888,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "validator": [],
                "extractor": []
            }
        },
        "NamespacedFieldManager.Tuple": {
            "name": "Tuple",
            "location": 893,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "validator": [],
                "extractor": []
            }
        },
        "NamespacedFieldManager.Set": {
            "name": "Set",
            "location": 898,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "validator": [],
                "extractor": []
            }
        },
        "NamespacedFieldManager.FrozenSet": {
            "name": "FrozenSet",
            "location": 903,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "validator": [],
                "extractor": []
            }
        },
        "NamespacedFieldManager.Dict": {
            "name": "Dict",
            "location": 908,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "validator": [],
                "extractor": []
            }
        },
        "test.test_one": {
            "name": "test_one",
            "location": 941,
            "return": [],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 965,
            "return": [],
            "arguments": {}
        }
    },
    "CLU-master/clu/config/filebase.py": {
        "FileName.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "filename": [
                    "None"
                ]
            }
        },
        "FileName.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileName.systems": {
            "name": "systems",
            "location": 48,
            "return": [
                "set[]",
                "int"
            ],
            "arguments": {}
        },
        "FileName.sys_path_dirs": {
            "name": "sys_path_dirs",
            "location": 58,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "FileName.site_dirs": {
            "name": "site_dirs",
            "location": 66,
            "return": [
                "set[]",
                "int"
            ],
            "arguments": {
                "cls": []
            }
        },
        "FileName.user_dirs": {
            "name": "user_dirs",
            "location": 85,
            "return": [
                "set[]",
                "int"
            ],
            "arguments": {
                "cls": []
            }
        },
        "FileName.find_file": {
            "name": "find_file",
            "location": 103,
            "return": [],
            "arguments": {
                "cls": [],
                "filename": [
                    "None"
                ]
            }
        },
        "FileBase.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "None"
                ]
            }
        },
        "FileBase.name": {
            "name": "name",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileBase.basename": {
            "name": "basename",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileBase.dirname": {
            "name": "dirname",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileBase.exists": {
            "name": "exists",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileBase.filesize": {
            "name": "filesize",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileBase.split": {
            "name": "split",
            "location": 223,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileBase.parent": {
            "name": "parent",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileBase.load": {
            "name": "load",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": [
                    "None"
                ]
            }
        },
        "FileBase.loads": {
            "name": "loads",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loaded": []
            }
        },
        "FileBase.dump": {
            "name": "dump",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": [
                    "None"
                ]
            }
        },
        "FileBase.dumps": {
            "name": "dumps",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/config/keymap.py": {
        "DefaultTree": {
            "name": "DefaultTree",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "dictify": {
            "name": "dictify",
            "location": 95,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "tree": []
            }
        },
        "mapwalk": {
            "name": "mapwalk",
            "location": 102,
            "return": [
                "typing.Generator[]",
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "mapping": [],
                "pre": []
            }
        },
        "nestedmaps": {
            "name": "nestedmaps",
            "location": 208,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[typing.Text,int]],typing.Text]],typing.Text,dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],typing.Text]],typing.Text]]]],typing.Text]]"
            ],
            "arguments": {}
        },
        "flatdict": {
            "name": "flatdict",
            "location": 233,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "arbitrary": {
            "name": "arbitrary",
            "location": 243,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "FrozenFlat.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dictionary": []
            }
        },
        "FrozenFlat.nestify": {
            "name": "nestify",
            "location": 47,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "None"
                ]
            }
        },
        "FrozenFlat.__iter__": {
            "name": "__iter__",
            "location": 55,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenFlat.__reversed__": {
            "name": "__reversed__",
            "location": 58,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenFlat.__len__": {
            "name": "__len__",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenFlat.__contains__": {
            "name": "__contains__",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "FrozenFlat.__getitem__": {
            "name": "__getitem__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "FrozenFlat.inner_repr": {
            "name": "inner_repr",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenFlat.clone": {
            "name": "clone",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ],
                "memo": [
                    "None"
                ]
            }
        },
        "Flat.freeze": {
            "name": "freeze",
            "location": 82,
            "return": [
                "FrozenFlat"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flat.__setitem__": {
            "name": "__setitem__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nskey": [],
                "value": []
            }
        },
        "Flat.__delitem__": {
            "name": "__delitem__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "FrozenNested.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "FrozenNested.walk": {
            "name": "walk",
            "location": 144,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenNested.submap": {
            "name": "submap",
            "location": 148,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenNested.inner_repr": {
            "name": "inner_repr",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenNested.clone": {
            "name": "clone",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ],
                "memo": [
                    "None"
                ]
            }
        },
        "Nested.freeze": {
            "name": "freeze",
            "location": 173,
            "return": [
                "FrozenNested"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nested.__setitem__": {
            "name": "__setitem__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nskey": [],
                "value": []
            }
        },
        "Nested.__delitem__": {
            "name": "__delitem__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "test.show_nestedmaps": {
            "name": "show_nestedmaps",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 259,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three": {
            "name": "test_three",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three_pt_five": {
            "name": "test_three_pt_five",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_four": {
            "name": "test_four",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_four_pt_five": {
            "name": "test_four_pt_five",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_five": {
            "name": "test_five",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_five_pt_five": {
            "name": "test_five_pt_five",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_fixture_cache_stats": {
            "name": "show_fixture_cache_stats",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/config/keymapview.py": {
        "KeyMapViewBase.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "KeyMapViewBase._mapping": {
            "name": "_mapping",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapViewBase.__len__": {
            "name": "__len__",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyMapViewBase.__getitem__": {
            "name": "__getitem__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "KeyMapViewBase.__contains__": {
            "name": "__contains__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "KeyMapViewBase.__iter__": {
            "name": "__iter__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyMapViewBase.__repr__": {
            "name": "__repr__",
            "location": 79,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyMapKeysView._from_iterable": {
            "name": "_from_iterable",
            "location": 93,
            "return": [
                "set[]"
            ],
            "arguments": {
                "cls": [],
                "iterable": []
            }
        },
        "KeyMapKeysView.__contains__": {
            "name": "__contains__",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "KeyMapKeysView.__iter__": {
            "name": "__iter__",
            "location": 100,
            "return": [
                "typing.Generator[typing.Generator[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyMapItemsView._from_iterable": {
            "name": "_from_iterable",
            "location": 113,
            "return": [
                "set[]"
            ],
            "arguments": {
                "cls": [],
                "iterable": []
            }
        },
        "KeyMapItemsView.__contains__": {
            "name": "__contains__",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "KeyMapItemsView.__iter__": {
            "name": "__iter__",
            "location": 126,
            "return": [
                "typing.Generator[typing.Generator[tuple[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyMapValuesView.__contains__": {
            "name": "__contains__",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "KeyMapValuesView.__iter__": {
            "name": "__iter__",
            "location": 146,
            "return": [
                "typing.Generator[typing.Generator[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceWalkerViewBase.__len__": {
            "name": "__len__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NamespaceWalkerKeysView._from_iterable": {
            "name": "_from_iterable",
            "location": 175,
            "return": [
                "set[]"
            ],
            "arguments": {
                "cls": [],
                "iterable": []
            }
        },
        "NamespaceWalkerKeysView.__contains__": {
            "name": "__contains__",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "NamespaceWalkerKeysView.__iter__": {
            "name": "__iter__",
            "location": 186,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceWalkerItemsView._from_iterable": {
            "name": "_from_iterable",
            "location": 199,
            "return": [
                "set[]"
            ],
            "arguments": {
                "cls": [],
                "iterable": []
            }
        },
        "NamespaceWalkerItemsView.__contains__": {
            "name": "__contains__",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "NamespaceWalkerItemsView.__iter__": {
            "name": "__iter__",
            "location": 212,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceWalkerValuesView.__contains__": {
            "name": "__contains__",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "putative": []
            }
        },
        "NamespaceWalkerValuesView.__iter__": {
            "name": "__iter__",
            "location": 231,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/config/ns.py": {
        "concatenate_ns": {
            "name": "concatenate_ns",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "prefix_for": {
            "name": "prefix_for",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "strip_ns": {
            "name": "strip_ns",
            "location": 30,
            "return": [],
            "arguments": {
                "nskey": []
            }
        },
        "split_ns": {
            "name": "split_ns",
            "location": 35,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "namespaced": []
            }
        },
        "startswith_ns": {
            "name": "startswith_ns",
            "location": 40,
            "return": [],
            "arguments": {
                "putative": [],
                "prefix": []
            }
        },
        "validate_ns": {
            "name": "validate_ns",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "unpack_ns": {
            "name": "unpack_ns",
            "location": 63,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "nskey": []
            }
        },
        "pack_ns": {
            "name": "pack_ns",
            "location": 76,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "get_ns": {
            "name": "get_ns",
            "location": 90,
            "return": [],
            "arguments": {
                "nskey": []
            }
        },
        "compare_ns": {
            "name": "compare_ns",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "iterone": [],
                "itertwo": []
            }
        },
        "concatenate_env": {
            "name": "concatenate_env",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "prefix_env": {
            "name": "prefix_env",
            "location": 112,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "appname": []
            }
        },
        "pack_env": {
            "name": "pack_env",
            "location": 136,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "appname": [],
                "key": []
            }
        },
        "unpack_env": {
            "name": "unpack_env",
            "location": 156,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "envkey": []
            }
        },
        "nskey_from_env": {
            "name": "nskey_from_env",
            "location": 164,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "envkey": []
            }
        },
        "nskey_to_env": {
            "name": "nskey_to_env",
            "location": 170,
            "return": [],
            "arguments": {
                "appname": [],
                "nskey": []
            }
        },
        "test": {
            "name": "test",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "test.load_java_system_properties": {
            "name": "load_java_system_properties",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_java_system_properties": {
            "name": "show_java_system_properties",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three": {
            "name": "test_three",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/config/proxy.py": {
        "selfcheck": {
            "name": "selfcheck",
            "location": 20,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "test": {
            "name": "test",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "selfcheck.wrapper": {
            "name": "wrapper",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapView.get_basetype": {
            "name": "get_basetype",
            "location": 38,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "KeyMapView.check_basetype": {
            "name": "check_basetype",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": [],
                "instance": []
            }
        },
        "KeyMapView.__new__": {
            "name": "__new__",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [],
                "keymap": []
            }
        },
        "KeyMapView.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "operand": []
            }
        },
        "KeyMapView.get_reftype": {
            "name": "get_reftype",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapView.namespaces": {
            "name": "namespaces",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapView.__iter__": {
            "name": "__iter__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapView.__len__": {
            "name": "__len__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapView.__contains__": {
            "name": "__contains__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "KeyMapView.__getitem__": {
            "name": "__getitem__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "KeyMapView.keys": {
            "name": "keys",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapView.items": {
            "name": "items",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapView.values": {
            "name": "values",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapView.__enter__": {
            "name": "__enter__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapView.__exit__": {
            "name": "__exit__",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "KeyMapView.__bool__": {
            "name": "__bool__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapView.inner_repr": {
            "name": "inner_repr",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapView.clone": {
            "name": "clone",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [],
                "memo": []
            }
        },
        "KeyMapProxy.freeze": {
            "name": "freeze",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeyMapProxy.__setitem__": {
            "name": "__setitem__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "nskey": [],
                "value": []
            }
        },
        "KeyMapProxy.__delitem__": {
            "name": "__delitem__",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "nskey": []
            }
        },
        "test.show_nestedmaps_fixture": {
            "name": "show_nestedmaps_fixture",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "test.test_one_fn": {
            "name": "test_one_fn",
            "location": 174,
            "return": [],
            "arguments": {
                "keymap_type": [],
                "proxy_type": [],
                "fixture_fn": []
            }
        },
        "test.test_two_fn": {
            "name": "test_two_fn",
            "location": 226,
            "return": [],
            "arguments": {
                "keymap_type": [],
                "proxy_type0": [],
                "fixture_fn": [],
                "proxy_type1": [],
                "proxy_type2": []
            }
        },
        "test.test_six": {
            "name": "test_six",
            "location": 326,
            "return": [],
            "arguments": {}
        },
        "test.show_fixture_cache_stats": {
            "name": "show_fixture_cache_stats",
            "location": 359,
            "return": [],
            "arguments": {}
        },
        "test.test_one_fn.test_fn": {
            "name": "test_fn",
            "location": 178,
            "return": [],
            "arguments": {}
        },
        "test.test_two_fn.test_fn": {
            "name": "test_fn",
            "location": 235,
            "return": [],
            "arguments": {}
        }
    },
    "CLU-master/clu/config/settings.py": {
        "test": {
            "name": "test",
            "location": 412,
            "return": [],
            "arguments": {}
        },
        "Nestifier.namespaced_fields": {
            "name": "namespaced_fields",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nestifier.nestify": {
            "name": "nestify",
            "location": 37,
            "return": [
                "Nested"
            ],
            "arguments": {
                "self": [],
                "stringify": [
                    "bool"
                ]
            }
        },
        "Nestifier.__json__": {
            "name": "__json__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__new__": {
            "name": "__new__",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Namespace.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespaced_dict": [],
                "namespace": [
                    "None"
                ]
            }
        },
        "Namespace.__getattr__": {
            "name": "__getattr__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Namespace.__setattr__": {
            "name": "__setattr__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Namespace.get_default": {
            "name": "get_default",
            "location": 118,
            "return": [
                "Namespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.namespaced_fields": {
            "name": "namespaced_fields",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespace.name": {
            "name": "name",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Namespace.update": {
            "name": "update",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "Namespace.__set_name__": {
            "name": "__set_name__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [],
                "name": []
            }
        },
        "Namespace.__get__": {
            "name": "__get__",
            "location": 145,
            "return": [
                "Namespace"
            ],
            "arguments": {
                "self": [],
                "instance": [],
                "cls": [
                    "None"
                ]
            }
        },
        "Namespace.__set__": {
            "name": "__set__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "Namespace.__json__": {
            "name": "__json__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__str__": {
            "name": "__str__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__repr__": {
            "name": "__repr__",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaSchema.__new__": {
            "name": "__new__",
            "location": 173,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": [],
                "attributes": []
            }
        },
        "Schema.__new__": {
            "name": "__new__",
            "location": 287,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Schema.namespaced_fields": {
            "name": "namespaced_fields",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.namespaces": {
            "name": "namespaces",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.__json__": {
            "name": "__json__",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.to_json": {
            "name": "to_json",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.to_pickle": {
            "name": "to_pickle",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.to_plist": {
            "name": "to_plist",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.to_toml": {
            "name": "to_toml",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.to_yaml": {
            "name": "to_yaml",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.to_string": {
            "name": "to_string",
            "location": 363,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.to_bytes": {
            "name": "to_bytes",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.__str__": {
            "name": "__str__",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.__bytes__": {
            "name": "__bytes__",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.__repr__": {
            "name": "__repr__",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.update": {
            "name": "update",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": []
            }
        },
        "Schema.validate": {
            "name": "validate",
            "location": 390,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "test.test_one": {
            "name": "test_one",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/config/__init__.py": {},
    "CLU-master/clu/config/formats/jsonfile.py": {
        "JsonFileBase.loads": {
            "name": "loads",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loaded": []
            }
        },
        "JsonFileBase.dumps": {
            "name": "dumps",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/config/formats/picklefile.py": {
        "PickleFileBase.loads": {
            "name": "loads",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loaded": []
            }
        },
        "PickleFileBase.dumps": {
            "name": "dumps",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/config/formats/tomlfile.py": {
        "test": {
            "name": "test",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TomlFileBase.loads": {
            "name": "loads",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loaded": []
            }
        },
        "TomlFileBase.dumps": {
            "name": "dumps",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/config/formats/yamlfile.py": {
        "YamlFileBase.loads": {
            "name": "loads",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loaded": []
            }
        },
        "YamlFileBase.dumps": {
            "name": "dumps",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/config/formats/__init__.py": {},
    "CLU-master/clu/constants/consts.py": {
        "print_all": {
            "name": "print_all",
            "location": 267,
            "return": [],
            "arguments": {}
        },
        "terminal_width": {
            "name": "terminal_width",
            "location": 176,
            "return": [],
            "arguments": {
                "fallback": []
            }
        },
        "NoDefault.__new__": {
            "name": "__new__",
            "location": 212,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "CLU-master/clu/constants/data.py": {},
    "CLU-master/clu/constants/enums.py": {
        "System.determine": {
            "name": "determine",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "System.from_string": {
            "name": "from_string",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": [],
                "string": []
            }
        },
        "System.match": {
            "name": "match",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "System.all": {
            "name": "all",
            "location": 62,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "System.unixes": {
            "name": "unixes",
            "location": 67,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "System.to_string": {
            "name": "to_string",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.__str__": {
            "name": "__str__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "System.__bytes__": {
            "name": "__bytes__",
            "location": 80,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.__repr__": {
            "name": "__repr__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "System.__eq__": {
            "name": "__eq__",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "System.__hash__": {
            "name": "__hash__",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.os_name": {
            "name": "os_name",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.sys_name": {
            "name": "sys_name",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "System.is_current": {
            "name": "is_current",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.is_unix_based": {
            "name": "is_unix_based",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSIDL.for_name": {
            "name": "for_name",
            "location": 129,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "CSIDL.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSIDL.fullname": {
            "name": "fullname",
            "location": 142,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSIDL.to_string": {
            "name": "to_string",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSIDL.to_int": {
            "name": "to_int",
            "location": 150,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSIDL.__str__": {
            "name": "__str__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CSIDL.__bytes__": {
            "name": "__bytes__",
            "location": 157,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSIDL.__int__": {
            "name": "__int__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CSIDL.__hash__": {
            "name": "__hash__",
            "location": 163,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/constants/exceptions.py": {},
    "CLU-master/clu/constants/polyfills.py": {
        "AutoType.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoType.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "increment": [
                    "int"
                ]
            }
        },
        "FakeNumpy.get_include": {
            "name": "get_include",
            "location": 25,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "lru_cache": {
            "name": "lru_cache",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "lru_cache.inside": {
            "name": "inside",
            "location": 56,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "lru_cache.inside.wrapper": {
            "name": "wrapper",
            "location": 58,
            "return": [],
            "arguments": {}
        }
    },
    "CLU-master/clu/constants/__init__.py": {},
    "CLU-master/clu/constants/__main__.py": {
        "show": {
            "name": "show",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "show.truncate": {
            "name": "truncate",
            "location": 42,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "iterable": []
            }
        }
    },
    "CLU-master/clu/fs/abc.py": {
        "test": {
            "name": "test",
            "location": 273,
            "return": [],
            "arguments": {}
        },
        "TypeLocker.__new__": {
            "name": "__new__",
            "location": 56,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": [],
                "attributes": []
            }
        },
        "BaseFSName.name": {
            "name": "name",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.basename": {
            "name": "basename",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.dirname": {
            "name": "dirname",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.exists": {
            "name": "exists",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.split": {
            "name": "split",
            "location": 123,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.realpath": {
            "name": "realpath",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "source": [
                    "None"
                ]
            }
        },
        "BaseFSName.parent": {
            "name": "parent",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.relparent": {
            "name": "relparent",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "BaseFSName.relprefix": {
            "name": "relprefix",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "separator": [
                    "typing.Text"
                ]
            }
        },
        "BaseFSName.symlink": {
            "name": "symlink",
            "location": 160,
            "return": [
                "BaseFSName"
            ],
            "arguments": {
                "self": [],
                "destination": [],
                "source": [
                    "None"
                ]
            }
        },
        "BaseFSName.close": {
            "name": "close",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.to_string": {
            "name": "to_string",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.inner_repr": {
            "name": "inner_repr",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.__str__": {
            "name": "__str__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.__bytes__": {
            "name": "__bytes__",
            "location": 195,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.__fspath__": {
            "name": "__fspath__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.__bool__": {
            "name": "__bool__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseFSName.__eq__": {
            "name": "__eq__",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseFSName.__ne__": {
            "name": "__ne__",
            "location": 213,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseFSName.__lt__": {
            "name": "__lt__",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "BaseFSName.__gt__": {
            "name": "__gt__",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "BaseFSName.__le__": {
            "name": "__le__",
            "location": 232,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "BaseFSName.__ge__": {
            "name": "__ge__",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "BaseFSName.__hash__": {
            "name": "__hash__",
            "location": 242,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileWrapper.__fspath__": {
            "name": "__fspath__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test.test_one": {
            "name": "test_one",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_one.TemporaryFileName.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "typing.Text"
                ],
                "suffix": [
                    "typing.Text"
                ],
                "mode": [
                    "typing.Text"
                ],
                "delete": [
                    "bool"
                ]
            }
        },
        "test.test_one.TemporaryFileName.name": {
            "name": "name",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test.test_one.TemporaryFileName.to_string": {
            "name": "to_string",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/fs/appdirectories.py": {
        "get_win_folder_from_registry": {
            "name": "get_win_folder_from_registry",
            "location": 645,
            "return": [],
            "arguments": {
                "csidl": []
            }
        },
        "get_win_folder_with_pywin32": {
            "name": "get_win_folder_with_pywin32",
            "location": 662,
            "return": [],
            "arguments": {
                "csidl": []
            }
        },
        "get_win_folder_with_ctypes": {
            "name": "get_win_folder_with_ctypes",
            "location": 694,
            "return": [],
            "arguments": {
                "csidl": []
            }
        },
        "get_win_folder_with_jna": {
            "name": "get_win_folder_with_jna",
            "location": 715,
            "return": [],
            "arguments": {
                "csidl": []
            }
        },
        "clu_appdirs": {
            "name": "clu_appdirs",
            "location": 747,
            "return": [],
            "arguments": {
                "system": [],
                "versioning": []
            }
        },
        "test": {
            "name": "test",
            "location": 769,
            "return": [],
            "arguments": {}
        },
        "AppDirs.__new__": {
            "name": "__new__",
            "location": 59,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "AppDirs.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "appname": [],
                "appauthor": [],
                "roaming": [],
                "multipath": [],
                "system": [],
                "version": []
            }
        },
        "AppDirs.determine_system_string": {
            "name": "determine_system_string",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.determine_win_folder_function": {
            "name": "determine_win_folder_function",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.to_string": {
            "name": "to_string",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.__repr__": {
            "name": "__repr__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.__str__": {
            "name": "__str__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.__bytes__": {
            "name": "__bytes__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.__hash__": {
            "name": "__hash__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.user_data_dir": {
            "name": "user_data_dir",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.site_data_dir": {
            "name": "site_data_dir",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.user_config_dir": {
            "name": "user_config_dir",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.site_config_dir": {
            "name": "site_config_dir",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.user_cache_dir": {
            "name": "user_cache_dir",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.user_state_dir": {
            "name": "user_state_dir",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.user_log_dir": {
            "name": "user_log_dir",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.site_config": {
            "name": "site_config",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.site_data": {
            "name": "site_data",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.user_cache": {
            "name": "user_cache",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.user_config": {
            "name": "user_config",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.user_data": {
            "name": "user_data",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.user_log": {
            "name": "user_log",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.user_state": {
            "name": "user_state",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppDirs.get_win_folder": {
            "name": "get_win_folder",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "argument": []
            }
        },
        "AppDirs.get_user_data_dir": {
            "name": "get_user_data_dir",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "appname": [],
                "appauthor": [],
                "version": [],
                "roaming": []
            }
        },
        "AppDirs.get_site_data_dir": {
            "name": "get_site_data_dir",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "appname": [],
                "appauthor": [],
                "version": [],
                "multipath": []
            }
        },
        "AppDirs.get_user_config_dir": {
            "name": "get_user_config_dir",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "appname": [],
                "appauthor": [],
                "version": [],
                "roaming": []
            }
        },
        "AppDirs.get_site_config_dir": {
            "name": "get_site_config_dir",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "appname": [],
                "appauthor": [],
                "version": [],
                "multipath": []
            }
        },
        "AppDirs.get_user_cache_dir": {
            "name": "get_user_cache_dir",
            "location": 487,
            "return": [],
            "arguments": {
                "self": [],
                "appname": [],
                "appauthor": [],
                "version": [],
                "opinion": []
            }
        },
        "AppDirs.get_user_state_dir": {
            "name": "get_user_state_dir",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "appname": [],
                "appauthor": [],
                "version": [],
                "roaming": []
            }
        },
        "AppDirs.get_user_log_dir": {
            "name": "get_user_log_dir",
            "location": 590,
            "return": [],
            "arguments": {
                "self": [],
                "appname": [],
                "appauthor": [],
                "version": [],
                "opinion": []
            }
        }
    },
    "CLU-master/clu/fs/filesystem.py": {
        "ensure_path_is_valid": {
            "name": "ensure_path_is_valid",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "pth": []
            }
        },
        "write_to_path": {
            "name": "write_to_path",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "pth": [],
                "relative_to": [
                    "None"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "script_path": {
            "name": "script_path",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "back_tick": {
            "name": "back_tick",
            "location": 67,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "command": [],
                "as_str": [
                    "bool"
                ],
                "ret_err": [
                    "bool"
                ],
                "raise_err": [
                    "None"
                ]
            }
        },
        "rm_rf": {
            "name": "rm_rf",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "TemporaryNamedFile": {
            "name": "TemporaryNamedFile",
            "location": 207,
            "return": [
                "TemporaryFileWrapper"
            ],
            "arguments": {
                "temppath": [],
                "mode": [
                    "typing.Text"
                ],
                "delete": [
                    "bool"
                ],
                "buffer_size": [
                    "int"
                ]
            }
        },
        "which": {
            "name": "which",
            "location": 1013,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "binary_name": [],
                "pathvar": [],
                "pathsep": [
                    "None"
                ]
            }
        },
        "NamedTemporaryFile": {
            "name": "NamedTemporaryFile",
            "location": 1210,
            "return": [
                "TemporaryFileWrapper"
            ],
            "arguments": {
                "mode": [
                    "typing.Text"
                ],
                "buffer_size": [
                    "int"
                ],
                "suffix": [
                    "typing.Text"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "directory": [
                    "None"
                ],
                "delete": [
                    "bool"
                ]
            }
        },
        "TemporaryName.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "None"
                ],
                "suffix": [
                    "typing.Text"
                ],
                "parent": [
                    "None"
                ]
            }
        },
        "TemporaryName.name": {
            "name": "name",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryName.destroy": {
            "name": "destroy",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryName.mode": {
            "name": "mode",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryName.binary_mode": {
            "name": "binary_mode",
            "location": 357,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryName.filehandle": {
            "name": "filehandle",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryName.filesize": {
            "name": "filesize",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryName.flags": {
            "name": "flags",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryName.copy": {
            "name": "copy",
            "location": 408,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "destination": []
            }
        },
        "TemporaryName.read": {
            "name": "read",
            "location": 426,
            "return": [
                "tuple[typing.Union[int,bytes]]",
                "int",
                "bytes",
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryName.write": {
            "name": "write",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TemporaryName.symlink": {
            "name": "symlink",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryName.do_not_destroy": {
            "name": "do_not_destroy",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryName.close": {
            "name": "close",
            "location": 467,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryName.__enter__": {
            "name": "__enter__",
            "location": 473,
            "return": [
                "TemporaryName"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryName.__exit__": {
            "name": "__exit__",
            "location": 476,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None"
                ],
                "exc_val": [
                    "None"
                ],
                "exc_tb": [
                    "None"
                ]
            }
        },
        "Directory.__init__": {
            "name": "__init__",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pth": [
                    "None"
                ]
            }
        },
        "Directory.name": {
            "name": "name",
            "location": 531,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Directory.exists": {
            "name": "exists",
            "location": 536,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Directory.initialized": {
            "name": "initialized",
            "location": 541,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Directory.targets_set": {
            "name": "targets_set",
            "location": 549,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Directory.prepared": {
            "name": "prepared",
            "location": 557,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Directory.ctx_initialize": {
            "name": "ctx_initialize",
            "location": 566,
            "return": [
                "Directory"
            ],
            "arguments": {
                "self": []
            }
        },
        "Directory.ctx_set_targets": {
            "name": "ctx_set_targets",
            "location": 593,
            "return": [
                "Directory"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "None"
                ]
            }
        },
        "Directory.ctx_prepare": {
            "name": "ctx_prepare",
            "location": 622,
            "return": [
                "Directory"
            ],
            "arguments": {
                "self": []
            }
        },
        "Directory.__enter__": {
            "name": "__enter__",
            "location": 648,
            "return": [
                "Directory"
            ],
            "arguments": {
                "self": []
            }
        },
        "Directory.__exit__": {
            "name": "__exit__",
            "location": 657,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None"
                ],
                "exc_val": [
                    "None"
                ],
                "exc_tb": [
                    "None"
                ]
            }
        },
        "Directory.ls": {
            "name": "ls",
            "location": 671,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "None"
                ],
                "source": [
                    "None"
                ]
            }
        },
        "Directory.ls_la": {
            "name": "ls_la",
            "location": 686,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "suffix": [
                    "None"
                ],
                "source": [
                    "None"
                ]
            }
        },
        "Directory.subpath": {
            "name": "subpath",
            "location": 706,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "subpath": [],
                "source": [
                    "None"
                ],
                "requisite": [
                    "bool"
                ]
            }
        },
        "Directory.subdirectory": {
            "name": "subdirectory",
            "location": 712,
            "return": [
                "Directory"
            ],
            "arguments": {
                "self": [],
                "subdir": [],
                "source": [
                    "None"
                ]
            }
        },
        "Directory.makedirs": {
            "name": "makedirs",
            "location": 727,
            "return": [
                "Directory"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "None"
                ],
                "mode": [
                    "int"
                ]
            }
        },
        "Directory.walk": {
            "name": "walk",
            "location": 741,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "followlinks": [
                    "bool"
                ]
            }
        },
        "Directory.walkback": {
            "name": "walkback",
            "location": 749,
            "return": [
                "typing.Generator[tuple[typing.Union[Directory,list[],list[]]]]"
            ],
            "arguments": {
                "self": [],
                "followlinks": [
                    "bool"
                ]
            }
        },
        "Directory.flatten": {
            "name": "flatten",
            "location": 780,
            "return": [
                "tuple[tuple[]]",
                "tuple[typing.Optional[tuple[]]]"
            ],
            "arguments": {
                "self": [],
                "destination": [],
                "suffix": [
                    "None"
                ],
                "new_suffix": [
                    "None"
                ]
            }
        },
        "Directory.copy_all": {
            "name": "copy_all",
            "location": 843,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "destination": []
            }
        },
        "Directory.zip_archive": {
            "name": "zip_archive",
            "location": 877,
            "return": [],
            "arguments": {
                "self": [],
                "destination": [],
                "compression_mode": []
            }
        },
        "Directory.importables": {
            "name": "importables",
            "location": 908,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "subdir": [],
                "suffix": [
                    "typing.Text"
                ],
                "source": [
                    "None"
                ],
                "excludes": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "Directory.suffix_histogram": {
            "name": "suffix_histogram",
            "location": 933,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "subdir": [
                    "None"
                ],
                "source": [
                    "None"
                ],
                "excludes": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "Directory.suffixes": {
            "name": "suffixes",
            "location": 954,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "subdir": [
                    "None"
                ],
                "source": [
                    "None"
                ],
                "excludes": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "Directory.items": {
            "name": "items",
            "location": 966,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Directory.keys": {
            "name": "keys",
            "location": 970,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Directory.values": {
            "name": "values",
            "location": 974,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Directory.clone": {
            "name": "clone",
            "location": 977,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ],
                "memo": [
                    "None"
                ]
            }
        },
        "Directory.__iter__": {
            "name": "__iter__",
            "location": 980,
            "return": [
                "typing.Generator[typing.Generator[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Directory.__reversed__": {
            "name": "__reversed__",
            "location": 985,
            "return": [
                "typing.Generator[typing.Generator[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Directory.__len__": {
            "name": "__len__",
            "location": 990,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Directory.__getitem__": {
            "name": "__getitem__",
            "location": 996,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Directory.__contains__": {
            "name": "__contains__",
            "location": 1003,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Directory.__truediv__": {
            "name": "__truediv__",
            "location": 1006,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Directory.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 1009,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "cd.__init__": {
            "name": "__init__",
            "location": 1045,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pth": []
            }
        },
        "wd.__init__": {
            "name": "__init__",
            "location": 1053,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "td.__init__": {
            "name": "__init__",
            "location": 1061,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "hd.__init__": {
            "name": "__init__",
            "location": 1070,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDirectory.__init__": {
            "name": "__init__",
            "location": 1090,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "typing.Text"
                ],
                "suffix": [
                    "typing.Text"
                ],
                "parent": [
                    "None"
                ],
                "change": [
                    "bool"
                ]
            }
        },
        "TemporaryDirectory.name": {
            "name": "name",
            "location": 1122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDirectory.exists": {
            "name": "exists",
            "location": 1127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDirectory.destroy": {
            "name": "destroy",
            "location": 1132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDirectory.ctx_prepare": {
            "name": "ctx_prepare",
            "location": 1140,
            "return": [
                "TemporaryDirectory"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDirectory.symlink": {
            "name": "symlink",
            "location": 1145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDirectory.close": {
            "name": "close",
            "location": 1153,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDirectory.do_not_destroy": {
            "name": "do_not_destroy",
            "location": 1162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDirectory.__enter__": {
            "name": "__enter__",
            "location": 1172,
            "return": [
                "TemporaryDirectory"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryDirectory.__exit__": {
            "name": "__exit__",
            "location": 1178,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None"
                ],
                "exc_val": [
                    "None"
                ],
                "exc_tb": [
                    "None"
                ]
            }
        },
        "Intermediate.__new__": {
            "name": "__new__",
            "location": 1194,
            "return": [
                "Directory",
                "TemporaryDirectory"
            ],
            "arguments": {
                "cls": [],
                "pth": [
                    "None"
                ],
                "change": [
                    "bool"
                ]
            }
        },
        "Intermediate.__init__": {
            "name": "__init__",
            "location": 1203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pth": [
                    "None"
                ],
                "change": [
                    "bool"
                ]
            }
        }
    },
    "CLU-master/clu/fs/misc.py": {
        "re_matcher": {
            "name": "re_matcher",
            "location": 25,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "string": []
            }
        },
        "re_searcher": {
            "name": "re_searcher",
            "location": 39,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "string": []
            }
        },
        "re_suffix": {
            "name": "re_suffix",
            "location": 58,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {
                "string": []
            }
        },
        "suffix_searcher": {
            "name": "suffix_searcher",
            "location": 67,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "re_excluder": {
            "name": "re_excluder",
            "location": 82,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {}
        },
        "extension": {
            "name": "extension",
            "location": 94,
            "return": [],
            "arguments": {
                "path": [],
                "dotted": [
                    "bool"
                ]
            }
        },
        "swapext": {
            "name": "swapext",
            "location": 102,
            "return": [],
            "arguments": {
                "path": [],
                "new_extension": [
                    "None"
                ]
            }
        },
        "filesize": {
            "name": "filesize",
            "location": 123,
            "return": [
                "int"
            ],
            "arguments": {
                "path": []
            }
        },
        "samesize": {
            "name": "samesize",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "path0": [],
                "path1": []
            }
        },
        "differentsize": {
            "name": "differentsize",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "path0": [],
                "path1": []
            }
        },
        "modeflags": {
            "name": "modeflags",
            "location": 166,
            "return": [],
            "arguments": {
                "mode": [],
                "delete": [
                    "bool"
                ]
            }
        },
        "temporary": {
            "name": "temporary",
            "location": 186,
            "return": [],
            "arguments": {
                "suffix": [
                    "typing.Text"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "parent": [
                    "None"
                ]
            }
        },
        "grouped": {
            "name": "grouped",
            "location": 220,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "iterator": [],
                "predicate": []
            }
        },
        "u8encode": {
            "name": "u8encode",
            "location": 232,
            "return": [
                "bytes"
            ],
            "arguments": {
                "source": []
            }
        },
        "u8bytes": {
            "name": "u8bytes",
            "location": 237,
            "return": [
                "bytes"
            ],
            "arguments": {
                "source": []
            }
        },
        "u8str": {
            "name": "u8str",
            "location": 254,
            "return": [
                "bool"
            ],
            "arguments": {
                "source": []
            }
        },
        "win32_longpath": {
            "name": "win32_longpath",
            "location": 264,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "current_umask": {
            "name": "current_umask",
            "location": 284,
            "return": [],
            "arguments": {}
        },
        "masked_permissions": {
            "name": "masked_permissions",
            "location": 291,
            "return": [
                "int"
            ],
            "arguments": {
                "perms": [
                    "int"
                ]
            }
        },
        "masked_chmod": {
            "name": "masked_chmod",
            "location": 298,
            "return": [],
            "arguments": {
                "path": [],
                "perms": [
                    "int"
                ]
            }
        }
    },
    "CLU-master/clu/fs/pypath.py": {
        "add_paths": {
            "name": "add_paths",
            "location": 14,
            "return": [
                "dict[, ]",
                "dict[, bool]"
            ],
            "arguments": {}
        },
        "mutate_syspath": {
            "name": "mutate_syspath",
            "location": 48,
            "return": [
                "list[]"
            ],
            "arguments": {
                "container": []
            }
        },
        "remove_paths": {
            "name": "remove_paths",
            "location": 61,
            "return": [
                "dict[, ]",
                "dict[, bool]"
            ],
            "arguments": {}
        },
        "remove_invalid_paths": {
            "name": "remove_invalid_paths",
            "location": 88,
            "return": [
                "dict[, bool]"
            ],
            "arguments": {}
        },
        "enhance": {
            "name": "enhance",
            "location": 113,
            "return": [],
            "arguments": {}
        }
    },
    "CLU-master/clu/fs/sourcetree.py": {
        "SourceTree.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [],
                "path": [
                    "None"
                ]
            }
        },
        "SourceTree.name": {
            "name": "name",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceTree.basename": {
            "name": "basename",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceTree.dirname": {
            "name": "dirname",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceTree.exists": {
            "name": "exists",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceTree.destroy": {
            "name": "destroy",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceTree.do_not_destroy": {
            "name": "do_not_destroy",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceTree.cython_script": {
            "name": "cython_script",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceTree.python_executable": {
            "name": "python_executable",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceTree.header": {
            "name": "header",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceTree.prepared_headers": {
            "name": "prepared_headers",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceTree.unpack": {
            "name": "unpack",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceTree.__enter__": {
            "name": "__enter__",
            "location": 110,
            "return": [
                "SourceTree"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceTree.__exit__": {
            "name": "__exit__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None"
                ],
                "exc_val": [
                    "None"
                ],
                "exc_tb": [
                    "None"
                ]
            }
        }
    },
    "CLU-master/clu/fs/__init__.py": {},
    "CLU-master/clu/importing/base.py": {
        "all_registered_appnames": {
            "name": "all_registered_appnames",
            "location": 121,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {}
        },
        "all_registered_modules": {
            "name": "all_registered_modules",
            "location": 126,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "all_registered_appspaces": {
            "name": "all_registered_appspaces",
            "location": 134,
            "return": [
                "typing.Generator[set[]]"
            ],
            "arguments": {}
        },
        "modules_for_appname": {
            "name": "modules_for_appname",
            "location": 143,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "appname": []
            }
        },
        "appspaces_for_appname": {
            "name": "appspaces_for_appname",
            "location": 159,
            "return": [
                "typing.Generator[set[]]"
            ],
            "arguments": {
                "appname": []
            }
        },
        "modules_for_appname_and_appspace": {
            "name": "modules_for_appname_and_appspace",
            "location": 167,
            "return": [
                "typing.Generator[typing.Generator[]]"
            ],
            "arguments": {
                "appname": [],
                "appspace": []
            }
        },
        "installed_appnames": {
            "name": "installed_appnames",
            "location": 890,
            "return": [
                "set[]"
            ],
            "arguments": {}
        },
        "initialize_module": {
            "name": "initialize_module",
            "location": 900,
            "return": [
                "Module"
            ],
            "arguments": {
                "appname": [],
                "appspace": [],
                "module": []
            }
        },
        "initialize_new_types": {
            "name": "initialize_new_types",
            "location": 910,
            "return": [
                "tuple[typing.Union[Module,Finder,Loader]]"
            ],
            "arguments": {
                "appname": [],
                "appspace": [],
                "module": []
            }
        },
        "initialize_types": {
            "name": "initialize_types",
            "location": 926,
            "return": [
                "tuple[typing.Union[Module,Finder,Loader]]"
            ],
            "arguments": {
                "appname": [],
                "appspace": []
            }
        },
        "test": {
            "name": "test",
            "location": 974,
            "return": [],
            "arguments": {}
        },
        "MetaRegistry.monomers": {
            "name": "monomers",
            "location": 69,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MetaRegistry.has_appname": {
            "name": "has_appname",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "appname": []
            }
        },
        "MetaRegistry.for_appname": {
            "name": "for_appname",
            "location": 78,
            "return": [],
            "arguments": {
                "appname": []
            }
        },
        "MetaRegistry.for_qualname": {
            "name": "for_qualname",
            "location": 87,
            "return": [],
            "arguments": {
                "qualname": []
            }
        },
        "MetaRegistry.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MetaRegistry.unregister": {
            "name": "unregister",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "appname": [],
                "qualified_name": []
            }
        },
        "Registry.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Registry.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 198,
            "return": [],
            "arguments": {
                "cls": [],
                "key": []
            }
        },
        "ModuleSpec.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "loader": []
            }
        },
        "ModuleSpec.__hash__": {
            "name": "__hash__",
            "location": 221,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Package.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "doc": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            }
        },
        "Package.__repr__": {
            "name": "__repr__",
            "location": 239,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaTypeRepr.__repr__": {
            "name": "__repr__",
            "location": 260,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ArgumentSink.__new__": {
            "name": "__new__",
            "location": 286,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ArgumentSink.__call__": {
            "name": "__call__",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "ArgumentSink.__hash__": {
            "name": "__hash__",
            "location": 301,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentSink.inner_repr": {
            "name": "inner_repr",
            "location": 305,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentSink.__eq__": {
            "name": "__eq__",
            "location": 308,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ArgumentSink.__ne__": {
            "name": "__ne__",
            "location": 314,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "MetaNameAndSpaces.appspaces": {
            "name": "appspaces",
            "location": 325,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LoaderBase.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "LoaderBase.__new__": {
            "name": "__new__",
            "location": 359,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "LoaderBase.package_module": {
            "name": "package_module",
            "location": 385,
            "return": [
                "Package"
            ],
            "arguments": {
                "name": []
            }
        },
        "LoaderBase.create_module": {
            "name": "create_module",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": []
            }
        },
        "LoaderBase.exec_module": {
            "name": "exec_module",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "LoaderBase.__reduce__": {
            "name": "__reduce__",
            "location": 437,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoaderBase.__repr__": {
            "name": "__repr__",
            "location": 441,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinderBase.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "FinderBase.spec": {
            "name": "spec",
            "location": 485,
            "return": [
                "ModuleSpec"
            ],
            "arguments": {
                "cls": [],
                "fullname": []
            }
        },
        "FinderBase.find_spec": {
            "name": "find_spec",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "fullname": [],
                "path": [
                    "None"
                ],
                "target": [
                    "None"
                ]
            }
        },
        "FinderBase.invalidate_caches": {
            "name": "invalidate_caches",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "FinderBase.iter_modules": {
            "name": "iter_modules",
            "location": 522,
            "return": [
                "typing.Generator[typing.Generator[]]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MetaModule.name": {
            "name": "name",
            "location": 553,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MetaModule.prefix": {
            "name": "prefix",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MetaModule.qualname": {
            "name": "qualname",
            "location": 568,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "MetaModule.monomers": {
            "name": "monomers",
            "location": 573,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MetaModule.__prepare__": {
            "name": "__prepare__",
            "location": 578,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": []
            }
        },
        "MetaModule.__new__": {
            "name": "__new__",
            "location": 603,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": [],
                "attributes": []
            }
        },
        "ModuleAlias.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 651,
            "return": [],
            "arguments": {
                "cls": [],
                "key": []
            }
        },
        "ModuleAlias.__init__": {
            "name": "__init__",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin": [],
                "specializer": []
            }
        },
        "ModuleAlias.__getitem__": {
            "name": "__getitem__",
            "location": 672,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ModuleAlias.__hash__": {
            "name": "__hash__",
            "location": 676,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleAlias.__mro_entries__": {
            "name": "__mro_entries__",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "bases": []
            }
        },
        "ModuleAlias.__call__": {
            "name": "__call__",
            "location": 684,
            "return": [],
            "arguments": {
                "self": [],
                "bases": [
                    "tuple[]"
                ]
            }
        },
        "ModuleAlias.inner_repr": {
            "name": "inner_repr",
            "location": 687,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleAlias.__eq__": {
            "name": "__eq__",
            "location": 690,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ModuleAlias.__ne__": {
            "name": "__ne__",
            "location": 696,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ModuleBase.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "appname": [
                    "None"
                ],
                "appspace": [
                    "None"
                ]
            }
        },
        "ModuleBase.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 747,
            "return": [
                "ModuleAlias"
            ],
            "arguments": {
                "cls": [],
                "key": []
            }
        },
        "ModuleBase.__init__": {
            "name": "__init__",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "doc": [
                    "None"
                ]
            }
        },
        "ModuleBase.__execute__": {
            "name": "__execute__",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleBase.name": {
            "name": "name",
            "location": 786,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModuleBase.prefix": {
            "name": "prefix",
            "location": 790,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModuleBase.qualname": {
            "name": "qualname",
            "location": 794,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModuleBase.__reduce__": {
            "name": "__reduce__",
            "location": 799,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleBase.__dir__": {
            "name": "__dir__",
            "location": 804,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerApp.appspaces": {
            "name": "appspaces",
            "location": 827,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerApp.__repr__": {
            "name": "__repr__",
            "location": 831,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolymerType.store": {
            "name": "store",
            "location": 847,
            "return": [],
            "arguments": {
                "self": [],
                "appname": [],
                "loader": [],
                "finder": []
            }
        },
        "PolymerType.add_module": {
            "name": "add_module",
            "location": 857,
            "return": [],
            "arguments": {
                "self": [],
                "module": [],
                "appname": [],
                "appspace": []
            }
        },
        "PolymerType.get_finder": {
            "name": "get_finder",
            "location": 873,
            "return": [],
            "arguments": {
                "self": [],
                "appname": []
            }
        },
        "PolymerType.get_loader": {
            "name": "get_loader",
            "location": 878,
            "return": [],
            "arguments": {
                "self": [],
                "appname": []
            }
        },
        "PolymerType.all_appspaces": {
            "name": "all_appspaces",
            "location": 883,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test.show_python_executable": {
            "name": "show_python_executable",
            "location": 982,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_module_from_frame": {
            "name": "show_module_from_frame",
            "location": 987,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_module_fucking_seriously": {
            "name": "show_module_fucking_seriously",
            "location": 1000,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 1007,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 1018,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_four": {
            "name": "test_four",
            "location": 1094,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_five_point_five": {
            "name": "test_five_point_five",
            "location": 1162,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_spec_cache": {
            "name": "show_spec_cache",
            "location": 1189,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_monomers": {
            "name": "show_monomers",
            "location": 1209,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_linkages": {
            "name": "show_linkages",
            "location": 1226,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_polymers": {
            "name": "show_polymers",
            "location": 1245,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MetaModule.__prepare__.deferred_export": {
            "name": "deferred_export",
            "location": 584,
            "return": [],
            "arguments": {
                "thing": [],
                "name": [
                    "None"
                ],
                "doc": [
                    "None"
                ]
            }
        },
        "test.test_four.Derived.yodogg": {
            "name": "yodogg",
            "location": 1104,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "test.test_four.Derived.nodogg": {
            "name": "nodogg",
            "location": 1108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/importing/proxy.py": {
        "add_targets": {
            "name": "add_targets",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": []
            }
        },
        "test": {
            "name": "test",
            "location": 303,
            "return": [],
            "arguments": {}
        },
        "ChainModuleMap.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainModuleMap.__iter__": {
            "name": "__iter__",
            "location": 51,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainModuleMap.__getitem__": {
            "name": "__getitem__",
            "location": 55,
            "return": [
                "NoDefault"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ChainModuleMap.__missing__": {
            "name": "__missing__",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ProxyModule.__new__": {
            "name": "__new__",
            "location": 193,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "ProxyModule.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ProxyModule.__execute__": {
            "name": "__execute__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyModule.__dir__": {
            "name": "__dir__",
            "location": 278,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyModule.__getattr__": {
            "name": "__getattr__",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "test.show_module_from_frame": {
            "name": "show_module_from_frame",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_module_fucking_seriously": {
            "name": "show_module_fucking_seriously",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_five": {
            "name": "test_five",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_five_point_five": {
            "name": "test_five_point_five",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_five_point_eight": {
            "name": "test_five_point_eight",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_five_point_five.fallback_function": {
            "name": "fallback_function",
            "location": 360,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "key": []
            }
        }
    },
    "CLU-master/clu/importing/__init__.py": {
        "test": {
            "name": "test",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test.show_python_executable": {
            "name": "show_python_executable",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_module_from_frame": {
            "name": "show_module_from_frame",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_module_fucking_seriously": {
            "name": "show_module_fucking_seriously",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three": {
            "name": "test_three",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three_point_five": {
            "name": "test_three_point_five",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_four": {
            "name": "test_four",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_five": {
            "name": "test_five",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_five_point_five": {
            "name": "test_five_point_five",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_spec_cache": {
            "name": "show_spec_cache",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_monomers": {
            "name": "show_monomers",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_linkages": {
            "name": "show_linkages",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_polymers": {
            "name": "show_polymers",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_four.Derived.yodogg": {
            "name": "yodogg",
            "location": 166,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "test.test_four.Derived.nodogg": {
            "name": "nodogg",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/importing/__main__.py": {},
    "CLU-master/clu/repl/ansi.py": {
        "print_ansi": {
            "name": "print_ansi",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "text": []
            }
        },
        "print_ansi_centered": {
            "name": "print_ansi_centered",
            "location": 423,
            "return": [],
            "arguments": {
                "text": [],
                "filler": [],
                "width": [
                    "None"
                ],
                "color": [
                    "None"
                ],
                "file": []
            }
        },
        "print_ansi_name_value": {
            "name": "print_ansi_name_value",
            "location": 449,
            "return": [],
            "arguments": {
                "name": [],
                "value": [],
                "most": [
                    "int"
                ],
                "pilcrow": [],
                "equals": [],
                "color": [
                    "ANSIFormat"
                ],
                "file": [],
                "namecolor": [
                    "ANSIFormat"
                ],
                "valuecolor": [
                    "ANSIFormat"
                ]
            }
        },
        "paragraphize": {
            "name": "paragraphize",
            "location": 472,
            "return": [],
            "arguments": {
                "doc": []
            }
        },
        "signature": {
            "name": "signature",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "thing": []
            }
        },
        "highlight": {
            "name": "highlight",
            "location": 506,
            "return": [],
            "arguments": {
                "code_string": [],
                "language": [
                    "typing.Text"
                ],
                "markup": [
                    "typing.Text"
                ],
                "style": [
                    "typing.Text"
                ],
                "isatty": [
                    "bool"
                ]
            }
        },
        "old_ansidoc": {
            "name": "old_ansidoc",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 776,
            "return": [],
            "arguments": {}
        },
        "ANSIBase.is_ansi": {
            "name": "is_ansi",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "instance": []
            }
        },
        "ANSI.__prepare__": {
            "name": "__prepare__",
            "location": 45,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": []
            }
        },
        "ANSI.__new__": {
            "name": "__new__",
            "location": 52,
            "return": [],
            "arguments": {
                "metacls": [],
                "name": [],
                "bases": [],
                "attributes": []
            }
        },
        "ANSI.for_name": {
            "name": "for_name",
            "location": 108,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "ANSI.convert": {
            "name": "convert",
            "location": 134,
            "return": [],
            "arguments": {
                "cls": [],
                "specifier": []
            }
        },
        "ANSI._missing_": {
            "name": "_missing_",
            "location": 148,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "ANSIFormat.pre_existing": {
            "name": "pre_existing",
            "location": 244,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "text": [],
                "background": [],
                "weight": []
            }
        },
        "ANSIFormat.instance_for": {
            "name": "instance_for",
            "location": 251,
            "return": [],
            "arguments": {
                "cls": [],
                "text": [],
                "background": [],
                "weight": []
            }
        },
        "ANSIFormat.get_or_create": {
            "name": "get_or_create",
            "location": 263,
            "return": [],
            "arguments": {
                "cls": [],
                "text": [],
                "background": [],
                "weight": []
            }
        },
        "ANSIFormat.from_dict": {
            "name": "from_dict",
            "location": 278,
            "return": [],
            "arguments": {
                "cls": [],
                "format_dict": []
            }
        },
        "ANSIFormat.to_dict": {
            "name": "to_dict",
            "location": 286,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANSIFormat.to_tuple": {
            "name": "to_tuple",
            "location": 295,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANSIFormat.to_string": {
            "name": "to_string",
            "location": 301,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANSIFormat.__new__": {
            "name": "__new__",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "from_value": [],
                "text": [],
                "background": [],
                "weight": []
            }
        },
        "ANSIFormat.null": {
            "name": "null",
            "location": 337,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ANSIFormat.__str__": {
            "name": "__str__",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ANSIFormat.__bytes__": {
            "name": "__bytes__",
            "location": 347,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANSIFormat.__hash__": {
            "name": "__hash__",
            "location": 351,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANSIFormat.__bool__": {
            "name": "__bool__",
            "location": 355,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANSIFormat.clone": {
            "name": "clone",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ],
                "memo": [
                    "None"
                ]
            }
        },
        "ANSIFormat.inner_repr": {
            "name": "inner_repr",
            "location": 370,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANSIFormat.render": {
            "name": "render",
            "location": 375,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "ANSISanitizer.__init__": {
            "name": "__init__",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANSICodeHighlighter.__init__": {
            "name": "__init__",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "typing.Text"
                ],
                "markup": [
                    "typing.Text"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "ANSICodeHighlighter.render": {
            "name": "render",
            "location": 532,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "PygmentsHighlighter.__init__": {
            "name": "__init__",
            "location": 542,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "typing.Text"
                ],
                "markup": [
                    "typing.Text"
                ],
                "style": [
                    "typing.Text"
                ]
            }
        },
        "PygmentsHighlighter.render": {
            "name": "render",
            "location": 550,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "TextWrapper.__init__": {
            "name": "__init__",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextWrapper.render": {
            "name": "render",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "HighlighterWrapper.__init__": {
            "name": "__init__",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DualOptionWrapper.__init__": {
            "name": "__init__",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kwargs": [],
                "kwalts": []
            }
        },
        "ParagraphWrapper.__init__": {
            "name": "__init__",
            "location": 605,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParagraphWrapper.code_mark": {
            "name": "code_mark",
            "location": 610,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "ParagraphWrapper.render": {
            "name": "render",
            "location": 615,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "StagedFormat.__init__": {
            "name": "__init__",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StagedFormat.render": {
            "name": "render",
            "location": 628,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "DocFormat.__init__": {
            "name": "__init__",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iohandle": []
            }
        },
        "DocFormat.isatty": {
            "name": "isatty",
            "location": 651,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocFormat.get": {
            "name": "get",
            "location": 654,
            "return": [],
            "arguments": {
                "self": [],
                "atx": []
            }
        },
        "DocFormat.put": {
            "name": "put",
            "location": 662,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "DocFormat.putcenter": {
            "name": "putcenter",
            "location": 665,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "None"
                ],
                "filler": [
                    "typing.Text"
                ],
                "width": [
                    "None"
                ],
                "color": [
                    "None"
                ]
            }
        },
        "DocFormat.putln": {
            "name": "putln",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int"
                ]
            }
        },
        "DocFormat.putcode": {
            "name": "putcode",
            "location": 677,
            "return": [],
            "arguments": {
                "self": [],
                "codestring": []
            }
        },
        "DocFormat.putpara": {
            "name": "putpara",
            "location": 681,
            "return": [],
            "arguments": {
                "self": [],
                "paragraph": []
            }
        },
        "DocFormat.render": {
            "name": "render",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thing": []
            }
        },
        "DocFormat.__call__": {
            "name": "__call__",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test.test_one": {
            "name": "test_one",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_one_point_five": {
            "name": "test_one_point_five",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 792,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three": {
            "name": "test_three",
            "location": 797,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ANSI.__new__.init_method": {
            "name": "init_method",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ANSI.__new__.bool_method": {
            "name": "bool_method",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANSI.__new__.str_method": {
            "name": "str_method",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ANSI.__new__.add_method": {
            "name": "add_method",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ANSI.__new__.to_string": {
            "name": "to_string",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ANSI.__new__.SourceDescriptor.__get__": {
            "name": "__get__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ANSI.__new__.SourceDescriptor.inner_repr": {
            "name": "inner_repr",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/clu/repl/banners.py": {
        "print_python_banner": {
            "name": "print_python_banner",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "color": [],
                "reset": [],
                "file": []
            }
        },
        "print_warning": {
            "name": "print_warning",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "color": [],
                "reset": [],
                "file": []
            }
        },
        "print_banner": {
            "name": "print_banner",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/repl/columnize.py": {
        "computed_display_width": {
            "name": "computed_display_width",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "vertical_index": {
            "name": "vertical_index",
            "location": 78,
            "return": [],
            "arguments": {
                "nrows": [],
                "row": [],
                "col": []
            }
        },
        "horizontal_index": {
            "name": "horizontal_index",
            "location": 83,
            "return": [],
            "arguments": {
                "ncols": [],
                "row": [],
                "col": []
            }
        },
        "columnize": {
            "name": "columnize",
            "location": 89,
            "return": [],
            "arguments": {
                "array": [],
                "display_width": []
            }
        },
        "demo": {
            "name": "demo",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "Percenter.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "opstring": []
            }
        },
        "Percenter.render": {
            "name": "render",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "StrMethod.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "opstring": []
            }
        },
        "StrMethod.render": {
            "name": "render",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "demo.columnprint": {
            "name": "columnprint",
            "location": 299,
            "return": [],
            "arguments": {}
        }
    },
    "CLU-master/clu/repl/modules.py": {
        "compare_module_lookups_for_all_things": {
            "name": "compare_module_lookups_for_all_things",
            "location": 121,
            "return": [
                "tuple[typing.Union[Results,Mismatches]]"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "ModuleMap.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "ModuleMap.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleMap.__reversed__": {
            "name": "__reversed__",
            "location": 73,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleMap.__contains__": {
            "name": "__contains__",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ModuleMap.__getitem__": {
            "name": "__getitem__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ModuleMap.__len__": {
            "name": "__len__",
            "location": 88,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleMap.keys": {
            "name": "keys",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModuleMap.values": {
            "name": "values",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModuleMap.items": {
            "name": "items",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModuleMap.reload": {
            "name": "reload",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModuleMap.most": {
            "name": "most",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModuleMap.clone": {
            "name": "clone",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ],
                "memo": [
                    "None"
                ]
            }
        },
        "ModuleMap.inner_repr": {
            "name": "inner_repr",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test.predicate_modules": {
            "name": "predicate_modules",
            "location": 198,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three": {
            "name": "test_three",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/repl/__init__.py": {},
    "CLU-master/clu/repl/cli/boilerplate.py": {
        "boilerplate_command": {
            "name": "boilerplate_command",
            "location": 43,
            "return": [],
            "arguments": {
                "function": []
            }
        }
    },
    "CLU-master/clu/repl/cli/boilerplate_copy.py": {
        "boilerplate_copy_command": {
            "name": "boilerplate_copy_command",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "CLU-master/clu/repl/cli/print_version.py": {
        "version_string": {
            "name": "version_string",
            "location": 8,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "print_version_command": {
            "name": "print_version_command",
            "location": 27,
            "return": [],
            "arguments": {}
        }
    },
    "CLU-master/clu/repl/cli/__init__.py": {},
    "CLU-master/clu/scripts/ansicolors.py": {},
    "CLU-master/clu/scripts/boilerplate.py": {
        "test": {
            "name": "test",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_me_some_values": {
            "name": "show_me_some_values",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/scripts/prediversus.py": {
        "test": {
            "name": "test",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test.dunder_mifflins": {
            "name": "dunder_mifflins",
            "location": 28,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/scripts/repl.py": {
        "star_export": {
            "name": "star_export",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "modulename": [],
                "namespace": []
            }
        },
        "module_export": {
            "name": "module_export",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "modulename": [],
                "namespace": []
            }
        },
        "explain": {
            "name": "explain",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "thing": [],
                "width": [
                    "None"
                ]
            }
        }
    },
    "CLU-master/clu/scripts/__init__.py": {},
    "CLU-master/clu/scripts/legacy/forkumask.py": {
        "current_umask": {
            "name": "current_umask",
            "location": 9,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "current_umask.umask": {
            "name": "umask",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/scripts/legacy/repl-bpython.py": {},
    "CLU-master/clu/scripts/legacy/repl-ipython.py": {},
    "CLU-master/clu/scripts/legacy/repl-ptpython.py": {},
    "CLU-master/clu/scripts/legacy/repl-pyzo.py": {},
    "CLU-master/clu/scripts/legacy/xdg-runtime.py": {
        "name_xdg_runtime_dir": {
            "name": "name_xdg_runtime_dir",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "namebase": []
            }
        },
        "make_xdg_runtime_dir": {
            "name": "make_xdg_runtime_dir",
            "location": 27,
            "return": [],
            "arguments": {
                "directory": [],
                "mode": []
            }
        },
        "enumerate_dirs": {
            "name": "enumerate_dirs",
            "location": 34,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "directory": []
            }
        },
        "create_symlink": {
            "name": "create_symlink",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "directory": [],
                "runtime_dir": []
            }
        },
        "remove_symlink": {
            "name": "remove_symlink",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "directory": []
            }
        },
        "remove_existing_dirs": {
            "name": "remove_existing_dirs",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "directory": []
            }
        },
        "print_launchd_plist": {
            "name": "print_launchd_plist",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_xdg_runtime_dir": {
            "name": "create_xdg_runtime_dir",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/shelving/redat.py": {
        "test_context": {
            "name": "test_context",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RedisConf.compose": {
            "name": "compose",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "RedisConf.decompose": {
            "name": "decompose",
            "location": 54,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "value": []
            }
        },
        "RedisConf.decommentizer": {
            "name": "decommentizer",
            "location": 58,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "RedisConf.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "None"
                ],
                "directory": [
                    "None"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "RedisConf.process": {
            "name": "process",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "RedisConf.parse": {
            "name": "parse",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "RedisConf.add": {
            "name": "add",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "RedisConf.set": {
            "name": "set",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "RedisConf.get": {
            "name": "get",
            "location": 98,
            "return": [
                "NoDefault"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "RedisConf.set_boolean": {
            "name": "set_boolean",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "RedisConf.get_boolean": {
            "name": "get_boolean",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RedisConf.get_host": {
            "name": "get_host",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.set_port": {
            "name": "set_port",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": []
            }
        },
        "RedisConf.get_port": {
            "name": "get_port",
            "location": 126,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.set_unix_socket": {
            "name": "set_unix_socket",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "perm": [
                    "int"
                ]
            }
        },
        "RedisConf.get_unix_socket": {
            "name": "get_unix_socket",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.get_unix_socket_perm": {
            "name": "get_unix_socket_perm",
            "location": 139,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.set_dir": {
            "name": "set_dir",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": []
            }
        },
        "RedisConf.get_dir": {
            "name": "get_dir",
            "location": 145,
            "return": [
                "Directory"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.get_includes": {
            "name": "get_includes",
            "location": 148,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.getline": {
            "name": "getline",
            "location": 155,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RedisConf.getlines": {
            "name": "getlines",
            "location": 159,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RedisConf.getall": {
            "name": "getall",
            "location": 165,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.assemble": {
            "name": "assemble",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.path": {
            "name": "path",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.is_temporary": {
            "name": "is_temporary",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.setup": {
            "name": "setup",
            "location": 180,
            "return": [
                "RedisConf"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.teardown": {
            "name": "teardown",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.get_command": {
            "name": "get_command",
            "location": 209,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.get_client": {
            "name": "get_client",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.__fspath__": {
            "name": "__fspath__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.__len__": {
            "name": "__len__",
            "location": 226,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.__iter__": {
            "name": "__iter__",
            "location": 229,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.__contains__": {
            "name": "__contains__",
            "location": 232,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RedisConf.__getitem__": {
            "name": "__getitem__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RedisConf.__setitem__": {
            "name": "__setitem__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "RedisConf.__delitem__": {
            "name": "__delitem__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RedisConf.__repr__": {
            "name": "__repr__",
            "location": 244,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisConf.__str__": {
            "name": "__str__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "redprocess.get_config": {
            "name": "get_config",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "redprocess.set_config": {
            "name": "set_config",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "redprocess.get_process": {
            "name": "get_process",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "redprocess.set_process": {
            "name": "set_process",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "process": []
            }
        },
        "redprocess.__execute__": {
            "name": "__execute__",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedRun.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "RedRun.get_process": {
            "name": "get_process",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedRun.destroy_process": {
            "name": "destroy_process",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "process": []
            }
        },
        "RedRun.setup": {
            "name": "setup",
            "location": 364,
            "return": [
                "RedRun"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedRun.teardown": {
            "name": "teardown",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedRun.pid": {
            "name": "pid",
            "location": 378,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedRun.ping": {
            "name": "ping",
            "location": 383,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedRun.__repr__": {
            "name": "__repr__",
            "location": 391,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "redprocess.__execute__.gratuitous": {
            "name": "gratuitous",
            "location": 298,
            "return": [
                "bool"
            ],
            "arguments": {
                "signum": [],
                "frame": [
                    "None"
                ]
            }
        },
        "redprocess.__execute__.cleanup_process": {
            "name": "cleanup_process",
            "location": 308,
            "return": [
                "bool"
            ],
            "arguments": {
                "signum": [],
                "frame": [
                    "None"
                ]
            }
        },
        "redprocess.__execute__.cleanup_config": {
            "name": "cleanup_config",
            "location": 323,
            "return": [
                "bool"
            ],
            "arguments": {
                "signum": [],
                "frame": [
                    "None"
                ]
            }
        }
    },
    "CLU-master/clu/shelving/__init__.py": {},
    "CLU-master/clu/testing/hook.py": {
        "pytest_delete_temps_default": {
            "name": "pytest_delete_temps_default",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/testing/obsolete.py": {
        "shared_datadir": {
            "name": "shared_datadir",
            "location": 8,
            "return": [],
            "arguments": {
                "request": [],
                "tmpdir": []
            }
        },
        "original_datadir": {
            "name": "original_datadir",
            "location": 27,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "copied_datadir": {
            "name": "copied_datadir",
            "location": 36,
            "return": [],
            "arguments": {
                "original_datadir": [],
                "tmpdir": []
            }
        }
    },
    "CLU-master/clu/testing/pytest.py": {
        "pytest_addhooks": {
            "name": "pytest_addhooks",
            "location": 22,
            "return": [],
            "arguments": {
                "pluginmanager": []
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 27,
            "return": [],
            "arguments": {
                "parser": [],
                "pluginmanager": []
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 59,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "pytest_sessionfinish": {
            "name": "pytest_sessionfinish",
            "location": 69,
            "return": [],
            "arguments": {
                "session": [],
                "exitstatus": []
            }
        },
        "consts": {
            "name": "consts",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "gitrun": {
            "name": "gitrun",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "greektext": {
            "name": "greektext",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "cluversion": {
            "name": "cluversion",
            "location": 154,
            "return": [],
            "arguments": {}
        },
        "clumods": {
            "name": "clumods",
            "location": 162,
            "return": [],
            "arguments": {
                "consts": []
            }
        },
        "dirname": {
            "name": "dirname",
            "location": 173,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "datadir": {
            "name": "datadir",
            "location": 200,
            "return": [],
            "arguments": {
                "dirname": []
            }
        },
        "temporarydir": {
            "name": "temporarydir",
            "location": 237,
            "return": [],
            "arguments": {}
        },
        "temporaryname": {
            "name": "temporaryname",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "environment": {
            "name": "environment",
            "location": 297,
            "return": [],
            "arguments": {}
        },
        "pytest_sessionfinish.remover": {
            "name": "remover",
            "location": 108,
            "return": [],
            "arguments": {
                "signum": [],
                "frame": []
            }
        },
        "temporaryname.temporaryname_factory": {
            "name": "temporaryname_factory",
            "location": 283,
            "return": [],
            "arguments": {
                "suffix": [],
                "prefix": [],
                "parent": []
            }
        }
    },
    "CLU-master/clu/testing/utils.py": {
        "countfiles": {
            "name": "countfiles",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "target": [],
                "suffix": [
                    "None"
                ]
            }
        },
        "natural_millis": {
            "name": "natural_millis",
            "location": 42,
            "return": [],
            "arguments": {
                "millis": []
            }
        },
        "format_report": {
            "name": "format_report",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "aggregated_report": [],
                "show_buckets": [
                    "bool"
                ],
                "show_annotations": [
                    "bool"
                ]
            }
        },
        "json_report": {
            "name": "json_report",
            "location": 104,
            "return": [],
            "arguments": {
                "aggregated_report": []
            }
        },
        "get_title": {
            "name": "get_title",
            "location": 109,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "function": []
            }
        },
        "multiple": {
            "name": "multiple",
            "location": 124,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "number": []
            }
        },
        "format_environment": {
            "name": "format_environment",
            "location": 131,
            "return": [
                "None",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "environment": [
                    "None"
                ]
            }
        },
        "stdpout": {
            "name": "stdpout",
            "location": 585,
            "return": [],
            "arguments": {}
        },
        "__getattr__": {
            "name": "__getattr__",
            "location": 629,
            "return": [
                "InlineTester"
            ],
            "arguments": {
                "key": []
            }
        },
        "test": {
            "name": "test",
            "location": 642,
            "return": [],
            "arguments": {}
        },
        "Bucket.byname": {
            "name": "byname",
            "location": 176,
            "return": [],
            "arguments": {
                "cls": [],
                "string": []
            }
        },
        "Bucket.bytitle": {
            "name": "bytitle",
            "location": 184,
            "return": [],
            "arguments": {
                "cls": [],
                "string": []
            }
        },
        "Bucket.to_string": {
            "name": "to_string",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bucket.__str__": {
            "name": "__str__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.__bytes__": {
            "name": "__bytes__",
            "location": 197,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bucket.group_name": {
            "name": "group_name",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bucket.group_title": {
            "name": "group_title",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InlineTester.__new__": {
            "name": "__new__",
            "location": 263,
            "return": [],
            "arguments": {
                "cls": [],
                "iterable": [
                    "None"
                ]
            }
        },
        "InlineTester.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "None"
                ]
            }
        },
        "InlineTester.wrap": {
            "name": "wrap",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "bucket": []
            }
        },
        "InlineTester.__call__": {
            "name": "__call__",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "InlineTester.add_function": {
            "name": "add_function",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "name": [
                    "None"
                ]
            }
        },
        "InlineTester.precheck": {
            "name": "precheck",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineTester.diagnostic": {
            "name": "diagnostic",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineTester.runtwice": {
            "name": "runtwice",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineTester.fixture": {
            "name": "fixture",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InlineTester.test": {
            "name": "test",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "exec_count": [
                    "int"
                ]
            }
        },
        "InlineTester.__len__": {
            "name": "__len__",
            "location": 566,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InlineTester.__iter__": {
            "name": "__iter__",
            "location": 569,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InlineTester.__getitem__": {
            "name": "__getitem__",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "InlineTester.__contains__": {
            "name": "__contains__",
            "location": 575,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "InlineTester.__bool__": {
            "name": "__bool__",
            "location": 578,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InlineTester.inner_repr": {
            "name": "inner_repr",
            "location": 581,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test.get_data_dir": {
            "name": "get_data_dir",
            "location": 650,
            "return": [],
            "arguments": {}
        },
        "test.show_python": {
            "name": "show_python",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 659,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three_countfiles": {
            "name": "test_three_countfiles",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_four_show_empty_env": {
            "name": "test_four_show_empty_env",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_environment": {
            "name": "show_environment",
            "location": 742,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.show_fixture_cache_stats": {
            "name": "show_fixture_cache_stats",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "InlineTester.wrap.wrapper": {
            "name": "wrapper",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "InlineTester.precheck.decoration": {
            "name": "decoration",
            "location": 402,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "InlineTester.diagnostic.decoration": {
            "name": "decoration",
            "location": 423,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "InlineTester.runtwice.decoration": {
            "name": "decoration",
            "location": 438,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "InlineTester.fixture.decoration": {
            "name": "decoration",
            "location": 451,
            "return": [],
            "arguments": {
                "function": []
            }
        }
    },
    "CLU-master/clu/testing/__init__.py": {},
    "CLU-master/clu/typespace/namespace.py": {
        "isnamespace": {
            "name": "isnamespace",
            "location": 280,
            "return": [],
            "arguments": {
                "thing": []
            }
        },
        "test": {
            "name": "test",
            "location": 301,
            "return": [],
            "arguments": {}
        },
        "NamespaceRepr.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamespaceRepr.subrepr": {
            "name": "subrepr",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "thing": [],
                "level": []
            }
        },
        "NamespaceRepr.primerepr": {
            "name": "primerepr",
            "location": 48,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "thing": [],
                "level": []
            }
        },
        "NamespaceRepr.repr_BaseNamespace": {
            "name": "repr_BaseNamespace",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "thing": [],
                "level": []
            }
        },
        "NamespaceRepr.repr_SimpleNamespace": {
            "name": "repr_SimpleNamespace",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "thing": [],
                "level": []
            }
        },
        "NamespaceRepr.repr_Namespace": {
            "name": "repr_Namespace",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "thing": [],
                "level": []
            }
        },
        "NamespaceRepr.shortrepr": {
            "name": "shortrepr",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "thing": []
            }
        },
        "NamespaceRepr.fullrepr": {
            "name": "fullrepr",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "thing": [],
                "short": [
                    "bool"
                ]
            }
        },
        "BaseNamespace.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNamespace.__len__": {
            "name": "__len__",
            "location": 133,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNamespace.__iter__": {
            "name": "__iter__",
            "location": 136,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNamespace.__contains__": {
            "name": "__contains__",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BaseNamespace.__getitem__": {
            "name": "__getitem__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BaseNamespace.__missing__": {
            "name": "__missing__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BaseNamespace.__eq__": {
            "name": "__eq__",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseNamespace.__ne__": {
            "name": "__ne__",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseNamespace.__dir__": {
            "name": "__dir__",
            "location": 159,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNamespace.__repr__": {
            "name": "__repr__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseNamespace.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseNamespace.__bytes__": {
            "name": "__bytes__",
            "location": 169,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNamespace.__bool__": {
            "name": "__bool__",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseNamespace.clone": {
            "name": "clone",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ],
                "memo": [
                    "None"
                ]
            }
        },
        "SimpleNamespace.__hash__": {
            "name": "__hash__",
            "location": 189,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.get": {
            "name": "get",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Namespace.pop": {
            "name": "pop",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Namespace.update": {
            "name": "update",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dictish": [
                    "None"
                ]
            }
        },
        "Namespace.__getattr__": {
            "name": "__getattr__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Namespace.__enter__": {
            "name": "__enter__",
            "location": 240,
            "return": [
                "Namespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "Namespace.__exit__": {
            "name": "__exit__",
            "location": 243,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None"
                ],
                "exc_val": [
                    "None"
                ],
                "exc_tb": [
                    "None"
                ]
            }
        },
        "Namespace.__setitem__": {
            "name": "__setitem__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Namespace.__delitem__": {
            "name": "__delitem__",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Namespace.__add__": {
            "name": "__add__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "operand": []
            }
        },
        "Namespace.__radd__": {
            "name": "__radd__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "operand": []
            }
        },
        "Namespace.__iadd__": {
            "name": "__iadd__",
            "location": 270,
            "return": [
                "Namespace"
            ],
            "arguments": {
                "self": [],
                "operand": []
            }
        },
        "test.flat_dict": {
            "name": "flat_dict",
            "location": 306,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test.shorty_repr": {
            "name": "shorty_repr",
            "location": 315,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 320,
            "return": [
                "Namespace"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three": {
            "name": "test_three",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_four": {
            "name": "test_four",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three.MissingNamespace.__missing__": {
            "name": "__missing__",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "CLU-master/clu/typespace/__init__.py": {
        "prepare_types_ns": {
            "name": "prepare_types_ns",
            "location": 18,
            "return": [
                "Namespace"
            ],
            "arguments": {
                "path": [],
                "basepath": []
            }
        },
        "modulize": {
            "name": "modulize",
            "location": 72,
            "return": [],
            "arguments": {
                "name": [],
                "namespace": [],
                "docs": [
                    "None"
                ],
                "path": [
                    "None"
                ],
                "appname": [],
                "basepath": []
            }
        },
        "test": {
            "name": "test",
            "location": 157,
            "return": [],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_three": {
            "name": "test_three",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/clu/typespace/__main__.py": {},
    "CLU-master/clu/version/git_version.py": {
        "are_we_gitted": {
            "name": "are_we_gitted",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "directory": [
                    "None"
                ]
            }
        },
        "git_version_tags": {
            "name": "git_version_tags",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "None"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test.test_one": {
            "name": "test_one",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.test_two": {
            "name": "test_two",
            "location": 53,
            "return": [],
            "arguments": {}
        }
    },
    "CLU-master/clu/version/read_version.py": {
        "read_version": {
            "name": "read_version",
            "location": 42,
            "return": [],
            "arguments": {}
        }
    },
    "CLU-master/clu/version/__init__.py": {
        "intify": {
            "name": "intify",
            "location": 32,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "strify": {
            "name": "strify",
            "location": 37,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "dictify": {
            "name": "dictify",
            "location": 46,
            "return": [],
            "arguments": {
                "arg": []
            }
        },
        "compare_keys": {
            "name": "compare_keys",
            "location": 58,
            "return": [],
            "arguments": {
                "dict1": [],
                "dict2": []
            }
        },
        "comparator": {
            "name": "comparator",
            "location": 84,
            "return": [],
            "arguments": {
                "operator": []
            }
        },
        "cmp": {
            "name": "cmp",
            "location": 7,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "comparator.wrapper": {
            "name": "wrapper",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VersionInfo.from_string": {
            "name": "from_string",
            "location": 113,
            "return": [],
            "arguments": {
                "cls": [],
                "version_string": []
            }
        },
        "VersionInfo.from_dict": {
            "name": "from_dict",
            "location": 121,
            "return": [],
            "arguments": {
                "cls": [],
                "version_dict": []
            }
        },
        "VersionInfo.to_string": {
            "name": "to_string",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.to_dict": {
            "name": "to_dict",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.to_tuple": {
            "name": "to_tuple",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.to_packaging_version": {
            "name": "to_packaging_version",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.__new__": {
            "name": "__new__",
            "location": 161,
            "return": [],
            "arguments": {
                "cls": [],
                "from_value": [],
                "major": [],
                "minor": [],
                "patch": [],
                "pre": [],
                "build": []
            }
        },
        "VersionInfo.__str__": {
            "name": "__str__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.__repr__": {
            "name": "__repr__",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.__bytes__": {
            "name": "__bytes__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.__hash__": {
            "name": "__hash__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.__bool__": {
            "name": "__bool__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.__eq__": {
            "name": "__eq__",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VersionInfo.__ne__": {
            "name": "__ne__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VersionInfo.__lt__": {
            "name": "__lt__",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VersionInfo.__le__": {
            "name": "__le__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VersionInfo.__gt__": {
            "name": "__gt__",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "VersionInfo.__ge__": {
            "name": "__ge__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "CLU-master/clu/version/__main__.py": {},
    "CLU-master/docs/conf.py": {},
    "CLU-master/scratch/direnv_transformed_env.py": {},
    "CLU-master/tests/test_abstract.py": {
        "strings": {
            "name": "strings",
            "location": 14,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text,typing.Text,typing.Text]]]"
            ],
            "arguments": {}
        },
        "capstrings": {
            "name": "capstrings",
            "location": 18,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text,typing.Text]]]"
            ],
            "arguments": {}
        },
        "TestAbstractMetas.test_metaclass_Slotted": {
            "name": "test_metaclass_Slotted",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strings": []
            }
        },
        "TestAbstractMetas.test_metaclass_NonSlotted": {
            "name": "test_metaclass_NonSlotted",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractMetas.test_metaclass_BasePath": {
            "name": "test_metaclass_BasePath",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestAbstractABCs.test_abc_Unhashable": {
            "name": "test_abc_Unhashable",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractABCs.test_abc_Cloneable": {
            "name": "test_abc_Cloneable",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractABCs.test_abc_ReprWrapper": {
            "name": "test_abc_ReprWrapper",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractABCs.test_abc_Format": {
            "name": "test_abc_Format",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capstrings": []
            }
        },
        "TestAbstractABCs.test_abc_AppName": {
            "name": "test_abc_AppName",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractABCs.test_abc_ManagedContext": {
            "name": "test_abc_ManagedContext",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractReprClasses.test_repr_SlottedRepr": {
            "name": "test_repr_SlottedRepr",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractReprClasses.test_repr_MappingViewRepr": {
            "name": "test_repr_MappingViewRepr",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestAbstractFormats.test_format_SlottedFormat": {
            "name": "test_format_SlottedFormat",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capstrings": []
            }
        },
        "TestAbstractDescriptors.test_descriptor_Descriptor": {
            "name": "test_descriptor_Descriptor",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractDescriptors.test_descriptor_ValueDescriptor": {
            "name": "test_descriptor_ValueDescriptor",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [],
                "consts": []
            }
        },
        "TestAbstractABCs.test_abc_Unhashable.Ancestor.__hash__": {
            "name": "__hash__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractABCs.test_abc_Unhashable.HashMe.__hash__": {
            "name": "__hash__",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractABCs.test_abc_Unhashable.DontHashMe.__hash__": {
            "name": "__hash__",
            "location": 125,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractABCs.test_abc_Cloneable.YoDogg.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractABCs.test_abc_Cloneable.YoDogg.__eq__": {
            "name": "__eq__",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TestAbstractABCs.test_abc_Cloneable.YoDogg.clone": {
            "name": "clone",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "deep": [
                    "bool"
                ],
                "memo": [
                    "None"
                ]
            }
        },
        "TestAbstractABCs.test_abc_ReprWrapper.YoDogg.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractABCs.test_abc_ReprWrapper.YoDogg.__eq__": {
            "name": "__eq__",
            "location": 195,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TestAbstractABCs.test_abc_ReprWrapper.YoDogg.inner_repr": {
            "name": "inner_repr",
            "location": 200,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractABCs.test_abc_Format.UpperCaser.render": {
            "name": "render",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "TestAbstractABCs.test_abc_Format.CaseFolder.render": {
            "name": "render",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "TestAbstractABCs.test_abc_ManagedContext.Managed.setup": {
            "name": "setup",
            "location": 259,
            "return": [
                "Managed"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractABCs.test_abc_ManagedContext.Managed.teardown": {
            "name": "teardown",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractReprClasses.test_repr_SlottedRepr.YoDogg.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractReprClasses.test_repr_SlottedRepr.YoDogg.__eq__": {
            "name": "__eq__",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TestAbstractFormats.test_format_SlottedFormat.HTMLTagger.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag_name": []
            }
        },
        "TestAbstractFormats.test_format_SlottedFormat.HTMLTagger.render": {
            "name": "render",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "TestAbstractDescriptors.test_descriptor_ValueDescriptor.EnvironmentName.__init__": {
            "name": "__init__",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "default": []
            }
        },
        "TestAbstractDescriptors.test_descriptor_ValueDescriptor.EnvironmentName.__set_name__": {
            "name": "__set_name__",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [],
                "name": []
            }
        },
        "TestAbstractDescriptors.test_descriptor_ValueDescriptor.EnvironmentName.__get__": {
            "name": "__get__",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "None"
                ],
                "cls": [
                    "None"
                ]
            }
        },
        "TestAbstractDescriptors.test_descriptor_ValueDescriptor.EnvironmentName.__repr__": {
            "name": "__repr__",
            "location": 392,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractDescriptors.test_descriptor_ValueDescriptor.Slotted.__init__": {
            "name": "__init__",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractDescriptors.test_descriptor_ValueDescriptor.Dictish.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_all.py": {
        "TestAll.test_all_inline_tests": {
            "name": "test_all_inline_tests",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_boilerplate.py": {
        "TestBoilerplate.test_boilerplate_function": {
            "name": "test_boilerplate_function",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoilerplate.test_boilerplate_code": {
            "name": "test_boilerplate_code",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": [],
                "environment": [],
                "testdir": []
            }
        }
    },
    "CLU-master/tests/test_config.py": {
        "TestConfigKeyMaps.test_nested_and_flat_KeyMaps": {
            "name": "test_nested_and_flat_KeyMaps",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConfigKeyMaps.test_env_get_KeyMaps": {
            "name": "test_env_get_KeyMaps",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "environment": [],
                "consts": []
            }
        },
        "TestConfigKeyMaps.test_env_set_KeyMaps": {
            "name": "test_env_set_KeyMaps",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "environment": [],
                "consts": []
            }
        },
        "TestConfigKeyMaps.test_toml_and_file_direct": {
            "name": "test_toml_and_file_direct",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestConfigKeyMaps.test_toml_and_file_search": {
            "name": "test_toml_and_file_search",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "dirname": [],
                "environment": []
            }
        },
        "TestConfig.test_package_schema_subclasses_Env": {
            "name": "test_package_schema_subclasses_Env",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "dirname": [],
                "environment": []
            }
        },
        "TestConfig.test_package_schema": {
            "name": "test_package_schema",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestConfig.test_nested_and_flat": {
            "name": "test_nested_and_flat",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_NamespacedFieldManager_module_getattr_instancing": {
            "name": "test_NamespacedFieldManager_module_getattr_instancing",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_env_get": {
            "name": "test_env_get",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "environment": []
            }
        },
        "TestConfig.test_env_set": {
            "name": "test_env_set",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "environment": []
            }
        }
    },
    "CLU-master/tests/test_config_abc.py": {
        "TestConfigABC.test_FlatOrderedSet_equality_operator": {
            "name": "test_FlatOrderedSet_equality_operator",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigABC.test_FlatOrderedSet_fancy_indexing": {
            "name": "test_FlatOrderedSet_fancy_indexing",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfigABC.test_FlatOrderedSet_repr": {
            "name": "test_FlatOrderedSet_repr",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_csv.py": {
        "TestCSV.test_pad_csv": {
            "name": "test_pad_csv",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCSV.test_max_segments": {
            "name": "test_max_segments",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCSV.test_pad_line": {
            "name": "test_pad_line",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_dicts.py": {
        "TestDicts.arbitrary": {
            "name": "arbitrary",
            "location": 13,
            "return": [
                "typing.Generator[dict[typing.Union[typing.Text,typing.Text,typing.Text,typing.Text], typing.Union[typing.Text,typing.Text,typing.Text,typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDicts.fsdata": {
            "name": "fsdata",
            "location": 23,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestDicts.test_chainmap": {
            "name": "test_chainmap",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "fsdata": [],
                "environment": []
            }
        },
        "TestDicts.test_chainmap_shallow_clone": {
            "name": "test_chainmap_shallow_clone",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "fsdata": [],
                "environment": []
            }
        },
        "TestDicts.test_chainmap_deep_clone": {
            "name": "test_chainmap_deep_clone",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "fsdata": [],
                "environment": []
            }
        },
        "TestDicts.test_chainmap_equality_comparisons": {
            "name": "test_chainmap_equality_comparisons",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": []
            }
        },
        "TestDicts.test_chainmap_compatibilty_stdlib_collections_chainmap": {
            "name": "test_chainmap_compatibilty_stdlib_collections_chainmap",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": []
            }
        },
        "TestDicts.test_ordered_mapping_views": {
            "name": "test_ordered_mapping_views",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": [],
                "fsdata": []
            }
        }
    },
    "CLU-master/tests/test_dispatch.py": {
        "TestDispatch.test_exithandle": {
            "name": "test_exithandle",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": [],
                "environment": [],
                "testdir": []
            }
        }
    },
    "CLU-master/tests/test_enum_aliases.py": {
        "TestEnumAliases.test_alias_basic_enum": {
            "name": "test_alias_basic_enum",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnumAliases.test_aliasing_enum_metaclass": {
            "name": "test_aliasing_enum_metaclass",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnumAliases.test_aliasing_enum_subclass": {
            "name": "test_aliasing_enum_subclass",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_exporting.py": {
        "TestExporting.test_thismodule": {
            "name": "test_thismodule",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestExporting.test_exporterbase_subclass_package": {
            "name": "test_exporterbase_subclass_package",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestExporting.test_exporterbase_subclass": {
            "name": "test_exporterbase_subclass",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestExporting.test_exporter_instance_registry": {
            "name": "test_exporter_instance_registry",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clumods": [],
                "consts": []
            }
        },
        "TestExporting.test_combine_real_world_exporters_2": {
            "name": "test_combine_real_world_exporters_2",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExporting.test_combine_real_world_exporters_1": {
            "name": "test_combine_real_world_exporters_1",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExporting.test_combine_real_world_exporters_0": {
            "name": "test_combine_real_world_exporters_0",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExporting.test_exporter_export_constants": {
            "name": "test_exporter_export_constants",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExporting.test_exporter_export_lambdas_no_name_provided": {
            "name": "test_exporter_export_lambdas_no_name_provided",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExporting.test_exporter_context_manager_export_lambdas": {
            "name": "test_exporter_context_manager_export_lambdas",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExporting.test_exporter_export_lambdas": {
            "name": "test_exporter_export_lambdas",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExporting.test_exporter_context_manager_export_functions": {
            "name": "test_exporter_context_manager_export_functions",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExporting.test_exporter_export_functions": {
            "name": "test_exporter_export_functions",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExporting.test_exporter_export_wrapped_functions": {
            "name": "test_exporter_export_wrapped_functions",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExporting.test_exporterbase_subclass.youlike": {
            "name": "youlike",
            "location": 77,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "TestExporting.test_exporter_export_functions.yo_dogg": {
            "name": "yo_dogg",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestExporting.test_exporter_export_functions.i_heard": {
            "name": "i_heard",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestExporting.test_exporter_export_wrapped_functions.yo_dogg": {
            "name": "yo_dogg",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestExporting.test_exporter_export_wrapped_functions.i_heard": {
            "name": "i_heard",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestExporting.test_exporter_context_manager_export_functions.yo_dogg": {
            "name": "yo_dogg",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestExporting.test_exporter_context_manager_export_functions.i_heard": {
            "name": "i_heard",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CLU-master/tests/test_extending.py": {
        "TestExtending.test_doubledutch": {
            "name": "test_doubledutch",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtending.test_extend_pair_pairtype": {
            "name": "test_extend_pair_pairtype",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtending.test_pairmro0": {
            "name": "test_pairmro0",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtending.test_pairmro1": {
            "name": "test_pairmro1",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtending.test_extensible_metaclass": {
            "name": "test_extensible_metaclass",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": [],
                "consts": [
                    "str"
                ]
            }
        },
        "TestExtending.test_doubledutch.yodogg": {
            "name": "yodogg",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "TestExtending.test_extend_pair_pairtype.__extend__.ratio": {
            "name": "ratio",
            "location": 39,
            "return": [],
            "arguments": {
                "xy": []
            }
        },
        "TestExtending.test_extend_pair_pairtype.__extend__.pack": {
            "name": "pack",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "tup": []
            }
        },
        "TestExtending.test_extensible_metaclass.X.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None"
                ]
            }
        },
        "TestExtending.test_extensible_metaclass.X.name": {
            "name": "name",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExtending.test_extensible_metaclass.__extend__.__fspath__": {
            "name": "__fspath__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestExtending.test_extensible_metaclass.__extend__.path": {
            "name": "path",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_fs_abc.py": {
        "TestFsMisc.test_TypeLocker": {
            "name": "test_TypeLocker",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsMisc.test_BaseFSName_concrete_subclass": {
            "name": "test_BaseFSName_concrete_subclass",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": [],
                "temporarydir": [],
                "tmp": []
            }
        },
        "TestFsMisc.test_BaseFSName_concrete_subclass.TmpFSName.name": {
            "name": "name",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_fs_appdirectories.py": {
        "TestFsAppdirectories.arbitrary": {
            "name": "arbitrary",
            "location": 25,
            "return": [
                "typing.Generator[dict[typing.Union[typing.Text,typing.Text,typing.Text], typing.Union[typing.Text,typing.Text,typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsAppdirectories.test_yes_version_no_author": {
            "name": "test_yes_version_no_author",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "system": [],
                "consts": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_yes_version_yes_author": {
            "name": "test_yes_version_yes_author",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "system": [],
                "consts": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_no_version_no_author": {
            "name": "test_no_version_no_author",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "system": [],
                "consts": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_no_version_yes_author": {
            "name": "test_no_version_yes_author",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "system": [],
                "consts": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_clu_appdirs_versioned": {
            "name": "test_clu_appdirs_versioned",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "system": [],
                "consts": [],
                "environment": [],
                "cluversion": []
            }
        },
        "TestFsAppdirectories.test_clu_appdirs_unversioned": {
            "name": "test_clu_appdirs_unversioned",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "system": [],
                "consts": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_System_from_string_unknown": {
            "name": "test_System_from_string_unknown",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsAppdirectories.test_CSIDL_names": {
            "name": "test_CSIDL_names",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsAppdirectories.test_LINUX_yes_version_no_author": {
            "name": "test_LINUX_yes_version_no_author",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_LINUX_yes_version_yes_author": {
            "name": "test_LINUX_yes_version_yes_author",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_LINUX_no_version_no_author": {
            "name": "test_LINUX_no_version_no_author",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_LINUX_no_version_yes_author": {
            "name": "test_LINUX_no_version_yes_author",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_LINUX2_yes_version_no_author": {
            "name": "test_LINUX2_yes_version_no_author",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_LINUX2_yes_version_yes_author": {
            "name": "test_LINUX2_yes_version_yes_author",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_LINUX2_no_version_no_author": {
            "name": "test_LINUX2_no_version_no_author",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_LINUX2_no_version_yes_author": {
            "name": "test_LINUX2_no_version_yes_author",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_DARWIN_yes_version_no_author": {
            "name": "test_DARWIN_yes_version_no_author",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "environment": [],
                "consts": []
            }
        },
        "TestFsAppdirectories.test_DARWIN_yes_version_yes_author": {
            "name": "test_DARWIN_yes_version_yes_author",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "environment": [],
                "consts": []
            }
        },
        "TestFsAppdirectories.test_DARWIN_no_version_no_author": {
            "name": "test_DARWIN_no_version_no_author",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "environment": [],
                "consts": []
            }
        },
        "TestFsAppdirectories.test_DARWIN_no_version_yes_author": {
            "name": "test_DARWIN_no_version_yes_author",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": [],
                "environment": [],
                "consts": []
            }
        },
        "TestFsAppdirectories.test_WIN32_yes_version_no_author": {
            "name": "test_WIN32_yes_version_no_author",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_WIN32_yes_version_yes_author": {
            "name": "test_WIN32_yes_version_yes_author",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_WIN32_no_version_no_author": {
            "name": "test_WIN32_no_version_no_author",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": []
            }
        },
        "TestFsAppdirectories.test_WIN32_no_version_yes_author": {
            "name": "test_WIN32_no_version_yes_author",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": []
            }
        }
    },
    "CLU-master/tests/test_fs_filesystem.py": {
        "TestFsFilesystem.test_walkback": {
            "name": "test_walkback",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": [],
                "dirname": []
            }
        },
        "TestFsFilesystem.test_suffixes": {
            "name": "test_suffixes",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestFsFilesystem.test_suffix_histogram": {
            "name": "test_suffix_histogram",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestFsFilesystem.test_flatten": {
            "name": "test_flatten",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datadir": [],
                "temporarydir": []
            }
        },
        "TestFsFilesystem.test_flatten_with_suffix_filter": {
            "name": "test_flatten_with_suffix_filter",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datadir": [],
                "temporarydir": []
            }
        },
        "TestFsFilesystem.test_flatten_with_new_suffix": {
            "name": "test_flatten_with_new_suffix",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datadir": [],
                "temporarydir": []
            }
        },
        "TestFsFilesystem.test_flatten_with_new_suffix_and_suffix_filter": {
            "name": "test_flatten_with_new_suffix_and_suffix_filter",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "datadir": [],
                "temporarydir": []
            }
        },
        "TestFsFilesystem.test_zip_archive_temporaryname": {
            "name": "test_zip_archive_temporaryname",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": [],
                "temporaryname": []
            }
        },
        "TestFsFilesystem.test_zip_archive": {
            "name": "test_zip_archive",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestFsFilesystem.test_script_path": {
            "name": "test_script_path",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsFilesystem.test_rm_rf": {
            "name": "test_rm_rf",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temporarydir": []
            }
        },
        "TestFsFilesystem.test_which_and_back_tick": {
            "name": "test_which_and_back_tick",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsFilesystem.test_write_to_path": {
            "name": "test_write_to_path",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temporarydir": []
            }
        },
        "TestFsFilesystem.test_ensure_path_is_valid": {
            "name": "test_ensure_path_is_valid",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temporarydir": []
            }
        },
        "TestFsFilesystem.test_TemporaryName": {
            "name": "test_TemporaryName",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsFilesystem.test_wd": {
            "name": "test_wd",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsFilesystem.test_cd": {
            "name": "test_cd",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsFilesystem.test_td": {
            "name": "test_td",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsFilesystem.test_hd": {
            "name": "test_hd",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsFilesystem.test_TemporaryDirectory": {
            "name": "test_TemporaryDirectory",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_fs_misc.py": {
        "TestFsMisc.test_grouped": {
            "name": "test_grouped",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsMisc.test_temporary": {
            "name": "test_temporary",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temporarydir": []
            }
        },
        "TestFsMisc.test_modeflags": {
            "name": "test_modeflags",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestFsMisc.test_gethomedir": {
            "name": "test_gethomedir",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": []
            }
        },
        "TestFsMisc.test_re_matcher": {
            "name": "test_re_matcher",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsMisc.test_re_searcher": {
            "name": "test_re_searcher",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsMisc.test_re_suffix": {
            "name": "test_re_suffix",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsMisc.test_suffix_searcher": {
            "name": "test_suffix_searcher",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestFsMisc.test_re_excluder": {
            "name": "test_re_excluder",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsMisc.test_swapext": {
            "name": "test_swapext",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsMisc.test_filesize_samesize": {
            "name": "test_filesize_samesize",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": [],
                "temporaryname": []
            }
        },
        "TestFsMisc.test_differentfile_differentsize_samesize": {
            "name": "test_differentfile_differentsize_samesize",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": [],
                "temporaryname": []
            }
        },
        "TestFsMisc.test_u8bytes_and_u8str": {
            "name": "test_u8bytes_and_u8str",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsMisc.test_umask_values": {
            "name": "test_umask_values",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFsMisc.test_win32_longpath": {
            "name": "test_win32_longpath",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_importing.py": {
        "TestImporting.test_modulealias": {
            "name": "test_modulealias",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_modulealias_respecialization_reprs": {
            "name": "test_modulealias_respecialization_reprs",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_proxy_module_for_reals": {
            "name": "test_proxy_module_for_reals",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestImporting.test_module_dict_proxy_idea": {
            "name": "test_module_dict_proxy_idea",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestImporting.test_module_export_within_execute": {
            "name": "test_module_export_within_execute",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestImporting.test_basic_module": {
            "name": "test_basic_module",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestImporting.test_derived_modules": {
            "name": "test_derived_modules",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_derived_module_methods": {
            "name": "test_derived_module_methods",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_polymertype_cache_methods": {
            "name": "test_polymertype_cache_methods",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestImporting.test_installed_appnames": {
            "name": "test_installed_appnames",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestImporting.test_curiously_recurring_modulebase_subtypes": {
            "name": "test_curiously_recurring_modulebase_subtypes",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestImporting.test_finder_and_loader_methods": {
            "name": "test_finder_and_loader_methods",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_derived_import": {
            "name": "test_derived_import",
            "location": 586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_initialize_types": {
            "name": "test_initialize_types",
            "location": 626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestImporting.test_derived_import_with_export": {
            "name": "test_derived_import_with_export",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestImporting.test_derived_module_methods.ThisOtherModule.yodogg": {
            "name": "yodogg",
            "location": 363,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_derived_module_methods.ThisDerivedModule.yodogg": {
            "name": "yodogg",
            "location": 367,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_derived_module_methods.ThisDerivedOther.yodogg": {
            "name": "yodogg",
            "location": 371,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_module_dict_proxy_idea.PutativeProxyModule.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestImporting.test_module_dict_proxy_idea.PutativeProxyModule.__execute__": {
            "name": "__execute__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_module_dict_proxy_idea.PutativeProxyModule.__getattr__": {
            "name": "__getattr__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TestImporting.test_module_export_within_execute.DerivedWithExecute.iheard": {
            "name": "iheard",
            "location": 254,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_module_export_within_execute.DerivedWithExecute.youlike": {
            "name": "youlike",
            "location": 257,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_module_export_within_execute.DerivedWithExecute.unexported": {
            "name": "unexported",
            "location": 260,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_module_export_within_execute.DerivedWithExecute.__execute__": {
            "name": "__execute__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_derived_import.Derived.iheard": {
            "name": "iheard",
            "location": 597,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_initialize_types.Derived.iheard": {
            "name": "iheard",
            "location": 645,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_derived_import_with_export.AnotherDerived.iheard": {
            "name": "iheard",
            "location": 681,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_derived_import_with_export.AnotherDerived.youlike": {
            "name": "youlike",
            "location": 685,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_derived_import_with_export.AnotherDerived.unexported": {
            "name": "unexported",
            "location": 688,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImporting.test_module_dict_proxy_idea.PutativeProxyModule.__init__.add_targets": {
            "name": "add_targets",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_keyvalue.py": {
        "TestKeyValue.test_keyvalue_cluinterface_basics": {
            "name": "test_keyvalue_cluinterface_basics",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "str",
                    "typing.Mapping"
                ],
                "temporarydir": [
                    "str"
                ]
            }
        },
        "TestKeyValue.test_keyvalue_cluinterface_long_text": {
            "name": "test_keyvalue_cluinterface_long_text",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "typing.Type"
                ],
                "temporarydir": [],
                "greektext": []
            }
        }
    },
    "CLU-master/tests/test_mathematics.py": {
        "TestMathematics.test_numpy_type_member_predicate": {
            "name": "test_numpy_type_member_predicate",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMathematics.test_sigma_lowercase_sum_alias": {
            "name": "test_sigma_lowercase_sum_alias",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMathematics.test_sigma_uppercase_reduce_alias": {
            "name": "test_sigma_uppercase_reduce_alias",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMathematics.test_isdtype_predicate": {
            "name": "test_isdtype_predicate",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMathematics.test_uint8_clamp_basics": {
            "name": "test_uint8_clamp_basics",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMathematics.test_uint8_clamp_functionality": {
            "name": "test_uint8_clamp_functionality",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_naming.py": {
        "TestNaming.test_dotpath_join": {
            "name": "test_dotpath_join",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNaming.test_dotpath_split": {
            "name": "test_dotpath_split",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNaming.test_suffix": {
            "name": "test_suffix",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNaming.test_renamer": {
            "name": "test_renamer",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestNaming.test_duplicate": {
            "name": "test_duplicate",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNaming.test_rename_legacy_callable": {
            "name": "test_rename_legacy_callable",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNaming.test_module_inspectors_0": {
            "name": "test_module_inspectors_0",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNaming.test_module_inspectors_1": {
            "name": "test_module_inspectors_1",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNaming.test_module_inspectors_2": {
            "name": "test_module_inspectors_2",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNaming.test_dotpath_to_prefix_and_path_to_prefix": {
            "name": "test_dotpath_to_prefix_and_path_to_prefix",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNaming.test_qualified_name_instances": {
            "name": "test_qualified_name_instances",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNaming.test_qualified_name_typespace": {
            "name": "test_qualified_name_typespace",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNaming.test_qualified_import": {
            "name": "test_qualified_import",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNaming.test_moduleof_failure_rate": {
            "name": "test_moduleof_failure_rate",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clumods": []
            }
        },
        "TestNaming.test_duplicate.no_dogg": {
            "name": "no_dogg",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "yo": [],
                "dogg": [
                    "typing.Text"
                ]
            }
        },
        "TestNaming.test_duplicate.oh_dogg": {
            "name": "oh_dogg",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "yo": [],
                "dogg": [
                    "typing.Text"
                ]
            }
        },
        "TestNaming.test_duplicate.DoggNamespaceEncapsulation.bro_dogg": {
            "name": "bro_dogg",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "yo": [],
                "dogg": [
                    "typing.Text"
                ]
            }
        }
    },
    "CLU-master/tests/test_predicates.py": {
        "TestPredicates.arbitrary": {
            "name": "arbitrary",
            "location": 11,
            "return": [
                "typing.Generator[tuple[typing.Union[dict[typing.Text, typing.Text],dict[typing.Text, typing.Text]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_finditem_finditems": {
            "name": "test_finditem_finditems",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": []
            }
        },
        "TestPredicates.test_hasitem_noitem_anyitems_allitems": {
            "name": "test_hasitem_noitem_anyitems_allitems",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": []
            }
        },
        "TestPredicates.test_case_sort_predicates": {
            "name": "test_case_sort_predicates",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestPredicates.test_try_items_and_item_search": {
            "name": "test_try_items_and_item_search",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arbitrary": []
            }
        },
        "TestPredicates.test_ancestral_and_ancestral_union": {
            "name": "test_ancestral_and_ancestral_union",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_union": {
            "name": "test_union",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_negate": {
            "name": "test_negate",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_reverse": {
            "name": "test_reverse",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_itervariadic_decorator": {
            "name": "test_itervariadic_decorator",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_mro_and_rmro": {
            "name": "test_mro_and_rmro",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_unwrap": {
            "name": "test_unwrap",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_origin": {
            "name": "test_origin",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_isancestor_and_isorigin": {
            "name": "test_isancestor_and_isorigin",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_newtype": {
            "name": "test_newtype",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_static_accessors": {
            "name": "test_static_accessors",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [],
                "consts": []
            }
        },
        "TestPredicates.test_resolve_accessor": {
            "name": "test_resolve_accessor",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_collator_based_accessors": {
            "name": "test_collator_based_accessors",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_acquirer_based_accessors": {
            "name": "test_acquirer_based_accessors",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_utility_helpers_for_builtin_predicates": {
            "name": "test_utility_helpers_for_builtin_predicates",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_utility_helpers_for_builtin_containers": {
            "name": "test_utility_helpers_for_builtin_containers",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_slot_aware_attribute_checkers": {
            "name": "test_slot_aware_attribute_checkers",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_applyto": {
            "name": "test_applyto",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        },
        "TestPredicates.test_applyto_predicate_logicals": {
            "name": "test_applyto_predicate_logicals",
            "location": 862,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_applyto_internal_lambdas": {
            "name": "test_applyto_internal_lambdas",
            "location": 930,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_enum_predicates": {
            "name": "test_enum_predicates",
            "location": 1000,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_getattr_shortcuts": {
            "name": "test_getattr_shortcuts",
            "location": 1026,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_nops": {
            "name": "test_nops",
            "location": 1071,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_ismergeable": {
            "name": "test_ismergeable",
            "location": 1092,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_isiterable": {
            "name": "test_isiterable",
            "location": 1118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_haslength": {
            "name": "test_haslength",
            "location": 1144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_hasattr_shortcuts": {
            "name": "test_hasattr_shortcuts",
            "location": 1171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_class_predicates": {
            "name": "test_class_predicates",
            "location": 1216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_attr_accessor": {
            "name": "test_attr_accessor",
            "location": 1268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_negate.is_even": {
            "name": "is_even",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "integer": []
            }
        },
        "TestPredicates.test_unwrap.yodogg": {
            "name": "yodogg",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "TestPredicates.test_unwrap.not_wrapped": {
            "name": "not_wrapped",
            "location": 254,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "TestPredicates.test_static_accessors.EnvironmentName.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None"
                ],
                "default": [
                    "None"
                ]
            }
        },
        "TestPredicates.test_static_accessors.EnvironmentName.__set_name__": {
            "name": "__set_name__",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [],
                "name": []
            }
        },
        "TestPredicates.test_static_accessors.EnvironmentName.__get__": {
            "name": "__get__",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "None"
                ],
                "cls": [
                    "None"
                ]
            }
        },
        "TestPredicates.test_static_accessors.EnvironmentName.__repr__": {
            "name": "__repr__",
            "location": 406,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_static_accessors.Slotted.__init__": {
            "name": "__init__",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_static_accessors.Dictish.__init__": {
            "name": "__init__",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_utility_helpers_for_builtin_predicates.Falsified.__bool__": {
            "name": "__bool__",
            "location": 676,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_slot_aware_attribute_checkers.Slotted.__init__": {
            "name": "__init__",
            "location": 723,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_slot_aware_attribute_checkers.Dictish.__init__": {
            "name": "__init__",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_slot_aware_attribute_checkers.DerivedPlusSomeSlots.__init__": {
            "name": "__init__",
            "location": 777,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPredicates.test_applyto_predicate_logicals.Slotted.__init__": {
            "name": "__init__",
            "location": 872,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_repl_columnize.py": {
        "TestColumize.test_format_percenter": {
            "name": "test_format_percenter",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "TestColumize.test_format_strmethod": {
            "name": "test_format_strmethod",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "character": []
            }
        },
        "TestColumize.test_columnize_basic": {
            "name": "test_columnize_basic",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumize.test_columnize_intermediate": {
            "name": "test_columnize_intermediate",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumize.test_columnize_format_percenter": {
            "name": "test_columnize_format_percenter",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumize.test_columnize_line_prefix": {
            "name": "test_columnize_line_prefix",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumize.test_columnize_line_prefix_just_wide_enough": {
            "name": "test_columnize_line_prefix_just_wide_enough",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumize.test_computed_display_width_environment_COLUMNS": {
            "name": "test_computed_display_width_environment_COLUMNS",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [],
                "environment": []
            }
        },
        "TestColumize._test_errors": {
            "name": "_test_errors",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_repl_modules.py": {
        "TestReplModules.test_compare_module_lookups_for_all_things_no_args": {
            "name": "test_compare_module_lookups_for_all_things_no_args",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReplModules.test_compare_module_lookups_for_all_things_variadic_args": {
            "name": "test_compare_module_lookups_for_all_things_variadic_args",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReplModules.test_modulemap": {
            "name": "test_modulemap",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modulename": []
            }
        },
        "TestReplModules.test_modulemap_error_conditions": {
            "name": "test_modulemap_error_conditions",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        }
    },
    "CLU-master/tests/test_repr.py": {
        "TestRepr.test_strfield": {
            "name": "test_strfield",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_chop_instance_repr": {
            "name": "test_chop_instance_repr",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": [],
                "consts": []
            }
        },
        "TestRepr.test_strfields": {
            "name": "test_strfields",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_strfields_slotted_class": {
            "name": "test_strfields_slotted_class",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_stringify_directory_instance": {
            "name": "test_stringify_directory_instance",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirname": []
            }
        },
        "TestRepr.test_stringify": {
            "name": "test_stringify",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_stringify_slotted_class": {
            "name": "test_stringify_slotted_class",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_repr_lambdas": {
            "name": "test_repr_lambdas",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_strfields.Thingy.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_strfields.Thingy.youlike": {
            "name": "youlike",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_strfields.Thingy.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_strfields_slotted_class.Thingy.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_strfields_slotted_class.Thingy.__repr__": {
            "name": "__repr__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_stringify.Thingy.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_stringify.Thingy.youlike": {
            "name": "youlike",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_stringify.Thingy.__repr__": {
            "name": "__repr__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_stringify_slotted_class.Thingy.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepr.test_stringify_slotted_class.Thingy.__repr__": {
            "name": "__repr__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_scripts_repl.py": {
        "TestScriptsREPL.test_repl_module": {
            "name": "test_repl_module",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": [],
                "environment": [],
                "testdir": []
            }
        },
        "TestScriptsREPL.test_repl_explain": {
            "name": "test_repl_explain",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modulename": []
            }
        },
        "TestScriptsREPL.test_repl_module_export": {
            "name": "test_repl_module_export",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": [],
                "modulename": []
            }
        },
        "TestScriptsREPL.test_repl_star_export": {
            "name": "test_repl_star_export",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modulename": []
            }
        }
    },
    "CLU-master/tests/test_typespace_namespace.py": {
        "TestNamespace.test_implicit_recursive_namespaces": {
            "name": "test_implicit_recursive_namespaces",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNamespace.test_namespace_subclass_missing": {
            "name": "test_namespace_subclass_missing",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNamespace.test_dict_and_namespace_merge": {
            "name": "test_dict_and_namespace_merge",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNamespace.test_namespace_subclass_missing.MissingNamespace.__missing__": {
            "name": "__missing__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "CLU-master/tests/test_typology.py": {
        "TestTypology.test_iterlen": {
            "name": "test_iterlen",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypology.test_metatypelists": {
            "name": "test_metatypelists",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypology.test_isslottedtype_isextensibletype": {
            "name": "test_isslottedtype_isextensibletype",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypology.test_metaclasscheck_isabclist": {
            "name": "test_metaclasscheck_isabclist",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypology.test_samelength_differentlength_and_isunique": {
            "name": "test_samelength_differentlength_and_isunique",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypology.test_lambda_double_uppercase_lambda_double_lowercase_lambda_and_iscallable": {
            "name": "test_lambda_double_uppercase_lambda_double_lowercase_lambda_and_iscallable",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypology.test_subclasscheck": {
            "name": "test_subclasscheck",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypology.test_boolean_predicates": {
            "name": "test_boolean_predicates",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypology.test_numpy_predicates": {
            "name": "test_numpy_predicates",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypology.test_lambda_double_uppercase_lambda_double_lowercase_lambda_and_iscallable.function_def": {
            "name": "function_def",
            "location": 95,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "TestTypology.test_lambda_double_uppercase_lambda_double_lowercase_lambda_and_iscallable.function_class.__call__": {
            "name": "__call__",
            "location": 102,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "CLU-master/tests/test_version.py": {
        "TestVersion.test_print_version": {
            "name": "test_print_version",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluversion": []
            }
        },
        "TestVersion.test_git_version_function": {
            "name": "test_git_version_function",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluversion": [],
                "gitrun": []
            }
        },
        "TestVersion.test_are_we_gitted_function": {
            "name": "test_are_we_gitted_function",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gitrun": []
            }
        },
        "TestVersion.test_cluversion_and_VersionInfo": {
            "name": "test_cluversion_and_VersionInfo",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": [],
                "cluversion": []
            }
        },
        "TestVersion.test_VersionInfo": {
            "name": "test_VersionInfo",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consts": []
            }
        }
    },
    "CLU-master/tests/__init__.py": {},
    "CLU-master/tests/yodogg/__init__.py": {},
    "CLU-master/tests/yodogg/yodogg/config.py": {},
    "CLU-master/tests/yodogg/yodogg/exporting.py": {
        "youlike": {
            "name": "youlike",
            "location": 19,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "CLU-master/tests/yodogg/yodogg/iheard.py": {
        "youlike": {
            "name": "youlike",
            "location": 10,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "CLU-master/tests/yodogg/yodogg/__init__.py": {}
}
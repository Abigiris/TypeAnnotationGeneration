{
    "CodeGra.fs-master/build.py": {
        "pyinstaller": {
            "name": "pyinstaller",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "download_file": {
            "name": "download_file",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict[, ]"
                ],
                "dest": [
                    "str"
                ]
            }
        },
        "npm": {
            "name": "npm",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "str"
                ]
            }
        },
        "make": {
            "name": "make",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CodeGra.fs-master/setup.py": {},
    "CodeGra.fs-master/.scripts/get_os.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CodeGra.fs-master/.scripts/make_install_linux_script.py": {
        "main": {
            "name": "main",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "CodeGra.fs-master/codegra_fs/api_consumer.py": {
        "json_loads": {
            "name": "json_loads",
            "location": 11,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "print_usage": {
            "name": "print_usage",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "recv": {
            "name": "recv",
            "location": 32,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "is_file": {
            "name": "is_file",
            "location": 44,
            "return": [],
            "arguments": {
                "s": [],
                "file": []
            }
        },
        "get_comments": {
            "name": "get_comments",
            "location": 59,
            "return": [],
            "arguments": {
                "s": [],
                "file": []
            }
        },
        "delete_comment": {
            "name": "delete_comment",
            "location": 85,
            "return": [],
            "arguments": {
                "s": [],
                "file": [],
                "line": []
            }
        },
        "set_comment": {
            "name": "set_comment",
            "location": 103,
            "return": [],
            "arguments": {
                "s": [],
                "file": [],
                "line": [],
                "message": []
            }
        },
        "split_path": {
            "name": "split_path",
            "location": 122,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "main": {
            "name": "main",
            "location": 136,
            "return": [],
            "arguments": {}
        }
    },
    "CodeGra.fs-master/codegra_fs/cgapi.py": {
        "make_request_method": {
            "name": "make_request_method",
            "location": 25,
            "return": [],
            "arguments": {
                "fun": []
            }
        },
        "make_request_method.meth": {
            "name": "meth",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "APIRoutes.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "base": [],
                "fixed": []
            }
        },
        "APIRoutes.get_login": {
            "name": "get_login",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APIRoutes.get_courses": {
            "name": "get_courses",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APIRoutes.get_submissions": {
            "name": "get_submissions",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "assignment_id": [],
                "latest_only": []
            }
        },
        "APIRoutes.get_files": {
            "name": "get_files",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": []
            }
        },
        "APIRoutes.get_file": {
            "name": "get_file",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": [],
                "path": []
            }
        },
        "APIRoutes.get_file_buf": {
            "name": "get_file_buf",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": []
            }
        },
        "APIRoutes.select_rubricitems": {
            "name": "select_rubricitems",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": []
            }
        },
        "APIRoutes.get_submission_rubric": {
            "name": "get_submission_rubric",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": []
            }
        },
        "APIRoutes.get_submission": {
            "name": "get_submission",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": []
            }
        },
        "APIRoutes.get_assignment_rubric": {
            "name": "get_assignment_rubric",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "assignment_id": []
            }
        },
        "APIRoutes.get_file_rename": {
            "name": "get_file_rename",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": [],
                "new_path": []
            }
        },
        "APIRoutes.get_submission_feedbacks": {
            "name": "get_submission_feedbacks",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": []
            }
        },
        "APIRoutes.get_feedbacks": {
            "name": "get_feedbacks",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "assignment_id": []
            }
        },
        "APIRoutes.get_feedback": {
            "name": "get_feedback",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": []
            }
        },
        "APIRoutes.add_feedback": {
            "name": "add_feedback",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": [],
                "line": []
            }
        },
        "APIRoutes.get_assignment": {
            "name": "get_assignment",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "assignment_id": []
            }
        },
        "CGAPIException.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "CGAPIException.__str__": {
            "name": "__str__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CGAPI.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "routes": [],
                "user": [],
                "access_token": []
            }
        },
        "CGAPI.from_username_and_password": {
            "name": "from_username_and_password",
            "location": 217,
            "return": [],
            "arguments": {
                "cls": [],
                "username": [],
                "password": [],
                "base": [],
                "fixed": []
            }
        },
        "CGAPI.from_access_token": {
            "name": "from_access_token",
            "location": 240,
            "return": [],
            "arguments": {
                "cls": [],
                "access_token": [],
                "base": [],
                "fixed": []
            }
        },
        "CGAPI._handle_response_error": {
            "name": "_handle_response_error",
            "location": 262,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "CGAPI.get_courses": {
            "name": "get_courses",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CGAPI.get_submissions": {
            "name": "get_submissions",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "assignment_id": [],
                "latest_only": []
            }
        },
        "CGAPI.get_submission_files": {
            "name": "get_submission_files",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": []
            }
        },
        "CGAPI.get_file_meta": {
            "name": "get_file_meta",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": [],
                "path": []
            }
        },
        "CGAPI.create_file": {
            "name": "create_file",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": [],
                "path": [],
                "buf": []
            }
        },
        "CGAPI.rename_file": {
            "name": "rename_file",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": [],
                "new_path": []
            }
        },
        "CGAPI.get_file": {
            "name": "get_file",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": []
            }
        },
        "CGAPI.patch_file": {
            "name": "patch_file",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": [],
                "buf": []
            }
        },
        "CGAPI.delete_file": {
            "name": "delete_file",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": []
            }
        },
        "CGAPI.get_assignment_rubric": {
            "name": "get_assignment_rubric",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "assignment_id": []
            }
        },
        "CGAPI.set_assignment_rubric": {
            "name": "set_assignment_rubric",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "assignment_id": [],
                "rub": []
            }
        },
        "CGAPI.get_submission_rubric": {
            "name": "get_submission_rubric",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": []
            }
        },
        "CGAPI.select_rubricitems": {
            "name": "select_rubricitems",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": [],
                "items": []
            }
        },
        "CGAPI.get_submission_feedbacks": {
            "name": "get_submission_feedbacks",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": []
            }
        },
        "CGAPI.get_feedbacks": {
            "name": "get_feedbacks",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "assignment_id": []
            }
        },
        "CGAPI.add_feedback": {
            "name": "add_feedback",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": [],
                "line": [],
                "message": []
            }
        },
        "CGAPI.delete_feedback": {
            "name": "delete_feedback",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": [],
                "line": []
            }
        },
        "CGAPI.get_feedback": {
            "name": "get_feedback",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": []
            }
        },
        "CGAPI.get_assignment": {
            "name": "get_assignment",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "assignment_id": []
            }
        },
        "CGAPI.set_assignment": {
            "name": "set_assignment",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "assignment_id": [],
                "settings": []
            }
        },
        "CGAPI.get_submission": {
            "name": "get_submission",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": []
            }
        },
        "CGAPI.set_submission": {
            "name": "set_submission",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "submission_id": [],
                "grade": [],
                "feedback": []
            }
        }
    },
    "CodeGra.fs-master/codegra_fs/cgfs.py": {
        "remove_permission": {
            "name": "remove_permission",
            "location": 114,
            "return": [],
            "arguments": {
                "perm": [],
                "read": [
                    "bool"
                ],
                "write": [
                    "bool"
                ],
                "execute": [
                    "bool"
                ]
            }
        },
        "create_permission": {
            "name": "create_permission",
            "location": 120,
            "return": [
                "int"
            ],
            "arguments": {
                "read": [],
                "write": [],
                "execute": []
            }
        },
        "getuid": {
            "name": "getuid",
            "location": 130,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "getegid": {
            "name": "getegid",
            "location": 136,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "handle_cgapi_exception": {
            "name": "handle_cgapi_exception",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "ex": []
            }
        },
        "set_fuse_context": {
            "name": "set_fuse_context",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "fmt": []
            }
        },
        "_get_feedbacks": {
            "name": "_get_feedbacks",
            "location": 436,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "api": [],
                "submission_id": [],
                "feedback_type": []
            }
        },
        "create_and_mount_fs": {
            "name": "create_and_mount_fs",
            "location": 2228,
            "return": [
                "None"
            ],
            "arguments": {
                "fixed": [],
                "assigned_only": [],
                "latest_only": [],
                "mountpoint": [],
                "rubric_append_only": [],
                "ascii_only": [],
                "iso_timestamps": []
            }
        },
        "check_version": {
            "name": "check_version",
            "location": 2300,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 2316,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "get_jwt_token": {
            "name": "get_jwt_token",
            "location": 2345,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_password": {
            "name": "get_password",
            "location": 2356,
            "return": [
                "None"
            ],
            "arguments": {
                "password": []
            }
        },
        "main": {
            "name": "main",
            "location": 2373,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FuseContext.update": {
            "name": "update",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "args": []
            }
        },
        "FuseContext.read": {
            "name": "read",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GuiMode.enable": {
            "name": "enable",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseException.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BaseFile.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "name": [
                    "None"
                ]
            }
        },
        "BaseFile.getattr": {
            "name": "getattr",
            "location": 180,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": [],
                "submission": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            }
        },
        "BaseFile.setattr": {
            "name": "setattr",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Directory.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "name": [
                    "None"
                ],
                "type": [],
                "writable": [
                    "bool"
                ]
            }
        },
        "Directory.getattr": {
            "name": "getattr",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "submission": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            }
        },
        "Directory.insert": {
            "name": "insert",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Directory.pop": {
            "name": "pop",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Directory.read": {
            "name": "read",
            "location": 271,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempDirectory.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleFile.base_getattr": {
            "name": "base_getattr",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "submission": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            }
        },
        "SingleFile.getattr": {
            "name": "getattr",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "submission": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            }
        },
        "SingleFile.open": {
            "name": "open",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buf": []
            }
        },
        "SingleFile.read": {
            "name": "read",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [],
                "size": []
            }
        },
        "SingleFile.truncate": {
            "name": "truncate",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "SingleFile.release": {
            "name": "release",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleFile.utimens": {
            "name": "utimens",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atime": [],
                "mtime": []
            }
        },
        "SingleFile.write": {
            "name": "write",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "offset": []
            }
        },
        "SingleFile.fsync": {
            "name": "fsync",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleFile.flush": {
            "name": "flush",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecialFile.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "SpecialFile.get_data": {
            "name": "get_data",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecialFile.getattr": {
            "name": "getattr",
            "location": 350,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecialFile.get_st_atime": {
            "name": "get_st_atime",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecialFile.get_st_mtime": {
            "name": "get_st_mtime",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecialFile.get_st_ctime": {
            "name": "get_st_ctime",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecialFile.read": {
            "name": "read",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "size": []
            }
        },
        "SpecialFile.release": {
            "name": "release",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecialFile.open": {
            "name": "open",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SpecialFile.truncate": {
            "name": "truncate",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "SpecialFile.unlink": {
            "name": "unlink",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecialFile.utimens": {
            "name": "utimens",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atime": [],
                "mtime": []
            }
        },
        "SpecialFile.write": {
            "name": "write",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "offset": []
            }
        },
        "SpecialFile.flush": {
            "name": "flush",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecialFile.fsync": {
            "name": "fsync",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SocketFile.__init__": {
            "name": "__init__",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loc": [],
                "name": []
            }
        },
        "SocketFile.get_data": {
            "name": "get_data",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpFile.__init__": {
            "name": "__init__",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_class": []
            }
        },
        "HelpFile.get_data": {
            "name": "get_data",
            "location": 422,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HelpFile.flush": {
            "name": "flush",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_get_feedbacks.make_file_lookup": {
            "name": "make_file_lookup",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [],
                "path": []
            }
        },
        "ImmutableCachedSpecialFile.__init__": {
            "name": "__init__",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ImmutableCachedSpecialFile.get_online_data": {
            "name": "get_online_data",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableCachedSpecialFile.get_data": {
            "name": "get_data",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinterFeedbackFile.__init__": {
            "name": "__init__",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [],
                "submission_id": []
            }
        },
        "LinterFeedbackFile.get_online_data": {
            "name": "get_online_data",
            "location": 487,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineFeedbackFile.__init__": {
            "name": "__init__",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [],
                "submission_id": []
            }
        },
        "LineFeedbackFile.get_online_data": {
            "name": "get_online_data",
            "location": 500,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedSpecialFile.__init__": {
            "name": "__init__",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CachedSpecialFile.get_st_mtime": {
            "name": "get_st_mtime",
            "location": 520,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CachedSpecialFile.get_data": {
            "name": "get_data",
            "location": 523,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CachedSpecialFile.get_online_data": {
            "name": "get_online_data",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedSpecialFile.parse": {
            "name": "parse",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CachedSpecialFile.send_back": {
            "name": "send_back",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CachedSpecialFile.write": {
            "name": "write",
            "location": 554,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "offset": []
            }
        },
        "CachedSpecialFile.fsync": {
            "name": "fsync",
            "location": 573,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CachedSpecialFile.reset_data": {
            "name": "reset_data",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedSpecialFile.flush": {
            "name": "flush",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedSpecialFile.truncate": {
            "name": "truncate",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "FeedbackFile.__init__": {
            "name": "__init__",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [],
                "submission_id": []
            }
        },
        "FeedbackFile.get_online_data": {
            "name": "get_online_data",
            "location": 638,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeedbackFile.parse": {
            "name": "parse",
            "location": 644,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "FeedbackFile.send_back": {
            "name": "send_back",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feedback": []
            }
        },
        "GradeFile.__init__": {
            "name": "__init__",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [],
                "submission_id": []
            }
        },
        "GradeFile.get_online_data": {
            "name": "get_online_data",
            "location": 660,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "GradeFile.parse": {
            "name": "parse",
            "location": 669,
            "return": [
                "typing.Text",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "GradeFile.send_back": {
            "name": "send_back",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grade": []
            }
        },
        "RubricSelectFile.__init__": {
            "name": "__init__",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [],
                "submission_id": [],
                "user": []
            }
        },
        "RubricSelectFile.get_online_data": {
            "name": "get_online_data",
            "location": 712,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "RubricSelectFile.parse": {
            "name": "parse",
            "location": 759,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "RubricSelectFile.send_back": {
            "name": "send_back",
            "location": 775,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sel": []
            }
        },
        "RubricEditorFile.__init__": {
            "name": "__init__",
            "location": 839,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [],
                "assignment_id": [],
                "append_only": [
                    "bool"
                ]
            }
        },
        "RubricEditorFile.hash_id": {
            "name": "hash_id",
            "location": 848,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "RubricEditorFile.get_online_data": {
            "name": "get_online_data",
            "location": 853,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "RubricEditorFile.parse": {
            "name": "parse",
            "location": 887,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "data_b": []
            }
        },
        "RubricEditorFile.send_back": {
            "name": "send_back",
            "location": 1018,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed": []
            }
        },
        "AssignmentSettingsFile.__init__": {
            "name": "__init__",
            "location": 1074,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api": [],
                "assignment_id": []
            }
        },
        "AssignmentSettingsFile.send_back": {
            "name": "send_back",
            "location": 1080,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AssignmentSettingsFile.get_online_data": {
            "name": "get_online_data",
            "location": 1083,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignmentSettingsFile.parse": {
            "name": "parse",
            "location": 1098,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "TempFile.__init__": {
            "name": "__init__",
            "location": 1122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "tmpdir": []
            }
        },
        "TempFile.stat": {
            "name": "stat",
            "location": 1140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TempFile.getattr": {
            "name": "getattr",
            "location": 1152,
            "return": [],
            "arguments": {
                "self": [],
                "submission": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            }
        },
        "TempFile.setattr": {
            "name": "setattr",
            "location": 1159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "TempFile.utimens": {
            "name": "utimens",
            "location": 1164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atime": [],
                "mtime": []
            }
        },
        "TempFile.open": {
            "name": "open",
            "location": 1167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buf": []
            }
        },
        "TempFile.read": {
            "name": "read",
            "location": 1175,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "size": []
            }
        },
        "TempFile.write": {
            "name": "write",
            "location": 1179,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "offset": []
            }
        },
        "TempFile.release": {
            "name": "release",
            "location": 1185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempFile.flush": {
            "name": "flush",
            "location": 1191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempFile.fsync": {
            "name": "fsync",
            "location": 1194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TempFile.unlink": {
            "name": "unlink",
            "location": 1197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempFile.truncate": {
            "name": "truncate",
            "location": 1202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "File.__init__": {
            "name": "__init__",
            "location": 1212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "name": [
                    "None"
                ]
            }
        },
        "File.data": {
            "name": "data",
            "location": 1231,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "File.getattr": {
            "name": "getattr",
            "location": 1237,
            "return": [],
            "arguments": {
                "self": [],
                "submission": [
                    "None"
                ],
                "path": [
                    "None"
                ]
            }
        },
        "File.open": {
            "name": "open",
            "location": 1253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buf": []
            }
        },
        "File.read": {
            "name": "read",
            "location": 1258,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "size": []
            }
        },
        "File.utimens": {
            "name": "utimens",
            "location": 1261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "atime": [],
                "mtime": []
            }
        },
        "File.flush": {
            "name": "flush",
            "location": 1265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.release": {
            "name": "release",
            "location": 1283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.truncate": {
            "name": "truncate",
            "location": 1287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "File.write": {
            "name": "write",
            "location": 1304,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "offset": []
            }
        },
        "File.fsync": {
            "name": "fsync",
            "location": 1326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APIHandler.__init__": {
            "name": "__init__",
            "location": 1333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cgfs": []
            }
        },
        "APIHandler.handle_conn": {
            "name": "handle_conn",
            "location": 1343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "APIHandler.run": {
            "name": "run",
            "location": 1368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": []
            }
        },
        "APIHandler._get_file": {
            "name": "_get_file",
            "location": 1383,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]",
                "dict[typing.Text, typing.Union[bool,str]]"
            ],
            "arguments": {
                "self": [],
                "f_name": []
            }
        },
        "APIHandler.delete_feedback": {
            "name": "delete_feedback",
            "location": 1402,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "APIHandler.is_file": {
            "name": "is_file",
            "location": 1421,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "APIHandler.get_feedback": {
            "name": "get_feedback",
            "location": 1443,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "APIHandler.set_feedback": {
            "name": "set_feedback",
            "location": 1461,
            "return": [
                "dict[typing.Text, typing.Union[bool,typing.Text]]",
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "CGFS.__init__": {
            "name": "__init__",
            "location": 1492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latest_only": [],
                "socketfile": [],
                "mountpoint": [],
                "tmpdir": [],
                "fixed": [
                    "bool"
                ],
                "rubric_append_only": [
                    "bool"
                ],
                "assigned_only": [
                    "bool"
                ],
                "ascii_only": [
                    "bool"
                ],
                "iso_timestamps": [
                    "bool"
                ]
            }
        },
        "CGFS.strippath": {
            "name": "strippath",
            "location": 1554,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "CGFS._get_directory_name": {
            "name": "_get_directory_name",
            "location": 1558,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "CGFS.load_courses": {
            "name": "load_courses",
            "location": 1563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CGFS.load_submissions": {
            "name": "load_submissions",
            "location": 1633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "assignment": []
            }
        },
        "CGFS.insert_tree": {
            "name": "insert_tree",
            "location": 1702,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir": [],
                "tree": []
            }
        },
        "CGFS.load_submission_files": {
            "name": "load_submission_files",
            "location": 1713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "submission": []
            }
        },
        "CGFS.split_path": {
            "name": "split_path",
            "location": 1729,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "CGFS.get_submission": {
            "name": "get_submission",
            "location": 1732,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "CGFS.get_file_with_fh": {
            "name": "get_file_with_fh",
            "location": 1740,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "fh": []
            }
        },
        "CGFS.get_file": {
            "name": "get_file",
            "location": 1746,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "start": [
                    "None"
                ],
                "expect_type": [
                    "None"
                ]
            }
        },
        "CGFS.get_dir": {
            "name": "get_dir",
            "location": 1791,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "start": [
                    "None"
                ]
            }
        },
        "CGFS.should_sync": {
            "name": "should_sync",
            "location": 1798,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parts": []
            }
        },
        "CGFS.chmod": {
            "name": "chmod",
            "location": 1804,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "mode": []
            }
        },
        "CGFS.chown": {
            "name": "chown",
            "location": 1808,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "uid": [],
                "gid": []
            }
        },
        "CGFS.create": {
            "name": "create",
            "location": 1812,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "mode": []
            }
        },
        "CGFS._create": {
            "name": "_create",
            "location": 1816,
            "return": [
                "FileHandle"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "mode": []
            }
        },
        "CGFS.fsync": {
            "name": "fsync",
            "location": 1856,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "_": [],
                "fh": []
            }
        },
        "CGFS.flush": {
            "name": "flush",
            "location": 1859,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "fh": []
            }
        },
        "CGFS._do_fsync_like": {
            "name": "_do_fsync_like",
            "location": 1862,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "fh": [],
                "todo": []
            }
        },
        "CGFS.getattr": {
            "name": "getattr",
            "location": 1879,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "fh": [
                    "None"
                ]
            }
        },
        "CGFS._getattr": {
            "name": "_getattr",
            "location": 1883,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "fh": []
            }
        },
        "CGFS.getxattr": {
            "name": "getxattr",
            "location": 1918,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "name": [],
                "position": [
                    "int"
                ]
            }
        },
        "CGFS.listxattr": {
            "name": "listxattr",
            "location": 1922,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "CGFS.mkdir": {
            "name": "mkdir",
            "location": 1925,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "mode": []
            }
        },
        "CGFS._mkdir": {
            "name": "_mkdir",
            "location": 1929,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "mode": []
            }
        },
        "CGFS.open": {
            "name": "open",
            "location": 1963,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "flags": []
            }
        },
        "CGFS._open": {
            "name": "_open",
            "location": 1967,
            "return": [
                "FileHandle"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "flags": []
            }
        },
        "CGFS.read": {
            "name": "read",
            "location": 1987,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "size": [],
                "offset": [],
                "fh": []
            }
        },
        "CGFS.readdir": {
            "name": "readdir",
            "location": 1993,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "fh": []
            }
        },
        "CGFS.readlink": {
            "name": "readlink",
            "location": 2006,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "CGFS.release": {
            "name": "release",
            "location": 2010,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "fh": []
            }
        },
        "CGFS.removexattr": {
            "name": "removexattr",
            "location": 2018,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "name": []
            }
        },
        "CGFS.rename": {
            "name": "rename",
            "location": 2021,
            "return": [],
            "arguments": {
                "self": [],
                "old": [],
                "new": []
            }
        },
        "CGFS._rename": {
            "name": "_rename",
            "location": 2025,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [],
                "new": []
            }
        },
        "CGFS.rmdir": {
            "name": "rmdir",
            "location": 2087,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "CGFS._rmdir": {
            "name": "_rmdir",
            "location": 2091,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "CGFS.setxattr": {
            "name": "setxattr",
            "location": 2124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "name": [],
                "value": [],
                "options": [],
                "position": [
                    "int"
                ]
            }
        },
        "CGFS.statfs": {
            "name": "statfs",
            "location": 2134,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "CGFS.symlink": {
            "name": "symlink",
            "location": 2141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [],
                "source": []
            }
        },
        "CGFS.truncate": {
            "name": "truncate",
            "location": 2145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "length": [],
                "fh": [
                    "None"
                ]
            }
        },
        "CGFS.unlink": {
            "name": "unlink",
            "location": 2164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "CGFS.utimens": {
            "name": "utimens",
            "location": 2193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "times": [
                    "None"
                ]
            }
        },
        "CGFS.write": {
            "name": "write",
            "location": 2211,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "data": [],
                "offset": [],
                "fh": []
            }
        },
        "RubricEditorFile.parse.strip_spaces": {
            "name": "strip_spaces",
            "location": 890,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "RubricEditorFile.parse.parse_line": {
            "name": "parse_line",
            "location": 899,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "i": []
            }
        },
        "RubricEditorFile.parse.parse_description": {
            "name": "parse_description",
            "location": 911,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "i": [],
                "end": [
                    "None"
                ],
                "strip_leading": [
                    "bool"
                ],
                "strip_trailing": [
                    "bool"
                ]
            }
        },
        "RubricEditorFile.parse.parse_list": {
            "name": "parse_list",
            "location": 938,
            "return": [
                "tuple[list[tuple[typing.Union[None,str,float]]]]"
            ],
            "arguments": {
                "i": []
            }
        },
        "RubricEditorFile.parse.parse_item": {
            "name": "parse_item",
            "location": 983,
            "return": [
                "tuple[tuple[typing.Optional[str]]]"
            ],
            "arguments": {
                "i": []
            }
        },
        "RubricEditorFile.send_back.get_from_lookup": {
            "name": "get_from_lookup",
            "location": 1022,
            "return": [],
            "arguments": {
                "h": []
            }
        },
        "CGFS.load_submissions.get_assignee_id": {
            "name": "get_assignee_id",
            "location": 1645,
            "return": [
                "None"
            ],
            "arguments": {
                "sub": []
            }
        }
    },
    "CodeGra.fs-master/codegra_fs/cgfs_types.py": {},
    "CodeGra.fs-master/codegra_fs/constants.py": {},
    "CodeGra.fs-master/codegra_fs/log.py": {
        "JsonFormatter.format": {
            "name": "format",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "record": [
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "CodeGra.fs-master/codegra_fs/utils.py": {
        "_get_fuse_version_info": {
            "name": "_get_fuse_version_info",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "get_fuse_install_message": {
            "name": "get_fuse_install_message",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "newer_version_available": {
            "name": "newer_version_available",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "find_all_dups": {
            "name": "find_all_dups",
            "location": 81,
            "return": [],
            "arguments": {
                "seq": [],
                "key": []
            }
        },
        "name_of_user": {
            "name": "name_of_user",
            "location": 91,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "get_members_of_user": {
            "name": "get_members_of_user",
            "location": 98,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "format_datestring": {
            "name": "format_datestring",
            "location": 104,
            "return": [],
            "arguments": {
                "datestring": [],
                "use_colons": []
            }
        },
        "maybe_strip_trailing_newline": {
            "name": "maybe_strip_trailing_newline",
            "location": 112,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "remove_special_chars": {
            "name": "remove_special_chars",
            "location": 121,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "CodeGra.fs-master/codegra_fs/__init__.py": {},
    "CodeGra.fs-master/docs/conf.py": {},
    "CodeGra.fs-master/pyinstaller_hooks/hook-codegra_fs.py": {},
    "CodeGra.fs-master/test/conftest.py": {
        "setup": {
            "name": "setup",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mount_dir": {
            "name": "mount_dir",
            "location": 23,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "fixed": {
            "name": "fixed",
            "location": 30,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "rubric_append_only": {
            "name": "rubric_append_only",
            "location": 35,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "latest_only": {
            "name": "latest_only",
            "location": 40,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "assigned_to_me": {
            "name": "assigned_to_me",
            "location": 45,
            "return": [],
            "arguments": {
                "request": [
                    "set[str]",
                    "str"
                ]
            }
        },
        "mount": {
            "name": "mount",
            "location": 50,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "mount_dir": [
                    "str"
                ],
                "latest_only": [
                    "str"
                ],
                "fixed": [
                    "str"
                ],
                "rubric_append_only": [
                    "str"
                ],
                "assigned_to_me": [
                    "str"
                ]
            }
        },
        "assig_open": {
            "name": "assig_open",
            "location": 130,
            "return": [],
            "arguments": {
                "mount": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "python_id": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "mount_dir": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "assig_done": {
            "name": "assig_done",
            "location": 135,
            "return": [],
            "arguments": {
                "mount": [
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "shell_id": [
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ],
                "mount_dir": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "sub_done2": {
            "name": "sub_done2",
            "location": 140,
            "return": [],
            "arguments": {
                "assig_done": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "sub_done": {
            "name": "sub_done",
            "location": 148,
            "return": [],
            "arguments": {
                "assig_done": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "sub_open": {
            "name": "sub_open",
            "location": 156,
            "return": [],
            "arguments": {
                "assig_open": [
                    "str"
                ]
            }
        },
        "teacher_jwt": {
            "name": "teacher_jwt",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "student2_jwt": {
            "name": "student2_jwt",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "student_jwt": {
            "name": "student_jwt",
            "location": 187,
            "return": [],
            "arguments": {}
        },
        "shell_id": {
            "name": "shell_id",
            "location": 199,
            "return": [],
            "arguments": {
                "student_jwt": [
                    "str"
                ]
            }
        },
        "python_id": {
            "name": "python_id",
            "location": 210,
            "return": [],
            "arguments": {
                "student_jwt": []
            }
        },
        "sub1_id": {
            "name": "sub1_id",
            "location": 221,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "student_jwt": [
                    "str"
                ],
                "python_id": [
                    "str",
                    "dict[, ]",
                    "bytes",
                    "set[str]",
                    "int"
                ],
                "teacher_jwt": [
                    "str"
                ]
            }
        },
        "sub2_id": {
            "name": "sub2_id",
            "location": 244,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "student_jwt": [
                    "str"
                ],
                "shell_id": [
                    "str",
                    "bytes",
                    "None",
                    "dict[, ]",
                    "int"
                ],
                "teacher_jwt": [
                    "str"
                ]
            }
        },
        "teardown": {
            "name": "teardown",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mount.do_mount": {
            "name": "do_mount",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "fixed": [],
                "assigned_to_me": [],
                "ascii_only": [
                    "bool"
                ]
            }
        },
        "mount.do_umount": {
            "name": "do_umount",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mount.do_remount": {
            "name": "do_remount",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "fixed": [],
                "assigned_to_me": [],
                "ascii_only": [
                    "bool"
                ]
            }
        }
    },
    "CodeGra.fs-master/test/helpers.py": {
        "rm": {
            "name": "rm",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "rmdir": {
            "name": "rmdir",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "rm_rf": {
            "name": "rm_rf",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "isfile": {
            "name": "isfile",
            "location": 19,
            "return": [
                "str",
                "dict[str, bool]",
                "bool"
            ],
            "arguments": {}
        },
        "isdir": {
            "name": "isdir",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "mkdir": {
            "name": "mkdir",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "ls": {
            "name": "ls",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "symlink": {
            "name": "symlink",
            "location": 39,
            "return": [],
            "arguments": {
                "src": [
                    "str",
                    "bytes"
                ],
                "dst": [
                    "str",
                    "bytes"
                ]
            }
        },
        "rename": {
            "name": "rename",
            "location": 43,
            "return": [],
            "arguments": {
                "src": [
                    "str",
                    "bytes"
                ],
                "dst": [
                    "str",
                    "bytes"
                ]
            }
        },
        "chown": {
            "name": "chown",
            "location": 47,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "None"
                ],
                "uid": [
                    "str",
                    "None"
                ],
                "gid": [
                    "str",
                    "None"
                ]
            }
        },
        "chmod": {
            "name": "chmod",
            "location": 51,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "None"
                ],
                "mode": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "CodeGra.fs-master/test/test_api.py": {
        "run_shell": {
            "name": "run_shell",
            "location": 18,
            "return": [],
            "arguments": {
                "prog": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "username": {
            "name": "username",
            "location": 25,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "password": {
            "name": "password",
            "location": 30,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "test_get_set_rubric": {
            "name": "test_get_set_rubric",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "typing.Sequence[str]",
                    "str"
                ],
                "assig_done": [
                    "str",
                    "int",
                    "None"
                ],
                "data": [
                    "str",
                    "bytes",
                    "int"
                ],
                "res": [
                    "str"
                ],
                "shell_id": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "teacher_jwt": [
                    "str"
                ]
            }
        },
        "test_remove_add_rubric_item": {
            "name": "test_remove_add_rubric_item",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "bool",
                    "str"
                ],
                "assig_done": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bool",
                    "str"
                ],
                "res": [
                    "int",
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ],
                "shell_id": [
                    "bool",
                    "str"
                ],
                "teacher_jwt": [
                    "str"
                ],
                "to_add": [
                    "str",
                    "int",
                    "list[list[int]]"
                ],
                "res_after": [
                    "int",
                    "bytearray",
                    "float",
                    "str"
                ],
                "rubric_append_only": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_selecting_rubric": {
            "name": "test_selecting_rubric",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str",
                    "bytes",
                    "list[int]"
                ],
                "assig_done": [
                    "str",
                    "None",
                    "bytes"
                ],
                "shell_id": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "tuple[str]"
                ],
                "teacher_jwt": [
                    "str"
                ]
            }
        },
        "test_assig_settings": {
            "name": "test_assig_settings",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "int",
                    "list[int]"
                ],
                "assig_done": [
                    "str",
                    "list[tuple[typing.Union[int,int]]]",
                    "typing.Callable[str, str]",
                    "list[str]",
                    "list[tuple[typing.Union[str,str]]]",
                    "set[]"
                ],
                "shell_id": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[, ]"
                ],
                "teacher_jwt": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "test_socket_api": {
            "name": "test_socket_api",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str",
                    "dict[str, object]",
                    "list[str]",
                    "bytes"
                ],
                "assig_done": [
                    "int",
                    "list[int]"
                ],
                "shell_id": [
                    "int",
                    "list[int]"
                ],
                "teacher_jwt": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "test_cg_mode_file": {
            "name": "test_cg_mode_file",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "str",
                    "None"
                ],
                "fixed": [
                    "str",
                    "None"
                ]
            }
        },
        "test_grade_file": {
            "name": "test_grade_file",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str"
                ]
            }
        },
        "test_feedback_file": {
            "name": "test_feedback_file",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str",
                    "typing.IO",
                    "typing.Iterable[str]"
                ],
                "data": [
                    "bytes",
                    "str",
                    "typing.IO",
                    "bool"
                ]
            }
        },
        "test_quote_paths": {
            "name": "test_quote_paths",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "test_remove_add_rubric_item.test_correct": {
            "name": "test_correct",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "res": []
            }
        }
    },
    "CodeGra.fs-master/test/test_fixed.py": {
        "username": {
            "name": "username",
            "location": 15,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "password": {
            "name": "password",
            "location": 20,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "test_deleting_file_in_fixed": {
            "name": "test_deleting_file_in_fixed",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_open": [
                    "str",
                    "bool",
                    "tuple[str]"
                ],
                "mount": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_renaming_file_in_fixed": {
            "name": "test_renaming_file_in_fixed",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_open": [
                    "str",
                    "list[str]",
                    "tuple[str]",
                    "bool",
                    "typing.Mapping"
                ],
                "mount": []
            }
        },
        "test_deleting_directory_in_fixed": {
            "name": "test_deleting_directory_in_fixed",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_open": [
                    "str",
                    "list[str]"
                ],
                "mount": []
            }
        },
        "test_editing_file_in_fixed": {
            "name": "test_editing_file_in_fixed",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_open": [
                    "str",
                    "typing.Sequence[str]"
                ],
                "mount": [
                    "str",
                    "None"
                ]
            }
        },
        "test_truncate_fixed": {
            "name": "test_truncate_fixed",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_open": [
                    "str"
                ]
            }
        }
    },
    "CodeGra.fs-master/test/test_general.py": {
        "username": {
            "name": "username",
            "location": 19,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "password": {
            "name": "password",
            "location": 24,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "teacher_id": {
            "name": "teacher_id",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "ta_id": {
            "name": "ta_id",
            "location": 41,
            "return": [],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "admin_jwt": {
            "name": "admin_jwt",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_create_symlink": {
            "name": "test_create_symlink",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str",
                    "int"
                ]
            }
        },
        "test_create_file_outside_submissions": {
            "name": "test_create_file_outside_submissions",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "str"
                ],
                "mount": [
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "None"
                ]
            }
        },
        "test_delete_invalid_file": {
            "name": "test_delete_invalid_file",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "str"
                ]
            }
        },
        "test_invalid_perm_setting": {
            "name": "test_invalid_perm_setting",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "test_truncate_file": {
            "name": "test_truncate_file",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str"
                ]
            }
        },
        "test_open_directory": {
            "name": "test_open_directory",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_force_create_file": {
            "name": "test_force_create_file",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "typing.Type",
                    "int",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "test_create_existing_dir": {
            "name": "test_create_existing_dir",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "int",
                    "str"
                ]
            }
        },
        "test_rename": {
            "name": "test_rename",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "bool",
                    "str"
                ],
                "sub_done": [],
                "sub_open": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_illegal_rename": {
            "name": "test_illegal_rename",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "bool",
                    "str"
                ],
                "sub_done": [
                    "str"
                ],
                "sub_open": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_compiling_program": {
            "name": "test_compiling_program",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str",
                    "list[str]",
                    "tuple[str]",
                    "tuple[typing.Union[str,...]]"
                ],
                "mount": [
                    "bool",
                    "list[bool]",
                    "str"
                ],
                "fixed": [
                    "bool",
                    "list[bool]",
                    "str"
                ]
            }
        },
        "test_latest_only": {
            "name": "test_latest_only",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "assig_done": [
                    "str",
                    "list[int]"
                ],
                "latest_only": [
                    "bool",
                    "list[str]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "test_double_open": {
            "name": "test_double_open",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str",
                    "bool"
                ],
                "mount": [
                    "bool",
                    "list[str]",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "fixed": [
                    "bool",
                    "list[str]",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "test_double_open_unlink": {
            "name": "test_double_open_unlink",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str",
                    "bool"
                ],
                "mount": [
                    "bool",
                    "list[str]",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "fixed": [
                    "bool",
                    "list[str]",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "test_set_utime": {
            "name": "test_set_utime",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str",
                    "int"
                ],
                "mount": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_non_exising_submission": {
            "name": "test_non_exising_submission",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "assig_done": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "test_renaming_submission": {
            "name": "test_renaming_submission",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str"
                ],
                "sub_done2": [
                    "bool"
                ],
                "assig_done": [
                    "bool"
                ]
            }
        },
        "test_removing_xattrs": {
            "name": "test_removing_xattrs",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_write_to_directory": {
            "name": "test_write_to_directory",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "sub_done": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_difficult_assigned_to": {
            "name": "test_difficult_assigned_to",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "mount": [
                    "str",
                    "int",
                    "None"
                ],
                "teacher_jwt": [
                    "str"
                ],
                "student_jwt": [
                    "str",
                    "dict[str, str]",
                    "float"
                ],
                "teacher_id": [
                    "int",
                    "str",
                    "typing.Iterable[]"
                ],
                "ta_id": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "assig_open": [
                    "bool"
                ],
                "student2_jwt": [
                    "str",
                    "dict[str, str]",
                    "float"
                ]
            }
        },
        "test_double_assignment": {
            "name": "test_double_assignment",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "mount": [
                    "str"
                ],
                "teacher_jwt": [
                    "str"
                ],
                "assig_open": []
            }
        },
        "test_double_course": {
            "name": "test_double_course",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "mount": [
                    "str"
                ],
                "admin_jwt": [
                    "str"
                ],
                "mount_dir": [
                    "str"
                ]
            }
        },
        "test_courses_non_ascii": {
            "name": "test_courses_non_ascii",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "mount": [
                    "str",
                    "None",
                    "bool"
                ],
                "admin_jwt": [
                    "list[dict[str, typing.Any]]"
                ],
                "mount_dir": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "test_courses_with_slash": {
            "name": "test_courses_with_slash",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "mount": [
                    "str",
                    "None",
                    "bool"
                ],
                "admin_jwt": [
                    "list[dict[str, typing.Any]]"
                ],
                "mount_dir": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "test_difficult_assigned_to.submit": {
            "name": "submit",
            "location": 416,
            "return": [],
            "arguments": {
                "jwt": []
            }
        },
        "test_difficult_assigned_to.assign": {
            "name": "assign",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "sub": [],
                "user_id": []
            }
        }
    },
    "CodeGra.fs-master/test/test_student.py": {
        "username": {
            "name": "username",
            "location": 7,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "password": {
            "name": "password",
            "location": 12,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "test_list_courses": {
            "name": "test_list_courses",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "str",
                    "list[slice]",
                    "list[int]"
                ]
            }
        },
        "test_list_assignments": {
            "name": "test_list_assignments",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "str"
                ]
            }
        },
        "test_list_submissions": {
            "name": "test_list_submissions",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "str"
                ],
                "mount": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "test_create_files": {
            "name": "test_create_files",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "bool"
                ],
                "sub_open": [],
                "sub_done": [
                    "str"
                ]
            }
        },
        "test_write_and_read_files": {
            "name": "test_write_and_read_files",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "bool"
                ],
                "sub_open": [
                    "str"
                ],
                "sub_done": [
                    "str"
                ]
            }
        },
        "test_delete_files": {
            "name": "test_delete_files",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "bool"
                ],
                "sub_open": [
                    "str"
                ],
                "sub_done": [
                    "bool"
                ]
            }
        },
        "test_read_directories": {
            "name": "test_read_directories",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "bool",
                    "str"
                ],
                "sub_done": [
                    "str"
                ],
                "sub_open": [
                    "str"
                ]
            }
        },
        "test_make_directories": {
            "name": "test_make_directories",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [
                    "bool",
                    "str"
                ],
                "sub_done": [
                    "str"
                ],
                "sub_open": [
                    "str"
                ]
            }
        }
    },
    "CodeGra.fs-master/test/test_teacher.py": {
        "username": {
            "name": "username",
            "location": 10,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": []
            }
        },
        "password": {
            "name": "password",
            "location": 15,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": []
            }
        },
        "teacher_id": {
            "name": "teacher_id",
            "location": 20,
            "return": [],
            "arguments": {
                "username": [],
                "password": []
            }
        },
        "test_list_courses": {
            "name": "test_list_courses",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": []
            }
        },
        "test_list_assignments": {
            "name": "test_list_assignments",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": []
            }
        },
        "test_list_submissions": {
            "name": "test_list_submissions",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": []
            }
        },
        "test_list_assigned_submissions": {
            "name": "test_list_assigned_submissions",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "mount": [],
                "mount_dir": [],
                "teacher_jwt": [],
                "teacher_id": []
            }
        },
        "test_create_files": {
            "name": "test_create_files",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [],
                "sub_open": [],
                "sub_done": []
            }
        },
        "test_write_and_read_files": {
            "name": "test_write_and_read_files",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [],
                "sub_open": [],
                "sub_done": []
            }
        },
        "test_delete_files": {
            "name": "test_delete_files",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [],
                "sub_open": [],
                "sub_done": []
            }
        },
        "test_read_directories": {
            "name": "test_read_directories",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [],
                "sub_done": [],
                "sub_open": []
            }
        },
        "test_make_directories": {
            "name": "test_make_directories",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [],
                "sub_done": [],
                "sub_open": []
            }
        },
        "test_bug_fsync": {
            "name": "test_bug_fsync",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "mount_dir": [],
                "sub_done": []
            }
        }
    }
}
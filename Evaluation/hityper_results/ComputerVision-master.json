{
    "ComputerVision-master/CameraCalibration/CV2019_HW1/camera_calibration.py": {},
    "ComputerVision-master/CameraCalibration/CV2019_HW1/camera_calibration_show_extrinsics.py": {
        "inverse_homogeneoux_matrix": {
            "name": "inverse_homogeneoux_matrix",
            "location": 9,
            "return": [
                "memoryview",
                "list[list[int]]",
                "list[str]"
            ],
            "arguments": {
                "M": []
            }
        },
        "transform_to_matplotlib_frame": {
            "name": "transform_to_matplotlib_frame",
            "location": 18,
            "return": [],
            "arguments": {
                "cMo": [],
                "X": [
                    "int",
                    "str"
                ],
                "inverse": [
                    "bool"
                ]
            }
        },
        "create_camera_model": {
            "name": "create_camera_model",
            "location": 30,
            "return": [],
            "arguments": {
                "camera_matrix": [
                    "str"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "scale_focal": [
                    "int"
                ],
                "draw_frame_axis": [
                    "bool"
                ]
            }
        },
        "create_board_model": {
            "name": "create_board_model",
            "location": 85,
            "return": [
                "list[]"
            ],
            "arguments": {
                "extrinsics": [
                    "bool",
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "typing.Callable[, ]",
                    "typing.Mapping"
                ],
                "board_width": [
                    "int"
                ],
                "board_height": [
                    "int",
                    "float"
                ],
                "square_size": [
                    "int",
                    "str"
                ],
                "draw_frame_axis": [
                    "bool"
                ]
            }
        },
        "draw_camera_boards": {
            "name": "draw_camera_boards",
            "location": 116,
            "return": [],
            "arguments": {
                "ax": [
                    "int",
                    "list[]",
                    "list[int]"
                ],
                "camera_matrix": [
                    "int",
                    "str",
                    "None"
                ],
                "cam_width": [
                    "int",
                    "str",
                    "None"
                ],
                "cam_height": [
                    "int",
                    "str",
                    "None"
                ],
                "scale_focal": [
                    "int",
                    "str",
                    "None"
                ],
                "extrinsics": [
                    "str",
                    "tuple[int]"
                ],
                "board_width": [
                    "int",
                    "str",
                    "typing.Sequence[int]",
                    "tuple[int]"
                ],
                "board_height": [
                    "int",
                    "str",
                    "typing.Sequence[int]",
                    "tuple[int]"
                ],
                "square_size": [
                    "int",
                    "str",
                    "typing.Sequence[int]",
                    "tuple[int]"
                ],
                "patternCentric": [
                    "int",
                    "float",
                    "list[]"
                ]
            }
        }
    },
    "ComputerVision-master/CV2019_HW2/Hybrid-image/utils/filterDFT.py": {
        "filterDFT": {
            "name": "filterDFT",
            "location": 4,
            "return": [],
            "arguments": {
                "imageMatrix": [
                    "int",
                    "str"
                ],
                "filterMatrix": [
                    "str",
                    "tuple[]",
                    "list[str]"
                ]
            }
        }
    },
    "ComputerVision-master/CV2019_HW2/Hybrid-image/utils/gauss2D.py": {
        "gauss2D": {
            "name": "gauss2D",
            "location": 5,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [],
                "y": [
                    "int"
                ],
                "sigma": [
                    "float"
                ],
                "highPass": [
                    "bool"
                ]
            }
        },
        "gauss2D_norm": {
            "name": "gauss2D_norm",
            "location": 15,
            "return": [],
            "arguments": {
                "shape": [
                    "tuple[int]"
                ],
                "sigma": [
                    "float"
                ]
            }
        }
    },
    "ComputerVision-master/CV2019_HW2/Hybrid-image/utils/my_filter.py": {
        "my_imfilter": {
            "name": "my_imfilter",
            "location": 4,
            "return": [],
            "arguments": {
                "image": [],
                "imfilter": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "ComputerVision-master/CV2019_HW2/Hybrid-image/utils/__init__.py": {},
    "ComputerVision-master/CV2019_HW2/task3_colorizing/task3_colorizing.py": {
        "ncc": {
            "name": "ncc",
            "location": 332,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "nccAlign": {
            "name": "nccAlign",
            "location": 337,
            "return": [
                "list[]"
            ],
            "arguments": {
                "a": [
                    "float",
                    "list[float]",
                    "str"
                ],
                "b": [
                    "float",
                    "list[float]",
                    "str"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "t": [
                    "int"
                ]
            }
        }
    },
    "ComputerVision-master/HW3/run.py": {},
    "ComputerVision-master/HW3/APIS/apis.py": {
        "sift": {
            "name": "sift",
            "location": 8,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "img_path": [
                    "str",
                    "list[int]"
                ],
                "str_path": [
                    "str"
                ]
            }
        },
        "knnmatch": {
            "name": "knnmatch",
            "location": 19,
            "return": [
                "dict[, list[]]"
            ],
            "arguments": {
                "des_list": [
                    "list[typing.Union[int,float]]",
                    "list[]",
                    "list[tuple[typing.Union[str,int]]]",
                    "list[dict[, ]]",
                    "list[str]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "find_matches": {
            "name": "find_matches",
            "location": 34,
            "return": [
                "list[list[typing.Union[tuple[typing.Union[str,int]],tuple[typing.Union[str,float]],str]]]"
            ],
            "arguments": {
                "rawmatch": [
                    "dict[str, str]",
                    "dict[, ]",
                    "dict[str, int]",
                    "dict[str, float]"
                ],
                "ratio": [
                    "list[dict[str, str]]",
                    "str",
                    "bool"
                ]
            }
        },
        "save_matching_img": {
            "name": "save_matching_img",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "img_list": [
                    "str",
                    "list[]"
                ],
                "kps_list": [],
                "matches": [
                    "list[]",
                    "str"
                ],
                "path": [
                    "str",
                    "tuple[str]",
                    "None"
                ]
            }
        },
        "homomat": {
            "name": "homomat",
            "location": 84,
            "return": [],
            "arguments": {
                "min_match_count": [
                    "int",
                    "float"
                ],
                "src": [
                    "str",
                    "list[str]"
                ],
                "dst": []
            }
        },
        "ransac": {
            "name": "ransac",
            "location": 101,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "matches": [],
                "kps_list": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "min_match_count": [
                    "int",
                    "float"
                ],
                "num_test": [
                    "bool"
                ],
                "threshold": [
                    "float"
                ]
            }
        },
        "find_newimage_size": {
            "name": "find_newimage_size",
            "location": 143,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "warped_img": [
                    "str"
                ],
                "img_height": [
                    "float",
                    "bool",
                    "typing.Callable[..., None]"
                ],
                "img_width": [
                    "int",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "forward_warp": {
            "name": "forward_warp",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "size_y": [
                    "int"
                ],
                "size_x": [
                    "int"
                ],
                "warped_img": [],
                "img_grid": [
                    "int"
                ],
                "img1": [
                    "int"
                ],
                "img2": [
                    "str"
                ],
                "path": [
                    "bool",
                    "str",
                    "bytes",
                    "bytearray",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "blend": {
            "name": "blend",
            "location": 173,
            "return": [],
            "arguments": {
                "vis_inverse": [],
                "max4y": [
                    "int"
                ],
                "min4y": [
                    "int"
                ],
                "max4x": [
                    "int",
                    "str"
                ],
                "min4x": [
                    "int"
                ],
                "img1": [
                    "str"
                ],
                "alpha": [
                    "int",
                    "float"
                ]
            }
        },
        "inverse_warp": {
            "name": "inverse_warp",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "size_y": [
                    "int",
                    "list[float]",
                    "list[str]",
                    "str"
                ],
                "size_x": [
                    "int",
                    "list[float]",
                    "list[str]",
                    "str"
                ],
                "wmg2_corners": [],
                "homography": [
                    "float",
                    "int",
                    "set[int]",
                    "None"
                ],
                "img1": [
                    "float",
                    "int",
                    "bytes",
                    "str",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "typing.Type"
                ],
                "img2": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "path": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "warp": {
            "name": "warp",
            "location": 227,
            "return": [
                "int"
            ],
            "arguments": {
                "img1": [
                    "int",
                    "str",
                    "None",
                    "list[typing.Any]"
                ],
                "img2": [
                    "int",
                    "str",
                    "None",
                    "list[typing.Any]"
                ],
                "homography": [
                    "bool",
                    "list[]",
                    "list[str]",
                    "float"
                ],
                "path_list": [
                    "list[str]"
                ]
            }
        }
    },
    "ComputerVision-master/HW3/APIS/__init__.py": {},
    "ComputerVision-master/HW4/run.py": {},
    "ComputerVision-master/HW4/SFM/apis.py": {
        "sift": {
            "name": "sift",
            "location": 9,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "img_path": [
                    "str",
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "str_path": [
                    "str",
                    "bool"
                ],
                "show_flag": [
                    "bool"
                ]
            }
        },
        "knnmatch": {
            "name": "knnmatch",
            "location": 41,
            "return": [
                "dict[, list[]]"
            ],
            "arguments": {
                "des_list": [
                    "list[typing.Union[int,float]]",
                    "list[]",
                    "list[tuple[typing.Union[str,int]]]",
                    "list[dict[, ]]",
                    "list[str]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "find_matches": {
            "name": "find_matches",
            "location": 65,
            "return": [
                "list[list[typing.Union[tuple[typing.Union[str,int]],tuple[typing.Union[str,float]],str]]]"
            ],
            "arguments": {
                "rawmatch": [
                    "dict[str, str]",
                    "dict[, ]",
                    "dict[str, int]",
                    "dict[str, float]"
                ],
                "ratio": [
                    "list[dict[str, str]]",
                    "str",
                    "bool"
                ]
            }
        },
        "save_matching_img": {
            "name": "save_matching_img",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "img_list": [
                    "str",
                    "list[]"
                ],
                "kps_list": [],
                "matches": [
                    "list[]",
                    "str"
                ],
                "path": [
                    "str",
                    "tuple[str]",
                    "None"
                ]
            }
        },
        "homomat": {
            "name": "homomat",
            "location": 116,
            "return": [],
            "arguments": {
                "min_match_count": [
                    "int",
                    "float"
                ],
                "src": [
                    "str",
                    "list[str]"
                ],
                "dst": []
            }
        },
        "ransac": {
            "name": "ransac",
            "location": 133,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "matches": [],
                "kps_list": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "min_match_count": [
                    "int",
                    "float"
                ],
                "num_test": [
                    "bool"
                ],
                "threshold": [
                    "float"
                ]
            }
        },
        "find_newimage_size": {
            "name": "find_newimage_size",
            "location": 175,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "warped_img": [
                    "str"
                ],
                "img_height": [
                    "float",
                    "bool",
                    "typing.Callable[..., None]"
                ],
                "img_width": [
                    "int",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "forward_warp": {
            "name": "forward_warp",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "size_y": [
                    "int"
                ],
                "size_x": [
                    "int"
                ],
                "warped_img": [],
                "img_grid": [
                    "int"
                ],
                "img1": [
                    "int"
                ],
                "img2": [
                    "str"
                ],
                "path": [
                    "bool",
                    "str",
                    "bytes",
                    "bytearray",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "blend": {
            "name": "blend",
            "location": 205,
            "return": [],
            "arguments": {
                "vis_inverse": [],
                "max4y": [
                    "int"
                ],
                "min4y": [
                    "int"
                ],
                "max4x": [
                    "int",
                    "str"
                ],
                "min4x": [
                    "int"
                ],
                "img1": [
                    "str"
                ],
                "alpha": [
                    "int",
                    "float"
                ]
            }
        },
        "inverse_warp": {
            "name": "inverse_warp",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "size_y": [
                    "int",
                    "list[float]",
                    "list[str]",
                    "str"
                ],
                "size_x": [
                    "int",
                    "list[float]",
                    "list[str]",
                    "str"
                ],
                "wmg2_corners": [],
                "homography": [
                    "float",
                    "int",
                    "set[int]",
                    "None"
                ],
                "img1": [
                    "float",
                    "int",
                    "bytes",
                    "str",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "typing.Type"
                ],
                "img2": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "path": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "warp": {
            "name": "warp",
            "location": 259,
            "return": [
                "int"
            ],
            "arguments": {
                "img1": [
                    "int",
                    "str",
                    "None",
                    "list[typing.Any]"
                ],
                "img2": [
                    "int",
                    "str",
                    "None",
                    "list[typing.Any]"
                ],
                "homography": [
                    "bool",
                    "list[]",
                    "list[str]",
                    "float"
                ],
                "path_list": [
                    "list[str]"
                ]
            }
        }
    },
    "ComputerVision-master/HW4/SFM/fundamental_matrix.py": {
        "_normalize": {
            "name": "_normalize",
            "location": 9,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "input_matrix": []
            }
        },
        "_get_system_equation": {
            "name": "_get_system_equation",
            "location": 34,
            "return": [],
            "arguments": {
                "img1_points": [
                    "str",
                    "tuple[typing.Union[bytes,bytes,bytes]]"
                ],
                "img2_points": [
                    "str",
                    "tuple[typing.Union[bytes,bytes,bytes]]"
                ]
            }
        },
        "find_fundamental_matrix": {
            "name": "find_fundamental_matrix",
            "location": 44,
            "return": [],
            "arguments": {
                "cor_point_im1": [
                    "int",
                    "set[]",
                    "str"
                ],
                "cor_point_im2": [
                    "int",
                    "set[]",
                    "str"
                ]
            }
        },
        "compute_correspond_epilines": {
            "name": "compute_correspond_epilines",
            "location": 96,
            "return": [],
            "arguments": {
                "cor_point_im": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "bytes",
                    "str",
                    "float"
                ],
                "which_image": [
                    "bool",
                    "str",
                    "None"
                ],
                "fundamental_matrix": [
                    "list[str]",
                    "list[]",
                    "int",
                    "None"
                ]
            }
        },
        "drawlines": {
            "name": "drawlines",
            "location": 114,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "img1": [
                    "int",
                    "list[]"
                ],
                "img2": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "float",
                    "typing.Type"
                ],
                "lines": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "pts1": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "pts2": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        }
    },
    "ComputerVision-master/HW4/SFM/reconstruction.py": {
        "linear_triangulation": {
            "name": "linear_triangulation",
            "location": 4,
            "return": [],
            "arguments": {
                "p1": [],
                "p2": [],
                "m1": [],
                "m2": []
            }
        },
        "get_4_possible_projection_matrix": {
            "name": "get_4_possible_projection_matrix",
            "location": 23,
            "return": [
                "list[]"
            ],
            "arguments": {
                "E": [
                    "str",
                    "typing.Type",
                    "list[int]"
                ]
            }
        },
        "correspondence_matrix": {
            "name": "correspondence_matrix",
            "location": 40,
            "return": [],
            "arguments": {
                "p1": [
                    "str"
                ],
                "p2": [
                    "str"
                ]
            }
        },
        "_find_essential_matrix": {
            "name": "_find_essential_matrix",
            "location": 51,
            "return": [],
            "arguments": {
                "x1": [
                    "float"
                ],
                "x2": [
                    "float"
                ]
            }
        },
        "_normalize": {
            "name": "_normalize",
            "location": 63,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "points": []
            }
        },
        "compute_essential": {
            "name": "compute_essential",
            "location": 80,
            "return": [],
            "arguments": {
                "p1": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "p2": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "get_correct_P": {
            "name": "get_correct_P",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "p1": [
                    "str",
                    "float",
                    "list[numpy.ndarray]",
                    "bool",
                    "None"
                ],
                "p2": [
                    "str",
                    "float",
                    "list[numpy.ndarray]",
                    "bool",
                    "None"
                ],
                "m1": [
                    "str",
                    "float",
                    "list[numpy.ndarray]",
                    "bool",
                    "None"
                ],
                "m2": [
                    "bool",
                    "list[tuple[typing.Union[int,int]]]",
                    "float"
                ]
            }
        }
    },
    "ComputerVision-master/HW4/SFM/__init__.py": {}
}
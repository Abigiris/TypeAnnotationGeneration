{
    "EmployeeScheduler-master/DeepQScheduler/action.py": {
        "Action.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dayIndex": [],
                "employeeIndex": [],
                "shiftIndex": [],
                "stateIndex": []
            }
        },
        "Action.DayIndex": {
            "name": "DayIndex",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Action.EmployeeIndex": {
            "name": "EmployeeIndex",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Action.ShiftIndex": {
            "name": "ShiftIndex",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Action.StateIndex": {
            "name": "StateIndex",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "EmployeeScheduler-master/DeepQScheduler/addOnlyEnvironment.py": {
        "AddOnlyEnvironment.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddOnlyEnvironment._createState": {
            "name": "_createState",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddOnlyEnvironment._createActions": {
            "name": "_createActions",
            "location": 18,
            "return": [
                "list[Action]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddOnlyEnvironment._calculateDayStartIndexes": {
            "name": "_calculateDayStartIndexes",
            "location": 31,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddOnlyEnvironment.reset": {
            "name": "reset",
            "location": 42,
            "return": [
                "str",
                "tuple[typing.Union[int,str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddOnlyEnvironment.step": {
            "name": "step",
            "location": 47,
            "return": [
                "tuple[typing.Union[list[],float,typing.Deque,frozenset,dict[str, int],int,tuple[typing.Union[typing.Any,typing.Any]],dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "actionIndex": [
                    "dict[, ]"
                ]
            }
        },
        "AddOnlyEnvironment._calculateReward": {
            "name": "_calculateReward",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "actionIndex": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "AddOnlyEnvironment._isDone": {
            "name": "_isDone",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "reward": [
                    "dict[, ]",
                    "str",
                    "bool"
                ]
            }
        },
        "AddOnlyEnvironment._setState": {
            "name": "_setState",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actionIndex": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "AddOnlyEnvironment.toRosterViewerFormat": {
            "name": "toRosterViewerFormat",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddOnlyEnvironment._employeeShiftsToRosterString": {
            "name": "_employeeShiftsToRosterString",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "employee": [
                    "bool",
                    "str"
                ]
            }
        },
        "AddOnlyEnvironment.num_states": {
            "name": "num_states",
            "location": 124,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddOnlyEnvironment.num_actions": {
            "name": "num_actions",
            "location": 128,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "EmployeeScheduler-master/DeepQScheduler/constants.py": {},
    "EmployeeScheduler-master/DeepQScheduler/main.py": {},
    "EmployeeScheduler-master/DeepQScheduler/memory.py": {
        "Memory.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_memory": []
            }
        },
        "Memory.add_sample": {
            "name": "add_sample",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample": []
            }
        },
        "Memory.sample": {
            "name": "sample",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "no_samples": []
            }
        }
    },
    "EmployeeScheduler-master/DeepQScheduler/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_states": [
                    "int",
                    "str"
                ],
                "num_actions": [
                    "int",
                    "None",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "float",
                    "list[float]",
                    "list[str]"
                ]
            }
        },
        "Model._define_model": {
            "name": "_define_model",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.predict_one": {
            "name": "predict_one",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "int"
                ],
                "sess": [
                    "int"
                ]
            }
        },
        "Model.predict_batch": {
            "name": "predict_batch",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "states": [
                    "list[int]",
                    "bool"
                ],
                "sess": [
                    "list[int]",
                    "bool"
                ]
            }
        },
        "Model.train_batch": {
            "name": "train_batch",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sess": [
                    "bool",
                    "float"
                ],
                "x_batch": [
                    "bool",
                    "float"
                ],
                "y_batch": [
                    "bool",
                    "float"
                ]
            }
        },
        "Model.num_states": {
            "name": "num_states",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.num_actions": {
            "name": "num_actions",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.batch_size": {
            "name": "batch_size",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.var_init": {
            "name": "var_init",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "EmployeeScheduler-master/DeepQScheduler/person.py": {
        "Person.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "workSchedule": [],
                "dayOffs": []
            }
        },
        "Person.removeShift": {
            "name": "removeShift",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "Person.applyAction": {
            "name": "applyAction",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "Person.reset": {
            "name": "reset",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.hasAssignmentOnDay": {
            "name": "hasAssignmentOnDay",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "day": []
            }
        },
        "Person.isDayOff": {
            "name": "isDayOff",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "day": []
            }
        },
        "Person._tryAddWeekend": {
            "name": "_tryAddWeekend",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "Person._tryRemoveWeekend": {
            "name": "_tryRemoveWeekend",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "Person._tryIncrementConsecutiveWorkingDays": {
            "name": "_tryIncrementConsecutiveWorkingDays",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "Person.TotalWorkedMinutes": {
            "name": "TotalWorkedMinutes",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Person.WorkSchedule": {
            "name": "WorkSchedule",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Person.ShiftCount": {
            "name": "ShiftCount",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Person.WorkingWeekendCount": {
            "name": "WorkingWeekendCount",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Person.ConsecutiveWorkingDays": {
            "name": "ConsecutiveWorkingDays",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Person.Shifts": {
            "name": "Shifts",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "EmployeeScheduler-master/DeepQScheduler/runner.py": {
        "Runner.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sess": [],
                "model": [],
                "env": [],
                "memory": [],
                "max_eps": [],
                "min_eps": [],
                "decay": []
            }
        },
        "Runner.run": {
            "name": "run",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner._choose_action": {
            "name": "_choose_action",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Runner._replay": {
            "name": "_replay",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.reward_store": {
            "name": "reward_store",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.max_x_store": {
            "name": "max_x_store",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "EmployeeScheduler-master/DeepQScheduler/schedulingModel.py": {
        "SchedulingModel.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dayCount": [
                    "int",
                    "float",
                    "str"
                ],
                "employeeCount": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "SchedulingModel.reset": {
            "name": "reset",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulingModel._createEmployees": {
            "name": "_createEmployees",
            "location": 15,
            "return": [
                "list[Person]"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "bool"
                ]
            }
        },
        "SchedulingModel._createDemandCounts": {
            "name": "_createDemandCounts",
            "location": 25,
            "return": [
                "list[typing.Union[int,float]]"
            ],
            "arguments": {
                "self": [],
                "demandCount": [
                    "int",
                    "float"
                ]
            }
        },
        "SchedulingModel.calculateDemandPenalty": {
            "name": "calculateDemandPenalty",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulingModel.dayCount": {
            "name": "dayCount",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchedulingModel.employees": {
            "name": "employees",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchedulingModel.demandCounts": {
            "name": "demandCounts",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "EmployeeScheduler-master/DeepQScheduler/workSchedule.py": {
        "WorkSchedule.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minTotalMinutes": [
                    "int",
                    "float"
                ],
                "maxTotalMinutes": [
                    "int",
                    "float",
                    "None"
                ],
                "maxShiftNumber": [
                    "int",
                    "float",
                    "None"
                ],
                "maxWorkingWeekend": [
                    "int",
                    "float",
                    "None"
                ],
                "minConsecutiveWorkingDays": [
                    "int",
                    "float"
                ],
                "maxConsecutiveWorkingDays": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "WorkSchedule.MinTotalMinutes": {
            "name": "MinTotalMinutes",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSchedule.MaxTotalMinutes": {
            "name": "MaxTotalMinutes",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSchedule.MaxShiftNumber": {
            "name": "MaxShiftNumber",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSchedule.MaxWorkingWeekend": {
            "name": "MaxWorkingWeekend",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSchedule.MinConsecutiveWorkingDays": {
            "name": "MinConsecutiveWorkingDays",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkSchedule.MaxConsecutiveWorkingDays": {
            "name": "MaxConsecutiveWorkingDays",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
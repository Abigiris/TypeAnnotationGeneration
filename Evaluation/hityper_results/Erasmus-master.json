{
    "Erasmus-master/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_do_run_migrations": {
            "name": "_do_run_migrations",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "connection": []
            }
        },
        "_do_run_migrations.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "revision": [],
                "directives": []
            }
        }
    },
    "Erasmus-master/alembic/versions/0f780af615ef_add_confess_tables.py": {
        "_get_paragraph_records": {
            "name": "_get_paragraph_records",
            "location": 39,
            "return": [
                "tuple[list[dict[typing.Text, typing.Union[int,str,None,dict[, ]]]]]"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "data": [
                    "str",
                    "bytes",
                    "list[]"
                ]
            }
        },
        "_get_qa_records": {
            "name": "_get_qa_records",
            "location": 57,
            "return": [
                "list[dict[typing.Text, typing.Union[str,int,list[],list[str],typing.Callable[, ],typing.DefaultDict,typing.Type,tuple[int],dict[typing.Any, int],dict[, ],list[bool],dict[str, list[typing.Any]]]]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "list[]",
                    "list[str]",
                    "typing.Callable[, ]"
                ],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/43c0cf2239c4_add_canons_of_dort.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/499dad92327d_initial_structure.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/53ed37276d53_add_keach.py": {
        "_get_qa_records": {
            "name": "_get_qa_records",
            "location": 32,
            "return": [
                "list[dict[typing.Text, typing.Union[str,int,list[],list[str],typing.Callable[, ],typing.DefaultDict,typing.Type,tuple[int],dict[typing.Any, int],dict[, ],list[bool],dict[str, list[typing.Any]]]]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "list[]",
                    "list[str]",
                    "typing.Callable[, ]"
                ],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/69e765223549_add_confessions_tables_and_1689.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/7cdaa5513f2d_add_rtl_column.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/85d51f96a1cd_add_guild_prefs.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/a1dbd23261c3_add_wcf.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/ac322afa9c4d_add_index_to_paragraph_text.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/b00769d6f457_add_article_tables.py": {
        "_get_article_records": {
            "name": "_get_article_records",
            "location": 39,
            "return": [
                "list[dict[typing.Text, typing.Union[str,int,list[],list[str],typing.Callable[, ],dict[, ],typing.DefaultDict,typing.Type,dict[int, list[str]],dict[str, str],typing.Pattern,set[str]]]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "list[]",
                    "list[str]",
                    "typing.Callable[, ]"
                ],
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/cbef96b83a96_reorganize_confession_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/dc5428c022bd_make_some_columns_not_nullable.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/e7aff6447fbe_add_books_column.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/alembic/versions/fafb6b454c85_remove_canons_of_dort.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/checks.py": {
        "is_owner": {
            "name": "is_owner",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/config.py": {},
    "Erasmus-master/erasmus/context.py": {},
    "Erasmus-master/erasmus/data.py": {
        "get_book_data": {
            "name": "get_book_data",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_books_for_mask": {
            "name": "get_books_for_mask",
            "location": 151,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "Verse.__str__": {
            "name": "__str__",
            "location": 170,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "VerseRange.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VerseRange.verses": {
            "name": "verses",
            "location": 193,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "VerseRange.__str__": {
            "name": "__str__",
            "location": 204,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "VerseRange.from_string": {
            "name": "from_string",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "VerseRange.from_string_with_version": {
            "name": "from_string_with_version",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "VerseRange.from_match": {
            "name": "from_match",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "VerseRange.get_all_from_string": {
            "name": "get_all_from_string",
            "location": 248,
            "return": [
                "list[Exception]"
            ],
            "arguments": {}
        },
        "Passage.citation": {
            "name": "citation",
            "location": 286,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {}
        },
        "Passage.__str__": {
            "name": "__str__",
            "location": 292,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "SearchResults.__iter__": {
            "name": "__iter__",
            "location": 301,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/erasmus.py": {},
    "Erasmus-master/erasmus/exceptions.py": {
        "BibleNotSupportedError.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BookNotUnderstoodError.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BookNotInVersionError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ReferenceNotUnderstoodError.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ServiceNotSupportedError.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ServiceTimeout.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ServiceLookupTimeout.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ServiceSearchTimeout.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "InvalidVersionError.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "InvalidConfessionError.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NoSectionError.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "NoSectionsError.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/format.py": {
        "int_to_roman": {
            "name": "int_to_roman",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "roman_to_int": {
            "name": "roman_to_int",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/help.py": {
        "HelpCommand._get_command_title": {
            "name": "_get_command_title",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "HelpCommand.add_command_formatting": {
            "name": "add_command_formatting",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/json.py": {
        "get": {
            "name": "get",
            "location": 6,
            "return": [
                "str",
                "typing.Match",
                "None",
                "float",
                "dict[, ]",
                "tuple[typing.Optional[typing.Any]]",
                "typing.Type",
                "typing.DefaultDict"
            ],
            "arguments": {}
        },
        "has": {
            "name": "has",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/page_source.py": {
        "BasePages.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "PageSource.needs_pagination": {
            "name": "needs_pagination",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "PageSource.get_max_pages": {
            "name": "get_max_pages",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "PageSource.get_total": {
            "name": "get_total",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "ListPageSource.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "ListPageSource.needs_pagination": {
            "name": "needs_pagination",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListPageSource.get_max_pages": {
            "name": "get_max_pages",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListPageSource.get_total": {
            "name": "get_total",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncCallback.__call__": {
            "name": "__call__",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "AsyncPageSource.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [],
            "arguments": {}
        },
        "AsyncPageSource.needs_pagination": {
            "name": "needs_pagination",
            "location": 192,
            "return": [],
            "arguments": {}
        },
        "AsyncPageSource.get_max_pages": {
            "name": "get_max_pages",
            "location": 195,
            "return": [],
            "arguments": {}
        },
        "AsyncPageSource.get_total": {
            "name": "get_total",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "FieldPageSource.get_field_values": {
            "name": "get_field_values",
            "location": 253,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/run.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/service_manager.py": {
        "ServiceManager.__contains__": {
            "name": "__contains__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ServiceManager.__len__": {
            "name": "__len__",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "ServiceManager.from_config": {
            "name": "from_config",
            "location": 63,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/types.py": {
        "Bible.command": {
            "name": "command",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bible.name": {
            "name": "name",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bible.abbr": {
            "name": "abbr",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bible.service": {
            "name": "service",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bible.service_version": {
            "name": "service_version",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bible.rtl": {
            "name": "rtl",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bible.books": {
            "name": "books",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Erasmus-master/erasmus/ui_pages.py": {
        "PagesModal.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "pages": []
            }
        },
        "UIPages.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "UIPages.allowed_user_ids": {
            "name": "allowed_user_ids",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UIPages.has_embed_permission": {
            "name": "has_embed_permission",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UIPages.fill_items": {
            "name": "fill_items",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "UIPages._update_labels": {
            "name": "_update_labels",
            "location": 173,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/utils.py": {
        "_get_passage_text": {
            "name": "_get_passage_text",
            "location": 27,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "Option.key": {
            "name": "key",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.name": {
            "name": "name",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.matches": {
            "name": "matches",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Option.choice": {
            "name": "choice",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoCompleter.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoCompleter.add": {
            "name": "add",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AutoCompleter.update": {
            "name": "update",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AutoCompleter.clear": {
            "name": "clear",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoCompleter.discard": {
            "name": "discard",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AutoCompleter.remove": {
            "name": "remove",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AutoCompleter.choices": {
            "name": "choices",
            "location": 109,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/__init__.py": {},
    "Erasmus-master/erasmus/cogs/admin.py": {
        "_RunError.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "formatted": []
            }
        },
        "_EvalModal.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin": []
            }
        },
        "_EvalModal._cleanup_code": {
            "name": "_cleanup_code",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        }
    },
    "Erasmus-master/erasmus/cogs/bible.py": {},
    "Erasmus-master/erasmus/cogs/confession.py": {},
    "Erasmus-master/erasmus/cogs/creeds.py": {},
    "Erasmus-master/erasmus/cogs/misc.py": {
        "get_about_embed": {
            "name": "get_about_embed",
            "location": 51,
            "return": [
                "Embed"
            ],
            "arguments": {
                "bot": [
                    "str",
                    "bool"
                ]
            }
        },
        "InviteView.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AboutView.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/cogs/__init__.py": {},
    "Erasmus-master/erasmus/db/base.py": {},
    "Erasmus-master/erasmus/db/bible.py": {},
    "Erasmus-master/erasmus/db/confession.py": {
        "_search_columns": {
            "name": "_search_columns",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "ConfessionTypeEnum.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "NumberingTypeEnum.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "Confession.type": {
            "name": "type",
            "location": 354,
            "return": [],
            "arguments": {}
        },
        "Confession.numbering": {
            "name": "numbering",
            "location": 358,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/db/__init__.py": {},
    "Erasmus-master/erasmus/services/apibible.py": {
        "ApiBible.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ApiBible.__get_passage_id": {
            "name": "__get_passage_id",
            "location": 50,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "ApiBible.__transform_verse": {
            "name": "__transform_verse",
            "location": 66,
            "return": [
                "Passage"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/services/base_service.py": {
        "BaseService.replace_special_escapes": {
            "name": "replace_special_escapes",
            "location": 43,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/services/biblegateway.py": {
        "BibleGateway.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BibleGateway.__transform_verse_node": {
            "name": "__transform_verse_node",
            "location": 30,
            "return": [
                "Passage"
            ],
            "arguments": {}
        },
        "BibleGateway.search.mapper": {
            "name": "mapper",
            "location": 138,
            "return": [],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/services/unbound.py": {
        "Unbound.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Erasmus-master/erasmus/services/__init__.py": {},
    "Erasmus-master/tests/conftest.py": {
        "vcr_config": {
            "name": "vcr_config",
            "location": 14,
            "return": [
                "dict[typing.Text, list[typing.Text]]"
            ],
            "arguments": {}
        },
        "fixture_MockBible": {
            "name": "fixture_MockBible",
            "location": 29,
            "return": [
                "MockBible"
            ],
            "arguments": {}
        },
        "mock_response": {
            "name": "mock_response",
            "location": 34,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "mocker": [
                    "typing.Iterable[]"
                ]
            }
        },
        "mock_client_session": {
            "name": "mock_client_session",
            "location": 42,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "mocker": [],
                "mock_response": [
                    "dict[str, str]"
                ]
            }
        },
        "mock_aiohttp": {
            "name": "mock_aiohttp",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "mock_client_session": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "Erasmus-master/tests/test_context.py": {
        "MockUser.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContext.mock_context_send": {
            "name": "mock_context_send",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestContext.string_view": {
            "name": "string_view",
            "location": 52,
            "return": [
                "StringView"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Erasmus-master/tests/test_data.py": {
        "TestVerse.test_init": {
            "name": "test_init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerse.test__str__": {
            "name": "test__str__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerse.test__eq__": {
            "name": "test__eq__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verse": [
                    "str",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "expected": [
                    "str",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "TestVerse.test__ne__": {
            "name": "test__ne__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verse": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestVerseRange.test_init": {
            "name": "test_init",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVerseRange.test__str__": {
            "name": "test__str__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestVerseRange.test__eq__": {
            "name": "test__eq__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "str",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "expected": [
                    "str",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "TestVerseRange.test__ne__": {
            "name": "test__ne__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestVerseRange.test_from_string": {
            "name": "test_from_string",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage_str": [
                    "str"
                ],
                "expected": [
                    "str",
                    "None",
                    "list[int]"
                ]
            }
        },
        "TestVerseRange.test_get_all_from_string_optional": {
            "name": "test_get_all_from_string_optional",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage_str": [
                    "str",
                    "list[]"
                ],
                "only_bracketed": [
                    "str",
                    "list[]"
                ],
                "expected": [
                    "str",
                    "int",
                    "float",
                    "typing.Callable[..., bool]"
                ]
            }
        },
        "TestVerseRange.test_from_string_raises": {
            "name": "test_from_string_raises",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage_str": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "TestPassage.test_init": {
            "name": "test_init",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPassage.test__str__": {
            "name": "test__str__",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPassage.test__eq__": {
            "name": "test__eq__",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "str",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "expected": [
                    "str",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "TestPassage.test__ne__": {
            "name": "test__ne__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passage": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestSearchResults.test_init": {
            "name": "test_init",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSearchResults.test__eq__": {
            "name": "test__eq__",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestSearchResults.test__ne__": {
            "name": "test__ne__",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "bool"
                ],
                "expected": [
                    "bool"
                ]
            }
        }
    },
    "Erasmus-master/tests/test_erasmus.py": {
        "MockUser.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockMessage.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockCommand.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "MockContext.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "Erasmus-master/tests/test_json.py": {
        "test_get": {
            "name": "test_get",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "list[int]"
                ],
                "key": [
                    "str",
                    "int",
                    "list[int]"
                ],
                "expected": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "test_jsonobject_has": {
            "name": "test_jsonobject_has",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "tuple[typing.Union[str,str]]",
                    "list[typing.Optional[typing.Any]]",
                    "list[str]",
                    "None"
                ],
                "key": [
                    "str",
                    "int",
                    "tuple[typing.Union[str,str]]",
                    "list[typing.Optional[typing.Any]]",
                    "list[str]",
                    "None"
                ],
                "expected": [
                    "str",
                    "int",
                    "tuple[typing.Union[str,str]]",
                    "list[typing.Optional[typing.Any]]",
                    "list[str]",
                    "None"
                ]
            }
        }
    },
    "Erasmus-master/tests/test_service_manager.py": {
        "MockService.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "MockBible.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServiceManager.services": {
            "name": "services",
            "location": 48,
            "return": [
                "dict[typing.Text, list[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "TestServiceManager.service_one": {
            "name": "service_one",
            "location": 60,
            "return": [
                "MockService"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestServiceManager.service_two": {
            "name": "service_two",
            "location": 64,
            "return": [
                "MockService"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestServiceManager.config": {
            "name": "config",
            "location": 68,
            "return": [
                "dict[typing.Text, dict[typing.Text, dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServiceManager.bible1": {
            "name": "bible1",
            "location": 72,
            "return": [
                "MockBible"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServiceManager.bible2": {
            "name": "bible2",
            "location": 82,
            "return": [
                "MockBible"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestServiceManager.test_from_config": {
            "name": "test_from_config",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "services": [
                    "str"
                ],
                "config": [
                    "str"
                ],
                "mock_client_session": [
                    "str"
                ]
            }
        },
        "TestServiceManager.test_container_methods": {
            "name": "test_container_methods",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "mock_client_session": []
            }
        }
    },
    "Erasmus-master/tests/test_utils.py": {
        "mock_send_embed": {
            "name": "mock_send_embed",
            "location": 17,
            "return": [],
            "arguments": {
                "mocker": [
                    "typing.Iterable[str]"
                ]
            }
        },
        "MockOption.matches": {
            "name": "matches",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "MockOption.choice": {
            "name": "choice",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_init": {
            "name": "test_init",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_add": {
            "name": "test_add",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_update": {
            "name": "test_update",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_clear": {
            "name": "test_clear",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_discard": {
            "name": "test_discard",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_remove": {
            "name": "test_remove",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutoCompleter.test_choices": {
            "name": "test_choices",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Erasmus-master/tests/__init__.py": {},
    "Erasmus-master/tests/cogs/test_bible.py": {
        "mock_bot": {
            "name": "mock_bot",
            "location": 24,
            "return": [
                "Mock"
            ],
            "arguments": {
                "mocker": [
                    "typing.Iterable[]",
                    "int"
                ]
            }
        },
        "TestBible.mock_service_manager": {
            "name": "mock_service_manager",
            "location": 34,
            "return": [
                "MockServiceManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBible.test_instantiate": {
            "name": "test_instantiate",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_bot": [],
                "mock_service_manager": []
            }
        },
        "TestBibleAppCommands.mock_service_manager": {
            "name": "mock_service_manager",
            "location": 46,
            "return": [
                "MockServiceManager"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBibleAppCommands.test_instantiate": {
            "name": "test_instantiate",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_bot": [],
                "mock_service_manager": []
            }
        }
    },
    "Erasmus-master/tests/cogs/test_confession.py": {
        "TestConfession.mock_bot": {
            "name": "mock_bot",
            "location": 15,
            "return": [
                "MockBot"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfession.test_instantiate": {
            "name": "test_instantiate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_bot": []
            }
        }
    },
    "Erasmus-master/tests/cogs/test_creeds.py": {
        "TestCreeds.mock_bot": {
            "name": "mock_bot",
            "location": 15,
            "return": [
                "MockBot"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreeds.test_instantiate": {
            "name": "test_instantiate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_bot": []
            }
        }
    },
    "Erasmus-master/tests/cogs/test_misc.py": {
        "TestMisc.mock_bot": {
            "name": "mock_bot",
            "location": 15,
            "return": [
                "MockBot"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMisc.test_instantiate": {
            "name": "test_instantiate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_bot": []
            }
        }
    },
    "Erasmus-master/tests/cogs/__init__.py": {},
    "Erasmus-master/tests/services/test_apibible.py": {
        "TestApiBible.search_data": {
            "name": "search_data",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "TestApiBible.passage_data": {
            "name": "passage_data",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestApiBible.config": {
            "name": "config",
            "location": 285,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiBible.default_version": {
            "name": "default_version",
            "location": 295,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiBible.default_abbr": {
            "name": "default_abbr",
            "location": 299,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiBible.service": {
            "name": "service",
            "location": 303,
            "return": [
                "ApiBible"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "aiohttp_client_session": []
            }
        }
    },
    "Erasmus-master/tests/services/test_biblegateway.py": {
        "TestBibleGateway.search_data": {
            "name": "search_data",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "TestBibleGateway.passage_data": {
            "name": "passage_data",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "TestBibleGateway.default_version": {
            "name": "default_version",
            "location": 293,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBibleGateway.default_abbr": {
            "name": "default_abbr",
            "location": 297,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBibleGateway.service": {
            "name": "service",
            "location": 301,
            "return": [
                "BibleGateway"
            ],
            "arguments": {
                "self": [],
                "aiohttp_client_session": []
            }
        }
    },
    "Erasmus-master/tests/services/__init__.py": {
        "ServiceTest.bible": {
            "name": "bible",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "default_version": [],
                "default_abbr": [],
                "MockBible": []
            }
        }
    }
}
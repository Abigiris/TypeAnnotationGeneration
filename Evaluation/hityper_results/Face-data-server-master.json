{
    "Face-data-server-master/Debug.py": {
        "mapInt": {
            "name": "mapInt",
            "location": 10,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "float",
                    "dict[str, typing.Any]",
                    "typing.Callable[T, T]"
                ]
            }
        },
        "lines": {
            "name": "lines",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "img": [
                    "str",
                    "int"
                ],
                "center": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "ends": [
                    "str",
                    "bytes"
                ]
            }
        },
        "face2Image": {
            "name": "face2Image",
            "location": 32,
            "return": [],
            "arguments": {
                "size": [
                    "tuple[typing.Union[float,float]]",
                    "int",
                    "tuple[]",
                    "float",
                    "list[]"
                ],
                "face": [
                    "int",
                    "None"
                ],
                "frame": [
                    "None",
                    "int",
                    "list[int]"
                ]
            }
        },
        "lines.addOffset": {
            "name": "addOffset",
            "location": 19,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "Face-data-server-master/main.py": {
        "main": {
            "name": "main",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Face-data-server-master/FaceDataServer/faceDetection.py": {
        "faceCalibration": {
            "name": "faceCalibration",
            "location": 21,
            "return": [
                "tuple[typing.Union[str,list[dict[str, typing.Any]]]]"
            ],
            "arguments": {
                "cap": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "facemark": {
            "name": "facemark",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "gray_img": [
                    "str",
                    "int"
                ]
            }
        },
        "_waitUntilFaceDetect": {
            "name": "_waitUntilFaceDetect",
            "location": 76,
            "return": [],
            "arguments": {
                "cap": []
            }
        },
        "_isFaceExist": {
            "name": "_isFaceExist",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "gray_img": [
                    "str",
                    "int"
                ]
            }
        },
        "_getBiggestFace": {
            "name": "_getBiggestFace",
            "location": 102,
            "return": [],
            "arguments": {
                "faces": [
                    "str",
                    "bool"
                ]
            }
        },
        "_sortDpoints": {
            "name": "_sortDpoints",
            "location": 116,
            "return": [],
            "arguments": {
                "face": [
                    "typing.Iterable[str]",
                    "bool",
                    "typing.IO"
                ]
            }
        },
        "_points2dpoints": {
            "name": "_points2dpoints",
            "location": 200,
            "return": [],
            "arguments": {
                "ps": [
                    "str"
                ]
            }
        },
        "_toRelative": {
            "name": "_toRelative",
            "location": 214,
            "return": [],
            "arguments": {
                "target": [
                    "str",
                    "int",
                    "typing.Sequence[str]",
                    "typing.Iterable[str]"
                ],
                "center": [
                    "typing.Callable[list[], None]",
                    "dict[, ]"
                ]
            }
        },
        "_getBiggestFace.ln": {
            "name": "ln",
            "location": 107,
            "return": [],
            "arguments": {
                "p": []
            }
        }
    },
    "Face-data-server-master/FaceDataServer/Types.py": {
        "clamp": {
            "name": "clamp",
            "location": 601,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "_min": [
                    "int",
                    "float"
                ],
                "_max": [
                    "int",
                    "float"
                ]
            }
        },
        "Coord.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coord.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        },
        "Coord.__eq__": {
            "name": "__eq__",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Coord.__neg__": {
            "name": "__neg__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Coord.__add__": {
            "name": "__add__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Coord.__sub__": {
            "name": "__sub__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Coord.__mul__": {
            "name": "__mul__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Coord.__truediv__": {
            "name": "__truediv__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Coord.default": {
            "name": "default",
            "location": 116,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Coord.fromDPoint": {
            "name": "fromDPoint",
            "location": 121,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "list[T]",
                    "str"
                ],
                "p": [
                    "dict[, ]",
                    "list[T]",
                    "str"
                ]
            }
        },
        "Coord.toTuple": {
            "name": "toTuple",
            "location": 124,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coord.map": {
            "name": "map",
            "location": 127,
            "return": [
                "Coord"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "int"
                ]
            }
        },
        "AbsoluteCoord.__repr__": {
            "name": "__repr__",
            "location": 134,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbsoluteCoord.fromCoord": {
            "name": "fromCoord",
            "location": 137,
            "return": [
                "AbsoluteCoord"
            ],
            "arguments": {
                "c": [
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        },
        "RelativeCoord.__repr__": {
            "name": "__repr__",
            "location": 142,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelativeCoord.fromCoord": {
            "name": "fromCoord",
            "location": 145,
            "return": [
                "RelativeCoord"
            ],
            "arguments": {
                "c": [
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        },
        "Part.__eq__": {
            "name": "__eq__",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "Part.__repr__": {
            "name": "__repr__",
            "location": 163,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "int",
                    "float"
                ],
                "t": [
                    "str",
                    "float",
                    "int",
                    "list[int]"
                ],
                "l": [
                    "int",
                    "float"
                ],
                "r": [
                    "int",
                    "float"
                ]
            }
        },
        "Part.__neg__": {
            "name": "__neg__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Part.__add__": {
            "name": "__add__",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Part.__sub__": {
            "name": "__sub__",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Part.__mul__": {
            "name": "__mul__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Part.__truediv__": {
            "name": "__truediv__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Part.map": {
            "name": "map",
            "location": 204,
            "return": [
                "Part"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "dict[, ]"
                ]
            }
        },
        "Part.default": {
            "name": "default",
            "location": 212,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "tuple[str]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "Eye.__repr__": {
            "name": "__repr__",
            "location": 219,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mouth.__repr__": {
            "name": "__repr__",
            "location": 225,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nose.__repr__": {
            "name": "__repr__",
            "location": 231,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nose.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "list[]",
                    "typing.Callable[, ]"
                ],
                "l": [
                    "list[]",
                    "typing.Callable[, ]"
                ],
                "r": [
                    "list[]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Nose.__neg__": {
            "name": "__neg__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Nose.__add__": {
            "name": "__add__",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Nose.__sub__": {
            "name": "__sub__",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Nose.__mul__": {
            "name": "__mul__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str"
                ]
            }
        },
        "Nose.__truediv__": {
            "name": "__truediv__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str"
                ]
            }
        },
        "Nose.default": {
            "name": "default",
            "location": 261,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str",
                    "None",
                    "bool",
                    "typing.TextIO"
                ]
            }
        },
        "Nose.map": {
            "name": "map",
            "location": 265,
            "return": [
                "Nose"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "EyeBrow.__repr__": {
            "name": "__repr__",
            "location": 273,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Face.__init__": {
            "name": "__init__",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "float",
                    "dict[, ]"
                ],
                "lt": [
                    "int",
                    "float",
                    "dict[, ]"
                ],
                "rt": [
                    "int",
                    "float",
                    "dict[, ]"
                ],
                "tc": [
                    "int",
                    "float",
                    "dict[, ]"
                ],
                "le": [
                    "int",
                    "float",
                    "dict[, ]"
                ],
                "re": [
                    "list[list[int]]",
                    "str",
                    "int",
                    "None",
                    "list[int]"
                ],
                "m": [
                    "int",
                    "float"
                ],
                "n": [
                    "int",
                    "float",
                    "dict[, ]"
                ],
                "leb": [
                    "int",
                    "float",
                    "dict[, ]"
                ],
                "reb": [
                    "int",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "Face.__repr__": {
            "name": "__repr__",
            "location": 307,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Face.__eq__": {
            "name": "__eq__",
            "location": 314,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Face.__mul__": {
            "name": "__mul__",
            "location": 326,
            "return": [
                "Face"
            ],
            "arguments": {
                "s": [
                    "str",
                    "None",
                    "bytes",
                    "frozenset"
                ],
                "o": [
                    "str",
                    "None",
                    "bytes",
                    "frozenset"
                ]
            }
        },
        "Face.__truediv__": {
            "name": "__truediv__",
            "location": 332,
            "return": [
                "Face"
            ],
            "arguments": {
                "s": [
                    "str",
                    "None",
                    "bytes",
                    "frozenset"
                ],
                "o": [
                    "str",
                    "None",
                    "bytes",
                    "frozenset"
                ]
            }
        },
        "Face.defaultWithRatio": {
            "name": "defaultWithRatio",
            "location": 341,
            "return": [
                "tuple[typing.Union[bool,str,None,dict[str, typing.Any],typing.IO,typing.Callable[, ]]]"
            ],
            "arguments": {
                "cls": [],
                "defRatio": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "typing.IO",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Face.default": {
            "name": "default",
            "location": 345,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "Face.fromDPointsWithRatio": {
            "name": "fromDPointsWithRatio",
            "location": 354,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "bool",
                    "None"
                ],
                "points": [
                    "bytes",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "Face.fromDPoints": {
            "name": "fromDPoints",
            "location": 366,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "None",
                    "int",
                    "set[int]"
                ],
                "points": [
                    "dict[, ]",
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "Face.fixWithRatio": {
            "name": "fixWithRatio",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "int",
                    "float"
                ],
                "current": [
                    "int",
                    "float"
                ]
            }
        },
        "RawFaceData.default": {
            "name": "default",
            "location": 459,
            "return": [
                "RawFaceData"
            ],
            "arguments": {}
        },
        "RawFaceData.get": {
            "name": "get",
            "location": 463,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "list[bytes]",
                    "typing.Mapping"
                ],
                "face": [
                    "int",
                    "list[int]",
                    "typing.Type",
                    "str",
                    "list[str]"
                ]
            }
        },
        "RawFaceData.thresholded": {
            "name": "thresholded",
            "location": 487,
            "return": [
                "RawFaceData"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "FaceDetectionError.__init__": {
            "name": "__init__",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ex": [
                    "None",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "CapHasClosedError.__str__": {
            "name": "__str__",
            "location": 518,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FaceData.__init__": {
            "name": "__init__",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "str",
                    "list[float]",
                    "float",
                    "set[]",
                    "None",
                    "dict[str, tuple[typing.Union[str,int,int]]]"
                ],
                "y": [
                    "list[list[int]]",
                    "str",
                    "int",
                    "list[int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "z": [
                    "int",
                    "str"
                ],
                "mh": [
                    "int",
                    "str"
                ],
                "mw": [
                    "int",
                    "dict[str, str]"
                ],
                "le": [
                    "int",
                    "str"
                ],
                "re": [
                    "list[list[int]]",
                    "str",
                    "list[int]",
                    "None",
                    "float",
                    "int"
                ]
            }
        },
        "FaceData.default": {
            "name": "default",
            "location": 543,
            "return": [
                "FaceData"
            ],
            "arguments": {}
        },
        "FaceData.get": {
            "name": "get",
            "location": 547,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "list[int]",
                    "typing.Type",
                    "str",
                    "list[str]"
                ],
                "face": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "typing.Type"
                ],
                "calib": [
                    "str",
                    "typing.Type",
                    "dict[, ]",
                    "typing.Sequence[]",
                    "int"
                ]
            }
        },
        "FaceData.toBinary": {
            "name": "toBinary",
            "location": 586,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Part.__init__._coord": {
            "name": "_coord",
            "location": 168,
            "return": [
                "Coord"
            ],
            "arguments": {
                "c": []
            }
        },
        "Face.fromDPoints._normalize": {
            "name": "_normalize",
            "location": 369,
            "return": [
                "int"
            ],
            "arguments": {
                "smallest": [],
                "biggest": [],
                "current": []
            }
        },
        "Face.fromDPoints._normalizePoint": {
            "name": "_normalizePoint",
            "location": 377,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "Face.fromDPoints._point": {
            "name": "_point",
            "location": 386,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "Face-data-server-master/FaceDataServer/__init__.py": {},
    "Face-data-server-master/tests/conftest.py": {
        "_rotateCoord": {
            "name": "_rotateCoord",
            "location": 102,
            "return": [],
            "arguments": {
                "c": [
                    "list[list[T]]",
                    "list[T]"
                ],
                "theta": [
                    "int"
                ]
            }
        },
        "round_Coord": {
            "name": "round_Coord",
            "location": 160,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "round_Part": {
            "name": "round_Part",
            "location": 164,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "round_Face": {
            "name": "round_Face",
            "location": 171,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "MockedCap.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opened": [
                    "None",
                    "bool"
                ],
                "frame": [
                    "None",
                    "bool"
                ]
            }
        },
        "MockedCap.isOpened": {
            "name": "isOpened",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockedCap.read": {
            "name": "read",
            "location": 193,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockedCap.release": {
            "name": "release",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Face-data-server-master/tests/test_faceDetection.py": {
        "check_isFaceExist": {
            "name": "check_isFaceExist",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "faceNum": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "expected": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "test_waitUntilFaceDetect_CapHasClosedError": {
            "name": "test_waitUntilFaceDetect_CapHasClosedError",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": []
            }
        },
        "test_waitUntilFaceDetect_faceFound": {
            "name": "test_waitUntilFaceDetect_faceFound",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_waitUntilFaceDetect_faceNotFound": {
            "name": "test_waitUntilFaceDetect_faceNotFound",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getBiggestFace": {
            "name": "test_getBiggestFace",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getBiggestFace_noface": {
            "name": "test_getBiggestFace_noface",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_normalization": {
            "name": "test_normalization",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_faceCalibration": {
            "name": "test_faceCalibration",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_facemark": {
            "name": "test_facemark",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_facemark_noface": {
            "name": "test_facemark_noface",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test__toRelative": {
            "name": "test__toRelative",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str"
                ],
                "b": [
                    "int",
                    "str"
                ],
                "c": [
                    "int",
                    "str"
                ]
            }
        },
        "test_waitUntilFaceDetect_faceNotFound._run": {
            "name": "_run",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test__toRelative._mkp": {
            "name": "_mkp",
            "location": 189,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "test__toRelative._pSub": {
            "name": "_pSub",
            "location": 193,
            "return": [],
            "arguments": {
                "t": [],
                "c": []
            }
        }
    },
    "Face-data-server-master/tests/test_Types.py": {
        "test_Coord__eq__": {
            "name": "test_Coord__eq__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "m": [
                    "int"
                ]
            }
        },
        "test_Coord__neg__": {
            "name": "test_Coord__neg__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_Coord__add__": {
            "name": "test_Coord__add__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str"
                ],
                "b": [
                    "int",
                    "float",
                    "str"
                ],
                "c": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_Coord__sub__": {
            "name": "test_Coord__sub__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "test_Coord_mul_and_div": {
            "name": "test_Coord_mul_and_div",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "float"
                ],
                "d": [
                    "int",
                    "float",
                    "dict[str, str]"
                ]
            }
        },
        "test_Coord_default": {
            "name": "test_Coord_default",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Coord_fromDPoint": {
            "name": "test_Coord_fromDPoint",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "test_AbsoluteCoord_fromCoord": {
            "name": "test_AbsoluteCoord_fromCoord",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_AbsoluteCoord__add__": {
            "name": "test_AbsoluteCoord__add__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "float"
                ],
                "b": [
                    "float"
                ],
                "c": [
                    "float"
                ]
            }
        },
        "test_AbsoluteCoord_mul_and_div": {
            "name": "test_AbsoluteCoord_mul_and_div",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "int",
                    "float",
                    "typing.Callable[T, bool]"
                ],
                "d": [
                    "float",
                    "int"
                ]
            }
        },
        "test_RelativeCoord_fromCoord": {
            "name": "test_RelativeCoord_fromCoord",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_RelativeCoord__add__": {
            "name": "test_RelativeCoord__add__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "float",
                    "int"
                ],
                "b": [
                    "float",
                    "int"
                ],
                "c": [
                    "float",
                    "int"
                ]
            }
        },
        "test_RelativeCoord_mul_and_div": {
            "name": "test_RelativeCoord_mul_and_div",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "float"
                ],
                "d": [
                    "int",
                    "float",
                    "dict[str, str]"
                ]
            }
        },
        "test_Part__init__": {
            "name": "test_Part__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "b": [
                    "float",
                    "int",
                    "str"
                ],
                "t": [
                    "float",
                    "int",
                    "str"
                ],
                "l": [
                    "float",
                    "int",
                    "str"
                ],
                "r": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "test_Part__init__typeMismatch": {
            "name": "test_Part__init__typeMismatch",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Part__neg__": {
            "name": "test_Part__neg__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "test_Part__add__": {
            "name": "test_Part__add__",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "tuple[int]",
                    "str"
                ],
                "b": [
                    "int"
                ],
                "c": [
                    "float",
                    "int"
                ]
            }
        },
        "test_Part__sub__": {
            "name": "test_Part__sub__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "None",
                    "typing.Any"
                ]
            }
        },
        "test_Part_mul_and_div": {
            "name": "test_Part_mul_and_div",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [
                    "float",
                    "int",
                    "str",
                    "list[str]"
                ],
                "d": [
                    "typing.Sequence[typing.Any]",
                    "None",
                    "typing.Callable[str, str]",
                    "str"
                ]
            }
        },
        "test_Part_default": {
            "name": "test_Part_default",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Nose__init__": {
            "name": "test_Nose__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "tuple[int]",
                    "float"
                ],
                "b": [
                    "int"
                ],
                "c": [
                    "int"
                ]
            }
        },
        "test_Nose__neg__": {
            "name": "test_Nose__neg__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "test_Nose__add__": {
            "name": "test_Nose__add__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str"
                ],
                "b": [
                    "int",
                    "float",
                    "typing.Callable[, ]"
                ],
                "c": [
                    "int",
                    "list[int]",
                    "float"
                ]
            }
        },
        "test_Nose__sub__": {
            "name": "test_Nose__sub__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "test_Nose_default": {
            "name": "test_Nose_default",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Face_default": {
            "name": "test_Face_default",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Face_fromDPoints": {
            "name": "test_Face_fromDPoints",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Face_mul_and_div": {
            "name": "test_Face_mul_and_div",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "list[typing.TextIO]",
                    "int",
                    "typing.Type"
                ],
                "d": [
                    "int",
                    "float"
                ]
            }
        },
        "test_RawFaceData_thresholded_noaffect": {
            "name": "test_RawFaceData_thresholded_noaffect",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "eD": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "fH": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "fC": [
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "test_RawFaceData_thresholded_affect": {
            "name": "test_RawFaceData_thresholded_affect",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_RawFaceData_default": {
            "name": "test_RawFaceData_default",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_RawFaceData_get": {
            "name": "test_RawFaceData_get",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "face": [
                    "str",
                    "dict[int, dict[, ]]",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "eD": [],
                "fH": [],
                "fC": []
            }
        },
        "test_Part__init__._2C": {
            "name": "_2C",
            "location": 126,
            "return": [
                "Coord"
            ],
            "arguments": {
                "t": []
            }
        },
        "test_Part__init__._2P": {
            "name": "_2P",
            "location": 129,
            "return": [],
            "arguments": {
                "t": []
            }
        }
    },
    "Face-data-server-master/tools/helen-study.py": {
        "generate_xml": {
            "name": "generate_xml",
            "location": 32,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "face_position": {
            "name": "face_position",
            "location": 76,
            "return": [],
            "arguments": {
                "gray_img": []
            }
        },
        "main": {
            "name": "main",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "IFT6135-master/Assignment1/download.py": {},
    "IFT6135-master/Assignment1/nn.py": {
        "NN.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_dims": [
                    "tuple[int]"
                ],
                "n_hidden": [
                    "int"
                ],
                "mode": [
                    "typing.Text"
                ],
                "datapath": [
                    "None"
                ],
                "model_path": [
                    "None"
                ]
            }
        },
        "NN.initialize_weights": {
            "name": "initialize_weights",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_hidden": [],
                "dims": []
            }
        },
        "NN.forward": {
            "name": "forward",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "labels": []
            }
        },
        "NN.activation": {
            "name": "activation",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "NN.loss": {
            "name": "loss",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prediction": []
            }
        },
        "NN.softmax": {
            "name": "softmax",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "NN.backward": {
            "name": "backward",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [],
                "labels": []
            }
        },
        "NN.update": {
            "name": "update",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grads": []
            }
        },
        "NN.train": {
            "name": "train",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NN.test": {
            "name": "test",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFT6135-master/Assignment2/models.py": {
        "glorot_init": {
            "name": "glorot_init",
            "location": 52,
            "return": [],
            "arguments": {
                "weight": []
            }
        },
        "one_hot_encoding": {
            "name": "one_hot_encoding",
            "location": 55,
            "return": [],
            "arguments": {
                "x": [],
                "vocab_size": []
            }
        },
        "num_trainable_params": {
            "name": "num_trainable_params",
            "location": 74,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "clones": {
            "name": "clones",
            "location": 382,
            "return": [],
            "arguments": {
                "module": [],
                "N": []
            }
        },
        "make_model": {
            "name": "make_model",
            "location": 648,
            "return": [],
            "arguments": {
                "vocab_size": [],
                "n_blocks": [],
                "n_units": [],
                "n_heads": [],
                "dropout": []
            }
        },
        "subsequent_mask": {
            "name": "subsequent_mask",
            "location": 672,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "BaseRNNCell.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": [],
                "dropout_keep_prob": []
            }
        },
        "BaseRNNCell.forward": {
            "name": "forward",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "hidden_state": []
            }
        },
        "VanillaRNNCell.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VanillaRNNCell.forward": {
            "name": "forward",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "hidden_state": []
            }
        },
        "GRURNNCell.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GRURNNCell.forward": {
            "name": "forward",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "x_t": [],
                "h_t": []
            }
        },
        "RNNBase.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "emb_size": [],
                "hidden_size": [],
                "seq_len": [],
                "batch_size": [],
                "vocab_size": [],
                "num_layers": [],
                "dp_keep_prob": [],
                "cell_type": []
            }
        },
        "RNNBase.init_weights": {
            "name": "init_weights",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNBase.init_hidden": {
            "name": "init_hidden",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RNNBase.forward": {
            "name": "forward",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "hidden": []
            }
        },
        "RNNBase.generate": {
            "name": "generate",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "input": [],
                "hidden": [],
                "generated_seq_len": []
            }
        },
        "RNN.__init__": {
            "name": "__init__",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GRU.__init__": {
            "name": "__init__",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AttentionHead.__init__": {
            "name": "__init__",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "d_model": [],
                "d_k": [],
                "d_v": [],
                "drop_prob": []
            }
        },
        "AttentionHead.forward": {
            "name": "forward",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "Q": [],
                "K": [],
                "V": [],
                "mask": []
            }
        },
        "MultiHeadedAttention.__init__": {
            "name": "__init__",
            "location": 492,
            "return": [],
            "arguments": {
                "self": [],
                "n_heads": [],
                "n_units": [],
                "dropout": []
            }
        },
        "MultiHeadedAttention.init_weights": {
            "name": "init_weights",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadedAttention.forward": {
            "name": "forward",
            "location": 544,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "key": [],
                "value": [],
                "mask": []
            }
        },
        "WordEmbedding.__init__": {
            "name": "__init__",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "n_units": [],
                "vocab": []
            }
        },
        "WordEmbedding.forward": {
            "name": "forward",
            "location": 577,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "PositionalEncoding.__init__": {
            "name": "__init__",
            "location": 583,
            "return": [],
            "arguments": {
                "self": [],
                "n_units": [],
                "dropout": [],
                "max_len": []
            }
        },
        "PositionalEncoding.forward": {
            "name": "forward",
            "location": 597,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TransformerBlock.__init__": {
            "name": "__init__",
            "location": 609,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "self_attn": [],
                "feed_forward": [],
                "dropout": []
            }
        },
        "TransformerBlock.forward": {
            "name": "forward",
            "location": 616,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "mask": []
            }
        },
        "TransformerStack.__init__": {
            "name": "__init__",
            "location": 625,
            "return": [],
            "arguments": {
                "self": [],
                "layer": [],
                "n_blocks": []
            }
        },
        "TransformerStack.forward": {
            "name": "forward",
            "location": 630,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "mask": []
            }
        },
        "FullTransformer.__init__": {
            "name": "__init__",
            "location": 637,
            "return": [],
            "arguments": {
                "self": [],
                "transformer_stack": [],
                "embedding": [],
                "n_units": [],
                "vocab_size": []
            }
        },
        "FullTransformer.forward": {
            "name": "forward",
            "location": 643,
            "return": [],
            "arguments": {
                "self": [],
                "input_sequence": [],
                "mask": []
            }
        },
        "Batch.__init__": {
            "name": "__init__",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "pad": []
            }
        },
        "Batch.make_mask": {
            "name": "make_mask",
            "location": 685,
            "return": [],
            "arguments": {
                "data": [],
                "pad": []
            }
        },
        "LayerNorm.__init__": {
            "name": "__init__",
            "location": 698,
            "return": [],
            "arguments": {
                "self": [],
                "features": [],
                "eps": []
            }
        },
        "LayerNorm.forward": {
            "name": "forward",
            "location": 704,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ResidualSkipConnectionWithLayerNorm.__init__": {
            "name": "__init__",
            "location": 715,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "dropout": []
            }
        },
        "ResidualSkipConnectionWithLayerNorm.forward": {
            "name": "forward",
            "location": 720,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "sublayer": []
            }
        },
        "MLP.__init__": {
            "name": "__init__",
            "location": 729,
            "return": [],
            "arguments": {
                "self": [],
                "n_units": [],
                "dropout": []
            }
        },
        "MLP.forward": {
            "name": "forward",
            "location": 735,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "IFT6135-master/Assignment2/ptb-lm.py": {
        "_read_words": {
            "name": "_read_words",
            "location": 203,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_build_vocab": {
            "name": "_build_vocab",
            "location": 207,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "_file_to_word_ids": {
            "name": "_file_to_word_ids",
            "location": 219,
            "return": [],
            "arguments": {
                "filename": [],
                "word_to_id": []
            }
        },
        "ptb_raw_data": {
            "name": "ptb_raw_data",
            "location": 224,
            "return": [],
            "arguments": {
                "data_path": [],
                "prefix": []
            }
        },
        "ptb_iterator": {
            "name": "ptb_iterator",
            "location": 236,
            "return": [],
            "arguments": {
                "raw_data": [],
                "batch_size": [],
                "num_steps": []
            }
        },
        "repackage_hidden": {
            "name": "repackage_hidden",
            "location": 343,
            "return": [],
            "arguments": {
                "h": []
            }
        },
        "run_epoch": {
            "name": "run_epoch",
            "location": 361,
            "return": [],
            "arguments": {
                "model": [],
                "data": [],
                "is_train": [],
                "lr": []
            }
        },
        "Batch.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "pad": []
            }
        },
        "Batch.make_mask": {
            "name": "make_mask",
            "location": 263,
            "return": [],
            "arguments": {
                "data": [],
                "pad": []
            }
        },
        "Batch.make_mask.subsequent_mask": {
            "name": "subsequent_mask",
            "location": 266,
            "return": [],
            "arguments": {
                "size": []
            }
        }
    },
    "IFT6135-master/Assignment2/q5-1.py": {},
    "IFT6135-master/Assignment2/q5-2.py": {
        "run_batch": {
            "name": "run_batch",
            "location": 9,
            "return": [],
            "arguments": {
                "model": [],
                "data": [
                    "bool",
                    "str"
                ]
            }
        },
        "run_batch.register_grad_hook": {
            "name": "register_grad_hook",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "tensor": []
            }
        },
        "run_batch.register_grad_hook.hook": {
            "name": "hook",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "grad": []
            }
        }
    },
    "IFT6135-master/Assignment2/q5-3.py": {
        "generate_sequences": {
            "name": "generate_sequences",
            "location": 8,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "model_type": [
                    "str",
                    "Exception"
                ],
                "generated_seq_len": [
                    "int",
                    "list[str]",
                    "float"
                ],
                "batch_size_used": [
                    "int"
                ],
                "starting_word": [
                    "typing.Text"
                ]
            }
        }
    },
    "IFT6135-master/Assignment2/q5.py": {
        "_read_words": {
            "name": "_read_words",
            "location": 25,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_build_vocab": {
            "name": "_build_vocab",
            "location": 29,
            "return": [
                "tuple[typing.Union[dict[, ],dict[typing.Any, dict[typing.Any, typing.Any]],dict[typing.Type, str],dict[str, typing.Union[int,None]]]]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_file_to_word_ids": {
            "name": "_file_to_word_ids",
            "location": 41,
            "return": [
                "list[typing.Union[str,bytes]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "typing.MutableMapping",
                    "list[]",
                    "int",
                    "bytes"
                ],
                "word_to_id": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ptb_raw_data": {
            "name": "ptb_raw_data",
            "location": 46,
            "return": [
                "tuple[typing.Union[list[str],str,list[],bytes,dict[str, str],list[dict[str, typing.Any]],list[tuple[typing.Union[str,str,str,str]]],int,tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]],dict[, ],set[str],list[typing.Optional[str]]]]"
            ],
            "arguments": {
                "data_path": [
                    "None",
                    "str"
                ],
                "prefix": [
                    "typing.Text"
                ]
            }
        },
        "ptb_iterator": {
            "name": "ptb_iterator",
            "location": 59,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "raw_data": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "float"
                ],
                "num_steps": [
                    "int"
                ]
            }
        },
        "repackage_hidden": {
            "name": "repackage_hidden",
            "location": 106,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "h": []
            }
        },
        "run_epoch": {
            "name": "run_epoch",
            "location": 123,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "model": [],
                "data": [],
                "is_train": [
                    "bool"
                ],
                "lr": [
                    "float"
                ]
            }
        },
        "get_best_model": {
            "name": "get_best_model",
            "location": 168,
            "return": [
                "None",
                "int",
                "tuple[]",
                "str",
                "typing.Type",
                "GRU",
                "RNN"
            ],
            "arguments": {
                "model_type": [
                    "str",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "Batch.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "bytes",
                    "int"
                ],
                "pad": [
                    "int"
                ]
            }
        },
        "Batch.make_mask": {
            "name": "make_mask",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "data": [],
                "pad": [
                    "str",
                    "bytes",
                    "list[str]",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "Batch.make_mask.subsequent_mask": {
            "name": "subsequent_mask",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "size": []
            }
        }
    },
    "IFT6135-master/Assignment3/classify_svhn.py": {
        "get_data_loader": {
            "name": "get_data_loader",
            "location": 21,
            "return": [
                "tuple[typing.Union[int,list[],str,list[float],float,dict[, ]]]"
            ],
            "arguments": {
                "dataset_location": [
                    "int",
                    "float",
                    "None",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float,float]]"
                ]
            }
        },
        "get_data_loaderNoNormalize": {
            "name": "get_data_loaderNoNormalize",
            "location": 57,
            "return": [
                "tuple[typing.Union[int,list[],str,list[float],float]]"
            ],
            "arguments": {
                "dataset_location": [
                    "int",
                    "str",
                    "float",
                    "None"
                ],
                "batch_size": [
                    "bool",
                    "float",
                    "tuple[typing.Union[float,float,float]]",
                    "str"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 141,
            "return": [
                "float"
            ],
            "arguments": {
                "classify": [],
                "dataset": [
                    "str"
                ]
            }
        },
        "Classifier.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Classifier.forward": {
            "name": "forward",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Classifier.extract_features": {
            "name": "extract_features",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "IFT6135-master/Assignment3/density_estimation.py": {
        "estimate_density": {
            "name": "estimate_density",
            "location": 55,
            "return": [],
            "arguments": {
                "xx": [
                    "list[]",
                    "bool"
                ]
            }
        }
    },
    "IFT6135-master/Assignment3/mnist_loader.py": {
        "get_data_loader": {
            "name": "get_data_loader",
            "location": 11,
            "return": [
                "list[]"
            ],
            "arguments": {
                "dataset_location": [
                    "str",
                    "None",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "str",
                    "tuple[int]"
                ]
            }
        },
        "get_data_loader.lines_to_np_array": {
            "name": "lines_to_np_array",
            "location": 14,
            "return": [],
            "arguments": {
                "lines": []
            }
        }
    },
    "IFT6135-master/Assignment3/q1.py": {
        "jensen_shannon_divergence": {
            "name": "jensen_shannon_divergence",
            "location": 18,
            "return": [],
            "arguments": {
                "network": [],
                "x": [],
                "y": []
            }
        },
        "wasserstein_distance": {
            "name": "wasserstein_distance",
            "location": 27,
            "return": [],
            "arguments": {
                "network": [],
                "x": [],
                "y": []
            }
        },
        "gradient_pernalty": {
            "name": "gradient_pernalty",
            "location": 38,
            "return": [],
            "arguments": {
                "model": [],
                "x": [],
                "y": []
            }
        },
        "maximize_objective": {
            "name": "maximize_objective",
            "location": 64,
            "return": [],
            "arguments": {
                "objective": [],
                "p": [],
                "q": [],
                "network": [],
                "maxsteps": [],
                "threshold": []
            }
        },
        "gaussian_distribution": {
            "name": "gaussian_distribution",
            "location": 169,
            "return": [],
            "arguments": {
                "mean": [],
                "std": [],
                "mini_batch_size": []
            }
        },
        "to_tensors": {
            "name": "to_tensors",
            "location": 179,
            "return": [],
            "arguments": {
                "generator": []
            }
        },
        "get_optimal_discriminator": {
            "name": "get_optimal_discriminator",
            "location": 187,
            "return": [],
            "arguments": {
                "f_0": [],
                "f_1": []
            }
        },
        "q1": {
            "name": "q1",
            "location": 225,
            "return": [],
            "arguments": {
                "p": [],
                "q": []
            }
        },
        "q2": {
            "name": "q2",
            "location": 229,
            "return": [],
            "arguments": {
                "p": [],
                "q": []
            }
        },
        "q3": {
            "name": "q3",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "q4": {
            "name": "q4",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "gradient_pernalty.random_interpolation": {
            "name": "random_interpolation",
            "location": 42,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "NumpyBuffer.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "capacity": []
            }
        },
        "NumpyBuffer.put": {
            "name": "put",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "StopIfConverged.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "patience": [],
                "threshold": [],
                "maximizing": []
            }
        },
        "StopIfConverged.__call__": {
            "name": "__call__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "get_optimal_discriminator.discriminator_value_fn": {
            "name": "discriminator_value_fn",
            "location": 188,
            "return": [],
            "arguments": {
                "network": [],
                "x": [],
                "y": []
            }
        },
        "get_optimal_discriminator.disc_numpy": {
            "name": "disc_numpy",
            "location": 210,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "q3.get_samples": {
            "name": "get_samples",
            "location": 236,
            "return": [],
            "arguments": {
                "phi": []
            }
        }
    },
    "IFT6135-master/Assignment3/q2.py": {
        "ELBO": {
            "name": "ELBO",
            "location": 71,
            "return": [],
            "arguments": {
                "output": [],
                "target": [
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "bool"
                ],
                "mu": [],
                "logvar": [
                    "bool"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 76,
            "return": [
                "float"
            ],
            "arguments": {
                "model": [],
                "valid": [],
                "device": [
                    "int",
                    "float",
                    "str"
                ],
                "method": [
                    "typing.Text"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "int"
                ]
            }
        },
        "importance_sample_vae": {
            "name": "importance_sample_vae",
            "location": 127,
            "return": [],
            "arguments": {
                "vae": [
                    "float",
                    "int"
                ],
                "x": [],
                "z": [],
                "device": [
                    "typing.Sequence[T]"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "dict[, ]",
                    "str",
                    "typing.IO",
                    "bool"
                ]
            }
        },
        "Encoder.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latent_size": [
                    "int"
                ]
            }
        },
        "Encoder.forward": {
            "name": "forward",
            "location": 27,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "Decoder.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.forward": {
            "name": "forward",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str"
                ]
            }
        },
        "VAE.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VAE.forward": {
            "name": "forward",
            "location": 65,
            "return": [
                "tuple[typing.Union[str,typing.Pattern,int,list[],tuple[typing.Union[int,int,int,int]],float]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "IFT6135-master/Assignment3/q3_gan.py": {
        "gradient_penalty": {
            "name": "gradient_penalty",
            "location": 67,
            "return": [],
            "arguments": {
                "reals": [
                    "int",
                    "float"
                ],
                "fakes": [
                    "int",
                    "float"
                ],
                "gan": []
            }
        },
        "random_interpolation": {
            "name": "random_interpolation",
            "location": 89,
            "return": [],
            "arguments": {
                "x": [],
                "y": [
                    "float",
                    "list[float]"
                ]
            }
        },
        "visual_samples": {
            "name": "visual_samples",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "gan": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "dimensions": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "device": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "svhn_loader": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "step": [
                    "int"
                ]
            }
        },
        "disentangled_representation": {
            "name": "disentangled_representation",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "gan": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "dimensions": [
                    "int"
                ],
                "device": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "epsilon": [
                    "int"
                ]
            }
        },
        "interpolation": {
            "name": "interpolation",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "gan": [
                    "dict[str, tuple[typing.Union[int,int]]]",
                    "int",
                    "list[]",
                    "float"
                ],
                "dimensions": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "device": [
                    "int"
                ]
            }
        },
        "save_1000_images": {
            "name": "save_1000_images",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "img_dir": [
                    "str",
                    "None"
                ]
            }
        },
        "Discriminator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Discriminator.forward": {
            "name": "forward",
            "location": 27,
            "return": [
                "int",
                "list[]",
                "dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Generator.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Generator.forward": {
            "name": "forward",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "GAN.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "IFT6135-master/Assignment3/q3_vae.py": {
        "ELBO": {
            "name": "ELBO",
            "location": 56,
            "return": [
                "float"
            ],
            "arguments": {
                "output": [],
                "target": [
                    "str"
                ],
                "mu": [],
                "logvar": [
                    "bool"
                ]
            }
        },
        "visual_samples": {
            "name": "visual_samples",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "vae": [
                    "str",
                    "bool",
                    "float",
                    "list[list[str]]"
                ],
                "dimensions": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "device": [
                    "str"
                ],
                "svhn_loader": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "disentangled_representation": {
            "name": "disentangled_representation",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "vae": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "dimensions": [
                    "int"
                ],
                "device": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "epsilon": [
                    "int"
                ]
            }
        },
        "make_tensor": {
            "name": "make_tensor",
            "location": 97,
            "return": [
                "tuple[typing.Union[str,str]]",
                "str",
                "None"
            ],
            "arguments": {
                "tens_list": [
                    "list[tuple[typing.Union[str,str]]]",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "interpolation": {
            "name": "interpolation",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "vae": [
                    "dict[str, tuple[typing.Union[int,int]]]",
                    "int",
                    "list[]",
                    "float"
                ],
                "dimensions": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "device": [
                    "int"
                ]
            }
        },
        "save_1000_images": {
            "name": "save_1000_images",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "img_dir": [
                    "str"
                ]
            }
        },
        "Encoder.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "latent_size": [
                    "int"
                ]
            }
        },
        "Encoder.forward": {
            "name": "forward",
            "location": 27,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "Decoder.forward": {
            "name": "forward",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "VAE.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VAE.forward": {
            "name": "forward",
            "location": 50,
            "return": [
                "tuple[typing.Union[str,typing.Pattern,int,list[],tuple[typing.Union[int,int,int,int]],float]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "IFT6135-master/Assignment3/samplers.py": {
        "distribution1": {
            "name": "distribution1",
            "location": 5,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ]
            }
        },
        "distribution2": {
            "name": "distribution2",
            "location": 11,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "batch_size": [
                    "int"
                ]
            }
        },
        "distribution3": {
            "name": "distribution3",
            "location": 17,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "batch_size": [
                    "int"
                ]
            }
        },
        "distribution4": {
            "name": "distribution4",
            "location": 24,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "batch_size": [
                    "int"
                ]
            }
        }
    },
    "IFT6135-master/Assignment3/score_fid.py": {
        "get_sample_loader": {
            "name": "get_sample_loader",
            "location": 15,
            "return": [
                "str",
                "int",
                "bytes",
                "dict[, ]",
                "range"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int"
                ],
                "batch_size": [
                    "int",
                    "bytes",
                    "list[float]"
                ]
            }
        },
        "get_test_loader": {
            "name": "get_test_loader",
            "location": 44,
            "return": [
                "int",
                "list[float]",
                "list[int]"
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "str"
                ]
            }
        },
        "extract_features": {
            "name": "extract_features",
            "location": 64,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "classifier": [
                    "bytes"
                ],
                "data_loader": [
                    "str"
                ]
            }
        },
        "calculate_fid_score": {
            "name": "calculate_fid_score",
            "location": 75,
            "return": [],
            "arguments": {
                "sample_feature_iterator": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "testset_feature_iterator": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ]
            }
        },
        "calculate_fid_score.take": {
            "name": "take",
            "location": 79,
            "return": [],
            "arguments": {
                "n": [],
                "iterable": []
            }
        }
    }
}
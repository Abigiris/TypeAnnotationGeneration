{
    "Insight_Project-master/flask_app_instabrand/helper_methods.py": {
        "get_user_timeline": {
            "name": "get_user_timeline",
            "location": 11,
            "return": [],
            "arguments": {
                "user": [
                    "str",
                    "typing.Type"
                ],
                "db_session": []
            }
        },
        "get_top_brands": {
            "name": "get_top_brands",
            "location": 32,
            "return": [
                "typing.DefaultDict",
                "int"
            ],
            "arguments": {
                "mysql_engine": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "get_top_influencers": {
            "name": "get_top_influencers",
            "location": 53,
            "return": [
                "typing.DefaultDict",
                "int"
            ],
            "arguments": {
                "mysql_engine": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "get_brand_metrics": {
            "name": "get_brand_metrics",
            "location": 73,
            "return": [
                "frozenset",
                "list[list[int]]",
                "dict[typing.Any, set[]]",
                "str"
            ],
            "arguments": {
                "mysql_engine": [
                    "int",
                    "list[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "Insight_Project-master/flask_app_instabrand/run.py": {},
    "Insight_Project-master/flask_app_instabrand/views.py": {
        "dashboard": {
            "name": "dashboard",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "render_map": {
            "name": "render_map",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "user_photos": {
            "name": "user_photos",
            "location": 67,
            "return": [],
            "arguments": {
                "username": [
                    "typing.Mapping",
                    "dict[typing.Type, typing.Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "page_not_found": {
            "name": "page_not_found",
            "location": 87,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "list[str]",
                    "str",
                    "tuple[]"
                ]
            }
        },
        "brand_metrics": {
            "name": "brand_metrics",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "consume_photos": {
            "name": "consume_photos",
            "location": 113,
            "return": [],
            "arguments": {}
        }
    },
    "Insight_Project-master/kafka_producers/main.py": {
        "generate_random_events": {
            "name": "generate_random_events",
            "location": 26,
            "return": [],
            "arguments": {
                "events": [
                    "dict[str, typing.Any]",
                    "list[]"
                ]
            }
        },
        "query_for_users": {
            "name": "query_for_users",
            "location": 39,
            "return": [],
            "arguments": {
                "mysql_session": []
            }
        },
        "query_for_tags": {
            "name": "query_for_tags",
            "location": 56,
            "return": [],
            "arguments": {
                "mysql_session": []
            }
        },
        "query_for_locations": {
            "name": "query_for_locations",
            "location": 73,
            "return": [],
            "arguments": {
                "mysql_session": []
            }
        },
        "main": {
            "name": "main",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "servers": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/comment.py": {
        "get_text": {
            "name": "get_text",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "comment_producer": {
            "name": "comment_producer",
            "location": 28,
            "return": [
                "None",
                "dict[typing.Text, typing.Union[str,dict[typing.Any, list[str]],dict[str, dict[int, typing.Any]],float]]"
            ],
            "arguments": {
                "users": [
                    "typing.Deque",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[str]",
                    "tuple[tuple[typing.Union[typing.Literal,typing.Any]]]"
                ],
                "photos": [
                    "typing.Deque",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[tuple[typing.Union[str,str,int,str,str]]]"
                ],
                "tags": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "locations": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "producer": [
                    "str",
                    "list[str]",
                    "dict[str, dict[str, str]]",
                    "dict[typing.Any, str]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/create_user.py": {
        "remove_non_alpha_chars": {
            "name": "remove_non_alpha_chars",
            "location": 18,
            "return": [],
            "arguments": {
                "string": [
                    "str",
                    "bool"
                ]
            }
        },
        "fake_user": {
            "name": "fake_user",
            "location": 32,
            "return": [
                "tuple[typing.Union[str,set[str],list[str],typing.Type,dict[, ]]]"
            ],
            "arguments": {}
        },
        "create_user_producer": {
            "name": "create_user_producer",
            "location": 50,
            "return": [
                "dict[typing.Text, typing.Union[str,int,float,list[]]]"
            ],
            "arguments": {
                "users": [
                    "list[tuple[str]]",
                    "list[str]",
                    "list[]"
                ],
                "photos": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "tags": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "locations": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "producer": [
                    "dict[str, dict[str, str]]",
                    "list[str]",
                    "bytes",
                    "dict[typing.Any, str]",
                    "str",
                    "dict[str, bytes]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/follow.py": {
        "follow_producer": {
            "name": "follow_producer",
            "location": 16,
            "return": [
                "dict[typing.Text, typing.Union[list[str],int,float,dict[typing.Any, list[str]],str,dict[str, dict[int, typing.Any]]]]"
            ],
            "arguments": {
                "users": [
                    "list[tuple[str]]",
                    "list[str]",
                    "typing.Deque"
                ],
                "photos": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "tags": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "locations": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "producer": [
                    "str",
                    "list[str]",
                    "dict[str, dict[str, str]]",
                    "dict[typing.Any, str]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/helper_functions.py": {
        "get_datetime": {
            "name": "get_datetime",
            "location": 11,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        }
    },
    "Insight_Project-master/kafka_producers/pkg/like.py": {
        "like_producer": {
            "name": "like_producer",
            "location": 16,
            "return": [
                "None",
                "dict[typing.Text, typing.Union[str,dict[typing.Any, list[str]],dict[str, dict[int, typing.Any]],float]]"
            ],
            "arguments": {
                "users": [
                    "typing.Deque",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[str]",
                    "tuple[tuple[typing.Union[typing.Literal,typing.Any]]]"
                ],
                "photos": [
                    "typing.Deque",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[tuple[typing.Union[str,str,int,str,str]]]"
                ],
                "tags": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "locations": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "producer": [
                    "str",
                    "list[str]",
                    "dict[str, dict[str, str]]",
                    "dict[typing.Any, str]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/photo_upload.py": {
        "create_photo_producer": {
            "name": "create_photo_producer",
            "location": 16,
            "return": [
                "dict[typing.Text, typing.Union[str,typing.Pattern,list[],dict[, ]]]"
            ],
            "arguments": {
                "users": [
                    "list[tuple[typing.Union[str,str]]]",
                    "list[str]",
                    "typing.Deque"
                ],
                "photos": [
                    "list[bool]",
                    "list[]"
                ],
                "tags": [
                    "list[tuple[typing.Union[str,str]]]",
                    "tuple[str]",
                    "list[str]"
                ],
                "locations": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "list[tuple[typing.Union[str,str,int,str,str]]]"
                ],
                "producer": [
                    "bytes",
                    "str",
                    "typing.Pattern",
                    "dict[str, bytes]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/unfollow.py": {
        "unfollow_producer": {
            "name": "unfollow_producer",
            "location": 16,
            "return": [
                "dict[typing.Text, typing.Union[list[str],int,float,dict[typing.Any, list[str]],str,dict[str, dict[int, typing.Any]]]]"
            ],
            "arguments": {
                "users": [
                    "list[tuple[str]]",
                    "list[str]",
                    "typing.Deque"
                ],
                "photos": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "tags": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "locations": [
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Deque",
                    "str"
                ],
                "producer": [
                    "str",
                    "list[str]",
                    "dict[str, dict[str, str]]",
                    "dict[typing.Any, str]"
                ]
            }
        }
    },
    "Insight_Project-master/kafka_producers/pkg/__init__.py": {},
    "Insight_Project-master/spark/python_backup/kafka_comment_consumer.py": {
        "getSparkSessionInstance": {
            "name": "getSparkSessionInstance",
            "location": 22,
            "return": [],
            "arguments": {
                "sparkConf": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "create_stream": {
            "name": "create_stream",
            "location": 31,
            "return": [],
            "arguments": {
                "spark_stream_context": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "zk_quorum": [
                    "str",
                    "dict[, ]"
                ],
                "group_name": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "topic_dict": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "process_comments": {
            "name": "process_comments",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "rdd": []
            }
        },
        "main": {
            "name": "main",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Insight_Project-master/spark/python_backup/kafka_create_users.py": {
        "getSparkSessionInstance": {
            "name": "getSparkSessionInstance",
            "location": 16,
            "return": [],
            "arguments": {
                "sparkConf": [
                    "dict[str, typing.Any]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "create_stream": {
            "name": "create_stream",
            "location": 26,
            "return": [],
            "arguments": {
                "spark_stream_context": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "zk_quorum": [
                    "str",
                    "dict[, ]"
                ],
                "group_name": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "topic_dict": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "process_users": {
            "name": "process_users",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "rdd": []
            }
        },
        "main": {
            "name": "main",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Insight_Project-master/spark/python_backup/kafka_follows_consumer.py": {
        "getSparkSessionInstance": {
            "name": "getSparkSessionInstance",
            "location": 18,
            "return": [],
            "arguments": {
                "sparkConf": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "create_stream": {
            "name": "create_stream",
            "location": 26,
            "return": [],
            "arguments": {
                "spark_stream_context": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ],
                "zk_quorum": [
                    "str",
                    "dict[, ]",
                    "set[str]"
                ],
                "group_name": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ],
                "topic_dict": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ]
            }
        },
        "process_follows": {
            "name": "process_follows",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "rdd": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Insight_Project-master/spark/python_backup/kafka_photo_consumer.py": {
        "getSparkSessionInstance": {
            "name": "getSparkSessionInstance",
            "location": 22,
            "return": [],
            "arguments": {
                "sparkConf": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "create_stream": {
            "name": "create_stream",
            "location": 31,
            "return": [],
            "arguments": {
                "spark_stream_context": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "zk_quorum": [
                    "str",
                    "dict[, ]"
                ],
                "group_name": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "topic_dict": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "process_photos": {
            "name": "process_photos",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "rdd": []
            }
        },
        "main": {
            "name": "main",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Insight_Project-master/spark/python_backup/kafka_unfollow_consumer.py": {
        "getSparkSessionInstance": {
            "name": "getSparkSessionInstance",
            "location": 16,
            "return": [],
            "arguments": {
                "sparkConf": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "create_stream": {
            "name": "create_stream",
            "location": 24,
            "return": [],
            "arguments": {
                "spark_stream_context": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ],
                "zk_quorum": [
                    "str",
                    "dict[, ]",
                    "set[str]"
                ],
                "group_name": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ],
                "topic_dict": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ]
            }
        },
        "process_follows": {
            "name": "process_follows",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "rdd": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
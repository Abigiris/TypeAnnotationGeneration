{
    "JiVE-Image-Viewer-master/build.py": {
        "get_platform": {
            "name": "get_platform",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "remove_file": {
            "name": "remove_file",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": []
            }
        },
        "remove_directory": {
            "name": "remove_directory",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "dname": []
            }
        },
        "call_external_command": {
            "name": "call_external_command",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": []
            }
        },
        "call_popen_with_env": {
            "name": "call_popen_with_env",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": [],
                "env": []
            }
        },
        "copytree": {
            "name": "copytree",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [],
                "dst": [],
                "symlinks": [
                    "bool"
                ],
                "ignore": [
                    "None"
                ]
            }
        },
        "pretty": {
            "name": "pretty",
            "location": 82,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "name": [],
                "force": [
                    "bool"
                ]
            }
        },
        "copy_dir": {
            "name": "copy_dir",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [],
                "dest": []
            }
        },
        "copy_file": {
            "name": "copy_file",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [],
                "dest": []
            }
        },
        "rename_file": {
            "name": "rename_file",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [],
                "dest": []
            }
        },
        "compile_ui_file": {
            "name": "compile_ui_file",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "in_file": [],
                "out_file": []
            }
        },
        "compile_rc_file": {
            "name": "compile_rc_file",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "in_file": [],
                "out_file": []
            }
        },
        "verify_config_file": {
            "name": "verify_config_file",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "exe_or_tests": []
            }
        },
        "replace_line_in_file": {
            "name": "replace_line_in_file",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [],
                "before": [],
                "after": []
            }
        },
        "clean": {
            "name": "clean",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_clean_dist": {
            "name": "_clean_dist",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "exe": {
            "name": "exe",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tests": {
            "name": "tests",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mypy": {
            "name": "mypy",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ui_compile": {
            "name": "ui_compile",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "rc_compile": {
            "name": "rc_compile",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "all_compile": {
            "name": "all_compile",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "JiVE-Image-Viewer-master/check_subreddits.py": {
        "wait": {
            "name": "wait",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check": {
            "name": "check",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "subreddits": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "JiVE-Image-Viewer-master/start.py": {},
    "JiVE-Image-Viewer-master/bookmarks/list_bookmarks.py": {
        "process": {
            "name": "process",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/categories/list_subreddits.py": {
        "process": {
            "name": "process",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/categories/location_of_user_data_dir.py": {},
    "JiVE-Image-Viewer-master/jive/autodetect.py": {
        "detect": {
            "name": "detect",
            "location": 33,
            "return": [
                "tuple[None]",
                "tuple[]",
                "tuple[str]",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/bookmarks.py": {
        "Bookmarks.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "None",
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "root_menu": [
                    "str",
                    "bool"
                ],
                "open_new_browser_tab_fn": [
                    "int",
                    "typing.Iterator",
                    "str",
                    "list[]",
                    "tuple[typing.Union[bool,str]]",
                    "list[dict[str, str]]"
                ]
            }
        },
        "Bookmarks.read": {
            "name": "read",
            "location": 25,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "Bookmarks._my_sorted": {
            "name": "_my_sorted",
            "location": 38,
            "return": [
                "list[str]",
                "str",
                "None",
                "typing.IO"
            ],
            "arguments": {
                "entries": [
                    "str",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "Bookmarks.extract_parts": {
            "name": "extract_parts",
            "location": 46,
            "return": [
                "tuple[]",
                "None"
            ],
            "arguments": {
                "entry": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Bookmarks.populate": {
            "name": "populate",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/cache.py": {
        "CacheElem.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_obj": []
            }
        },
        "CacheQueue.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache_dir": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "max_size_bytes": [
                    "int",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "CacheQueue.read_cache_dir": {
            "name": "read_cache_dir",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheQueue.add_elem": {
            "name": "add_elem",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "CacheQueue.remove_elem": {
            "name": "remove_elem",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheQueue.shrink": {
            "name": "shrink",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheQueue.debug": {
            "name": "debug",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "dict[str, str]"
                ],
                "cache_dir": [
                    "str",
                    "None"
                ]
            }
        },
        "Cache.enabled": {
            "name": "enabled",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cache.__contains__": {
            "name": "__contains__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool"
                ]
            }
        },
        "Cache.get_fname_to_url": {
            "name": "get_fname_to_url",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool"
                ]
            }
        },
        "Cache.save": {
            "name": "save",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict[, ]",
                    "str"
                ],
                "binary_data": []
            }
        },
        "Cache.add_to_queue": {
            "name": "add_to_queue",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "typing.Sequence[str]",
                    "typing.IO"
                ]
            }
        },
        "Cache.shrink": {
            "name": "shrink",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cache._read_cache_size": {
            "name": "_read_cache_size",
            "location": 131,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "dict[str, str]"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/categories.py": {
        "Categories.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "list[str]",
                    "tuple[typing.Union[list[str],typing.Any,None]]",
                    "str",
                    "tuple[typing.Union[int,str]]"
                ],
                "root_menu": [
                    "str"
                ],
                "open_subreddit_fn": [
                    "typing.Callable[Any,Any, typing.Any]",
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "Categories.read": {
            "name": "read",
            "location": 23,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "Categories._my_sorted": {
            "name": "_my_sorted",
            "location": 36,
            "return": [
                "list[str]",
                "str",
                "None",
                "typing.IO"
            ],
            "arguments": {
                "entries": [
                    "str",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "Categories.populate": {
            "name": "populate",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Categories.get_subreddits": {
            "name": "get_subreddits",
            "location": 55,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "Categories.get_random_subreddit": {
            "name": "get_random_subreddit",
            "location": 63,
            "return": [],
            "arguments": {}
        }
    },
    "JiVE-Image-Viewer-master/jive/commit.py": {
        "Commit.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "tuple[str]",
                    "typing.Any",
                    "None",
                    "str"
                ]
            }
        },
        "Commit.has_something_to_commit": {
            "name": "has_something_to_commit",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commit.to_save": {
            "name": "to_save",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commit.to_delete": {
            "name": "to_delete",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commit.to_wallpaper": {
            "name": "to_wallpaper",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commit._save_files": {
            "name": "_save_files",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "int",
                    "float"
                ],
                "lst": [],
                "msg": [
                    "str",
                    "list[str]"
                ],
                "method": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Commit.save_wallpapers": {
            "name": "save_wallpapers",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Commit.save_others": {
            "name": "save_others",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Commit.delete_files": {
            "name": "delete_files",
            "location": 96,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commit.delete_physically": {
            "name": "delete_physically",
            "location": 132,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "death_list": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/config.py": {
        "categories_file": {
            "name": "categories_file",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "bookmarks_file": {
            "name": "bookmarks_file",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "JiVE-Image-Viewer-master/jive/customurls.py": {
        "CustomUrls.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "int"
                ]
            }
        },
        "CustomUrls.paste_list_from_clipboard": {
            "name": "paste_list_from_clipboard",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomUrls.copy_list_to_clipboard": {
            "name": "copy_list_to_clipboard",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomUrls.clear_list": {
            "name": "clear_list",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomUrls.read_from_file": {
            "name": "read_from_file",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomUrls.ok_was_clicked": {
            "name": "ok_was_clicked",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomUrls.add_shortcuts": {
            "name": "add_shortcuts",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/duplicates.py": {
        "_set_file_sizes": {
            "name": "_set_file_sizes",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "list_of_images": [
                    "list[jive.imageproperty.ImageProperty]"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "dict[str, str]",
                    "dict[, ]",
                    "dict[str, dict[str, str]]"
                ]
            }
        },
        "_get_potential_duplicates": {
            "name": "_get_potential_duplicates",
            "location": 21,
            "return": [
                "list[typing.Union[str,typing.Any]]"
            ],
            "arguments": {
                "d": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "mark_duplicates": {
            "name": "mark_duplicates",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "list_of_images": [
                    "list[jive.imageproperty.ImageProperty]",
                    "dict[, ]",
                    "set[T]"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/exceptions.py": {},
    "JiVE-Image-Viewer-master/jive/fileops.py": {
        "generate_new_name": {
            "name": "generate_new_name",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "old_name_with_ext": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "folder": [
                    "str",
                    "bool",
                    "None",
                    "list[str]"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "img": [],
                "folder": [
                    "list[dict[, ]]",
                    "bool",
                    "typing.IO",
                    "dict[, ]",
                    "list[]"
                ],
                "cache": []
            }
        },
        "save_as": {
            "name": "save_as",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "img": [],
                "cache": [],
                "dest": [
                    "str"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/helper.py": {
        "read_image_files": {
            "name": "read_image_files",
            "location": 25,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "dir_path": [
                    "str"
                ]
            }
        },
        "get_page_as_requests_object": {
            "name": "get_page_as_requests_object",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ]
            }
        },
        "get_page_as_text": {
            "name": "get_page_as_text",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "get_page_as_soup": {
            "name": "get_page_as_soup",
            "location": 58,
            "return": [
                "BeautifulSoup",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "None"
                ]
            }
        },
        "pretty_num": {
            "name": "pretty_num",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "num": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "sizeof_fmt": {
            "name": "sizeof_fmt",
            "location": 76,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "num": [
                    "int",
                    "None"
                ]
            }
        },
        "file_size_fmt": {
            "name": "file_size_fmt",
            "location": 92,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "num": [
                    "int",
                    "str"
                ]
            }
        },
        "get_memory_usage": {
            "name": "get_memory_usage",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "color": {
            "name": "color",
            "location": 114,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "col": [
                    "str",
                    "int"
                ],
                "text": [
                    "str",
                    "int"
                ],
                "bold": [
                    "bool"
                ]
            }
        },
        "green": {
            "name": "green",
            "location": 121,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "bold": [
                    "bool"
                ]
            }
        },
        "red": {
            "name": "red",
            "location": 128,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "bold": [
                    "bool"
                ]
            }
        },
        "blue": {
            "name": "blue",
            "location": 132,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "bold": [
                    "bool"
                ]
            }
        },
        "yellow": {
            "name": "yellow",
            "location": 136,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "bold": [
                    "bool"
                ]
            }
        },
        "lightblue": {
            "name": "lightblue",
            "location": 140,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "bold": [
                    "bool"
                ]
            }
        },
        "gray": {
            "name": "gray",
            "location": 144,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "bold": [
                    "bool"
                ]
            }
        },
        "bold": {
            "name": "bold",
            "location": 148,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "text": [
                    "str",
                    "set[str]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "get_screen_size": {
            "name": "get_screen_size",
            "location": 152,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "app": []
            }
        },
        "get_screen_available_geometry": {
            "name": "get_screen_available_geometry",
            "location": 158,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "app": []
            }
        },
        "shorten": {
            "name": "shorten",
            "location": 164,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "text": [],
                "length": [
                    "int"
                ]
            }
        },
        "string_to_md5": {
            "name": "string_to_md5",
            "location": 172,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "file_to_md5": {
            "name": "file_to_md5",
            "location": 180,
            "return": [],
            "arguments": {
                "fname": [
                    "str"
                ],
                "block_size": [
                    "int"
                ]
            }
        },
        "get_referer": {
            "name": "get_referer",
            "location": 198,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        },
        "remove_duplicates": {
            "name": "remove_duplicates",
            "location": 207,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "lst": [
                    "str"
                ]
            }
        },
        "lev_dist": {
            "name": "lev_dist",
            "location": 222,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [],
                "t": []
            }
        },
        "clean": {
            "name": "clean",
            "location": 251,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "lines": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "filter_image_urls": {
            "name": "filter_image_urls",
            "location": 258,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "lst": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "get_image_urls_only": {
            "name": "get_image_urls_only",
            "location": 266,
            "return": [
                "list[tuple[typing.Union[int,typing.Any]]]",
                "typing.Iterator",
                "float",
                "frozenset",
                "str"
            ],
            "arguments": {
                "lst": [
                    "str",
                    "None",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "fold_urls": {
            "name": "fold_urls",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "lst": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "unfold_sequence_url": {
            "name": "unfold_sequence_url",
            "location": 288,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "text": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "collections.abc.AsyncIterator"
                ]
            }
        },
        "copy_text_to_clipboard": {
            "name": "copy_text_to_clipboard",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "get_text_from_clipboard": {
            "name": "get_text_from_clipboard",
            "location": 306,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "open_new_browser_tab": {
            "name": "open_new_browser_tab",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/help_dialogs.py": {
        "open_about": {
            "name": "open_about",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "bool",
                    "None",
                    "typing.Iterable[str]",
                    "str"
                ]
            }
        },
        "open_help": {
            "name": "open_help",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "JiVE-Image-Viewer-master/jive/icons_rc.py": {
        "qInitResources": {
            "name": "qInitResources",
            "location": 5246,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "qCleanupResources": {
            "name": "qCleanupResources",
            "location": 5249,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "JiVE-Image-Viewer-master/jive/imageinfo.py": {
        "ImageInfo.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "tuple[str]",
                    "typing.Any",
                    "None",
                    "str"
                ],
                "img": [
                    "set[str]",
                    "int",
                    "typing.Mapping",
                    "None",
                    "typing.Type",
                    "str",
                    "list[typing.Any]"
                ]
            }
        },
        "ImageInfo.grid_layout_creation_1": {
            "name": "grid_layout_creation_1",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageInfo.grid_layout_creation_2": {
            "name": "grid_layout_creation_2",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageInfo.copy_to_clipboard": {
            "name": "copy_to_clipboard",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "ImageInfo.add_shortcuts": {
            "name": "add_shortcuts",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/imagelist.py": {
        "ImageList.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "dict[, ]",
                    "int",
                    "tuple[typing.Type]",
                    "dict[str, str]"
                ]
            }
        },
        "ImageList.reset": {
            "name": "reset",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.get_curr_img": {
            "name": "get_curr_img",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageList.set_curr_img": {
            "name": "set_curr_img",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "bool",
                    "float"
                ]
            }
        },
        "ImageList.get_curr_img_idx": {
            "name": "get_curr_img_idx",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageList.set_curr_img_idx": {
            "name": "set_curr_img_idx",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "str"
                ]
            }
        },
        "ImageList.get_list_of_images": {
            "name": "get_list_of_images",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageList.set_list_of_images": {
            "name": "set_list_of_images",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "float",
                    "list[]",
                    "str"
                ]
            }
        },
        "ImageList._find_image_index_by_name": {
            "name": "_find_image_index_by_name",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "ImageList.shuffle_images": {
            "name": "shuffle_images",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.jump_to_next_image": {
            "name": "jump_to_next_image",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.jump_to_first_image": {
            "name": "jump_to_first_image",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.jump_to_last_image": {
            "name": "jump_to_last_image",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.jump_to_prev_image": {
            "name": "jump_to_prev_image",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.jump_five_percent_forward": {
            "name": "jump_five_percent_forward",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.jump_five_percent_backward": {
            "name": "jump_five_percent_backward",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.jump_to_image": {
            "name": "jump_to_image",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_idx": [
                    "int"
                ]
            }
        },
        "ImageList.jump_to_image_and_dont_care_about_the_previous_image": {
            "name": "jump_to_image_and_dont_care_about_the_previous_image",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int"
                ]
            }
        },
        "ImageList.preload_next_image": {
            "name": "preload_next_image",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.preload_prev_image": {
            "name": "preload_prev_image",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.free_others": {
            "name": "free_others",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.jump_to_random_image": {
            "name": "jump_to_random_image",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.jump_to_prev_random_image": {
            "name": "jump_to_prev_random_image",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.to_save": {
            "name": "to_save",
            "location": 286,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.to_delete": {
            "name": "to_delete",
            "location": 292,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.to_wallpaper": {
            "name": "to_wallpaper",
            "location": 298,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.has_something_to_commit": {
            "name": "has_something_to_commit",
            "location": 304,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.mark_all_images_to_save": {
            "name": "mark_all_images_to_save",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageList.get_image_list": {
            "name": "get_image_list",
            "location": 315,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/imageproperty.py": {
        "ImageProperty.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img": [
                    "str",
                    "None",
                    "dict[, ]",
                    "typing.Mapping"
                ],
                "parent": [
                    "bool",
                    "str",
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ImageProperty.to_pixmap": {
            "name": "to_pixmap",
            "location": 45,
            "return": [
                "tuple[typing.Union[QPixmap,int,ImportError,tuple[typing.Union[typing.Type,typing.Type]],bytes]]",
                "tuple[typing.Union[QPixmap,int]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "cache": []
            }
        },
        "ImageProperty.read": {
            "name": "read",
            "location": 88,
            "return": [
                "ImageProperty"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool"
                ],
                "preload": [
                    "bool"
                ]
            }
        },
        "ImageProperty.free": {
            "name": "free",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty._is_local_file": {
            "name": "_is_local_file",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ImageProperty.zoom_in": {
            "name": "zoom_in",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.zoom_out": {
            "name": "zoom_out",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.calculate_zoomed_image": {
            "name": "calculate_zoomed_image",
            "location": 134,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.set_zoomed_img": {
            "name": "set_zoomed_img",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pm": []
            }
        },
        "ImageProperty.zoom_reset": {
            "name": "zoom_reset",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.fit_img_to_window": {
            "name": "fit_img_to_window",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.fit_img_to_window_width": {
            "name": "fit_img_to_window_width",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.get_file_name_only": {
            "name": "get_file_name_only",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.get_file_name_or_url": {
            "name": "get_file_name_or_url",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.get_absolute_path_or_url": {
            "name": "get_absolute_path_or_url",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.get_aspect_ratio": {
            "name": "get_aspect_ratio",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.get_file_size": {
            "name": "get_file_size",
            "location": 191,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "human_readable": [
                    "bool"
                ]
            }
        },
        "ImageProperty.toggle_save": {
            "name": "toggle_save",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.toggle_delete": {
            "name": "toggle_delete",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.toggle_wallpaper": {
            "name": "toggle_wallpaper",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.set_file_size": {
            "name": "set_file_size",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.get_flags": {
            "name": "get_flags",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.get_subreddit": {
            "name": "get_subreddit",
            "location": 219,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.get_short_flags": {
            "name": "get_short_flags",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.is_it_in_a_subreddit": {
            "name": "is_it_in_a_subreddit",
            "location": 239,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.is_it_in_a_tumblr_blog": {
            "name": "is_it_in_a_tumblr_blog",
            "location": 246,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.is_it_really_the_last": {
            "name": "is_it_really_the_last",
            "location": 253,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageProperty.save_to_filesystem": {
            "name": "save_to_filesystem",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "typing.BinaryIO",
                    "None"
                ],
                "method": [
                    "int",
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ImageProperty.save_as": {
            "name": "save_as",
            "location": 294,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dest": [
                    "str",
                    "list[dict[, ]]",
                    "typing.IO"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/imageview.py": {
        "ImageView.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "list[str]",
                    "tuple[typing.Type]"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/imagewithextra.py": {
        "ImageWithExtraInfo.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fpath_or_url": [
                    "str",
                    "bool"
                ],
                "extra_info": [
                    "None",
                    "list[str]",
                    "str",
                    "bool",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/important.py": {
        "ImportantFilesAndFolders.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "list[str]",
                    "tuple[typing.Type]"
                ]
            }
        },
        "ImportantFilesAndFolders.grid_layout_creation_1": {
            "name": "grid_layout_creation_1",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportantFilesAndFolders.grid_layout_creation_2": {
            "name": "grid_layout_creation_2",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportantFilesAndFolders.copy_to_clipboard": {
            "name": "copy_to_clipboard",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "ImportantFilesAndFolders.add_shortcuts": {
            "name": "add_shortcuts",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/main.py": {
        "check_api_keys": {
            "name": "check_api_keys",
            "location": 1723,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 1741,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "bool"
                ]
            }
        },
        "MainWindow.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": []
            }
        },
        "MainWindow.reset": {
            "name": "reset",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "None",
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "MainWindow.process_arguments": {
            "name": "process_arguments",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "str"
                ]
            }
        },
        "MainWindow.auto_detect": {
            "name": "auto_detect",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "MainWindow.mousePressEvent": {
            "name": "mousePressEvent",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MainWindow.wheelEvent": {
            "name": "wheelEvent",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MainWindow.set_title": {
            "name": "set_title",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "typing.Text"
                ]
            }
        },
        "MainWindow.open_local_dir": {
            "name": "open_local_dir",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_folder": [
                    "str",
                    "list[str]",
                    "list[pathlib.Path]"
                ],
                "redraw": [
                    "bool"
                ]
            }
        },
        "MainWindow.open_local_file": {
            "name": "open_local_file",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_file": [
                    "list[pathlib.Path]",
                    "str"
                ],
                "redraw": [
                    "bool"
                ]
            }
        },
        "MainWindow.open_local_file_or_dir": {
            "name": "open_local_file_or_dir",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "MainWindow.open_remote_url_file": {
            "name": "open_remote_url_file",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "MainWindow.open_subreddit": {
            "name": "open_subreddit",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "None",
                    "bool"
                ],
                "after_id": [
                    "None",
                    "str",
                    "list[]",
                    "list[dict[, ]]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "MainWindow.open_tumblr_blog": {
            "name": "open_tumblr_blog",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blog_name": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "MainWindow.open_urls": {
            "name": "open_urls",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "urls": []
            }
        },
        "MainWindow.open_sequence_urls": {
            "name": "open_sequence_urls",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seq_url": [
                    "str"
                ]
            }
        },
        "MainWindow.open_imagefap_photo": {
            "name": "open_imagefap_photo",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "None"
                ]
            }
        },
        "MainWindow.open_fuskator_gallery": {
            "name": "open_fuskator_gallery",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "MainWindow.open_imgur_album": {
            "name": "open_imgur_album",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "MainWindow.open_tumblr_post": {
            "name": "open_tumblr_post",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "MainWindow.play_error_sound": {
            "name": "play_error_sound",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.read_local_dir": {
            "name": "read_local_dir",
            "location": 367,
            "return": [
                "list[ImageProperty]"
            ],
            "arguments": {
                "self": [],
                "dir_path": [
                    "str"
                ]
            }
        },
        "MainWindow.init_ui": {
            "name": "init_ui",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.show_scrollbars": {
            "name": "show_scrollbars",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.hide_scrollbars": {
            "name": "hide_scrollbars",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.make_scrollbars_disappear": {
            "name": "make_scrollbars_disappear",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.center": {
            "name": "center",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.menu_open_subreddit": {
            "name": "menu_open_subreddit",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.menu_open_imgur_album": {
            "name": "menu_open_imgur_album",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.menu_open_url_auto_detect": {
            "name": "menu_open_url_auto_detect",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.auto_detect_and_open": {
            "name": "auto_detect_and_open",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "called_from_gui": [
                    "bool"
                ]
            }
        },
        "MainWindow.dragEnterEvent": {
            "name": "dragEnterEvent",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MainWindow.dropEvent": {
            "name": "dropEvent",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "MainWindow.create_menu_actions": {
            "name": "create_menu_actions",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.create_menubar": {
            "name": "create_menubar",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.create_contextmenu": {
            "name": "create_contextmenu",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.show_contextmenu": {
            "name": "show_contextmenu",
            "location": 845,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MainWindow.open_dir": {
            "name": "open_dir",
            "location": 852,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.open_file": {
            "name": "open_file",
            "location": 864,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.add_shortcuts": {
            "name": "add_shortcuts",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.mark_all_images_to_save": {
            "name": "mark_all_images_to_save",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.commit_changes": {
            "name": "commit_changes",
            "location": 1070,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.toggle_img_save": {
            "name": "toggle_img_save",
            "location": 1122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.toggle_img_delete": {
            "name": "toggle_img_delete",
            "location": 1145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.toggle_img_wallpaper": {
            "name": "toggle_img_wallpaper",
            "location": 1168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.image_info": {
            "name": "image_info",
            "location": 1182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.important_files_and_folders": {
            "name": "important_files_and_folders",
            "location": 1196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.slideshow": {
            "name": "slideshow",
            "location": 1201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.not_yet_implemented": {
            "name": "not_yet_implemented",
            "location": 1204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.reload_current_image": {
            "name": "reload_current_image",
            "location": 1207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.save_image": {
            "name": "save_image",
            "location": 1217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.export_image_list_to_clipboard": {
            "name": "export_image_list_to_clipboard",
            "location": 1243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.open_random_subreddit": {
            "name": "open_random_subreddit",
            "location": 1255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.save_image_list": {
            "name": "save_image_list",
            "location": 1261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.open_with_gimp": {
            "name": "open_with_gimp",
            "location": 1284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.open_with_browser": {
            "name": "open_with_browser",
            "location": 1292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.find_duplicates": {
            "name": "find_duplicates",
            "location": 1300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.sequence_urls": {
            "name": "sequence_urls",
            "location": 1322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.image_url": {
            "name": "image_url",
            "location": 1339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.extract_images_from_webpage": {
            "name": "extract_images_from_webpage",
            "location": 1357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.open_custom_url_list": {
            "name": "open_custom_url_list",
            "location": 1363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.url_folding": {
            "name": "url_folding",
            "location": 1369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.menu_open_tumblr_post": {
            "name": "menu_open_tumblr_post",
            "location": 1375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.show_popup": {
            "name": "show_popup",
            "location": 1393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.toggle_menubar": {
            "name": "toggle_menubar",
            "location": 1404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.show_menubar": {
            "name": "show_menubar",
            "location": 1412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.hide_menubar": {
            "name": "hide_menubar",
            "location": 1416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.dialog_go_to_image": {
            "name": "dialog_go_to_image",
            "location": 1421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.scroll_to_top": {
            "name": "scroll_to_top",
            "location": 1439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.scroll_down": {
            "name": "scroll_down",
            "location": 1442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "MainWindow.scroll_right": {
            "name": "scroll_right",
            "location": 1446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.scroll_up": {
            "name": "scroll_up",
            "location": 1450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "MainWindow.scroll_left": {
            "name": "scroll_left",
            "location": 1454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.copy_path_to_clipboard": {
            "name": "copy_path_to_clipboard",
            "location": 1458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.toggle_show_image_path": {
            "name": "toggle_show_image_path",
            "location": 1464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.toggle_mouse_pointer": {
            "name": "toggle_mouse_pointer",
            "location": 1472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.toggle_auto_fit": {
            "name": "toggle_auto_fit",
            "location": 1486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.toggle_auto_width": {
            "name": "toggle_auto_width",
            "location": 1497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.zoom_in": {
            "name": "zoom_in",
            "location": 1508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.zoom_out": {
            "name": "zoom_out",
            "location": 1517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.zoom_reset": {
            "name": "zoom_reset",
            "location": 1526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.toggle_fullscreen": {
            "name": "toggle_fullscreen",
            "location": 1535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.from_fullscreen_to_normal": {
            "name": "from_fullscreen_to_normal",
            "location": 1545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.toggle_fit_window_to_image": {
            "name": "toggle_fit_window_to_image",
            "location": 1549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.fit_image_to_window": {
            "name": "fit_image_to_window",
            "location": 1562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.fit_image_to_window_width": {
            "name": "fit_image_to_window_width",
            "location": 1571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.toggle_maximized": {
            "name": "toggle_maximized",
            "location": 1580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.resizeEvent": {
            "name": "resizeEvent",
            "location": 1593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MainWindow.show_logo": {
            "name": "show_logo",
            "location": 1596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.available_width_and_height": {
            "name": "available_width_and_height",
            "location": 1606,
            "return": [
                "tuple[typing.Union[int,str,float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.show_image": {
            "name": "show_image",
            "location": 1619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.redraw": {
            "name": "redraw",
            "location": 1633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.closeEvent": {
            "name": "closeEvent",
            "location": 1676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/mylogging.py": {},
    "JiVE-Image-Viewer-master/jive/opener.py": {
        "open_folder": {
            "name": "open_folder",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "dname": [
                    "str",
                    "bool"
                ]
            }
        },
        "open_file_with_editor": {
            "name": "open_file_with_editor",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[P]"
                ],
                "fname": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "open_file_with_gimp": {
            "name": "open_file_with_gimp",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[P]"
                ],
                "fname": [
                    "str",
                    "typing.BinaryIO"
                ]
            }
        },
        "open_file_with_browser": {
            "name": "open_file_with_browser",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "list[dict[str, str]]",
                    "list[str]"
                ],
                "url": [
                    "str",
                    "list[str]",
                    "list[int]"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/preferences.py": {
        "remove_quotes": {
            "name": "remove_quotes",
            "location": 10,
            "return": [],
            "arguments": {
                "original": []
            }
        },
        "Preferences.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preferences_ini": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "user_data_dir": [
                    "str",
                    "None",
                    "int"
                ],
                "log": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Preferences.get_platform_settings": {
            "name": "get_platform_settings",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Preferences.get_as_dict": {
            "name": "get_as_dict",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Preferences.perform_string_interpolation": {
            "name": "perform_string_interpolation",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "original": []
            }
        },
        "Preferences.to_dict": {
            "name": "to_dict",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "dict[str, dict[str, str]]"
                ]
            }
        },
        "Preferences.extract_platform_settings": {
            "name": "extract_platform_settings",
            "location": 79,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Preferences.make_directories": {
            "name": "make_directories",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/settings.py": {
        "Settings.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.read": {
            "name": "read",
            "location": 31,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings._make_dir": {
            "name": "_make_dir",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.write": {
            "name": "write",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.set_last_dir_opened": {
            "name": "set_last_dir_opened",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "Settings.get_last_dir_opened": {
            "name": "get_last_dir_opened",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Settings.set_last_dir_save_as": {
            "name": "set_last_dir_save_as",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "bool"
                ]
            }
        },
        "Settings.get_last_dir_save_as": {
            "name": "get_last_dir_save_as",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Settings.set_last_file_opened": {
            "name": "set_last_file_opened",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "int",
                    "set[str]"
                ]
            }
        },
        "Settings.get_last_file_opened": {
            "name": "get_last_file_opened",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Settings.set_last_open_url_auto_detect": {
            "name": "set_last_open_url_auto_detect",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Settings.get_last_open_url_auto_detect": {
            "name": "get_last_open_url_auto_detect",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/shortcuts.py": {
        "Shortcuts.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shortcuts._normalize": {
            "name": "_normalize",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "Shortcuts.register_window_shortcut": {
            "name": "register_window_shortcut",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]"
                ],
                "q_shortcut": [
                    "str",
                    "float",
                    "None",
                    "int"
                ],
                "connect_function": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Shortcuts.register_menubar_action": {
            "name": "register_menubar_action",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "None",
                    "int"
                ],
                "q_action": [],
                "connect_function": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Shortcuts.enable_all_window_shortcuts": {
            "name": "enable_all_window_shortcuts",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shortcuts.disable_conflicting_window_shortcuts": {
            "name": "disable_conflicting_window_shortcuts",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/showFolding.py": {
        "Ui_Dialog.setupUi": {
            "name": "setupUi",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Dialog": []
            }
        },
        "Ui_Dialog.retranslateUi": {
            "name": "retranslateUi",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Dialog": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/showTabs.py": {
        "Ui_Dialog.setupUi": {
            "name": "setupUi",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Dialog": []
            }
        },
        "Ui_Dialog.retranslateUi": {
            "name": "retranslateUi",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Dialog": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/showUrlList.py": {
        "Ui_Dialog.setupUi": {
            "name": "setupUi",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Dialog": []
            }
        },
        "Ui_Dialog.retranslateUi": {
            "name": "retranslateUi",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "Dialog": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/simplescrape.py": {
        "SimpleScrape.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log": [
                    "str",
                    "int"
                ]
            }
        },
        "SimpleScrape.onChange": {
            "name": "onChange",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleScrape.copy_content_to_clipboard": {
            "name": "copy_content_to_clipboard",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "SimpleScrape.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evt": []
            }
        },
        "SimpleScrape.clear_url": {
            "name": "clear_url",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleScrape.ok_was_clicked": {
            "name": "ok_was_clicked",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleScrape.clear_tab": {
            "name": "clear_tab",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "SimpleScrape.clear_tabs": {
            "name": "clear_tabs",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleScrape.update_counter": {
            "name": "update_counter",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "typing.Type",
                    "str"
                ]
            }
        },
        "SimpleScrape.update_counters": {
            "name": "update_counters",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleScrape.fill_tab": {
            "name": "fill_tab",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str"
                ],
                "lst": []
            }
        },
        "SimpleScrape.extract_images": {
            "name": "extract_images",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleScrape.mini_log": {
            "name": "mini_log",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "dict[str, object]"
                ]
            }
        },
        "SimpleScrape.add_shortcuts": {
            "name": "add_shortcuts",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleScrape.next_tab": {
            "name": "next_tab",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleScrape.prev_tab": {
            "name": "prev_tab",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/statusbar.py": {
        "StatusBar.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "tuple[typing.Type]"
                ]
            }
        },
        "StatusBar.reset": {
            "name": "reset",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusBar.flash_message": {
            "name": "flash_message",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "BaseException",
                    "None",
                    "Exception"
                ],
                "wait": []
            }
        },
        "StatusBar.delete_flashed_message": {
            "name": "delete_flashed_message",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/urlfolding.py": {
        "UrlFolding.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlFolding.unfold_and_open_urls": {
            "name": "unfold_and_open_urls",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlFolding.open_urls": {
            "name": "open_urls",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlFolding.clear_sequence_url": {
            "name": "clear_sequence_url",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlFolding.clear_url_list": {
            "name": "clear_url_list",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlFolding.unpack": {
            "name": "unpack",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlFolding.pack": {
            "name": "pack",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlFolding.copy_sequence_url_to_clipboard": {
            "name": "copy_sequence_url_to_clipboard",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlFolding.paste_sequence_url_from_clipboard": {
            "name": "paste_sequence_url_from_clipboard",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlFolding.copy_url_list_to_clipboard": {
            "name": "copy_url_list_to_clipboard",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlFolding.paste_url_list_from_clipboard": {
            "name": "paste_url_list_from_clipboard",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlFolding.add_shortcuts": {
            "name": "add_shortcuts",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/__init__.py": {},
    "JiVE-Image-Viewer-master/jive/debug/save_json.py": {
        "generate_fname": {
            "name": "generate_fname",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "save": {
            "name": "save",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "d": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/debug/__init__.py": {},
    "JiVE-Image-Viewer-master/jive/extractors/fuskator.py": {
        "is_gallery": {
            "name": "is_gallery",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "list[]"
                ]
            }
        },
        "extract_embedded_url": {
            "name": "extract_embedded_url",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/extractors/imagefap.py": {
        "is_imagefap_photo": {
            "name": "is_imagefap_photo",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "get_urls": {
            "name": "get_urls",
            "location": 10,
            "return": [
                "list[]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/extractors/imgur.py": {
        "connection": {
            "name": "connection",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "is_album": {
            "name": "is_album",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "get_album_id": {
            "name": "get_album_id",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "extract_images_from_an_album": {
            "name": "extract_images_from_an_album",
            "location": 35,
            "return": [
                "list[]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/extractors/sequence.py": {
        "is_valid_sequence_url": {
            "name": "is_valid_sequence_url",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytes"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "get_urls_from_sequence_url": {
            "name": "get_urls_from_sequence_url",
            "location": 33,
            "return": [
                "list[]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "typing.Mapping",
                    "None"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/extractors/subreddit.py": {
        "get_subreddit_name": {
            "name": "get_subreddit_name",
            "location": 18,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "read_subreddit": {
            "name": "read_subreddit",
            "location": 37,
            "return": [
                "list[]"
            ],
            "arguments": {
                "subreddit": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "None"
                ],
                "after_id": [
                    "None",
                    "bytes",
                    "int",
                    "str"
                ],
                "statusbar": [
                    "None",
                    "int",
                    "float",
                    "str"
                ],
                "mainWindow": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/extractors/tumblr.py": {
        "extract_parts_from": {
            "name": "extract_parts_from",
            "location": 13,
            "return": [
                "tuple[]",
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "list[]",
                    "set[str]",
                    "None"
                ]
            }
        },
        "is_post": {
            "name": "is_post",
            "location": 29,
            "return": [],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "extract_images_from_a_specific_post": {
            "name": "extract_images_from_a_specific_post",
            "location": 33,
            "return": [
                "list[]",
                "list[typing.Text]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "None",
                    "typing.Type"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/extractors/tumblr_blog.py": {
        "extract_blog_name": {
            "name": "extract_blog_name",
            "location": 16,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "is_blog": {
            "name": "is_blog",
            "location": 29,
            "return": [],
            "arguments": {
                "url": [
                    "str",
                    "list[]",
                    "collections.abc.Awaitable[]",
                    "dict[, ]"
                ]
            }
        },
        "extract_photo_urls": {
            "name": "extract_photo_urls",
            "location": 33,
            "return": [
                "list[]"
            ],
            "arguments": {
                "li": []
            }
        },
        "get_photo_urls": {
            "name": "get_photo_urls",
            "location": 46,
            "return": [
                "list[]"
            ],
            "arguments": {
                "blog_name": [
                    "str"
                ],
                "offset": [
                    "int"
                ],
                "statusbar": [
                    "None",
                    "bool",
                    "list[tuple[typing.Union[str,str]]]",
                    "tuple[typing.Union[int,int,int]]",
                    "float"
                ],
                "mainWindow": [
                    "None",
                    "str",
                    "list[str]",
                    "list[]",
                    "dict[, ]"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/extractors/__init__.py": {},
    "JiVE-Image-Viewer-master/jive/vendor/ClusterShell/Defaults.py": {
        "_task_print_debug": {
            "name": "_task_print_debug",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "typing.Type",
                    "int",
                    "typing.Sequence[typing.Any]",
                    "list[]",
                    "dict[, ]"
                ],
                "line": [
                    "str",
                    "int",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "_load_workerclass": {
            "name": "_load_workerclass",
            "location": 53,
            "return": [],
            "arguments": {
                "workername": [
                    "str"
                ]
            }
        },
        "_local_workerclass": {
            "name": "_local_workerclass",
            "location": 69,
            "return": [],
            "arguments": {
                "defaults": [
                    "typing.Sequence[typing.Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "_distant_workerclass": {
            "name": "_distant_workerclass",
            "location": 73,
            "return": [],
            "arguments": {
                "defaults": [
                    "typing.Sequence[typing.Any]",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "config_paths": {
            "name": "config_paths",
            "location": 77,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "config_name": [
                    "str"
                ]
            }
        },
        "Defaults.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filenames": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Defaults._parse_config": {
            "name": "_parse_config",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Defaults.__getattr__": {
            "name": "__getattr__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "Defaults.__setattr__": {
            "name": "__setattr__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "list[str]",
                    "typing.IO"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/vendor/ClusterShell/NodeSet.py": {
        "_strip_escape": {
            "name": "_strip_escape",
            "location": 753,
            "return": [],
            "arguments": {
                "nsstr": [
                    "str",
                    "bool"
                ]
            }
        },
        "_rsets4nsb": {
            "name": "_rsets4nsb",
            "location": 760,
            "return": [
                "RangeSetND"
            ],
            "arguments": {
                "rsets": [],
                "autostep": [
                    "bool",
                    "None",
                    "list[int]",
                    "str"
                ]
            }
        },
        "expand": {
            "name": "expand",
            "location": 1538,
            "return": [
                "list[]"
            ],
            "arguments": {
                "pat": [
                    "int",
                    "list[list[int]]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "fold": {
            "name": "fold",
            "location": 1544,
            "return": [
                "str"
            ],
            "arguments": {
                "pat": [
                    "int",
                    "list[list[int]]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "grouplist": {
            "name": "grouplist",
            "location": 1551,
            "return": [],
            "arguments": {
                "namespace": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "resolver": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "std_group_resolver": {
            "name": "std_group_resolver",
            "location": 1559,
            "return": [],
            "arguments": {}
        },
        "set_std_group_resolver": {
            "name": "set_std_group_resolver",
            "location": 1565,
            "return": [
                "None"
            ],
            "arguments": {
                "new_resolver": [
                    "str"
                ]
            }
        },
        "set_std_group_resolver_config": {
            "name": "set_std_group_resolver_config",
            "location": 1575,
            "return": [
                "None"
            ],
            "arguments": {
                "groupsconf": [
                    "str",
                    "dict[, ]",
                    "bytes"
                ],
                "illegal_chars": [
                    "None",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "NodeSetParseError.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "part": [
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "int",
                    "float",
                    "complex",
                    "dict[, ]"
                ],
                "msg": [
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "NodeSetParseRangeError.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rset_exc": [
                    "str",
                    "int"
                ]
            }
        },
        "NodeSetBase.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "None",
                    "str",
                    "list[int]"
                ],
                "rangeset": [
                    "None",
                    "str",
                    "list[int]"
                ],
                "copy_rangeset": [
                    "bool"
                ],
                "autostep": [
                    "None",
                    "int",
                    "float"
                ],
                "fold_axis": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "NodeSetBase.get_autostep": {
            "name": "get_autostep",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSetBase.set_autostep": {
            "name": "set_autostep",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "NodeSetBase._iter": {
            "name": "_iter",
            "location": 164,
            "return": [
                "typing.Generator[tuple[typing.Union[tuple[],tuple[]]]]",
                "typing.Generator[tuple[]]",
                "typing.Generator[tuple[typing.Union[None,None,None]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeSetBase._iterbase": {
            "name": "_iterbase",
            "location": 181,
            "return": [
                "typing.Generator[NodeSetBase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeSetBase.__iter__": {
            "name": "__iter__",
            "location": 193,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeSetBase.nsiter": {
            "name": "nsiter",
            "location": 213,
            "return": [
                "typing.Generator[typing.Union[dict[, ],dict[str, None]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeSetBase.contiguous": {
            "name": "contiguous",
            "location": 227,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeSetBase.__len__": {
            "name": "__len__",
            "location": 243,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeSetBase._iter_nd_pat": {
            "name": "_iter_nd_pat",
            "location": 253,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "pat": [],
                "rset": []
            }
        },
        "NodeSetBase.__str__": {
            "name": "__str__",
            "location": 296,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeSetBase.copy": {
            "name": "copy",
            "location": 321,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeSetBase.__contains__": {
            "name": "__contains__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.AbstractSet"
                ]
            }
        },
        "NodeSetBase._binary_sanity_check": {
            "name": "_binary_sanity_check",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "NodeSetBase.issubset": {
            "name": "issubset",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeSetBase.issuperset": {
            "name": "issuperset",
            "location": 352,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "NodeSetBase.__eq__": {
            "name": "__eq__",
            "location": 367,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeSetBase.__lt__": {
            "name": "__lt__",
            "location": 378,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeSetBase.__gt__": {
            "name": "__gt__",
            "location": 383,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeSetBase._extractslice": {
            "name": "_extractslice",
            "location": 388,
            "return": [
                "tuple[typing.Union[int,list[],int]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "list[str]"
                ]
            }
        },
        "NodeSetBase.__getitem__": {
            "name": "__getitem__",
            "location": 424,
            "return": [
                "NodeSetBase"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list[str]",
                    "str",
                    "list[]",
                    "list[int]"
                ]
            }
        },
        "NodeSetBase._add_new": {
            "name": "_add_new",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pat": [
                    "str",
                    "typing.Pattern",
                    "list[str]",
                    "list[]",
                    "set[]"
                ],
                "rangeset": [
                    "str"
                ]
            }
        },
        "NodeSetBase._add": {
            "name": "_add",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pat": [
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "rangeset": [],
                "copy_rangeset": [
                    "bool"
                ]
            }
        },
        "NodeSetBase.union": {
            "name": "union",
            "location": 521,
            "return": [
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "NodeSetBase.__or__": {
            "name": "__or__",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "NodeSetBase.add": {
            "name": "add",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]"
                ]
            }
        },
        "NodeSetBase.update": {
            "name": "update",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "set[str]",
                    "list[]",
                    "int"
                ]
            }
        },
        "NodeSetBase.updaten": {
            "name": "updaten",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "others": []
            }
        },
        "NodeSetBase.clear": {
            "name": "clear",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeSetBase.__ior__": {
            "name": "__ior__",
            "location": 564,
            "return": [
                "NodeSetBase"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeSetBase.intersection": {
            "name": "intersection",
            "location": 573,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeSetBase.__and__": {
            "name": "__and__",
            "location": 582,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "set[VT]"
                ]
            }
        },
        "NodeSetBase.intersection_update": {
            "name": "intersection_update",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "None",
                    "list[float]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "NodeSetBase.__iand__": {
            "name": "__iand__",
            "location": 615,
            "return": [
                "NodeSetBase"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeSetBase.difference": {
            "name": "difference",
            "location": 624,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeSetBase.__sub__": {
            "name": "__sub__",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeSetBase.difference_update": {
            "name": "difference_update",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "NodeSetBase.__isub__": {
            "name": "__isub__",
            "location": 673,
            "return": [
                "NodeSetBase"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeSetBase.remove": {
            "name": "remove",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "NodeSetBase.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "NodeSetBase.__xor__": {
            "name": "__xor__",
            "location": 702,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "int",
                    "set[VT]"
                ]
            }
        },
        "NodeSetBase.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "None"
                ]
            }
        },
        "NodeSetBase.__ixor__": {
            "name": "__ixor__",
            "location": 742,
            "return": [
                "NodeSetBase"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ParsingEngine.__init__": {
            "name": "__init__",
            "location": 786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_resolver": [
                    "int"
                ],
                "node_wildcard_enable": [
                    "bool"
                ]
            }
        },
        "ParsingEngine.parse": {
            "name": "parse",
            "location": 794,
            "return": [
                "NodeSetBase"
            ],
            "arguments": {
                "self": [],
                "nsobj": [
                    "int",
                    "None"
                ],
                "autostep": [
                    "str",
                    "bool",
                    "typing.Any",
                    "None",
                    "tuple[typing.Any]"
                ]
            }
        },
        "ParsingEngine.parse_string": {
            "name": "parse_string",
            "location": 815,
            "return": [
                "NodeSetBase"
            ],
            "arguments": {
                "self": [],
                "nsstr": [
                    "str",
                    "int",
                    "list[]",
                    "dict[, ]"
                ],
                "autostep": [
                    "typing.Mapping"
                ],
                "namespace": [
                    "None",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ParsingEngine.parse_string_single": {
            "name": "parse_string_single",
            "location": 884,
            "return": [
                "NodeSetBase"
            ],
            "arguments": {
                "self": [],
                "nsstr": [
                    "str"
                ],
                "autostep": [
                    "str"
                ]
            }
        },
        "ParsingEngine.parse_group": {
            "name": "parse_group",
            "location": 896,
            "return": [],
            "arguments": {
                "self": [],
                "group": [
                    "int",
                    "list[list[str]]",
                    "str",
                    "typing.Sequence[int]"
                ],
                "namespace": [
                    "None",
                    "int",
                    "list[list[str]]",
                    "str",
                    "typing.Sequence[int]"
                ],
                "autostep": [
                    "None",
                    "str",
                    "int",
                    "list[list[str]]",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "ParsingEngine.parse_group_string": {
            "name": "parse_group_string",
            "location": 902,
            "return": [
                "tuple[typing.Union[str,None,int]]"
            ],
            "arguments": {
                "self": [],
                "nodegroup": [
                    "str"
                ],
                "namespace": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "ParsingEngine.grouplist": {
            "name": "grouplist",
            "location": 921,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ParsingEngine.all_nodes": {
            "name": "all_nodes",
            "location": 934,
            "return": [
                "int",
                "list[]",
                "bytes",
                "list[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "None",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "ParsingEngine._next_op": {
            "name": "_next_op",
            "location": 957,
            "return": [
                "tuple[]",
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {
                "self": [],
                "pat": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "ParsingEngine._scan_string_single": {
            "name": "_scan_string_single",
            "location": 965,
            "return": [
                "tuple[typing.Union[typing.Text,list[]]]"
            ],
            "arguments": {
                "self": [],
                "nsstr": [
                    "str"
                ],
                "autostep": [
                    "list[]",
                    "str",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "ParsingEngine._scan_string": {
            "name": "_scan_string",
            "location": 999,
            "return": [],
            "arguments": {
                "self": [],
                "nsstr": [
                    "str"
                ],
                "autostep": [
                    "str",
                    "int"
                ]
            }
        },
        "ParsingEngine._amend_leading_digits": {
            "name": "_amend_leading_digits",
            "location": 1114,
            "return": [
                "tuple[typing.Union[str,typing.Callable[[], None]]]"
            ],
            "arguments": {
                "self": [],
                "outer": [],
                "inner": [
                    "str",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "ParsingEngine._amend_trailing_digits": {
            "name": "_amend_trailing_digits",
            "location": 1131,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "self": [],
                "outer": [],
                "inner": [
                    "str"
                ]
            }
        },
        "NodeSet.__init__": {
            "name": "__init__",
            "location": 1199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [],
                "autostep": [
                    "None",
                    "Exception",
                    "dict[, ]"
                ],
                "resolver": [
                    "None",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "typing.Callable[..., T]"
                ],
                "fold_axis": [
                    "None",
                    "Exception",
                    "dict[, ]"
                ]
            }
        },
        "NodeSet._fromlist1": {
            "name": "_fromlist1",
            "location": 1253,
            "return": [
                "dict[, ]",
                "NodeSet"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "nodelist": [
                    "str"
                ],
                "autostep": [
                    "None",
                    "dict[, ]",
                    "typing.Iterator"
                ],
                "resolver": [
                    "None",
                    "int",
                    "memoryview",
                    "list[]"
                ]
            }
        },
        "NodeSet.fromlist": {
            "name": "fromlist",
            "location": 1262,
            "return": [
                "NodeSet"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "nodelist": [
                    "typing.Type",
                    "float"
                ],
                "autostep": [
                    "None",
                    "int",
                    "memoryview",
                    "list[]"
                ],
                "resolver": [
                    "None",
                    "int",
                    "memoryview",
                    "list[]"
                ]
            }
        },
        "NodeSet.fromall": {
            "name": "fromall",
            "location": 1270,
            "return": [
                "NodeSet"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "groupsource": [
                    "None",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "autostep": [
                    "None",
                    "int",
                    "memoryview",
                    "list[]"
                ],
                "resolver": [
                    "None",
                    "int",
                    "memoryview",
                    "list[]"
                ]
            }
        },
        "NodeSet.__getstate__": {
            "name": "__getstate__",
            "location": 1286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NodeSet.__setstate__": {
            "name": "__setstate__",
            "location": 1294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dic": [
                    "dict[, ]",
                    "bytes",
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "NodeSet.copy": {
            "name": "copy",
            "location": 1316,
            "return": [
                "dict[int, typing.Any]",
                "list[]",
                "int",
                "dict[str, str]",
                "list[dict[, ]]",
                "float",
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeSet._find_groups": {
            "name": "_find_groups",
            "location": 1334,
            "return": [
                "typing.Generator[tuple[str]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "namespace": [
                    "str"
                ],
                "allgroups": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "NodeSet._groups2": {
            "name": "_groups2",
            "location": 1350,
            "return": [
                "dict[, ]",
                "dict[, tuple[typing.Union[int,tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]],dict[str, int],list[list[typing.Any]]]]]"
            ],
            "arguments": {
                "self": [],
                "groupsource": [
                    "None",
                    "str",
                    "set[str]",
                    "typing.Callable[, ]"
                ],
                "autostep": [
                    "None",
                    "str",
                    "list[str]",
                    "typing.AbstractSet",
                    "typing.Callable[, ]"
                ]
            }
        },
        "NodeSet.groups": {
            "name": "groups",
            "location": 1395,
            "return": [
                "dict[typing.Text, tuple[NodeSet]]"
            ],
            "arguments": {
                "self": [],
                "groupsource": [
                    "None",
                    "str",
                    "typing.Mapping",
                    "typing.Type"
                ],
                "noprefix": [
                    "bool"
                ]
            }
        },
        "NodeSet.regroup": {
            "name": "regroup",
            "location": 1415,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "groupsource": [
                    "None",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "autostep": [
                    "None",
                    "str",
                    "float",
                    "collections.abc.AsyncGenerator",
                    "int",
                    "list[str]"
                ],
                "overlap": [
                    "bool"
                ],
                "noprefix": [
                    "bool"
                ]
            }
        },
        "NodeSet.issubset": {
            "name": "issubset",
            "location": 1454,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "NodeSet.issuperset": {
            "name": "issuperset",
            "location": 1461,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "NodeSet.__getitem__": {
            "name": "__getitem__",
            "location": 1468,
            "return": [
                "dict[str, str]",
                "dict[str, int]",
                "dict[str, typing.Union[int,str]]",
                "dict[str, float]",
                "list[int]",
                "NodeSet"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "NodeSet.split": {
            "name": "split",
            "location": 1481,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "nbr": []
            }
        },
        "NodeSet.update": {
            "name": "update",
            "location": 1505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "str",
                    "list[dict[, ]]",
                    "dict[, ]"
                ]
            }
        },
        "NodeSet.intersection_update": {
            "name": "intersection_update",
            "location": 1512,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "NodeSet.difference_update": {
            "name": "difference_update",
            "location": 1520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "typing.Mapping"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "NodeSet.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 1529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "ParsingEngine._amend_trailing_digits.shiftstep": {
            "name": "shiftstep",
            "location": 1147,
            "return": [],
            "arguments": {
                "orig": [],
                "power": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/vendor/ClusterShell/NodeUtils.py": {
        "GroupSourceError.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "group_source": [
                    "bool"
                ]
            }
        },
        "GroupSource.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "groups": [
                    "None",
                    "int",
                    "str",
                    "typing.Sequence[]"
                ],
                "allgroups": [
                    "None",
                    "int",
                    "str",
                    "typing.Sequence[]"
                ]
            }
        },
        "GroupSource.resolv_map": {
            "name": "resolv_map",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "GroupSource.resolv_list": {
            "name": "resolv_list",
            "location": 110,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupSource.resolv_all": {
            "name": "resolv_all",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupSource.resolv_reverse": {
            "name": "resolv_reverse",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[int]"
                ]
            }
        },
        "FileGroupSource.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "loader": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "FileGroupSource.groups": {
            "name": "groups",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileGroupSource.allgroups": {
            "name": "allgroups",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpcallGroupSource.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]",
                    "list[str]"
                ],
                "map_upcall": [
                    "bool",
                    "list[str]",
                    "None",
                    "str"
                ],
                "all_upcall": [
                    "None",
                    "bool",
                    "list[str]",
                    "str"
                ],
                "list_upcall": [
                    "None",
                    "bool",
                    "list[str]",
                    "str"
                ],
                "reverse_upcall": [
                    "None",
                    "bool",
                    "list[str]",
                    "str"
                ],
                "cfgdir": [
                    "None",
                    "bool",
                    "list[str]",
                    "str"
                ],
                "cache_time": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "UpcallGroupSource.clear_cache": {
            "name": "clear_cache",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpcallGroupSource._upcall_read": {
            "name": "_upcall_read",
            "location": 198,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "cmdtpl": [
                    "str",
                    "int",
                    "None"
                ],
                "args": [
                    "dict[, ]"
                ]
            }
        },
        "UpcallGroupSource._upcall_cache": {
            "name": "_upcall_cache",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "upcall": [
                    "bool",
                    "dict[, ]",
                    "bytes",
                    "list[str]",
                    "str",
                    "dict[str, str]"
                ],
                "cache": [],
                "key": [
                    "bool"
                ]
            }
        },
        "UpcallGroupSource.resolv_map": {
            "name": "resolv_map",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "UpcallGroupSource.resolv_list": {
            "name": "resolv_list",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpcallGroupSource.resolv_all": {
            "name": "resolv_all",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpcallGroupSource.resolv_reverse": {
            "name": "resolv_reverse",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "YAMLGroupLoader.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bytes"
                ],
                "cache_time": [
                    "None",
                    "int"
                ]
            }
        },
        "YAMLGroupLoader._load": {
            "name": "_load",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "YAMLGroupLoader.__iter__": {
            "name": "__iter__",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YAMLGroupLoader.groups": {
            "name": "groups",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "sourcename": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "GroupResolver.__init__": {
            "name": "__init__",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_source": [
                    "None",
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "illegal_chars": [
                    "None",
                    "int",
                    "bytes"
                ]
            }
        },
        "GroupResolver._late_init": {
            "name": "_late_init",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupResolver.init": {
            "name": "init",
            "location": 393,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[typing.Any, T]",
                    "int",
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "typing.Sequence[dict[, ]]"
                ]
            }
        },
        "GroupResolver.set_verbosity": {
            "name": "set_verbosity",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "GroupResolver.add_source": {
            "name": "add_source",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_source": [
                    "str"
                ]
            }
        },
        "GroupResolver.sources": {
            "name": "sources",
            "location": 416,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupResolver._get_default_source_name": {
            "name": "_get_default_source_name",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupResolver._set_default_source_name": {
            "name": "_set_default_source_name",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sourcename": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GroupResolver._list_nodes": {
            "name": "_list_nodes",
            "location": 442,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "typing.TextIO",
                    "bytes"
                ],
                "what": [
                    "str",
                    "typing.TextIO",
                    "bytes"
                ]
            }
        },
        "GroupResolver._list_groups": {
            "name": "_list_groups",
            "location": 452,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "typing.TextIO",
                    "bytes",
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ],
                "what": [
                    "typing.TextIO",
                    "bytes",
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "GroupResolver._source": {
            "name": "_source",
            "location": 473,
            "return": [
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any]]",
                "dict[typing.Any, str]"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "GroupResolver.group_nodes": {
            "name": "group_nodes",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "bool"
                ],
                "namespace": [
                    "None",
                    "typing.Type",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "GroupResolver.all_nodes": {
            "name": "all_nodes",
            "location": 490,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [
                    "None",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "GroupResolver.grouplist": {
            "name": "grouplist",
            "location": 497,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "GroupResolver.has_node_groups": {
            "name": "has_node_groups",
            "location": 505,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "None",
                    "str",
                    "float",
                    "bool",
                    "Exception",
                    "BaseException",
                    "bytes"
                ]
            }
        },
        "GroupResolver.node_groups": {
            "name": "node_groups",
            "location": 515,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "None"
                ],
                "namespace": [
                    "None",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "GroupResolverConfig.__init__": {
            "name": "__init__",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filenames": [
                    "str"
                ],
                "illegal_chars": [
                    "None",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "GroupResolverConfig._late_init": {
            "name": "_late_init",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupResolverConfig._parse_config": {
            "name": "_parse_config",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg_dirname": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "GroupResolverConfig._sources_from_cfg": {
            "name": "_sources_from_cfg",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [],
                "cfgdir": [
                    "bool",
                    "str"
                ]
            }
        },
        "GroupResolverConfig._sources_from_yaml": {
            "name": "_sources_from_yaml",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "GroupResolver.init.wrapper": {
            "name": "wrapper",
            "location": 395,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/vendor/ClusterShell/RangeSet.py": {
        "RangeSetParseError.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "part": [
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "int",
                    "float",
                    "complex",
                    "dict[, ]"
                ],
                "msg": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Sequence[str]",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "RangeSetPaddingError.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "part": [
                    "str",
                    "None",
                    "bool",
                    "tuple[str]",
                    "dict[, ]"
                ],
                "msg": [
                    "str",
                    "None",
                    "bool",
                    "tuple[str]",
                    "dict[, ]"
                ]
            }
        },
        "RangeSet.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "None",
                    "str",
                    "bool",
                    "typing.Any"
                ],
                "autostep": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "RangeSet._parse": {
            "name": "_parse",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RangeSet.fromlist": {
            "name": "fromlist",
            "location": 176,
            "return": [
                "RangeSet"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "rnglist": [
                    "typing.Type",
                    "float"
                ],
                "autostep": [
                    "None",
                    "typing.OrderedDict",
                    "list[]",
                    "str"
                ]
            }
        },
        "RangeSet.fromone": {
            "name": "fromone",
            "location": 184,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "index": [
                    "int"
                ],
                "pad": [
                    "int"
                ],
                "autostep": [
                    "None",
                    "typing.OrderedDict",
                    "list[]",
                    "str"
                ]
            }
        },
        "RangeSet.get_autostep": {
            "name": "get_autostep",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.set_autostep": {
            "name": "set_autostep",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "RangeSet.dim": {
            "name": "dim",
            "location": 217,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet._sorted": {
            "name": "_sorted",
            "location": 223,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.__iter__": {
            "name": "__iter__",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.striter": {
            "name": "striter",
            "location": 231,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.contiguous": {
            "name": "contiguous",
            "location": 237,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.__reduce__": {
            "name": "__reduce__",
            "location": 243,
            "return": [
                "tuple[typing.Union[tuple[str],dict[typing.Text, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.__setstate__": {
            "name": "__setstate__",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dic": [
                    "dict[, ]",
                    "bytes",
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "RangeSet._strslices": {
            "name": "_strslices",
            "location": 276,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.__str__": {
            "name": "__str__",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet._contiguous_slices": {
            "name": "_contiguous_slices",
            "location": 298,
            "return": [
                "typing.Generator[range]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet._folded_slices": {
            "name": "_folded_slices",
            "location": 311,
            "return": [
                "None",
                "typing.Generator[range]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.slices": {
            "name": "slices",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.__getitem__": {
            "name": "__getitem__",
            "location": 427,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "typing.Type",
                    "tuple[]"
                ]
            }
        },
        "RangeSet.split": {
            "name": "split",
            "location": 443,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "nbr": []
            }
        },
        "RangeSet.add_range": {
            "name": "add_range",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "float"
                ],
                "stop": [
                    "int"
                ],
                "step": [
                    "int"
                ],
                "pad": [
                    "int"
                ]
            }
        },
        "RangeSet.copy": {
            "name": "copy",
            "location": 484,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.__eq__": {
            "name": "__eq__",
            "location": 494,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSet.__or__": {
            "name": "__or__",
            "location": 516,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "set[VT]",
                    "list[]"
                ]
            }
        },
        "RangeSet.union": {
            "name": "union",
            "location": 525,
            "return": [
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RangeSet.__and__": {
            "name": "__and__",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "set[VT]",
                    "str"
                ]
            }
        },
        "RangeSet.intersection": {
            "name": "intersection",
            "location": 543,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSet.__xor__": {
            "name": "__xor__",
            "location": 552,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "set[VT]",
                    "str"
                ]
            }
        },
        "RangeSet.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 561,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSet.__sub__": {
            "name": "__sub__",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "set[VT]",
                    "str"
                ]
            }
        },
        "RangeSet.difference": {
            "name": "difference",
            "location": 579,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSet.__contains__": {
            "name": "__contains__",
            "location": 590,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "typing.Sequence[str]",
                    "bytes",
                    "str",
                    "typing.Iterator",
                    "frozenset",
                    "set[str]"
                ]
            }
        },
        "RangeSet.issubset": {
            "name": "issubset",
            "location": 604,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "list['cirq.Qid']",
                    "int",
                    "float"
                ]
            }
        },
        "RangeSet.issuperset": {
            "name": "issuperset",
            "location": 609,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "list['cirq.Qid']",
                    "int",
                    "float"
                ]
            }
        },
        "RangeSet.__lt__": {
            "name": "__lt__",
            "location": 618,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSet.__gt__": {
            "name": "__gt__",
            "location": 622,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSet._binary_sanity_check": {
            "name": "_binary_sanity_check",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "typing.Type"
                ]
            }
        },
        "RangeSet.__ior__": {
            "name": "__ior__",
            "location": 639,
            "return": [
                "RangeSet"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "list['cirq.Qid']",
                    "int",
                    "float"
                ]
            }
        },
        "RangeSet.union_update": {
            "name": "union_update",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSet.__iand__": {
            "name": "__iand__",
            "location": 649,
            "return": [
                "RangeSet"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "list['cirq.Qid']",
                    "int",
                    "float"
                ]
            }
        },
        "RangeSet.intersection_update": {
            "name": "intersection_update",
            "location": 655,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSet.__ixor__": {
            "name": "__ixor__",
            "location": 659,
            "return": [
                "RangeSet"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "set[VT]",
                    "None"
                ]
            }
        },
        "RangeSet.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "RangeSet.__isub__": {
            "name": "__isub__",
            "location": 671,
            "return": [
                "RangeSet"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.AbstractSet",
                    "int",
                    "float",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RangeSet.difference_update": {
            "name": "difference_update",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.OrderedDict",
                    "int",
                    "str",
                    "dict[str, tuple[typing.Union[int,int]]]"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "RangeSet.update": {
            "name": "update",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "int",
                    "str"
                ]
            }
        },
        "RangeSet.updaten": {
            "name": "updaten",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rangesets": [
                    "str"
                ]
            }
        },
        "RangeSet.clear": {
            "name": "clear",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSet.add": {
            "name": "add",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [],
                "pad": [
                    "int"
                ]
            }
        },
        "RangeSet.remove": {
            "name": "remove",
            "location": 726,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "RangeSet.discard": {
            "name": "discard",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "RangeSetND.__init__": {
            "name": "__init__",
            "location": 770,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "pads": [
                    "None",
                    "dict[str, str]",
                    "list[str]",
                    "dict[str, typing.Callable[, ]]"
                ],
                "autostep": [
                    "None",
                    "list[]",
                    "list[str]",
                    "int"
                ],
                "copy_rangeset": [
                    "bool"
                ]
            }
        },
        "RangeSetND.copy": {
            "name": "copy",
            "location": 835,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND.__eq__": {
            "name": "__eq__",
            "location": 846,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND.__bool__": {
            "name": "__bool__",
            "location": 857,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND.__len__": {
            "name": "__len__",
            "location": 862,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND.__str__": {
            "name": "__str__",
            "location": 868,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND.__iter__": {
            "name": "__iter__",
            "location": 877,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND._iter": {
            "name": "_iter",
            "location": 880,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND.iter_padding": {
            "name": "iter_padding",
            "location": 887,
            "return": [
                "typing.Generator[tuple[list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND._get_veclist": {
            "name": "_get_veclist",
            "location": 894,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND._set_veclist": {
            "name": "_set_veclist",
            "location": 898,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "bool",
                    "float"
                ]
            }
        },
        "RangeSetND.vectors": {
            "name": "vectors",
            "location": 905,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND.dim": {
            "name": "dim",
            "location": 909,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND.pads": {
            "name": "pads",
            "location": 917,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND.get_autostep": {
            "name": "get_autostep",
            "location": 923,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND.set_autostep": {
            "name": "set_autostep",
            "location": 931,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "RangeSetND.__getitem__": {
            "name": "__getitem__",
            "location": 950,
            "return": [
                "RangeSetND"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "list[int]",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "RangeSetND.contiguous": {
            "name": "contiguous",
            "location": 988,
            "return": [
                "None",
                "typing.Generator[RangeSetND]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND.__contains__": {
            "name": "__contains__",
            "location": 1009,
            "return": [],
            "arguments": {
                "self": [],
                "element": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "RangeSetND.issubset": {
            "name": "issubset",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND.issuperset": {
            "name": "issuperset",
            "location": 1030,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND.__lt__": {
            "name": "__lt__",
            "location": 1045,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND.__gt__": {
            "name": "__gt__",
            "location": 1049,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND._binary_sanity_check": {
            "name": "_binary_sanity_check",
            "location": 1055,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "RangeSetND._sort": {
            "name": "_sort",
            "location": 1062,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND.fold": {
            "name": "fold",
            "location": 1076,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND._fold": {
            "name": "_fold",
            "location": 1083,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND._fold_univariate": {
            "name": "_fold_univariate",
            "location": 1091,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND._fold_multivariate": {
            "name": "_fold_multivariate",
            "location": 1116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND._fold_multivariate_expand": {
            "name": "_fold_multivariate_expand",
            "location": 1126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND._fold_multivariate_merge": {
            "name": "_fold_multivariate_merge",
            "location": 1182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSetND.__or__": {
            "name": "__or__",
            "location": 1229,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "set[VT]",
                    "list[]"
                ]
            }
        },
        "RangeSetND.union": {
            "name": "union",
            "location": 1238,
            "return": [
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RangeSetND.update": {
            "name": "update",
            "location": 1247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int"
                ]
            }
        },
        "RangeSetND.__ior__": {
            "name": "__ior__",
            "location": 1268,
            "return": [
                "RangeSetND"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND.__isub__": {
            "name": "__isub__",
            "location": 1274,
            "return": [
                "RangeSetND"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND.difference_update": {
            "name": "difference_update",
            "location": 1280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [],
                "strict": [
                    "bool"
                ]
            }
        },
        "RangeSetND.__sub__": {
            "name": "__sub__",
            "location": 1322,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "None",
                    "tuple[typing.Union[int,int,int]]",
                    "typing.Any"
                ]
            }
        },
        "RangeSetND.difference": {
            "name": "difference",
            "location": 1331,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND.intersection": {
            "name": "intersection",
            "location": 1340,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND.__and__": {
            "name": "__and__",
            "location": 1349,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "None",
                    "tuple[typing.Union[int,int,int]]",
                    "typing.Any"
                ]
            }
        },
        "RangeSetND.intersection_update": {
            "name": "intersection_update",
            "location": 1358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "dict[, ]"
                ]
            }
        },
        "RangeSetND.__iand__": {
            "name": "__iand__",
            "location": 1379,
            "return": [
                "RangeSetND"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND.symmetric_difference": {
            "name": "symmetric_difference",
            "location": 1388,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND.__xor__": {
            "name": "__xor__",
            "location": 1399,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "float",
                    "None",
                    "int"
                ]
            }
        },
        "RangeSetND.symmetric_difference_update": {
            "name": "symmetric_difference_update",
            "location": 1408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND.__ixor__": {
            "name": "__ixor__",
            "location": 1417,
            "return": [
                "RangeSetND"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "RangeSetND.precond_fold.__call__": {
            "name": "__call__",
            "location": 819,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "RangeSetND._sort.rgveckeyfunc": {
            "name": "rgveckeyfunc",
            "location": 1064,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "rgvec": []
            }
        },
        "RangeSetND.precond_fold.__call__.inner": {
            "name": "inner",
            "location": 820,
            "return": [],
            "arguments": {}
        }
    },
    "JiVE-Image-Viewer-master/jive/vendor/ClusterShell/__init__.py": {},
    "JiVE-Image-Viewer-master/jive/webpage/clustering.py": {
        "Cluster.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.clustering": {
            "name": "clustering",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elems": [
                    "str"
                ],
                "distance": [
                    "int"
                ]
            }
        },
        "Cluster.get_largest_cluster": {
            "name": "get_largest_cluster",
            "location": 54,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.show": {
            "name": "show",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/webpage/webpage.py": {
        "to_soup": {
            "name": "to_soup",
            "location": 16,
            "return": [
                "BeautifulSoup"
            ],
            "arguments": {
                "html_source": [
                    "str",
                    "dict[, ]",
                    "bytes",
                    "typing.Any"
                ],
                "parser": [
                    "typing.Text"
                ]
            }
        },
        "get_links_from_html": {
            "name": "get_links_from_html",
            "location": 20,
            "return": [
                "list[]"
            ],
            "arguments": {
                "soup": [],
                "base_url": [
                    "None",
                    "str"
                ]
            }
        },
        "get_images_from_html": {
            "name": "get_images_from_html",
            "location": 39,
            "return": [
                "list[]"
            ],
            "arguments": {
                "soup": [],
                "base_url": [
                    "None",
                    "str"
                ]
            }
        },
        "filter_images": {
            "name": "filter_images",
            "location": 58,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "urls": [
                    "list[str]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "extract": {
            "name": "extract",
            "location": 62,
            "return": [
                "list[]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "get_links": [
                    "bool"
                ],
                "get_images": [
                    "bool"
                ]
            }
        },
        "process": {
            "name": "process",
            "location": 79,
            "return": [
                "list[str]",
                "dict[str, str]",
                "str",
                "list[]"
            ],
            "arguments": {
                "lst": [
                    "list[str]",
                    "dict[str, str]",
                    "str"
                ],
                "sorting": [
                    "bool"
                ],
                "clustering": [
                    "bool"
                ],
                "distance": [
                    "int"
                ]
            }
        },
        "get_four_variations": {
            "name": "get_four_variations",
            "location": 93,
            "return": [
                "dict[int, typing.Union[list[str],str,tuple[str],set[str],dict[str, int],bool]]"
            ],
            "arguments": {
                "url": [
                    "int",
                    "dict[str, str]",
                    "str",
                    "Exception",
                    "None",
                    "typing.Callable[, ]"
                ],
                "get_links": [
                    "bool"
                ],
                "get_images": [
                    "bool"
                ],
                "distance": [
                    "int"
                ]
            }
        }
    },
    "JiVE-Image-Viewer-master/jive/webpage/__init__.py": {},
    "JiVE-Image-Viewer-master/tests/test_autodetect.py": {
        "test_subreddit_url": {
            "name": "test_subreddit_url",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subreddit_name": {
            "name": "test_subreddit_name",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subreddit_r_name": {
            "name": "test_subreddit_r_name",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sequence_url": {
            "name": "test_sequence_url",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tumblr_post": {
            "name": "test_tumblr_post",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_imgur_album": {
            "name": "test_imgur_album",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_imgur_html_page_with_embedded_image": {
            "name": "test_imgur_html_page_with_embedded_image",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "JiVE-Image-Viewer-master/tests/test_helper.py": {
        "test_fold_urls": {
            "name": "test_fold_urls",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unfold_sequence_url": {
            "name": "test_unfold_sequence_url",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "JiVE-Image-Viewer-master/tools/location_of_settings.py": {},
    "JiVE-Image-Viewer-master/tools/verify_your_api_keys.py": {
        "check_imgur": {
            "name": "check_imgur",
            "location": 26,
            "return": [
                "list[]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool"
                ]
            }
        },
        "check_tumblr": {
            "name": "check_tumblr",
            "location": 38,
            "return": [
                "list[]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_imgur.get_album_id": {
            "name": "get_album_id",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "url": []
            }
        },
        "check_tumblr.extract_parts_from": {
            "name": "extract_parts_from",
            "location": 39,
            "return": [
                "tuple[]",
                "None"
            ],
            "arguments": {
                "url": []
            }
        }
    }
}
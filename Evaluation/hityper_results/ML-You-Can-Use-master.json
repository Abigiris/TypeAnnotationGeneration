{
    "ML-You-Can-Use-master/install_corpora.py": {},
    "ML-You-Can-Use-master/mlyoucanuse/aeoe_replacer.py": {
        "aeoe_transform": {
            "name": "aeoe_transform",
            "location": 49,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "string_matrix": []
            }
        },
        "AEOEReplacer.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AEOEReplacer.replace": {
            "name": "replace",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/bert_fun.py": {
        "get_word_probabilities": {
            "name": "get_word_probabilities",
            "location": 32,
            "return": [],
            "arguments": {
                "sentence": [
                    "str",
                    "list[]",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "list[tuple[]]",
                    "typing.Sequence['cirq.Qid']"
                ],
                "bert_model": [],
                "bert_tokenizer": [
                    "str"
                ]
            }
        },
        "get_alternate_words": {
            "name": "get_alternate_words",
            "location": 129,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "sentence": [
                    "int",
                    "list[]",
                    "tuple[typing.Union[int,int]]"
                ],
                "word_index": [],
                "bert_model": [
                    "str",
                    "None",
                    "bool",
                    "dict[, ]"
                ],
                "bert_tokenizer": [],
                "top": [
                    "int"
                ]
            }
        },
        "get_word_in_sentence_probability": {
            "name": "get_word_in_sentence_probability",
            "location": 201,
            "return": [
                "tuple[]",
                "tuple[tuple[]]"
            ],
            "arguments": {
                "sentence": [
                    "int"
                ],
                "word": [],
                "bert_model": [],
                "bert_tokenizer": [],
                "word_index": [
                    "int"
                ]
            }
        },
        "sum_log_probabilities": {
            "name": "sum_log_probabilities",
            "location": 289,
            "return": [
                "bool"
            ],
            "arguments": {
                "results": [
                    "int",
                    "dict[, ]",
                    "typing.Mapping",
                    "None",
                    "bytes"
                ]
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/corpus_analysis_fun.py": {
        "get_word_lengths": {
            "name": "get_word_lengths",
            "location": 29,
            "return": [
                "Counter",
                "dict[int, int]"
            ],
            "arguments": {
                "corpus_reader": [],
                "max_word_length": [
                    "int"
                ]
            }
        },
        "get_samples_for_lengths": {
            "name": "get_samples_for_lengths",
            "location": 48,
            "return": [],
            "arguments": {
                "corpus_reader": [],
                "num_samples": [
                    "int"
                ]
            }
        },
        "get_char_counts": {
            "name": "get_char_counts",
            "location": 70,
            "return": [
                "Counter",
                "dict[, int]"
            ],
            "arguments": {
                "corpus_reader": []
            }
        },
        "get_split_words": {
            "name": "get_split_words",
            "location": 86,
            "return": [
                "int",
                "list[]",
                "list[str]",
                "float"
            ],
            "arguments": {
                "corpus_reader": [],
                "word_trie": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "max_word_length": [
                    "int"
                ]
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/corpus_fun.py": {
        "get_file_type_list": {
            "name": "get_file_type_list",
            "location": 24,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "all_file_ids": [
                    "str",
                    "list[str]",
                    "bytes"
                ],
                "corpus_texts_by_type": [],
                "corpus_directories_by_type": [
                    "dict[str, str]"
                ]
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/embeddings.py": {
        "decompress": {
            "name": "decompress",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "the_filepath": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "get_embeddings_index": {
            "name": "get_embeddings_index",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "embedding_name": [
                    "str"
                ],
                "url": [
                    "None",
                    "str"
                ],
                "embeddings_filename": [
                    "None"
                ],
                "parent_dir": [
                    "None",
                    "str"
                ],
                "cache_dir": [
                    "None",
                    "str"
                ],
                "embedding_dimensions": [
                    "int"
                ]
            }
        },
        "read_text_embeddings": {
            "name": "read_text_embeddings",
            "location": 146,
            "return": [
                "tuple[typing.Union[dict[, int],list[]]]"
            ],
            "arguments": {
                "embedding_file": [
                    "str"
                ],
                "embedding_dimensions": [
                    "int"
                ]
            }
        },
        "load_embeddings": {
            "name": "load_embeddings",
            "location": 170,
            "return": [],
            "arguments": {
                "embedding_file": [
                    "str"
                ],
                "embedding_dimensions": [
                    "int"
                ]
            }
        },
        "create_embeddings_matrix": {
            "name": "create_embeddings_matrix",
            "location": 216,
            "return": [],
            "arguments": {
                "embeddings_index": [
                    "dict[, ]"
                ],
                "vocabulary": [],
                "embeddings_dimensions": [
                    "int"
                ],
                "init_by_variance": [
                    "bool"
                ]
            }
        },
        "get_embeddings_layer": {
            "name": "get_embeddings_layer",
            "location": 265,
            "return": [
                "Embedding"
            ],
            "arguments": {
                "embeddings_matrix": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "max_len": [
                    "str",
                    "int"
                ],
                "trainable": [
                    "bool"
                ]
            }
        },
        "create_embeddings_layer": {
            "name": "create_embeddings_layer",
            "location": 297,
            "return": [],
            "arguments": {
                "embeddings_file": [
                    "str",
                    "list[str]",
                    "float"
                ],
                "embeddings_dimensions": [
                    "int",
                    "str",
                    "None",
                    "float"
                ],
                "max_len": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "layer_name": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "word_index_map": [
                    "dict[str, int]",
                    "bool",
                    "str"
                ],
                "trainable": [
                    "bool"
                ]
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/featurize_text_fun.py": {
        "max_suffix": {
            "name": "max_suffix",
            "location": 26,
            "return": [],
            "arguments": {
                "word": [],
                "max_len": [
                    "int"
                ]
            }
        },
        "featurize": {
            "name": "featurize",
            "location": 50,
            "return": [
                "dict[, ]",
                "dict[typing.Text, typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "sentence": [],
                "idx": [
                    "int"
                ]
            }
        },
        "word_to_features": {
            "name": "word_to_features",
            "location": 89,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "word": [],
                "max_word_length": [
                    "int"
                ],
                "reverse": [
                    "bool"
                ]
            }
        },
        "vectorize_features": {
            "name": "vectorize_features",
            "location": 124,
            "return": [],
            "arguments": {
                "params": [
                    "set[]",
                    "dict[int, typing.Any]",
                    "int"
                ]
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/gpt2_fun.py": {
        "predict_next_token": {
            "name": "predict_next_token",
            "location": 25,
            "return": [
                "tuple[tuple[float]]"
            ],
            "arguments": {
                "words": [
                    "str"
                ],
                "gpt2_model": [],
                "gpt2_tokenizer": [
                    "str",
                    "float"
                ],
                "top": [
                    "int"
                ]
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/language_code_utils.py": {
        "fast_text_prediction_to_three_letter_language_code": {
            "name": "fast_text_prediction_to_three_letter_language_code",
            "location": 14,
            "return": [
                "list[]"
            ],
            "arguments": {
                "res": []
            }
        },
        "fast_text_prediction_to_two_letter_language_code": {
            "name": "fast_text_prediction_to_two_letter_language_code",
            "location": 41,
            "return": [
                "list[]"
            ],
            "arguments": {
                "res": []
            }
        },
        "_get_name": {
            "name": "_get_name",
            "location": 70,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "label": []
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/matrix_fun.py": {
        "run_length_encoding": {
            "name": "run_length_encoding",
            "location": 24,
            "return": [],
            "arguments": {
                "in_array": []
            }
        },
        "extract_words": {
            "name": "extract_words",
            "location": 59,
            "return": [],
            "arguments": {
                "sentence": [],
                "starts": [],
                "lengths": [],
                "values": []
            }
        },
        "merge_words": {
            "name": "merge_words",
            "location": 91,
            "return": [],
            "arguments": {
                "word_matrix": []
            }
        },
        "extract_consecutive_indices": {
            "name": "extract_consecutive_indices",
            "location": 106,
            "return": [],
            "arguments": {
                "starts": [],
                "lengths": [],
                "values": []
            }
        },
        "match_sequence": {
            "name": "match_sequence",
            "location": 139,
            "return": [],
            "arguments": {
                "arr": [],
                "seq": []
            }
        },
        "patch_cluster_holes": {
            "name": "patch_cluster_holes",
            "location": 172,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/pos_tag_fun.py": {
        "expand_postag": {
            "name": "expand_postag",
            "location": 107,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "list[typing.Optional[bytes]]"
                ]
            }
        },
        "_get_key_from_val": {
            "name": "_get_key_from_val",
            "location": 120,
            "return": [
                "tuple[typing.Union[str,dict[, ]]]",
                "tuple[typing.Union[int,list[str]]]",
                "tuple[typing.Union[str,bool]]",
                "None"
            ],
            "arguments": {
                "mydict": [
                    "dict[, ]",
                    "dict[str, dict[, ]]",
                    "dict[int, list[str]]",
                    "dict[str, str]",
                    "dict[str, bool]"
                ],
                "the_val": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "to_postag": {
            "name": "to_postag",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "description": [
                    "str"
                ]
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/romanizer.py": {
        "romanizer_transform": {
            "name": "romanizer_transform",
            "location": 398,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "string_matrix": []
            }
        },
        "Romanizer.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Romanizer.transliterate": {
            "name": "transliterate",
            "location": 359,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [],
                "demacronize": [
                    "bool"
                ]
            }
        },
        "Romanizer.demacronize_text": {
            "name": "demacronize_text",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/smart_lower_transformer.py": {
        "SmartLowerTransformer.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words_always_lower": [
                    "set[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                    "str",
                    "set[int]"
                ],
                "lower_only_file": [
                    "str"
                ]
            }
        },
        "SmartLowerTransformer.fit": {
            "name": "fit",
            "location": 54,
            "return": [
                "SmartLowerTransformer"
            ],
            "arguments": {
                "self": [],
                "string_matrix": [
                    "str",
                    "typing.Mapping",
                    "list[list[str]]",
                    "dict[, ]"
                ],
                "y": [
                    "None",
                    "str",
                    "typing.Mapping",
                    "list[list[str]]",
                    "dict[, ]"
                ]
            }
        },
        "SmartLowerTransformer._correct_word": {
            "name": "_correct_word",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "str",
                    "dict[, ]",
                    "set[]",
                    "typing.IO"
                ],
                "word": []
            }
        },
        "SmartLowerTransformer.transform": {
            "name": "transform",
            "location": 83,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "self": [],
                "string_matrix": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/text_classification_modeler.py": {
        "TextClassificationModeler.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_sequence_len": [
                    "int",
                    "float",
                    "typing.Sequence[int]",
                    "None"
                ],
                "n_grams": [
                    "None",
                    "int"
                ],
                "num_filters": [
                    "int"
                ],
                "outputs": [
                    "int"
                ],
                "loss_function": [
                    "typing.Text"
                ],
                "embedding_dimensions": [
                    "int"
                ],
                "embeddings_name": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ],
                "vocab_map": [
                    "None",
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "cache_dir": [
                    "None",
                    "list[str]",
                    "bool",
                    "typing.TextIO",
                    "str",
                    "typing.Callable[float, None]"
                ],
                "compile_model": [
                    "bool"
                ],
                "freeze_embeddings": [
                    "bool"
                ],
                "init_embeddings_by_variance": [
                    "bool"
                ],
                "dropout_rate": [
                    "float"
                ]
            }
        },
        "TextClassificationModeler._get_central_layers": {
            "name": "_get_central_layers",
            "location": 131,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "x_input": [
                    "int",
                    "str"
                ],
                "suffix": [
                    "str",
                    "int"
                ],
                "n_grams": [
                    "list[int]"
                ],
                "feature_maps": [
                    "int"
                ]
            }
        },
        "TextClassificationModeler.build_model": {
            "name": "build_model",
            "location": 162,
            "return": [
                "Model"
            ],
            "arguments": {
                "self": [],
                "embedding_layer": [
                    "bool"
                ]
            }
        },
        "TextClassificationModeler.build_dual_embeddings_model": {
            "name": "build_dual_embeddings_model",
            "location": 201,
            "return": [
                "Model"
            ],
            "arguments": {
                "self": [],
                "embedding_layer_channel_1": [
                    "int",
                    "tuple[typing.Union[str,str,str]]",
                    "str"
                ],
                "embedding_layer_channel_2": [
                    "int",
                    "tuple[typing.Union[str,str,str]]",
                    "str"
                ]
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/text_cleaners.py": {
        "dehyphenate": {
            "name": "dehyphenate",
            "location": 55,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "swallow": {
            "name": "swallow",
            "location": 74,
            "return": [],
            "arguments": {
                "text": [],
                "pattern_matcher": []
            }
        },
        "swallow_braces": {
            "name": "swallow_braces",
            "location": 89,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "drop_punct": {
            "name": "drop_punct",
            "location": 102,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "normalize_accents": {
            "name": "normalize_accents",
            "location": 120,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "remove_macrons": {
            "name": "remove_macrons",
            "location": 194,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "swallow_angular_brackets": {
            "name": "swallow_angular_brackets",
            "location": 219,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "disappear_angle_brackets": {
            "name": "disappear_angle_brackets",
            "location": 233,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "swallow_square_brackets": {
            "name": "swallow_square_brackets",
            "location": 244,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "swallow_obelized_words": {
            "name": "swallow_obelized_words",
            "location": 259,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "disappear_round_brackets": {
            "name": "disappear_round_brackets",
            "location": 281,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "swallow_editorial": {
            "name": "swallow_editorial",
            "location": 294,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "accept_editorial": {
            "name": "accept_editorial",
            "location": 307,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "truecase": {
            "name": "truecase",
            "location": 324,
            "return": [],
            "arguments": {
                "word": [],
                "case_counter": []
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/text_deduplicater.py": {
        "punctuation_for_spaces_dict": {
            "name": "punctuation_for_spaces_dict",
            "location": 267,
            "return": [],
            "arguments": {}
        },
        "grammify": {
            "name": "grammify",
            "location": 284,
            "return": [
                "list[]"
            ],
            "arguments": {
                "word_list": [],
                "num": [
                    "int"
                ]
            }
        },
        "pick_random_coeffs": {
            "name": "pick_random_coeffs",
            "location": 298,
            "return": [
                "list[]"
            ],
            "arguments": {
                "num": [
                    "int"
                ],
                "max_hash": [
                    "int"
                ]
            }
        },
        "TextDeduplicater.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coeff_a": [
                    "None",
                    "int"
                ],
                "coeff_b": [
                    "None",
                    "int"
                ],
                "num_hash_fun": [
                    "int"
                ],
                "drop_punctuation": [
                    "bool"
                ],
                "max_hash": [
                    "int"
                ],
                "prime_above_max_hash": [
                    "int"
                ]
            }
        },
        "TextDeduplicater.add_document": {
            "name": "add_document",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doc_name": [
                    "str",
                    "typing.IO",
                    "None"
                ],
                "text": [
                    "str",
                    "None"
                ]
            }
        },
        "TextDeduplicater.get_unique_doc_names": {
            "name": "get_unique_doc_names",
            "location": 150,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextDeduplicater.get_possible_duplicate_doc_names": {
            "name": "get_possible_duplicate_doc_names",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "threshold": [
                    "float"
                ]
            }
        },
        "TextDeduplicater.calculate_similarity": {
            "name": "calculate_similarity",
            "location": 235,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "text_one": [
                    "str"
                ],
                "text_two": [
                    "str"
                ]
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/trie_transformer.py": {
        "TrieTransformer.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trie_file": [
                    "str"
                ],
                "word_list": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "save_unseen": [
                    "bool"
                ],
                "save_dir": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "TrieTransformer.fit": {
            "name": "fit",
            "location": 65,
            "return": [
                "TrieTransformer"
            ],
            "arguments": {
                "self": [],
                "string_matrix": [
                    "str",
                    "typing.Mapping",
                    "list[list[str]]",
                    "dict[, ]"
                ],
                "y": [
                    "None",
                    "str",
                    "typing.Mapping",
                    "list[list[str]]",
                    "dict[, ]"
                ]
            }
        },
        "TrieTransformer.extract_word_pair": {
            "name": "extract_word_pair",
            "location": 74,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "long_word": []
            }
        },
        "TrieTransformer.transform": {
            "name": "transform",
            "location": 96,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "self": [],
                "string_matrix": [
                    "str",
                    "list[list[str]]",
                    "dict[, ]"
                ]
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/word_trie.py": {
        "WordTrie.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_ending_marker": [
                    "None",
                    "int",
                    "bytes",
                    "float",
                    "list[int]"
                ]
            }
        },
        "WordTrie.add": {
            "name": "add",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "WordTrie.add_all": {
            "name": "add_all",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "list[str]",
                    "list[tuple[typing.Union[str,...]]]"
                ]
            }
        },
        "WordTrie.has_word": {
            "name": "has_word",
            "location": 54,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "WordTrie.extract_word_pair": {
            "name": "extract_word_pair",
            "location": 80,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "long_word": [],
                "min_word_length": [
                    "int"
                ]
            }
        },
        "TupleTrie.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_ending_marker": [
                    "None",
                    "int",
                    "bytes",
                    "float",
                    "list[int]"
                ]
            }
        },
        "TupleTrie.add": {
            "name": "add",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tup": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "TupleTrie.add_all": {
            "name": "add_all",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "list[str]",
                    "list[tuple[typing.Union[str,...]]]"
                ]
            }
        },
        "TupleTrie.has_tuple": {
            "name": "has_tuple",
            "location": 144,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "tup": []
            }
        }
    },
    "ML-You-Can-Use-master/mlyoucanuse/__init__.py": {},
    "ML-You-Can-Use-master/searching/dataloader.py": {
        "SearchRelevanceDataset.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "None",
                    "int",
                    "list[str]"
                ],
                "maxlen": [
                    "bool",
                    "bytes",
                    "None"
                ],
                "tokenizer": [
                    "None",
                    "str",
                    "int"
                ],
                "tokenizer_name": [
                    "typing.Text"
                ],
                "data_columns": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[typing.Any]"
                ],
                "label_name": [
                    "typing.Text"
                ],
                "max_len": [
                    "int"
                ]
            }
        },
        "SearchRelevanceDataset.__len__": {
            "name": "__len__",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchRelevanceDataset.create_token_type_ids": {
            "name": "create_token_type_ids",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "tids": []
            }
        },
        "SearchRelevanceDataset.__getitem__": {
            "name": "__getitem__",
            "location": 60,
            "return": [
                "tuple[typing.Union[int,str,dict[str, dict[str, int]],list[]]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    }
}
{
    "MOBO-master/setup.py": {},
    "MOBO-master/docs/conf.py": {},
    "MOBO-master/mobo/__init__.py": {},
    "MOBO-master/mobo/acquisition/ei.py": {
        "ei": {
            "name": "ei",
            "location": 4,
            "return": [],
            "arguments": {
                "y_pred": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "y_train": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "MOBO-master/mobo/acquisition/ucb.py": {
        "ucb": {
            "name": "ucb",
            "location": 4,
            "return": [
                "str",
                "float",
                "list[]",
                "int"
            ],
            "arguments": {
                "y_pred": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "y_train": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "MOBO-master/mobo/acquisition/__init__.py": {},
    "MOBO-master/mobo/bayesopt/core.py": {
        "MultiObjectiveBayesianOpt.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluation_function": [
                    "None",
                    "float",
                    "int",
                    "str",
                    "typing.Iterable[typing.Iterable[]]",
                    "typing.Hashable"
                ],
                "Initializer": [],
                "surrogate_model": [],
                "optimizer": [],
                "acquisition": [],
                "n_objective_dimension": [
                    "int"
                ],
                "n_design_variables_dimension": [
                    "int"
                ],
                "n_initial_sample": [
                    "int"
                ],
                "bayesian_optimization_iter_max": [
                    "int"
                ],
                "likelihood_optimization_iter_max": [
                    "int"
                ],
                "likelihood_optimization_criteria": [
                    "float"
                ],
                "n_new_samples": [
                    "int"
                ],
                "n_ga_population": [
                    "int"
                ],
                "n_ga_generation": [
                    "int"
                ]
            }
        },
        "MultiObjectiveBayesianOpt._initialize": {
            "name": "_initialize",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiObjectiveBayesianOpt._train_likelihood": {
            "name": "_train_likelihood",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiObjectiveBayesianOpt._wrap_model_and_acquisition": {
            "name": "_wrap_model_and_acquisition",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiObjectiveBayesianOpt._find_new_sample": {
            "name": "_find_new_sample",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiObjectiveBayesianOpt.optimize": {
            "name": "optimize",
            "location": 148,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiObjectiveBayesianOpt._wrap_model_and_acquisition.ei_with_surrogate_model": {
            "name": "ei_with_surrogate_model",
            "location": 107,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "MOBO-master/mobo/bayesopt/__init__.py": {},
    "MOBO-master/mobo/model/exact_gp.py": {
        "ExactGPModel.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_x": [
                    "int",
                    "float",
                    "str",
                    "collections.abc.Awaitable[T]"
                ],
                "train_y": [],
                "likelihood": []
            }
        },
        "ExactGPModel.forward": {
            "name": "forward",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "MOBO-master/mobo/model/__init__.py": {},
    "MOBO-master/mobo/optimizer/multi_objective_optimizer.py": {
        "NSGA2.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "evaluation_function": [],
                "bound_low": [],
                "bound_up": [],
                "n_design_variables_dimension": [],
                "n_population": [],
                "n_generation": [],
                "crossover_probability": [],
                "random_seed": []
            }
        },
        "NSGA2.setup": {
            "name": "setup",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NSGA2.run": {
            "name": "run",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NSGA2.uniform": {
            "name": "uniform",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "low": [],
                "up": [],
                "size": []
            }
        }
    },
    "MOBO-master/mobo/optimizer/__init__.py": {},
    "MOBO-master/mobo/test_functions/multi_objective_functions.py": {
        "zdt1": {
            "name": "zdt1",
            "location": 5,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "zdt2": {
            "name": "zdt2",
            "location": 28,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "schaffer_n1": {
            "name": "schaffer_n1",
            "location": 50,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "binh_korn": {
            "name": "binh_korn",
            "location": 69,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "chakong_haimes": {
            "name": "chakong_haimes",
            "location": 94,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "osyczka_kundu": {
            "name": "osyczka_kundu",
            "location": 119,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "MOBO-master/mobo/test_functions/__init__.py": {},
    "MOBO-master/mobo/utils/__init__.py": {},
    "MOBO-master/test/optimizer/test_multi_objective_optimizers.py": {
        "test_nsga2": {
            "name": "test_nsga2",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "MOBO-master/tutorials/multi_objective_optimization_example.py": {}
}
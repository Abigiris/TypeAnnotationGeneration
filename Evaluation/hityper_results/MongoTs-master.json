{
    "MongoTs-master/setup.py": {},
    "MongoTs-master/demo/dashboard.py": {
        "make_filter": {
            "name": "make_filter",
            "location": 63,
            "return": [],
            "arguments": {
                "tag": [
                    "str",
                    "None"
                ]
            }
        },
        "get_series": {
            "name": "get_series",
            "location": 163,
            "return": [
                "list[]"
            ],
            "arguments": {
                "df": [
                    "str"
                ],
                "tab": [
                    "bool"
                ],
                "groupbys": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "get_series0": {
            "name": "get_series0",
            "location": 177,
            "return": [],
            "arguments": {
                "serie": [
                    "str",
                    "typing.Callable[, ]",
                    "list[int]"
                ],
                "tab": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "typing.Callable[, ]",
                    "list[int]"
                ]
            }
        },
        "get_start_end_date": {
            "name": "get_start_end_date",
            "location": 193,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "update_graph": {
            "name": "update_graph",
            "location": 210,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "date_range_slider_value": [
                    "bool",
                    "None"
                ],
                "aggregateby_number": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "aggregateby_interval": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "tag_filter_cities": [],
                "groupby": [
                    "typing.Any",
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "graph_type": [
                    "str",
                    "typing.Iterable[str]",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "MongoTs-master/mongots/aggregateby.py": {
        "parse_aggregateby": {
            "name": "parse_aggregateby",
            "location": 73,
            "return": [
                "Aggregateby"
            ],
            "arguments": {
                "raw_aggregateby": [
                    "str"
                ]
            }
        },
        "Aggregateby.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "int"
                ],
                "coef": [
                    "int"
                ],
                "min_interval": [
                    "int"
                ],
                "max_interval": [
                    "int"
                ]
            }
        },
        "Aggregateby.aggregation_keys": {
            "name": "aggregation_keys",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aggregateby.freq": {
            "name": "freq",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MongoTs-master/mongots/client.py": {
        "MongoTSClient.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSClient.get_database": {
            "name": "get_database",
            "location": 14,
            "return": [
                "MongoTSDatabase"
            ],
            "arguments": {
                "self": [],
                "database_name": [
                    "str"
                ]
            }
        },
        "MongoTSClient.__getattr__": {
            "name": "__getattr__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "MongoTs-master/mongots/collection.py": {
        "MongoTSCollection.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mongo_collection": [
                    "int",
                    "float"
                ],
                "metadata": [
                    "int",
                    "float"
                ]
            }
        },
        "MongoTSCollection.insert_one": {
            "name": "insert_one",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "float"
                ],
                "timestamp": [
                    "bool",
                    "dict[str, str]",
                    "None",
                    "dict[, ]"
                ],
                "tags": [
                    "None",
                    "str",
                    "dict[, ]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "MongoTSCollection.query": {
            "name": "query",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "start": [
                    "list[]",
                    "None",
                    "list[int]",
                    "typing.Sequence[typing.Any]",
                    "int",
                    "list[str]",
                    "typing.Sequence[str]"
                ],
                "end": [
                    "list[]",
                    "None",
                    "list[int]",
                    "typing.Sequence[typing.Any]",
                    "int",
                    "list[str]",
                    "typing.Sequence[str]"
                ],
                "tags": [
                    "None",
                    "int",
                    "typing.Callable[str, int]",
                    "str"
                ],
                "aggregateby": [
                    "None",
                    "str",
                    "int",
                    "dict[str, dict[, ]]"
                ],
                "groupby": [
                    "None",
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "MongoTSCollection.get_tags": {
            "name": "get_tags",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoTSCollection.get_timerange": {
            "name": "get_timerange",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "MongoTs-master/mongots/constants.py": {},
    "MongoTs-master/mongots/database.py": {
        "MongoTSDatabase.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mongo_database": [
                    "str",
                    "None"
                ]
            }
        },
        "MongoTSDatabase.get_collection": {
            "name": "get_collection",
            "location": 15,
            "return": [
                "MongoTSCollection"
            ],
            "arguments": {
                "self": [],
                "collection_name": [
                    "str",
                    "list[]"
                ]
            }
        },
        "MongoTSDatabase.get_collections": {
            "name": "get_collections",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoTSDatabase.__getattr__": {
            "name": "__getattr__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "MongoTs-master/mongots/dataframe.py": {
        "build_dataframe": {
            "name": "build_dataframe",
            "location": 13,
            "return": [
                "tuple[typing.Union[str,int,str,str]]",
                "str"
            ],
            "arguments": {
                "raw_data": [],
                "aggregateby": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "groupby": []
            }
        }
    },
    "MongoTs-master/mongots/insert.py": {
        "_build_empty_aggregate_document": {
            "name": "_build_empty_aggregate_document",
            "location": 24,
            "return": [
                "dict[, int]"
            ],
            "arguments": {}
        },
        "_build_empty_one_hour_document": {
            "name": "_build_empty_one_hour_document",
            "location": 34,
            "return": [
                "str",
                "dict[int, tuple[typing.Union[int,str]]]"
            ],
            "arguments": {
                "year": [
                    "int",
                    "None"
                ],
                "month": [
                    "int",
                    "None"
                ],
                "day": [
                    "int",
                    "None"
                ],
                "hour": [
                    "int",
                    "None"
                ]
            }
        },
        "_build_empty_one_day_document": {
            "name": "_build_empty_one_day_document",
            "location": 41,
            "return": [],
            "arguments": {
                "year": [
                    "int",
                    "str"
                ],
                "month": [
                    "int",
                    "str"
                ],
                "day": [
                    "int",
                    "str"
                ]
            }
        },
        "_build_empty_one_month_document": {
            "name": "_build_empty_one_month_document",
            "location": 52,
            "return": [],
            "arguments": {
                "year": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "dict[str, dict[str, int]]"
                ],
                "month": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "dict[str, dict[str, int]]"
                ]
            }
        },
        "_build_empty_one_year_document": {
            "name": "_build_empty_one_year_document",
            "location": 65,
            "return": [],
            "arguments": {
                "year": [
                    "int",
                    "str",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "build_empty_document": {
            "name": "build_empty_document",
            "location": 76,
            "return": [],
            "arguments": {
                "timestamp": [
                    "typing.Callable[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "build_filter": {
            "name": "build_filter",
            "location": 80,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "timestamp": [
                    "str"
                ],
                "tags": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "_build_update_keys": {
            "name": "_build_update_keys",
            "location": 91,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "_build_inc_update": {
            "name": "_build_inc_update",
            "location": 110,
            "return": [
                "dict[str, ]"
            ],
            "arguments": {
                "value": [],
                "update_keys": [
                    "str",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "_build_min_max_update": {
            "name": "_build_min_max_update",
            "location": 124,
            "return": [
                "tuple[dict[str, typing.Union[str,None,list[str]]]]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "update_keys": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "build_update": {
            "name": "build_update",
            "location": 138,
            "return": [
                "dict[typing.Text, typing.Union[int,str,list[typing.Any],None]]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "list[str]",
                    "set[str]",
                    "int"
                ],
                "timestamp": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "MongoTs-master/mongots/metadata.py": {
        "MongoTSMetadata.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata_collection": [
                    "int",
                    "float"
                ]
            }
        },
        "MongoTSMetadata.update": {
            "name": "update",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "collection_name": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.DefaultDict",
                    "dict[str, typing.Any]"
                ],
                "timestamp": [
                    "str",
                    "dict[str, str]",
                    "bool",
                    "bytes"
                ],
                "tags": []
            }
        },
        "MongoTSMetadata.get_tags": {
            "name": "get_tags",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "collection_name": [
                    "str",
                    "None"
                ]
            }
        },
        "MongoTSMetadata.get_timerange": {
            "name": "get_timerange",
            "location": 55,
            "return": [
                "None",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "collection_name": [
                    "str"
                ]
            }
        },
        "MongoTSMetadata._format_collection": {
            "name": "_format_collection",
            "location": 74,
            "return": [
                "dict[typing.Text, tuple[]]"
            ],
            "arguments": {
                "self": [],
                "collection": []
            }
        },
        "MongoTSMetadata.get_collections": {
            "name": "get_collections",
            "location": 85,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MongoTs-master/mongots/query.py": {
        "build_initial_match": {
            "name": "build_initial_match",
            "location": 22,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ],
                "tags": [
                    "int",
                    "typing.Sequence[str]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "_get_floor_datetime": {
            "name": "_get_floor_datetime",
            "location": 37,
            "return": [],
            "arguments": {
                "aggregation_level": [
                    "str",
                    "bool",
                    "bytes",
                    "dict[, ]"
                ],
                "dt": [
                    "int",
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "_build_unwind": {
            "name": "_build_unwind",
            "location": 50,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "aggregate_by_keys": [
                    "str"
                ],
                "end_index": [
                    "int"
                ]
            }
        },
        "_build_intermediate_match": {
            "name": "_build_intermediate_match",
            "location": 59,
            "return": [
                "dict[typing.Text, dict[str, dict[typing.Text, ]]]"
            ],
            "arguments": {
                "aggregate_by_keys": [
                    "str"
                ],
                "aggregation_key": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None"
                ],
                "end_index": [
                    "int"
                ],
                "start": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None"
                ],
                "end": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "build_unwind_and_match": {
            "name": "build_unwind_and_match",
            "location": 76,
            "return": [
                "list[]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str",
                    "None"
                ],
                "end": [
                    "int",
                    "str",
                    "None"
                ],
                "aggregate_by": [
                    "dict[str, str]",
                    "str",
                    "int",
                    "None",
                    "bytes",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "build_project": {
            "name": "build_project",
            "location": 100,
            "return": [
                "dict[typing.Text, dict[typing.Text, str]]"
            ],
            "arguments": {
                "interval": [
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "groupby": [
                    "str",
                    "dict[, ]",
                    "dict[str, list[typing.Any]]",
                    "bytes"
                ]
            }
        },
        "build_sort": {
            "name": "build_sort",
            "location": 127,
            "return": [
                "dict[typing.Text, dict[typing.Text, int]]"
            ],
            "arguments": {}
        }
    },
    "MongoTs-master/mongots/types.py": {},
    "MongoTs-master/mongots/utils.py": {
        "is_name_valid": {
            "name": "is_name_valid",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_day_count": {
            "name": "get_day_count",
            "location": 5,
            "return": [],
            "arguments": {
                "year": [
                    "int"
                ],
                "month": [
                    "int"
                ]
            }
        }
    },
    "MongoTs-master/mongots/__init__.py": {},
    "MongoTs-master/test/aggregateby_test.py": {
        "AggregatebyTest.valid_str_aggregatebys": {
            "name": "valid_str_aggregatebys",
            "location": 9,
            "return": [
                "list[tuple[typing.Union[typing.Text,int]]]"
            ],
            "arguments": {}
        },
        "AggregatebyTest.test_parse_valid_str_aggregateby": {
            "name": "test_parse_valid_str_aggregateby",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "str_aggregateby": [
                    "str"
                ],
                "int_aggregateby": [
                    "str"
                ],
                "coef": [
                    "str"
                ]
            }
        },
        "AggregatebyTest.invalid_str_aggregatebys": {
            "name": "invalid_str_aggregatebys",
            "location": 38,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "AggregatebyTest.test_fails_to_parse_invalid_aggregateby": {
            "name": "test_fails_to_parse_invalid_aggregateby",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "str_aggregateby": [
                    "str",
                    "tuple[str]",
                    "list[str]",
                    "typing.Mapping"
                ]
            }
        },
        "AggregatebyTest.aggregation_keys_per_aggregateby": {
            "name": "aggregation_keys_per_aggregateby",
            "location": 46,
            "return": [
                "list[tuple[typing.Union[int,list[typing.Text]]]]"
            ],
            "arguments": {}
        },
        "AggregatebyTest.test_can_parse_valid_str_aggregateby": {
            "name": "test_can_parse_valid_str_aggregateby",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "int_aggregateby": [
                    "str",
                    "bool"
                ],
                "aggregation_keys": [
                    "str"
                ]
            }
        },
        "AggregatebyTest.freq_per_aggregateby": {
            "name": "freq_per_aggregateby",
            "location": 64,
            "return": [
                "list[tuple[typing.Union[int,typing.Text]]]"
            ],
            "arguments": {}
        },
        "AggregatebyTest.test_aggregateby_freq": {
            "name": "test_aggregateby_freq",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "coef": [
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "expected_freq": [
                    "str"
                ]
            }
        }
    },
    "MongoTs-master/test/client_test.py": {
        "MongoTSClientTest.test_mongots_client_init_succeeds_when_mongo_client_is_provided": {
            "name": "test_mongots_client_init_succeeds_when_mongo_client_is_provided",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSClientTest.test_mongots_client_init_succeeds_when_kwargs_are_provided": {
            "name": "test_mongots_client_init_succeeds_when_kwargs_are_provided",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSClientTest.test_mongots_client_init_succeeds_when_args_are_provided": {
            "name": "test_mongots_client_init_succeeds_when_args_are_provided",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSClientTest.test_get_database_returns_a_database": {
            "name": "test_get_database_returns_a_database",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSClientTest.test_magic_get_database_returns_a_database": {
            "name": "test_magic_get_database_returns_a_database",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSClientTest.test_get_collection_returns_a_collection": {
            "name": "test_get_collection_returns_a_collection",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSClientTest.test_magic_get_collection_returns_a_collection": {
            "name": "test_magic_get_collection_returns_a_collection",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSClientTest.test_magic_get_database_fails_for_invalid_name": {
            "name": "test_magic_get_database_fails_for_invalid_name",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSClientTest.test_magic_get_collection_fails_for_invalid_name": {
            "name": "test_magic_get_collection_fails_for_invalid_name",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSClientTest.test_mongots_collection_has_a_metadata_collection": {
            "name": "test_mongots_collection_has_a_metadata_collection",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MongoTs-master/test/collection_test.py": {
        "MongoTSCollectionTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSCollectionTest.assertDataframeColumns": {
            "name": "assertDataframeColumns",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "list[]",
                    "bool",
                    "str",
                    "list[dict[str, str]]",
                    "list[str]"
                ]
            }
        },
        "MongoTSCollectionTest.test_insert_one_succeeds": {
            "name": "test_insert_one_succeeds",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "build_update": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "MongoTSCollectionTest.test_insert_one_call_build_filters": {
            "name": "test_insert_one_call_build_filters",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "build_update": [],
                "build_filter": []
            }
        },
        "MongoTSCollectionTest.test_insert_one_call_build_update": {
            "name": "test_insert_one_call_build_update",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "build_update": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "MongoTSCollectionTest.test_query_calls_build_update": {
            "name": "test_query_calls_build_update",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "build_initial_match": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MongoTSCollectionTest.test_query_calls_build_unwind_and_match": {
            "name": "test_query_calls_build_unwind_and_match",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "build_unwind_and_match": [
                    "dict[str, str]"
                ],
                "parse_aggregateby": []
            }
        },
        "MongoTSCollectionTest.test_query_calls_build_project": {
            "name": "test_query_calls_build_project",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "build_project": [
                    "str"
                ],
                "parse_aggregateby": []
            }
        },
        "MongoTSCollectionTest.test_query_calls_build_sort": {
            "name": "test_query_calls_build_sort",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "build_sort": []
            }
        },
        "MongoTSCollectionTest.query_args": {
            "name": "query_args",
            "location": 143,
            "return": [
                "list[typing.Union[tuple[dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]],tuple[dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]]]]]"
            ],
            "arguments": {}
        },
        "MongoTSCollectionTest.test_query_returns_a_pandas_dataframe_with_the_expected_columns": {
            "name": "test_query_returns_a_pandas_dataframe_with_the_expected_columns",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "None"
                ],
                "end": [
                    "int",
                    "None"
                ],
                "kwargs": []
            }
        },
        "MongoTSCollectionTest.test_query_raises_an_exception_if_no_interval_is_provided": {
            "name": "test_query_raises_an_exception_if_no_interval_is_provided",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSCollectionTest.test_metadata_is_updated_when_inserting": {
            "name": "test_metadata_is_updated_when_inserting",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSCollectionTest.test_get_tags_returns_no_tag": {
            "name": "test_get_tags_returns_no_tag",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSCollectionTest.test_get_tags_returns_tags": {
            "name": "test_get_tags_returns_tags",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSCollectionTest.test_get_timerange_returns_no_timerange": {
            "name": "test_get_timerange_returns_no_timerange",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSCollectionTest.test_get_timerange_returns_timerange": {
            "name": "test_get_timerange_returns_timerange",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MongoTs-master/test/database_test.py": {
        "MongoTSDatabaseTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSDatabaseTest.test_database_is_instance_of_mongots_database": {
            "name": "test_database_is_instance_of_mongots_database",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSDatabaseTest.test_get_collections_return_empty": {
            "name": "test_get_collections_return_empty",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoTSDatabaseTest.test_get_collections_return_two_collection": {
            "name": "test_get_collections_return_two_collection",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MongoTs-master/test/dataframe_test.py": {
        "DataframeTest.raw_data_groupbys_and_expected_outputs": {
            "name": "raw_data_groupbys_and_expected_outputs",
            "location": 12,
            "return": [
                "list[tuple[typing.Union[list[dict[typing.Text, typing.Union[int,float,typing.Text]]],list[typing.Text],list[list[typing.Union[int,float]]]]]]"
            ],
            "arguments": {}
        },
        "DataframeTest.test_build_dataframe": {
            "name": "test_build_dataframe",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "typing.Callable[typing.Any, None]",
                    "dict[, ]",
                    "dict[str, list[int]]",
                    "bytes",
                    "None"
                ],
                "aggregateby": [
                    "typing.Callable[typing.Any, None]",
                    "dict[, ]",
                    "dict[str, list[int]]",
                    "bytes",
                    "None"
                ],
                "groupby": [
                    "typing.Callable[typing.Any, None]",
                    "dict[, ]",
                    "dict[str, list[int]]",
                    "bytes",
                    "None"
                ],
                "expected_index": [
                    "int",
                    "list[int]",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "expected_data": [
                    "int",
                    "list[int]",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "MongoTs-master/test/insert_test.py": {
        "InsertTest.test_build_filter_add_a_timestamp_to_tags": {
            "name": "test_build_filter_add_a_timestamp_to_tags",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_build_filter_add_a_timestamp_when_no_tags_are_provided": {
            "name": "test_build_filter_add_a_timestamp_when_no_tags_are_provided",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_build_filter_do_not_modify_the_tag_object": {
            "name": "test_build_filter_do_not_modify_the_tag_object",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_build_update_succeeds": {
            "name": "test_build_update_succeeds",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_build_update_keys_return_correct_reults": {
            "name": "test_build_update_keys_return_correct_reults",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_build_inc_update_returns_correct_result": {
            "name": "test_build_inc_update_returns_correct_result",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_build_min_max_update_returns_correct_result": {
            "name": "test_build_min_max_update_returns_correct_result",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InsertTest.test_build_update_calls_build_inc_update": {
            "name": "test_build_update_calls_build_inc_update",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_build_inc_update": []
            }
        },
        "InsertTest.test_build_update_calls_build_max_update": {
            "name": "test_build_update_calls_build_max_update",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_build_min_max_update": []
            }
        },
        "InsertTest.test_build_update_returns_correct_result": {
            "name": "test_build_update_returns_correct_result",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_build_update_keys": [
                    "str",
                    "dict[, ]",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "InsertTest.empty_document_data": {
            "name": "empty_document_data",
            "location": 152,
            "return": [
                "list[tuple[list[int]]]"
            ],
            "arguments": {}
        },
        "InsertTest.test_empty_document": {
            "name": "test_empty_document",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "str",
                    "bool"
                ],
                "year_timestamp": [
                    "typing.Iterable[typing.Iterable[typing.Any]]"
                ],
                "month_day_count": [
                    "int",
                    "float",
                    "None"
                ]
            }
        }
    },
    "MongoTs-master/test/integration_test.py": {
        "client": {
            "name": "client",
            "location": 15,
            "return": [
                "MongoTSClient"
            ],
            "arguments": {}
        },
        "db": {
            "name": "db",
            "location": 20,
            "return": [],
            "arguments": {
                "client": [
                    "str"
                ]
            }
        },
        "collection": {
            "name": "collection",
            "location": 25,
            "return": [],
            "arguments": {
                "db": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "test_are_mongots_instances": {
            "name": "test_are_mongots_instances",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "db": [],
                "collection": []
            }
        },
        "test_contains_mongo_instances": {
            "name": "test_contains_mongo_instances",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "db": [],
                "collection": []
            }
        },
        "test_insert_temperatures_in_paris_one_by_one": {
            "name": "test_insert_temperatures_in_paris_one_by_one",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[int, str]"
                ],
                "value": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[int, str]"
                ],
                "timestamp": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[int, str]"
                ],
                "tags": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[int, str]"
                ]
            }
        },
        "test_right_number_of_documents_were_inserted": {
            "name": "test_right_number_of_documents_were_inserted",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "int",
                    "str"
                ]
            }
        },
        "test_yearly_temperatures_in_paris_were_correctly_inserted": {
            "name": "test_yearly_temperatures_in_paris_were_correctly_inserted",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": []
            }
        },
        "test_monthly_temperatures_in_paris_were_correctly_inserted": {
            "name": "test_monthly_temperatures_in_paris_were_correctly_inserted",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": []
            }
        },
        "test_daily_temperatures_in_paris_were_correctly_inserted": {
            "name": "test_daily_temperatures_in_paris_were_correctly_inserted",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": []
            }
        },
        "test_hourly_temperatures_in_paris_were_correctly_inserted": {
            "name": "test_hourly_temperatures_in_paris_were_correctly_inserted",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": []
            }
        },
        "big_collection": {
            "name": "big_collection",
            "location": 151,
            "return": [],
            "arguments": {
                "db": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "test_insert_constants_per_month_succeeds": {
            "name": "test_insert_constants_per_month_succeeds",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "big_collection": []
            }
        },
        "test_query_retrieve_expected_constant_per_month": {
            "name": "test_query_retrieve_expected_constant_per_month",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "big_collection": []
            }
        },
        "weather_data_pressure": {
            "name": "weather_data_pressure",
            "location": 188,
            "return": [
                "list[tuple[typing.Union[float,dict[typing.Text, ]]]]"
            ],
            "arguments": {}
        },
        "pressure_collection": {
            "name": "pressure_collection",
            "location": 211,
            "return": [],
            "arguments": {
                "db": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "test_insert_pressure_succeeds": {
            "name": "test_insert_pressure_succeeds",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "pressure_collection": [
                    "str",
                    "int"
                ],
                "weather_data_pressure": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_pressure_queries": {
            "name": "test_pressure_queries",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "pressure_collection": [
                    "str",
                    "int"
                ],
                "args": [],
                "kwargs": [],
                "expected": []
            }
        },
        "test_get_tags": {
            "name": "test_get_tags",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "pressure_collection": [
                    "str"
                ]
            }
        },
        "test_get_timerange": {
            "name": "test_get_timerange",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "pressure_collection": []
            }
        },
        "test_get_collections": {
            "name": "test_get_collections",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        }
    },
    "MongoTs-master/test/metadata_test.py": {
        "MetadataTest.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTest.test_metadata_collection_name_is_right": {
            "name": "test_metadata_collection_name_is_right",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTest.test_metadata_acknowledge_no_edge_update": {
            "name": "test_metadata_acknowledge_no_edge_update",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTest.test_metadata_acknowledge_tag_update": {
            "name": "test_metadata_acknowledge_tag_update",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTest.test_metadata_retrieves_no_tags": {
            "name": "test_metadata_retrieves_no_tags",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTest.test_metadata_retrieves_empty_tags": {
            "name": "test_metadata_retrieves_empty_tags",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTest.test_metadata_retrieves_one_tag": {
            "name": "test_metadata_retrieves_one_tag",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTest.test_metadata_retrieves_two_tags": {
            "name": "test_metadata_retrieves_two_tags",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTest.test_metadata_retrieves_empty_timestamp_statistics": {
            "name": "test_metadata_retrieves_empty_timestamp_statistics",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTest.test_metadata_retrieves_timestamp_statistics": {
            "name": "test_metadata_retrieves_timestamp_statistics",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTest.test_get_collections_returns_empty": {
            "name": "test_get_collections_returns_empty",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTest.test_get_collections_returns_two_collection": {
            "name": "test_get_collections_returns_two_collection",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MongoTs-master/test/query_test.py": {
        "QueryTest.valid_intervals_to_be_floored": {
            "name": "valid_intervals_to_be_floored",
            "location": 11,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "QueryTest.test_get_floor_datetime_returns_correct_datetime": {
            "name": "test_get_floor_datetime_returns_correct_datetime",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "str",
                    "bool"
                ],
                "dt": [
                    "str",
                    "bool"
                ],
                "floor_dt": [
                    "str",
                    "bool"
                ]
            }
        },
        "QueryTest.invalid_intervals_to_be_floored": {
            "name": "invalid_intervals_to_be_floored",
            "location": 29,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "QueryTest.test_get_floor_datetime_fails_for_invalid_interval": {
            "name": "test_get_floor_datetime_fails_for_invalid_interval",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "str",
                    "bool"
                ],
                "dt": [
                    "str",
                    "bool"
                ]
            }
        },
        "QueryTest.test_build_initial_match_succeeds": {
            "name": "test_build_initial_match_succeeds",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryTest.build_unwind_and_match_data": {
            "name": "build_unwind_and_match_data",
            "location": 58,
            "return": [
                "list[tuple[list[typing.Union[dict[typing.Text, typing.Text],dict[typing.Text, dict[typing.Text, dict[typing.Text, ]]]]]]]"
            ],
            "arguments": {}
        },
        "QueryTest.test_build_unwind_and_match_succeeds": {
            "name": "test_build_unwind_and_match_succeeds",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "list[\"Block\"]",
                    "int",
                    "typing.Any",
                    "None"
                ],
                "end": [
                    "list[\"Block\"]",
                    "int",
                    "typing.Any",
                    "None"
                ],
                "interval": [
                    "list[\"Block\"]",
                    "int",
                    "typing.Any",
                    "None"
                ],
                "pipeline": [
                    "list[\"Block\"]",
                    "int",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "QueryTest.build_project_data": {
            "name": "build_project_data",
            "location": 144,
            "return": [
                "list[tuple[dict[typing.Text, dict[typing.Text, typing.Text]]]]"
            ],
            "arguments": {}
        },
        "QueryTest.test_build_project_succeeds": {
            "name": "test_build_project_succeeds",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "str"
                ],
                "project_stage": [
                    "str"
                ]
            }
        }
    },
    "MongoTs-master/test/__init__.py": {},
    "MongoTs-master/tools/generator_fake_data.py": {
        "FakeDataGenerator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_time": [],
                "time_key": [
                    "typing.Text"
                ],
                "time_increment": [
                    "int"
                ],
                "params": [
                    "list[dict[typing.Text, typing.Union[typing.Text,typing.Callable[, ]]]]"
                ]
            }
        },
        "FakeDataGenerator.set_time_param_name": {
            "name": "set_time_param_name",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time_key": [
                    "str",
                    "bool",
                    "list[int]",
                    "list[str]"
                ]
            }
        },
        "FakeDataGenerator.set_params": {
            "name": "set_params",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "bool",
                    "float"
                ]
            }
        },
        "FakeDataGenerator.generate_document": {
            "name": "generate_document",
            "location": 35,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeDataGenerator.generate_documents": {
            "name": "generate_documents",
            "location": 46,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int"
                ]
            }
        },
        "FakeDataGenerator.generate_documents_in_csv": {
            "name": "generate_documents_in_csv",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "bool"
                ],
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "MongoTs-master/tools/notebook_csv.py": {
        "_gen_header": {
            "name": "_gen_header",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "header": []
            }
        },
        "_gen_headers": {
            "name": "_gen_headers",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "headers": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "_gen_cell": {
            "name": "_gen_cell",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_gen_row": {
            "name": "_gen_row",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "row": [
                    "bool"
                ],
                "headers": []
            }
        },
        "_gen_rows": {
            "name": "_gen_rows",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "rows": [
                    "str",
                    "dict[, ]",
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                    "dict[str, str]",
                    "dict[str, dict[str, str]]"
                ],
                "headers": [
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                    "dict[str, str]",
                    "dict[str, dict[str, str]]"
                ]
            }
        },
        "_gen_html": {
            "name": "_gen_html",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "headers": [],
                "rows": [
                    "bytes"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 67,
            "return": [
                "CsvForNoteBook"
            ],
            "arguments": {
                "file_path": [
                    "int",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "str",
                    "tuple[typing.Union[str,...]]"
                ],
                "max_row": [
                    "None",
                    "int",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "str",
                    "tuple[typing.Union[str,...]]"
                ]
            }
        },
        "CsvForNoteBook.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "max_row": [
                    "None",
                    "int",
                    "tuple[]"
                ]
            }
        },
        "CsvForNoteBook.show": {
            "name": "show",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CsvForNoteBook.data": {
            "name": "data",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
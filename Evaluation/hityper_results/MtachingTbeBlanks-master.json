{
    "MtachingTbeBlanks-master/log_softmax.py": {},
    "MtachingTbeBlanks-master/mtb_evaluate_debug_warpper.py": {},
    "MtachingTbeBlanks-master/normal_evalution.py": {},
    "MtachingTbeBlanks-master/predictor_debuger.py": {},
    "MtachingTbeBlanks-master/tough_evaluation.py": {},
    "MtachingTbeBlanks-master/train_debugger.py": {},
    "MtachingTbeBlanks-master/my_library/__init__.py": {},
    "MtachingTbeBlanks-master/my_library/dataset_readers/mtb_reader.py": {
        "find_closest_distance_between_entities": {
            "name": "find_closest_distance_between_entities",
            "location": 24,
            "return": [
                "tuple[typing.Union[list[],int,str,list[int],typing.Sized,list[tuple[typing.Union[typing.Any,typing.Any]]],dict[, ],float,typing.Iterator,tuple[typing.Union[float,float,float]],tuple[typing.Union[typing.Literal,typing.Literal,str]]]]"
            ],
            "arguments": {
                "head_start_location": [
                    "str"
                ],
                "head_end_location": [
                    "list[]",
                    "int",
                    "list[int]",
                    "list[list[allennlp.data.fields.production_rule_field.ProductionRule]]"
                ],
                "tail_start_location": [
                    "str"
                ],
                "tail_end_location": [
                    "list[]",
                    "int",
                    "list[int]",
                    "list[list[allennlp.data.fields.production_rule_field.ProductionRule]]"
                ]
            }
        },
        "MTBDatasetReader.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool"
                ],
                "tokenizer": [
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "tuple[typing.Union[int,int]]",
                    "list[int]",
                    "str",
                    "list[str]"
                ],
                "token_indexers": [
                    "None",
                    "int"
                ]
            }
        },
        "MTBDatasetReader._read": {
            "name": "_read",
            "location": 79,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "MTBDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ],
                "relation_type": [
                    "None",
                    "int",
                    "str",
                    "set[str]"
                ]
            }
        },
        "MTBDatasetReader.addStartEntityTokens": {
            "name": "addStartEntityTokens",
            "location": 142,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "tokens_list": [
                    "bool",
                    "list[list[str]]",
                    "list[str]"
                ],
                "head_full_data": [],
                "tail_full_data": []
            }
        },
        "MTBDatasetReader.deny_overlapping": {
            "name": "deny_overlapping",
            "location": 175,
            "return": [
                "tuple[typing.Union[list[list[typing.Any]],list[],int,list[list[int]],list[tuple[typing.Union[str,typing.Any]]],list[tuple[typing.Union[str,int]]],float]]"
            ],
            "arguments": {
                "self": [],
                "tokens_list": [
                    "str",
                    "int",
                    "None",
                    "list[]",
                    "list[str]"
                ],
                "longest_entity_end_location": [
                    "str",
                    "list[]",
                    "list[str]"
                ],
                "shortest_entity_full_data": [
                    "str",
                    "int",
                    "None",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "MTBDatasetReader.return_lower_text_from_tokens": {
            "name": "return_lower_text_from_tokens",
            "location": 181,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "typing.Iterator",
                    "str",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "MTBDatasetReader.compare_two_token_lists": {
            "name": "compare_two_token_lists",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "None",
                    "list[str]",
                    "list[list[str]]",
                    "str"
                ],
                "y": [
                    "int",
                    "None",
                    "list[str]",
                    "list[list[str]]",
                    "str"
                ]
            }
        },
        "MTBDatasetReader.spacy_work_toknizer": {
            "name": "spacy_work_toknizer",
            "location": 187,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MTBDatasetReader.find_locations": {
            "name": "find_locations",
            "location": 190,
            "return": [
                "tuple[typing.Union[bool,list[frozenset],list[tuple[typing.Union[int,int,int]]],set[int],list[str],list[],list[tuple[typing.Union[str,int]]],list[int]]]"
            ],
            "arguments": {
                "self": [],
                "head_full_data": [
                    "str",
                    "typing.Any",
                    "None",
                    "dict[, ]"
                ],
                "token_list": [
                    "str",
                    "typing.Any",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "MTBDatasetReader._find_entity_name": {
            "name": "_find_entity_name",
            "location": 200,
            "return": [
                "tuple[list[int]]"
            ],
            "arguments": {
                "self": [],
                "token_list": [
                    "list[]",
                    "list[dict[typing.Any, str]]",
                    "str",
                    "list[str]"
                ],
                "head_full_data": [
                    "list[]",
                    "list[float]"
                ],
                "use_spacy_toknizer_before": [
                    "bool"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/dataset_readers/only_entities_reader.py": {
        "find_closest_distance_between_entities": {
            "name": "find_closest_distance_between_entities",
            "location": 24,
            "return": [
                "tuple[typing.Union[list[],int,str,list[int],typing.Sized,list[tuple[typing.Union[typing.Any,typing.Any]]],dict[, ],float,typing.Iterator,tuple[typing.Union[float,float,float]],tuple[typing.Union[typing.Literal,typing.Literal,str]]]]"
            ],
            "arguments": {
                "head_start_location": [
                    "str"
                ],
                "head_end_location": [
                    "list[]",
                    "int",
                    "list[int]",
                    "list[list[allennlp.data.fields.production_rule_field.ProductionRule]]"
                ],
                "tail_start_location": [
                    "str"
                ],
                "tail_end_location": [
                    "list[]",
                    "int",
                    "list[int]",
                    "list[list[allennlp.data.fields.production_rule_field.ProductionRule]]"
                ]
            }
        },
        "OnlyEntitiesDatasetReader.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool"
                ],
                "tokenizer": [
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "tuple[typing.Union[int,int]]",
                    "list[float]",
                    "list[]",
                    "list[str]",
                    "int",
                    "str"
                ],
                "single_entity": [
                    "None",
                    "bool",
                    "str",
                    "tuple[]"
                ],
                "token_indexers": [
                    "None",
                    "typing.Mapping",
                    "str",
                    "bool",
                    "dict[str, allennlp.data.token_indexers.TokenIndexer]"
                ]
            }
        },
        "OnlyEntitiesDatasetReader._read": {
            "name": "_read",
            "location": 52,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "OnlyEntitiesDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 62,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ],
                "relation_type": [
                    "None",
                    "int",
                    "str",
                    "set[str]"
                ]
            }
        },
        "OnlyEntitiesDatasetReader.create_head_tail_sentence": {
            "name": "create_head_tail_sentence",
            "location": 103,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "relation": [
                    "str"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/dataset_readers/__init__.py": {},
    "MtachingTbeBlanks-master/my_library/models/Embedding_and_bilstm.py": {
        "EmbeddingsMTB.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ],
                "text_field_embedder": [
                    "bool"
                ],
                "metrics": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ],
                "number_of_layers": [
                    "int"
                ],
                "number_of_linear_layers": [
                    "int"
                ],
                "renorm_method": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ],
                "skip_connection": [
                    "bool"
                ],
                "regularizer": [
                    "None",
                    "bool"
                ],
                "bert_model": [
                    "None",
                    "bool",
                    "float"
                ]
            }
        },
        "EmbeddingsMTB.forward": {
            "name": "forward",
            "location": 68,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "sentences": [],
                "test": [
                    "str"
                ],
                "clean_tokens": [
                    "int",
                    "list[tuple[typing.Union[str,int]]]",
                    "list[str]",
                    "str",
                    "None"
                ],
                "test_clean_text": [
                    "int",
                    "list[tuple[typing.Union[str,int]]]",
                    "list[str]",
                    "str",
                    "None"
                ],
                "label": [
                    "None",
                    "int",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "float"
                ]
            }
        },
        "EmbeddingsMTB.debug_query_sentence": {
            "name": "debug_query_sentence",
            "location": 123,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "bool",
                    "dict[int, set[int]]",
                    "str",
                    "list[str]",
                    "float",
                    "typing.Mapping",
                    "typing.Any"
                ],
                "test_bert": [],
                "head": [
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "str"
                ],
                "tail": [
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "str"
                ],
                "batch_input": [
                    "bool",
                    "float",
                    "list[str]",
                    "None"
                ],
                "i": [
                    "bool",
                    "float",
                    "list[str]",
                    "None"
                ]
            }
        },
        "EmbeddingsMTB.renorm_vector": {
            "name": "renorm_vector",
            "location": 130,
            "return": [
                "complex",
                "int",
                "float",
                "list[list[int]]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "concat_represntentions": [
                    "int",
                    "list[]"
                ]
            }
        },
        "EmbeddingsMTB.debug_issue": {
            "name": "debug_issue",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bert_context_for_relation": [],
                "sentences": [],
                "test": [
                    "str",
                    "tuple[int]",
                    "bytearray"
                ],
                "test_bert": []
            }
        },
        "EmbeddingsMTB.reassemble_sentence_for_debug": {
            "name": "reassemble_sentence_for_debug",
            "location": 154,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "sentences": [],
                "batch_input": [
                    "bool",
                    "float"
                ],
                "i": [
                    "int",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "EmbeddingsMTB.get_head_tail_locations": {
            "name": "get_head_tail_locations",
            "location": 166,
            "return": [
                "tuple[typing.Union[str,list[None],None]]",
                "tuple[typing.Union[str,None,dict[str, typing.Any],list[None],frozenset]]",
                "tuple[typing.Union[None,str,list[None],dict[str, typing.Any],frozenset]]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "EmbeddingsMTB.assert_head_tail_correct_location": {
            "name": "assert_head_tail_correct_location",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_input": [
                    "list[int]",
                    "float",
                    "str",
                    "bool"
                ],
                "clean_tokens": [
                    "list[int]",
                    "float",
                    "str",
                    "bool"
                ],
                "head": [
                    "bool",
                    "float",
                    "str"
                ],
                "i": [
                    "list[int]",
                    "float",
                    "str",
                    "bool"
                ],
                "tail": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "EmbeddingsMTB.extract_embeddings_of_start_tokens": {
            "name": "extract_embeddings_of_start_tokens",
            "location": 187,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "relation_representation": [],
                "i": [
                    "float",
                    "str",
                    "set[]",
                    "list[str]",
                    "None"
                ],
                "batch_input": [
                    "float",
                    "typing.Iterable[allennlp.data.Instance]",
                    "int"
                ],
                "head": [
                    "bool",
                    "float"
                ],
                "tail": [
                    "bool",
                    "float"
                ]
            }
        },
        "EmbeddingsMTB.get_metrics": {
            "name": "get_metrics",
            "location": 202,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/models/mtb_model.py": {
        "BertEmbeddingsMTB.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "None"
                ],
                "text_field_embedder": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ],
                "number_of_linear_layers": [
                    "int"
                ],
                "metrics": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ],
                "renorm_method": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ],
                "skip_connection": [
                    "bool"
                ],
                "regularizer": [
                    "None"
                ],
                "bert_model": [
                    "str"
                ]
            }
        },
        "BertEmbeddingsMTB.forward": {
            "name": "forward",
            "location": 94,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "sentences": [],
                "locations": [
                    "bool",
                    "str"
                ],
                "test": [],
                "test_location": [
                    "bool",
                    "str"
                ],
                "clean_tokens": [
                    "bool",
                    "str"
                ],
                "test_clean_text": [
                    "bool",
                    "str"
                ],
                "label": [
                    "None",
                    "list[]",
                    "int",
                    "float"
                ]
            }
        },
        "BertEmbeddingsMTB.debug_query_sentence": {
            "name": "debug_query_sentence",
            "location": 141,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "bool",
                    "dict[int, set[int]]",
                    "str",
                    "list[str]",
                    "float",
                    "typing.Mapping",
                    "typing.Any"
                ],
                "test_bert": [],
                "head": [
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "str"
                ],
                "tail": [
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "str"
                ],
                "batch_input": [
                    "bool",
                    "float",
                    "list[str]",
                    "None"
                ],
                "i": [
                    "bool",
                    "float",
                    "list[str]",
                    "None"
                ]
            }
        },
        "BertEmbeddingsMTB.renorm_vector": {
            "name": "renorm_vector",
            "location": 148,
            "return": [
                "complex",
                "int",
                "float",
                "list[list[int]]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "concat_represntentions": [
                    "int",
                    "list[]"
                ]
            }
        },
        "BertEmbeddingsMTB.debug_issue": {
            "name": "debug_issue",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bert_context_for_relation": [],
                "sentences": [],
                "test": [
                    "str",
                    "tuple[int]",
                    "bytearray"
                ],
                "test_bert": []
            }
        },
        "BertEmbeddingsMTB.reassemble_sentence_for_debug": {
            "name": "reassemble_sentence_for_debug",
            "location": 177,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "sentences": [],
                "batch_input": [
                    "bool",
                    "float"
                ],
                "i": [
                    "int",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "BertEmbeddingsMTB.get_head_tail_locations": {
            "name": "get_head_tail_locations",
            "location": 190,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "BertEmbeddingsMTB.assert_head_tail_correct_location": {
            "name": "assert_head_tail_correct_location",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_input": [
                    "list[int]",
                    "float",
                    "str",
                    "bool"
                ],
                "clean_tokens": [
                    "list[int]",
                    "float",
                    "str",
                    "bool"
                ],
                "head": [
                    "bool",
                    "float",
                    "str"
                ],
                "i": [
                    "list[int]",
                    "float",
                    "str",
                    "bool"
                ],
                "tail": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "BertEmbeddingsMTB.extract_embeddings_of_start_tokens": {
            "name": "extract_embeddings_of_start_tokens",
            "location": 204,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "relation_representation": [],
                "i": [
                    "float",
                    "str",
                    "set[]",
                    "list[str]",
                    "None"
                ],
                "batch_input": [
                    "float",
                    "typing.Iterable[allennlp.data.Instance]",
                    "int"
                ],
                "head": [
                    "bool",
                    "float"
                ],
                "tail": [
                    "bool",
                    "float"
                ]
            }
        },
        "BertEmbeddingsMTB.get_metrics": {
            "name": "get_metrics",
            "location": 219,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/models/my_bert_tokenizer.py": {
        "MyBertWordSplitter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do_lower_case": [
                    "bool"
                ],
                "never_split": [
                    "None",
                    "bool",
                    "dict[, ]",
                    "list['cirq.Circuit']",
                    "float"
                ]
            }
        },
        "MyBertWordSplitter.split_words": {
            "name": "split_words",
            "location": 22,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[KT,VT, bool]"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/models/only_entities_model.py": {
        "BertEmbeddingsMTB.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "None"
                ],
                "text_field_embedder": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ],
                "number_of_linear_layers": [
                    "int"
                ],
                "metrics": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ],
                "renorm_method": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ],
                "skip_connection": [
                    "bool"
                ],
                "regularizer": [
                    "None"
                ],
                "bert_model": [
                    "str"
                ]
            }
        },
        "BertEmbeddingsMTB.forward": {
            "name": "forward",
            "location": 91,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "str"
                ],
                "test": [
                    "str"
                ],
                "clean_tokens": [
                    "int",
                    "list[tuple[typing.Union[str,int]]]",
                    "list[str]",
                    "str",
                    "None"
                ],
                "test_clean_text": [
                    "int",
                    "list[tuple[typing.Union[str,int]]]",
                    "list[str]",
                    "str",
                    "None"
                ],
                "label": [
                    "None",
                    "int",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "float"
                ]
            }
        },
        "BertEmbeddingsMTB.debug_query_sentence": {
            "name": "debug_query_sentence",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "bool",
                    "dict[int, set[int]]",
                    "str",
                    "list[str]",
                    "float",
                    "typing.Mapping",
                    "typing.Any"
                ],
                "test_bert": [],
                "head": [
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "str"
                ],
                "tail": [
                    "int",
                    "typing.Callable[, ]",
                    "None",
                    "str"
                ],
                "batch_input": [
                    "bool",
                    "float",
                    "list[str]",
                    "None"
                ],
                "i": [
                    "bool",
                    "float",
                    "list[str]",
                    "None"
                ]
            }
        },
        "BertEmbeddingsMTB.renorm_vector": {
            "name": "renorm_vector",
            "location": 144,
            "return": [
                "complex",
                "int",
                "float",
                "list[list[int]]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "concat_represntentions": [
                    "int",
                    "list[]"
                ]
            }
        },
        "BertEmbeddingsMTB.debug_issue": {
            "name": "debug_issue",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bert_context_for_relation": [],
                "sentences": [],
                "test": [
                    "str",
                    "tuple[int]",
                    "bytearray"
                ],
                "test_bert": []
            }
        },
        "BertEmbeddingsMTB.reassemble_sentence_for_debug": {
            "name": "reassemble_sentence_for_debug",
            "location": 173,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "sentences": [],
                "batch_input": [
                    "bool",
                    "float"
                ],
                "i": [
                    "int",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "BertEmbeddingsMTB.get_head_tail_locations": {
            "name": "get_head_tail_locations",
            "location": 185,
            "return": [
                "tuple[typing.Union[str,list[None],None]]",
                "tuple[typing.Union[str,None,dict[str, typing.Any],list[None],frozenset]]",
                "tuple[typing.Union[None,str,list[None],dict[str, typing.Any],frozenset]]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "BertEmbeddingsMTB.assert_head_tail_correct_location": {
            "name": "assert_head_tail_correct_location",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_input": [
                    "list[int]",
                    "float",
                    "str",
                    "bool"
                ],
                "clean_tokens": [
                    "list[int]",
                    "float",
                    "str",
                    "bool"
                ],
                "head": [
                    "bool",
                    "float",
                    "str"
                ],
                "i": [
                    "list[int]",
                    "float",
                    "str",
                    "bool"
                ],
                "tail": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "BertEmbeddingsMTB.extract_embeddings_of_start_tokens": {
            "name": "extract_embeddings_of_start_tokens",
            "location": 206,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "relation_representation": [],
                "i": [
                    "float",
                    "str",
                    "set[]",
                    "list[str]",
                    "None"
                ],
                "batch_input": [
                    "float",
                    "typing.Iterable[allennlp.data.Instance]",
                    "int"
                ],
                "head": [
                    "bool",
                    "float"
                ],
                "tail": [
                    "bool",
                    "float"
                ]
            }
        },
        "BertEmbeddingsMTB.get_metrics": {
            "name": "get_metrics",
            "location": 221,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/models/__init__.py": {},
    "MtachingTbeBlanks-master/my_library/predictors/fewrel_analyze_predictor.py": {
        "softmax": {
            "name": "softmax",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "MTBClassifierPredictor.predict_json": {
            "name": "predict_json",
            "location": 21,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,float,int,dict[, ],list[dict[, ]],typing.Sequence[str],dict[str, typing.Union[int,str]]]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool"
                ]
            }
        },
        "MTBClassifierPredictor.extract_mapping_and_correct_answer": {
            "name": "extract_mapping_and_correct_answer",
            "location": 60,
            "return": [
                "tuple[typing.Union[list[],int]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "list[]",
                    "list[list[int]]",
                    "float"
                ]
            }
        },
        "MTBClassifierPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 72,
            "return": [
                "int",
                "list[list[typing.Any]]",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]",
                "dict[, ]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "json_dict": [
                    "dict[, ]",
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "bytes"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/predictors/fewrel_submission_predictor.py": {
        "MTBClassifierPredictor.predict_json": {
            "name": "predict_json",
            "location": 10,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "list[str]",
                    "int",
                    "str"
                ]
            }
        },
        "MTBClassifierPredictor.extract_mapping_and_correct_answer": {
            "name": "extract_mapping_and_correct_answer",
            "location": 21,
            "return": [
                "tuple[typing.Union[list[],int]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "list[]",
                    "list[list[int]]",
                    "float"
                ]
            }
        },
        "MTBClassifierPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 33,
            "return": [
                "int",
                "list[list[typing.Any]]",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]",
                "dict[, ]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "json_dict": [
                    "dict[, ]",
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "bytes"
                ]
            }
        }
    },
    "MtachingTbeBlanks-master/my_library/predictors/__init__.py": {},
    "MtachingTbeBlanks-master/tests/__init__.py": {}
}
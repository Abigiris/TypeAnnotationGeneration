{
    "NaiveNeurals-master/functional_tests/test_neural_network.py": {
        "test_basic_pass_network": {
            "name": "test_basic_pass_network",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_neural_network_xor": {
            "name": "test_neural_network_xor",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/NaiveNeurals/utils.py": {},
    "NaiveNeurals-master/NaiveNeurals/__init__.py": {},
    "NaiveNeurals-master/NaiveNeurals/data/dataset.py": {
        "DataSet.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_inputs": [
                    "list[]"
                ],
                "targets": [
                    "str",
                    "list[]",
                    "list[str]",
                    "list[int]",
                    "tuple[int]",
                    "typing.Sequence['cirq.Qid']",
                    "list[tuple[]]"
                ]
            }
        },
        "DataSet.inputs": {
            "name": "inputs",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataSet.targets": {
            "name": "targets",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "NaiveNeurals-master/NaiveNeurals/data/data_generators.py": {
        "data_generator_for_regression": {
            "name": "data_generator_for_regression",
            "location": 9,
            "return": [
                "tuple[list[int]]"
            ],
            "arguments": {
                "data_series": [
                    "list[str]",
                    "str",
                    "int"
                ],
                "data_size": [
                    "int"
                ]
            }
        }
    },
    "NaiveNeurals-master/NaiveNeurals/data/data_manipulators.py": {
        "prepare_time_series_data": {
            "name": "prepare_time_series_data",
            "location": 13,
            "return": [
                "tuple[list[list[]]]"
            ],
            "arguments": {
                "source_data": [],
                "network_input_size": [
                    "int",
                    "float"
                ],
                "data_interval": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "get_time_series_data_slice": {
            "name": "get_time_series_data_slice",
            "location": 47,
            "return": [
                "tuple[typing.Union[list[float],list[list[]]]]"
            ],
            "arguments": {
                "source_data_series": [
                    "list[list[float]]"
                ],
                "target_data_series": [
                    "list[float]",
                    "dict[, ]",
                    "bytes",
                    "list[dict[str, typing.Any]]"
                ],
                "start": [
                    "int"
                ],
                "stop": [
                    "int"
                ]
            }
        },
        "normalise_data": {
            "name": "normalise_data",
            "location": 66,
            "return": [
                "list[]"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "list['cirq.Qid']",
                    "list[list[int]]"
                ],
                "algorithm": []
            }
        }
    },
    "NaiveNeurals-master/NaiveNeurals/data/__init__.py": {},
    "NaiveNeurals-master/NaiveNeurals/MLP/activation_functions.py": {
        "get_activation_function": {
            "name": "get_activation_function",
            "location": 166,
            "return": [
                "Linear",
                "Sigmoid",
                "Tanh"
            ],
            "arguments": {
                "label": [
                    "str",
                    "list[str]",
                    "set[str]",
                    "bytes"
                ]
            }
        },
        "calculate_error": {
            "name": "calculate_error",
            "location": 181,
            "return": [],
            "arguments": {
                "target": [
                    "int"
                ],
                "actual": [
                    "int"
                ],
                "func_type": []
            }
        },
        "ActivationFunction.function": {
            "name": "function",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "typing.Callable[[], None]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ActivationFunction.prime": {
            "name": "prime",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "arg": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Sigmoid.function": {
            "name": "function",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "arg": []
            }
        },
        "Sigmoid.prime": {
            "name": "prime",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": [],
                "arg": [
                    "bytes",
                    "typing.Mapping"
                ]
            }
        },
        "Tanh.function": {
            "name": "function",
            "location": 66,
            "return": [],
            "arguments": {
                "arg": [
                    "str"
                ]
            }
        },
        "Tanh.prime": {
            "name": "prime",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "arg": [
                    "typing.Type",
                    "float"
                ]
            }
        },
        "Linear.function": {
            "name": "function",
            "location": 90,
            "return": [
                "int",
                "typing.Callable[[], None]",
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "typing.Callable[[], None]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Linear.prime": {
            "name": "prime",
            "location": 99,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "arg": [
                    "tuple[]",
                    "str",
                    "bool",
                    "float",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "SoftMax.function": {
            "name": "function",
            "location": 122,
            "return": [],
            "arguments": {
                "arg": [
                    "int",
                    "list[]",
                    "list[int]"
                ],
                "beta": [
                    "int"
                ]
            }
        },
        "SoftMax.prime": {
            "name": "prime",
            "location": 133,
            "return": [],
            "arguments": {
                "cls": [],
                "arg": [
                    "bytes",
                    "typing.Mapping"
                ]
            }
        },
        "SoftPlus.function": {
            "name": "function",
            "location": 148,
            "return": [],
            "arguments": {
                "arg": [
                    "typing.Type"
                ]
            }
        },
        "SoftPlus.prime": {
            "name": "prime",
            "location": 157,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "arg": [
                    "float"
                ]
            }
        }
    },
    "NaiveNeurals-master/NaiveNeurals/MLP/network.py": {
        "LearningConfiguration.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_function": [],
                "solver": [
                    "typing.Text"
                ],
                "learning_rate": [
                    "float"
                ],
                "max_epochs": [
                    "int"
                ],
                "target_error": [
                    "float"
                ],
                "solver_params": [
                    "None",
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Layer.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number_of_nodes": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[str]"
                ],
                "bias": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[str]"
                ],
                "weights": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[str]"
                ],
                "activation_function": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[str]"
                ]
            }
        },
        "NeuralNetwork.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeuralNetwork.set_learning_params": {
            "name": "set_learning_params",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "bool",
                    "float"
                ]
            }
        },
        "NeuralNetwork.output": {
            "name": "output",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeuralNetwork.convergence_profile": {
            "name": "convergence_profile",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeuralNetwork.validation_profile": {
            "name": "validation_profile",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeuralNetwork.errors": {
            "name": "errors",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "targets": [
                    "str"
                ]
            }
        },
        "NeuralNetwork.cumulative_error_rate": {
            "name": "cumulative_error_rate",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "Exception",
                    "str",
                    "int"
                ]
            }
        },
        "NeuralNetwork.load_model": {
            "name": "load_model",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_model": [
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "NeuralNetwork.export_model": {
            "name": "export_model",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeuralNetwork.setup_network": {
            "name": "setup_network",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_data_size": [
                    "int",
                    "bytes",
                    "None"
                ],
                "output_data_size": [
                    "int"
                ],
                "hidden_layer_number_of_nodes": [
                    "int",
                    "list[str]",
                    "float",
                    "list[float]",
                    "str"
                ],
                "hidden_layer_bias": [
                    "float"
                ],
                "output_layer_bias": [
                    "float"
                ],
                "hidden_layer_act_func": [
                    "Sigmoid"
                ],
                "output_layer_act_func": [
                    "Sigmoid"
                ],
                "weights_range": [
                    "int"
                ],
                "error_function": []
            }
        },
        "NeuralNetwork.forward": {
            "name": "forward",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [
                    "list[]",
                    "float",
                    "bool"
                ]
            }
        },
        "NeuralNetwork._backwards": {
            "name": "_backwards",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "targets": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "NeuralNetwork.train": {
            "name": "train",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": []
            }
        },
        "NeuralNetwork.train_with_validation": {
            "name": "train_with_validation",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "training_datasets": [
                    "float",
                    "int"
                ],
                "validation_dataset": [
                    "int",
                    "list[str]"
                ]
            }
        }
    },
    "NaiveNeurals-master/NaiveNeurals/MLP/solvers.py": {
        "get_solver_param": {
            "name": "get_solver_param",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "configuration": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "calculate_weights": {
            "name": "calculate_weights",
            "location": 46,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "learning_rate": [
                    "int"
                ],
                "rhs": [
                    "int"
                ],
                "configuration": [
                    "typing.Callable[, ]"
                ],
                "layer_label": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "NaiveNeurals-master/NaiveNeurals/MLP/__init__.py": {},
    "NaiveNeurals-master/NaiveNeurals/models/trained_models.py": {},
    "NaiveNeurals-master/NaiveNeurals/models/__init__.py": {},
    "NaiveNeurals-master/scripts/activation_functions_example.py": {
        "plot_characteristics": {
            "name": "plot_characteristics",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/scripts/classification_problem.py": {
        "learn_xor": {
            "name": "learn_xor",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/scripts/compression_problem.py": {
        "read_data": {
            "name": "read_data",
            "location": 17,
            "return": [
                "tuple[list[float]]"
            ],
            "arguments": {}
        },
        "compression": {
            "name": "compression",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/scripts/regression_problem.py": {
        "sine_regression": {
            "name": "sine_regression",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/scripts/time_series_problem.py": {
        "read_data": {
            "name": "read_data",
            "location": 18,
            "return": [
                "tuple[list[float]]"
            ],
            "arguments": {}
        },
        "train_model": {
            "name": "train_model",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/unit_tests/data/test_dataset.py": {
        "test_dataset": {
            "name": "test_dataset",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/unit_tests/data/test_generators.py": {},
    "NaiveNeurals-master/unit_tests/MLP/test_functions.py": {
        "test_get_activation_function": {
            "name": "test_get_activation_function",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calculate_error": {
            "name": "test_calculate_error",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "NaiveNeurals-master/unit_tests/MLP/test_network.py": {
        "test_neural_network": {
            "name": "test_neural_network",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_neural_network_load_model": {
            "name": "test_neural_network_load_model",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
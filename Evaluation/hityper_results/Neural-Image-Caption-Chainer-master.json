{
    "Neural-Image-Caption-Chainer-master/experiments/calc_bleu.py": {},
    "Neural-Image-Caption-Chainer-master/experiments/plot_loss_acc.py": {},
    "Neural-Image-Caption-Chainer-master/src/CaptionGenerator.py": {
        "CaptionGenerator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rnn_model_path": [],
                "cnn_model_path": [
                    "str"
                ],
                "dict_path": [
                    "str",
                    "dict[str, str]",
                    "list[str]"
                ],
                "cnn_model_type": [
                    "typing.Text"
                ],
                "beamsize": [
                    "int"
                ],
                "depth_limit": [
                    "int"
                ],
                "gpu_id": [
                    "int"
                ],
                "first_word": [
                    "typing.Text"
                ],
                "hidden_dim": [
                    "int"
                ],
                "mean": [
                    "typing.Text"
                ]
            }
        },
        "CaptionGenerator.parse_dic": {
            "name": "parse_dic",
            "location": 66,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "dict_path": [
                    "str"
                ]
            }
        },
        "CaptionGenerator.successor": {
            "name": "successor",
            "location": 72,
            "return": [
                "tuple[list[dict[typing.Text, ]]]"
            ],
            "arguments": {
                "self": [],
                "current_state": []
            }
        },
        "CaptionGenerator.beam_search": {
            "name": "beam_search",
            "location": 97,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "init_state": [
                    "None",
                    "int"
                ]
            }
        },
        "CaptionGenerator.generate_from_img_feature": {
            "name": "generate_from_img_feature",
            "location": 118,
            "return": [
                "list[dict[typing.Text, typing.Union[list[],float]]]"
            ],
            "arguments": {
                "self": [],
                "img_feature": [
                    "dict[, ]"
                ]
            }
        },
        "CaptionGenerator.generate_from_img": {
            "name": "generate_from_img",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "img_array": []
            }
        },
        "CaptionGenerator.generate": {
            "name": "generate",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "img_path": [
                    "str"
                ]
            }
        }
    },
    "Neural-Image-Caption-Chainer-master/src/DataLoader.py": {
        "DataLoader.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "str"
                ],
                "img_feature_root": [
                    "str",
                    "bytes",
                    "typing.BinaryIO",
                    "list[]"
                ],
                "img_root": [
                    "str",
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "img_mean": [
                    "typing.Text"
                ],
                "preload_features": [
                    "bool"
                ],
                "exist_test": [
                    "bool"
                ]
            }
        },
        "DataLoader.get_batch_train": {
            "name": "get_batch_train",
            "location": 98,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "raw_img": [
                    "bool"
                ],
                "raw_captions": [
                    "bool"
                ]
            }
        },
        "DataLoader.get_batch_raw": {
            "name": "get_batch_raw",
            "location": 144,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "raw_img": [
                    "bool"
                ]
            }
        },
        "DataLoader.get_batch_val": {
            "name": "get_batch_val",
            "location": 167,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "raw_img": [
                    "bool"
                ],
                "raw_captions": [
                    "bool"
                ]
            }
        },
        "DataLoader.get_batch_test": {
            "name": "get_batch_test",
            "location": 227,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "raw_img": [
                    "bool"
                ],
                "raw_captions": [
                    "bool"
                ]
            }
        },
        "DataLoader.shuffle_data": {
            "name": "shuffle_data",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLoader.dict_size": {
            "name": "dict_size",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataLoader.now_epoch": {
            "name": "now_epoch",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataLoader.is_new_epoch": {
            "name": "is_new_epoch",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Neural-Image-Caption-Chainer-master/src/Image2CaptionDecoder.py": {
        "Image2CaptionDecoder.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int"
                ],
                "img_feature_dim": [
                    "int"
                ],
                "hidden_dim": [
                    "int"
                ],
                "dropout_ratio": [
                    "float"
                ],
                "n_layers": [
                    "int"
                ]
            }
        },
        "Image2CaptionDecoder.input_cnn_feature": {
            "name": "input_cnn_feature",
            "location": 26,
            "return": [
                "tuple[typing.Union[int,float]]"
            ],
            "arguments": {
                "self": [],
                "hx": [
                    "int",
                    "dict[, ]",
                    "typing.Sequence['cirq.Qid']"
                ],
                "cx": [
                    "int",
                    "dict[, ]",
                    "typing.Sequence['cirq.Qid']"
                ],
                "img_feature": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Image2CaptionDecoder.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [
                "tuple[float]",
                "tuple[typing.Union[int,str,list[str],set[]]]"
            ],
            "arguments": {
                "self": [],
                "hx": [
                    "int",
                    "dict[, ]",
                    "typing.Sequence[int]"
                ],
                "cx": [
                    "int",
                    "dict[, ]",
                    "typing.Sequence[int]"
                ],
                "caption_batch": []
            }
        }
    },
    "Neural-Image-Caption-Chainer-master/src/img_proc.py": {
        "Img_proc.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean_type": [
                    "str",
                    "None",
                    "int",
                    "float",
                    "typing.Type"
                ]
            }
        },
        "Img_proc.load_img": {
            "name": "load_img",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "img_path": [
                    "str"
                ],
                "img_h": [
                    "int"
                ],
                "img_w": [
                    "int"
                ],
                "resize": [
                    "bool"
                ],
                "expand_dim": [
                    "bool"
                ]
            }
        },
        "Img_proc.save_img": {
            "name": "save_img",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "np_array": [],
                "save_path": [
                    "str",
                    "list[str]",
                    "None",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        }
    },
    "Neural-Image-Caption-Chainer-master/src/search_dataset.py": {
        "Search_Dataset.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_dataset": [
                    "str"
                ]
            }
        },
        "Search_Dataset.search_img": {
            "name": "search_img",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "img_id": []
            }
        },
        "Search_Dataset.search_captions": {
            "name": "search_captions",
            "location": 43,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "img_id": []
            }
        },
        "Search_Dataset.show_listid": {
            "name": "show_listid",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Neural-Image-Caption-Chainer-master/src/slack_notification.py": {
        "post_slack": {
            "name": "post_slack",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        }
    },
    "Neural-Image-Caption-Chainer-master/src/__init__.py": {},
    "Neural-Image-Caption-Chainer-master/src/CNN/__init__.py": {},
    "Neural-Image-Caption-Chainer-master/src/CNN/resnet/predict.py": {},
    "Neural-Image-Caption-Chainer-master/src/CNN/resnet/ResNet152.py": {},
    "Neural-Image-Caption-Chainer-master/src/CNN/resnet/ResNet50.py": {
        "BottleNeckA.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_size": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "ch": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "out_size": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "stride": [
                    "int"
                ]
            }
        },
        "BottleNeckA.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "typing.Iterable[list[T]]"
                ]
            }
        },
        "BottleNeckB.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_size": [
                    "int",
                    "list[float]"
                ],
                "ch": [
                    "int",
                    "list[float]"
                ]
            }
        },
        "BottleNeckB.__call__": {
            "name": "__call__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "typing.Iterable[list[T]]"
                ]
            }
        },
        "Block.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "bool",
                    "float"
                ],
                "in_size": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ],
                "ch": [
                    "int"
                ],
                "out_size": [
                    "int"
                ],
                "stride": [
                    "int"
                ]
            }
        },
        "Block.__call__": {
            "name": "__call__",
            "location": 70,
            "return": [
                "int",
                "float",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any]]",
                "str",
                "set[]",
                "typing.Callable[, ]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "ResNet.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResNet.clear": {
            "name": "clear",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResNet.__call__": {
            "name": "__call__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "list[str]",
                    "str"
                ],
                "t": []
            }
        }
    },
    "Neural-Image-Caption-Chainer-master/src/CNN/resnet/ResNet_feature_extractor.py": {},
    "Neural-Image-Caption-Chainer-master/src/CNN/resnet/__init__.py": {},
    "Neural-Image-Caption-Chainer-master/src/CNN/vgg/VGG16.py": {
        "VGG16.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Neural-Image-Caption-Chainer-master/src/DataPreparation/convert_mt2mscoco.py": {},
    "Neural-Image-Caption-Chainer-master/src/DataPreparation/preprocess_captions.py": {
        "token2index": {
            "name": "token2index",
            "location": 40,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tokens": [],
                "word_index": []
            }
        },
        "load_pickle": {
            "name": "load_pickle",
            "location": 43,
            "return": [],
            "arguments": {
                "p_file": []
            }
        },
        "save_pickle": {
            "name": "save_pickle",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "out_data": [],
                "p_file": []
            }
        },
        "create_captions": {
            "name": "create_captions",
            "location": 52,
            "return": [
                "tuple[list[dict[typing.Text, int]]]"
            ],
            "arguments": {
                "formatted_json": [],
                "tokenizer": []
            }
        },
        "create_dict": {
            "name": "create_dict",
            "location": 82,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "captions": [],
                "off": []
            }
        },
        "encode_captions": {
            "name": "encode_captions",
            "location": 112,
            "return": [],
            "arguments": {
                "captions": [],
                "word_index": []
            }
        },
        "make_dataset_bleu": {
            "name": "make_dataset_bleu",
            "location": 118,
            "return": [],
            "arguments": {
                "formatted_data": [],
                "tokenizer": []
            }
        },
        "Tokenizer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Tokenizer.pre_process": {
            "name": "pre_process",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "caption": []
            }
        }
    },
    "Neural-Image-Caption-Chainer-master/src/DataPreparation/preprocess_captions_original.py": {
        "token2index": {
            "name": "token2index",
            "location": 35,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tokens": [],
                "word_ids": []
            }
        },
        "load_pickle": {
            "name": "load_pickle",
            "location": 38,
            "return": [],
            "arguments": {
                "p_file": []
            }
        },
        "save_pickle": {
            "name": "save_pickle",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "out_data": [],
                "p_file": []
            }
        },
        "Tokenizer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Tokenizer.pre_process": {
            "name": "pre_process",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "caption": []
            }
        }
    },
    "Neural-Image-Caption-Chainer-master/src/DataPreparation/preprocess_mscoco2converted.py": {
        "read_mscoco": {
            "name": "read_mscoco",
            "location": 19,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "json_file": [
                    "str"
                ]
            }
        },
        "save_mscoco": {
            "name": "save_mscoco",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "out_data": [
                    "dict[, ]",
                    "bytes",
                    "typing.Mapping",
                    "dict[str, str]"
                ],
                "pickle_file": [
                    "str"
                ]
            }
        },
        "make_groups": {
            "name": "make_groups",
            "location": 32,
            "return": [
                "dict[, list[]]"
            ],
            "arguments": {
                "annots": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "create_converted": {
            "name": "create_converted",
            "location": 43,
            "return": [
                "list[dict[typing.Text, list[typing.Text]]]"
            ],
            "arguments": {
                "itoa": [
                    "int",
                    "str",
                    "None"
                ],
                "imgs": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Neural-Image-Caption-Chainer-master/train/train_model.py": {},
    "Neural-Image-Caption-Chainer-master/train/train_model_fine_tuning.py": {},
    "Neural-Image-Caption-Chainer-master/web/app.py": {
        "model_configuration": {
            "name": "model_configuration",
            "location": 18,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "args": []
            }
        },
        "allowed_file": {
            "name": "allowed_file",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "agglutinative": {
            "name": "agglutinative",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "list[str]"
                ],
                "agg": [
                    "bool"
                ]
            }
        },
        "parse_captions": {
            "name": "parse_captions",
            "location": 53,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "captions": [
                    "str"
                ],
                "agg": [
                    "list[]",
                    "list[int]",
                    "list[list[str]]",
                    "str"
                ],
                "beamsize": [
                    "int"
                ]
            }
        },
        "generate_caption": {
            "name": "generate_caption",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "return_captions": {
            "name": "return_captions",
            "location": 71,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "Neural-Image-Caption-Chainer-master/web/WEB_ENV.py": {},
    "Neural-Image-Caption-Chainer-master/web/__init__.py": {}
}
{
    "PL-phylogeny-master/prepare_snippets.py": {
        "prepare_snippets": {
            "name": "prepare_snippets",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "root_dir": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "load_extensions": {
            "name": "load_extensions",
            "location": 22,
            "return": [],
            "arguments": {
                "root_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "_process_code_files": {
            "name": "_process_code_files",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "code_dir": [
                    "str",
                    "int"
                ],
                "extensions": [
                    "str",
                    "None"
                ]
            }
        },
        "_code_into_dict": {
            "name": "_code_into_dict",
            "location": 49,
            "return": [
                "dict[str, typing.Union[str,int,typing.Counter,typing.TextIO]]"
            ],
            "arguments": {
                "src_dir": [
                    "str"
                ],
                "extensions": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "_data_into_md": {
            "name": "_data_into_md",
            "location": 63,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "data_dict": []
            }
        }
    },
    "PL-phylogeny-master/code_snippets/mult/src/mult.py": {
        "multiply": {
            "name": "multiply",
            "location": 1,
            "return": [
                "float",
                "int",
                "list[int]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "list[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "list[int]"
                ]
            }
        }
    },
    "PL-phylogeny-master/phylo/helper.py": {},
    "PL-phylogeny-master/phylo/main.py": {
        "load_snippets_data": {
            "name": "load_snippets_data",
            "location": 6,
            "return": [],
            "arguments": {
                "name": [
                    "typing.Text"
                ]
            }
        },
        "load_snippets_md": {
            "name": "load_snippets_md",
            "location": 16,
            "return": [],
            "arguments": {
                "name": [
                    "typing.Text"
                ]
            }
        },
        "markdownify": {
            "name": "markdownify",
            "location": 29,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "code": [
                    "str",
                    "int"
                ],
                "lang": [
                    "str",
                    "int"
                ],
                "show": [
                    "bool"
                ]
            }
        },
        "code_to_markdown": {
            "name": "code_to_markdown",
            "location": 36,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "lang1": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "lang2": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "data_dict": [],
                "show": [
                    "bool"
                ]
            }
        }
    },
    "PL-phylogeny-master/phylo/__init__.py": {},
    "PL-phylogeny-master/phylo/needleman_wunsch/nw_classy.py": {
        "NW.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s1": [],
                "s2": [],
                "s1_name": [
                    "typing.Text"
                ],
                "s2_name": [
                    "typing.Text"
                ],
                "match_penalty": [
                    "int"
                ],
                "miss_penalty": [
                    "int"
                ],
                "gap_penalty": [
                    "int"
                ]
            }
        },
        "NW.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NW.solve": {
            "name": "solve",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NW._check_solved": {
            "name": "_check_solved",
            "location": 64,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "NW.solved": {
            "name": "solved",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NW.matrix": {
            "name": "matrix",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NW.aligned_strings": {
            "name": "aligned_strings",
            "location": 87,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NW.get_aligned_strings_with_connector": {
            "name": "get_aligned_strings_with_connector",
            "location": 100,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NW.summarize": {
            "name": "summarize",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NW._check_solved.wrapper": {
            "name": "wrapper",
            "location": 67,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NW.aligned_strings.clean": {
            "name": "clean",
            "location": 90,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "PL-phylogeny-master/phylo/needleman_wunsch/nw_functional.py": {
        "nw_algo": {
            "name": "nw_algo",
            "location": 12,
            "return": [],
            "arguments": {
                "s1": [],
                "s2": [],
                "match_penalty": [
                    "int"
                ],
                "miss_penalty": [
                    "int"
                ],
                "gap_penalty": [
                    "int"
                ]
            }
        },
        "traceback": {
            "name": "traceback",
            "location": 52,
            "return": [],
            "arguments": {
                "dir_matrix": [],
                "s1": [],
                "s2": []
            }
        },
        "identity_score": {
            "name": "identity_score",
            "location": 85,
            "return": [
                "tuple[typing.Union[typing.Text,float]]"
            ],
            "arguments": {
                "aligned_s1": [],
                "aligned_s2": []
            }
        },
        "gap_score": {
            "name": "gap_score",
            "location": 98,
            "return": [
                "tuple[typing.Union[typing.Text,float]]"
            ],
            "arguments": {
                "aligned_s1": [],
                "aligned_s2": []
            }
        },
        "arr_to_frames": {
            "name": "arr_to_frames",
            "location": 114,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "arr": [],
                "s1": [],
                "s2": []
            }
        },
        "arr_to_table": {
            "name": "arr_to_table",
            "location": 128,
            "return": [],
            "arguments": {
                "arr": [],
                "s1": [],
                "s2": []
            }
        },
        "traceback.helper": {
            "name": "helper",
            "location": 58,
            "return": [
                "tuple[]",
                "tuple[typing.Text]"
            ],
            "arguments": {
                "dir_matrix": [],
                "row": [],
                "col": [],
                "aligned_s1": [],
                "aligned_s2": []
            }
        }
    },
    "PL-phylogeny-master/phylo/needleman_wunsch/__init__.py": {}
}
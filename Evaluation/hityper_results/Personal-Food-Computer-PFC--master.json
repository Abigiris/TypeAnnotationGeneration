{
    "Personal-Food-Computer-PFC--master/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "enable_db_access_for_all_tests": {
            "name": "enable_db_access_for_all_tests",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/manage.py": {},
    "Personal-Food-Computer-PFC--master/__init__.py": {},
    "Personal-Food-Computer-PFC--master/app/admin.py": {},
    "Personal-Food-Computer-PFC--master/app/apps.py": {
        "CoreConfig.ready": {
            "name": "ready",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/app/forms.py": {},
    "Personal-Food-Computer-PFC--master/app/models.py": {
        "DeviceConfigModel.save": {
            "name": "save",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralSetupModel.save": {
            "name": "save",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerSetupModel.save": {
            "name": "save",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorVariableModel.save": {
            "name": "save",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorVariableModel.save": {
            "name": "save",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CultivarModel.save": {
            "name": "save",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CultivationMethodModel.save": {
            "name": "save",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeModel.save": {
            "name": "save",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/app/router.py": {
        "Router.get_api_root_view": {
            "name": "get_api_root_view",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "api_urls": [
                    "None"
                ]
            }
        },
        "Router.get_api_root_view.APIRootView.get": {
            "name": "get",
            "location": 42,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/app/serializers.py": {},
    "Personal-Food-Computer-PFC--master/app/settings.py": {},
    "Personal-Food-Computer-PFC--master/app/urls.py": {},
    "Personal-Food-Computer-PFC--master/app/viewers.py": {
        "get_sensor_variable_info": {
            "name": "get_sensor_variable_info",
            "location": 214,
            "return": [
                "dict"
            ],
            "arguments": {
                "variable_key": []
            }
        },
        "get_actuator_variable_info": {
            "name": "get_actuator_variable_info",
            "location": 224,
            "return": [
                "dict"
            ],
            "arguments": {
                "variable_key": []
            }
        },
        "RecipeViewer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recipe_object": []
            }
        },
        "DeviceConfigViewer.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_config_object": []
            }
        },
        "CultivarsViewer.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CultivationMethodsViewer.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventViewer.create": {
            "name": "create",
            "location": 73,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "EnvironmentViewer.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnvironmentViewer.get_environment_summary": {
            "name": "get_environment_summary",
            "location": 135,
            "return": [
                "dict",
                "dict[, str]"
            ],
            "arguments": {
                "self": [],
                "peripheral_type": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/app/views.py": {
        "change_password": {
            "name": "change_password",
            "location": 1069,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "Dashboard.get": {
            "name": "get",
            "location": 60,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "DeviceConfig.get": {
            "name": "get",
            "location": 118,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Logs.get": {
            "name": "get",
            "location": 164,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Peripherals.get": {
            "name": "get",
            "location": 284,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Recipes.get": {
            "name": "get",
            "location": 313,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Environments.get": {
            "name": "get",
            "location": 334,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Images.get": {
            "name": "get",
            "location": 351,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Resource.get": {
            "name": "get",
            "location": 391,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Connect.get": {
            "name": "get",
            "location": 423,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ConnectAdvanced.get": {
            "name": "get",
            "location": 440,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "IoT.get": {
            "name": "get",
            "location": 457,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Upgrade.get": {
            "name": "get",
            "location": 491,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "StateViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EventViewSet.create": {
            "name": "create",
            "location": 533,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "EnvironmentViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecipeViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 577,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecipeViewSet.create": {
            "name": "create",
            "location": 582,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "RecipeViewSet.start": {
            "name": "start",
            "location": 612,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "uuid": []
            }
        },
        "RecipeViewSet.stop": {
            "name": "stop",
            "location": 644,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "RecipeTransitionViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 673,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CultivarViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 689,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CultivationMethodViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 705,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SensorVariableViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 721,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActuatorVariableViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 737,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeripheralSetupViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 753,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceConfigViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 770,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceConfigViewSet.load": {
            "name": "load",
            "location": 776,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "uuid": []
            }
        },
        "SystemViewSet.info": {
            "name": "info",
            "location": 804,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "NetworkViewSet.info": {
            "name": "info",
            "location": 833,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "NetworkViewSet.joinwifi": {
            "name": "joinwifi",
            "location": 854,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "NetworkViewSet.joinwifiadvanced": {
            "name": "joinwifiadvanced",
            "location": 876,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "NetworkViewSet.deletewifis": {
            "name": "deletewifis",
            "location": 899,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "NetworkViewSet.disableraspiaccesspoint": {
            "name": "disableraspiaccesspoint",
            "location": 921,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "IotViewSet.info": {
            "name": "info",
            "location": 953,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "IotViewSet.register": {
            "name": "register",
            "location": 974,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "IotViewSet.reregister": {
            "name": "reregister",
            "location": 993,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "UpgradeViewSet.check": {
            "name": "check",
            "location": 1019,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "UpgradeViewSet.upgrade": {
            "name": "upgrade",
            "location": 1044,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LEDViewSet.send_event": {
            "name": "send_event",
            "location": 1092,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "etype": [],
                "value": []
            }
        },
        "LEDViewSet.manual": {
            "name": "manual",
            "location": 1111,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LEDViewSet.reset": {
            "name": "reset",
            "location": 1118,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LEDViewSet.set_channel": {
            "name": "set_channel",
            "location": 1125,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LEDViewSet.turn_on": {
            "name": "turn_on",
            "location": 1149,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LEDViewSet.turn_off": {
            "name": "turn_off",
            "location": 1156,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LEDViewSet.fade": {
            "name": "fade",
            "location": 1163,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/app/wsgi.py": {},
    "Personal-Food-Computer-PFC--master/app/__init__.py": {},
    "Personal-Food-Computer-PFC--master/app/migrations/0001_initial.py": {},
    "Personal-Food-Computer-PFC--master/app/migrations/__init__.py": {},
    "Personal-Food-Computer-PFC--master/app/utility/models.py": {
        "GUIDModel.save": {
            "name": "save",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/apps.py": {},
    "Personal-Food-Computer-PFC--master/device/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/controllers/classes/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/controllers/classes/controller/manager.py": {
        "ControllerManager.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "state": [],
                "config": []
            }
        },
        "ControllerManager.mode": {
            "name": "mode",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ControllerManager.setup_uuid": {
            "name": "setup_uuid",
            "location": 89,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ControllerManager.sampling_interval": {
            "name": "sampling_interval",
            "location": 111,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ControllerManager.run": {
            "name": "run",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerManager.run_init_mode": {
            "name": "run_init_mode",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerManager.run_normal_mode": {
            "name": "run_normal_mode",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerManager.run_error_mode": {
            "name": "run_error_mode",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerManager.run_reset_mode": {
            "name": "run_reset_mode",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerManager.run_shutdown_mode": {
            "name": "run_shutdown_mode",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerManager.load_setup_dict_from_file": {
            "name": "load_setup_dict_from_file",
            "location": 255,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerManager.initialize_controller": {
            "name": "initialize_controller",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerManager.update_controller": {
            "name": "update_controller",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerManager.reset_controller": {
            "name": "reset_controller",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerManager.shutdown_controller": {
            "name": "shutdown_controller",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerManager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/controllers/classes/controller/modes.py": {},
    "Personal-Food-Computer-PFC--master/device/controllers/classes/controller/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/controllers/classes/controller/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_init_mode": {
            "name": "test_run_init_mode",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_reset_mode": {
            "name": "test_run_reset_mode",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/controllers/classes/controller/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/controllers/modules/hysteretic/manager.py": {
        "HystereticControllerManager.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HystereticControllerManager.sensor_value": {
            "name": "sensor_value",
            "location": 26,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HystereticControllerManager.desired_sensor_value": {
            "name": "desired_sensor_value",
            "location": 34,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HystereticControllerManager.desired_positive_actuator_percent": {
            "name": "desired_positive_actuator_percent",
            "location": 52,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "HystereticControllerManager.desired_negative_actuator_percent": {
            "name": "desired_negative_actuator_percent",
            "location": 71,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "HystereticControllerManager.initialize_controller": {
            "name": "initialize_controller",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HystereticControllerManager.update_controller": {
            "name": "update_controller",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HystereticControllerManager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/controllers/modules/hysteretic/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/controllers/modules/hysteretic/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialize_controller": {
            "name": "test_initialize_controller",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_controller_no_sensor_values": {
            "name": "test_update_controller_no_sensor_values",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_controller_positive": {
            "name": "test_update_controller_positive",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_controller_negative": {
            "name": "test_update_controller_negative",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_controller": {
            "name": "test_reset_controller",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shutdown_controller": {
            "name": "test_shutdown_controller",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/controllers/modules/hysteretic/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/controllers/modules/pid/manager.py": {
        "PIDControllerManager.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PIDControllerManager.sensor_value": {
            "name": "sensor_value",
            "location": 54,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PIDControllerManager.desired_sensor_value": {
            "name": "desired_sensor_value",
            "location": 64,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PIDControllerManager.desired_positive_actuator_percent": {
            "name": "desired_positive_actuator_percent",
            "location": 84,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PIDControllerManager.desired_negative_actuator_percent": {
            "name": "desired_negative_actuator_percent",
            "location": 105,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PIDControllerManager.initialize_controller": {
            "name": "initialize_controller",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PIDControllerManager.update_controller": {
            "name": "update_controller",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PIDControllerManager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/controllers/modules/pid/pid.py": {
        "PID.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "P": [
                    "float"
                ],
                "I": [
                    "float"
                ],
                "D": [
                    "float"
                ]
            }
        },
        "PID.clear": {
            "name": "clear",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PID.setSetPoint": {
            "name": "setSetPoint",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "set_point": []
            }
        },
        "PID.getSetPoint": {
            "name": "getSetPoint",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PID.getOutput": {
            "name": "getOutput",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PID.update": {
            "name": "update",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feedback_value": []
            }
        },
        "PID.setKp": {
            "name": "setKp",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proportional_gain": []
            }
        },
        "PID.setKi": {
            "name": "setKi",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "integral_gain": []
            }
        },
        "PID.setKd": {
            "name": "setKd",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "derivative_gain": []
            }
        },
        "PID.setWindup": {
            "name": "setWindup",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "windup": []
            }
        },
        "PID.setSampleTime": {
            "name": "setSampleTime",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sample_time": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/controllers/modules/pid/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/controllers/modules/pid/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialize_controller": {
            "name": "test_initialize_controller",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_controller_no_sensor_values": {
            "name": "test_update_controller_no_sensor_values",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_controller_positive": {
            "name": "test_update_controller_positive",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_controller_negative": {
            "name": "test_update_controller_negative",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_controller": {
            "name": "test_reset_controller",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shutdown_controller": {
            "name": "test_shutdown_controller",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/controllers/modules/pid/tests/test_pid.py": {
        "test_init": {
            "name": "test_init",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_PID": {
            "name": "test_PID",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/controllers/modules/pid/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/coordinator/events.py": {},
    "Personal-Food-Computer-PFC--master/device/coordinator/manager.py": {
        "CoordinatorManager.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.mode": {
            "name": "mode",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CoordinatorManager.config_uuid": {
            "name": "config_uuid",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CoordinatorManager.config_dict": {
            "name": "config_dict",
            "location": 138,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.latest_environment_timestamp": {
            "name": "latest_environment_timestamp",
            "location": 146,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.manager_modes": {
            "name": "manager_modes",
            "location": 155,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.manager_healths": {
            "name": "manager_healths",
            "location": 181,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.run": {
            "name": "run",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.run_init_mode": {
            "name": "run_init_mode",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.run_config_mode": {
            "name": "run_config_mode",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.run_setup_mode": {
            "name": "run_setup_mode",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.run_normal_mode": {
            "name": "run_normal_mode",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.run_load_mode": {
            "name": "run_load_mode",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.run_reset_mode": {
            "name": "run_reset_mode",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.run_error_mode": {
            "name": "run_error_mode",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.update_state": {
            "name": "update_state",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.load_local_data_files": {
            "name": "load_local_data_files",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.load_sensor_variables_file": {
            "name": "load_sensor_variables_file",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.load_actuator_variables_file": {
            "name": "load_actuator_variables_file",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.load_cultivars_file": {
            "name": "load_cultivars_file",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.load_cultivation_methods_file": {
            "name": "load_cultivation_methods_file",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.load_recipe_files": {
            "name": "load_recipe_files",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.load_peripheral_setup_files": {
            "name": "load_peripheral_setup_files",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.load_controller_setup_files": {
            "name": "load_controller_setup_files",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.load_device_config_files": {
            "name": "load_device_config_files",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.load_database_stored_state": {
            "name": "load_database_stored_state",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.store_environment": {
            "name": "store_environment",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.create_peripherals": {
            "name": "create_peripherals",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.get_peripheral_setup_dict": {
            "name": "get_peripheral_setup_dict",
            "location": 775,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "uuid": []
            }
        },
        "CoordinatorManager.get_controller_setup_dict": {
            "name": "get_controller_setup_dict",
            "location": 784,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "uuid": []
            }
        },
        "CoordinatorManager.spawn_peripherals": {
            "name": "spawn_peripherals",
            "location": 793,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.create_controllers": {
            "name": "create_controllers",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.spawn_controllers": {
            "name": "spawn_controllers",
            "location": 846,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.all_managers_initialized": {
            "name": "all_managers_initialized",
            "location": 856,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.all_peripherals_initialized": {
            "name": "all_peripherals_initialized",
            "location": 866,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.all_controllers_initialized": {
            "name": "all_controllers_initialized",
            "location": 873,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.shutdown_peripheral_threads": {
            "name": "shutdown_peripheral_threads",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.shutdown_controller_threads": {
            "name": "shutdown_controller_threads",
            "location": 885,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.all_peripherals_shutdown": {
            "name": "all_peripherals_shutdown",
            "location": 890,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.all_controllers_shutdown": {
            "name": "all_controllers_shutdown",
            "location": 897,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.check_events": {
            "name": "check_events",
            "location": 906,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinatorManager.load_device_config": {
            "name": "load_device_config",
            "location": 936,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": [],
                "uuid": []
            }
        },
        "CoordinatorManager._load_device_config": {
            "name": "_load_device_config",
            "location": 968,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/coordinator/modes.py": {},
    "Personal-Food-Computer-PFC--master/device/coordinator/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/iot/commands.py": {},
    "Personal-Food-Computer-PFC--master/device/iot/manager.py": {
        "on_connect": {
            "name": "on_connect",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "ref_self": [],
                "flags": [],
                "return_code": []
            }
        },
        "on_disconnect": {
            "name": "on_disconnect",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "ref_self": [],
                "return_code": []
            }
        },
        "on_publish": {
            "name": "on_publish",
            "location": 686,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "ref_self": [],
                "message_id": []
            }
        },
        "on_message": {
            "name": "on_message",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "ref_self": [],
                "message": []
            }
        },
        "on_log": {
            "name": "on_log",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "ref_self": [],
                "level": [],
                "buf": []
            }
        },
        "on_subscribe": {
            "name": "on_subscribe",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "ref_self": [],
                "message_id": [],
                "granted_qos": []
            }
        },
        "IotManager.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "recipe": []
            }
        },
        "IotManager.is_connected": {
            "name": "is_connected",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IotManager.is_registered": {
            "name": "is_registered",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IotManager.device_id": {
            "name": "device_id",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IotManager.verification_code": {
            "name": "verification_code",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IotManager.prev_message_id": {
            "name": "prev_message_id",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IotManager.received_message_count": {
            "name": "received_message_count",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IotManager.published_message_count": {
            "name": "published_message_count",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IotManager.network_is_connected": {
            "name": "network_is_connected",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IotManager.run": {
            "name": "run",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IotManager.run_init_mode": {
            "name": "run_init_mode",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IotManager.run_disconnected_mode": {
            "name": "run_disconnected_mode",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IotManager.run_connected_mode": {
            "name": "run_connected_mode",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IotManager.publish_message": {
            "name": "publish_message",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "message": []
            }
        },
        "IotManager.publish_boot_message": {
            "name": "publish_boot_message",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IotManager.publish_system_summary": {
            "name": "publish_system_summary",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IotManager.publish_environment_variables": {
            "name": "publish_environment_variables",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IotManager.publish_images": {
            "name": "publish_images",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IotManager.reregister": {
            "name": "reregister",
            "location": 471,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IotManager.process_message": {
            "name": "process_message",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "IotManager.process_command_message": {
            "name": "process_command_message",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "IotManager.forcibly_create_and_start_recipe": {
            "name": "forcibly_create_and_start_recipe",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [],
                "recipe_json": []
            }
        },
        "IotManager.stop_recipe": {
            "name": "stop_recipe",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "IotManager.unknown_command": {
            "name": "unknown_command",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/iot/modes.py": {},
    "Personal-Food-Computer-PFC--master/device/iot/pubsub.py": {
        "PubSub.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref_self": [],
                "on_connect": [],
                "on_disconnect": [],
                "on_publish": [],
                "on_message": [],
                "on_subscribe": [],
                "on_log": []
            }
        },
        "PubSub.initialize": {
            "name": "initialize",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubSub.load_mqtt_config": {
            "name": "load_mqtt_config",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubSub.create_mqtt_client": {
            "name": "create_mqtt_client",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubSub.update": {
            "name": "update",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubSub.publish_boot_message": {
            "name": "publish_boot_message",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PubSub.publish_status_message": {
            "name": "publish_status_message",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PubSub.publish_command_reply": {
            "name": "publish_command_reply",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [],
                "values": []
            }
        },
        "PubSub.publish_environment_variable": {
            "name": "publish_environment_variable",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable_name": [],
                "values_dict": []
            }
        },
        "PubSub.publish_binary_image": {
            "name": "publish_binary_image",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable_name": [],
                "image_type": [],
                "image_bytes": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/iot/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/iot/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/iot/tests/test_pubsub.py": {
        "on_connect": {
            "name": "on_connect",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "ref_self": [],
                "flags": [],
                "return_code": []
            }
        },
        "on_disconnect": {
            "name": "on_disconnect",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "ref_self": [],
                "return_code": []
            }
        },
        "on_publish": {
            "name": "on_publish",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "ref_self": [],
                "message_id": []
            }
        },
        "on_message": {
            "name": "on_message",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "ref_self": [],
                "message": []
            }
        },
        "on_log": {
            "name": "on_log",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "ref_self": [],
                "level": [],
                "buf": []
            }
        },
        "on_subscribe": {
            "name": "on_subscribe",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "ref_self": [],
                "message_id": [],
                "granted_qos": []
            }
        },
        "test_init": {
            "name": "test_init",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/iot/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/network/manager.py": {
        "NetworkManager.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "NetworkManager.is_connected": {
            "name": "is_connected",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "NetworkManager.wifi_ssids": {
            "name": "wifi_ssids",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "NetworkManager.ip_address": {
            "name": "ip_address",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "NetworkManager.access_point_enabled": {
            "name": "access_point_enabled",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "NetworkManager.iot_is_registered": {
            "name": "iot_is_registered",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager.iot_is_connected": {
            "name": "iot_is_connected",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager.run": {
            "name": "run",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager.run_connected_mode": {
            "name": "run_connected_mode",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager.run_disconnected_mode": {
            "name": "run_disconnected_mode",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager.update_connection": {
            "name": "update_connection",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager._enable_raspi_access_point": {
            "name": "_enable_raspi_access_point",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager._disable_raspi_access_point": {
            "name": "_disable_raspi_access_point",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager.join_wifi": {
            "name": "join_wifi",
            "location": 311,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "NetworkManager.join_wifi_advanced": {
            "name": "join_wifi_advanced",
            "location": 361,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "NetworkManager.delete_wifis": {
            "name": "delete_wifis",
            "location": 414,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager.disable_raspi_access_point": {
            "name": "disable_raspi_access_point",
            "location": 449,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/network/modes.py": {},
    "Personal-Food-Computer-PFC--master/device/network/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/network/tests/test_manager.py": {},
    "Personal-Food-Computer-PFC--master/device/network/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/atlas/driver.py": {
        "AtlasDriver.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "address": [],
                "bus": [
                    "None"
                ],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ],
                "Simulator": [
                    "None"
                ]
            }
        },
        "AtlasDriver.setup": {
            "name": "setup",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.process_command": {
            "name": "process_command",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command_string": [],
                "process_seconds": [],
                "num_bytes": [
                    "int"
                ],
                "retry": [
                    "bool"
                ],
                "read_response": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.read_response": {
            "name": "read_response",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "process_seconds": [],
                "num_bytes": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.read_info": {
            "name": "read_info",
            "location": 170,
            "return": [
                "Info"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.read_status": {
            "name": "read_status",
            "location": 194,
            "return": [
                "Status"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.enable_protocol_lock": {
            "name": "enable_protocol_lock",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.disable_protocol_lock": {
            "name": "disable_protocol_lock",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.enable_led": {
            "name": "enable_led",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.disable_led": {
            "name": "disable_led",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.enable_sleep_mode": {
            "name": "enable_sleep_mode",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.set_compensation_temperature": {
            "name": "set_compensation_temperature",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temperature": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.calibrate_low": {
            "name": "calibrate_low",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.calibrate_mid": {
            "name": "calibrate_mid",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.calibrate_high": {
            "name": "calibrate_high",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.clear_calibrations": {
            "name": "clear_calibrations",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDriver.factory_reset": {
            "name": "factory_reset",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/atlas/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/atlas/simulator.py": {
        "AtlasSimulator.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/atlas/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/atlas/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/atlas/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_info": {
            "name": "test_read_info",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_status": {
            "name": "test_read_status",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enable_protocol_lock": {
            "name": "test_enable_protocol_lock",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disable_protocol_lock": {
            "name": "test_disable_protocol_lock",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enable_led": {
            "name": "test_enable_led",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disable_led": {
            "name": "test_disable_led",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enable_sleep_mode": {
            "name": "test_enable_sleep_mode",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_compensation_temperature": {
            "name": "test_set_compensation_temperature",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calibrate_low": {
            "name": "test_calibrate_low",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calibrate_mid": {
            "name": "test_calibrate_mid",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calibrate_high": {
            "name": "test_calibrate_high",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clear_calibrations": {
            "name": "test_clear_calibrations",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_factory_reset": {
            "name": "test_factory_reset",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/peripheral/events.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/peripheral/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/peripheral/manager.py": {
        "PeripheralManager.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "state": [],
                "config": [],
                "i2c_lock": [],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "PeripheralManager.health": {
            "name": "health",
            "location": 137,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PeripheralManager.mode": {
            "name": "mode",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PeripheralManager.setup_uuid": {
            "name": "setup_uuid",
            "location": 161,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PeripheralManager.sampling_interval": {
            "name": "sampling_interval",
            "location": 183,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PeripheralManager.run": {
            "name": "run",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.run_init_mode": {
            "name": "run_init_mode",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.run_setup_mode": {
            "name": "run_setup_mode",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.run_normal_mode": {
            "name": "run_normal_mode",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.run_calibrate_mode": {
            "name": "run_calibrate_mode",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.run_manual_mode": {
            "name": "run_manual_mode",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.run_error_mode": {
            "name": "run_error_mode",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.run_reset_mode": {
            "name": "run_reset_mode",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.run_shutdown_mode": {
            "name": "run_shutdown_mode",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.load_setup_dict_from_file": {
            "name": "load_setup_dict_from_file",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.update_peripheral": {
            "name": "update_peripheral",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.reset_peripheral": {
            "name": "reset_peripheral",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.shutdown_peripheral": {
            "name": "shutdown_peripheral",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.create_event": {
            "name": "create_event",
            "location": 440,
            "return": [
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "PeripheralManager.create_peripheral_specific_event": {
            "name": "create_peripheral_specific_event",
            "location": 467,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "PeripheralManager.check_events": {
            "name": "check_events",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.check_peripheral_specific_events": {
            "name": "check_peripheral_specific_events",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "PeripheralManager.set_sampling_interval": {
            "name": "set_sampling_interval",
            "location": 514,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "PeripheralManager._set_sampling_interval": {
            "name": "_set_sampling_interval",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "PeripheralManager.enable_calibration_mode": {
            "name": "enable_calibration_mode",
            "location": 556,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager._enable_calibration_mode": {
            "name": "_enable_calibration_mode",
            "location": 579,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager.enable_manual_mode": {
            "name": "enable_manual_mode",
            "location": 592,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralManager._enable_manual_mode": {
            "name": "_enable_manual_mode",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/peripheral/modes.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/peripheral/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/peripheral/scripts/run_manager.py": {
        "ManagerRunnerBase.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerRunnerBase.run": {
            "name": "run",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/peripheral/scripts/run_peripheral.py": {
        "RunnerBase.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunnerBase.run": {
            "name": "run",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/peripheral/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_init_mode": {
            "name": "test_run_init_mode",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_setup_mode": {
            "name": "test_run_setup_mode",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_reset_mode": {
            "name": "test_run_reset_mode",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_sampling_interval": {
            "name": "test_set_sampling_interval",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/classes/peripheral/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/driver.py": {
        "DAC5578Driver.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "bus": [],
                "address": [],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "DAC5578Driver.write_output": {
            "name": "write_output",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [],
                "percent": [],
                "retry": [
                    "bool"
                ],
                "disable_mux": [
                    "bool"
                ]
            }
        },
        "DAC5578Driver.write_outputs": {
            "name": "write_outputs",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "outputs": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "DAC5578Driver.read_power_register": {
            "name": "read_power_register",
            "location": 115,
            "return": [
                "dict[int, bool]"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "DAC5578Driver.set_high": {
            "name": "set_high",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "None"
                ],
                "retry": [
                    "bool"
                ]
            }
        },
        "DAC5578Driver.set_low": {
            "name": "set_low",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "None"
                ],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/simulator.py": {
        "DAC5578Simulator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/scripts/usb-cable-all-ports-high.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/scripts/usb-cable-all-ports-low.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/scripts/usb-cable-set-one-port-high.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/scripts/usb-cable-set-one-port-low.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/scripts/usb-cable-set-one-port.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/scripts/usb-cable-toggle-relay.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_output_standard": {
            "name": "test_write_output_standard",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_output_channel_lt": {
            "name": "test_write_output_channel_lt",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_output_channel_gt": {
            "name": "test_write_output_channel_gt",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_output_percent_lt": {
            "name": "test_write_output_percent_lt",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_output_percent_gt": {
            "name": "test_write_output_percent_gt",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_outputs_standard": {
            "name": "test_write_outputs_standard",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_outputs_dict_lt": {
            "name": "test_write_outputs_dict_lt",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_outputs_dict_gt": {
            "name": "test_write_outputs_dict_gt",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_power_register": {
            "name": "test_read_power_register",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_low": {
            "name": "test_set_low",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_high": {
            "name": "test_set_high",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/common/dac5578/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/common/pcf8574/driver.py": {
        "PCF8574Driver.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "bus": [],
                "address": [],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "PCF8574Driver.get_port_status_byte": {
            "name": "get_port_status_byte",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "PCF8574Driver.set_high": {
            "name": "set_high",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [],
                "retry": [
                    "bool"
                ],
                "disable_mux": [
                    "bool"
                ]
            }
        },
        "PCF8574Driver.set_low": {
            "name": "set_low",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [],
                "retry": [
                    "bool"
                ],
                "disable_mux": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/common/pcf8574/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/common/pcf8574/simulator.py": {
        "PCF8574Simulator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PCF8574Simulator.get_write_response_bytes": {
            "name": "get_write_response_bytes",
            "location": 27,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "write_bytes": []
            }
        },
        "PCF8574Simulator.get_read_response_bytes": {
            "name": "get_read_response_bytes",
            "location": 34,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "num_bytes": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/common/pcf8574/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/common/pcf8574/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/common/pcf8574/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_port_status_byte": {
            "name": "test_get_port_status_byte",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_low_invalid_port_8": {
            "name": "test_set_low_invalid_port_8",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_low_invalid_port_neg1": {
            "name": "test_set_low_invalid_port_neg1",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_low": {
            "name": "test_set_low",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_high": {
            "name": "test_set_high",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/common/pcf8574/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_dac5578/events.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_dac5578/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_dac5578/manager.py": {
        "ActuatorDAC5578Manager.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager.desired_output": {
            "name": "desired_output",
            "location": 67,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager.output": {
            "name": "output",
            "location": 85,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ActuatorDAC5578Manager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager.update_peripheral": {
            "name": "update_peripheral",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager.reset_peripheral": {
            "name": "reset_peripheral",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager.shutdown_peripheral": {
            "name": "shutdown_peripheral",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager.set_output": {
            "name": "set_output",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ActuatorDAC5578Manager.set_on": {
            "name": "set_on",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager.set_off": {
            "name": "set_off",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager.create_peripheral_specific_event": {
            "name": "create_peripheral_specific_event",
            "location": 204,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ActuatorDAC5578Manager.check_peripheral_specific_events": {
            "name": "check_peripheral_specific_events",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ActuatorDAC5578Manager.turn_on": {
            "name": "turn_on",
            "location": 225,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager._turn_on": {
            "name": "_turn_on",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager.turn_off": {
            "name": "turn_off",
            "location": 260,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorDAC5578Manager._turn_off": {
            "name": "_turn_off",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_dac5578/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_dac5578/tests/test_dac5578_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peripheral_initialize": {
            "name": "test_peripheral_initialize",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peripheral_setup": {
            "name": "test_peripheral_setup",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peripheral_update": {
            "name": "test_peripheral_update",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peripheral_reset": {
            "name": "test_peripheral_reset",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peripheral_shutdown": {
            "name": "test_peripheral_shutdown",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_grove_rgb_lcd/driver.py": {
        "GroveRGBLCDDriver.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "bus": [],
                "rgb_address": [],
                "lcd_address": [],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "GroveRGBLCDDriver.set_backlight": {
            "name": "set_backlight",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "R": [
                    "int"
                ],
                "G": [
                    "int"
                ],
                "B": [
                    "int"
                ]
            }
        },
        "GroveRGBLCDDriver.write_string": {
            "name": "write_string",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "GroveRGBLCDDriver.display_time": {
            "name": "display_time",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_grove_rgb_lcd/events.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_grove_rgb_lcd/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_grove_rgb_lcd/manager.py": {
        "ActuatorGroveRGBLCDManager.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorGroveRGBLCDManager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorGroveRGBLCDManager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorGroveRGBLCDManager.update_peripheral": {
            "name": "update_peripheral",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorGroveRGBLCDManager.reset_peripheral": {
            "name": "reset_peripheral",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorGroveRGBLCDManager.shutdown_peripheral": {
            "name": "shutdown_peripheral",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorGroveRGBLCDManager.set_output": {
            "name": "set_output",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorGroveRGBLCDManager.display_time": {
            "name": "display_time",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorGroveRGBLCDManager.create_peripheral_specific_event": {
            "name": "create_peripheral_specific_event",
            "location": 189,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ActuatorGroveRGBLCDManager.check_peripheral_specific_events": {
            "name": "check_peripheral_specific_events",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ActuatorGroveRGBLCDManager.show_time": {
            "name": "show_time",
            "location": 208,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorGroveRGBLCDManager._show_time": {
            "name": "_show_time",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_grove_rgb_lcd/simulator.py": {
        "GroveRGBLCDSimulator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_grove_rgb_lcd/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_grove_rgb_lcd/tests/test_lcd_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peripheral_initialize": {
            "name": "test_peripheral_initialize",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peripheral_setup": {
            "name": "test_peripheral_setup",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peripheral_update": {
            "name": "test_peripheral_update",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peripheral_reset": {
            "name": "test_peripheral_reset",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peripheral_shutdown": {
            "name": "test_peripheral_shutdown",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_pcf8574/events.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_pcf8574/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_pcf8574/manager.py": {
        "ActuatorPCF8574Manager.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager.desired_output": {
            "name": "desired_output",
            "location": 37,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager.output": {
            "name": "output",
            "location": 55,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ActuatorPCF8574Manager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager.update_peripheral": {
            "name": "update_peripheral",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager.reset_peripheral": {
            "name": "reset_peripheral",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager.shutdown_peripheral": {
            "name": "shutdown_peripheral",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager.set_output": {
            "name": "set_output",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ActuatorPCF8574Manager.set_on": {
            "name": "set_on",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager.set_off": {
            "name": "set_off",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager.create_peripheral_specific_event": {
            "name": "create_peripheral_specific_event",
            "location": 179,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ActuatorPCF8574Manager.check_peripheral_specific_events": {
            "name": "check_peripheral_specific_events",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ActuatorPCF8574Manager.turn_on": {
            "name": "turn_on",
            "location": 200,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager._turn_on": {
            "name": "_turn_on",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager.turn_off": {
            "name": "turn_off",
            "location": 235,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorPCF8574Manager._turn_off": {
            "name": "_turn_off",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_pcf8574/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_pcf8574/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialize_peripheral": {
            "name": "test_initialize_peripheral",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_peripheral": {
            "name": "test_setup_peripheral",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_peripheral": {
            "name": "test_update_peripheral",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_peripheral": {
            "name": "test_reset_peripheral",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shutdown_peripheral": {
            "name": "test_shutdown_peripheral",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/actuator_pcf8574/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/adafruit_soil/driver.py": {
        "AdafruitSoilDriver.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "bus": [],
                "address": [],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "AdafruitSoilDriver.read_hardware_id": {
            "name": "read_hardware_id",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AdafruitSoilDriver.read_moisture": {
            "name": "read_moisture",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ],
                "total_sample_attempts": [
                    "int"
                ]
            }
        },
        "AdafruitSoilDriver.read_temperature": {
            "name": "read_temperature",
            "location": 117,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AdafruitSoilDriver.reset": {
            "name": "reset",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/adafruit_soil/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/adafruit_soil/manager.py": {
        "AdafruitSoilManager.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdafruitSoilManager.temperature": {
            "name": "temperature",
            "location": 32,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AdafruitSoilManager.moisture": {
            "name": "moisture",
            "location": 54,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AdafruitSoilManager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdafruitSoilManager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdafruitSoilManager.update_peripheral": {
            "name": "update_peripheral",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdafruitSoilManager.reset_peripheral": {
            "name": "reset_peripheral",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdafruitSoilManager.shutdown_peripheral": {
            "name": "shutdown_peripheral",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdafruitSoilManager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/adafruit_soil/simulator.py": {
        "AdafruitSoilSimulator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/adafruit_soil/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/adafruit_soil/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_temperature": {
            "name": "test_read_temperature",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_moisture": {
            "name": "test_read_moisture",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_hardware_id": {
            "name": "test_read_hardware_id",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset": {
            "name": "test_reset",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/adafruit_soil/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialize_peripheral": {
            "name": "test_initialize_peripheral",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_peripheral": {
            "name": "test_setup_peripheral",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_peripheral": {
            "name": "test_update_peripheral",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_peripheral": {
            "name": "test_reset_peripheral",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shutdown_peripheral": {
            "name": "test_shutdown_peripheral",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/adafruit_soil/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/adc128D818/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/adc128D818/scripts/usb-cable-adc-test.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_co2/driver.py": {
        "AtlasCo2Driver.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "bus": [],
                "address": [],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "AtlasCo2Driver.setup": {
            "name": "setup",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasCo2Driver.read_co2": {
            "name": "read_co2",
            "location": 129,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasCo2Driver.read_internal_temperature": {
            "name": "read_internal_temperature",
            "location": 159,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasCo2Driver.enable_internal_temperature": {
            "name": "enable_internal_temperature",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasCo2Driver.disable_internal_temperature": {
            "name": "disable_internal_temperature",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasCo2Driver.enable_alarm": {
            "name": "enable_alarm",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasCo2Driver.disable_alarm": {
            "name": "disable_alarm",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_co2/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_co2/manager.py": {
        "AtlasCo2Manager.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasCo2Manager.co2": {
            "name": "co2",
            "location": 33,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AtlasCo2Manager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasCo2Manager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasCo2Manager.update_peripheral": {
            "name": "update_peripheral",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasCo2Manager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_co2/simulator.py": {
        "AtlasCo2Simulator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_co2/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_co2/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_co2/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_co2": {
            "name": "test_read_co2",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_co2/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_co2/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_do/driver.py": {
        "AtlasDODriver.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "bus": [],
                "address": [],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "AtlasDODriver.setup": {
            "name": "setup",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDODriver.read_do": {
            "name": "read_do",
            "location": 73,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDODriver.enable_mg_l_output": {
            "name": "enable_mg_l_output",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDODriver.disable_mg_l_output": {
            "name": "disable_mg_l_output",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDODriver.enable_percent_saturation_output": {
            "name": "enable_percent_saturation_output",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDODriver.disable_percent_saturation_output": {
            "name": "disable_percent_saturation_output",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDODriver.set_compensation_ec": {
            "name": "set_compensation_ec",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value_ms_cm": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasDODriver.set_compensation_pressure": {
            "name": "set_compensation_pressure",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_do/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_do/manager.py": {
        "AtlasDOManager.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasDOManager.do": {
            "name": "do",
            "location": 41,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AtlasDOManager.temperature": {
            "name": "temperature",
            "location": 51,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasDOManager.pressure": {
            "name": "pressure",
            "location": 59,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasDOManager.ec": {
            "name": "ec",
            "location": 67,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasDOManager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasDOManager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasDOManager.update_peripheral": {
            "name": "update_peripheral",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasDOManager.new_compensation_temperature": {
            "name": "new_compensation_temperature",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasDOManager.new_compensation_pressure": {
            "name": "new_compensation_pressure",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasDOManager.new_compensation_ec": {
            "name": "new_compensation_ec",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasDOManager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_do/simulator.py": {
        "AtlasDOSimulator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_do/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_do/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_do/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_do/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_do/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ec/driver.py": {
        "AtlasECDriver.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "bus": [],
                "address": [],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "AtlasECDriver.setup": {
            "name": "setup",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasECDriver.read_ec": {
            "name": "read_ec",
            "location": 74,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasECDriver.enable_ec_output": {
            "name": "enable_ec_output",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasECDriver.disable_ec_output": {
            "name": "disable_ec_output",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasECDriver.enable_tds_output": {
            "name": "enable_tds_output",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasECDriver.disable_tds_output": {
            "name": "disable_tds_output",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasECDriver.enable_salinity_output": {
            "name": "enable_salinity_output",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasECDriver.disable_salinity_output": {
            "name": "disable_salinity_output",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasECDriver.enable_specific_gravity_output": {
            "name": "enable_specific_gravity_output",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasECDriver.disable_specific_gravity_output": {
            "name": "disable_specific_gravity_output",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasECDriver.set_probe_type": {
            "name": "set_probe_type",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasECDriver.calibrate_dry": {
            "name": "calibrate_dry",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasECDriver.calibrate_single": {
            "name": "calibrate_single",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ec/events.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ec/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ec/manager.py": {
        "AtlasECManager.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasECManager.ec": {
            "name": "ec",
            "location": 36,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AtlasECManager.temperature": {
            "name": "temperature",
            "location": 46,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasECManager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasECManager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasECManager.update_peripheral": {
            "name": "update_peripheral",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasECManager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasECManager.new_compensation_temperature": {
            "name": "new_compensation_temperature",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasECManager.create_peripheral_specific_event": {
            "name": "create_peripheral_specific_event",
            "location": 135,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasECManager.check_peripheral_specific_events": {
            "name": "check_peripheral_specific_events",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasECManager.calibrate_dry": {
            "name": "calibrate_dry",
            "location": 168,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasECManager._calibrate_dry": {
            "name": "_calibrate_dry",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasECManager.calibrate_single": {
            "name": "calibrate_single",
            "location": 201,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasECManager._calibrate_single": {
            "name": "_calibrate_single",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasECManager.calibrate_low": {
            "name": "calibrate_low",
            "location": 248,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasECManager._calibrate_low": {
            "name": "_calibrate_low",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasECManager.calibrate_high": {
            "name": "calibrate_high",
            "location": 294,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasECManager._calibrate_high": {
            "name": "_calibrate_high",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasECManager.clear_calibration": {
            "name": "clear_calibration",
            "location": 340,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasECManager._clear_calibration": {
            "name": "_clear_calibration",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ec/simulator.py": {
        "AtlasECSimulator.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ec/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ec/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ec/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_ec": {
            "name": "test_read_ec",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enable_ec_output": {
            "name": "test_enable_ec_output",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disable_ec_output": {
            "name": "test_disable_ec_output",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enable_tds_output": {
            "name": "test_enable_tds_output",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disable_tds_output": {
            "name": "test_disable_tds_output",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enable_salinity_output": {
            "name": "test_enable_salinity_output",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disable_salinity_output": {
            "name": "test_disable_salinity_output",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enable_specific_gravity_output": {
            "name": "test_enable_specific_gravity_output",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disable_specific_gravity_output": {
            "name": "test_disable_specific_gravity_output",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_probe_type": {
            "name": "test_set_probe_type",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calibrate_dry": {
            "name": "test_calibrate_dry",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calibrate_single": {
            "name": "test_calibrate_single",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ec/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialize_peripheral": {
            "name": "test_initialize_peripheral",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_peripheral": {
            "name": "test_setup_peripheral",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_peripheral": {
            "name": "test_update_peripheral",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_peripheral": {
            "name": "test_reset_peripheral",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shutdown_peripheral": {
            "name": "test_shutdown_peripheral",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calibrate_dry": {
            "name": "test_calibrate_dry",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calibrate_single": {
            "name": "test_calibrate_single",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calibrate_low": {
            "name": "test_calibrate_low",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calibrate_high": {
            "name": "test_calibrate_high",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clear_calibrations": {
            "name": "test_clear_calibrations",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ec/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ph/driver.py": {
        "AtlasPHDriver.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "bus": [],
                "address": [],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "AtlasPHDriver.setup": {
            "name": "setup",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasPHDriver.read_ph": {
            "name": "read_ph",
            "location": 69,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ph/events.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ph/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ph/manager.py": {
        "AtlasPHManager.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasPHManager.ph": {
            "name": "ph",
            "location": 36,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AtlasPHManager.temperature": {
            "name": "temperature",
            "location": 46,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasPHManager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasPHManager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasPHManager.update_peripheral": {
            "name": "update_peripheral",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasPHManager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasPHManager.new_compensation_temperature": {
            "name": "new_compensation_temperature",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasPHManager.create_peripheral_specific_event": {
            "name": "create_peripheral_specific_event",
            "location": 134,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasPHManager.check_peripheral_specific_events": {
            "name": "check_peripheral_specific_events",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasPHManager.calibrate_low": {
            "name": "calibrate_low",
            "location": 163,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasPHManager._calibrate_low": {
            "name": "_calibrate_low",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasPHManager.calibrate_mid": {
            "name": "calibrate_mid",
            "location": 215,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasPHManager._calibrate_mid": {
            "name": "_calibrate_mid",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasPHManager.calibrate_high": {
            "name": "calibrate_high",
            "location": 267,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasPHManager._calibrate_high": {
            "name": "_calibrate_high",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasPHManager.clear_calibration": {
            "name": "clear_calibration",
            "location": 319,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasPHManager._clear_calibration": {
            "name": "_clear_calibration",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ph/simulator.py": {
        "AtlasPHSimulator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ph/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ph/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ph/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_ph": {
            "name": "test_read_ph",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ph/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialize_peripheral": {
            "name": "test_initialize_peripheral",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_peripheral": {
            "name": "test_setup_peripheral",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_peripheral": {
            "name": "test_update_peripheral",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_peripheral": {
            "name": "test_reset_peripheral",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shutdown_peripheral": {
            "name": "test_shutdown_peripheral",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calibrate_low": {
            "name": "test_calibrate_low",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calibrate_mid": {
            "name": "test_calibrate_mid",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calibrate_high": {
            "name": "test_calibrate_high",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clear_calibration": {
            "name": "test_clear_calibration",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_ph/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_temp/driver.py": {
        "AtlasTempDriver.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "address": [],
                "bus": [
                    "None"
                ],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "AtlasTempDriver.setup": {
            "name": "setup",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasTempDriver.read_temperature": {
            "name": "read_temperature",
            "location": 71,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasTempDriver.enable_data_logger": {
            "name": "enable_data_logger",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasTempDriver.disable_data_logger": {
            "name": "disable_data_logger",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasTempDriver.set_temperature_scale_celsius": {
            "name": "set_temperature_scale_celsius",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasTempDriver.set_temperature_scale_farenheit": {
            "name": "set_temperature_scale_farenheit",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasTempDriver.set_temperature_scale_kelvin": {
            "name": "set_temperature_scale_kelvin",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "AtlasTempDriver.calibrate": {
            "name": "calibrate",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_temp/events.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_temp/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_temp/manager.py": {
        "AtlasTempManager.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasTempManager.temperature": {
            "name": "temperature",
            "location": 33,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AtlasTempManager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasTempManager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasTempManager.update_peripheral": {
            "name": "update_peripheral",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasTempManager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AtlasTempManager.create_peripheral_specific_event": {
            "name": "create_peripheral_specific_event",
            "location": 101,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasTempManager.check_peripheral_specific_events": {
            "name": "check_peripheral_specific_events",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasTempManager.calibrate": {
            "name": "calibrate",
            "location": 118,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "AtlasTempManager._calibrate": {
            "name": "_calibrate",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_temp/simulator.py": {
        "AtlasTempSimulator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_temp/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_temp/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_temp/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_temperature": {
            "name": "test_read_temperature",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_temp/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/atlas_temp/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/ccs811/driver.py": {
        "CCS811Driver.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "bus": [],
                "address": [],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "CCS811Driver.setup": {
            "name": "setup",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "CCS811Driver.start_app": {
            "name": "start_app",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "CCS811Driver.read_hardware_id": {
            "name": "read_hardware_id",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "CCS811Driver.check_hardware_id": {
            "name": "check_hardware_id",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "CCS811Driver.read_status_register": {
            "name": "read_status_register",
            "location": 135,
            "return": [
                "StatusRegister"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "CCS811Driver.check_for_errors": {
            "name": "check_for_errors",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "CCS811Driver.read_error_register": {
            "name": "read_error_register",
            "location": 162,
            "return": [
                "ErrorRegister"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "CCS811Driver.write_measurement_mode": {
            "name": "write_measurement_mode",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "drive_mode": [],
                "enable_data_ready_interrupt": [],
                "enable_threshold_interrupt": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "CCS811Driver.write_environment_data": {
            "name": "write_environment_data",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temperature": [],
                "humidity": [
                    "None"
                ],
                "retry": [
                    "bool"
                ]
            }
        },
        "CCS811Driver.read_algorithm_data": {
            "name": "read_algorithm_data",
            "location": 264,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ],
                "reread": [
                    "int"
                ]
            }
        },
        "CCS811Driver.read_raw_data": {
            "name": "read_raw_data",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CCS811Driver.read_ntc": {
            "name": "read_ntc",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CCS811Driver.reset": {
            "name": "reset",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/ccs811/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/ccs811/manager.py": {
        "CCS811Manager.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CCS811Manager.co2": {
            "name": "co2",
            "location": 43,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CCS811Manager.tvoc": {
            "name": "tvoc",
            "location": 63,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "CCS811Manager.temperature": {
            "name": "temperature",
            "location": 75,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CCS811Manager.humidity": {
            "name": "humidity",
            "location": 83,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CCS811Manager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CCS811Manager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CCS811Manager.update_peripheral": {
            "name": "update_peripheral",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CCS811Manager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CCS811Manager.new_compensation_variables": {
            "name": "new_compensation_variables",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/ccs811/simulator.py": {
        "CCS811Simulator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/ccs811/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/ccs811/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/ccs811/scripts/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/ccs811/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/ccs811/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/ccs811/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/led_dac5578/driver.py": {
        "LEDDAC5578Panel.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "driver_name": [],
                "config": [],
                "i2c_lock": [],
                "simulate": [],
                "mux_simulator": [],
                "logger": []
            }
        },
        "LEDDAC5578Panel.initialize": {
            "name": "initialize",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Driver.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "panel_configs": [],
                "panel_properties": [],
                "i2c_lock": [],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "LEDDAC5578Driver.turn_on": {
            "name": "turn_on",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Driver.turn_off": {
            "name": "turn_off",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Driver.set_spd": {
            "name": "set_spd",
            "location": 174,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "desired_distance": [],
                "desired_intensity": [],
                "desired_spectrum": []
            }
        },
        "LEDDAC5578Driver.set_outputs": {
            "name": "set_outputs",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "par_setpoints": []
            }
        },
        "LEDDAC5578Driver.set_output": {
            "name": "set_output",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_name": [],
                "par_setpoint": []
            }
        },
        "LEDDAC5578Driver.get_channel_number": {
            "name": "get_channel_number",
            "location": 306,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "channel_name": []
            }
        },
        "LEDDAC5578Driver.build_channel_outputs": {
            "name": "build_channel_outputs",
            "location": 317,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LEDDAC5578Driver.translate_setpoints": {
            "name": "translate_setpoints",
            "location": 326,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "par_setpoints": []
            }
        },
        "LEDDAC5578Driver.translate_setpoint": {
            "name": "translate_setpoint",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "par_setpoint": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/led_dac5578/events.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/led_dac5578/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/led_dac5578/manager.py": {
        "LEDDAC5578Manager.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager.spectrum": {
            "name": "spectrum",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LEDDAC5578Manager.desired_spectrum": {
            "name": "desired_spectrum",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager.intensity": {
            "name": "intensity",
            "location": 93,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LEDDAC5578Manager.desired_intensity": {
            "name": "desired_intensity",
            "location": 103,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager.distance": {
            "name": "distance",
            "location": 130,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LEDDAC5578Manager.desired_distance": {
            "name": "desired_distance",
            "location": 140,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager.channel_setpoints": {
            "name": "channel_setpoints",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LEDDAC5578Manager.desired_channel_setpoints": {
            "name": "desired_channel_setpoints",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager.update_peripheral": {
            "name": "update_peripheral",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager.update_reported_variables": {
            "name": "update_reported_variables",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager.create_peripheral_specific_event": {
            "name": "create_peripheral_specific_event",
            "location": 386,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LEDDAC5578Manager.check_peripheral_specific_events": {
            "name": "check_peripheral_specific_events",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LEDDAC5578Manager.turn_on": {
            "name": "turn_on",
            "location": 415,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager._turn_on": {
            "name": "_turn_on",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager.turn_off": {
            "name": "turn_off",
            "location": 451,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager._turn_off": {
            "name": "_turn_off",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager.set_channel": {
            "name": "set_channel",
            "location": 487,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LEDDAC5578Manager._set_channel": {
            "name": "_set_channel",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "LEDDAC5578Manager.fade": {
            "name": "fade",
            "location": 562,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LEDDAC5578Manager._fade": {
            "name": "_fade",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_name": [
                    "None"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/led_dac5578/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/led_dac5578/scripts/generate_fade_steps.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/led_dac5578/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/led_dac5578/scripts/run_manager.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/led_dac5578/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_turn_on": {
            "name": "test_turn_on",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_turn_off": {
            "name": "test_turn_off",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_spd": {
            "name": "test_set_spd",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/led_dac5578/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialize_peripheral": {
            "name": "test_initialize_peripheral",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_peripheral": {
            "name": "test_setup_peripheral",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_peripheral": {
            "name": "test_update_peripheral",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_peripheral": {
            "name": "test_reset_peripheral",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shutdown_peripheral": {
            "name": "test_shutdown_peripheral",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/led_dac5578/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/sht25/driver.py": {
        "SHT25Driver.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "bus": [],
                "address": [],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "SHT25Driver.read_temperature": {
            "name": "read_temperature",
            "location": 77,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "SHT25Driver.read_humidity": {
            "name": "read_humidity",
            "location": 112,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "SHT25Driver.read_user_register": {
            "name": "read_user_register",
            "location": 147,
            "return": [
                "UserRegister"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "SHT25Driver.reset": {
            "name": "reset",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/sht25/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/sht25/manager.py": {
        "SHT25Manager.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHT25Manager.temperature": {
            "name": "temperature",
            "location": 35,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SHT25Manager.humidity": {
            "name": "humidity",
            "location": 57,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SHT25Manager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHT25Manager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHT25Manager.update_peripheral": {
            "name": "update_peripheral",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHT25Manager.reset_peripheral": {
            "name": "reset_peripheral",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHT25Manager.shutdown_peripheral": {
            "name": "shutdown_peripheral",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHT25Manager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/sht25/simulator.py": {
        "SHT25Simulator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/sht25/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/sht25/scripts/read_temperature.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/sht25/scripts/read_user_register.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/sht25/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/sht25/scripts/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/sht25/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_temperature": {
            "name": "test_read_temperature",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_humidity": {
            "name": "test_read_humidity",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_user_register": {
            "name": "test_read_user_register",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset": {
            "name": "test_reset",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/sht25/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialize_peripheral": {
            "name": "test_initialize_peripheral",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_peripheral": {
            "name": "test_setup_peripheral",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_peripheral": {
            "name": "test_update_peripheral",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_peripheral": {
            "name": "test_reset_peripheral",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shutdown_peripheral": {
            "name": "test_shutdown_peripheral",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/sht25/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/t6713/driver.py": {
        "T6713Driver.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "bus": [],
                "address": [],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "simulate": [
                    "bool"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "T6713Driver.setup": {
            "name": "setup",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "T6713Driver.read_co2": {
            "name": "read_co2",
            "location": 132,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "T6713Driver.read_status": {
            "name": "read_status",
            "location": 158,
            "return": [
                "Status"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "T6713Driver.enable_abc_logic": {
            "name": "enable_abc_logic",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "T6713Driver.disable_abc_logic": {
            "name": "disable_abc_logic",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "T6713Driver.reset": {
            "name": "reset",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/t6713/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/t6713/manager.py": {
        "T6713Manager.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T6713Manager.co2": {
            "name": "co2",
            "location": 35,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "T6713Manager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T6713Manager.setup_peripheral": {
            "name": "setup_peripheral",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T6713Manager.update_peripheral": {
            "name": "update_peripheral",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T6713Manager.reset_peripheral": {
            "name": "reset_peripheral",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T6713Manager.shutdown_peripheral": {
            "name": "shutdown_peripheral",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T6713Manager.clear_reported_values": {
            "name": "clear_reported_values",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/t6713/simulator.py": {
        "T6713Simulator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/t6713/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/t6713/scripts/read_co2.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/t6713/scripts/read_status.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/t6713/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/t6713/tests/test_driver.py": {
        "test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_co2": {
            "name": "test_read_co2",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_status": {
            "name": "test_read_status",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enable_abc_logic": {
            "name": "test_enable_abc_logic",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_disable_abc_logic": {
            "name": "test_disable_abc_logic",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/t6713/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialize_peripheral": {
            "name": "test_initialize_peripheral",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_peripheral": {
            "name": "test_setup_peripheral",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_peripheral": {
            "name": "test_update_peripheral",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_peripheral": {
            "name": "test_reset_peripheral",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shutdown_peripheral": {
            "name": "test_shutdown_peripheral",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/t6713/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/usb_camera/driver.py": {
        "USBCameraDriver.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "vendor_id": [],
                "product_id": [],
                "resolution": [],
                "num_cameras": [
                    "int"
                ],
                "simulate": [
                    "bool"
                ],
                "usb_mux_comms": [],
                "usb_mux_channel": [
                    "None"
                ],
                "i2c_lock": [
                    "None"
                ],
                "mux_simulator": [
                    "None"
                ]
            }
        },
        "USBCameraDriver.capture": {
            "name": "capture",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "USBCameraDriver.capture_images": {
            "name": "capture_images",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "USBCameraDriver.capture_image_pygame": {
            "name": "capture_image_pygame",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "camera_path": [],
                "image_path": []
            }
        },
        "USBCameraDriver.capture_image_fswebcam": {
            "name": "capture_image_fswebcam",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "camera_path": [],
                "image_path": []
            }
        },
        "USBCameraDriver.enable_cameras": {
            "name": "enable_cameras",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait_for_enable": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ],
                "retry": [
                    "bool"
                ]
            }
        },
        "USBCameraDriver.disable_cameras": {
            "name": "disable_cameras",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait_for_disable": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ],
                "retry": [
                    "bool"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/usb_camera/events.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/usb_camera/exceptions.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/usb_camera/manager.py": {
        "USBCameraManager.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "USBCameraManager.initialize_peripheral": {
            "name": "initialize_peripheral",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "USBCameraManager.update_peripheral": {
            "name": "update_peripheral",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "USBCameraManager.create_peripheral_specific_event": {
            "name": "create_peripheral_specific_event",
            "location": 81,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "USBCameraManager.check_peripheral_specific_events": {
            "name": "check_peripheral_specific_events",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "USBCameraManager.capture": {
            "name": "capture",
            "location": 98,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "USBCameraManager._capture": {
            "name": "_capture",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/usb_camera/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/usb_camera/scripts/run_driver.py": {
        "DriverRunner.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverRunner.run": {
            "name": "run",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/usb_camera/scripts/try_pygame.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/usb_camera/tests/test_driver.py": {
        "delete_test_images": {
            "name": "delete_test_images",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "list_test_images": {
            "name": "list_test_images",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_capture_1": {
            "name": "test_capture_1",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_capture_4": {
            "name": "test_capture_4",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/usb_camera/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initialize_peripheral": {
            "name": "test_initialize_peripheral",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup": {
            "name": "test_setup",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update_peripheral": {
            "name": "test_update_peripheral",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reset_peripheral": {
            "name": "test_reset_peripheral",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shutdown_peripheral": {
            "name": "test_shutdown_peripheral",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/modules/usb_camera/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/utilities/light.py": {
        "approximate_spd": {
            "name": "approximate_spd",
            "location": 12,
            "return": [
                "tuple[dict[, float]]"
            ],
            "arguments": {
                "panel_properties": [],
                "des_distance": [],
                "des_intensity": [],
                "des_spectrum": []
            }
        },
        "calculate_spd_dict": {
            "name": "calculate_spd_dict",
            "location": 56,
            "return": [
                "dict[, float]"
            ],
            "arguments": {
                "intensity": [],
                "spectrum": []
            }
        },
        "build_channel_spd_ndict": {
            "name": "build_channel_spd_ndict",
            "location": 64,
            "return": [
                "dict[, dict[, float]]"
            ],
            "arguments": {
                "panel_properties": [],
                "distance": []
            }
        },
        "get_intensity_at_distance": {
            "name": "get_intensity_at_distance",
            "location": 112,
            "return": [],
            "arguments": {
                "intensity_map": [],
                "distance": []
            }
        },
        "translate_spd_ndict": {
            "name": "translate_spd_ndict",
            "location": 124,
            "return": [
                "dict"
            ],
            "arguments": {
                "spd_ndict": [],
                "reference_spd_dict": []
            }
        },
        "translate_spd_dict": {
            "name": "translate_spd_dict",
            "location": 135,
            "return": [
                "dict[, typing.Union[int,float]]"
            ],
            "arguments": {
                "spd_dict": [],
                "reference_spd_dict": []
            }
        },
        "discretize_spd_dict": {
            "name": "discretize_spd_dict",
            "location": 170,
            "return": [
                "dict"
            ],
            "arguments": {
                "spd_dict": []
            }
        },
        "solve_setpoints": {
            "name": "solve_setpoints",
            "location": 181,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "channel_spd_matrix": [],
                "desired_spd_vector": []
            }
        },
        "calculate_output_spd": {
            "name": "calculate_output_spd",
            "location": 192,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "channel_spd_matrix": [],
                "channel_output_vector": []
            }
        },
        "deconstruct_spd": {
            "name": "deconstruct_spd",
            "location": 203,
            "return": [
                "tuple[typing.Union[list[float],float]]"
            ],
            "arguments": {
                "spd_list": []
            }
        },
        "calculate_ulrf_from_percents": {
            "name": "calculate_ulrf_from_percents",
            "location": 218,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "panel_properties": [],
                "channel_setpoints": [],
                "distance": []
            }
        },
        "calculate_resultant_spd": {
            "name": "calculate_resultant_spd",
            "location": 257,
            "return": [
                "tuple"
            ],
            "arguments": {
                "panel_properties": [],
                "reference_spd_dict": [],
                "channel_setpoint_dict": [],
                "distance": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/peripherals/utilities/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/peripherals/utilities/tests/test_light.py": {
        "test_calculate_spd_dict": {
            "name": "test_calculate_spd_dict",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_intensity_at_distance": {
            "name": "test_get_intensity_at_distance",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_channel_spd_ndict": {
            "name": "test_build_channel_spd_ndict",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calculate_output_spd": {
            "name": "test_calculate_output_spd",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deconstruct_spd": {
            "name": "test_deconstruct_spd",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calculate_resultant_spd": {
            "name": "test_calculate_resultant_spd",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/recipe/events.py": {},
    "Personal-Food-Computer-PFC--master/device/recipe/manager.py": {
        "RecipeManager.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "RecipeManager.mode": {
            "name": "mode",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecipeManager.stored_mode": {
            "name": "stored_mode",
            "location": 78,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecipeManager.recipe_uuid": {
            "name": "recipe_uuid",
            "location": 93,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecipeManager.recipe_name": {
            "name": "recipe_name",
            "location": 108,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecipeManager.is_active": {
            "name": "is_active",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecipeManager.current_timestamp_minutes": {
            "name": "current_timestamp_minutes",
            "location": 125,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.start_timestamp_minutes": {
            "name": "start_timestamp_minutes",
            "location": 139,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecipeManager.start_datestring": {
            "name": "start_datestring",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.duration_minutes": {
            "name": "duration_minutes",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecipeManager.last_update_minute": {
            "name": "last_update_minute",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecipeManager.percent_complete": {
            "name": "percent_complete",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.percent_complete_string": {
            "name": "percent_complete_string",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.time_remaining_minutes": {
            "name": "time_remaining_minutes",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.time_remaining_string": {
            "name": "time_remaining_string",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.time_elapsed_string": {
            "name": "time_elapsed_string",
            "location": 257,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.current_phase": {
            "name": "current_phase",
            "location": 275,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecipeManager.current_cycle": {
            "name": "current_cycle",
            "location": 290,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecipeManager.current_environment_name": {
            "name": "current_environment_name",
            "location": 305,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecipeManager.current_environment_state": {
            "name": "current_environment_state",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "RecipeManager.run": {
            "name": "run",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.run_init_mode": {
            "name": "run_init_mode",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.run_norecipe_mode": {
            "name": "run_norecipe_mode",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.run_start_mode": {
            "name": "run_start_mode",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.run_queued_mode": {
            "name": "run_queued_mode",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.run_normal_mode": {
            "name": "run_normal_mode",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.run_pause_mode": {
            "name": "run_pause_mode",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.run_stop_mode": {
            "name": "run_stop_mode",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.run_error_mode": {
            "name": "run_error_mode",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.run_reset_mode": {
            "name": "run_reset_mode",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.get_recipe_environment": {
            "name": "get_recipe_environment",
            "location": 592,
            "return": [],
            "arguments": {
                "self": [],
                "minute": []
            }
        },
        "RecipeManager.store_recipe_transitions": {
            "name": "store_recipe_transitions",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recipe_transitions": []
            }
        },
        "RecipeManager.update_recipe_environment": {
            "name": "update_recipe_environment",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.clear_desired_sensor_state": {
            "name": "clear_desired_sensor_state",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.clear_recipe_state": {
            "name": "clear_recipe_state",
            "location": 635,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.new_minute": {
            "name": "new_minute",
            "location": 648,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.get_duration_string": {
            "name": "get_duration_string",
            "location": 659,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "duration_minutes": []
            }
        },
        "RecipeManager.set_desired_sensor_values": {
            "name": "set_desired_sensor_values",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment_dict": []
            }
        },
        "RecipeManager.validate": {
            "name": "validate",
            "location": 674,
            "return": [
                "tuple[typing.Union[bool,str]]",
                "tuple[typing.Union[bool,typing.Text]]",
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "json_": [],
                "should_exist": [
                    "None"
                ]
            }
        },
        "RecipeManager.parse": {
            "name": "parse",
            "location": 796,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "self": [],
                "recipe": []
            }
        },
        "RecipeManager.check_events": {
            "name": "check_events",
            "location": 854,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.start_recipe": {
            "name": "start_recipe",
            "location": 882,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "self": [],
                "uuid": [],
                "timestamp": [
                    "None"
                ],
                "check_mode": [
                    "bool"
                ]
            }
        },
        "RecipeManager._start_recipe": {
            "name": "_start_recipe",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "RecipeManager.stop_recipe": {
            "name": "stop_recipe",
            "location": 938,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "check_mode": [
                    "bool"
                ]
            }
        },
        "RecipeManager._stop_recipe": {
            "name": "_stop_recipe",
            "location": 956,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeManager.create_recipe": {
            "name": "create_recipe",
            "location": 969,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "json_": []
            }
        },
        "RecipeManager.update_recipe": {
            "name": "update_recipe",
            "location": 991,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "json_": []
            }
        },
        "RecipeManager.create_or_update_recipe": {
            "name": "create_or_update_recipe",
            "location": 1014,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "json_": []
            }
        },
        "RecipeManager.recipe_exists": {
            "name": "recipe_exists",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": [],
                "uuid": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/recipe/modes.py": {},
    "Personal-Food-Computer-PFC--master/device/recipe/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/recipe/tests/test_manager.py": {},
    "Personal-Food-Computer-PFC--master/device/recipe/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/resource/manager.py": {
        "ResourceManager.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "iot": []
            }
        },
        "ResourceManager.status": {
            "name": "status",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ResourceManager.free_disk": {
            "name": "free_disk",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ResourceManager.free_memory": {
            "name": "free_memory",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ResourceManager.database_size": {
            "name": "database_size",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ResourceManager.run": {
            "name": "run",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceManager.run_normal_mode": {
            "name": "run_normal_mode",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceManager.update_storage": {
            "name": "update_storage",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceManager.get_free_disk": {
            "name": "get_free_disk",
            "location": 219,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceManager.get_free_memory": {
            "name": "get_free_memory",
            "location": 254,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceManager.get_database_size": {
            "name": "get_database_size",
            "location": 288,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceManager.postgres_get_database_size": {
            "name": "postgres_get_database_size",
            "location": 292,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceManager.clean_up_disk": {
            "name": "clean_up_disk",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceManager.delete_files": {
            "name": "delete_files",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "keep": [
                    "int"
                ]
            }
        },
        "ResourceManager.clean_up_database": {
            "name": "clean_up_database",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keep": [
                    "int"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/resource/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/resource/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/upgrade/events.py": {},
    "Personal-Food-Computer-PFC--master/device/upgrade/manager.py": {
        "UpgradeManager.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "autoupgrade": [
                    "bool"
                ]
            }
        },
        "UpgradeManager.status": {
            "name": "status",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "UpgradeManager.current_version": {
            "name": "current_version",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "UpgradeManager.upgrade_version": {
            "name": "upgrade_version",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "UpgradeManager.upgrade_available": {
            "name": "upgrade_available",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "UpgradeManager.run": {
            "name": "run",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.run_automatic_mode": {
            "name": "run_automatic_mode",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.run_manual_mode": {
            "name": "run_manual_mode",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager._upgrade_available": {
            "name": "_upgrade_available",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.upgrade_software": {
            "name": "upgrade_software",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.check": {
            "name": "check",
            "location": 292,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpgradeManager.upgrade": {
            "name": "upgrade",
            "location": 308,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/upgrade/modes.py": {},
    "Personal-Food-Computer-PFC--master/device/upgrade/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/upgrade/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/upgrade/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/accessors.py": {
        "listify_dict": {
            "name": "listify_dict",
            "location": 11,
            "return": [
                "list"
            ],
            "arguments": {
                "dict_": []
            }
        },
        "vectorize_dict": {
            "name": "vectorize_dict",
            "location": 19,
            "return": [],
            "arguments": {
                "dict_": []
            }
        },
        "matrixify_nested_dict": {
            "name": "matrixify_nested_dict",
            "location": 26,
            "return": [],
            "arguments": {
                "nested_dict": []
            }
        },
        "dictify_list": {
            "name": "dictify_list",
            "location": 36,
            "return": [
                "dict"
            ],
            "arguments": {
                "list_": [],
                "reference_dict": []
            }
        },
        "set_nested_dict_safely": {
            "name": "set_nested_dict_safely",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "nested_dict": [],
                "keys": [],
                "value": [],
                "lock": []
            }
        },
        "get_nested_dict_safely": {
            "name": "get_nested_dict_safely",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "nested_dict": [],
                "keys": []
            }
        },
        "floatify_string": {
            "name": "floatify_string",
            "location": 70,
            "return": [
                "float"
            ],
            "arguments": {
                "value": []
            }
        },
        "get_peripheral_config": {
            "name": "get_peripheral_config",
            "location": 85,
            "return": [],
            "arguments": {
                "peripheral_configs": [],
                "name": []
            }
        },
        "get_controller_config": {
            "name": "get_controller_config",
            "location": 95,
            "return": [],
            "arguments": {
                "controller_configs": [],
                "name": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/bitwise.py": {
        "get_bit_from_byte": {
            "name": "get_bit_from_byte",
            "location": 5,
            "return": [],
            "arguments": {
                "bit": [],
                "byte": []
            }
        },
        "get_byte_from_bits": {
            "name": "get_byte_from_bits",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "bits": []
            }
        },
        "get_byte_from_bit_list": {
            "name": "get_byte_from_bit_list",
            "location": 37,
            "return": [],
            "arguments": {
                "bits": []
            }
        },
        "byte_str": {
            "name": "byte_str",
            "location": 59,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "bytes_": []
            }
        },
        "convert_base_1_512": {
            "name": "convert_base_1_512",
            "location": 68,
            "return": [
                "tuple"
            ],
            "arguments": {
                "n": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/constants.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/exceptions.py": {
        "ExceptionLogger.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None"
                ],
                "logger": [
                    "None"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/functiontools.py": {
        "retry": {
            "name": "retry",
            "location": 9,
            "return": [],
            "arguments": {
                "exceptions": [],
                "tries": [
                    "int"
                ],
                "delay": [
                    "float"
                ],
                "backoff": [
                    "int"
                ],
                "logger": [
                    "None"
                ]
            }
        },
        "retry.deco_retry": {
            "name": "deco_retry",
            "location": 29,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "retry.deco_retry.f_retry": {
            "name": "f_retry",
            "location": 31,
            "return": [],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/logger.py": {
        "Logger.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "log": []
            }
        },
        "Logger.debug": {
            "name": "debug",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Logger.info": {
            "name": "info",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Logger.warning": {
            "name": "warning",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Logger.error": {
            "name": "error",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Logger.critical": {
            "name": "critical",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Logger.exception": {
            "name": "exception",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PeripheralFileHandler.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PeripheralFileHandler.emit": {
            "name": "emit",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "ControllerFileHandler.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControllerFileHandler.emit": {
            "name": "emit",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/maths.py": {
        "magnitude": {
            "name": "magnitude",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "is_sorted_increasing": {
            "name": "is_sorted_increasing",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "list_": []
            }
        },
        "interpolate": {
            "name": "interpolate",
            "location": 24,
            "return": [],
            "arguments": {
                "x_list": [],
                "y_list": [],
                "x": []
            }
        },
        "discretize": {
            "name": "discretize",
            "location": 92,
            "return": [
                "dict"
            ],
            "arguments": {
                "minimum": [],
                "maximum": [],
                "value": []
            }
        },
        "bnnls": {
            "name": "bnnls",
            "location": 103,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "A": [],
                "b": [],
                "bound": [
                    "int"
                ],
                "index_map": []
            }
        },
        "nnls": {
            "name": "nnls",
            "location": 171,
            "return": [],
            "arguments": {
                "A": [],
                "b": [],
                "tol": [
                    "float"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/network.py": {
        "is_connected": {
            "name": "is_connected",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_ip_address": {
            "name": "get_ip_address",
            "location": 41,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "get_wifi_ssids": {
            "name": "get_wifi_ssids",
            "location": 56,
            "return": [
                "list"
            ],
            "arguments": {
                "exclude_hidden": [
                    "bool"
                ],
                "exclude_beaglebones": [
                    "bool"
                ]
            }
        },
        "join_wifi": {
            "name": "join_wifi",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "ssid": [],
                "password": []
            }
        },
        "join_wifi_advanced": {
            "name": "join_wifi_advanced",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "ssid_name": [],
                "passphrase": [],
                "hidden_ssid": [],
                "security": [],
                "eap": [],
                "identity": [],
                "phase2": []
            }
        },
        "delete_wifis": {
            "name": "delete_wifis",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "enable_raspi_access_point": {
            "name": "enable_raspi_access_point",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "disable_raspi_access_point": {
            "name": "disable_raspi_access_point",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "remove_raspi_prev_wifi_entry": {
            "name": "remove_raspi_prev_wifi_entry",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/system.py": {
        "device_config_name": {
            "name": "device_config_name",
            "location": 19,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/usb.py": {
        "device_matches": {
            "name": "device_matches",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "device_path": [],
                "vendor_id": [],
                "product_id": [],
                "friendly": [
                    "bool"
                ]
            }
        },
        "get_camera_paths": {
            "name": "get_camera_paths",
            "location": 44,
            "return": [
                "list"
            ],
            "arguments": {
                "vendor_id": [],
                "product_id": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/communication/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/communication/i2c/device_io.py": {
        "manage_io": {
            "name": "manage_io",
            "location": 37,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "manage_io.wrapper": {
            "name": "wrapper",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "DeviceIO.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bus": []
            }
        },
        "DeviceIO.__del__": {
            "name": "__del__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceIO.__enter__": {
            "name": "__enter__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceIO.__exit__": {
            "name": "__exit__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "DeviceIO.open": {
            "name": "open",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceIO.close": {
            "name": "close",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceIO.write": {
            "name": "write",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "bytes_": []
            }
        },
        "DeviceIO.read": {
            "name": "read",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "num_bytes": []
            }
        },
        "DeviceIO.read_register": {
            "name": "read_register",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "register": []
            }
        },
        "DeviceIO.write_register": {
            "name": "write_register",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "register": [],
                "value": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/communication/i2c/exceptions.py": {
        "I2CError.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "logger": [
                    "None"
                ]
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/communication/i2c/main.py": {
        "I2C.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "i2c_lock": [],
                "address": [],
                "bus": [
                    "None"
                ],
                "mux": [
                    "None"
                ],
                "channel": [
                    "None"
                ],
                "mux_simulator": [
                    "None"
                ],
                "PeripheralSimulator": [
                    "None"
                ],
                "verify_device": [
                    "bool"
                ]
            }
        },
        "I2C.verify_mux": {
            "name": "verify_mux",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "I2C.verify_device": {
            "name": "verify_device",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "I2C.write": {
            "name": "write",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bytes_": [],
                "retry": [
                    "bool"
                ],
                "disable_mux": [
                    "bool"
                ]
            }
        },
        "I2C.read": {
            "name": "read",
            "location": 112,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "num_bytes": [],
                "retry": [
                    "bool"
                ],
                "disable_mux": [
                    "bool"
                ]
            }
        },
        "I2C.read_register": {
            "name": "read_register",
            "location": 124,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "register": [],
                "retry": [
                    "bool"
                ],
                "disable_mux": [
                    "bool"
                ]
            }
        },
        "I2C.write_register": {
            "name": "write_register",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "register": [],
                "value": [],
                "retry": [
                    "bool"
                ],
                "disable_mux": [
                    "bool"
                ]
            }
        },
        "I2C.set_mux": {
            "name": "set_mux",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mux": [],
                "channel": [],
                "retry": [
                    "bool"
                ]
            }
        },
        "I2C.manage_mux": {
            "name": "manage_mux",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "disable_mux": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/communication/i2c/mux_simulator.py": {
        "MuxSimulator.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MuxSimulator.set": {
            "name": "set",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "channel_byte": []
            }
        },
        "MuxSimulator.verify": {
            "name": "verify",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "channel": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/communication/i2c/peripheral_simulator.py": {
        "verify_mux": {
            "name": "verify_mux",
            "location": 28,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "verify_mux.wrapper": {
            "name": "wrapper",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "PeripheralSimulator.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bus": [],
                "device_addr": [],
                "mux_address": [],
                "mux_channel": [],
                "mux_simulator": []
            }
        },
        "PeripheralSimulator.__enter__": {
            "name": "__enter__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeripheralSimulator.__exit__": {
            "name": "__exit__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "PeripheralSimulator.read": {
            "name": "read",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "device_addr": [],
                "num_bytes": []
            }
        },
        "PeripheralSimulator.write": {
            "name": "write",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "address": [],
                "bytes_": []
            }
        },
        "PeripheralSimulator.read_register": {
            "name": "read_register",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "device_addr": [],
                "register_addr": []
            }
        },
        "PeripheralSimulator.write_register": {
            "name": "write_register",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "device_addr": [],
                "register_addr": [],
                "value": []
            }
        },
        "PeripheralSimulator.get_write_response_bytes": {
            "name": "get_write_response_bytes",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "write_bytes": []
            }
        },
        "PeripheralSimulator.get_read_response_bytes": {
            "name": "get_read_response_bytes",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "num_bytes": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/communication/i2c/utilities.py": {
        "make_i2c_rdwr_data": {
            "name": "make_i2c_rdwr_data",
            "location": 18,
            "return": [
                "i2c_rdwr_ioctl_data"
            ],
            "arguments": {
                "messages": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/communication/i2c/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/communication/i2c/tests/test_main.py": {
        "test_init": {
            "name": "test_init",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_empty": {
            "name": "test_read_empty",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_unknown": {
            "name": "test_write_unknown",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_read": {
            "name": "test_write_read",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_register": {
            "name": "test_write_register",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_empty_register": {
            "name": "test_read_empty_register",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_read_register": {
            "name": "test_write_read_register",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_read_custom_register": {
            "name": "test_read_custom_register",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_read.CustomPeripheralSimulator.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_read_custom_register.CustomPeripheralSimulator.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/iot/registration.py": {
        "is_registered": {
            "name": "is_registered",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "device_id": {
            "name": "device_id",
            "location": 40,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {}
        },
        "verification_code": {
            "name": "verification_code",
            "location": 57,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "delete": {
            "name": "delete",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/iot/tokens.py": {
        "create_json_web_token": {
            "name": "create_json_web_token",
            "location": 28,
            "return": [
                "JsonWebToken"
            ],
            "arguments": {
                "project_id": [],
                "private_key_filepath": [],
                "encryption_algorithm": [
                    "typing.Text"
                ],
                "time_to_live_minutes": [
                    "int"
                ]
            }
        },
        "JsonWebToken.is_expired": {
            "name": "is_expired",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/iot/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/iot/tests/test_registration.py": {
        "test_init": {
            "name": "test_init",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/iot/tests/test_tokens.py": {
        "test_init": {
            "name": "test_init",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/iot/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/state/main.py": {
        "State.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.set_environment_reported_sensor_value": {
            "name": "set_environment_reported_sensor_value",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor": [],
                "variable": [],
                "value": [],
                "simple": [
                    "bool"
                ]
            }
        },
        "State.set_environment_desired_sensor_value": {
            "name": "set_environment_desired_sensor_value",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [],
                "value": []
            }
        },
        "State.set_environment_reported_actuator_value": {
            "name": "set_environment_reported_actuator_value",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [],
                "value": []
            }
        },
        "State.set_environment_desired_actuator_value": {
            "name": "set_environment_desired_actuator_value",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "variable": [],
                "value": []
            }
        },
        "State.get_environment_reported_sensor_value": {
            "name": "get_environment_reported_sensor_value",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "State.get_environment_desired_sensor_value": {
            "name": "get_environment_desired_sensor_value",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "State.get_environment_reported_actuator_value": {
            "name": "get_environment_reported_actuator_value",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "State.get_environment_desired_actuator_value": {
            "name": "get_environment_desired_actuator_value",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "variable": []
            }
        },
        "State.set_peripheral_value": {
            "name": "set_peripheral_value",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "peripheral": [],
                "variable": [],
                "value": []
            }
        },
        "State.get_peripheral_value": {
            "name": "get_peripheral_value",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "peripheral": [],
                "variable": []
            }
        },
        "State.set_peripheral_reported_sensor_value": {
            "name": "set_peripheral_reported_sensor_value",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "peripheral": [],
                "variable": [],
                "value": []
            }
        },
        "State.set_peripheral_desired_sensor_value": {
            "name": "set_peripheral_desired_sensor_value",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "peripheral": [],
                "variable": [],
                "value": []
            }
        },
        "State.set_peripheral_reported_actuator_value": {
            "name": "set_peripheral_reported_actuator_value",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "peripheral": [],
                "variable": [],
                "value": []
            }
        },
        "State.set_peripheral_desired_actuator_value": {
            "name": "set_peripheral_desired_actuator_value",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "peripheral": [],
                "variable": [],
                "value": []
            }
        },
        "State.get_peripheral_reported_sensor_value": {
            "name": "get_peripheral_reported_sensor_value",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "peripheral": [],
                "variable": []
            }
        },
        "State.get_peripheral_desired_sensor_value": {
            "name": "get_peripheral_desired_sensor_value",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "peripheral": [],
                "variable": []
            }
        },
        "State.get_peripheral_reported_actuator_value": {
            "name": "get_peripheral_reported_actuator_value",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "peripheral": [],
                "variable": []
            }
        },
        "State.get_peripheral_desired_actuator_value": {
            "name": "get_peripheral_desired_actuator_value",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "peripheral": [],
                "variable": []
            }
        },
        "State.set_controller_value": {
            "name": "set_controller_value",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [],
                "variable": [],
                "value": []
            }
        },
        "State.get_controller_value": {
            "name": "get_controller_value",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "controller": [],
                "variable": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/state/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/state/tests/test_state.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/statemachine/events.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/statemachine/manager.py": {
        "StateMachineManager.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachineManager.mode": {
            "name": "mode",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "StateMachineManager.spawn": {
            "name": "spawn",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachineManager.run": {
            "name": "run",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachineManager.run_init_mode": {
            "name": "run_init_mode",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachineManager.run_normal_mode": {
            "name": "run_normal_mode",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachineManager.run_reset_mode": {
            "name": "run_reset_mode",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachineManager.run_error_mode": {
            "name": "run_error_mode",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachineManager.run_shutdown_mode": {
            "name": "run_shutdown_mode",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachineManager.valid_transition": {
            "name": "valid_transition",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "from_mode": [],
                "to_mode": []
            }
        },
        "StateMachineManager.new_transition": {
            "name": "new_transition",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "current_mode": []
            }
        },
        "StateMachineManager.create_event": {
            "name": "create_event",
            "location": 167,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "StateMachineManager.check_events": {
            "name": "check_events",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachineManager.shutdown": {
            "name": "shutdown",
            "location": 206,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachineManager._shutdown": {
            "name": "_shutdown",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachineManager.reset": {
            "name": "reset",
            "location": 225,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachineManager._reset": {
            "name": "_reset",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/statemachine/modes.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/statemachine/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/statemachine/tests/test_manager.py": {
        "test_init": {
            "name": "test_init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_transition_true": {
            "name": "test_valid_transition_true",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_transition_false": {
            "name": "test_valid_transition_false",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_transition_invalid_mode_name": {
            "name": "test_valid_transition_invalid_mode_name",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_new_transition_current_mode": {
            "name": "test_new_transition_current_mode",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_new_transition_valid_mode": {
            "name": "test_new_transition_valid_mode",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_new_transition_invalid_mode": {
            "name": "test_new_transition_invalid_mode",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_init_to_normal_mode": {
            "name": "test_run_init_to_normal_mode",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_normal_to_shutdown_mode": {
            "name": "test_run_normal_to_shutdown_mode",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_reset_to_init_mode": {
            "name": "test_run_reset_to_init_mode",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_run_error_mode_breaks_on_reset": {
            "name": "test_run_error_mode_breaks_on_reset",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spawn_shutdown": {
            "name": "test_spawn_shutdown",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spawn_error_shutdown": {
            "name": "test_spawn_error_shutdown",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_spawn_invalid_shutdown": {
            "name": "test_spawn_invalid_shutdown",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_reset_event": {
            "name": "test_create_reset_event",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_shutdown_event": {
            "name": "test_create_shutdown_event",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_invalid_event": {
            "name": "test_create_invalid_event",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_event_misspelled_type": {
            "name": "test_check_event_misspelled_type",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_check_event_invalid_type": {
            "name": "test_check_event_invalid_type",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_preprocess_reset_invalid_mode": {
            "name": "test_preprocess_reset_invalid_mode",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_reset_invalid_mode": {
            "name": "test_process_reset_invalid_mode",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/statemachine/tests/__init__.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/tests/test_accessors.py": {
        "test_listify_dict": {
            "name": "test_listify_dict",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vectorize_dict": {
            "name": "test_vectorize_dict",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_matrixify_nested_dict": {
            "name": "test_matrixify_nested_dict",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dictify_list": {
            "name": "test_dictify_list",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_floatify_string_kilo": {
            "name": "test_floatify_string_kilo",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_floatify_string_mega": {
            "name": "test_floatify_string_mega",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_floatify_string_giga": {
            "name": "test_floatify_string_giga",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_floatify_string_invalid": {
            "name": "test_floatify_string_invalid",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/tests/test_bitwise.py": {
        "test_get_bit_from_byte": {
            "name": "test_get_bit_from_byte",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_byte_from_bit": {
            "name": "test_get_byte_from_bit",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/tests/test_functiontools.py": {},
    "Personal-Food-Computer-PFC--master/device/utilities/tests/test_maths.py": {
        "test_interpolate2": {
            "name": "test_interpolate2",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interpolate2_reverse": {
            "name": "test_interpolate2_reverse",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/tests/test_network.py": {
        "test_init": {
            "name": "test_init",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/device/utilities/tests/test_system.py": {
        "test_init": {
            "name": "test_init",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Personal-Food-Computer-PFC--master/scripts/i2c/usb-cable-atlas-chip-led-blink.py": {},
    "Personal-Food-Computer-PFC--master/scripts/i2c/usb-cable-atlas-chip-led-off.py": {},
    "Personal-Food-Computer-PFC--master/scripts/i2c/usb-cable-atlas-chip-led-on.py": {},
    "Personal-Food-Computer-PFC--master/scripts/i2c/usb-cable-bare-sht25-get-temp.py": {},
    "Personal-Food-Computer-PFC--master/scripts/i2c/usb-cable-leds.py": {},
    "Personal-Food-Computer-PFC--master/scripts/i2c/usb-cable-mux.py": {},
    "Personal-Food-Computer-PFC--master/scripts/i2c/usb-cable-program-atlas-chip.py": {},
    "Personal-Food-Computer-PFC--master/scripts/i2c/usb-cable-query.py": {},
    "Personal-Food-Computer-PFC--master/scripts/i2c/usb-cable-scan.py": {},
    "Personal-Food-Computer-PFC--master/scripts/i2c/usb-cable-sht25-get-temp.py": {},
    "Personal-Food-Computer-PFC--master/scripts/platform/get_mac.py": {},
    "Personal-Food-Computer-PFC--master/scripts/recipe/generate_recipe_light_ramp.py": {}
}
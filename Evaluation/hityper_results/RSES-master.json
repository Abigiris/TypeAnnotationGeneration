{
    "RSES-master/rses/__init__.py": {},
    "RSES-master/rses/src/rses_config.py": {},
    "RSES-master/rses/src/rses_connections.py": {
        "_query_for_log": {
            "name": "_query_for_log",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "query": [
                    "bytes",
                    "str"
                ]
            }
        },
        "DatabaseAdapter.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "DatabaseAdapter.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseAdapter.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseAdapter.connection": {
            "name": "connection",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseAdapter.cursor": {
            "name": "cursor",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatabaseAdapter.select": {
            "name": "select",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "DatabaseAdapter.select_all": {
            "name": "select_all",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "DatabaseAdapter.delete": {
            "name": "delete",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "DatabaseAdapter.insert": {
            "name": "insert",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ]
            }
        },
        "DatabaseAdapter.update": {
            "name": "update",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "list[str]",
                    "typing.Match",
                    "dict[str, str]"
                ]
            }
        }
    },
    "RSES-master/rses/src/rses_errors.py": {
        "DoesNotExist.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "what": [
                    "str",
                    "typing.Type",
                    "int",
                    "typing.Iterator"
                ],
                "identifier": [
                    "typing.Text"
                ],
                "add_info": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "DoesNotExist.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlreadyExists.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "what": [
                    "bool"
                ],
                "relation": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "AlreadyExists.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingParameter.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameter": [
                    "int",
                    "float"
                ]
            }
        },
        "MissingParameter.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "RSES-master/rses/src/rses_run.py": {},
    "RSES-master/rses/src/__init__.py": {},
    "RSES-master/rses/src/flask_app/app.py": {
        "home": {
            "name": "home",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "RSES-master/rses/src/flask_app/__init__.py": {},
    "RSES-master/rses/src/flask_app/blueprints/__init__.py": {},
    "RSES-master/rses/src/flask_app/blueprints/api/api.py": {
        "before_api_request": {
            "name": "before_api_request",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "ingredient_type_get": {
            "name": "ingredient_type_get",
            "location": 33,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "ingredient_type_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "ingredient_type_delete": {
            "name": "ingredient_type_delete",
            "location": 43,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "ingredient_type_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ingredient_type_create": {
            "name": "ingredient_type_create",
            "location": 50,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "ingredient_type_rename": {
            "name": "ingredient_type_rename",
            "location": 58,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "ingredient_type_id": [
                    "str"
                ],
                "new_name": [
                    "str"
                ]
            }
        },
        "list_ingredient_types": {
            "name": "list_ingredient_types",
            "location": 68,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "limit": [
                    "int",
                    "str",
                    "list[]"
                ],
                "offset": [
                    "int",
                    "str",
                    "list[]"
                ],
                "name_filter": [
                    "typing.Text"
                ]
            }
        },
        "total_ingredient_types": {
            "name": "total_ingredient_types",
            "location": 76,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "ingredient_get": {
            "name": "ingredient_get",
            "location": 86,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "ingredient_id": [
                    "str"
                ]
            }
        },
        "ingredient_delete": {
            "name": "ingredient_delete",
            "location": 96,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "ingredient_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ingredient_create": {
            "name": "ingredient_create",
            "location": 103,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "name": [
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "ingredient_rename": {
            "name": "ingredient_rename",
            "location": 115,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "ingredient_id": [
                    "int"
                ]
            }
        },
        "list_ingredients": {
            "name": "list_ingredients",
            "location": 126,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "limit": [
                    "str",
                    "list[str]"
                ],
                "offset": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "total_ingredients": {
            "name": "total_ingredients",
            "location": 134,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        }
    },
    "RSES-master/rses/src/flask_app/blueprints/api/__init__.py": {},
    "RSES-master/rses/src/flask_app/blueprints/client/client.py": {
        "inject_menu_items": {
            "name": "inject_menu_items",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "public": {
            "name": "public",
            "location": 36,
            "return": [],
            "arguments": {
                "endpoint": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "before_request": {
            "name": "before_request",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "authorize": {
            "name": "authorize",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "home": {
            "name": "home",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "ingredient_types": {
            "name": "ingredient_types",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "ingredients": {
            "name": "ingredients",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "public.public_endpoint": {
            "name": "public_endpoint",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "RSES-master/rses/src/flask_app/blueprints/client/__init__.py": {},
    "RSES-master/rses/src/objects/cooking.py": {
        "RecipeCategory.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeCategory.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeCategory.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeCategory.id": {
            "name": "id",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecipeCategory.name": {
            "name": "name",
            "location": 45,
            "return": [
                "str",
                "dict[, ]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "new_name": []
            }
        },
        "RecipeCategory.exists": {
            "name": "exists",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeCategory.create": {
            "name": "create",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeCategory.delete": {
            "name": "delete",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeCategory.items": {
            "name": "items",
            "location": 93,
            "return": [
                "list[Recipe]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeCategory.__load_from_db": {
            "name": "__load_from_db",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.id": {
            "name": "id",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Recipe.name": {
            "name": "name",
            "location": 159,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "new_name": []
            }
        },
        "Recipe.directions": {
            "name": "directions",
            "location": 168,
            "return": [
                "str",
                "dict[int, list[str]]",
                "int",
                "frozenset",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "new_directions": []
            }
        },
        "Recipe.picture": {
            "name": "picture",
            "location": 177,
            "return": [
                "str",
                "dict[int, list[str]]",
                "int",
                "frozenset",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "new_picture_link": []
            }
        },
        "Recipe.prepare_time": {
            "name": "prepare_time",
            "location": 186,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "new_time": []
            }
        },
        "Recipe.portions": {
            "name": "portions",
            "location": 195,
            "return": [
                "str",
                "dict[int, list[str]]",
                "int",
                "frozenset",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "new_amount": []
            }
        },
        "Recipe.wanted_portions": {
            "name": "wanted_portions",
            "location": 204,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "new_amount": []
            }
        },
        "Recipe.portion_price": {
            "name": "portion_price",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Recipe.current_price": {
            "name": "current_price",
            "location": 216,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.create": {
            "name": "create",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.delete": {
            "name": "delete",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.add_ingredient": {
            "name": "add_ingredient",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ingredient": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "amount": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Recipe.remove_ingredient": {
            "name": "remove_ingredient",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ingredient": [
                    "typing.Mapping"
                ]
            }
        },
        "Recipe.add_category": {
            "name": "add_category",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "bool"
                ]
            }
        },
        "Recipe.remove_category": {
            "name": "remove_category",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "category": [
                    "str",
                    "typing.AbstractSet",
                    "bool"
                ]
            }
        },
        "Recipe.can_be_cooked": {
            "name": "can_be_cooked",
            "location": 284,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.cook": {
            "name": "cook",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.__load_from_db": {
            "name": "__load_from_db",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.__updater": {
            "name": "__updater",
            "location": 335,
            "return": [
                "bool",
                "dict[str, typing.Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "int",
                    "str",
                    "None"
                ],
                "new_value": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        }
    },
    "RSES-master/rses/src/objects/shopping.py": {
        "ShoppingItem.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shopping_item_id": [
                    "bytes",
                    "int",
                    "str"
                ],
                "amount": [
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "ShoppingItem.status": {
            "name": "status",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShoppingItem.amount": {
            "name": "amount",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShoppingItem.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShoppingItem.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShoppingItem.create": {
            "name": "create",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShoppingItem.to_cart": {
            "name": "to_cart",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShoppingItem.from_cart": {
            "name": "from_cart",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShoppingItem.purchase": {
            "name": "purchase",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShoppingItem.__eq__": {
            "name": "__eq__",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "ShoppingList.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShoppingList.__str__": {
            "name": "__str__",
            "location": 105,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShoppingList.__repr__": {
            "name": "__repr__",
            "location": 108,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShoppingList.__add_from_db_list": {
            "name": "__add_from_db_list",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShoppingList.__add_critical": {
            "name": "__add_critical",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShoppingList.__add_suggested": {
            "name": "__add_suggested",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "RSES-master/rses/src/objects/stock.py": {
        "IngredientType.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IngredientType.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "IngredientType.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "IngredientType.__eq__": {
            "name": "__eq__",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "IngredientType.id": {
            "name": "id",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IngredientType.name": {
            "name": "name",
            "location": 44,
            "return": [
                "str",
                "dict[, ]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "new_name": []
            }
        },
        "IngredientType.exists": {
            "name": "exists",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IngredientType.create": {
            "name": "create",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IngredientType.delete": {
            "name": "delete",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IngredientType.items": {
            "name": "items",
            "location": 94,
            "return": [
                "list[Ingredient]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IngredientType.__load_from_db": {
            "name": "__load_from_db",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IngredientType.load_by_name": {
            "name": "load_by_name",
            "location": 119,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "IngredientType.json_dict": {
            "name": "json_dict",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ingredient.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ingredient.id": {
            "name": "id",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ingredient.name": {
            "name": "name",
            "location": 184,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "new_name": []
            }
        },
        "Ingredient.unit": {
            "name": "unit",
            "location": 193,
            "return": [
                "str",
                "dict[int, list[str]]",
                "int",
                "frozenset",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "new_unit": []
            }
        },
        "Ingredient.type": {
            "name": "type",
            "location": 202,
            "return": [
                "str",
                "set[]",
                "typing.OrderedDict",
                "dict[str, typing.Any]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "new_type": []
            }
        },
        "Ingredient.suggestion_threshold": {
            "name": "suggestion_threshold",
            "location": 212,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "new_threshold": []
            }
        },
        "Ingredient.rebuy_threshold": {
            "name": "rebuy_threshold",
            "location": 221,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "new_threshold": []
            }
        },
        "Ingredient.durability": {
            "name": "durability",
            "location": 230,
            "return": [
                "str",
                "dict[int, list[str]]",
                "int",
                "frozenset",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "new_durability": []
            }
        },
        "Ingredient.average_price": {
            "name": "average_price",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ingredient.in_stock": {
            "name": "in_stock",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ingredient.__str__": {
            "name": "__str__",
            "location": 260,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ingredient.__repr__": {
            "name": "__repr__",
            "location": 263,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ingredient.exists": {
            "name": "exists",
            "location": 267,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ingredient.create": {
            "name": "create",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ingredient.remove_stock": {
            "name": "remove_stock",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int"
                ]
            }
        },
        "Ingredient.delete": {
            "name": "delete",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ingredient.__updater": {
            "name": "__updater",
            "location": 339,
            "return": [
                "bool",
                "dict[str, typing.Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "int",
                    "str",
                    "None"
                ],
                "new_value": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "Ingredient.__load_from_db": {
            "name": "__load_from_db",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ingredient.load_by_name": {
            "name": "load_by_name",
            "location": 366,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "bytes"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Ingredient.json_dict": {
            "name": "json_dict",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IngredientTypeListing.total": {
            "name": "total",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IngredientTypeListing.show": {
            "name": "show",
            "location": 397,
            "return": [
                "list[]"
            ],
            "arguments": {
                "limit": [
                    "int"
                ],
                "offset": [
                    "int"
                ],
                "name_filter": [
                    "typing.Text"
                ]
            }
        },
        "IngredientListing.total": {
            "name": "total",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IngredientListing.show": {
            "name": "show",
            "location": 433,
            "return": [
                "list[]"
            ],
            "arguments": {
                "limit": [
                    "int"
                ],
                "offset": [
                    "int"
                ],
                "wanted_filters": [
                    "dict[, ]",
                    "None",
                    "dict[str, typing.Any]",
                    "dict[typing.Any, bool]"
                ]
            }
        }
    },
    "RSES-master/rses/src/objects/__init__.py": {},
    "RSES-master/tests/conftest.py": {
        "ingredient_type_name": {
            "name": "ingredient_type_name",
            "location": 12,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "ingredient_type_new_name": {
            "name": "ingredient_type_new_name",
            "location": 17,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": []
            }
        },
        "ingredient_type_no_create": {
            "name": "ingredient_type_no_create",
            "location": 26,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "ingredient_type_name": []
            }
        },
        "ingredient_type": {
            "name": "ingredient_type",
            "location": 32,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "ingredient_type_name": []
            }
        },
        "ingredient_type_no_delete": {
            "name": "ingredient_type_no_delete",
            "location": 44,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "ingredient_type_name": []
            }
        },
        "ingredient_name": {
            "name": "ingredient_name",
            "location": 50,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "ingredient_unit": {
            "name": "ingredient_unit",
            "location": 55,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "positive_int": {
            "name": "positive_int",
            "location": 60,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "positive_float": {
            "name": "positive_float",
            "location": 65,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "ingredient_no_create": {
            "name": "ingredient_no_create",
            "location": 72,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "ingredient_name": []
            }
        }
    },
    "RSES-master/tests/objects/test_stock.py": {
        "test_ingredient_type_create": {
            "name": "test_ingredient_type_create",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "ingredient_type_no_create": [
                    "typing.Type",
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_ingredient_type_rename": {
            "name": "test_ingredient_type_rename",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "ingredient_type": [
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "ingredient_type_new_name": [
                    "str"
                ]
            }
        },
        "test_ingredient_type_delete": {
            "name": "test_ingredient_type_delete",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "ingredient_type": []
            }
        },
        "test_ingredient_create": {
            "name": "test_ingredient_create",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "ingredient_type": [
                    "bool",
                    "typing.Type",
                    "str",
                    "dict[str, list[str]]"
                ],
                "ingredient_no_create": [
                    "bool",
                    "typing.Type",
                    "str",
                    "dict[str, list[str]]"
                ],
                "ingredient_unit": [
                    "bool",
                    "typing.Type",
                    "str",
                    "dict[str, list[str]]"
                ],
                "positive_float": [
                    "bool",
                    "typing.Type",
                    "str",
                    "dict[str, list[str]]"
                ],
                "positive_float2": [
                    "bool",
                    "typing.Type",
                    "str",
                    "dict[str, list[str]]"
                ],
                "positive_int": [
                    "bool",
                    "typing.Type",
                    "str",
                    "dict[str, list[str]]"
                ]
            }
        }
    }
}
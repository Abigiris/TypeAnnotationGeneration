{
    "RetroArcher-master/retroarcher/games.py": {
        "load": {
            "name": "load",
            "location": 43,
            "return": [
                "GameListLoadOp"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "Entry.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]"
                ],
                "rom_path": [
                    "str"
                ],
                "platform_name": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "remap": [
                    "None",
                    "int",
                    "typing.Sequence[]",
                    "str"
                ]
            }
        },
        "Entry.to_json": {
            "name": "to_json",
            "location": 26,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameListLoadOp.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_path": [
                    "str",
                    "None"
                ],
                "play_lists": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "RetroArcher-master/retroarcher/main.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "RetroArcher-master/retroarcher/render.py": {
        "Result.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.add_missing_remap": {
            "name": "add_missing_remap",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "typing.Callable[[], None]",
                    "str",
                    "list[]",
                    "tuple[]"
                ]
            }
        },
        "Result.add_playlist": {
            "name": "add_playlist",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.add_skipped_playlist": {
            "name": "add_skipped_playlist",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.add_success": {
            "name": "add_success",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.add_missing_platform": {
            "name": "add_missing_platform",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "typing.Callable[[], None]",
                    "str",
                    "list[]",
                    "tuple[]"
                ]
            }
        },
        "Result.errors": {
            "name": "errors",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.missing_platforms": {
            "name": "missing_platforms",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.missing_remaps": {
            "name": "missing_remaps",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.playlists": {
            "name": "playlists",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.skipped_playlists": {
            "name": "skipped_playlists",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Result.successes": {
            "name": "successes",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Renderer.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings_arg": [
                    "bool",
                    "str"
                ],
                "game_list": [
                    "dict[str, str]",
                    "typing.IO",
                    "list[pathlib.Path]",
                    "list[dict[, ]]",
                    "dict[, ]"
                ]
            }
        },
        "Renderer.run": {
            "name": "run",
            "location": 67,
            "return": [
                "Result"
            ],
            "arguments": {
                "self": []
            }
        },
        "Renderer._write_playlist": {
            "name": "_write_playlist",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pl_name": [
                    "str",
                    "None"
                ],
                "entries": [
                    "list[games.Entry]",
                    "str",
                    "list[str]"
                ],
                "root_rom_path": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "RetroArcher-master/retroarcher/settings.py": {
        "remap_dict_from_json": {
            "name": "remap_dict_from_json",
            "location": 28,
            "return": [
                "dict[tuple[typing.Union[str,dict[, ]]], ]"
            ],
            "arguments": {
                "root_path": [
                    "dict[str, dict[, ]]",
                    "str",
                    "dict[, ]"
                ],
                "j_dict": [
                    "dict[str, dict[, ]]",
                    "dict[, ]"
                ]
            }
        },
        "remap_dict_to_json": {
            "name": "remap_dict_to_json",
            "location": 39,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "remaps": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "load": {
            "name": "load",
            "location": 104,
            "return": [
                "Settings"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "Remap.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remap_name": [
                    "str",
                    "bool"
                ],
                "file_path": [
                    "str",
                    "None"
                ]
            }
        },
        "Remap.from_json": {
            "name": "from_json",
            "location": 18,
            "return": [
                "Remap"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "typing.Iterable[list[typing.Any]]",
                    "float",
                    "str"
                ],
                "root_path": [
                    "str",
                    "dict[, ]"
                ],
                "remap_name": [
                    "str"
                ],
                "j_dict": [
                    "str"
                ]
            }
        },
        "Remap.to_json": {
            "name": "to_json",
            "location": 24,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Emu.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "platform_name": [
                    "str",
                    "None"
                ],
                "emu_name": [
                    "str",
                    "None"
                ],
                "lib_path": [
                    "str"
                ],
                "remaps": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Emu.to_json": {
            "name": "to_json",
            "location": 56,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "playlists_path": [
                    "str"
                ],
                "remaps_path": [
                    "str"
                ],
                "platforms": [
                    "dict[, ]",
                    "typing.MutableMapping",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        }
    },
    "RetroArcher-master/retroarcher/__init__.py": {},
    "RetroArcher-master/tests/test_main.py": {
        "cli": {
            "name": "cli",
            "location": 28,
            "return": [],
            "arguments": {
                "capsys": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "monkeypatch": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "temp_dir": {
            "name": "temp_dir",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "_copy_fake_configs": {
            "name": "_copy_fake_configs",
            "location": 62,
            "return": [
                "int"
            ],
            "arguments": {
                "temp_dir": [
                    "bool"
                ]
            }
        },
        "_load_file": {
            "name": "_load_file",
            "location": 107,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_assert_playlists_created_correctly": {
            "name": "_assert_playlists_created_correctly",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "temp_dir": []
            }
        },
        "_assert_files_match": {
            "name": "_assert_files_match",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "b": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_assert_remaps_created_correctly": {
            "name": "_assert_remaps_created_correctly",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "temp_dir": []
            }
        },
        "test_create_files": {
            "name": "test_create_files",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "temp_dir": [],
                "cli": []
            }
        },
        "CliOutput.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "cli.cli": {
            "name": "cli",
            "location": 32,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "TestBadArgs.test_cwith_no_args": {
            "name": "test_cwith_no_args",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestBadArgs.test_cwith_no_settings": {
            "name": "test_cwith_no_settings",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": []
            }
        },
        "TestBadArgs.test_cwith_no_games": {
            "name": "test_cwith_no_games",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "temp_dir": [
                    "int"
                ],
                "cli": [
                    "str"
                ]
            }
        },
        "cli.cli.get_code": {
            "name": "get_code",
            "location": 36,
            "return": [],
            "arguments": {
                "code": []
            }
        }
    }
}
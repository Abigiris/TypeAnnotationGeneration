{
    "SpeechCommands-RNN-master/main.py": {},
    "SpeechCommands-RNN-master/setup.py": {},
    "SpeechCommands-RNN-master/rnnhearer/api.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "train": {
            "name": "train",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "input_config": [
                    "str"
                ],
                "data_dir": [
                    "str"
                ],
                "output": [
                    "str"
                ]
            }
        },
        "train_inner": {
            "name": "train_inner",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "input_config": [
                    "str",
                    "None",
                    "typing.IO",
                    "dict[str, str]"
                ],
                "data_dir": [
                    "str"
                ],
                "output": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None",
                    "int"
                ]
            }
        },
        "visualize": {
            "name": "visualize",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "histories_dir": [
                    "bool",
                    "str"
                ],
                "loss": [
                    "bool",
                    "str"
                ],
                "acc": [
                    "bool",
                    "str"
                ],
                "roc_auc": [
                    "bool",
                    "str"
                ],
                "confusion_matrix": [
                    "bool",
                    "str"
                ]
            }
        },
        "visualize_inner": {
            "name": "visualize_inner",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "histories_dir": [
                    "str"
                ],
                "loss": [
                    "bool",
                    "str"
                ],
                "acc": [
                    "bool",
                    "str"
                ],
                "roc_auc": [
                    "bool",
                    "str"
                ],
                "confusion_matrix": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/data_manipulation.py": {
        "history_to_df": {
            "name": "history_to_df",
            "location": 82,
            "return": [
                "str",
                "tuple[typing.Union[str,str]]",
                "int",
                "list[list[typing.Any]]"
            ],
            "arguments": {
                "history": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 90,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "l": [],
                "n": [
                    "int",
                    "list[]",
                    "typing.Sequence[]",
                    "list[str]",
                    "list[int]"
                ]
            }
        },
        "AudioDataGenerator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_representation": [
                    "int",
                    "None",
                    "dict[tuple[typing.Union[int,int]], int]"
                ],
                "kept_labels": []
            }
        },
        "AudioDataGenerator._read_wavfile": {
            "name": "_read_wavfile",
            "location": 24,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "sample_filepath": [
                    "int"
                ]
            }
        },
        "AudioDataGenerator.get_data_shape": {
            "name": "get_data_shape",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "sample_filepath": [
                    "list[str]"
                ]
            }
        },
        "AudioDataGenerator.flow": {
            "name": "flow",
            "location": 47,
            "return": [
                "typing.Generator[tuple[typing.Union[dict[int, str],bool]]]"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "int",
                    "list[tuple[typing.Union[pathlib.Path,str]]]"
                ],
                "batch_size": [
                    "int",
                    "list[tuple[typing.Union[pathlib.Path,str]]]"
                ]
            }
        },
        "AudioDataGenerator.flow_in_memory": {
            "name": "flow_in_memory",
            "location": 60,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "int",
                    "list[tuple[typing.Union[pathlib.Path,str]]]",
                    "list[str]",
                    "None",
                    "list[]"
                ],
                "batch_size": [
                    "int",
                    "list[tuple[typing.Union[pathlib.Path,str]]]",
                    "list[str]",
                    "None",
                    "list[]"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/data_reader.py": {
        "DataReader.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": [
                    "str",
                    "typing.Callable[str, None]"
                ],
                "validation_file_path": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "DataReader._validate_input": {
            "name": "_validate_input",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataReader._check_if_contains_samples": {
            "name": "_check_if_contains_samples",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataReader.read": {
            "name": "read",
            "location": 74,
            "return": [
                "tuple[list[tuple[typing.Text]]]"
            ],
            "arguments": {
                "self": [],
                "recognized_labels": [
                    "float",
                    "list[str]",
                    "typing.Sequence[str]"
                ],
                "unknown_percentage": []
            }
        },
        "DataReader._find_all_wav_files": {
            "name": "_find_all_wav_files",
            "location": 133,
            "return": [
                "list[]"
            ],
            "arguments": {
                "dir": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/utils.py": {
        "write_pickle": {
            "name": "write_pickle",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "read_pickle": {
            "name": "read_pickle",
            "location": 13,
            "return": [],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "read_config": {
            "name": "read_config",
            "location": 20,
            "return": [],
            "arguments": {
                "filepath": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/visualization.py": {
        "plot_accuracy": {
            "name": "plot_accuracy",
            "location": 14,
            "return": [],
            "arguments": {
                "histories": [
                    "str"
                ]
            }
        },
        "plot_loss": {
            "name": "plot_loss",
            "location": 37,
            "return": [],
            "arguments": {
                "histories": [
                    "str"
                ]
            }
        },
        "plot_roc_curves": {
            "name": "plot_roc_curves",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "y_score": [],
                "y_test": [],
                "labels": []
            }
        },
        "plot_confusion_matrix": {
            "name": "plot_confusion_matrix",
            "location": 112,
            "return": [],
            "arguments": {
                "y_score": [],
                "y_test": [],
                "labels": [
                    "dict[str, typing.Any]",
                    "dict[int, dict[int, typing.Any]]",
                    "str",
                    "list[]",
                    "None"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/__init__.py": {},
    "SpeechCommands-RNN-master/rnnhearer/networks/audio_representation.py": {
        "IAudioRepresentationConverter.convert_audio_signal": {
            "name": "convert_audio_signal",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "audio_samples": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "RawAudioRepresentationConverter.convert_audio_signal": {
            "name": "convert_audio_signal",
            "location": 25,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "audio_samples": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "SpectrogramAudioRepresentationConverter.convert_audio_signal": {
            "name": "convert_audio_signal",
            "location": 32,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "audio_samples": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "MFCCAudioRepresentationConverter.convert_audio_signal": {
            "name": "convert_audio_signal",
            "location": 39,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "audio_samples": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "AudioRepresentationConverterFactory.create_converter": {
            "name": "create_converter",
            "location": 50,
            "return": [],
            "arguments": {
                "audio_representaion": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/networks/network_configuration.py": {
        "NetworkConfiguration.from_config": {
            "name": "from_config",
            "location": 19,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Mapping",
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "config_parser": [
                    "list[str]"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/networks/sample_rnn.py": {
        "create_sample_rnn": {
            "name": "create_sample_rnn",
            "location": 6,
            "return": [],
            "arguments": {
                "input_shape": [
                    "tuple[int]",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "num_classes": [
                    "tuple[int]",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "create_network_from_config": {
            "name": "create_network_from_config",
            "location": 14,
            "return": [],
            "arguments": {
                "network_configuration": [
                    "str",
                    "list[typing.Any]",
                    "None",
                    "list[str]",
                    "int",
                    "list[typing.Callable[, ]]"
                ],
                "input_shape": [
                    "tuple[int]",
                    "str",
                    "bool",
                    "float"
                ],
                "num_classes": [
                    "int",
                    "dict[int, dict[, ]]",
                    "str"
                ]
            }
        }
    },
    "SpeechCommands-RNN-master/rnnhearer/networks/__init__.py": {},
    "SpeechCommands-RNN-master/tests/test_data_manipulation.py": {},
    "SpeechCommands-RNN-master/tests/test_networks.py": {},
    "SpeechCommands-RNN-master/tests/test_sample.py": {
        "test_sample": {
            "name": "test_sample",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
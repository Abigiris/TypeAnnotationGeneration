{
    "Studies-master/AiSD/lab1/generate_case.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Studies-master/AiSD/lab4/generate_case.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Studies-master/ApplicationSecurity/Solutions/set1/task2.py": {
        "SymmetricEncryption.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "secret_key": [
                    "str",
                    "bytes",
                    "int",
                    "typing.MutableMapping",
                    "dict[, ]"
                ],
                "msg": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bytes"
                ]
            }
        },
        "SymmetricEncryption.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SymmetricEncryption.encrypt": {
            "name": "encrypt",
            "location": 22,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SymmetricEncryption.gen_key": {
            "name": "gen_key",
            "location": 28,
            "return": [],
            "arguments": {
                "k": [
                    "int"
                ]
            }
        },
        "AsymmetricEncryption.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list[str]",
                    "bytes"
                ],
                "msg": []
            }
        },
        "AsymmetricEncryption.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsymmetricEncryption.encrypt": {
            "name": "encrypt",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsymmetricEncryption.gen_key": {
            "name": "gen_key",
            "location": 51,
            "return": [],
            "arguments": {
                "key": [
                    "int"
                ]
            }
        },
        "EncryptionReport._get_message": {
            "name": "_get_message",
            "location": 61,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "EncryptionReport._EncryptorFactory": {
            "name": "_EncryptorFactory",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "encryptor_class": [],
                "k": [
                    "int"
                ],
                "key_len": [
                    "int"
                ]
            }
        },
        "EncryptionReport.report_results": {
            "name": "report_results",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptionReport.measure_performance": {
            "name": "measure_performance",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptionReport.report": {
            "name": "report",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Studies-master/ApplicationSecurity/Solutions/set1/task3.py": {
        "md5_test": {
            "name": "md5_test",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "bcrypt_test": {
            "name": "bcrypt_test",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sha256_test": {
            "name": "sha256_test",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "argon_test": {
            "name": "argon_test",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "measure_md5": {
            "name": "measure_md5",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "measure_argon": {
            "name": "measure_argon",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "measure_sha256": {
            "name": "measure_sha256",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "measure_bcrypt": {
            "name": "measure_bcrypt",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "measure": {
            "name": "measure",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Studies-master/Compiler_Construction/xi-lang/tools/tester.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xic": [
                    "tuple[typing.Union[float,float,float,float]]",
                    "float",
                    "typing.Callable[, ]",
                    "int"
                ],
                "testdir": [
                    "tuple[typing.Union[float,float,float,float]]",
                    "float",
                    "typing.Callable[, ]",
                    "int"
                ],
                "spim": [
                    "tuple[typing.Union[float,float,float,float]]",
                    "float",
                    "typing.Callable[, ]",
                    "int"
                ],
                "workdir": [
                    "tuple[typing.Union[float,float,float,float]]",
                    "float",
                    "typing.Callable[, ]",
                    "int"
                ],
                "registers_description": [
                    "tuple[typing.Union[float,float,float,float]]",
                    "float",
                    "typing.Callable[, ]",
                    "int"
                ],
                "plugin": [
                    "tuple[typing.Union[float,float,float,float]]",
                    "float",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "Configuration.printself": {
            "name": "printself",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstrumentation.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "str",
                    "float",
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestInstrumentation.content": {
            "name": "content",
            "location": 62,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstrumentation.parse": {
            "name": "parse",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstrumentation.validate": {
            "name": "validate",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "str",
                    "float",
                    "int",
                    "list[str]"
                ],
                "instrumentation": [
                    "str",
                    "float",
                    "int",
                    "list[str]"
                ]
            }
        },
        "Test.expecting_parsing_error": {
            "name": "expecting_parsing_error",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.expecting_typechecking_error": {
            "name": "expecting_typechecking_error",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.expecting_compilation_failure": {
            "name": "expecting_compilation_failure",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.expecting_runtime_output": {
            "name": "expecting_runtime_output",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpectationMatcher.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "set[str]",
                    "None",
                    "str"
                ],
                "output": [
                    "set[str]",
                    "None",
                    "str"
                ]
            }
        },
        "ExpectationMatcher.__match_output": {
            "name": "__match_output",
            "location": 148,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "stdout": [
                    "list[int]",
                    "str",
                    "int"
                ],
                "expected": [
                    "list[str]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "ExpectationMatcher.__real_match": {
            "name": "__real_match",
            "location": 165,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]",
                "tuple[typing.Optional[typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpectationMatcher.match": {
            "name": "match",
            "location": 211,
            "return": [
                "tuple[typing.Union[bool,dict[, ],typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRawExecutor.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "str",
                    "list[str]"
                ],
                "test": [
                    "bool",
                    "list[typing.Any]",
                    "None",
                    "str"
                ],
                "env": [
                    "bool",
                    "list[typing.Any]",
                    "None",
                    "str"
                ],
                "run_spim": [
                    "str",
                    "bool"
                ],
                "stop_point": [
                    "bool",
                    "list[typing.Any]",
                    "None",
                    "str"
                ]
            }
        },
        "TestRawExecutor.execute": {
            "name": "execute",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRawExecutor.compile_program": {
            "name": "compile_program",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRawExecutor.execute_program": {
            "name": "execute_program",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRawExecutor.prepare_env": {
            "name": "prepare_env",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRawExecutor.clean_env": {
            "name": "clean_env",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRawExecutor.__call": {
            "name": "__call",
            "location": 282,
            "return": [
                "tuple[bool]",
                "tuple[typing.Union[bool,list[]]]"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "extenv": [
                    "dict[, ]"
                ]
            }
        },
        "TestExecutor.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "str",
                    "float",
                    "int",
                    "list[str]"
                ],
                "conf": [
                    "str",
                    "float",
                    "int",
                    "list[str]"
                ]
            }
        },
        "TestExecutor.execute": {
            "name": "execute",
            "location": 304,
            "return": [
                "tuple[typing.Optional[typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRepository.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testdirs": [
                    "int",
                    "float"
                ]
            }
        },
        "TestRepository.collect_tests": {
            "name": "collect_tests",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testdirs": []
            }
        },
        "TestRepository.gen": {
            "name": "gen",
            "location": 344,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.create_argparse": {
            "name": "create_argparse",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.run": {
            "name": "run",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Studies-master/Databases/project/api.py": {
        "transaction": {
            "name": "transaction",
            "location": 10,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Callable[, ]",
                    "typing.Type"
                ]
            }
        },
        "open_conn": {
            "name": "open_conn",
            "location": 21,
            "return": [
                "typing.Generator[Effect]"
            ],
            "arguments": {
                "database": [
                    "str"
                ],
                "login": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "leader": {
            "name": "leader",
            "location": 26,
            "return": [
                "typing.Generator[Effect]"
            ],
            "arguments": {
                "password": [
                    "str",
                    "int",
                    "None",
                    "list[str]",
                    "float"
                ],
                "member": [
                    "str",
                    "int",
                    "None",
                    "list[str]",
                    "float"
                ],
                "timestamp": [
                    "str",
                    "int",
                    "None",
                    "list[str]",
                    "float"
                ]
            }
        },
        "_action": {
            "name": "_action",
            "location": 36,
            "return": [
                "typing.Generator[]",
                "typing.Generator[Effect]"
            ],
            "arguments": {
                "action_type": [
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ],
                "timestamp": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None",
                    "str"
                ],
                "member": [
                    "dict[str, C]",
                    "dict[, ]",
                    "None",
                    "str"
                ],
                "password": [
                    "str",
                    "set[int]",
                    "None"
                ],
                "action": [
                    "str",
                    "bool"
                ],
                "project": [
                    "str",
                    "None",
                    "bool"
                ],
                "authority": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "support": {
            "name": "support",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "protest": {
            "name": "protest",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "_vote": {
            "name": "_vote",
            "location": 64,
            "return": [
                "typing.Generator[]",
                "typing.Generator[Effect]"
            ],
            "arguments": {
                "vote_type": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ],
                "member": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "action": [
                    "str"
                ]
            }
        },
        "upvote": {
            "name": "upvote",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "downvote": {
            "name": "downvote",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "actions": {
            "name": "actions",
            "location": 94,
            "return": [
                "typing.Generator[]",
                "typing.Generator[Effect]"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "bool",
                    "None"
                ],
                "member": [
                    "str",
                    "bool",
                    "None"
                ],
                "password": [
                    "str",
                    "bool",
                    "None"
                ],
                "type": [
                    "None",
                    "str",
                    "int"
                ],
                "project": [
                    "None",
                    "str",
                    "int"
                ],
                "authority": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "projects": {
            "name": "projects",
            "location": 111,
            "return": [
                "typing.Generator[]",
                "typing.Generator[Effect]"
            ],
            "arguments": {
                "timestamp": [
                    "str"
                ],
                "member": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "authority": [
                    "None",
                    "str"
                ]
            }
        },
        "votes": {
            "name": "votes",
            "location": 122,
            "return": [
                "typing.Generator[]",
                "typing.Generator[Effect]"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "int"
                ],
                "member": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "int"
                ],
                "action": [
                    "None",
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "project": [
                    "None",
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "trolls": {
            "name": "trolls",
            "location": 135,
            "return": [
                "typing.Generator[Effect]"
            ],
            "arguments": {
                "timestamp": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "transaction.wrapper": {
            "name": "wrapper",
            "location": 11,
            "return": [
                "typing.Generator[Effect]",
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "Studies-master/Databases/project/exceptions.py": {
        "InternalException.__str__": {
            "name": "__str__",
            "location": 2,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Studies-master/Databases/project/main.py": {
        "execute_sql_query": {
            "name": "execute_sql_query",
            "location": 20,
            "return": [],
            "arguments": {
                "sqlquery": [
                    "str",
                    "int"
                ]
            }
        },
        "perform_sql_query": {
            "name": "perform_sql_query",
            "location": 30,
            "return": [],
            "arguments": {
                "dispatcher": [
                    "str",
                    "typing.Callable[, ]",
                    "list[dict[str, typing.Any]]",
                    "typing.Iterator",
                    "int",
                    "list[str]"
                ],
                "sqlquery": [
                    "str",
                    "typing.Sequence[str]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "perform_current_datetime": {
            "name": "perform_current_datetime",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "perform_open_db": {
            "name": "perform_open_db",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "dispatcher": [
                    "bool",
                    "str",
                    "typing.Sequence[dict[str, typing.Any]]"
                ],
                "intent": [
                    "str",
                    "int"
                ]
            }
        },
        "process_request": {
            "name": "process_request",
            "location": 49,
            "return": [],
            "arguments": {
                "request": [
                    "tuple[int]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "close_db_conn": {
            "name": "close_db_conn",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_response": {
            "name": "get_response",
            "location": 98,
            "return": [],
            "arguments": {
                "validate": [
                    "dict[, ]"
                ],
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "init_db": {
            "name": "init_db",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "is_init": [
                    "bool"
                ]
            }
        }
    },
    "Studies-master/Databases/project/models.py": {
        "Member.get_or_create": {
            "name": "get_or_create",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "_fields": [
                    "None",
                    "tuple[object]",
                    "typing.Type"
                ]
            }
        },
        "Member.create": {
            "name": "create",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "int",
                    "dict[str, str]",
                    "dict[str, bool]",
                    "str"
                ]
            }
        },
        "Member.is_frozen": {
            "name": "is_frozen",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "member": [
                    "str",
                    "int"
                ]
            }
        },
        "Member.set_last_active": {
            "name": "set_last_active",
            "location": 36,
            "return": [
                "dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, bool]",
                    "dict[str, str]"
                ],
                "member_id": [
                    "str",
                    "None",
                    "bool",
                    "dict[str, bool]",
                    "dict[str, str]"
                ],
                "timestamp": [
                    "str",
                    "None",
                    "bool",
                    "dict[str, bool]",
                    "dict[str, str]"
                ]
            }
        },
        "Member.set_is_active": {
            "name": "set_is_active",
            "location": 41,
            "return": [
                "typing.Generator[Effect]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "member_id": [
                    "int",
                    "str"
                ],
                "is_active": [
                    "int",
                    "str"
                ]
            }
        },
        "Member.auth": {
            "name": "auth",
            "location": 48,
            "return": [
                "typing.Generator[]",
                "typing.Generator[Effect]",
                "MemberData"
            ],
            "arguments": {
                "cls": [],
                "member_id": [
                    "str",
                    "int",
                    "None",
                    "typing.Sequence[str]"
                ],
                "password": [
                    "str",
                    "int",
                    "None"
                ],
                "timestamp": [
                    "str"
                ]
            }
        },
        "Member.auth_as_leader": {
            "name": "auth_as_leader",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "member_id": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "int"
                ],
                "timestamp": [
                    "str",
                    "int"
                ]
            }
        },
        "Member.custom_get_or_create": {
            "name": "custom_get_or_create",
            "location": 70,
            "return": [
                "typing.Generator[Effect]",
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "tuple[str]"
                ],
                "member": [
                    "str"
                ],
                "password": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "timestamp": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ]
            }
        },
        "Project.custom_get_or_create": {
            "name": "custom_get_or_create",
            "location": 83,
            "return": [
                "typing.Generator[Effect]"
            ],
            "arguments": {
                "project": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "timestamp": [
                    "str"
                ],
                "authority": [
                    "None"
                ]
            }
        },
        "Project.get_list": {
            "name": "get_list",
            "location": 93,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "Action.get_list": {
            "name": "get_list",
            "location": 100,
            "return": [
                "SQLQuery"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Vote.get_members_votes": {
            "name": "get_members_votes",
            "location": 116,
            "return": [
                "SQLQuery"
            ],
            "arguments": {
                "cls": []
            }
        },
        "UserActionVote.table_name": {
            "name": "table_name",
            "location": 132,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "UserActionVote.get_list": {
            "name": "get_list",
            "location": 136,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "UserActionVote.add_vote": {
            "name": "add_vote",
            "location": 143,
            "return": [
                "SQLQuery"
            ],
            "arguments": {
                "cls": [],
                "member_id": [
                    "str",
                    "int"
                ],
                "action_id": [
                    "str",
                    "int"
                ],
                "vote_type": [
                    "str"
                ]
            }
        }
    },
    "Studies-master/Databases/project/myhash.py": {
        "hash_password": {
            "name": "hash_password",
            "location": 10,
            "return": [],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        },
        "verify_password": {
            "name": "verify_password",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "stored_password": [
                    "str"
                ],
                "provided_password": [
                    "str"
                ]
            }
        }
    },
    "Studies-master/Databases/project/mytypes.py": {
        "SQLQuery.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "int",
                    "typing.Iterable[typing.Union[int,str]]",
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "params": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "float",
                    "int"
                ],
                "fields": [
                    "None",
                    "str",
                    "list[\"DeliveryItem\"]",
                    "list[str]",
                    "typing.Sequence[]",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "SQLQuery.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenDatabase.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "login": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "password": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "OpenDatabase.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Studies-master/Databases/project/orm.py": {
        "join_queries": {
            "name": "join_queries",
            "location": 10,
            "return": [],
            "arguments": {
                "q2": [
                    "typing.Type",
                    "dict[, ]",
                    "bool"
                ],
                "q1": [
                    "typing.Type",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "append_to_query": {
            "name": "append_to_query",
            "location": 15,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]"
                ],
                "q": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Model._columns": {
            "name": "_columns",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "Model._val_holder": {
            "name": "_val_holder",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Model._vals_holders": {
            "name": "_vals_holders",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "str"
                ]
            }
        },
        "Model.table_name": {
            "name": "table_name",
            "location": 34,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "set[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Model.get_conds": {
            "name": "get_conds",
            "location": 38,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "_conds": [
                    "None",
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Model.get_ordering": {
            "name": "get_ordering",
            "location": 50,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ],
                "_order_by": [
                    "None",
                    "str"
                ]
            }
        },
        "Model.list": {
            "name": "list",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": [],
                "_fields": [
                    "list[str]",
                    "None",
                    "str"
                ],
                "_order_by": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "_conds": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "Model.get": {
            "name": "get",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Iterable[T]",
                    "int",
                    "str"
                ],
                "_fields": [
                    "None",
                    "typing.Iterable[T]",
                    "int",
                    "str"
                ]
            }
        },
        "Model.create": {
            "name": "create",
            "location": 75,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Model.get_or_create": {
            "name": "get_or_create",
            "location": 82,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "int"
                ],
                "_fields": [
                    "None",
                    "dict[, ]",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "Model.count": {
            "name": "count",
            "location": 91,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "field": [
                    "str"
                ],
                "val": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Model.update": {
            "name": "update",
            "location": 97,
            "return": [],
            "arguments": {
                "cls": [],
                "field": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "val_name": [
                    "str",
                    "typing.Mapping",
                    "typing.Sequence[typing.Any]"
                ],
                "value": [
                    "str",
                    "dict[str, str]",
                    "bytes",
                    "int",
                    "typing.Type"
                ],
                "selector": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "tuple[typing.Type]"
                ]
            }
        }
    },
    "Studies-master/Databases/project/requests.py": {
        "req_action": {
            "name": "req_action",
            "location": 7,
            "return": [
                "list[]"
            ],
            "arguments": {
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "read_request": {
            "name": "read_request",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "output_response": {
            "name": "output_response",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "dict[, ]"
                ]
            }
        },
        "validate_req": {
            "name": "validate_req",
            "location": 21,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "is_init": [
                    "bool"
                ],
                "request": [
                    "bool",
                    "str"
                ]
            }
        },
        "validate_req_action": {
            "name": "validate_req_action",
            "location": 31,
            "return": [],
            "arguments": {
                "action": [],
                "request": []
            }
        }
    },
    "Studies-master/Databases/project/tests/test_models.py": {
        "TestMember.test_table_name": {
            "name": "test_table_name",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMember.test_list": {
            "name": "test_list",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_get": {
            "name": "test_get",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_get_list": {
            "name": "test_get_list",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_get_list__none_param": {
            "name": "test_get_list__none_param",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProject.test_list": {
            "name": "test_list",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVotes.test_get_members_votes": {
            "name": "test_get_members_votes",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVotes.test_get_members_votes__filter": {
            "name": "test_get_members_votes__filter",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAction.test_get_list": {
            "name": "test_get_list",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAction.test_get_list__filter": {
            "name": "test_get_list__filter",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAction.test_get_list__filter_two_conds": {
            "name": "test_get_list__filter_two_conds",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Studies-master/Databases/project/tests/test_orm.py": {
        "test_joining_queries": {
            "name": "test_joining_queries",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_append_to_query": {
            "name": "test_append_to_query",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestORM.test_table_name": {
            "name": "test_table_name",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestORM.test_list__zero_params": {
            "name": "test_list__zero_params",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestORM.test_list__one_params": {
            "name": "test_list__one_params",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestORM.test_list__three_params": {
            "name": "test_list__three_params",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestORM.test_list__fields": {
            "name": "test_list__fields",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestORM.test_list__ordering": {
            "name": "test_list__ordering",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestORM.test_get": {
            "name": "test_get",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestORM.test_get__fields": {
            "name": "test_get__fields",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestORM.test_create": {
            "name": "test_create",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestORM.test_get_or_create": {
            "name": "test_get_or_create",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Studies-master/Databases/project/tests/__init__.py": {},
    "Studies-master/PO/Solutions/set1/task1.py": {
        "torba": {
            "name": "torba",
            "location": 2,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "zbior": {
            "name": "zbior",
            "location": 6,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "wstaw": {
            "name": "wstaw",
            "location": 10,
            "return": [
                "tuple[typing.Union[dict[str, int],int,typing.Callable[, ]]]"
            ],
            "arguments": {
                "k": [
                    "float",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, typing.Type]",
                    "bool"
                ],
                "e": [
                    "dict[str, int]",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "rozmiar": {
            "name": "rozmiar",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "k": []
            }
        },
        "szukaj": {
            "name": "szukaj",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "k": [
                    "list[int]"
                ],
                "e": [
                    "int"
                ]
            }
        },
        "szukaj_v2": {
            "name": "szukaj_v2",
            "location": 28,
            "return": [],
            "arguments": {
                "k": [
                    "float",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ],
                "e": [
                    "float",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Studies-master/PO/Solutions/set1/task2.py": {
        "Figura": {
            "name": "Figura",
            "location": 2,
            "return": [
                "list[typing.Union[tuple[typing.Union[float,float,float,float]],int,float,list[float],None]]"
            ],
            "arguments": {
                "x1": [
                    "tuple[typing.Union[float,float,float,float]]",
                    "int",
                    "float",
                    "list[float]"
                ],
                "y1": [
                    "tuple[typing.Union[float,float,float,float]]",
                    "int",
                    "float",
                    "list[float]"
                ],
                "x2": [
                    "None",
                    "tuple[typing.Union[float,float,float,float]]",
                    "int",
                    "float",
                    "list[float]"
                ],
                "y2": [
                    "None",
                    "tuple[typing.Union[float,float,float,float]]",
                    "int",
                    "float",
                    "list[float]"
                ]
            }
        },
        "narysuj": {
            "name": "narysuj",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "f": []
            }
        },
        "przesun": {
            "name": "przesun",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "tuple[]"
                ],
                "x": [
                    "int",
                    "list[]",
                    "str"
                ],
                "y": [
                    "int",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "zawiera": {
            "name": "zawiera",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "f": [
                    "list[]"
                ],
                "x": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ],
                "y": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "Point": {
            "name": "Point",
            "location": 50,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "Circle": {
            "name": "Circle",
            "location": 54,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "r": [
                    "int",
                    "float"
                ]
            }
        },
        "Square": {
            "name": "Square",
            "location": 58,
            "return": [],
            "arguments": {
                "x1": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float,float,float]]",
                    "list[float]"
                ],
                "y1": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float,float,float]]",
                    "list[float]"
                ],
                "x2": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float,float,float]]",
                    "list[float]"
                ],
                "y2": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float,float,float]]",
                    "list[float]"
                ]
            }
        },
        "test_przesun": {
            "name": "test_przesun",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zawiera": {
            "name": "test_zawiera",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
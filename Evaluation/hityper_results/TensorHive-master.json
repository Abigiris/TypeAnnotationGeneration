{
    "TensorHive-master/setup.py": {},
    "TensorHive-master/tensorhive/authorization.py": {
        "decode_token": {
            "name": "decode_token",
            "location": 11,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "init_jwt": {
            "name": "init_jwt",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "admin_required": {
            "name": "admin_required",
            "location": 37,
            "return": [],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "init_jwt.is_token_on_blacklist": {
            "name": "is_token_on_blacklist",
            "location": 22,
            "return": [],
            "arguments": {
                "decrypted_token": []
            }
        },
        "init_jwt.add_claims_to_access_token": {
            "name": "add_claims_to_access_token",
            "location": 27,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "current_user_id": []
            }
        },
        "admin_required.wrapper": {
            "name": "wrapper",
            "location": 39,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/cli.py": {
        "print_version": {
            "name": "print_version",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "log_level": []
            }
        },
        "log_level_mapping": {
            "name": "log_level_mapping",
            "location": 62,
            "return": [],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "main": {
            "name": "main",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "log_level": []
            }
        },
        "create": {
            "name": "create",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "key": {
            "name": "key",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "user": {
            "name": "user",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "multiple": []
            }
        },
        "prompt_to_create_first_account": {
            "name": "prompt_to_create_first_account",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/config.py": {
        "display_config": {
            "name": "display_config",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "check_env_var": {
            "name": "check_env_var",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "ConfigInitilizer.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigInitilizer.recreate_default_configuration_files": {
            "name": "recreate_default_configuration_files",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigInitilizer.safe_copy": {
            "name": "safe_copy",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [],
                "dst": []
            }
        },
        "ConfigLoader.load": {
            "name": "load",
            "location": 74,
            "return": [],
            "arguments": {
                "path": [],
                "displayed_title": [
                    "typing.Text"
                ]
            }
        },
        "SSH.hosts_config_to_dict": {
            "name": "hosts_config_to_dict",
            "location": 121,
            "return": [
                "dict[, dict[typing.Text, ]]"
            ],
            "arguments": {
                "path": []
            }
        },
        "SSH.proxy_config_to_dict": {
            "name": "proxy_config_to_dict",
            "location": 137,
            "return": [
                "dict[typing.Text, ]",
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "DB.uri_for_path": {
            "name": "uri_for_path",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "path": []
            }
        },
        "USAGE_LOGGING_SERVICE.full_path": {
            "name": "full_path",
            "location": 245,
            "return": [
                "str"
            ],
            "arguments": {
                "path": []
            }
        },
        "AUTH.config_get_parsed": {
            "name": "config_get_parsed",
            "location": 266,
            "return": [],
            "arguments": {
                "option": [],
                "fallback": []
            }
        }
    },
    "TensorHive-master/tensorhive/database.py": {
        "check_if_db_exists": {
            "name": "check_if_db_exists",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "_import_models": {
            "name": "_import_models",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "initialize_db": {
            "name": "initialize_db",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "alembic_config": []
            }
        },
        "_schema_version_is_current": {
            "name": "_schema_version_is_current",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "alembic_config": [],
                "connection": []
            }
        },
        "_upgrade_db_schema": {
            "name": "_upgrade_db_schema",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "alembic_config": []
            }
        },
        "ensure_db_with_current_schema": {
            "name": "ensure_db_with_current_schema",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_fk_pragma_on_connect": {
            "name": "_fk_pragma_on_connect",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "dbapi_con": [],
                "con_record": []
            }
        }
    },
    "TensorHive-master/tensorhive/__init__.py": {},
    "TensorHive-master/tensorhive/__main__.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/api/APIServer.py": {
        "start_api_server": {
            "name": "start_api_server",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "APIServer.run_forever": {
            "name": "run_forever",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "APIServer.run_forever.shutdown_session": {
            "name": "shutdown_session",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [
                    "None"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/api/__init__.py": {},
    "TensorHive-master/tensorhive/app/__init__.py": {},
    "TensorHive-master/tensorhive/app/web/AppServer.py": {
        "catch_all": {
            "name": "catch_all",
            "location": 20,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "_inject_api_endpoint_to_app": {
            "name": "_inject_api_endpoint_to_app",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "start_server": {
            "name": "start_server",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "GunicornStandaloneApplication.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "options": [
                    "dict[, ]"
                ]
            }
        },
        "GunicornStandaloneApplication.load_config": {
            "name": "load_config",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornStandaloneApplication.load": {
            "name": "load",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/app/web/__init__.py": {},
    "TensorHive-master/tensorhive/controllers/group.py": {
        "get": {
            "name": "get",
            "location": 27,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "only_default": [
                    "bool"
                ]
            }
        },
        "get_by_id": {
            "name": "get_by_id",
            "location": 38,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 54,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "group": []
            }
        },
        "update": {
            "name": "update",
            "location": 78,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "int"
                ],
                "newValues": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 105,
            "return": [
                "tuple[dict[typing.Text, str]]"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "dict[int, str]"
                ]
            }
        },
        "add_user": {
            "name": "add_user",
            "location": 125,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "group_id": [
                    "int",
                    "str"
                ],
                "user_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "remove_user": {
            "name": "remove_user",
            "location": 152,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "group_id": [
                    "int",
                    "str"
                ],
                "user_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/controllers/job.py": {
        "get_by_id": {
            "name": "get_by_id",
            "location": 28,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "get_all": {
            "name": "get_all",
            "location": 49,
            "return": [
                "tuple[dict[typing.Text, list[]]]"
            ],
            "arguments": {
                "userId": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 86,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "job": []
            }
        },
        "update": {
            "name": "update",
            "location": 125,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "dict[str, str]",
                    "collections.abc.Awaitable[]",
                    "typing.Sequence[str]"
                ],
                "newValues": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 163,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "add_task": {
            "name": "add_task",
            "location": 193,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "job_id": [
                    "str"
                ],
                "task_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "remove_task": {
            "name": "remove_task",
            "location": 223,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "job_id": [
                    "str"
                ],
                "task_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "execute": {
            "name": "execute",
            "location": 253,
            "return": [
                "tuple[typing.Union[str,dict[str, dict[str, typing.Any]],dict[typing.Text, ],typing.Type,int,list[str]]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "float",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        },
        "business_execute": {
            "name": "business_execute",
            "location": 267,
            "return": [
                "tuple[dict[typing.Text, list[]]]"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "enqueue": {
            "name": "enqueue",
            "location": 315,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "dequeue": {
            "name": "dequeue",
            "location": 335,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "stop": {
            "name": "stop",
            "location": 355,
            "return": [
                "tuple[typing.Union[str,dict[str, dict[str, typing.Any]],dict[int, str],list[str],dict[typing.Text, ],int,typing.Pattern,dict[int, int],typing.Type]]"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str",
                    "None"
                ],
                "gracefully": [
                    "bool"
                ]
            }
        },
        "business_stop": {
            "name": "business_stop",
            "location": 374,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ],
                "gracefully": [
                    "bool"
                ]
            }
        },
        "is_admin": {
            "name": "is_admin",
            "location": 420,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/controllers/nodes.py": {
        "get_infrastructure": {
            "name": "get_infrastructure",
            "location": 13,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "get_all_data": {
            "name": "get_all_data",
            "location": 54,
            "return": [
                "tuple[typing.Union[str,int,dict[str, str]]]"
            ],
            "arguments": {}
        },
        "get_hostnames": {
            "name": "get_hostnames",
            "location": 60,
            "return": [
                "tuple[typing.Union[list[],int]]"
            ],
            "arguments": {}
        },
        "get_cpu_metrics": {
            "name": "get_cpu_metrics",
            "location": 67,
            "return": [
                "tuple[typing.Union[dict[tuple[typing.Union[str,typing.Any]], str],int]]"
            ],
            "arguments": {
                "hostname": [
                    "int"
                ],
                "metric_type": [
                    "None",
                    "str"
                ]
            }
        },
        "get_gpu_metrics": {
            "name": "get_gpu_metrics",
            "location": 90,
            "return": [
                "tuple[typing.Union[dict[tuple[typing.Union[str,typing.Any]], str],int]]"
            ],
            "arguments": {
                "hostname": [
                    "int"
                ],
                "metric_type": [
                    "None",
                    "str"
                ]
            }
        },
        "get_gpu_processes": {
            "name": "get_gpu_processes",
            "location": 129,
            "return": [
                "tuple[typing.Union[dict[tuple[typing.Union[str,float]], typing.Union[str,float]],int]]"
            ],
            "arguments": {
                "hostname": [
                    "int"
                ]
            }
        },
        "get_gpu_info": {
            "name": "get_gpu_info",
            "location": 142,
            "return": [
                "tuple[typing.Union[dict[tuple[str], ],dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "hostname": [
                    "bool"
                ]
            }
        },
        "is_admin": {
            "name": "is_admin",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_gpu_info.basic_info": {
            "name": "basic_info",
            "location": 147,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "full_dict": []
            }
        }
    },
    "TensorHive-master/tensorhive/controllers/reservation.py": {
        "get_all": {
            "name": "get_all",
            "location": 25,
            "return": [
                "tuple[typing.Union[list[],int]]"
            ],
            "arguments": {}
        },
        "get_selected": {
            "name": "get_selected",
            "location": 31,
            "return": [
                "tuple[typing.Union[list[],dict[typing.Text, str],int]]"
            ],
            "arguments": {
                "resources_ids": [
                    "None",
                    "str",
                    "int"
                ],
                "start": [
                    "None",
                    "int",
                    "str",
                    "float"
                ],
                "end": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 59,
            "return": [],
            "arguments": {
                "resources_ids": [
                    "None",
                    "str",
                    "int"
                ],
                "start": [
                    "None",
                    "str",
                    "int"
                ],
                "end": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 72,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "reservation": [
                    "str"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 119,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "dict[str, str]"
                ],
                "newValues": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 162,
            "return": [
                "tuple[typing.Union[int,dict[typing.Text, str]]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "__is_reservation_owner": {
            "name": "__is_reservation_owner",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "reservation": [
                    "typing.Iterable[int]",
                    "str"
                ]
            }
        },
        "is_admin": {
            "name": "is_admin",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/controllers/resource.py": {
        "get": {
            "name": "get",
            "location": 21,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {}
        },
        "get_by_id": {
            "name": "get_by_id",
            "location": 29,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "uuid": [
                    "str",
                    "int",
                    "dict[str, str]"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/controllers/restriction.py": {
        "get_all": {
            "name": "get_all",
            "location": 37,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {}
        },
        "get_selected": {
            "name": "get_selected",
            "location": 44,
            "return": [
                "tuple[typing.Union[list[],dict[typing.Text, ]]]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "None",
                    "typing.Any",
                    "int"
                ],
                "group_id": [
                    "int",
                    "float",
                    "None",
                    "list[int]"
                ],
                "resource_id": [
                    "str",
                    "None",
                    "bytes",
                    "dict[bytes, int]",
                    "typing.Any",
                    "list[int]"
                ],
                "schedule_id": [
                    "str",
                    "None",
                    "int",
                    "dict['cirq.Qid', str]",
                    "typing.Any"
                ],
                "include_user_groups": [
                    "bool"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 85,
            "return": [],
            "arguments": {
                "user_id": [
                    "None",
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "group_id": [
                    "None",
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "resource_id": [
                    "None",
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "schedule_id": [
                    "None",
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "include_user_groups": [
                    "bool"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 99,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "restriction": []
            }
        },
        "update": {
            "name": "update",
            "location": 125,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "dict[str, str]"
                ],
                "newValues": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 158,
            "return": [
                "tuple[dict[typing.Text, str]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "apply_to_user": {
            "name": "apply_to_user",
            "location": 178,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "restriction_id": [
                    "str",
                    "int"
                ],
                "user_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "apply_to_group": {
            "name": "apply_to_group",
            "location": 207,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "restriction_id": [
                    "str",
                    "int"
                ],
                "group_id": [
                    "int",
                    "str"
                ]
            }
        },
        "apply_to_resource": {
            "name": "apply_to_resource",
            "location": 237,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "restriction_id": [
                    "int",
                    "str"
                ],
                "resource_uuid": [
                    "str",
                    "int",
                    "dict[str, int]"
                ]
            }
        },
        "apply_to_resources_by_hostname": {
            "name": "apply_to_resources_by_hostname",
            "location": 267,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "restriction_id": [
                    "int",
                    "str"
                ],
                "hostname": [
                    "str",
                    "int",
                    "set[int]",
                    "list[int]"
                ]
            }
        },
        "add_schedule": {
            "name": "add_schedule",
            "location": 298,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "restriction_id": [
                    "str",
                    "int"
                ],
                "schedule_id": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "remove_from_user": {
            "name": "remove_from_user",
            "location": 329,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "restriction_id": [
                    "str",
                    "int"
                ],
                "user_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "remove_from_group": {
            "name": "remove_from_group",
            "location": 358,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "restriction_id": [
                    "str",
                    "int"
                ],
                "group_id": [
                    "int",
                    "str"
                ]
            }
        },
        "remove_from_resource": {
            "name": "remove_from_resource",
            "location": 388,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "restriction_id": [
                    "str",
                    "int"
                ],
                "resource_uuid": [
                    "str",
                    "int"
                ]
            }
        },
        "remove_from_resources_by_hostname": {
            "name": "remove_from_resources_by_hostname",
            "location": 419,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "restriction_id": [
                    "str",
                    "int"
                ],
                "hostname": [
                    "str",
                    "int",
                    "set[int]",
                    "list[int]"
                ]
            }
        },
        "remove_schedule": {
            "name": "remove_schedule",
            "location": 450,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "restriction_id": [
                    "str",
                    "int"
                ],
                "schedule_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/controllers/schedule.py": {
        "get": {
            "name": "get",
            "location": 25,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {}
        },
        "get_by_id": {
            "name": "get_by_id",
            "location": 32,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "dict[int, str]",
                    "dict[str, str]"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 48,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "schedule": []
            }
        },
        "update": {
            "name": "update",
            "location": 78,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "None",
                    "int",
                    "typing.Sequence[str]"
                ],
                "newValues": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 117,
            "return": [
                "tuple[dict[typing.Text, str]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/controllers/task.py": {
        "synchronize": {
            "name": "synchronize",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "synchronize_task_record": {
            "name": "synchronize_task_record",
            "location": 97,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 124,
            "return": [
                "tuple[typing.Union[str,int,set[],list[str],dict[, ],dict[typing.Text, ],dict[str, str],typing.Type]]"
            ],
            "arguments": {
                "task": [
                    "str",
                    "int"
                ],
                "job_id": [
                    "str",
                    "set[int]"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 142,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int,typing.Type,dict[str, str],str]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "typing.Callable[str, int]"
                ]
            }
        },
        "get_all": {
            "name": "get_all",
            "location": 160,
            "return": [
                "tuple[typing.Union[int,str,dict[typing.Text, ],typing.Type]]"
            ],
            "arguments": {
                "jobId": [
                    "str",
                    "int"
                ],
                "syncAll": [
                    "int",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 180,
            "return": [
                "tuple[typing.Union[str,set[],list[None],list[str],int,dict[typing.Text, ],typing.Type,dict[str, str]]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "None"
                ],
                "newValues": [
                    "dict[str, typing.Any]",
                    "str",
                    "int"
                ]
            }
        },
        "destroy": {
            "name": "destroy",
            "location": 198,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int,typing.Type,dict[str, str],str]]"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "get_log": {
            "name": "get_log",
            "location": 216,
            "return": [
                "tuple[typing.Union[list[dict[str, str]],typing.Type,str,dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ],
                "tail": [
                    "bool",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "business_get_all": {
            "name": "business_get_all",
            "location": 235,
            "return": [
                "tuple[typing.Union[dict[typing.Text, list[]],int]]"
            ],
            "arguments": {
                "job_id": [
                    "str",
                    "None",
                    "int",
                    "float"
                ],
                "sync_all": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "business_create": {
            "name": "business_create",
            "location": 263,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "task": [
                    "str"
                ],
                "job_id": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "business_get": {
            "name": "business_get",
            "location": 307,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "parse_gpu_id_from_command": {
            "name": "parse_gpu_id_from_command",
            "location": 322,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "business_update": {
            "name": "business_update",
            "location": 331,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "None"
                ],
                "newValues": []
            }
        },
        "business_destroy": {
            "name": "business_destroy",
            "location": 381,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "business_spawn": {
            "name": "business_spawn",
            "location": 407,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "business_terminate": {
            "name": "business_terminate",
            "location": 445,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ],
                "gracefully": [
                    "bool"
                ]
            }
        },
        "business_get_log": {
            "name": "business_get_log",
            "location": 492,
            "return": [
                "tuple[typing.Union[dict[typing.Text, list[]],int]]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ],
                "tail": [
                    "str",
                    "bool"
                ]
            }
        },
        "is_admin": {
            "name": "is_admin",
            "location": 526,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "synchronize_task_record.sync_wrapper": {
            "name": "sync_wrapper",
            "location": 105,
            "return": [],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/controllers/user.py": {
        "get": {
            "name": "get",
            "location": 30,
            "return": [
                "tuple[typing.Union[list[],int]]"
            ],
            "arguments": {}
        },
        "get_by_id": {
            "name": "get_by_id",
            "location": 40,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "id": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "do_create": {
            "name": "do_create",
            "location": 59,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "user": [
                    "str"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 95,
            "return": [],
            "arguments": {
                "newUser": [
                    "str",
                    "bool"
                ]
            }
        },
        "ssh_signup": {
            "name": "ssh_signup",
            "location": 99,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]",
                "tuple[typing.Union[str,int]]"
            ],
            "arguments": {
                "user": [
                    "str"
                ]
            }
        },
        "authorized_keys_entry": {
            "name": "authorized_keys_entry",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "update": {
            "name": "update",
            "location": 126,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "newValues": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 160,
            "return": [
                "tuple[typing.Union[int,dict[typing.Text, str]]]"
            ],
            "arguments": {
                "id": [
                    "int"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 182,
            "return": [
                "tuple[typing.Union[dict[typing.Text, str],int]]"
            ],
            "arguments": {
                "user": [
                    "str"
                ]
            }
        },
        "logout": {
            "name": "logout",
            "location": 207,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "token_type": [
                    "str"
                ]
            }
        },
        "logout_with_access_token": {
            "name": "logout_with_access_token",
            "location": 224,
            "return": [],
            "arguments": {}
        },
        "logout_with_refresh_token": {
            "name": "logout_with_refresh_token",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "generate": {
            "name": "generate",
            "location": 234,
            "return": [
                "tuple[typing.Union[dict[typing.Text, str],int]]"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/controllers/__init__.py": {},
    "TensorHive-master/tensorhive/core/scheduling.py": {
        "Scheduler.schedule_jobs": {
            "name": "schedule_jobs",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jobs_to_eligible_resources": [
                    "bool",
                    "None",
                    "str"
                ],
                "hardware_to_slots": [
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "Scheduler.get_assigned_gpu_uid": {
            "name": "get_assigned_gpu_uid",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "list[aw_core.models.Event]",
                    "dict[, ]",
                    "list[dict[, ]]",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "hardware_map": [
                    "dict[, ]",
                    "dict[int, str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GreedyScheduler.schedule_jobs": {
            "name": "schedule_jobs",
            "location": 28,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "jobs_to_hardware": [],
                "hardware_to_slots": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/core/ssh.py": {
        "build_dedicated_config_for": {
            "name": "build_dedicated_config_for",
            "location": 32,
            "return": [
                "tuple[dict[, dict[typing.Text, ]]]"
            ],
            "arguments": {
                "host": [],
                "user": []
            }
        },
        "get_client": {
            "name": "get_client",
            "location": 53,
            "return": [
                "ParallelSSHClient"
            ],
            "arguments": {
                "config": [],
                "pconfig": [
                    "None"
                ]
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 72,
            "return": [],
            "arguments": {
                "client": [],
                "command": []
            }
        },
        "get_stdout": {
            "name": "get_stdout",
            "location": 98,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "host": [],
                "output": []
            }
        },
        "succeeded": {
            "name": "succeeded",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "host": [],
                "output": []
            }
        },
        "generate_cert": {
            "name": "generate_cert",
            "location": 131,
            "return": [],
            "arguments": {
                "path": [],
                "replace": [
                    "bool"
                ]
            }
        },
        "init_ssh_key": {
            "name": "init_ssh_key",
            "location": 138,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "node_tty_sessions": {
            "name": "node_tty_sessions",
            "location": 148,
            "return": [],
            "arguments": {
                "connection": []
            }
        },
        "_parse_who_output": {
            "name": "_parse_who_output",
            "location": 159,
            "return": [
                "None",
                "list[]"
            ],
            "arguments": {
                "stdout": []
            }
        },
        "_parse_who_output.as_dict": {
            "name": "as_dict",
            "location": 170,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "line": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/task_nursery.py": {
        "spawn": {
            "name": "spawn",
            "location": 231,
            "return": [],
            "arguments": {
                "command": [
                    "str"
                ],
                "host": [
                    "str",
                    "dict[, ]"
                ],
                "user": [
                    "str",
                    "int"
                ],
                "name_appendix": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "terminate": {
            "name": "terminate",
            "location": 250,
            "return": [],
            "arguments": {
                "pid": [
                    "str"
                ],
                "host": [
                    "str",
                    "list[dict[, ]]"
                ],
                "user": [
                    "str",
                    "list[str]",
                    "list[dict[, ]]"
                ],
                "gracefully": [
                    "bool"
                ]
            }
        },
        "running": {
            "name": "running",
            "location": 272,
            "return": [
                "list[]"
            ],
            "arguments": {
                "host": [
                    "str",
                    "None",
                    "bool"
                ],
                "user": [
                    "str",
                    "list[dict[, ]]"
                ]
            }
        },
        "fetch_log": {
            "name": "fetch_log",
            "location": 294,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ],
                "user": [
                    "str",
                    "list[str]",
                    "bytes"
                ],
                "task_id": [
                    "str"
                ],
                "tail": [
                    "bool"
                ]
            }
        },
        "ScreenCommandBuilder.spawn": {
            "name": "spawn",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "command": [
                    "str",
                    "bool"
                ],
                "session_name": [
                    "str",
                    "bool"
                ],
                "capture_output": [
                    "bool"
                ],
                "custom_log_name": [
                    "None",
                    "str",
                    "bool"
                ],
                "keep_alive": [
                    "bool"
                ]
            }
        },
        "ScreenCommandBuilder.mkdir": {
            "name": "mkdir",
            "location": 99,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "target_dir": [
                    "str"
                ]
            }
        },
        "ScreenCommandBuilder.tmp_log_file": {
            "name": "tmp_log_file",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ScreenCommandBuilder.custom_log_file": {
            "name": "custom_log_file",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "target_dir": [
                    "typing.Text"
                ]
            }
        },
        "ScreenCommandBuilder.interrupt": {
            "name": "interrupt",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "pid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ScreenCommandBuilder.terminate": {
            "name": "terminate",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "pid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ScreenCommandBuilder.kill": {
            "name": "kill",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "pid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ScreenCommandBuilder.get_active_sessions": {
            "name": "get_active_sessions",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "grep_pattern": [
                    "str",
                    "int",
                    "tuple[]",
                    "list[str]"
                ]
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "int",
                    "float"
                ],
                "command": [
                    "None",
                    "int",
                    "float"
                ],
                "pid": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "Task.spawn": {
            "name": "spawn",
            "location": 167,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bool",
                    "str"
                ],
                "name_appendix": [
                    "str"
                ]
            }
        },
        "Task.terminate": {
            "name": "terminate",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Task.interrupt": {
            "name": "interrupt",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Task.kill": {
            "name": "kill",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/__init__.py": {},
    "TensorHive-master/tensorhive/core/managers/InfrastructureManager.py": {
        "InfrastructureManager.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "available_nodes": [
                    "dict[, ]"
                ]
            }
        },
        "InfrastructureManager.infrastructure": {
            "name": "infrastructure",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InfrastructureManager.node_gpu_processes": {
            "name": "node_gpu_processes",
            "location": 22,
            "return": [
                "dict[, ]",
                "dict[, list[]]"
            ],
            "arguments": {
                "self": [],
                "hostname": [
                    "str"
                ]
            }
        },
        "InfrastructureManager.all_nodes_with_gpu_processes": {
            "name": "all_nodes_with_gpu_processes",
            "location": 62,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfrastructureManager.get_gpu_uid": {
            "name": "get_gpu_uid",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "hostname": [
                    "str",
                    "typing.Type",
                    "bool",
                    "dict[, ]"
                ],
                "gpu_id": [
                    "bool"
                ]
            }
        },
        "InfrastructureManager.ignored_processes": {
            "name": "ignored_processes",
            "location": 70,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/managers/ServiceManager.py": {
        "ServiceManager.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "int",
                    "float"
                ],
                "infrastructure_manager": [
                    "int"
                ],
                "connection_manager": [
                    "str",
                    "bool",
                    "list[str]",
                    "float"
                ]
            }
        },
        "ServiceManager.configure_all_services": {
            "name": "configure_all_services",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceManager.start_all_services": {
            "name": "start_all_services",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceManager.shutdown_all_services": {
            "name": "shutdown_all_services",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/managers/SSHConnectionManager.py": {
        "SSHConnectionManager.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "ssh_key_path": []
            }
        },
        "SSHConnectionManager.new_parallel_ssh_client": {
            "name": "new_parallel_ssh_client",
            "location": 21,
            "return": [
                "None",
                "ParallelSSHClient"
            ],
            "arguments": {
                "cls": [],
                "config": [],
                "key_path": [
                    "None"
                ]
            }
        },
        "SSHConnectionManager.add_host": {
            "name": "add_host",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host_config": []
            }
        },
        "SSHConnectionManager.single_connection": {
            "name": "single_connection",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "hostname": []
            }
        },
        "SSHConnectionManager.connections": {
            "name": "connections",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSHConnectionManager.test_all_connections": {
            "name": "test_all_connections",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "config": [],
                "key_path": [
                    "None"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/core/managers/TensorHiveManager.py": {
        "TensorHiveManager.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorHiveManager.test_ssh": {
            "name": "test_ssh",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TensorHiveManager.instantiate_services_from_config": {
            "name": "instantiate_services_from_config",
            "location": 72,
            "return": [
                "list[typing.Union[MonitoringService,JobSchedulingService,ProtectionService,UsageLoggingService]]"
            ],
            "arguments": {}
        },
        "TensorHiveManager.configure_services_from_config": {
            "name": "configure_services_from_config",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorHiveManager.init": {
            "name": "init",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorHiveManager.shutdown": {
            "name": "shutdown",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/managers/__init__.py": {},
    "TensorHive-master/tensorhive/core/monitors/CPUMonitor.py": {
        "CPUMonitor.update": {
            "name": "update",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_connection": [],
                "infrastructure_manager": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/core/monitors/GPUMonitor.py": {
        "GPUMonitor.update": {
            "name": "update",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_connection": [
                    "int"
                ],
                "infrastructure_manager": []
            }
        },
        "GPUMonitor.composed_query_command": {
            "name": "composed_query_command",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPUMonitor._update_gpu_metrics": {
            "name": "_update_gpu_metrics",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group_connection": [
                    "int",
                    "typing.Sequence[dict[str, typing.Any]]"
                ],
                "infrastructure_manager": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "GPUMonitor._get_process_owner": {
            "name": "_get_process_owner",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "tuple['cirq.Qid']",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "str"
                ],
                "hostname": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "connection": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "GPUMonitor.get_gpu_processes_command": {
            "name": "get_gpu_processes_command",
            "location": 110,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPUMonitor._current_processes": {
            "name": "_current_processes",
            "location": 160,
            "return": [
                "dict[, None]"
            ],
            "arguments": {
                "self": [],
                "group_connection": [
                    "int",
                    "Exception",
                    "bytes"
                ],
                "infrastructure_manager": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "GPUMonitor._update_processes": {
            "name": "_update_processes",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "infrastructure_manager": [
                    "dict[, ]",
                    "typing.Type",
                    "str"
                ],
                "processes": [
                    "dict[, ]",
                    "dict[str, str]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, int]"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/core/monitors/Monitor.py": {
        "Monitor.update": {
            "name": "update",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "str",
                    "None"
                ],
                "infrastructure_manager": [
                    "int",
                    "str",
                    "None"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/core/monitors/__init__.py": {},
    "TensorHive-master/tensorhive/core/services/JobSchedulingService.py": {
        "JobSchedulingService.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "int",
                    "float"
                ],
                "stop_attempts_after": [
                    "int",
                    "float"
                ]
            }
        },
        "JobSchedulingService.inject": {
            "name": "inject",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "injected_object": []
            }
        },
        "JobSchedulingService._log_msg": {
            "name": "_log_msg",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "now": [],
                "action": [
                    "str",
                    "dict[, ]"
                ],
                "id": [
                    "str",
                    "dict[, ]"
                ],
                "scheduled": []
            }
        },
        "JobSchedulingService.find_jobs_scheduled_for_date": {
            "name": "find_jobs_scheduled_for_date",
            "location": 54,
            "return": [],
            "arguments": {
                "date": [
                    "str"
                ]
            }
        },
        "JobSchedulingService.try_execute": {
            "name": "try_execute",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "JobSchedulingService.check_current_gpu_slots": {
            "name": "check_current_gpu_slots",
            "location": 76,
            "return": [
                "dict[, dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "hosts_with_gpu_occupation": [
                    "bytes"
                ]
            }
        },
        "JobSchedulingService.check_if_resources_available_for_job": {
            "name": "check_if_resources_available_for_job",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "job": [
                    "str",
                    "float",
                    "list[str]",
                    "int"
                ],
                "current_device_occupation": [
                    "dict[str, typing.Any]",
                    "float"
                ]
            }
        },
        "JobSchedulingService.interferes_with_reservations": {
            "name": "interferes_with_reservations",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "job": [
                    "str",
                    "typing.Callable[T, bool]"
                ],
                "available_hosts_with_gpu_occupation": [
                    "float",
                    "dict[str, typing.Any]",
                    "int",
                    "list[I]"
                ],
                "considered_future_period": [
                    "bool",
                    "str",
                    "None"
                ],
                "allow_own": [
                    "bool"
                ]
            }
        },
        "JobSchedulingService.execute_scheduled": {
            "name": "execute_scheduled",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "available_hosts_with_gpu_occupation": [
                    "str"
                ]
            }
        },
        "JobSchedulingService.get_hosts_with_gpus_eligible_for_jobs": {
            "name": "get_hosts_with_gpus_eligible_for_jobs",
            "location": 158,
            "return": [
                "dict[, dict[, list[]]]"
            ],
            "arguments": {
                "self": [],
                "jobs": [
                    "tuple[]"
                ]
            }
        },
        "JobSchedulingService.execute_queued": {
            "name": "execute_queued",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "available_hosts_with_gpu_occupation": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "JobSchedulingService.stop_with_grace": {
            "name": "stop_with_grace",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "JobSchedulingService.stop_scheduled": {
            "name": "stop_scheduled",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobSchedulingService.sync_running_from_queue": {
            "name": "sync_running_from_queue",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "available_hosts_with_gpu_occupation": [
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "JobSchedulingService.do_run": {
            "name": "do_run",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/services/MonitoringService.py": {
        "MonitoringService.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monitors": [
                    "int",
                    "float"
                ],
                "interval": [
                    "float"
                ]
            }
        },
        "MonitoringService.inject": {
            "name": "inject",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "injected_object": []
            }
        },
        "MonitoringService.do_run": {
            "name": "do_run",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/services/ProtectionService.py": {
        "ProtectionService.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handlers": [
                    "typing.Callable[, ]",
                    "int",
                    "str",
                    "None"
                ],
                "interval": [
                    "float"
                ],
                "strict_reservations": [
                    "bool"
                ]
            }
        },
        "ProtectionService.inject": {
            "name": "inject",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "injected_object": []
            }
        },
        "ProtectionService.find_hostname": {
            "name": "find_hostname",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ProtectionService.gpu_attr": {
            "name": "gpu_attr",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "hostname": [
                    "int",
                    "Exception",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "uuid": [
                    "int",
                    "Exception",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ],
                "attribute": [
                    "typing.Text"
                ]
            }
        },
        "ProtectionService.store_violation": {
            "name": "store_violation",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [],
                "process": [
                    "list[str]",
                    "list[dict[str, typing.Any]]"
                ],
                "hostname": [],
                "reservation": [
                    "float",
                    "None",
                    "dict[, ]"
                ],
                "gpu_id": [
                    "float",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "ProtectionService.do_run": {
            "name": "do_run",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/services/Service.py": {
        "Service.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.inject": {
            "name": "inject",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "injected_object": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/core/services/UsageLoggingService.py": {
        "avg": {
            "name": "avg",
            "location": 25,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "data": []
            }
        },
        "object_serializer": {
            "name": "object_serializer",
            "location": 33,
            "return": [
                "list[]"
            ],
            "arguments": {
                "obj": [
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "JSONLogFile.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "JSONLogFile.read": {
            "name": "read",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONLogFile.write": {
            "name": "write",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "Log.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict[str, str]",
                    "list[]",
                    "str",
                    "None"
                ]
            }
        },
        "Log.updated_log": {
            "name": "updated_log",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "log_file": []
            }
        },
        "Log.save": {
            "name": "save",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out_path": [
                    "str"
                ]
            }
        },
        "UsageLoggingService.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "float"
                ]
            }
        },
        "UsageLoggingService.inject": {
            "name": "inject",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "injected_object": [
                    "str",
                    "None"
                ]
            }
        },
        "UsageLoggingService.do_run": {
            "name": "do_run",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageLoggingService.log_current_usage": {
            "name": "log_current_usage",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageLoggingService._clean_up_old_log_file": {
            "name": "_clean_up_old_log_file",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "UsageLoggingService.handle_expired_logs": {
            "name": "handle_expired_logs",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageLoggingService.extract_specific_gpu_data": {
            "name": "extract_specific_gpu_data",
            "location": 231,
            "return": [
                "dict[str, typing.Any]",
                "dict[str, dict[str, typing.Any]]",
                "dict[str, float]",
                "dict[typing.Any, str]",
                "dict[, ]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "uuid": [
                    "str"
                ],
                "infrastructure": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/core/services/__init__.py": {},
    "TensorHive-master/tensorhive/core/utils/AccountCreator.py": {
        "AccountCreator.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountCreator.run_prompt": {
            "name": "run_prompt",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountCreator._create_user": {
            "name": "_create_user",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountCreator._ask_for_username": {
            "name": "_ask_for_username",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountCreator._ask_for_email": {
            "name": "_ask_for_email",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountCreator._ask_for_password": {
            "name": "_ask_for_password",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountCreator._ask_for_role": {
            "name": "_ask_for_role",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountCreator._add_to_default_groups": {
            "name": "_add_to_default_groups",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountCreator._check_restrictions": {
            "name": "_check_restrictions",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/utils/colors.py": {},
    "TensorHive-master/tensorhive/core/utils/decorators.py": {
        "override": {
            "name": "override",
            "location": 9,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "timeit": {
            "name": "timeit",
            "location": 14,
            "return": [],
            "arguments": {
                "method": [
                    "typing.Callable[, ]",
                    "list[str]",
                    "list[]",
                    "str"
                ]
            }
        },
        "memoize": {
            "name": "memoize",
            "location": 26,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "timeit.timed": {
            "name": "timed",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "memoize.memoized_func": {
            "name": "memoized_func",
            "location": 44,
            "return": [],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/core/utils/exceptions.py": {},
    "TensorHive-master/tensorhive/core/utils/mailer.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "author": [
                    "str"
                ],
                "to": [
                    "list[typing.Mapping]",
                    "typing.Callable[typing.Callable[, ], typing.Callable[..., None]]",
                    "str"
                ],
                "subject": [
                    "str"
                ],
                "body": [
                    "str",
                    "list[str]",
                    "int",
                    "None"
                ]
            }
        },
        "Message.author": {
            "name": "author",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.recipients": {
            "name": "recipients",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.subject": {
            "name": "subject",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.body": {
            "name": "body",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBodyTemplater.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "MessageBodyTemplater.fill_in": {
            "name": "fill_in",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Mailer.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "str",
                    "int",
                    "list[]"
                ],
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "Mailer.send": {
            "name": "send",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "Mailer.connect": {
            "name": "connect",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "Mailer.disconnect": {
            "name": "disconnect",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/utils/NvidiaSmiParser.py": {
        "NvidiaSmiParser.make_dict": {
            "name": "make_dict",
            "location": 27,
            "return": [
                "dict[, dict[typing.Text, ]]"
            ],
            "arguments": {
                "cls": [],
                "keys": [
                    "str",
                    "tuple[object]",
                    "set[]",
                    "dict[, ]"
                ],
                "values": [
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[object]",
                    "set[]",
                    "int"
                ]
            }
        },
        "NvidiaSmiParser._format_values": {
            "name": "_format_values",
            "location": 75,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[typing.Union[typing.Any,typing.Any]]",
                    "list[str]",
                    "typing.Sequence[str]",
                    "set[str]"
                ],
                "values": [
                    "bytes",
                    "str"
                ]
            }
        },
        "NvidiaSmiParser._shorter_key_name": {
            "name": "_shorter_key_name",
            "location": 92,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "original_key": [
                    "str"
                ]
            }
        },
        "NvidiaSmiParser.parse_query_gpu_stdout": {
            "name": "parse_query_gpu_stdout",
            "location": 101,
            "return": [
                "dict[, dict[, ]]"
            ],
            "arguments": {
                "cls": [],
                "stdout": [
                    "set[str]",
                    "tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                    "str",
                    "list[typing.Type]"
                ]
            }
        },
        "NvidiaSmiParser.parse_pmon_stdout": {
            "name": "parse_pmon_stdout",
            "location": 151,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "int",
                    "bytes",
                    "typing.Type",
                    "str"
                ],
                "stdout": [
                    "str"
                ]
            }
        },
        "NvidiaSmiParser._format_values.formatted_value": {
            "name": "formatted_value",
            "location": 80,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "value": []
            }
        },
        "NvidiaSmiParser.parse_pmon_stdout.minified_process_dict": {
            "name": "minified_process_dict",
            "location": 183,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "original": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/utils/ReservationVerifier.py": {
        "ReservationVerifier.__get_latest_date_allowed_by_schedules": {
            "name": "__get_latest_date_allowed_by_schedules",
            "location": 8,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "int",
                    "str"
                ],
                "start_date": [],
                "end_date": [
                    "str"
                ],
                "schedules": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "ReservationVerifier.is_reservation_allowed": {
            "name": "is_reservation_allowed",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "user": [],
                "reservation": [
                    "typing.Callable[datetime.datetime, collections.abc.Awaitable[None]]",
                    "int"
                ]
            }
        },
        "ReservationVerifier.update_user_reservations_statuses": {
            "name": "update_user_reservations_statuses",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "typing.Type"
                ],
                "user": [],
                "have_users_permissions_increased": [
                    "bool",
                    "typing.Callable[[], typing.Any]",
                    "typing.Iterable[str]",
                    "None"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/core/utils/Singleton.py": {
        "Singleton.__call__": {
            "name": "__call__",
            "location": 7,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "set[str]",
                    "str"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/core/utils/StoppableThread.py": {
        "StoppableThread.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoppableThread.run": {
            "name": "run",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoppableThread.do_run": {
            "name": "do_run",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoppableThread.shutdown": {
            "name": "shutdown",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoppableThread.before_execution": {
            "name": "before_execution",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoppableThread.after_execution": {
            "name": "after_execution",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/utils/time.py": {
        "utc2local": {
            "name": "utc2local",
            "location": 5,
            "return": [],
            "arguments": {
                "utc": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/utils/__init__.py": {},
    "TensorHive-master/tensorhive/core/violation_handlers/EmailSendingBehaviour.py": {
        "LastEmailTime.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailSendingBehaviour.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailSendingBehaviour._gather_notifications": {
            "name": "_gather_notifications",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "violation_data": []
            }
        },
        "EmailSendingBehaviour._send_queued_emails": {
            "name": "_send_queued_emails",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailSendingBehaviour.trigger_action": {
            "name": "trigger_action",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "violation_data": [
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "EmailSendingBehaviour._time_to_resend": {
            "name": "_time_to_resend",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "timer": [
                    "bool",
                    "None",
                    "typing.Iterator"
                ],
                "to_admin": [
                    "bool"
                ]
            }
        },
        "EmailSendingBehaviour._get_timer": {
            "name": "_get_timer",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "keyname": [
                    "int",
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "EmailSendingBehaviour._test_smtp_configuration": {
            "name": "_test_smtp_configuration",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmailSendingBehaviour._email_intruder": {
            "name": "_email_intruder",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "bool",
                    "None",
                    "str"
                ],
                "violation_data": [
                    "str",
                    "bytes"
                ],
                "timer": [
                    "int",
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "EmailSendingBehaviour._email_admin": {
            "name": "_email_admin",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "violation_data": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None",
                    "int"
                ],
                "timer": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/core/violation_handlers/MessageSendingBehaviour.py": {
        "MessageSendingBehaviour.get_warning_message": {
            "name": "get_warning_message",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MessageSendingBehaviour._build_single_command": {
            "name": "_build_single_command",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "recipient": [
                    "str",
                    "bool",
                    "list[]"
                ],
                "tty": [
                    "tuple['cirq.Qid']",
                    "str"
                ],
                "msg": [
                    "tuple['cirq.Qid']",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "MessageSendingBehaviour.merged_commands": {
            "name": "merged_commands",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "recipient": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "ttys": [
                    "str",
                    "list[str]"
                ],
                "msg": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MessageSendingBehaviour.trigger_action": {
            "name": "trigger_action",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "violation_data": [
                    "bytes"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/core/violation_handlers/ProtectionHandler.py": {
        "ProtectionHandler.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "behaviour": [
                    "int",
                    "float"
                ]
            }
        },
        "ProtectionHandler.trigger_action": {
            "name": "trigger_action",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/violation_handlers/SudoProcessKillingBehaviour.py": {
        "SudoProcessKillingBehaviour.trigger_action": {
            "name": "trigger_action",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "violation_data": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/violation_handlers/UserProcessKillingBehaviour.py": {
        "UserProcessKillingBehaviour.trigger_action": {
            "name": "trigger_action",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "violation_data": []
            }
        }
    },
    "TensorHive-master/tensorhive/core/violation_handlers/__init__.py": {},
    "TensorHive-master/tensorhive/exceptions/ForbiddenException.py": {
        "ForbiddenException.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/exceptions/InvalidRequestException.py": {
        "InvalidRequestException.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/exceptions/__init__.py": {},
    "TensorHive-master/tensorhive/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/05eca1c82f14_add_email_column_to_user.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/06ce06e9bb85_add_is_cancelled_column_to_the_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/0a7b011e7b39_add_and_rename_columns_in_jobs_and_tasks.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/131eb148fd57_add_task_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/4d010fddad6f_create_command_segments_and_cmd_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/5279ea22b197_merge_emails_and_summaries.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/58a12e45663e_add_hostname_column_to_the_resources_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/7110c972b137_remove_unique_constraint_from_is_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/72fb5b78625f_add_is_default_column_to_the_groups_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/81c2455baab1_create_resources_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/9d12594fe87b_create_restriction_schedules_and_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/a16bb624004f_modify_tasks_table_to_match_jobs_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/a44e0949e0a0_create_jobs_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/bffd7d81d326_add_summary_fields_to_reservation.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/ce624ab2c458_create_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/e792ab930685_rename_columns_to_match_api.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/e935d47c4cde_create_restrictions_and_secondary_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/migrations/versions/ecd059f567b5_create_groups_and_user2group_tables.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/models/CommandSegment.py": {
        "CommandSegment.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandSegment.check_assertions": {
            "name": "check_assertions",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandSegment.segment_type": {
            "name": "segment_type",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandSegment.tasks": {
            "name": "tasks",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandSegment.find_by_name": {
            "name": "find_by_name",
            "location": 45,
            "return": [
                "tuple[typing.Optional[tuple[typing.Optional[]]]]",
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "CommandSegment2Task.index": {
            "name": "index",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandSegment2Task.value": {
            "name": "value",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/models/CRUDModel.py": {
        "CRUDModel.check_assertions": {
            "name": "check_assertions",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRUDModel.save": {
            "name": "save",
            "location": 21,
            "return": [
                "CRUDModel"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRUDModel.destroy": {
            "name": "destroy",
            "location": 40,
            "return": [
                "CRUDModel"
            ],
            "arguments": {
                "self": []
            }
        },
        "CRUDModel.get": {
            "name": "get",
            "location": 53,
            "return": [
                "dict[str, typing.Any]",
                "str",
                "list[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Sequence[int]",
                    "None",
                    "bool"
                ],
                "id": [
                    "str",
                    "typing.Sequence[int]",
                    "None",
                    "bool"
                ]
            }
        },
        "CRUDModel.all": {
            "name": "all",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "CRUDModel._serialize": {
            "name": "_serialize",
            "location": 72,
            "return": [
                "int",
                "list[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "int",
                    "list[int]",
                    "str"
                ]
            }
        },
        "CRUDModel.as_dict": {
            "name": "as_dict",
            "location": 78,
            "return": [
                "dict[, ]",
                "dict[typing.Any, dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "include_private": [
                    "bool"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/models/Group.py": {
        "Group.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.check_assertions": {
            "name": "check_assertions",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.is_default": {
            "name": "is_default",
            "location": 45,
            "return": [
                "bool",
                "str",
                "typing.Callable[str, None]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Group.users": {
            "name": "users",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Group.add_user": {
            "name": "add_user",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Group.remove_user": {
            "name": "remove_user",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "Group.as_dict": {
            "name": "as_dict",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "include_private": [
                    "bool"
                ],
                "include_users": [
                    "bool"
                ]
            }
        },
        "Group.get_default_groups": {
            "name": "get_default_groups",
            "location": 76,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/models/Job.py": {
        "Job.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.check_assertions": {
            "name": "check_assertions",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.tasks": {
            "name": "tasks",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Job.number_of_tasks": {
            "name": "number_of_tasks",
            "location": 59,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.status": {
            "name": "status",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Job.add_task": {
            "name": "add_task",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "typing.Callable[datetime.datetime, collections.abc.Awaitable[None]]",
                    "dict[, ]"
                ]
            }
        },
        "Job.remove_task": {
            "name": "remove_task",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "typing.Callable[datetime.datetime, collections.abc.Awaitable[None]]",
                    "list[T]"
                ]
            }
        },
        "Job.synchronize_status": {
            "name": "synchronize_status",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.enqueue": {
            "name": "enqueue",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.dequeue": {
            "name": "dequeue",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.start_at": {
            "name": "start_at",
            "location": 123,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Job.stop_at": {
            "name": "stop_at",
            "location": 138,
            "return": [
                "float",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "dict[, ]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Job.as_dict": {
            "name": "as_dict",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "include_private": [
                    "None",
                    "dict[str, typing.Any]",
                    "float",
                    "list[D]",
                    "dict[, ]",
                    "typing.NamedTuple",
                    "int"
                ]
            }
        },
        "Job.get_job_queue": {
            "name": "get_job_queue",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "Job.get_jobs_running_from_queue": {
            "name": "get_jobs_running_from_queue",
            "location": 156,
            "return": [],
            "arguments": {}
        }
    },
    "TensorHive-master/tensorhive/models/Reservation.py": {
        "Reservation.check_assertions": {
            "name": "check_assertions",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reservation.duration": {
            "name": "duration",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reservation.start": {
            "name": "start",
            "location": 66,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Reservation.end": {
            "name": "end",
            "location": 76,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Reservation.is_cancelled": {
            "name": "is_cancelled",
            "location": 86,
            "return": [
                "bool",
                "typing.Mapping",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Reservation.current_events": {
            "name": "current_events",
            "location": 90,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[str, str]"
                ],
                "resource_id": [
                    "None",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Reservation.upcoming_events_for_resource": {
            "name": "upcoming_events_for_resource",
            "location": 107,
            "return": [
                "list[typing.Union[str,tuple[typing.Union[typing.Any,str]]]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "float",
                    "None"
                ],
                "resource_id": [
                    "str",
                    "int",
                    "float",
                    "None"
                ],
                "period_after": [
                    "str",
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "Reservation.would_interfere": {
            "name": "would_interfere",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reservation.filter_by_uuids_and_time_range": {
            "name": "filter_by_uuids_and_time_range",
            "location": 133,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "None",
                    "float",
                    "str",
                    "typing.Callable[, ]"
                ],
                "uuids": [
                    "str",
                    "list[dict[, ]]",
                    "None"
                ],
                "start": [
                    "int",
                    "None",
                    "typing.Sequence[D]"
                ],
                "end": [
                    "int",
                    "None"
                ]
            }
        },
        "Reservation.__repr__": {
            "name": "__repr__",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reservation.as_dict": {
            "name": "as_dict",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "include_private": [
                    "bool"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/models/Resource.py": {
        "Resource.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.check_assertions": {
            "name": "check_assertions",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.get_restrictions": {
            "name": "get_restrictions",
            "location": 29,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "include_expired": [
                    "bool"
                ],
                "include_global": [
                    "bool"
                ]
            }
        },
        "Resource.get_active_restrictions": {
            "name": "get_active_restrictions",
            "location": 43,
            "return": [
                "list[]",
                "float",
                "list[typing.Type]"
            ],
            "arguments": {
                "self": [],
                "include_global": [
                    "bool"
                ]
            }
        },
        "Resource.get_by_name": {
            "name": "get_by_name",
            "location": 56,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "resource_name": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "Resource.get_by_hostname": {
            "name": "get_by_hostname",
            "location": 60,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ],
                "hostname": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/models/Restriction.py": {
        "Restriction.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Restriction.check_assertions": {
            "name": "check_assertions",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Restriction.starts_at": {
            "name": "starts_at",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Restriction.ends_at": {
            "name": "ends_at",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Restriction.created_at": {
            "name": "created_at",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Restriction.users": {
            "name": "users",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Restriction.groups": {
            "name": "groups",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Restriction.resources": {
            "name": "resources",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Restriction.schedules": {
            "name": "schedules",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Restriction.apply_to_user": {
            "name": "apply_to_user",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Restriction.remove_from_user": {
            "name": "remove_from_user",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Restriction.apply_to_group": {
            "name": "apply_to_group",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Restriction.remove_from_group": {
            "name": "remove_from_group",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "group": []
            }
        },
        "Restriction.apply_to_resource": {
            "name": "apply_to_resource",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "resource": []
            }
        },
        "Restriction.apply_to_resources": {
            "name": "apply_to_resources",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "resources": []
            }
        },
        "Restriction.remove_from_resource": {
            "name": "remove_from_resource",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "resource": []
            }
        },
        "Restriction.remove_from_resources": {
            "name": "remove_from_resources",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "resources": []
            }
        },
        "Restriction.add_schedule": {
            "name": "add_schedule",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "schedule": []
            }
        },
        "Restriction.remove_schedule": {
            "name": "remove_schedule",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "schedule": []
            }
        },
        "Restriction.get_all_affected_users": {
            "name": "get_all_affected_users",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Restriction.get_global_restrictions": {
            "name": "get_global_restrictions",
            "location": 189,
            "return": [],
            "arguments": {
                "cls": [],
                "include_expired": []
            }
        },
        "Restriction.is_active": {
            "name": "is_active",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Restriction.is_expired": {
            "name": "is_expired",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Restriction.as_dict": {
            "name": "as_dict",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "include_groups": [],
                "include_users": [],
                "include_resources": [],
                "include_private": []
            }
        }
    },
    "TensorHive-master/tensorhive/models/RestrictionAssignee.py": {
        "RestrictionAssignee._restrictions": {
            "name": "_restrictions",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictionAssignee.get_restrictions": {
            "name": "get_restrictions",
            "location": 15,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "include_expired": [
                    "bool"
                ]
            }
        },
        "RestrictionAssignee.get_active_restrictions": {
            "name": "get_active_restrictions",
            "location": 26,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/models/RestrictionSchedule.py": {
        "RestrictionSchedule.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schedule_days": [
                    "float",
                    "str",
                    "int",
                    "list[str]"
                ],
                "hour_start": [
                    "int",
                    "typing.Sequence[str]",
                    "list[datetime.date]",
                    "list[]",
                    "dict[, ]"
                ],
                "hour_end": [
                    "float",
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "RestrictionSchedule.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictionSchedule.check_assertions": {
            "name": "check_assertions",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictionSchedule.schedule_days": {
            "name": "schedule_days",
            "location": 68,
            "return": [
                "typing.Pattern",
                "str"
            ],
            "arguments": {
                "self": [],
                "days": []
            }
        },
        "RestrictionSchedule.restrictions": {
            "name": "restrictions",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RestrictionSchedule.is_active": {
            "name": "is_active",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictionSchedule.is_valid_schedule_expression": {
            "name": "is_valid_schedule_expression",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "schedule_expression": []
            }
        },
        "RestrictionSchedule.as_dict": {
            "name": "as_dict",
            "location": 86,
            "return": [
                "str",
                "int",
                "dict[, ]",
                "tuple[typing.Optional[typing.Literal]]"
            ],
            "arguments": {
                "self": [],
                "include_private": [
                    "bool"
                ]
            }
        },
        "RestrictionSchedule.parse_schedule_string": {
            "name": "parse_schedule_string",
            "location": 94,
            "return": [
                "list[Weekday]"
            ],
            "arguments": {
                "schedule": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RestrictionSchedule.stringify_schedule_list": {
            "name": "stringify_schedule_list",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "schedule": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[int]"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/models/RevokedToken.py": {
        "RevokedToken.check_assertions": {
            "name": "check_assertions",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RevokedToken.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RevokedToken.is_jti_blacklisted": {
            "name": "is_jti_blacklisted",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None"
                ],
                "jti": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/models/Role.py": {
        "Role.check_assertions": {
            "name": "check_assertions",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Role.find_by_name": {
            "name": "find_by_name",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Sequence[int]",
                    "None"
                ],
                "name": [
                    "str",
                    "typing.Sequence[int]",
                    "None"
                ]
            }
        },
        "Role.find_by_user_id": {
            "name": "find_by_user_id",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "list[int]"
                ],
                "user_id": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "Role.delete_all": {
            "name": "delete_all",
            "location": 29,
            "return": [
                "dict[typing.Text, str]",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Role.as_dict": {
            "name": "as_dict",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "include_private": [
                    "bool"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/models/Task.py": {
        "Task.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.check_assertions": {
            "name": "check_assertions",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.status": {
            "name": "status",
            "location": 52,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Task.cmd_segments": {
            "name": "cmd_segments",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.number_of_params": {
            "name": "number_of_params",
            "location": 62,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.number_of_env_vars": {
            "name": "number_of_env_vars",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.full_command": {
            "name": "full_command",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.get_cmd_segment_link": {
            "name": "get_cmd_segment_link",
            "location": 100,
            "return": [
                "dict[object, dict[str, typing.Any]]",
                "dict[str, str]",
                "dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "cmd_segment": [
                    "str",
                    "int"
                ]
            }
        },
        "Task.add_cmd_segment": {
            "name": "add_cmd_segment",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd_segment": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Task.remove_cmd_segment": {
            "name": "remove_cmd_segment",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd_segment": [
                    "str",
                    "int"
                ]
            }
        },
        "Task.as_dict": {
            "name": "as_dict",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "include_private": [
                    "None",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "dict[str, typing.Any]",
                    "list[D]"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/models/User.py": {
        "User.check_assertions": {
            "name": "check_assertions",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.roles": {
            "name": "roles",
            "location": 74,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "new_roles": []
            }
        },
        "User.jobs": {
            "name": "jobs",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.number_of_jobs": {
            "name": "number_of_jobs",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.role_names": {
            "name": "role_names",
            "location": 78,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.has_role": {
            "name": "has_role",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "role_name": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "User.groups": {
            "name": "groups",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.password": {
            "name": "password",
            "location": 93,
            "return": [
                "str",
                "typing.IO",
                "dict[str, str]",
                "typing.Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "User.validate_username": {
            "name": "validate_username",
            "location": 99,
            "return": [
                "int",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ],
                "username": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "User.validate_email": {
            "name": "validate_email",
            "location": 105,
            "return": [
                "str",
                "bytes",
                "list[]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "typing.Callable[[], bool]",
                    "bool",
                    "str",
                    "None"
                ],
                "email": [
                    "str",
                    "bytes",
                    "list[]",
                    "int"
                ]
            }
        },
        "User.find_by_username": {
            "name": "find_by_username",
            "location": 111,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "username": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "User.as_dict": {
            "name": "as_dict",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "include_private": [
                    "bool"
                ],
                "include_groups": [
                    "bool"
                ]
            }
        },
        "User.verify_hash": {
            "name": "verify_hash",
            "location": 146,
            "return": [],
            "arguments": {
                "password": [
                    "str",
                    "bytes"
                ],
                "hash": [
                    "str",
                    "bytes"
                ]
            }
        },
        "User.get_restrictions": {
            "name": "get_restrictions",
            "location": 149,
            "return": [
                "list[slice]"
            ],
            "arguments": {
                "self": [],
                "include_expired": [
                    "bool"
                ],
                "include_group": [
                    "bool"
                ]
            }
        },
        "User.get_active_restrictions": {
            "name": "get_active_restrictions",
            "location": 156,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "include_group": [
                    "bool"
                ]
            }
        },
        "User.get_reservations": {
            "name": "get_reservations",
            "location": 163,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "include_cancelled": [
                    "bool"
                ]
            }
        },
        "User.filter_infrastructure_by_user_restrictions": {
            "name": "filter_infrastructure_by_user_restrictions",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "infrastructure": []
            }
        }
    },
    "TensorHive-master/tensorhive/models/__init__.py": {},
    "TensorHive-master/tensorhive/utils/DateUtils.py": {
        "DateUtils.parse_string": {
            "name": "parse_string",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "DateUtils.stringify_datetime": {
            "name": "stringify_datetime",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "DateUtils.stringify_datetime_to_api_format": {
            "name": "stringify_datetime_to_api_format",
            "location": 38,
            "return": [],
            "arguments": {
                "cls": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "DateUtils.try_parse_string": {
            "name": "try_parse_string",
            "location": 47,
            "return": [
                "datetime",
                "None"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "DateUtils.try_stringify_datetime": {
            "name": "try_stringify_datetime",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "value": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "set[str]",
                    "int"
                ]
            }
        }
    },
    "TensorHive-master/tensorhive/utils/Weekday.py": {
        "Weekday.to_str": {
            "name": "to_str",
            "location": 14,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TensorHive-master/tensorhive/utils/__init__.py": {},
    "TensorHive-master/tests/conftest.py": {},
    "TensorHive-master/tests/fixtures/controllers.py": {
        "client": {
            "name": "client",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "TensorHive-master/tests/fixtures/database.py": {
        "tables": {
            "name": "tables",
            "location": 5,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tests/fixtures/models.py": {
        "new_user": {
            "name": "new_user",
            "location": 17,
            "return": [
                "User"
            ],
            "arguments": {}
        },
        "new_user_2": {
            "name": "new_user_2",
            "location": 24,
            "return": [
                "User"
            ],
            "arguments": {}
        },
        "new_admin": {
            "name": "new_admin",
            "location": 31,
            "return": [
                "User"
            ],
            "arguments": {}
        },
        "new_reservation": {
            "name": "new_reservation",
            "location": 38,
            "return": [
                "Reservation"
            ],
            "arguments": {
                "new_user": [],
                "resource1": [
                    "bytes",
                    "set[]"
                ]
            }
        },
        "new_reservation_2": {
            "name": "new_reservation_2",
            "location": 54,
            "return": [
                "Reservation"
            ],
            "arguments": {
                "new_user": [],
                "new_admin": [],
                "resource1": [
                    "int",
                    "typing.Callable[..., None]",
                    "typing.Sequence[str]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "past_reservation": {
            "name": "past_reservation",
            "location": 71,
            "return": [
                "Reservation"
            ],
            "arguments": {
                "new_user": [],
                "resource1": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "active_reservation": {
            "name": "active_reservation",
            "location": 87,
            "return": [
                "Reservation"
            ],
            "arguments": {
                "new_user": [],
                "resource1": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "future_reservation": {
            "name": "future_reservation",
            "location": 103,
            "return": [
                "Reservation"
            ],
            "arguments": {
                "new_user": [],
                "resource1": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "new_group": {
            "name": "new_group",
            "location": 119,
            "return": [
                "Group"
            ],
            "arguments": {}
        },
        "new_group_with_member": {
            "name": "new_group_with_member",
            "location": 124,
            "return": [
                "Group"
            ],
            "arguments": {
                "new_user": [
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "resource1": {
            "name": "resource1",
            "location": 132,
            "return": [
                "Resource"
            ],
            "arguments": {}
        },
        "resource2": {
            "name": "resource2",
            "location": 140,
            "return": [
                "Resource"
            ],
            "arguments": {}
        },
        "restriction": {
            "name": "restriction",
            "location": 147,
            "return": [
                "Restriction"
            ],
            "arguments": {}
        },
        "permissive_restriction": {
            "name": "permissive_restriction",
            "location": 156,
            "return": [
                "Restriction"
            ],
            "arguments": {
                "new_user": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "None"
                ]
            }
        },
        "active_schedule": {
            "name": "active_schedule",
            "location": 166,
            "return": [
                "RestrictionSchedule"
            ],
            "arguments": {}
        },
        "inactive_schedule": {
            "name": "inactive_schedule",
            "location": 176,
            "return": [
                "RestrictionSchedule"
            ],
            "arguments": {}
        },
        "new_job": {
            "name": "new_job",
            "location": 187,
            "return": [
                "Job"
            ],
            "arguments": {
                "new_user": []
            }
        },
        "new_running_job": {
            "name": "new_running_job",
            "location": 198,
            "return": [
                "Job"
            ],
            "arguments": {
                "new_user": []
            }
        },
        "new_job_with_task": {
            "name": "new_job_with_task",
            "location": 209,
            "return": [
                "Job"
            ],
            "arguments": {
                "new_user": [],
                "new_task": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "new_admin_job": {
            "name": "new_admin_job",
            "location": 221,
            "return": [
                "Job"
            ],
            "arguments": {
                "new_user": [],
                "new_admin": [],
                "new_task": [
                    "str",
                    "tuple[typing.Union[str,str,str]]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "new_task": {
            "name": "new_task",
            "location": 234,
            "return": [
                "Task"
            ],
            "arguments": {}
        },
        "new_task_2": {
            "name": "new_task_2",
            "location": 248,
            "return": [
                "Task"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tests/functional/controllers/auth_patcher.py": {
        "get_patches": {
            "name": "get_patches",
            "location": 18,
            "return": [
                "list[]"
            ],
            "arguments": {
                "superuser": [
                    "bool"
                ]
            }
        },
        "get_patches.always_unprivileged": {
            "name": "always_unprivileged",
            "location": 19,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "get_patches.always_unprivileged.wrapper": {
            "name": "wrapper",
            "location": 21,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tests/functional/controllers/test_group_controller.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_create_group_unprivileged": {
            "name": "test_create_group_unprivileged",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "test_update_group_unprivileged": {
            "name": "test_update_group_unprivileged",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool"
                ],
                "client": [],
                "new_group": []
            }
        },
        "test_delete_group_unprivileged": {
            "name": "test_delete_group_unprivileged",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "list[str]"
                ],
                "new_group": []
            }
        },
        "test_add_user_to_a_group_unprivileged": {
            "name": "test_add_user_to_a_group_unprivileged",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool"
                ],
                "client": [
                    "str",
                    "None"
                ],
                "new_group": [],
                "new_user": []
            }
        },
        "test_remove_user_from_a_group_unprivileged": {
            "name": "test_remove_user_from_a_group_unprivileged",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "str"
                ],
                "new_group_with_member": []
            }
        },
        "test_set_group_as_a_default_unprivileged": {
            "name": "test_set_group_as_a_default_unprivileged",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "None"
                ],
                "client": [
                    "list[str]",
                    "dict[str, str]"
                ],
                "new_group": []
            }
        },
        "test_mark_default_group_as_non_default_unprivileged": {
            "name": "test_mark_default_group_as_non_default_unprivileged",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "None"
                ],
                "client": [
                    "dict[str, str]",
                    "list[str]"
                ],
                "new_group": []
            }
        },
        "test_get_list_of_groups": {
            "name": "test_get_list_of_groups",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": []
            }
        },
        "test_get_list_of_groups_one_group_returned": {
            "name": "test_get_list_of_groups_one_group_returned",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str"
                ],
                "client": [
                    "str"
                ],
                "new_group": []
            }
        },
        "test_get_group_by_id": {
            "name": "test_get_group_by_id",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "dict[str, str]"
                ],
                "new_group": []
            }
        },
        "test_get_group_by_id_that_doesnt_exist": {
            "name": "test_get_group_by_id_that_doesnt_exist",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str"
                ]
            }
        },
        "test_get_default_groups": {
            "name": "test_get_default_groups",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str"
                ],
                "client": [
                    "str",
                    "dict[, ]"
                ],
                "new_group": []
            }
        },
        "test_get_default_groups_when_no_default_group_exists": {
            "name": "test_get_default_groups_when_no_default_group_exists",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [],
                "new_group": []
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_group_controller_superuser.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_create_group": {
            "name": "test_create_group",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "test_update_group": {
            "name": "test_update_group",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool"
                ],
                "client": [],
                "new_group": []
            }
        },
        "test_update_group_that_doesnt_exist": {
            "name": "test_update_group_that_doesnt_exist",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [
                    "dict[str, str]"
                ]
            }
        },
        "test_delete_group": {
            "name": "test_delete_group",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [],
                "new_group": []
            }
        },
        "test_delete_group_that_doesnt_exist": {
            "name": "test_delete_group_that_doesnt_exist",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "str"
                ]
            }
        },
        "test_add_user_to_a_group": {
            "name": "test_add_user_to_a_group",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool"
                ],
                "client": [
                    "str",
                    "None"
                ],
                "new_group": [],
                "new_user": []
            }
        },
        "test_remove_user_from_a_group": {
            "name": "test_remove_user_from_a_group",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "str"
                ],
                "new_group_with_member": []
            }
        },
        "test_add_nonexistent_user_to_a_group": {
            "name": "test_add_nonexistent_user_to_a_group",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "str"
                ],
                "new_group": []
            }
        },
        "test_add_user_to_nonexistent_group": {
            "name": "test_add_user_to_nonexistent_group",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str"
                ],
                "client": [
                    "str"
                ],
                "new_user": []
            }
        },
        "test_remove_nonexistent_user_from_a_group": {
            "name": "test_remove_nonexistent_user_from_a_group",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "str"
                ],
                "new_group": []
            }
        },
        "test_remove_user_from_a_nonexistent_group": {
            "name": "test_remove_user_from_a_nonexistent_group",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool"
                ],
                "client": [
                    "str"
                ],
                "new_user": []
            }
        },
        "test_set_group_as_a_default": {
            "name": "test_set_group_as_a_default",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "None"
                ],
                "client": [
                    "list[str]",
                    "dict[str, str]"
                ],
                "new_group": []
            }
        },
        "test_mark_default_group_as_non_default": {
            "name": "test_mark_default_group_as_non_default",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "None"
                ],
                "client": [
                    "dict[str, str]",
                    "list[str]"
                ],
                "new_group": []
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_job_controller.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_get_all_jobs": {
            "name": "test_get_all_jobs",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "None",
                    "list[list[str]]"
                ],
                "client": [
                    "str",
                    "list[str]"
                ],
                "new_job": [
                    "list[typing.Callable[, ]]",
                    "int",
                    "str"
                ],
                "new_admin_job": [
                    "None",
                    "list[list[str]]"
                ]
            }
        },
        "test_create_job": {
            "name": "test_create_job",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool"
                ],
                "client": [
                    "str"
                ],
                "new_user": []
            }
        },
        "test_create_job_without_dates": {
            "name": "test_create_job_without_dates",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool"
                ],
                "client": [
                    "str"
                ],
                "new_user": []
            }
        },
        "test_create_job_in_the_past": {
            "name": "test_create_job_in_the_past",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str",
                    "dict[, ]"
                ],
                "new_user": []
            }
        },
        "test_create_job_that_stops_before_it_starts": {
            "name": "test_create_job_that_stops_before_it_starts",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [],
                "new_user": []
            }
        },
        "test_update_job": {
            "name": "test_update_job",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool"
                ],
                "client": [
                    "dict[str, str]",
                    "list[str]"
                ],
                "new_job": []
            }
        },
        "test_update_job_without_dates": {
            "name": "test_update_job_without_dates",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]"
                ],
                "client": [
                    "dict[str, str]",
                    "list[str]"
                ],
                "new_job": []
            }
        },
        "test_update_running_job": {
            "name": "test_update_running_job",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "None"
                ],
                "client": [
                    "dict[str, str]",
                    "list[str]"
                ],
                "new_job": []
            }
        },
        "test_update_not_owned_job": {
            "name": "test_update_not_owned_job",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool"
                ],
                "client": [
                    "dict[str, str]"
                ],
                "new_admin_job": []
            }
        },
        "test_update_job_to_start_in_the_past": {
            "name": "test_update_job_to_start_in_the_past",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [
                    "dict[str, str]",
                    "list[str]"
                ],
                "new_job": []
            }
        },
        "test_update_job_to_stop_before_start": {
            "name": "test_update_job_to_stop_before_start",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [
                    "dict[str, str]"
                ],
                "new_job": []
            }
        },
        "test_delete_job": {
            "name": "test_delete_job",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [],
                "new_job_with_task": []
            }
        },
        "test_delete_not_owned_job": {
            "name": "test_delete_not_owned_job",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "str",
                    "dict[str, str]",
                    "list[str]"
                ],
                "new_admin_job": [
                    "str",
                    "dict[str, str]",
                    "list[str]"
                ]
            }
        },
        "test_get_tasks_from_job": {
            "name": "test_get_tasks_from_job",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[str,List, None]",
                    "str",
                    "bool",
                    "set[]"
                ],
                "client": [],
                "new_job_with_task": []
            }
        },
        "test_get_tasks_from_not_owned_job": {
            "name": "test_get_tasks_from_not_owned_job",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str"
                ],
                "client": [
                    "str",
                    "list[str]"
                ],
                "new_admin_job": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_add_task_to_job": {
            "name": "test_add_task_to_job",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "bool"
                ],
                "new_job": [
                    "list[str]",
                    "bool"
                ],
                "new_task": [
                    "list[str]",
                    "bool"
                ]
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_job_controller_superuser.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_get_all_jobs": {
            "name": "test_get_all_jobs",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "None",
                    "list[list[str]]"
                ],
                "client": [
                    "str",
                    "dict[, ]"
                ],
                "new_job": [
                    "None",
                    "list[list[str]]"
                ],
                "new_admin_job": [
                    "None",
                    "list[list[str]]"
                ]
            }
        },
        "test_update_not_owned_job": {
            "name": "test_update_not_owned_job",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool"
                ],
                "client": [
                    "dict[str, str]"
                ],
                "new_admin_job": []
            }
        },
        "test_delete_not_owned_job": {
            "name": "test_delete_not_owned_job",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "list[str]"
                ],
                "new_admin_job": [
                    "list[str]"
                ]
            }
        },
        "test_get_tasks_from_not_owned_job": {
            "name": "test_get_tasks_from_not_owned_job",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str"
                ],
                "client": [
                    "str",
                    "list[str]"
                ],
                "new_admin_job": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_reservation_controller.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_create_reservation_unprivileged": {
            "name": "test_create_reservation_unprivileged",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool"
                ],
                "client": [
                    "str"
                ],
                "new_user": []
            }
        },
        "test_create_reservation": {
            "name": "test_create_reservation",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool"
                ],
                "client": [
                    "str"
                ],
                "new_user": [],
                "permissive_restriction": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_create_reservation_with_an_indefinite_restriction": {
            "name": "test_create_reservation_with_an_indefinite_restriction",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool"
                ],
                "client": [
                    "str"
                ],
                "new_user": [],
                "restriction": []
            }
        },
        "test_create_reservation_starting_in_the_past": {
            "name": "test_create_reservation_starting_in_the_past",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]"
                ],
                "new_user": [],
                "permissive_restriction": [
                    "str"
                ]
            }
        },
        "test_create_reservation_with_permissions_just_for_a_part_of_it": {
            "name": "test_create_reservation_with_permissions_just_for_a_part_of_it",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "str",
                    "None"
                ],
                "client": [
                    "str"
                ],
                "new_user": [],
                "restriction": []
            }
        },
        "test_create_reservation_outside_of_schedule": {
            "name": "test_create_reservation_outside_of_schedule",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str"
                ],
                "client": [],
                "new_user": [],
                "restriction": []
            }
        },
        "test_create_reservation_that_is_covered_by_two_separate_restrictions": {
            "name": "test_create_reservation_that_is_covered_by_two_separate_restrictions",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str",
                    "dict[, ]"
                ],
                "new_user": []
            }
        },
        "test_update_reservation": {
            "name": "test_update_reservation",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [],
                "future_reservation": [],
                "permissive_restriction": []
            }
        },
        "test_update_reservation_unprivileged": {
            "name": "test_update_reservation_unprivileged",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool"
                ],
                "client": [],
                "new_reservation_2": [],
                "permissive_restriction": []
            }
        },
        "test_update_future_reservation_start": {
            "name": "test_update_future_reservation_start",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [],
                "future_reservation": [],
                "permissive_restriction": []
            }
        },
        "test_update_active_reservation_start_forbidden": {
            "name": "test_update_active_reservation_start_forbidden",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [],
                "active_reservation": [],
                "permissive_restriction": []
            }
        },
        "test_update_past_reservation_forbidden": {
            "name": "test_update_past_reservation_forbidden",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [],
                "past_reservation": [],
                "permissive_restriction": []
            }
        },
        "test_delete_active_reservation_forbidden": {
            "name": "test_delete_active_reservation_forbidden",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "list[str]"
                ],
                "active_reservation": [],
                "permissive_restriction": []
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_reservation_controller_superuser.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_after_updating_restriction_reservations_that_are_no_longer_valid_should_get_cancelled": {
            "name": "test_after_updating_restriction_reservations_that_are_no_longer_valid_should_get_cancelled",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str",
                    "typing.Mapping"
                ],
                "new_user": [],
                "restriction": []
            }
        },
        "test_update_past_reservation": {
            "name": "test_update_past_reservation",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [],
                "past_reservation": [],
                "permissive_restriction": []
            }
        },
        "test_create_reservation_starting_in_the_past": {
            "name": "test_create_reservation_starting_in_the_past",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]"
                ],
                "new_user": [],
                "permissive_restriction": [
                    "str"
                ]
            }
        },
        "test_delete_active_reservation": {
            "name": "test_delete_active_reservation",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "list[str]"
                ],
                "active_reservation": [],
                "permissive_restriction": []
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_restriction_controller.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_get_all_restrictions_empty_response": {
            "name": "test_get_all_restrictions_empty_response",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": []
            }
        },
        "test_get_all_restrictions_with_data": {
            "name": "test_get_all_restrictions_with_data",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": []
            }
        },
        "test_get_user_restrictions": {
            "name": "test_get_user_restrictions",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "None",
                    "bool"
                ],
                "client": [
                    "list[str]"
                ],
                "new_user": [],
                "restriction": []
            }
        },
        "test_get_users_group_restrictions": {
            "name": "test_get_users_group_restrictions",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[str,List, None]",
                    "str"
                ],
                "client": [
                    "str",
                    "list[str]"
                ],
                "new_group_with_member": [],
                "restriction": []
            }
        },
        "test_get_group_restrictions": {
            "name": "test_get_group_restrictions",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "list[str]",
                    "bool"
                ],
                "new_group": [],
                "restriction": []
            }
        },
        "test_get_resource_restrictions": {
            "name": "test_get_resource_restrictions",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str",
                    "list[str]"
                ],
                "resource1": [],
                "restriction": []
            }
        },
        "test_get_schedule_restrictions": {
            "name": "test_get_schedule_restrictions",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str"
                ],
                "active_schedule": [],
                "restriction": []
            }
        },
        "test_create_restriction_unprivileged": {
            "name": "test_create_restriction_unprivileged",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "test_update_restriction_unprivileged": {
            "name": "test_update_restriction_unprivileged",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [],
                "restriction": []
            }
        },
        "test_apply_restriction_to_group_unprivileged": {
            "name": "test_apply_restriction_to_group_unprivileged",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "None"
                ],
                "client": [
                    "str"
                ],
                "restriction": [
                    "str"
                ],
                "new_group": []
            }
        },
        "test_remove_resources_with_given_hostname_from_restriction": {
            "name": "test_remove_resources_with_given_hostname_from_restriction",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "str"
                ],
                "restriction": [],
                "resource1": [],
                "resource2": []
            }
        },
        "test_delete_restriction_unprivileged": {
            "name": "test_delete_restriction_unprivileged",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool"
                ],
                "client": [
                    "str"
                ],
                "restriction": [],
                "new_user": []
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_restriction_controller_superuser.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_create_restriction": {
            "name": "test_create_restriction",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "test_create_indefinte_retriction": {
            "name": "test_create_indefinte_retriction",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "test_create_restriction_missing_data": {
            "name": "test_create_restriction_missing_data",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "test_update_restriction": {
            "name": "test_update_restriction",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [],
                "restriction": []
            }
        },
        "test_update_restriction_incorrect_data": {
            "name": "test_update_restriction_incorrect_data",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [],
                "restriction": [
                    "float"
                ]
            }
        },
        "test_update_nonexistent_restriction": {
            "name": "test_update_nonexistent_restriction",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [
                    "dict[str, str]"
                ]
            }
        },
        "test_apply_restriction_to_group": {
            "name": "test_apply_restriction_to_group",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool",
                    "None"
                ],
                "client": [
                    "str"
                ],
                "restriction": [
                    "str"
                ],
                "new_group": []
            }
        },
        "test_apply_restriction_to_nonexistent_group": {
            "name": "test_apply_restriction_to_nonexistent_group",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str",
                    "dict[str, str]"
                ],
                "restriction": []
            }
        },
        "test_apply_nonexistent_restriction_to_group": {
            "name": "test_apply_nonexistent_restriction_to_group",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "dict[str, str]",
                    "list[str]",
                    "str"
                ],
                "new_group": []
            }
        },
        "test_apply_restriction_to_resource": {
            "name": "test_apply_restriction_to_resource",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "dict[str, str]"
                ],
                "restriction": [],
                "resource1": []
            }
        },
        "test_apply_restriction_to_resources_by_hostname": {
            "name": "test_apply_restriction_to_resources_by_hostname",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "dict[str, str]"
                ],
                "restriction": [],
                "resource1": [],
                "resource2": []
            }
        },
        "test_apply_restriction_to_resources_by_nonexistent_hostname": {
            "name": "test_apply_restriction_to_resources_by_nonexistent_hostname",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "dict[str, str]"
                ],
                "restriction": [],
                "resource1": [],
                "resource2": []
            }
        },
        "test_apply_nonexistent_restriction_to_resources_by_hostname": {
            "name": "test_apply_nonexistent_restriction_to_resources_by_hostname",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]"
                ],
                "client": [],
                "resource1": [],
                "resource2": []
            }
        },
        "test_remove_resources_with_given_hostname_from_restriction": {
            "name": "test_remove_resources_with_given_hostname_from_restriction",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "str"
                ],
                "restriction": [],
                "resource1": [],
                "resource2": []
            }
        },
        "test_remove_resources_with_nonexistent_hostname_from_restriction": {
            "name": "test_remove_resources_with_nonexistent_hostname_from_restriction",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "dict[str, str]"
                ],
                "restriction": [],
                "resource1": [],
                "resource2": []
            }
        },
        "test_remove_resources_with_given_hostname_from_nonexistent_restriction": {
            "name": "test_remove_resources_with_given_hostname_from_nonexistent_restriction",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "str"
                ],
                "resource1": [],
                "resource2": []
            }
        },
        "test_apply_restriction_to_nonexistent_resource": {
            "name": "test_apply_restriction_to_nonexistent_resource",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str",
                    "dict[str, str]"
                ],
                "restriction": []
            }
        },
        "test_apply_nonexistent_restriction_to_resource": {
            "name": "test_apply_nonexistent_restriction_to_resource",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]"
                ],
                "client": [
                    "str",
                    "dict[str, str]"
                ],
                "resource1": []
            }
        },
        "test_apply_restriction_to_schedule": {
            "name": "test_apply_restriction_to_schedule",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str",
                    "dict[str, str]"
                ],
                "restriction": [],
                "active_schedule": []
            }
        },
        "test_apply_restriction_to_nonexistent_schedule": {
            "name": "test_apply_restriction_to_nonexistent_schedule",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str",
                    "dict[str, str]"
                ],
                "restriction": []
            }
        },
        "test_apply_nonexistent_restriction_to_schedule": {
            "name": "test_apply_nonexistent_restriction_to_schedule",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]"
                ],
                "client": [
                    "dict[str, str]",
                    "str"
                ],
                "active_schedule": []
            }
        },
        "test_apply_restriction_to_user": {
            "name": "test_apply_restriction_to_user",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str"
                ],
                "client": [
                    "str"
                ],
                "restriction": [],
                "new_user": []
            }
        },
        "test_apply_restriction_to_nonexistent_user": {
            "name": "test_apply_restriction_to_nonexistent_user",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [
                    "dict[str, str]"
                ],
                "restriction": []
            }
        },
        "test_apply_nonexistent_restriction_to_user": {
            "name": "test_apply_nonexistent_restriction_to_user",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool"
                ],
                "client": [
                    "str"
                ],
                "new_user": []
            }
        },
        "test_delete_restriction": {
            "name": "test_delete_restriction",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool"
                ],
                "client": [
                    "str"
                ],
                "restriction": [],
                "new_user": []
            }
        },
        "test_delete_nonexistent_restriction": {
            "name": "test_delete_nonexistent_restriction",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "str"
                ]
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_schedule_controller.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_create_schedule_unprivileged": {
            "name": "test_create_schedule_unprivileged",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "test_get_list_of_schedules": {
            "name": "test_get_list_of_schedules",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [],
                "active_schedule": []
            }
        },
        "test_get_schedule_by_id": {
            "name": "test_get_schedule_by_id",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "list[str]"
                ],
                "active_schedule": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_get_nonexistent_schedule_by_id": {
            "name": "test_get_nonexistent_schedule_by_id",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "str"
                ]
            }
        },
        "test_delete_schedule_unprivileged": {
            "name": "test_delete_schedule_unprivileged",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "list[str]"
                ],
                "active_schedule": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "test_update_schedule_unprivileged": {
            "name": "test_update_schedule_unprivileged",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [],
                "active_schedule": []
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_schedule_controller_superuser.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_create_schedule": {
            "name": "test_create_schedule",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "test_create_schedule_with_missing_start_hour": {
            "name": "test_create_schedule_with_missing_start_hour",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": []
            }
        },
        "test_create_schedule_with_nonexistent_schedule_days": {
            "name": "test_create_schedule_with_nonexistent_schedule_days",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]",
                    "bool"
                ],
                "client": []
            }
        },
        "test_create_schedule_with_no_schedule_days": {
            "name": "test_create_schedule_with_no_schedule_days",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool"
                ],
                "client": []
            }
        },
        "test_delete_schedule": {
            "name": "test_delete_schedule",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "list[str]"
                ],
                "active_schedule": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "test_delete_nonexistent_schedule": {
            "name": "test_delete_nonexistent_schedule",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "client": [
                    "str"
                ]
            }
        },
        "test_update_schedule": {
            "name": "test_update_schedule",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [],
                "active_schedule": []
            }
        },
        "test_update_nonexistent_schedule": {
            "name": "test_update_nonexistent_schedule",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [
                    "dict[str, str]"
                ]
            }
        },
        "test_get_list_of_schedules_superuser": {
            "name": "test_get_list_of_schedules_superuser",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "bool"
                ]
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_task_controller.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_create_task": {
            "name": "test_create_task",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "bool",
                    "str"
                ],
                "client": [
                    "list[str]",
                    "dict[str, str]"
                ],
                "new_job": [],
                "new_user": []
            }
        },
        "test_delete_task": {
            "name": "test_delete_task",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "None",
                    "typing.Callable[str,List, None]"
                ],
                "client": [
                    "str",
                    "list[str]"
                ],
                "new_job": [],
                "new_task": [
                    "str"
                ]
            }
        },
        "test_delete_not_owned_task": {
            "name": "test_delete_not_owned_task",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str"
                ],
                "new_admin_job": []
            }
        },
        "test_update_task": {
            "name": "test_update_task",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "None",
                    "typing.Callable[str,List, None]"
                ],
                "client": [],
                "new_job": [],
                "new_task": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_update_not_owned_task": {
            "name": "test_update_not_owned_task",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str"
                ],
                "client": [
                    "dict[str, str]"
                ],
                "new_admin_job": []
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_task_controller_superuser.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_delete_not_owned_task": {
            "name": "test_delete_not_owned_task",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [
                    "str"
                ],
                "new_admin_job": []
            }
        },
        "test_update_not_owned_task": {
            "name": "test_update_not_owned_task",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str"
                ],
                "client": [
                    "dict[str, str]"
                ],
                "new_admin_job": []
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_user_controller.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_user_signup_unprivileged": {
            "name": "test_user_signup_unprivileged",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": []
            }
        }
    },
    "TensorHive-master/tests/functional/controllers/test_user_controller_superuser.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "test_on_signup_user_gets_added_to_a_default_group": {
            "name": "test_on_signup_user_gets_added_to_a_default_group",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [],
                "new_group": []
            }
        },
        "test_on_signup_user_gets_added_to_all_default_groups_if_there_are_more_than_one": {
            "name": "test_on_signup_user_gets_added_to_all_default_groups_if_there_are_more_than_one",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "client": [],
                "new_group": []
            }
        },
        "test_on_signup_user_does_not_belong_to_any_group_if_no_default_group_exists": {
            "name": "test_on_signup_user_does_not_belong_to_any_group_if_no_default_group_exists",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "dict[, ]"
                ],
                "client": [
                    "dict[, ]",
                    "None"
                ],
                "new_group": []
            }
        }
    },
    "TensorHive-master/tests/unit/test_decorators.py": {
        "test_memoize_for_correct_func_call_count": {
            "name": "test_memoize_for_correct_func_call_count",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memoize_for_correct_func_call_count.add": {
            "name": "add",
            "location": 8,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_memoize_for_correct_func_call_count.foo": {
            "name": "foo",
            "location": 14,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        }
    },
    "TensorHive-master/tests/unit/test_mailbot.py": {
        "violation_data": {
            "name": "violation_data",
            "location": 13,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "test_mailer_when_try_to_send_before_connect": {
            "name": "test_mailer_when_try_to_send_before_connect",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mailer_sending_with_invalid_message": {
            "name": "test_mailer_sending_with_invalid_message",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_message_properly_processes_init_arguments": {
            "name": "test_message_properly_processes_init_arguments",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sendmail_is_reached_with_mock_smtp_server": {
            "name": "test_sendmail_is_reached_with_mock_smtp_server",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tests/unit/test_ssh.py": {
        "test_config_builder_with_good_arguments": {
            "name": "test_config_builder_with_good_arguments",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_builder_failure_with_invalid_arguments": {
            "name": "test_config_builder_failure_with_invalid_arguments",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "user": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "key_path": {
            "name": "key_path",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "saved_key": {
            "name": "saved_key",
            "location": 41,
            "return": [],
            "arguments": {
                "key_path": [
                    "str"
                ]
            }
        },
        "test_generate_cert_generated_cert_is_loadable": {
            "name": "test_generate_cert_generated_cert_is_loadable",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "saved_key": [
                    "str",
                    "bool"
                ],
                "key_path": [
                    "str",
                    "int"
                ]
            }
        },
        "test_generate_cert_generating_twice_throws_exception": {
            "name": "test_generate_cert_generating_twice_throws_exception",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "saved_key": [
                    "str"
                ],
                "key_path": [
                    "str",
                    "typing.Callable[str, None]"
                ]
            }
        },
        "test_generate_cert_generated_cert_has_proper_permissions": {
            "name": "test_generate_cert_generated_cert_has_proper_permissions",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "saved_key": [
                    "str"
                ],
                "key_path": [
                    "str"
                ]
            }
        },
        "test_generate_cert_with_replace_generates_different_key": {
            "name": "test_generate_cert_with_replace_generates_different_key",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "saved_key": [
                    "str",
                    "bool"
                ],
                "key_path": [
                    "str",
                    "tuple[typing.Union[str,str,str]]",
                    "int"
                ]
            }
        }
    },
    "TensorHive-master/tests/unit/models/test_account_creator.py": {
        "test_prompts": {
            "name": "test_prompts",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool",
                    "None"
                ],
                "test_name": [
                    "str",
                    "bool",
                    "None"
                ],
                "test_input": [
                    "str"
                ]
            }
        },
        "test_prompts.click_wrapper": {
            "name": "click_wrapper",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "TensorHive-master/tests/unit/models/test_group_model.py": {
        "test_group_creation": {
            "name": "test_group_creation",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "typing.Callable[..., None]",
                    "int"
                ]
            }
        },
        "test_adding_user_to_a_group": {
            "name": "test_adding_user_to_a_group",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "str"
                ],
                "new_user": [],
                "new_group": []
            }
        },
        "test_removing_user_from_a_group": {
            "name": "test_removing_user_from_a_group",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]",
                    "str"
                ],
                "new_group_with_member": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_removing_user_from_a_group_that_he_doesnt_belong_to_fails": {
            "name": "test_removing_user_from_a_group_that_he_doesnt_belong_to_fails",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "str"
                ],
                "new_user": [],
                "new_group": []
            }
        },
        "test_adding_user_to_a_group_that_he_is_already_in_fails": {
            "name": "test_adding_user_to_a_group_that_he_is_already_in_fails",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "str",
                    "list[typing.Any]",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "new_group_with_member": [
                    "None"
                ]
            }
        },
        "test_marking_group_as_a_default": {
            "name": "test_marking_group_as_a_default",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "int",
                    "str",
                    "list[typing.Any]",
                    "None",
                    "list[str]"
                ],
                "new_group": [
                    "typing.Any",
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "str"
                ]
            }
        },
        "test_get_default_group": {
            "name": "test_get_default_group",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[..., None]"
                ],
                "new_group": []
            }
        },
        "test_get_default_without_default_group": {
            "name": "test_get_default_without_default_group",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "bool",
                    "str"
                ],
                "new_group": []
            }
        },
        "test_more_than_one_default_group": {
            "name": "test_more_than_one_default_group",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "str",
                    "int"
                ],
                "new_group": []
            }
        }
    },
    "TensorHive-master/tests/unit/models/test_job_model.py": {
        "test_job_creation": {
            "name": "test_job_creation",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "typing.Callable[..., None]",
                    "int"
                ]
            }
        },
        "test_adding_task_to_a_job": {
            "name": "test_adding_task_to_a_job",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str"
                ],
                "new_task": [],
                "new_job": []
            }
        },
        "test_removing_task_from_a_job": {
            "name": "test_removing_task_from_a_job",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "bool",
                    "typing.Callable[..., None]",
                    "str"
                ],
                "new_job_with_task": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "test_removing_task_from_a_job_that_he_doesnt_belong_to_fails": {
            "name": "test_removing_task_from_a_job_that_he_doesnt_belong_to_fails",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[list[int]]",
                    "bool",
                    "str"
                ],
                "new_task": [
                    "bool"
                ],
                "new_job": []
            }
        },
        "test_adding_task_to_a_job_that_he_is_already_in_fails": {
            "name": "test_adding_task_to_a_job_that_he_is_already_in_fails",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "str"
                ],
                "new_job_with_task": [
                    "dict[, ]"
                ]
            }
        },
        "test_synchronizing_job": {
            "name": "test_synchronizing_job",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "str"
                ],
                "new_job_with_task": [],
                "new_task_2": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "TensorHive-master/tests/unit/models/test_reservation_model.py": {
        "test_reservation_creation": {
            "name": "test_reservation_creation",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "bool"
                ],
                "new_reservation": []
            }
        },
        "test_interfering_reservation_cannot_be_saved": {
            "name": "test_interfering_reservation_cannot_be_saved",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[]",
                    "bool",
                    "typing.Callable[[], None]",
                    "str"
                ],
                "new_reservation": [],
                "new_reservation_2": []
            }
        },
        "test_cancelled_reservation_does_not_cause_interference_with_others": {
            "name": "test_cancelled_reservation_does_not_cause_interference_with_others",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "list[]",
                    "bool",
                    "str"
                ],
                "new_reservation": [],
                "new_reservation_2": []
            }
        },
        "test_string_time_format_conversion": {
            "name": "test_string_time_format_conversion",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[]",
                    "None"
                ],
                "new_reservation": [],
                "faker": []
            }
        },
        "test_invalid_reservation_time_range": {
            "name": "test_invalid_reservation_time_range",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "str",
                    "bool",
                    "list[typing.Any]",
                    "None",
                    "list[str]"
                ],
                "new_reservation": [],
                "faker": []
            }
        },
        "test_current_events_will_only_return_non_cancelled_reservations": {
            "name": "test_current_events_will_only_return_non_cancelled_reservations",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "list[]",
                    "bool",
                    "str"
                ],
                "new_reservation": [],
                "new_reservation_2": []
            }
        },
        "test_string_time_format_conversion.cast_dt_to_str": {
            "name": "cast_dt_to_str",
            "location": 73,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "format": []
            }
        }
    },
    "TensorHive-master/tests/unit/models/test_resource_model.py": {
        "test_resource_creation": {
            "name": "test_resource_creation",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "typing.Callable[..., None]",
                    "int"
                ]
            }
        }
    },
    "TensorHive-master/tests/unit/models/test_restrictionschedule_model.py": {
        "test_schedule_creation": {
            "name": "test_schedule_creation",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "typing.Callable[..., None]",
                    "int"
                ]
            }
        },
        "test_cannot_create_schedule_with_wrong_schedule_expression": {
            "name": "test_cannot_create_schedule_with_wrong_schedule_expression",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "list[str]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_add_schedule_to_restriction": {
            "name": "test_add_schedule_to_restriction",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "typing.Callable[typing.Any, bool]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "restriction": [],
                "active_schedule": [
                    "str",
                    "None"
                ]
            }
        },
        "test_schedule_is_active_method_returns_valid_status": {
            "name": "test_schedule_is_active_method_returns_valid_status",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "dict[str, typing.Any]",
                    "None",
                    "int",
                    "str",
                    "list[dict[str, int]]"
                ],
                "restriction": [
                    "dict[str, typing.Any]",
                    "None",
                    "int",
                    "str",
                    "list[dict[str, int]]"
                ]
            }
        },
        "test_schedule_with_schedule_days_as_list_of_enums_gets_saved_successfully": {
            "name": "test_schedule_with_schedule_days_as_list_of_enums_gets_saved_successfully",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "TensorHive-master/tests/unit/models/test_restriction_model.py": {
        "test_restriction_creation": {
            "name": "test_restriction_creation",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "typing.Callable[..., None]",
                    "int"
                ]
            }
        },
        "test_indefinite_restriction_creation": {
            "name": "test_indefinite_restriction_creation",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "typing.Callable[..., None]",
                    "int"
                ]
            }
        },
        "test_get_global_restrictions_returns_them": {
            "name": "test_get_global_restrictions_returns_them",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str",
                    "typing.Callable[typing.Any, bool]",
                    "None"
                ]
            }
        },
        "test_apply_restriction_to_user": {
            "name": "test_apply_restriction_to_user",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [],
                "restriction": [],
                "new_user": []
            }
        },
        "test_apply_restriction_to_group": {
            "name": "test_apply_restriction_to_group",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool",
                    "None"
                ],
                "restriction": [],
                "new_group": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_group_restrictions_apply_to_its_members": {
            "name": "test_group_restrictions_apply_to_its_members",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "typing.Callable[..., None]",
                    "str",
                    "typing.Iterable[str]"
                ],
                "restriction": [],
                "new_group_with_member": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_it_should_be_impossible_to_create_restriction_with_end_time_happening_before_start_time": {
            "name": "test_it_should_be_impossible_to_create_restriction_with_end_time_happening_before_start_time",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[dict[str, int]]",
                    "str"
                ]
            }
        },
        "test_it_should_be_impossible_to_create_or_edit_restriction_that_already_expired": {
            "name": "test_it_should_be_impossible_to_create_or_edit_restriction_that_already_expired",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[dict[str, int]]",
                    "str"
                ]
            }
        },
        "test_apply_restriction_to_resource": {
            "name": "test_apply_restriction_to_resource",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "int",
                    "str",
                    "typing.Callable[..., None]",
                    "list[dict[str, int]]",
                    "None"
                ],
                "restriction": [],
                "resource1": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "test_global_restriction_applies_to_all_resources": {
            "name": "test_global_restriction_applies_to_all_resources",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "int",
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "restriction": [],
                "resource1": [
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "typing.Sequence[services.seating.models.seaSeat]"
                ],
                "resource2": [
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "typing.Sequence[services.seating.models.seaSeat]"
                ]
            }
        },
        "test_restriction_without_schedules_is_active_only_when_between_start_and_end_dates": {
            "name": "test_restriction_without_schedules_is_active_only_when_between_start_and_end_dates",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str",
                    "typing.Callable[..., None]",
                    "list[]"
                ]
            }
        },
        "test_restriction_with_schedules_is_active_only_when_at_least_one_of_its_schedules_is_active": {
            "name": "test_restriction_with_schedules_is_active_only_when_at_least_one_of_its_schedules_is_active",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str",
                    "typing.Type"
                ],
                "active_schedule": [
                    "str",
                    "None"
                ],
                "inactive_schedule": [
                    "str",
                    "None"
                ]
            }
        },
        "test_restriction_with_dates_passed_as_string_gets_added_successfully": {
            "name": "test_restriction_with_dates_passed_as_string_gets_added_successfully",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "test_when_trying_to_apply_restriction_to_the_same_group_twice_an_exception_is_thrown": {
            "name": "test_when_trying_to_apply_restriction_to_the_same_group_twice_an_exception_is_thrown",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "restriction": [],
                "new_group": []
            }
        },
        "test_when_trying_to_apply_restriction_to_the_same_user_twice_an_exception_is_thrown": {
            "name": "test_when_trying_to_apply_restriction_to_the_same_user_twice_an_exception_is_thrown",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "restriction": [],
                "new_user": []
            }
        },
        "test_when_trying_to_add_an_already_assigned_schedule_to_restriction_an_exception_is_thrown": {
            "name": "test_when_trying_to_add_an_already_assigned_schedule_to_restriction_an_exception_is_thrown",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "restriction": [],
                "inactive_schedule": []
            }
        },
        "test_when_trying_to_add_an_already_assigned_resource_to_restriction_an_exception_is_thrown": {
            "name": "test_when_trying_to_add_an_already_assigned_resource_to_restriction_an_exception_is_thrown",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "restriction": [],
                "resource1": []
            }
        },
        "test_when_trying_to_remove_restriction_from_group_that_wasnt_assigned_to_it_an_exception_is_thrown": {
            "name": "test_when_trying_to_remove_restriction_from_group_that_wasnt_assigned_to_it_an_exception_is_thrown",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ],
                "restriction": [],
                "new_group": []
            }
        },
        "test_when_trying_to_remove_restriction_from_user_that_wasnt_assigned_to_it_an_exception_is_thrown": {
            "name": "test_when_trying_to_remove_restriction_from_user_that_wasnt_assigned_to_it_an_exception_is_thrown",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str"
                ],
                "restriction": [],
                "new_user": []
            }
        },
        "test_when_trying_to_remove_schedule_that_wasnt_assigned_to_restriction_an_exception_is_thrown": {
            "name": "test_when_trying_to_remove_schedule_that_wasnt_assigned_to_restriction_an_exception_is_thrown",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "dict[str, typing.Any]",
                    "None",
                    "str"
                ],
                "restriction": [],
                "inactive_schedule": []
            }
        },
        "test_when_trying_to_remove_restriction_from_resource_that_wasnt_assigned_to_it_an_exception_is_thrown": {
            "name": "test_when_trying_to_remove_restriction_from_resource_that_wasnt_assigned_to_it_an_exception_is_thrown",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "bool",
                    "str"
                ],
                "restriction": [],
                "resource1": []
            }
        },
        "test_get_all_affected_users_will_return_all_users_affected_by_given_restriction": {
            "name": "test_get_all_affected_users_will_return_all_users_affected_by_given_restriction",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ],
                "restriction": [],
                "new_user_2": [],
                "new_group_with_member": []
            }
        }
    },
    "TensorHive-master/tests/unit/models/test_user_model.py": {
        "test_user_creation": {
            "name": "test_user_creation",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "str"
                ],
                "new_user": [],
                "new_admin": []
            }
        },
        "test_exception_on_creating_user_with_invalid_username": {
            "name": "test_exception_on_creating_user_with_invalid_username",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "None",
                    "bool"
                ],
                "test_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "test_username": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "test_exception_on_creating_user_with_no_password": {
            "name": "test_exception_on_creating_user_with_no_password",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Callable[typing.Any, bool]",
                    "bool"
                ]
            }
        },
        "test_exception_on_creating_user_with_not_unique_username": {
            "name": "test_exception_on_creating_user_with_not_unique_username",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "list[dict[str, int]]"
                ]
            }
        },
        "test_get_users_reservations": {
            "name": "test_get_users_reservations",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "str",
                    "dict[, ]"
                ],
                "new_user": [
                    "dict[str, typing.Any]"
                ],
                "new_reservation": []
            }
        },
        "test_get_users_reservations_does_not_include_cancelled_reservations_by_default": {
            "name": "test_get_users_reservations_does_not_include_cancelled_reservations_by_default",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": [
                    "typing.Callable[..., None]",
                    "str"
                ],
                "new_user": [],
                "new_reservation": []
            }
        }
    }
}
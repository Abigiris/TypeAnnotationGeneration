{
    "Transformer-Big-BT-master/Main.py": {
        "usage_test": {
            "name": "usage_test",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "typing.Text"
                ]
            }
        },
        "pre_data": {
            "name": "pre_data",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "corpus": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "data_dir": [],
                "shuffle": [
                    "bool"
                ]
            }
        },
        "train": {
            "name": "train",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "bleu_source": [],
                "bleu_ref": [],
                "num_gpus": [
                    "int"
                ],
                "params_set": [
                    "typing.Text"
                ],
                "data_dir": [],
                "model_dir": [],
                "export_dir": [],
                "batch_size": [
                    "None",
                    "str",
                    "int"
                ],
                "allow_ffn_pad": [
                    "bool"
                ],
                "hooks": [
                    "list[typing.Text]"
                ],
                "stop_threshold": [
                    "float"
                ],
                "vocab_file": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "translate": {
            "name": "translate",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "inter": [
                    "bool"
                ],
                "text": [
                    "None",
                    "str"
                ],
                "inputs_file": [
                    "None",
                    "str"
                ],
                "output_file": [
                    "None",
                    "str"
                ],
                "args": [
                    "typing.Text"
                ]
            }
        },
        "params_num": {
            "name": "params_num",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "ckpt_dir": [
                    "str"
                ]
            }
        }
    },
    "Transformer-Big-BT-master/code/compuate_bleu_test.py": {
        "ComputeBleuTest._create_temp_file": {
            "name": "_create_temp_file",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "ComputeBleuTest.test_bleu_same": {
            "name": "test_bleu_same",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputeBleuTest.test_bleu_same_different_case": {
            "name": "test_bleu_same_different_case",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputeBleuTest.test_bleu_different": {
            "name": "test_bleu_different",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputeBleuTest.test_bleu_tokenize": {
            "name": "test_bleu_tokenize",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Transformer-Big-BT-master/code/compute_bleu.py": {
        "bleu_tokenize": {
            "name": "bleu_tokenize",
            "location": 36,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "list[]"
                ]
            }
        },
        "bleu_wrapper": {
            "name": "bleu_wrapper",
            "location": 48,
            "return": [],
            "arguments": {
                "ref_file": [
                    "str",
                    "bytes",
                    "int",
                    "list[str]"
                ],
                "hyp_file": [
                    "str",
                    "bytes",
                    "int",
                    "list[str]"
                ],
                "case_sensitive": [
                    "bool"
                ]
            }
        },
        "bleu_results": {
            "name": "bleu_results",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "ref_file": [
                    "str",
                    "list[str]"
                ],
                "hyp_file": [
                    "str",
                    "list[str]",
                    "bool",
                    "None"
                ],
                "case_sensitive": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "UnicodeRegex.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnicodeRegex.property_chars": {
            "name": "property_chars",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "float"
                ]
            }
        }
    },
    "Transformer-Big-BT-master/code/controler.py": {
        "Controler.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_steps": [
                    "int",
                    "float"
                ],
                "steps_between_evals": [
                    "int",
                    "float"
                ],
                "train_epoches": [
                    "int",
                    "float"
                ],
                "epoches_between_evals": [
                    "int",
                    "float"
                ],
                "eval_step": [
                    "int",
                    "float"
                ],
                "default_train_epoches": [
                    "int",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "typing.BinaryIO"
                ],
                "max_length": [
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "Controler.single_iteration_train_steps": {
            "name": "single_iteration_train_steps",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Controler.single_iteration_eval_steps": {
            "name": "single_iteration_eval_steps",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Controler.train_increment_str": {
            "name": "train_increment_str",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controler.repeat_dataset": {
            "name": "repeat_dataset",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Controler.show": {
            "name": "show",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Transformer-Big-BT-master/code/metrics.py": {
        "_pad_tensors_to_same_length": {
            "name": "_pad_tensors_to_same_length",
            "location": 16,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "bool"
                ]
            }
        },
        "padded_cross_entropy_loss": {
            "name": "padded_cross_entropy_loss",
            "location": 32,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "logits": [
                    "bool",
                    "dict[int, dict[str, str]]"
                ],
                "labels": [
                    "bool",
                    "dict[int, dict[str, str]]"
                ],
                "smoothing": [],
                "vocab_size": [
                    "bool"
                ]
            }
        },
        "_convert_to_eval_metric": {
            "name": "_convert_to_eval_metric",
            "location": 69,
            "return": [],
            "arguments": {
                "metric_fn": [
                    "int",
                    "str"
                ]
            }
        },
        "get_eval_metrics": {
            "name": "get_eval_metrics",
            "location": 88,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "logits": [
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "labels": [
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "params": [
                    "str"
                ]
            }
        },
        "padded_accuracy": {
            "name": "padded_accuracy",
            "location": 117,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "logits": [],
                "labels": []
            }
        },
        "padded_accuracy_topk": {
            "name": "padded_accuracy_topk",
            "location": 127,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "logits": [
                    "set[]"
                ],
                "labels": [
                    "typing.ByteString",
                    "str",
                    "set[]"
                ],
                "k": [
                    "typing.Sequence[typing.Mapping]",
                    "dict[, ]"
                ]
            }
        },
        "padded_accuracy_top5": {
            "name": "padded_accuracy_top5",
            "location": 143,
            "return": [],
            "arguments": {
                "logits": [
                    "float",
                    "list[str]",
                    "typing.Sequence[str]"
                ],
                "labels": [
                    "float",
                    "list[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "padded_sequence_accuracy": {
            "name": "padded_sequence_accuracy",
            "location": 147,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "logits": [],
                "labels": []
            }
        },
        "padded_neg_log_perplexity": {
            "name": "padded_neg_log_perplexity",
            "location": 160,
            "return": [
                "tuple[typing.Union[int,float,list[],bytes]]"
            ],
            "arguments": {
                "logits": [
                    "list[numpy.array]",
                    "int",
                    "float"
                ],
                "labels": [
                    "list[numpy.array]",
                    "int",
                    "float"
                ],
                "vocab_size": [
                    "list[numpy.array]",
                    "int",
                    "float"
                ]
            }
        },
        "bleu_score": {
            "name": "bleu_score",
            "location": 166,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "logits": [
                    "float",
                    "list[str]",
                    "typing.Sequence[str]"
                ],
                "labels": [
                    "bool"
                ]
            }
        },
        "_get_ngrams_with_counter": {
            "name": "_get_ngrams_with_counter",
            "location": 183,
            "return": [],
            "arguments": {
                "segment": [],
                "max_order": [
                    "int"
                ]
            }
        },
        "compute_bleu": {
            "name": "compute_bleu",
            "location": 201,
            "return": [],
            "arguments": {
                "reference_corpus": [
                    "bool",
                    "float",
                    "None"
                ],
                "translation_corpus": [
                    "bool",
                    "float",
                    "None"
                ],
                "max_order": [
                    "int"
                ],
                "use_bp": [
                    "bool"
                ]
            }
        },
        "rouge_2_fscore": {
            "name": "rouge_2_fscore",
            "location": 265,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "logits": [
                    "float",
                    "list[str]",
                    "typing.Sequence[str]"
                ],
                "labels": [
                    "list[int]",
                    "int"
                ]
            }
        },
        "_get_ngrams": {
            "name": "_get_ngrams",
            "location": 281,
            "return": [
                "set[tuple[]]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "text": []
            }
        },
        "rouge_n": {
            "name": "rouge_n",
            "location": 297,
            "return": [],
            "arguments": {
                "eval_sentences": [
                    "int",
                    "list[]",
                    "str"
                ],
                "ref_sentences": [
                    "int",
                    "list[]",
                    "str"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "rouge_l_fscore": {
            "name": "rouge_l_fscore",
            "location": 334,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "predictions": [
                    "float",
                    "list[str]",
                    "typing.Sequence[str]"
                ],
                "labels": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "rouge_l_sentence_level": {
            "name": "rouge_l_sentence_level",
            "location": 350,
            "return": [],
            "arguments": {
                "eval_sentences": [
                    "float",
                    "bool",
                    "str"
                ],
                "ref_sentences": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "_len_lcs": {
            "name": "_len_lcs",
            "location": 379,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_lcs": {
            "name": "_lcs",
            "location": 393,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_f_lcs": {
            "name": "_f_lcs",
            "location": 417,
            "return": [
                "float"
            ],
            "arguments": {
                "llcs": [
                    "int",
                    "float"
                ],
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "_convert_to_eval_metric.problem_metric_fn": {
            "name": "problem_metric_fn",
            "location": 79,
            "return": [],
            "arguments": {}
        }
    },
    "Transformer-Big-BT-master/code/params_num.py": {
        "get_params_num": {
            "name": "get_params_num",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "ckpt_dir": [
                    "str"
                ]
            }
        }
    },
    "Transformer-Big-BT-master/code/train_and_evaluate.py": {
        "model_fn": {
            "name": "model_fn",
            "location": 57,
            "return": [],
            "arguments": {
                "features": [
                    "dict[str, typing.Any]",
                    "list[]",
                    "typing.Callable[, ]"
                ],
                "labels": [
                    "str",
                    "None",
                    "bool",
                    "typing.Mapping"
                ],
                "mode": [
                    "dict[str, typing.Any]",
                    "str",
                    "int",
                    "bytes",
                    "None",
                    "dict[, ]"
                ],
                "params": [
                    "str",
                    "bytes"
                ]
            }
        },
        "record_scalars": {
            "name": "record_scalars",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "metric_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, float]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "get_learning_rate": {
            "name": "get_learning_rate",
            "location": 107,
            "return": [
                "float"
            ],
            "arguments": {
                "lr": [
                    "bool",
                    "float"
                ],
                "hidden_size": [],
                "lr_warmup_steps": [
                    "int",
                    "str"
                ]
            }
        },
        "get_train_op_and_metrics": {
            "name": "get_train_op_and_metrics",
            "location": 125,
            "return": [
                "tuple[dict[typing.Text, typing.Union[str,float,dict[str, list[typing.Any]],dict[, ],list[]]]]"
            ],
            "arguments": {
                "loss": [
                    "str",
                    "int"
                ],
                "params": [
                    "str"
                ]
            }
        },
        "get_global_step": {
            "name": "get_global_step",
            "location": 164,
            "return": [
                "int"
            ],
            "arguments": {
                "estimator": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "translate_and_compute_bleu": {
            "name": "translate_and_compute_bleu",
            "location": 169,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "estimator": [
                    "bool",
                    "str"
                ],
                "tokenizer_": [
                    "bool",
                    "str"
                ],
                "bleu_source": [
                    "bool",
                    "str"
                ],
                "bleu_ref": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "evaluate_and_log_bleu": {
            "name": "evaluate_and_log_bleu",
            "location": 184,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "estimator": [
                    "float",
                    "str",
                    "bool",
                    "dict[str, str]",
                    "set[str]"
                ],
                "bleu_source": [
                    "float",
                    "str",
                    "bool",
                    "dict[str, str]",
                    "set[str]"
                ],
                "bleu_ref": [
                    "float",
                    "str",
                    "bool",
                    "dict[str, str]",
                    "set[str]"
                ],
                "vocab_file": [
                    "bool",
                    "str",
                    "None",
                    "typing.Sequence[int]"
                ]
            }
        },
        "_validate_file": {
            "name": "_validate_file",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "None",
                    "list[]"
                ]
            }
        },
        "run_loop": {
            "name": "run_loop",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "estimator": [
                    "str",
                    "bool",
                    "None"
                ],
                "params": [
                    "bool"
                ],
                "controler_": [
                    "str",
                    "None",
                    "int"
                ],
                "train_hooks": [
                    "None",
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "bleu_source": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ],
                "bleu_ref": [
                    "None",
                    "int",
                    "list[str]"
                ],
                "bleu_threshold": [
                    "int",
                    "float"
                ],
                "vocab_file": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "construct_estimator": {
            "name": "construct_estimator",
            "location": 284,
            "return": [],
            "arguments": {
                "model_dir": [
                    "str"
                ],
                "num_gpus": [
                    "float"
                ],
                "params": [
                    "str"
                ]
            }
        },
        "run_transformaer": {
            "name": "run_transformaer",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "num_gpus": [
                    "int",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "tuple[]",
                    "typing.Callable[, ]"
                ],
                "params_set": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "data_dir": [
                    "str",
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ],
                "model_dir": [
                    "str",
                    "None",
                    "dict[cmk.utils.type_defs.HostName, str]"
                ],
                "export_dir": [
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "batch_size": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "allow_ffn_pad": [
                    "bool",
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ],
                "bleu_source": [
                    "bool",
                    "str",
                    "None",
                    "typing.Mapping"
                ],
                "bleu_ref": [
                    "bool",
                    "str",
                    "None",
                    "typing.Mapping"
                ],
                "hooks": [
                    "str",
                    "bool",
                    "typing.TextIO",
                    "None"
                ],
                "stop_threshold": [
                    "bool",
                    "str",
                    "None",
                    "typing.Mapping"
                ],
                "vocab_file": [
                    "bool",
                    "str",
                    "None",
                    "typing.Mapping"
                ],
                "num_parallel_calls": [
                    "int"
                ],
                "static_batch": [
                    "bool"
                ],
                "use_synthetic_data": [
                    "bool"
                ]
            }
        },
        "check_graph_files": {
            "name": "check_graph_files",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "graphs_dir": [
                    "str"
                ],
                "num": []
            }
        }
    },
    "Transformer-Big-BT-master/code/translate.py": {
        "_get_sorted_inputs": {
            "name": "_get_sorted_inputs",
            "location": 22,
            "return": [
                "tuple[typing.Union[list[None],list[int]]]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "_encode_and_add_eos": {
            "name": "_encode_and_add_eos",
            "location": 44,
            "return": [],
            "arguments": {
                "line": [
                    "str",
                    "bytes"
                ],
                "tokenizer_": [
                    "str"
                ]
            }
        },
        "_trim_and_decode": {
            "name": "_trim_and_decode",
            "location": 48,
            "return": [],
            "arguments": {
                "ids": [
                    "str"
                ],
                "tokenizer_": []
            }
        },
        "translate_file": {
            "name": "translate_file",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "estimator": [
                    "str",
                    "int",
                    "None"
                ],
                "tokenizer_": [
                    "str",
                    "int",
                    "None"
                ],
                "input_file": [
                    "str",
                    "bool"
                ],
                "output_file": [
                    "None",
                    "str",
                    "int"
                ],
                "print_all": [
                    "bool"
                ]
            }
        },
        "translate_text": {
            "name": "translate_text",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "estimator": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "tokenizer_": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "txt": [
                    "str",
                    "int"
                ]
            }
        },
        "translate_interactive": {
            "name": "translate_interactive",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "estimator": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "tokenizer_": [
                    "str",
                    "int"
                ]
            }
        },
        "translate_main": {
            "name": "translate_main",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "interactive": [
                    "str",
                    "int",
                    "typing.Iterable[tuple[typing.Union[str,str,str]]]"
                ],
                "text": [
                    "None",
                    "str",
                    "int"
                ],
                "inputs_file": [
                    "None",
                    "str"
                ],
                "output_file": [
                    "None",
                    "str"
                ],
                "args": []
            }
        },
        "continue_input_fn": {
            "name": "continue_input_fn",
            "location": 210,
            "return": [],
            "arguments": {
                "generator": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "translate_file.input_gen": {
            "name": "input_gen",
            "location": 64,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "translate_file.input_fn": {
            "name": "input_fn",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "translate_text.input_fn": {
            "name": "input_fn",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "ContinuePredict.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "estimator": [
                    "int",
                    "float"
                ],
                "input_fn": [
                    "int",
                    "float"
                ]
            }
        },
        "ContinuePredict._create_generator": {
            "name": "_create_generator",
            "location": 195,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinuePredict.predict": {
            "name": "predict",
            "location": 199,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "source_input": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ContinuePredict.close": {
            "name": "close",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "continue_input_fn._inner_input": {
            "name": "_inner_input",
            "location": 211,
            "return": [],
            "arguments": {}
        }
    },
    "Transformer-Big-BT-master/code/__init__.py": {},
    "Transformer-Big-BT-master/code/model/attention.py": {
        "Attention.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [],
                "num_heads": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "attention_dropout": [
                    "int",
                    "str",
                    "float",
                    "typing.Iterable[typing.Iterable[]]"
                ],
                "train": [
                    "int",
                    "str",
                    "float",
                    "typing.Iterable[typing.Iterable[]]"
                ]
            }
        },
        "Attention.split_heads": {
            "name": "split_heads",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Attention.combine_heads": {
            "name": "combine_heads",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "Attention.call": {
            "name": "call",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "str",
                    "typing.Callable[, ]",
                    "collections.abc.Awaitable[T]",
                    "typing.Container"
                ],
                "y": [
                    "float",
                    "typing.Iterable['cirq.Qid']",
                    "int"
                ],
                "bias": [
                    "float",
                    "str",
                    "typing.Callable[, ]",
                    "collections.abc.Awaitable[T]",
                    "typing.Container"
                ],
                "cache": []
            }
        },
        "SelfAttention.call": {
            "name": "call",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "bias": [
                    "float"
                ],
                "cache": [
                    "None",
                    "float"
                ]
            }
        }
    },
    "Transformer-Big-BT-master/code/model/beam_search.py": {
        "sequence_beam_search": {
            "name": "sequence_beam_search",
            "location": 382,
            "return": [],
            "arguments": {
                "symbols_to_logits_fn": [
                    "int",
                    "str",
                    "None"
                ],
                "initial_ids": [
                    "bytes",
                    "bool",
                    "str",
                    "None"
                ],
                "initial_cache": [
                    "str",
                    "bool",
                    "None"
                ],
                "vocab_size": [
                    "int",
                    "str",
                    "None"
                ],
                "beam_size": [
                    "int",
                    "str",
                    "None"
                ],
                "alpha": [
                    "int",
                    "str",
                    "None"
                ],
                "max_decode_length": [
                    "int",
                    "str",
                    "None"
                ],
                "eos_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "_log_prob_from_logits": {
            "name": "_log_prob_from_logits",
            "location": 415,
            "return": [
                "int"
            ],
            "arguments": {
                "logits": [
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "_length_normalization": {
            "name": "_length_normalization",
            "location": 419,
            "return": [],
            "arguments": {
                "alpha": [
                    "int"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "_expand_to_beam_size": {
            "name": "_expand_to_beam_size",
            "location": 424,
            "return": [],
            "arguments": {
                "tensor": [
                    "int",
                    "typing.Iterable[list[str]]"
                ],
                "beam_size": [
                    "int",
                    "typing.Iterable[list[str]]"
                ]
            }
        },
        "_shape_list": {
            "name": "_shape_list",
            "location": 441,
            "return": [],
            "arguments": {
                "tensor": [
                    "typing.Type",
                    "dict[, ]",
                    "set[]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_get_shape_keep_last_dim": {
            "name": "_get_shape_keep_last_dim",
            "location": 454,
            "return": [],
            "arguments": {
                "tensor": [
                    "str",
                    "float",
                    "int",
                    "list[dict[, ]]",
                    "None",
                    "list[]"
                ]
            }
        },
        "_flatten_beam_dim": {
            "name": "_flatten_beam_dim",
            "location": 466,
            "return": [],
            "arguments": {
                "tensor": [
                    "str",
                    "list[list[int]]",
                    "bool",
                    "None"
                ]
            }
        },
        "_unflatten_beam_dim": {
            "name": "_unflatten_beam_dim",
            "location": 481,
            "return": [],
            "arguments": {
                "tensor": [
                    "float",
                    "bool",
                    "list[]",
                    "typing.Callable[Type,str, bool]"
                ],
                "batch_size": [
                    "int",
                    "float"
                ],
                "beam_size": [
                    "int",
                    "float"
                ]
            }
        },
        "_gather_beams": {
            "name": "_gather_beams",
            "location": 497,
            "return": [],
            "arguments": {
                "nested": [
                    "str",
                    "int"
                ],
                "beam_indices": [
                    "int",
                    "str",
                    "float",
                    "None"
                ],
                "batch_size": [
                    "int",
                    "typing.Sequence[]",
                    "list[float]",
                    "float"
                ],
                "new_beam_size": [
                    "int",
                    "typing.Sequence[]",
                    "list[float]",
                    "float"
                ]
            }
        },
        "_gather_topk_beams": {
            "name": "_gather_topk_beams",
            "location": 534,
            "return": [],
            "arguments": {
                "nested": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float",
                    "None",
                    "dict[str, tuple[typing.Union[str,int,int]]]"
                ],
                "score_or_log_prob": [
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "bytes",
                    "int",
                    "typing.Sequence[float]"
                ],
                "batch_size": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float",
                    "None",
                    "dict[str, tuple[typing.Union[str,int,int]]]"
                ],
                "beam_size": [
                    "int",
                    "None"
                ]
            }
        },
        "SequenceBeamSearch.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbols_to_logits_fn": [
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None"
                ],
                "vocab_size": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "str"
                ],
                "beam_size": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "str"
                ],
                "alpha": [
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "max_decode_length": [
                    "int",
                    "None",
                    "tuple[]"
                ],
                "eos_id": [
                    "int",
                    "set[int]",
                    "None",
                    "str"
                ]
            }
        },
        "SequenceBeamSearch.search": {
            "name": "search",
            "location": 68,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "initial_ids": [
                    "str",
                    "int",
                    "None"
                ],
                "initial_cache": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "SequenceBeamSearch._create_initial_state": {
            "name": "_create_initial_state",
            "location": 92,
            "return": [
                "tuple[dict[, float]]"
            ],
            "arguments": {
                "self": [],
                "initial_ids": [
                    "int",
                    "str"
                ],
                "initial_cache": [
                    "int"
                ]
            }
        },
        "SequenceBeamSearch._continue_search": {
            "name": "_continue_search",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "bytes",
                    "tuple[typing.Hashable]",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "SequenceBeamSearch._search_step": {
            "name": "_search_step",
            "location": 206,
            "return": [
                "list[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "SequenceBeamSearch._grow_alive_seq": {
            "name": "_grow_alive_seq",
            "location": 238,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "typing.Callable[, ]",
                    "tuple[typing.Hashable]",
                    "str",
                    "None"
                ]
            }
        },
        "SequenceBeamSearch._get_new_alive_state": {
            "name": "_get_new_alive_state",
            "location": 300,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "new_seq": [
                    "str"
                ],
                "new_log_probs": [
                    "bool",
                    "list[typing.Any]"
                ],
                "new_cache": [
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "SequenceBeamSearch._get_new_finished_state": {
            "name": "_get_new_finished_state",
            "location": 330,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bytes",
                    "str",
                    "None"
                ],
                "new_seq": [
                    "str"
                ],
                "new_log_probs": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "Transformer-Big-BT-master/code/model/beam_search_test.py": {
        "BeamSearchHelperTests.test_expand_to_beam_size": {
            "name": "test_expand_to_beam_size",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchHelperTests.test_shape_list": {
            "name": "test_shape_list",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchHelperTests.test_get_shape_keep_last_dim": {
            "name": "test_get_shape_keep_last_dim",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchHelperTests.test_flatten_beam_dim": {
            "name": "test_flatten_beam_dim",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchHelperTests.test_unflatten_beam_dim": {
            "name": "test_unflatten_beam_dim",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchHelperTests.test_gather_beams": {
            "name": "test_gather_beams",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BeamSearchHelperTests.test_gather_topk_beams": {
            "name": "test_gather_topk_beams",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Transformer-Big-BT-master/code/model/embedding_layers.py": {
        "EmbeddingSharedWeights.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "float"
                ],
                "hidden_size": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "float"
                ]
            }
        },
        "EmbeddingSharedWeights.build": {
            "name": "build",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "list[]"
                ]
            }
        },
        "EmbeddingSharedWeights.call": {
            "name": "call",
            "location": 31,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "EmbeddingSharedWeights.linear": {
            "name": "linear",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        }
    },
    "Transformer-Big-BT-master/code/model/ffn.py": {
        "FeedForwardNetwork.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ],
                "filter_size": [
                    "int",
                    "float"
                ],
                "relu_dropout": [
                    "int",
                    "float"
                ],
                "trainable": [
                    "int",
                    "float"
                ],
                "allow_pad": [
                    "int",
                    "float"
                ]
            }
        },
        "FeedForwardNetwork.call": {
            "name": "call",
            "location": 29,
            "return": [
                "list[]",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "padding": [
                    "None",
                    "int",
                    "list[typing.Any]",
                    "typing.Any",
                    "dict[, ]"
                ]
            }
        }
    },
    "Transformer-Big-BT-master/code/model/model_utils.py": {
        "position_encoding": {
            "name": "position_encoding",
            "location": 15,
            "return": [],
            "arguments": {
                "length": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "hidden_size": [
                    "int"
                ],
                "min_timescale": [
                    "float"
                ],
                "max_timescale": [
                    "float"
                ]
            }
        },
        "get_padding": {
            "name": "get_padding",
            "location": 44,
            "return": [],
            "arguments": {
                "x": [
                    "float"
                ],
                "padding_value": [
                    "int"
                ]
            }
        },
        "get_padding_bias": {
            "name": "get_padding_bias",
            "location": 52,
            "return": [],
            "arguments": {
                "x": [
                    "int",
                    "None"
                ]
            }
        },
        "get_decoder_self_attention_bias": {
            "name": "get_decoder_self_attention_bias",
            "location": 70,
            "return": [
                "float"
            ],
            "arguments": {
                "length": [
                    "float",
                    "int",
                    "None",
                    "list[int]",
                    "dict[, ]"
                ]
            }
        }
    },
    "Transformer-Big-BT-master/code/model/params.py": {},
    "Transformer-Big-BT-master/code/model/transformer.py": {
        "Transformer.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "bytes"
                ],
                "trainable": [
                    "str",
                    "bool",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "Transformer.__call__": {
            "name": "__call__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "typing.Mapping",
                    "None",
                    "typing.BinaryIO"
                ],
                "targets": [
                    "None",
                    "dict[str, typing.Any]",
                    "BaseException"
                ]
            }
        },
        "Transformer.encode": {
            "name": "encode",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [
                    "float",
                    "str",
                    "int"
                ],
                "attention_bias": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Transformer.decode": {
            "name": "decode",
            "location": 107,
            "return": [
                "int",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "targets": [
                    "str",
                    "typing.Iterable[float]",
                    "int"
                ],
                "encoder_output": [
                    "str",
                    "int",
                    "list[str]",
                    "tuple[typing.Union[float,float,float,float]]"
                ],
                "attention_bias": [
                    "str",
                    "int",
                    "list[str]",
                    "tuple[typing.Union[float,float,float,float]]"
                ]
            }
        },
        "Transformer._get_symbols_to_logits_fn": {
            "name": "_get_symbols_to_logits_fn",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "max_decode_length": [
                    "int",
                    "list[list[str]]"
                ]
            }
        },
        "Transformer.predict": {
            "name": "predict",
            "location": 182,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "encoder_outputs": [
                    "str",
                    "bytes",
                    "int"
                ],
                "encoder_decoder_attention_bias": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "BatchNormalization.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int"
                ]
            }
        },
        "BatchNormalization.build": {
            "name": "build",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "list[]"
                ]
            }
        },
        "BatchNormalization.call": {
            "name": "call",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "list[T]",
                    "int"
                ],
                "epsilon": [
                    "float"
                ]
            }
        },
        "PrePostProcessingWrapper.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "int",
                    "float"
                ],
                "params": [
                    "str"
                ],
                "trainable": [
                    "int",
                    "float"
                ]
            }
        },
        "PrePostProcessingWrapper.__call__": {
            "name": "__call__",
            "location": 257,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "EncoderStack.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "trainable": [
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "EncoderStack.call": {
            "name": "call",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "encoder_inputs": [
                    "bool",
                    "float",
                    "str"
                ],
                "attention_bias": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ],
                "inputs_padding": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "DecoderStack.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "trainable": [
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "DecoderStack.call": {
            "name": "call",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "decoder_inputs": [
                    "bool",
                    "list[_]",
                    "float"
                ],
                "encoder_outputs": [
                    "int",
                    "list[]"
                ],
                "decoder_self_attention_bias": [
                    "bool",
                    "list['cirq.Qid']",
                    "float"
                ],
                "attention_bias": [
                    "int",
                    "list[]"
                ],
                "cache": [
                    "str"
                ]
            }
        },
        "Transformer._get_symbols_to_logits_fn.symbols_to_logits_fn": {
            "name": "symbols_to_logits_fn",
            "location": 151,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "ids": [],
                "i": [],
                "cache": []
            }
        }
    },
    "Transformer-Big-BT-master/code/model/transformer_test.py": {
        "TransformerTest.test_EncoderStack": {
            "name": "test_EncoderStack",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Transformer-Big-BT-master/code/model/__init__.py": {},
    "Transformer-Big-BT-master/code/preprocess/dataset.py": {
        "_load_records": {
            "name": "_load_records",
            "location": 28,
            "return": [],
            "arguments": {
                "file_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "_parse_exmaple": {
            "name": "_parse_exmaple",
            "location": 32,
            "return": [
                "tuple[typing.Union[int,str]]"
            ],
            "arguments": {
                "serialized_example": [
                    "str",
                    "int",
                    "typing.AbstractSet",
                    "bytes"
                ]
            }
        },
        "_filter_max_length": {
            "name": "_filter_max_length",
            "location": 46,
            "return": [],
            "arguments": {
                "exmaple": [],
                "max_length": [
                    "int"
                ]
            }
        },
        "_get_example_length": {
            "name": "_get_example_length",
            "location": 52,
            "return": [],
            "arguments": {
                "example": [
                    "str"
                ]
            }
        },
        "_create_min_max_boundaries": {
            "name": "_create_min_max_boundaries",
            "location": 57,
            "return": [
                "tuple[list[int]]"
            ],
            "arguments": {
                "max_length": [
                    "int"
                ],
                "min_boundary": [],
                "scale": [
                    "float"
                ]
            }
        },
        "_batch_examples": {
            "name": "_batch_examples",
            "location": 74,
            "return": [],
            "arguments": {
                "dataset": [],
                "batch_size": [
                    "bool"
                ],
                "max_length": [
                    "bool",
                    "typing.Iterable[T]"
                ]
            }
        },
        "_read_and_batch_from_files": {
            "name": "_read_and_batch_from_files",
            "location": 120,
            "return": [],
            "arguments": {
                "file_pattern": [
                    "str",
                    "bool",
                    "bytes",
                    "None"
                ],
                "batch_size": [
                    "int"
                ],
                "max_length": [
                    "int",
                    "float"
                ],
                "num_parallel_calls": [
                    "int",
                    "float",
                    "str",
                    "None"
                ],
                "shuffle": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "repeat": [
                    "tuple[typing.Union[float,float,float,float]]",
                    "float",
                    "str",
                    "bool",
                    "bytes"
                ],
                "static_batch": [
                    "bool"
                ]
            }
        },
        "_generate_synthetic_data": {
            "name": "_generate_synthetic_data",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [
                    "Exception",
                    "None",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "train_input_fn": {
            "name": "train_input_fn",
            "location": 168,
            "return": [],
            "arguments": {
                "params": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "eval_input_fn": {
            "name": "eval_input_fn",
            "location": 183,
            "return": [],
            "arguments": {
                "params": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_batch_examples.example_to_bucket_id": {
            "name": "example_to_bucket_id",
            "location": 94,
            "return": [],
            "arguments": {
                "example_input": [],
                "example_target": []
            }
        },
        "_batch_examples.window_size": {
            "name": "window_size",
            "location": 104,
            "return": [],
            "arguments": {
                "bucket_id": []
            }
        },
        "_batch_examples.batching": {
            "name": "batching",
            "location": 108,
            "return": [],
            "arguments": {
                "bucket_id": [],
                "grouped_dataset": []
            }
        }
    },
    "Transformer-Big-BT-master/code/preprocess/dataset_test.py": {
        "DatasetTest.testTrainInputFn": {
            "name": "testTrainInputFn",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Transformer-Big-BT-master/code/preprocess/pre_data.py": {
        "text_line_iterator": {
            "name": "text_line_iterator",
            "location": 43,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "write_file": {
            "name": "write_file",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "writer": [],
                "filename": [
                    "str",
                    "dict[, ]"
                ],
                "newline": [
                    "bool"
                ]
            }
        },
        "compile_files": {
            "name": "compile_files",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_dir": [
                    "str",
                    "typing.BinaryIO",
                    "dict[, ]"
                ],
                "raw_files": [
                    "str",
                    "typing.BinaryIO",
                    "dict[, ]"
                ],
                "name": [
                    "str",
                    "typing.BinaryIO",
                    "dict[, ]"
                ]
            }
        },
        "get_raw_files": {
            "name": "get_raw_files",
            "location": 76,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "raw_dir": [
                    "str"
                ],
                "excepts": [
                    "None",
                    "str",
                    "int",
                    "set[str]",
                    "tuple[]"
                ]
            }
        },
        "split_bleu_file": {
            "name": "split_bleu_file",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "test_file": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "source_path": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "target_path": [
                    "str"
                ]
            }
        },
        "merge_umcorpus": {
            "name": "merge_umcorpus",
            "location": 104,
            "return": [
                "int"
            ],
            "arguments": {
                "raw_dir": [
                    "str",
                    "None"
                ],
                "output_file": [
                    "str"
                ]
            }
        },
        "encode_and_save": {
            "name": "encode_and_save",
            "location": 121,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tokenizer": [
                    "str"
                ],
                "source_input": [
                    "str",
                    "int"
                ],
                "target_input": [
                    "int"
                ],
                "output_dir": [
                    "str"
                ],
                "name": [
                    "str",
                    "None",
                    "typing.IO",
                    "int",
                    "typing.TextIO"
                ],
                "tag": [
                    "str",
                    "typing.IO",
                    "typing.TextIO",
                    "int",
                    "None"
                ],
                "output_nums": []
            }
        },
        "shared_file_name": {
            "name": "shared_file_name",
            "location": 190,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "vocab": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "tag": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "num": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "total_num": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ]
            }
        },
        "shuffle_record": {
            "name": "shuffle_record",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "dict_to_example": {
            "name": "dict_to_example",
            "location": 223,
            "return": [],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "safe_mkdir": {
            "name": "safe_mkdir",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "all_exist": {
            "name": "all_exist",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "files": [
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "vocab_exist": {
            "name": "vocab_exist",
            "location": 244,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "dir_name": [
                    "str"
                ]
            }
        },
        "process": {
            "name": "process",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "merged": [
                    "bool",
                    "str",
                    "list[]"
                ],
                "raw_dir": [
                    "str",
                    "bool"
                ],
                "eval_dir": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "data_dir": [
                    "bool",
                    "str"
                ],
                "name": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "shuffle": [
                    "bool",
                    "str",
                    "list[]"
                ],
                "append_vocab": [
                    "str",
                    "int"
                ],
                "num_train": [
                    "int",
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "Transformer-Big-BT-master/code/preprocess/tokenizer.py": {
        "_split_string_to_tokens": {
            "name": "_split_string_to_tokens",
            "location": 154,
            "return": [
                "list[]"
            ],
            "arguments": {
                "text": [],
                "type_": [
                    "None",
                    "str",
                    "bool",
                    "typing.Collection"
                ]
            }
        },
        "_save_vocab": {
            "name": "_save_vocab",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "vocab_file": [
                    "str",
                    "bool"
                ],
                "subtoken_list": [
                    "str"
                ]
            }
        },
        "_load_vocab_file": {
            "name": "_load_vocab_file",
            "location": 206,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "vocab_file": [
                    "str",
                    "typing.Callable[str, str]"
                ],
                "reserved_tokens": [
                    "list[typing.Text]"
                ]
            }
        },
        "_join_tokens_to_string": {
            "name": "_join_tokens_to_string",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "type_": [
                    "None",
                    "str",
                    "list[dict[, ]]"
                ]
            }
        },
        "_count_tokens": {
            "name": "_count_tokens",
            "location": 238,
            "return": [],
            "arguments": {
                "files": [
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "_list_to_index_dict": {
            "name": "_list_to_index_dict",
            "location": 257,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "lst": [
                    "list[]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_escape_token": {
            "name": "_escape_token",
            "location": 262,
            "return": [
                "str"
            ],
            "arguments": {
                "token": [
                    "str",
                    "list[str]"
                ],
                "alphabet": [
                    "bytes",
                    "str"
                ]
            }
        },
        "_unescape_token": {
            "name": "_unescape_token",
            "location": 277,
            "return": [],
            "arguments": {
                "token": [
                    "str",
                    "list[]",
                    "typing.Pattern",
                    "None"
                ]
            }
        },
        "Tokenizer.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_file": [
                    "str",
                    "int",
                    "float"
                ],
                "reserved_tokens": [
                    "list[typing.Text]"
                ]
            }
        },
        "Tokenizer.vocab_from_files": {
            "name": "vocab_from_files",
            "location": 70,
            "return": [
                "Tokenizer"
            ],
            "arguments": {
                "vocab_file": [
                    "str"
                ],
                "files": [
                    "list[str]",
                    "str",
                    "bool",
                    "typing.AnyStr"
                ],
                "add": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "reserved_tokens": [
                    "list[typing.Text]"
                ]
            }
        },
        "Tokenizer.encode": {
            "name": "encode",
            "location": 110,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "raw_string": [
                    "bool",
                    "str"
                ],
                "add_eos": [
                    "bool"
                ]
            }
        },
        "Tokenizer.decode": {
            "name": "decode",
            "location": 126,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "token_ids": [
                    "str",
                    "int",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "add_eos": [
                    "bool"
                ],
                "type_": [
                    "None",
                    "str"
                ]
            }
        },
        "Tokenizer._token_ids_to_tokens": {
            "name": "_token_ids_to_tokens",
            "location": 143,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "token_ids": [
                    "str"
                ]
            }
        },
        "_unescape_token.match": {
            "name": "match",
            "location": 284,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "m": []
            }
        }
    },
    "Transformer-Big-BT-master/code/preprocess/tokenizer_test.py": {
        "TestTokenizerUtils.test_split_string_to_tokens": {
            "name": "test_split_string_to_tokens",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizerUtils.test_join_token_to_string": {
            "name": "test_join_token_to_string",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizerUtils.test_Subtokenizer": {
            "name": "test_Subtokenizer",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizerUtils.test_encode_decode": {
            "name": "test_encode_decode",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizerUtils.test_escape_token": {
            "name": "test_escape_token",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTokenizerUtils.test_dataset_decode": {
            "name": "test_dataset_decode",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Transformer-Big-BT-master/code/preprocess/__init__.py": {},
    "Transformer-Big-BT-master/code/utils/cloud_lib.py": {
        "on_gcp": {
            "name": "on_gcp",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "Transformer-Big-BT-master/code/utils/distribution_utils.py": {
        "_collective_communication": {
            "name": "_collective_communication",
            "location": 16,
            "return": [],
            "arguments": {
                "all_reduce_alg": [
                    "int"
                ]
            }
        },
        "_mirrored_cross_device_ops": {
            "name": "_mirrored_cross_device_ops",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "all_reduce_alg": [
                    "float",
                    "typing.Sequence[str]",
                    "str",
                    "bool",
                    "typing.Callable[..., typing.Any]",
                    "typing.AnyStr"
                ],
                "num_packs": [
                    "int",
                    "list[int]",
                    "float",
                    "typing.Sequence[int]",
                    "None"
                ]
            }
        },
        "get_distribution_strategy": {
            "name": "get_distribution_strategy",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "distribution_strategy": [
                    "typing.Text"
                ],
                "num_gpus": [
                    "int"
                ],
                "num_workers": [
                    "int"
                ],
                "all_reduce_alg": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Sequence[typing.Any]",
                    "float",
                    "list[dict[str, typing.Any]]",
                    "str"
                ],
                "num_packs": [
                    "int"
                ]
            }
        },
        "per_replica_batch_size": {
            "name": "per_replica_batch_size",
            "location": 134,
            "return": [
                "int"
            ],
            "arguments": {
                "batch_size": [
                    "int"
                ],
                "num_gpus": [
                    "int"
                ]
            }
        }
    },
    "Transformer-Big-BT-master/code/utils/export.py": {
        "build_tensor_serving_input_receiver_fn": {
            "name": "build_tensor_serving_input_receiver_fn",
            "location": 10,
            "return": [],
            "arguments": {
                "shape": [
                    "int",
                    "None",
                    "list[str]"
                ],
                "dtype": [],
                "batch_size": [
                    "int"
                ]
            }
        },
        "build_tensor_serving_input_receiver_fn.serving_input_receiver_fn": {
            "name": "serving_input_receiver_fn",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "Transformer-Big-BT-master/code/utils/hooks.py": {
        "ExamplesPerSecondHook.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "every_n_steps": [
                    "None",
                    "int"
                ],
                "every_n_secs": [
                    "None",
                    "int"
                ],
                "warm_steps": [
                    "int"
                ],
                "metric_logger": [
                    "None",
                    "int"
                ]
            }
        },
        "ExamplesPerSecondHook.begin": {
            "name": "begin",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExamplesPerSecondHook.before_run": {
            "name": "before_run",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "run_context": [
                    "dict[str, typing.Any]",
                    "Exception"
                ]
            }
        },
        "ExamplesPerSecondHook.after_run": {
            "name": "after_run",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_context": [
                    "bool"
                ],
                "run_values": [
                    "typing.Sequence[int]",
                    "bool"
                ]
            }
        }
    },
    "Transformer-Big-BT-master/code/utils/hook_helper.py": {
        "get_train_hooks": {
            "name": "get_train_hooks",
            "location": 22,
            "return": [
                "list[]"
            ],
            "arguments": {
                "name_list": [
                    "str"
                ],
                "use_tpu": [
                    "bool"
                ]
            }
        },
        "get_logging_tensor_hook": {
            "name": "get_logging_tensor_hook",
            "location": 57,
            "return": [],
            "arguments": {
                "every_n_iter": [
                    "int"
                ],
                "tensors_to_log": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "get_profiler_hook": {
            "name": "get_profiler_hook",
            "location": 77,
            "return": [],
            "arguments": {
                "model_dir": [
                    "str"
                ],
                "save_steps": [
                    "int"
                ]
            }
        },
        "get_examples_per_second_hook": {
            "name": "get_examples_per_second_hook",
            "location": 90,
            "return": [
                "ExamplesPerSecondHook"
            ],
            "arguments": {
                "every_n_steps": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "warm_steps": [
                    "int"
                ]
            }
        },
        "get_logging_metric_hook": {
            "name": "get_logging_metric_hook",
            "location": 111,
            "return": [
                "LoggingMetricHook"
            ],
            "arguments": {
                "tensors_to_log": [
                    "None",
                    "str",
                    "bool"
                ],
                "every_n_secs": [
                    "int"
                ]
            }
        }
    },
    "Transformer-Big-BT-master/code/utils/logger.py": {
        "config_benchmark_logger": {
            "name": "config_benchmark_logger",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "flag_obj": [
                    "None",
                    "str"
                ]
            }
        },
        "get_benchmark_logger": {
            "name": "get_benchmark_logger",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "benchmark_context": {
            "name": "benchmark_context",
            "location": 81,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "flag_obj": [
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "_gather_run_info": {
            "name": "_gather_run_info",
            "location": 277,
            "return": [
                "dict[typing.Text, typing.Union[str,None,typing.Callable[[], None],dict[typing.Text, typing.Union[str,None,typing.Callable[[], None]]]]]"
            ],
            "arguments": {
                "model_name": [
                    "str",
                    "None",
                    "typing.Callable[[], None]"
                ],
                "dataset_name": [
                    "str",
                    "None",
                    "typing.Callable[[], None]"
                ],
                "run_params": [
                    "str",
                    "list[str]"
                ],
                "test_id": [
                    "str",
                    "None",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "_process_metric_to_json": {
            "name": "_process_metric_to_json",
            "location": 299,
            "return": [
                "None",
                "dict[typing.Text, typing.Union[str,None,tuple[typing.Union[str,str]],float,tuple[typing.Union[typing.Type,typing.Type]],list[str],int]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "tuple[typing.Union[str,str]]"
                ],
                "value": [
                    "str",
                    "bool"
                ],
                "unit": [
                    "None",
                    "str",
                    "tuple[typing.Union[str,str]]"
                ],
                "global_step": [
                    "None",
                    "str",
                    "tuple[typing.Union[str,str]]"
                ],
                "extras": [
                    "None",
                    "str",
                    "typing.Mapping",
                    "bool"
                ]
            }
        },
        "_collect_tensorflow_info": {
            "name": "_collect_tensorflow_info",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "run_info": []
            }
        },
        "_collect_run_params": {
            "name": "_collect_run_params",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "run_info": [],
                "run_params": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_collect_tensorflow_environment_variables": {
            "name": "_collect_tensorflow_environment_variables",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "run_info": []
            }
        },
        "_collect_cpu_info": {
            "name": "_collect_cpu_info",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "run_info": []
            }
        },
        "_collect_gpu_info": {
            "name": "_collect_gpu_info",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "run_info": [],
                "session_config": [
                    "None",
                    "bool",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "_collect_memory_info": {
            "name": "_collect_memory_info",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "run_info": []
            }
        },
        "_collect_test_environment": {
            "name": "_collect_test_environment",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "run_info": []
            }
        },
        "_parse_gpu_model": {
            "name": "_parse_gpu_model",
            "location": 406,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "physical_device_desc": [
                    "str"
                ]
            }
        },
        "_convert_to_json_dict": {
            "name": "_convert_to_json_dict",
            "location": 415,
            "return": [
                "list[dict[typing.Text, typing.Union[tuple[typing.Union[str,list[typing.Any]]],tuple[typing.Union[str,bool]]]]]",
                "list[]"
            ],
            "arguments": {
                "input_dict": [
                    "dict[, ]",
                    "dict[str, str]",
                    "dict[str, list[typing.Any]]",
                    "dict[str, bool]"
                ]
            }
        },
        "BaseBenchmarkLogger.log_evaluation_result": {
            "name": "log_evaluation_result",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eval_results": [
                    "list[int]",
                    "str"
                ]
            }
        },
        "BaseBenchmarkLogger.log_metric": {
            "name": "log_metric",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "unit": [
                    "None",
                    "str"
                ],
                "global_step": [
                    "None",
                    "str"
                ],
                "extras": [
                    "None",
                    "str"
                ]
            }
        },
        "BaseBenchmarkLogger.log_run_info": {
            "name": "log_run_info",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str"
                ],
                "dataset_name": [
                    "str"
                ],
                "run_params": [
                    "str"
                ],
                "test_id": [
                    "None",
                    "str"
                ]
            }
        },
        "BaseBenchmarkLogger.on_finish": {
            "name": "on_finish",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "BenchmarkFileLogger.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logging_dir": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "BenchmarkFileLogger.log_metric": {
            "name": "log_metric",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "float"
                ],
                "value": [
                    "str",
                    "int",
                    "float"
                ],
                "unit": [
                    "None",
                    "str"
                ],
                "global_step": [
                    "None",
                    "str"
                ],
                "extras": [
                    "None",
                    "str"
                ]
            }
        },
        "BenchmarkFileLogger.log_run_info": {
            "name": "log_run_info",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ],
                "dataset_name": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ],
                "run_params": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ],
                "test_id": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "BenchmarkFileLogger.on_finish": {
            "name": "on_finish",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "BenchmarkBigQueryLogger.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bigquery_uploader": [
                    "typing.Callable[[], None]",
                    "str",
                    "dict[, ]",
                    "int",
                    "list[str]"
                ],
                "bigquery_data_set": [
                    "str",
                    "list[str]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "bigquery_run_table": [
                    "str",
                    "None"
                ],
                "bigquery_run_status_table": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "None"
                ],
                "bigquery_metric_table": [
                    "dict[str, typing.Any]",
                    "list[str]",
                    "bool",
                    "str"
                ],
                "run_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "BenchmarkBigQueryLogger.log_metric": {
            "name": "log_metric",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "unit": [
                    "None",
                    "str"
                ],
                "global_step": [
                    "None",
                    "str"
                ],
                "extras": [
                    "None",
                    "str"
                ]
            }
        },
        "BenchmarkBigQueryLogger.log_run_info": {
            "name": "log_run_info",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ],
                "dataset_name": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ],
                "run_params": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ],
                "test_id": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "BenchmarkBigQueryLogger.on_finish": {
            "name": "on_finish",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "_collect_run_params.process_param": {
            "name": "process_param",
            "location": 325,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "name": [],
                "value": []
            }
        }
    },
    "Transformer-Big-BT-master/code/utils/metric_hook.py": {
        "LoggingMetricHook.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensors": [
                    "int",
                    "float",
                    "None"
                ],
                "metric_logger": [
                    "None",
                    "int"
                ],
                "every_n_iter": [
                    "None",
                    "int",
                    "float"
                ],
                "every_n_secs": [
                    "None",
                    "int",
                    "float"
                ],
                "at_end": [
                    "bool"
                ]
            }
        },
        "LoggingMetricHook.begin": {
            "name": "begin",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingMetricHook.after_run": {
            "name": "after_run",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unused_run_context": [
                    "bool",
                    "float"
                ],
                "run_values": [
                    "float",
                    "int",
                    "typing.Sequence[int]"
                ]
            }
        },
        "LoggingMetricHook.end": {
            "name": "end",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LoggingMetricHook._log_metric": {
            "name": "_log_metric",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor_values": [
                    "str",
                    "bool"
                ]
            }
        }
    }
}
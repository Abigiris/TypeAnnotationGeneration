{
    "adstxtcrawler-master/setup.py": {
        "parse_reqs": {
            "name": "parse_reqs",
            "location": 10,
            "return": [
                "list[]"
            ],
            "arguments": {
                "requirements_file": [
                    "str"
                ]
            }
        },
        "CustomDevelop.run": {
            "name": "run",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adstxtcrawler-master/adstxt/cli.py": {
        "cli": {
            "name": "cli",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "db_uri": [
                    "typing.IO",
                    "str",
                    "list[str]",
                    "None",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "es_uri": [
                    "str",
                    "bytes",
                    "None"
                ],
                "es_query": [
                    "str",
                    "bytes",
                    "None"
                ],
                "es_index": [
                    "str",
                    "bytes",
                    "None"
                ],
                "file_path": [
                    "str",
                    "bool",
                    "dict[int, set[str]]",
                    "typing.TextIO",
                    "typing.BinaryIO"
                ],
                "crawler_tag": [
                    "typing.IO",
                    "str",
                    "list[str]",
                    "None",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "log_level": [
                    "str"
                ],
                "log_formatter": [
                    "bool",
                    "str",
                    "list[str]",
                    "typing.Callable[[], None]",
                    "None"
                ],
                "es": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "file": [
                    "str",
                    "None",
                    "bool"
                ],
                "cli": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "domain": [
                    "str"
                ]
            }
        }
    },
    "adstxtcrawler-master/adstxt/exceptions.py": {},
    "adstxtcrawler-master/adstxt/fetch.py": {},
    "adstxtcrawler-master/adstxt/main.py": {
        "AdsTxtCrawler.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "es": [],
                "file": [],
                "db_uri": [],
                "es_uri": [
                    "None"
                ],
                "es_query": [
                    "None"
                ],
                "es_index": [
                    "None"
                ],
                "file_uri": [
                    "None"
                ],
                "crawler_id": [
                    "None"
                ]
            }
        },
        "AdsTxtCrawler._get_engine": {
            "name": "_get_engine",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdsTxtCrawler._bootstrap_db": {
            "name": "_bootstrap_db",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdsTxtCrawler._last_updated_at": {
            "name": "_last_updated_at",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "domain": []
            }
        },
        "AdsTxtCrawler._check_viability": {
            "name": "_check_viability",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "domain": []
            }
        },
        "AdsTxtCrawler.process_domain": {
            "name": "process_domain",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetchdata": []
            }
        },
        "AdsTxtCrawler.fetch_domains": {
            "name": "fetch_domains",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdsTxtCrawler._fetch_from_file": {
            "name": "_fetch_from_file",
            "location": 292,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "AdsTxtCrawler._query_for_domains": {
            "name": "_query_for_domains",
            "location": 303,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "index": [],
                "body": []
            }
        },
        "AdsTxtCrawler._run_once": {
            "name": "_run_once",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdsTxtCrawler.run": {
            "name": "run",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdsTxtCrawler._run_once.worker": {
            "name": "worker",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adstxtcrawler-master/adstxt/models.py": {
        "Domain.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__repr__": {
            "name": "__repr__",
            "location": 44,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variable.__repr__": {
            "name": "__repr__",
            "location": 65,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adstxtcrawler-master/adstxt/transform.py": {
        "process_row": {
            "name": "process_row",
            "location": 20,
            "return": [
                "None",
                "AdsVariable",
                "AdsRecord"
            ],
            "arguments": {
                "row": [
                    "str"
                ]
            }
        }
    },
    "adstxtcrawler-master/adstxt/__init__.py": {},
    "adstxtcrawler-master/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "items": [
                    "list[]",
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "adstxtcrawler-master/tests/__init__.py": {},
    "adstxtcrawler-master/tests/integration/test_fetch_running.py": {},
    "adstxtcrawler-master/tests/integration/test_integration.py": {
        "adstxt_integration": {
            "name": "adstxt_integration",
            "location": 49,
            "return": [
                "AdsTxtCrawler"
            ],
            "arguments": {
                "mocker": [
                    "bytes",
                    "None"
                ],
                "caplog": [
                    "bytes",
                    "None"
                ],
                "tmpdir": [
                    "bytes"
                ],
                "request": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "None",
                    "list[str]"
                ]
            }
        },
        "test_integration_run_once": {
            "name": "test_integration_run_once",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "None"
                ],
                "adstxt_integration": []
            }
        },
        "test_integration_verify_process_domain_gc": {
            "name": "test_integration_verify_process_domain_gc",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "None"
                ],
                "adstxt_integration": []
            }
        },
        "adstxt_integration.gc": {
            "name": "gc",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adstxtcrawler-master/tests/unit/test_fetch.py": {
        "Headers.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "typing.MutableMapping"
                ]
            }
        },
        "Headers.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Headers.get": {
            "name": "get",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "tuple[str]"
                ],
                "if_none": [
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "MockSession.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "response": [
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "redirect": [
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "headers": [
                    "typing.Any",
                    "None",
                    "dict[, ]",
                    "bool",
                    "typing.Collection",
                    "list[bytes]",
                    "dict[str, str]"
                ]
            }
        },
        "MockSession.status": {
            "name": "status",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockSession.history": {
            "name": "history",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "History.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "History.url": {
            "name": "url",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Urls.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "float"
                ]
            }
        },
        "Urls.host": {
            "name": "host",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adstxtcrawler-master/tests/unit/test_main.py": {
        "adstxtcrawler": {
            "name": "adstxtcrawler",
            "location": 43,
            "return": [
                "AdsTxtCrawler"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_filter_for_domain": {
            "name": "test_filter_for_domain",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "adstxtcrawler": [],
                "mocker": []
            }
        },
        "test_check_viability_false": {
            "name": "test_check_viability_false",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "adstxtcrawler": [],
                "mocker": []
            }
        },
        "test_check_viability_true": {
            "name": "test_check_viability_true",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "adstxtcrawler": [],
                "mocker": []
            }
        },
        "test_check_viability_bad_domain": {
            "name": "test_check_viability_bad_domain",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "adstxtcrawler": [],
                "mocker": []
            }
        },
        "test_query_domains": {
            "name": "test_query_domains",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "adstxtcrawler": [],
                "mocker": [],
                "caplog": []
            }
        },
        "test_broken_fetch_sentry_1023": {
            "name": "test_broken_fetch_sentry_1023",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "adstxtcrawler": [],
                "mocker": [],
                "caplog": []
            }
        },
        "test_fetch_domains_file": {
            "name": "test_fetch_domains_file",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "adstxtcrawler": [],
                "mocker": []
            }
        },
        "test_fetch_domains_es": {
            "name": "test_fetch_domains_es",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "adstxtcrawler": [],
                "mocker": []
            }
        },
        "test_fetch_from_file": {
            "name": "test_fetch_from_file",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "adstxtcrawler": [],
                "tmpdir": []
            }
        },
        "test_deactivate_reactivate": {
            "name": "test_deactivate_reactivate",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "adstxtcrawler": [],
                "caplog": []
            }
        },
        "test_deactivate_reactivate_new_cert_authority": {
            "name": "test_deactivate_reactivate_new_cert_authority",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "adstxtcrawler": [],
                "caplog": []
            }
        },
        "adstxtcrawler.clean_database": {
            "name": "clean_database",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "adstxtcrawler-master/tests/unit/test_models.py": {},
    "adstxtcrawler-master/tests/unit/test_transform.py": {
        "test_process_row_comments": {
            "name": "test_process_row_comments",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_records": {
            "name": "test_process_records",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_row_variables": {
            "name": "test_process_row_variables",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_return_row_too_small": {
            "name": "test_return_row_too_small",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reseller_direct_none_extraction": {
            "name": "test_reseller_direct_none_extraction",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
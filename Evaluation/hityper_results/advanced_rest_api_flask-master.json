{
    "advanced_rest_api_flask-master/app.py": {
        "create_tables": {
            "name": "create_tables",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_claims_to_jwt": {
            "name": "add_claims_to_jwt",
            "location": 54,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "identity": [
                    "str",
                    "typing.Iterable[str]",
                    "int"
                ]
            }
        },
        "check_if_token_in_blacklist": {
            "name": "check_if_token_in_blacklist",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "decrypted_token": [
                    "list[str]"
                ]
            }
        },
        "expired_token_callback": {
            "name": "expired_token_callback",
            "location": 65,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "invalid_token_callback": {
            "name": "invalid_token_callback",
            "location": 73,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "err": [
                    "str",
                    "typing.Iterator",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "missing_token_callback": {
            "name": "missing_token_callback",
            "location": 81,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "err": [
                    "str",
                    "typing.Iterator",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "needs_fresh_token_callback": {
            "name": "needs_fresh_token_callback",
            "location": 89,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "revoked_token_callback": {
            "name": "revoked_token_callback",
            "location": 97,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "handle_marshmallow_validation": {
            "name": "handle_marshmallow_validation",
            "location": 105,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "err": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/blacklist.py": {},
    "advanced_rest_api_flask-master/config.py": {},
    "advanced_rest_api_flask-master/database.py": {},
    "advanced_rest_api_flask-master/default_config.py": {},
    "advanced_rest_api_flask-master/ma.py": {},
    "advanced_rest_api_flask-master/main.py": {
        "create_tables": {
            "name": "create_tables",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advanced_rest_api_flask-master/oa.py": {
        "get_github_token": {
            "name": "get_github_token",
            "location": 21,
            "return": [],
            "arguments": {}
        }
    },
    "advanced_rest_api_flask-master/libs/image_helper.py": {
        "save_image": {
            "name": "save_image",
            "location": 16,
            "return": [],
            "arguments": {
                "image": [
                    "str"
                ],
                "folder": [
                    "None",
                    "str"
                ],
                "name": [
                    "None",
                    "str"
                ]
            }
        },
        "get_path": {
            "name": "get_path",
            "location": 21,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ],
                "folder": [
                    "str"
                ]
            }
        },
        "find_image_any_format": {
            "name": "find_image_any_format",
            "location": 26,
            "return": [
                "str",
                "list[]",
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes"
                ],
                "folder": [
                    "str",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "_retrieve_filename": {
            "name": "_retrieve_filename",
            "location": 36,
            "return": [
                "str",
                "typing.TextIO",
                "FileStorage"
            ],
            "arguments": {
                "file": [
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "is_filename_safe": {
            "name": "is_filename_safe",
            "location": 43,
            "return": [],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "get_basename": {
            "name": "get_basename",
            "location": 51,
            "return": [],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "get_extension": {
            "name": "get_extension",
            "location": 60,
            "return": [],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/libs/mailgun.py": {
        "MailGunException.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "Mailgun.send_confirmation_email": {
            "name": "send_confirmation_email",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[typing.Any]",
                    "None",
                    "dict[, ]",
                    "list[list[]]",
                    "list[str]"
                ],
                "emails": [
                    "str",
                    "None",
                    "list[int]"
                ],
                "subject": [
                    "str",
                    "None",
                    "list[int]"
                ],
                "text": [
                    "str",
                    "None",
                    "list[int]"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/libs/strings.py": {
        "refresh": {
            "name": "refresh",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "gettext": {
            "name": "gettext",
            "location": 23,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/libs/__init__.py": {},
    "advanced_rest_api_flask-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "revision": [],
                "directives": []
            }
        }
    },
    "advanced_rest_api_flask-master/migrations/versions/3092e9a8fb98_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advanced_rest_api_flask-master/migrations/versions/e5de4a05366d_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advanced_rest_api_flask-master/models/confirmation.py": {
        "ConfirmationModel.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "ConfirmationModel.find_by_id": {
            "name": "find_by_id",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "typing.Sequence[int]",
                    "None"
                ],
                "_id": [
                    "str",
                    "int",
                    "typing.Sequence[int]",
                    "None"
                ]
            }
        },
        "ConfirmationModel.expired": {
            "name": "expired",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmationModel.force_to_expire": {
            "name": "force_to_expire",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmationModel.save_to_db": {
            "name": "save_to_db",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmationModel.delete_from_db": {
            "name": "delete_from_db",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advanced_rest_api_flask-master/models/item.py": {
        "ItemModel.find_by_name": {
            "name": "find_by_name",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Sequence[int]",
                    "None"
                ],
                "name": [
                    "str",
                    "typing.Sequence[int]",
                    "None"
                ]
            }
        },
        "ItemModel.save_to_db": {
            "name": "save_to_db",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemModel.delete_from_db": {
            "name": "delete_from_db",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ItemModel.find_all": {
            "name": "find_all",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/models/store.py": {
        "StoreModel.find_by_name": {
            "name": "find_by_name",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Sequence[int]",
                    "None"
                ],
                "name": [
                    "str",
                    "typing.Sequence[int]",
                    "None"
                ]
            }
        },
        "StoreModel.save_to_db": {
            "name": "save_to_db",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreModel.delete_from_db": {
            "name": "delete_from_db",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreModel.find_all": {
            "name": "find_all",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "int"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/models/user.py": {
        "UserModel.most_recent_confirmation": {
            "name": "most_recent_confirmation",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserModel.save_to_db": {
            "name": "save_to_db",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModel.delete_from_db": {
            "name": "delete_from_db",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModel.send_confirmation_email": {
            "name": "send_confirmation_email",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserModel.find_by_username": {
            "name": "find_by_username",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]",
                    "typing.Type"
                ],
                "username": [
                    "str",
                    "list[str]",
                    "typing.Type"
                ]
            }
        },
        "UserModel.find_by_id": {
            "name": "find_by_id",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "typing.Sequence[int]",
                    "None"
                ],
                "_id": [
                    "str",
                    "int",
                    "typing.Sequence[int]",
                    "None"
                ]
            }
        },
        "UserModel.find_by_email": {
            "name": "find_by_email",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "email": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/models/__init__.py": {},
    "advanced_rest_api_flask-master/resources/confirmation.py": {
        "Confirmation.get": {
            "name": "get",
            "location": 19,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[R]",
                    "list[manager.models.language.Language]",
                    "bool",
                    "list[]"
                ],
                "confirmation_id": [
                    "int"
                ]
            }
        },
        "ConfirmationByUser.get": {
            "name": "get",
            "location": 43,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]",
                "tuple[typing.Union[dict[typing.Text, typing.Union[int,list[]]],int]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "list[str]",
                    "str"
                ],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ConfirmationByUser.post": {
            "name": "post",
            "location": 57,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]",
                "tuple[typing.Union[dict[typing.Text, str],int]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "list[str]",
                    "None",
                    "list[int]"
                ],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/resources/github_login.py": {
        "GithubLogin.get": {
            "name": "get",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "GithubAuthorized.get": {
            "name": "get",
            "location": 19,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/resources/image.py": {
        "ImageUpload.post": {
            "name": "post",
            "location": 20,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "Image.get": {
            "name": "get",
            "location": 42,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "typing.Iterable[tuple[typing.Union[str,str]]]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Image.delete": {
            "name": "delete",
            "location": 55,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "bool",
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "AvatarUpload.put": {
            "name": "put",
            "location": 74,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "list[dict[, ]]",
                    "typing.Type"
                ]
            }
        },
        "Avatar.get": {
            "name": "get",
            "location": 104,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "list[str]",
                    "str"
                ],
                "user_id": [
                    "int",
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/resources/item.py": {
        "Item.get": {
            "name": "get",
            "location": 24,
            "return": [
                "tuple[int]",
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Item.post": {
            "name": "post",
            "location": 32,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]",
                "tuple[int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "set[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Item.delete": {
            "name": "delete",
            "location": 52,
            "return": [
                "dict[typing.Text, ]",
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "set[str]",
                    "list[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Item.put": {
            "name": "put",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "tuple[]",
                    "typing.Mapping"
                ]
            }
        },
        "ItemList.get": {
            "name": "get",
            "location": 80,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]",
                "tuple[typing.Union[dict[typing.Text, list[]],int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advanced_rest_api_flask-master/resources/store.py": {
        "Store.get": {
            "name": "get",
            "location": 16,
            "return": [
                "tuple[int]",
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[str]"
                ],
                "name": [
                    "str",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "Store.post": {
            "name": "post",
            "location": 24,
            "return": [
                "dict[typing.Text, ]",
                "tuple[typing.Union[dict[typing.Text, ],int]]",
                "tuple[int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "set[str]"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "Store.delete": {
            "name": "delete",
            "location": 42,
            "return": [
                "dict[typing.Text, ]",
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "set[str]",
                    "list[str]"
                ],
                "name": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "StoreList.get": {
            "name": "get",
            "location": 56,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/resources/user.py": {
        "UserRegister.post": {
            "name": "post",
            "location": 31,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]",
                "tuple[typing.Union[dict[typing.Text, str],int]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "User.get": {
            "name": "get",
            "location": 57,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]",
                "tuple[int]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "list[str]",
                    "str"
                ],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "User.delete": {
            "name": "delete",
            "location": 64,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ],
                "user_id": [
                    "int"
                ]
            }
        },
        "UserLogin.post": {
            "name": "post",
            "location": 74,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "UserLogout.post": {
            "name": "post",
            "location": 96,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "TokenRefresh.post": {
            "name": "post",
            "location": 105,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Union[dict[str, dict[str, typing.Any]],str,list[float],list[]]],int]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "SetPassword.post": {
            "name": "post",
            "location": 114,
            "return": [
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "str"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/resources/__init__.py": {},
    "advanced_rest_api_flask-master/schemas/confirmation.py": {},
    "advanced_rest_api_flask-master/schemas/image.py": {
        "FileStorageField._deserialize": {
            "name": "_deserialize",
            "location": 12,
            "return": [
                "None",
                "str",
                "int",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None",
                    "int",
                    "typing.Type"
                ],
                "attr": [
                    "dict[, ]",
                    "str"
                ],
                "data": [
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/schemas/item.py": {},
    "advanced_rest_api_flask-master/schemas/store.py": {},
    "advanced_rest_api_flask-master/schemas/user.py": {
        "UserSchema._pre_dump": {
            "name": "_pre_dump",
            "location": 13,
            "return": [
                "str",
                "float",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "advanced_rest_api_flask-master/schemas/__init__.py": {}
}
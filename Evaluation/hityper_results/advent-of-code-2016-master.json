{
    "advent-of-code-2016-master/day01/taxi.py": {
        "distance": {
            "name": "distance",
            "location": 31,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "coords": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "manhattan_distance": {
            "name": "manhattan_distance",
            "location": 96,
            "return": [],
            "arguments": {
                "direction_string": [
                    "str"
                ],
                "taxi": [
                    "None",
                    "str",
                    "dict[str, dict[, ]]",
                    "tuple[typing.Union[int,int]]",
                    "typing.IO"
                ]
            }
        },
        "visited_twice": {
            "name": "visited_twice",
            "location": 111,
            "return": [],
            "arguments": {
                "direction_string": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TurnDirection.from_char": {
            "name": "from_char",
            "location": 22,
            "return": [],
            "arguments": {
                "c": [
                    "str",
                    "None"
                ]
            }
        },
        "Taxi.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Taxi.turn": {
            "name": "turn",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "dict[, ]",
                    "float",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "Taxi.move": {
            "name": "move",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": []
            }
        }
    },
    "advent-of-code-2016-master/day01/taxi_test.py": {
        "TestCase.test_manhattan_distance": {
            "name": "test_manhattan_distance",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_visited_twice": {
            "name": "test_visited_twice",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent-of-code-2016-master/day01/__init__.py": {},
    "advent-of-code-2016-master/day02/bathroom.py": {
        "get_bathroom_code": {
            "name": "get_bathroom_code",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "lines": [
                    "str"
                ]
            }
        },
        "get_cross_bathroom_code": {
            "name": "get_cross_bathroom_code",
            "location": 36,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "lines": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent-of-code-2016-master/day02/bathroom_test.py": {
        "TestCase.test_get_bathroom_code": {
            "name": "test_get_bathroom_code",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_get_cross_bathroom_code": {
            "name": "test_get_cross_bathroom_code",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent-of-code-2016-master/day02/__init__.py": {},
    "advent-of-code-2016-master/day03/triangles.py": {
        "is_triangle": {
            "name": "is_triangle",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "float",
                    "int"
                ],
                "b": [
                    "float",
                    "int"
                ],
                "c": [
                    "float",
                    "int"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "part2": {
            "name": "part2",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent-of-code-2016-master/day03/__init__.py": {},
    "advent-of-code-2016-master/day04/checksum.py": {
        "is_real_room": {
            "name": "is_real_room",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "get_checksum": {
            "name": "get_checksum",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "sum_of_sector_ids": {
            "name": "sum_of_sector_ids",
            "location": 25,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "lines": [
                    "list[typing.AnyStr]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "shift_letter": {
            "name": "shift_letter",
            "location": 32,
            "return": [],
            "arguments": {
                "letter": [],
                "amount": [
                    "int"
                ]
            }
        },
        "decode_shift_cipher": {
            "name": "decode_shift_cipher",
            "location": 36,
            "return": [
                "typing.Text",
                "dict[str, list[str]]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent-of-code-2016-master/day04/checksum_test.py": {
        "TestCase.test_is_real_room": {
            "name": "test_is_real_room",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_get_checksum": {
            "name": "test_get_checksum",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_decode_shift_cipher": {
            "name": "test_decode_shift_cipher",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent-of-code-2016-master/day04/__init__.py": {},
    "advent-of-code-2016-master/day05/day05.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent-of-code-2016-master/day06/day06.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "part1": {
            "name": "part1",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "part2": {
            "name": "part2",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent-of-code-2016-master/day07/ipv7.py": {
        "supports_tls": {
            "name": "supports_tls",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "None",
                    "frozenset"
                ]
            }
        },
        "supports_ssl": {
            "name": "supports_ssl",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "None",
                    "frozenset"
                ]
            }
        },
        "get_bab_pattern": {
            "name": "get_bab_pattern",
            "location": 42,
            "return": [],
            "arguments": {
                "a": [
                    "str",
                    "dict[, ]"
                ],
                "b": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "is_abba_pattern": {
            "name": "is_abba_pattern",
            "location": 46,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "part1": {
            "name": "part1",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "part2": {
            "name": "part2",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent-of-code-2016-master/day07/ipv7_test.py": {
        "TestCase.test_tls": {
            "name": "test_tls",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_ssl": {
            "name": "test_ssl",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent-of-code-2016-master/day07/__init__.py": {},
    "advent-of-code-2016-master/day08/two_factor.py": {
        "make_array": {
            "name": "make_array",
            "location": 12,
            "return": [],
            "arguments": {
                "rows": [
                    "int"
                ],
                "cols": [
                    "int"
                ]
            }
        },
        "rect": {
            "name": "rect",
            "location": 16,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "arr": [
                    "float",
                    "str",
                    "int"
                ],
                "A": [
                    "float",
                    "str",
                    "int"
                ],
                "B": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "rotate_col": {
            "name": "rotate_col",
            "location": 21,
            "return": [
                "bool",
                "float",
                "typing.Sequence[int]"
            ],
            "arguments": {
                "arr": [
                    "bool",
                    "float",
                    "typing.Sequence[int]"
                ],
                "index": [
                    "str",
                    "int",
                    "None"
                ],
                "amount": [
                    "int",
                    "float"
                ]
            }
        },
        "rotate_row": {
            "name": "rotate_row",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "arr": [
                    "bool"
                ],
                "index": [
                    "int",
                    "list[]"
                ],
                "amount": [
                    "int",
                    "None"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "advent-of-code-2016-master/day08/two_factor_test.py": {
        "TestCase.test_rotation": {
            "name": "test_rotation",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent-of-code-2016-master/day08/__init__.py": {},
    "advent-of-code-2016-master/day09/decompress.py": {
        "part1": {
            "name": "part1",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "part2": {
            "name": "part2",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "decompress": {
            "name": "decompress",
            "location": 31,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "advent-of-code-2016-master/day09/decompress_test.py": {
        "TestCase.test_decompress": {
            "name": "test_decompress",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent-of-code-2016-master/day09/__init__.py": {},
    "advent-of-code-2016-master/day10/bots.py": {
        "get_or_add": {
            "name": "get_or_add",
            "location": 68,
            "return": [
                "Bot"
            ],
            "arguments": {
                "m": [],
                "index": [
                    "str"
                ]
            }
        },
        "part1": {
            "name": "part1",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Bot.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int",
                    "float"
                ],
                "low": [
                    "None",
                    "int",
                    "float"
                ],
                "high": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "Bot.check_for_part1_answer": {
            "name": "check_for_part1_answer",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.get_input": {
            "name": "get_input",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "Bot.ready": {
            "name": "ready",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bot.give_value": {
            "name": "give_value",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other_bot": [],
                "value_type": [
                    "str",
                    "typing.Iterable[str]",
                    "None",
                    "int"
                ]
            }
        },
        "Bot.give_output": {
            "name": "give_output",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list[int]",
                    "str",
                    "bytes"
                ],
                "value_type": [
                    "str"
                ],
                "outputs": [
                    "int",
                    "list[int]",
                    "str",
                    "bytes"
                ]
            }
        },
        "Bot.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "advent-of-code-2016-master/day10/__init__.py": {}
}
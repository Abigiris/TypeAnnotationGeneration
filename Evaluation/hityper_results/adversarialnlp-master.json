{
    "adversarialnlp-master/setup.py": {},
    "adversarialnlp-master/adversarialnlp/run.py": {},
    "adversarialnlp-master/adversarialnlp/version.py": {},
    "adversarialnlp-master/adversarialnlp/__init__.py": {},
    "adversarialnlp-master/adversarialnlp/commands/test_install.py": {
        "_get_module_root": {
            "name": "_get_module_root",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "_run_test": {
            "name": "_run_test",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "TestInstall.add_subparser": {
            "name": "add_subparser",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "parser": []
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/commands/__init__.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "prog": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "subcommand_overrides": [
                    "dict[, ]"
                ]
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/common/file_utils.py": {
        "built": {
            "name": "built",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [],
                "version_string": [
                    "None"
                ]
            }
        },
        "mark_done": {
            "name": "mark_done",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "fnames": [],
                "version_string": [
                    "typing.Text"
                ]
            }
        },
        "download": {
            "name": "download",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "path": [],
                "fname": [],
                "redownload": [
                    "bool"
                ]
            }
        },
        "make_dir": {
            "name": "make_dir",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "move": {
            "name": "move",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "path1": [],
                "path2": []
            }
        },
        "remove_dir": {
            "name": "remove_dir",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "untar": {
            "name": "untar",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "fname": [],
                "deleteTar": [
                    "bool"
                ]
            }
        },
        "cat": {
            "name": "cat",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "file1": [],
                "file2": [],
                "outfile": [],
                "deleteFiles": [
                    "bool"
                ]
            }
        },
        "_get_confirm_token": {
            "name": "_get_confirm_token",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "response": []
            }
        },
        "download_from_google_drive": {
            "name": "download_from_google_drive",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "gd_id": [],
                "destination": []
            }
        },
        "download_files": {
            "name": "download_files",
            "location": 249,
            "return": [
                "list[]"
            ],
            "arguments": {
                "fnames": [],
                "local_folder": [],
                "version": [
                    "typing.Text"
                ],
                "paths": [
                    "typing.Text"
                ]
            }
        },
        "ProgressLogger.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "throttle": [
                    "int"
                ],
                "should_humanize": [
                    "bool"
                ]
            }
        },
        "ProgressLogger.humanize": {
            "name": "humanize",
            "location": 37,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "num": [],
                "suffix": [
                    "typing.Text"
                ]
            }
        },
        "ProgressLogger.log": {
            "name": "log",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "curr": [],
                "total": [],
                "width": [
                    "int"
                ],
                "force": [
                    "bool"
                ]
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/common/__init__.py": {},
    "adversarialnlp-master/adversarialnlp/generators/generator.py": {
        "Generator.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_seeds": [
                    "None",
                    "int",
                    "tuple[]",
                    "float"
                ],
                "quiet": [
                    "bool"
                ]
            }
        },
        "Generator.generate_from_seed": {
            "name": "generate_from_seed",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "Generator.__call__": {
            "name": "__call__",
            "location": 65,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "seeds": [
                    "list[]",
                    "typing.Sequence[str]",
                    "str",
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "num_epochs": [
                    "None",
                    "int",
                    "float"
                ],
                "shuffle": [
                    "bool"
                ]
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/__init__.py": {},
    "adversarialnlp-master/adversarialnlp/generators/addsent/addsent_generator.py": {
        "AddSentGenerator.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "alteration_strategy": [],
                "prepend": [],
                "use_answer_placeholder": [],
                "default_seeds": [],
                "quiet": []
            }
        },
        "AddSentGenerator.close": {
            "name": "close",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddSentGenerator._annotate": {
            "name": "_annotate",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "annotators": []
            }
        },
        "AddSentGenerator._alter_question": {
            "name": "_alter_question",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "question": [],
                "tokens": [],
                "const_parse": []
            }
        },
        "AddSentGenerator.generate_from_seed": {
            "name": "generate_from_seed",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/addsent/corenlp.py": {
        "StanfordCoreNLP.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_or_host": [],
                "port": [
                    "None"
                ],
                "memory": [
                    "typing.Text"
                ],
                "lang": [
                    "typing.Text"
                ],
                "timeout": [
                    "int"
                ],
                "quiet": [
                    "bool"
                ],
                "logging_level": [],
                "max_retries": [
                    "int"
                ]
            }
        },
        "StanfordCoreNLP.__enter__": {
            "name": "__enter__",
            "location": 130,
            "return": [
                "StanfordCoreNLP"
            ],
            "arguments": {
                "self": []
            }
        },
        "StanfordCoreNLP.__exit__": {
            "name": "__exit__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "StanfordCoreNLP.close": {
            "name": "close",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StanfordCoreNLP.annotate": {
            "name": "annotate",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "properties": [
                    "None"
                ]
            }
        },
        "StanfordCoreNLP.tregex": {
            "name": "tregex",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": [],
                "pattern": []
            }
        },
        "StanfordCoreNLP.tokensregex": {
            "name": "tokensregex",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": [],
                "pattern": []
            }
        },
        "StanfordCoreNLP.semgrex": {
            "name": "semgrex",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": [],
                "pattern": []
            }
        },
        "StanfordCoreNLP.word_tokenize": {
            "name": "word_tokenize",
            "location": 182,
            "return": [
                "tuple[list[tuple[]]]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "sentence": [],
                "span": [
                    "bool"
                ]
            }
        },
        "StanfordCoreNLP.pos_tag": {
            "name": "pos_tag",
            "location": 194,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "StanfordCoreNLP.ner": {
            "name": "ner",
            "location": 204,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "StanfordCoreNLP.parse": {
            "name": "parse",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "StanfordCoreNLP.dependency_parse": {
            "name": "dependency_parse",
            "location": 218,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "StanfordCoreNLP.coref": {
            "name": "coref",
            "location": 223,
            "return": [
                "list[list[tuple[]]]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "StanfordCoreNLP.switch_language": {
            "name": "switch_language",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "typing.Text"
                ]
            }
        },
        "StanfordCoreNLP._request": {
            "name": "_request",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "annotators": [
                    "None"
                ],
                "data": []
            }
        },
        "StanfordCoreNLP._check_args": {
            "name": "_check_args",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StanfordCoreNLP._check_language": {
            "name": "_check_language",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lang": []
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/addsent/squad_reader.py": {
        "squad_reader": {
            "name": "squad_reader",
            "location": 10,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "file_path": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/addsent/utils.py": {
        "rejoin": {
            "name": "rejoin",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "tokens": [
                    "str"
                ],
                "sep": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "typing.Hashable",
                    "dict[, ]"
                ]
            }
        },
        "get_tokens_for_answers": {
            "name": "get_tokens_for_answers",
            "location": 125,
            "return": [
                "tuple[list[typing.Text]]",
                "tuple[typing.Union[int,None,list[typing.Text]]]"
            ],
            "arguments": {
                "answer_objs": [
                    "dict[, ]",
                    "str",
                    "list[dict[, ]]"
                ],
                "corenlp_obj": [
                    "str",
                    "list[]"
                ]
            }
        },
        "get_determiner_for_answers": {
            "name": "get_determiner_for_answers",
            "location": 148,
            "return": [
                "typing.Text",
                "None"
            ],
            "arguments": {
                "answer_objs": [
                    "str"
                ]
            }
        },
        "compress_whnp": {
            "name": "compress_whnp",
            "location": 157,
            "return": [
                "typing.Iterable[typing.Any]",
                "int",
                "typing.Mapping",
                "ConstituencyParse"
            ],
            "arguments": {
                "tree": [
                    "typing.Iterable[typing.Any]",
                    "int",
                    "typing.Mapping"
                ],
                "inside_whnp": [
                    "bool"
                ]
            }
        },
        "read_const_parse": {
            "name": "read_const_parse",
            "location": 195,
            "return": [
                "tuple[typing.Union[typing.Any,list[typing.Any]]]",
                "list[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]",
                "str",
                "tuple[typing.Union[typing.Literal,list[typing.Any]]]"
            ],
            "arguments": {
                "parse_str": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ConstituencyParse.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Exception",
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "dict[str, str]"
                ],
                "children": [
                    "None",
                    "bool",
                    "str",
                    "list[]",
                    "tuple[typing.Union[list[str],typing.Any,None,typing.Any,None]]"
                ],
                "word": [
                    "None",
                    "str"
                ],
                "index": [
                    "None",
                    "str"
                ]
            }
        },
        "ConstituencyParse._recursive_parse_corenlp": {
            "name": "_recursive_parse_corenlp",
            "location": 20,
            "return": [
                "tuple[]",
                "tuple[str]"
            ],
            "arguments": {
                "cls": [],
                "tokens": [
                    "str"
                ],
                "i": [],
                "j": [
                    "str"
                ]
            }
        },
        "ConstituencyParse.from_corenlp": {
            "name": "from_corenlp",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [],
                "s": [
                    "str"
                ]
            }
        },
        "ConstituencyParse.is_singleton": {
            "name": "is_singleton",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstituencyParse.print_tree": {
            "name": "print_tree",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "ConstituencyParse.get_phrase": {
            "name": "get_phrase",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConstituencyParse.get_start_index": {
            "name": "get_start_index",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstituencyParse.get_end_index": {
            "name": "get_end_index",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstituencyParse._recursive_replace_words": {
            "name": "_recursive_replace_words",
            "location": 90,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "cls": [
                    "list[typing.Type]",
                    "int",
                    "list[int]"
                ],
                "tree": [],
                "new_words": [
                    "str",
                    "tuple[int]"
                ],
                "i": [
                    "bool"
                ]
            }
        },
        "ConstituencyParse.replace_words": {
            "name": "replace_words",
            "location": 101,
            "return": [],
            "arguments": {
                "cls": [],
                "tree": [],
                "new_words": []
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/addsent/__init__.py": {},
    "adversarialnlp-master/adversarialnlp/generators/addsent/rules/alteration_rules.py": {
        "alter_special": {
            "name": "alter_special",
            "location": 18,
            "return": [
                "list[]",
                "None"
            ],
            "arguments": {
                "token": [
                    "list[str]",
                    "str",
                    "tuple[typing.Union[int,str]]"
                ]
            }
        },
        "alter_nearby": {
            "name": "alter_nearby",
            "location": 24,
            "return": [],
            "arguments": {
                "pos_list": [
                    "bool",
                    "list[str]",
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ],
                "ignore_pos": [
                    "bool"
                ],
                "is_ner": [
                    "bool"
                ]
            }
        },
        "alter_entity_glove": {
            "name": "alter_entity_glove",
            "location": 48,
            "return": [
                "None",
                "list[]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "list[str]"
                ],
                "nearby_word_dict": [
                    "list[dict[str, typing.Any]]",
                    "list[]",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "alter_entity_type": {
            "name": "alter_entity_type",
            "location": 62,
            "return": [
                "None",
                "list[typing.Text]"
            ],
            "arguments": {
                "token": [
                    "bytes",
                    "str"
                ]
            }
        },
        "alter_wordnet_antonyms": {
            "name": "alter_wordnet_antonyms",
            "location": 88,
            "return": [
                "None",
                "list[]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "alter_nearby.func": {
            "name": "func",
            "location": 25,
            "return": [
                "None",
                "list[]"
            ],
            "arguments": {
                "token": [],
                "nearby_word_dict": [
                    "None"
                ],
                "postag_dict": [
                    "None"
                ]
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/addsent/rules/answer_rules.py": {
        "ans_number": {
            "name": "ans_number",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "typing.Sequence[T]",
                    "tuple[]",
                    "list[int]"
                ],
                "tokens": [
                    "tuple[]",
                    "list[int]"
                ],
                "q": [
                    "bool",
                    "typing.Sequence[T]",
                    "tuple[]",
                    "list[int]"
                ]
            }
        },
        "ans_date": {
            "name": "ans_date",
            "location": 78,
            "return": [
                "None",
                "typing.Pattern"
            ],
            "arguments": {
                "a": [
                    "str"
                ],
                "tokens": [
                    "str",
                    "set[int]"
                ],
                "q": [
                    "typing.Sequence[str]",
                    "int",
                    "tuple[typing.Union[typing.Sequence[typing.Any],typing.Sequence[str],typing.Sequence[typing.Any]]]",
                    "tuple[typing.Union[str,typing.Sequence[str],typing.Sequence[str]]]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "ans_entity_full": {
            "name": "ans_entity_full",
            "location": 104,
            "return": [],
            "arguments": {
                "ner_tag": [
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ],
                "new_ans": [
                    "str",
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "ans_abbrev": {
            "name": "ans_abbrev",
            "location": 112,
            "return": [],
            "arguments": {
                "new_ans": [
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "float"
                ]
            }
        },
        "ans_match_wh": {
            "name": "ans_match_wh",
            "location": 120,
            "return": [],
            "arguments": {
                "wh_word": [
                    "list[float]",
                    "list[str]",
                    "None",
                    "str",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "new_ans": [
                    "list[float]",
                    "list[str]",
                    "None",
                    "str",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "ans_pos": {
            "name": "ans_pos",
            "location": 128,
            "return": [],
            "arguments": {
                "pos": [
                    "float",
                    "typing.TextIO",
                    "int",
                    "None",
                    "str",
                    "list[str]"
                ],
                "new_ans": [
                    "float",
                    "typing.TextIO",
                    "int",
                    "None",
                    "str",
                    "list[str]"
                ],
                "end": [
                    "bool"
                ],
                "add_dt": [
                    "bool"
                ]
            }
        },
        "ans_catch_all": {
            "name": "ans_catch_all",
            "location": 142,
            "return": [],
            "arguments": {
                "new_ans": [
                    "typing.Callable[, ]",
                    "list[]",
                    "int"
                ]
            }
        },
        "ans_entity_full.func": {
            "name": "func",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "tokens": [],
                "q": []
            }
        },
        "ans_abbrev.func": {
            "name": "func",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "tokens": [],
                "q": []
            }
        },
        "ans_match_wh.func": {
            "name": "func",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "tokens": [],
                "q": []
            }
        },
        "ans_pos.func": {
            "name": "func",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "tokens": [],
                "q": [],
                "determiner": []
            }
        },
        "ans_catch_all.func": {
            "name": "func",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "tokens": [],
                "q": []
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/addsent/rules/conversion_rules.py": {
        "_check_match": {
            "name": "_check_match",
            "location": 25,
            "return": [],
            "arguments": {
                "node": [],
                "pattern_tok": []
            }
        },
        "_recursive_match_pattern": {
            "name": "_recursive_match_pattern",
            "location": 41,
            "return": [],
            "arguments": {
                "pattern_toks": [],
                "stack": [],
                "matches": []
            }
        },
        "match_pattern": {
            "name": "match_pattern",
            "location": 65,
            "return": [],
            "arguments": {
                "pattern": [],
                "const_parse": []
            }
        },
        "run_postprocessing": {
            "name": "run_postprocessing",
            "location": 78,
            "return": [],
            "arguments": {
                "s": [],
                "rules": [],
                "all_args": []
            }
        },
        "convert_whp": {
            "name": "convert_whp",
            "location": 97,
            "return": [],
            "arguments": {
                "node": [],
                "q": [],
                "a": [],
                "tokens": [],
                "quiet": []
            }
        },
        "fix_style": {
            "name": "fix_style",
            "location": 111,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "ConversionRule.convert": {
            "name": "convert",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "q": [],
                "a": [],
                "tokens": [],
                "const_parse": [],
                "run_fix_style": []
            }
        },
        "ConstituencyRule.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "in_pattern": [],
                "out_pattern": [],
                "postproc": []
            }
        },
        "ConstituencyRule.convert": {
            "name": "convert",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "q": [],
                "a": [],
                "tokens": [],
                "const_parse": [],
                "run_fix_style": []
            }
        },
        "ConstituencyRule.gen_output": {
            "name": "gen_output",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "fmt_args": []
            }
        },
        "ReplaceRule.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "replacement": [],
                "start": []
            }
        },
        "ReplaceRule.convert": {
            "name": "convert",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "q": [],
                "a": [],
                "tokens": [],
                "const_parse": [],
                "run_fix_style": []
            }
        },
        "FindWHPRule._recursive_convert": {
            "name": "_recursive_convert",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "q": [],
                "a": [],
                "tokens": [],
                "found_whp": []
            }
        },
        "FindWHPRule.convert": {
            "name": "convert",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "q": [],
                "a": [],
                "tokens": [],
                "const_parse": [],
                "run_fix_style": []
            }
        },
        "AnswerRule.convert": {
            "name": "convert",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "q": [],
                "a": [],
                "tokens": [],
                "const_parse": [],
                "run_fix_style": []
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/addsent/rules/__init__.py": {},
    "adversarialnlp-master/adversarialnlp/generators/swag/activitynet_captions_reader.py": {
        "ActivityNetCaptionsDatasetReader.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool"
                ],
                "tokenizer": [
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "tuple[typing.Union[int,int]]",
                    "list[int]",
                    "str",
                    "list[str]"
                ],
                "token_indexers": [
                    "None",
                    "int"
                ]
            }
        },
        "ActivityNetCaptionsDatasetReader._read": {
            "name": "_read",
            "location": 64,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "ActivityNetCaptionsDatasetReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 75,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": [],
                "video_id": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]"
                ],
                "first_sentence": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "second_sentence": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/swag/openai_transformer_model.py": {
        "OpenAITransformerLanguageModel.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "vocab": [],
                "openai_token_embedder": [],
                "remove_bos_eos": []
            }
        },
        "OpenAITransformerLanguageModel._get_target_token_embedding": {
            "name": "_get_target_token_embedding",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "token_embeddings": [],
                "mask": [],
                "direction": []
            }
        },
        "OpenAITransformerLanguageModel._compute_loss": {
            "name": "_compute_loss",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "lm_embeddings": [],
                "token_embeddings": [],
                "forward_targets": [],
                "backward_targets": []
            }
        },
        "OpenAITransformerLanguageModel.forward": {
            "name": "forward",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/swag/simple_bilm.py": {
        "_de_duplicate_generations": {
            "name": "_de_duplicate_generations",
            "location": 23,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "generations": []
            }
        },
        "StackedLstm.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": [],
                "num_layers": [],
                "recurrent_dropout_probability": [
                    "float"
                ],
                "use_highway": [
                    "bool"
                ],
                "use_input_projection_bias": [
                    "bool"
                ],
                "go_forward": [
                    "bool"
                ]
            }
        },
        "StackedLstm.forward": {
            "name": "forward",
            "location": 97,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "initial_state": []
            }
        },
        "SimpleBiLM.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [],
                "recurrent_dropout_probability": [
                    "float"
                ],
                "embedding_dropout_probability": [
                    "float"
                ],
                "input_size": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ]
            }
        },
        "SimpleBiLM.embed_words": {
            "name": "embed_words",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "SimpleBiLM.timestep_to_ids": {
            "name": "timestep_to_ids",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "timestep_tokenized": []
            }
        },
        "SimpleBiLM.batch_to_ids": {
            "name": "batch_to_ids",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "stories_tokenized": []
            }
        },
        "SimpleBiLM.conditional_generation": {
            "name": "conditional_generation",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "gt_completion": [],
                "batch_size": [
                    "int"
                ],
                "max_gen_length": [
                    "int"
                ],
                "same_length_as_gt": [
                    "bool"
                ],
                "first_is_gold": [
                    "bool"
                ]
            }
        },
        "SimpleBiLM._chunked_logsoftmaxes": {
            "name": "_chunked_logsoftmaxes",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "activation": [],
                "word_targets": [],
                "chunk_size": [
                    "int"
                ]
            }
        },
        "SimpleBiLM.forward": {
            "name": "forward",
            "location": 302,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "words": [],
                "use_forward": [
                    "bool"
                ],
                "use_reverse": [
                    "bool"
                ],
                "compute_logprobs": [
                    "bool"
                ]
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/swag/swag_generator.py": {
        "SwagGenerator.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default_seeds": [
                    "None"
                ],
                "quiet": [
                    "bool"
                ]
            }
        },
        "SwagGenerator._find_VP": {
            "name": "_find_VP",
            "location": 77,
            "return": [
                "list[tuple[typing.Text]]",
                "list[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "tree": []
            }
        },
        "SwagGenerator._split_on_final_vp": {
            "name": "_split_on_final_vp",
            "location": 112,
            "return": [
                "tuple[None]",
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "SwagGenerator.generate_from_seed": {
            "name": "generate_from_seed",
            "location": 125,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "SwagGenerator._find_VP._recurse_on_children": {
            "name": "_recurse_on_children",
            "location": 81,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {}
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/swag/utils.py": {
        "optimistic_restore": {
            "name": "optimistic_restore",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "network": [],
                "state_dict": []
            }
        },
        "pairwise": {
            "name": "pairwise",
            "location": 27,
            "return": [],
            "arguments": {
                "iterable": []
            }
        },
        "n2w_1k": {
            "name": "n2w_1k",
            "location": 33,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "num": [],
                "use_ordinal": [
                    "bool"
                ]
            }
        },
        "postprocess": {
            "name": "postprocess",
            "location": 38,
            "return": [],
            "arguments": {
                "sentence": []
            }
        },
        "remove_allcaps": {
            "name": "remove_allcaps",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "sent": []
            }
        },
        "remove_allcaps._sanitize": {
            "name": "_sanitize",
            "location": 76,
            "return": [],
            "arguments": {
                "word": [],
                "is_first": []
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/generators/swag/__init__.py": {},
    "adversarialnlp-master/adversarialnlp/pruners/pruner.py": {
        "Pruner.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/pruners/__init__.py": {},
    "adversarialnlp-master/adversarialnlp/tests/__init__.py": {},
    "adversarialnlp-master/adversarialnlp/tests/dataset_readers/activitynet_captions_test.py": {
        "TestActivityNetCaptionsReader.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/tests/dataset_readers/__init__.py": {},
    "adversarialnlp-master/adversarialnlp/tests/generators/addsent_generator_test.py": {
        "TestSwagGenerator.test_yield_one_epoch_generation_over_the_data_once": {
            "name": "test_yield_one_epoch_generation_over_the_data_once",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/tests/generators/swag_generator_test.py": {
        "GeneratorTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorTest.create_instance": {
            "name": "create_instance",
            "location": 44,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": [],
                "first_sentence": [],
                "second_sentence": []
            }
        },
        "GeneratorTest.assert_instances_are_correct": {
            "name": "assert_instances_are_correct",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidate_instances": [
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "TestSwagGenerator.test_yield_one_epoch_generation_over_the_data_once": {
            "name": "test_yield_one_epoch_generation_over_the_data_once",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratorTest.setUp.LazyIterable.__iter__": {
            "name": "__iter__",
            "location": 38,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adversarialnlp-master/adversarialnlp/tests/generators/__init__.py": {},
    "adversarialnlp-master/docs/conf.py": {},
    "adversarialnlp-master/tutorials/usage.py": {}
}
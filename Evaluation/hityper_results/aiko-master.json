{
    "aiko-master/setup.py": {},
    "aiko-master/aiko/application.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "loop": [],
                "protocol": [],
                "request": [],
                "response": [],
                "context": [],
                "requset_charset": [],
                "response_charset": []
            }
        },
        "Application.context": {
            "name": "context",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.request": {
            "name": "request",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.response": {
            "name": "response",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.listen": {
            "name": "listen",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.run": {
            "name": "run",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "host": [],
                "port": []
            }
        },
        "Application.create_server": {
            "name": "create_server",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "loop": [],
                "sock": [],
                "ssl": []
            }
        },
        "Application._next_middleware": {
            "name": "_next_middleware",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "middlewares": [],
                "ctx": []
            }
        },
        "Application._middleware_call": {
            "name": "_middleware_call",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "middlewares": [],
                "ctx": [],
                "next_call": []
            }
        },
        "Application._handle": {
            "name": "_handle",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": []
            }
        },
        "Application.use": {
            "name": "use",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "middleware": []
            }
        },
        "Application.__call__": {
            "name": "__call__",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.run.close": {
            "name": "close",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "Application._next_middleware.next_call": {
            "name": "next_call",
            "location": 191,
            "return": [],
            "arguments": {}
        }
    },
    "aiko-master/aiko/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [],
                "request": [],
                "response": [],
                "app": []
            }
        },
        "Context.app": {
            "name": "app",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Context.loop": {
            "name": "loop",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.request": {
            "name": "request",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.response": {
            "name": "response",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.cookies": {
            "name": "cookies",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.__del__": {
            "name": "__del__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextCookie.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "ContextCookie.__delitem__": {
            "name": "__delitem__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ContextCookie.__setitem__": {
            "name": "__setitem__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "ContextCookie.__getitem__": {
            "name": "__getitem__",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ContextCookie.__iter__": {
            "name": "__iter__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextCookie.__len__": {
            "name": "__len__",
            "location": 129,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextCookie.__contains__": {
            "name": "__contains__",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ContextCookie.get": {
            "name": "get",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": [
                    "None"
                ]
            }
        },
        "ContextCookie.set": {
            "name": "set",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "opt": [
                    "None"
                ]
            }
        },
        "ContextCookie.headers": {
            "name": "headers",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiko-master/aiko/cookies.py": {
        "Cookies.__delitem__": {
            "name": "__delitem__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Cookies.__setitem__": {
            "name": "__setitem__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Cookies.__getitem__": {
            "name": "__getitem__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Cookies.get": {
            "name": "get",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "default": [
                    "None"
                ]
            }
        },
        "Cookies.set": {
            "name": "set",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "opt": [
                    "None"
                ]
            }
        },
        "Cookies.__iter__": {
            "name": "__iter__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cookies.__len__": {
            "name": "__len__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cookies.headers": {
            "name": "headers",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiko-master/aiko/request.py": {
        "RequestParameters.get": {
            "name": "get",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "default": [
                    "None"
                ]
            }
        },
        "RequestParameters.getlist": {
            "name": "getlist",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "default": [
                    "None"
                ]
            }
        },
        "RequestUrl.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "href": [],
                "coding": [
                    "typing.Text"
                ]
            }
        },
        "RequestUrl.decode_bytes": {
            "name": "decode_bytes",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "RequestUrl.query": {
            "name": "query",
            "location": 64,
            "return": [
                "RequestParameters",
                "None"
            ],
            "arguments": {
                "self": [],
                "query_obj": []
            }
        },
        "RequestUrl.raw_query": {
            "name": "raw_query",
            "location": 68,
            "return": [
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestUrl.href": {
            "name": "href",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [],
                "handle": [],
                "transport": [],
                "charset": []
            }
        },
        "Request.default_charset": {
            "name": "default_charset",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "charset": []
            }
        },
        "Request._get_charset": {
            "name": "_get_charset",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.parser": {
            "name": "parser",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Request.feed_data": {
            "name": "feed_data",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Request.should_keep_alive": {
            "name": "should_keep_alive",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.on_url": {
            "name": "on_url",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Request.on_header": {
            "name": "on_header",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Request.on_headers_complete": {
            "name": "on_headers_complete",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.method": {
            "name": "method",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "Request.version": {
            "name": "version",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.app": {
            "name": "app",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Request.proxy": {
            "name": "proxy",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.socket": {
            "name": "socket",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.length": {
            "name": "length",
            "location": 295,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.get": {
            "name": "get",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Request.set": {
            "name": "set",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Request.url": {
            "name": "url",
            "location": 339,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "url_str": []
            }
        },
        "Request.path": {
            "name": "path",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "path_str": []
            }
        },
        "Request.query": {
            "name": "query",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "query_dict": []
            }
        },
        "Request.querystring": {
            "name": "querystring",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "query_str": []
            }
        },
        "Request.search": {
            "name": "search",
            "location": 401,
            "return": [],
            "arguments": {
                "self": [],
                "query_str": []
            }
        },
        "Request.origin": {
            "name": "origin",
            "location": 408,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.href": {
            "name": "href",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.parse_url": {
            "name": "parse_url",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.original_url": {
            "name": "original_url",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.schema": {
            "name": "schema",
            "location": 446,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.protocol": {
            "name": "protocol",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.secure": {
            "name": "secure",
            "location": 468,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.charset": {
            "name": "charset",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.type": {
            "name": "type",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.host": {
            "name": "host",
            "location": 500,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.hostname": {
            "name": "hostname",
            "location": 513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.ips": {
            "name": "ips",
            "location": 520,
            "return": [
                "list[]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.ip": {
            "name": "ip",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.cookies": {
            "name": "cookies",
            "location": 546,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.headers": {
            "name": "headers",
            "location": 553,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.header": {
            "name": "header",
            "location": 560,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.fresh": {
            "name": "fresh",
            "location": 567,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.stale": {
            "name": "stale",
            "location": 585,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.idempotent": {
            "name": "idempotent",
            "location": 592,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiko-master/aiko/response.py": {
        "Response.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [],
                "transport": [],
                "version": [],
                "charset": []
            }
        },
        "Response.app": {
            "name": "app",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Response.headers_sent": {
            "name": "headers_sent",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.status": {
            "name": "status",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "status": []
            }
        },
        "Response.sync_write": {
            "name": "sync_write",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Response.write": {
            "name": "write",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "sync": [
                    "bool"
                ]
            }
        },
        "Response.get": {
            "name": "get",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Response.set": {
            "name": "set",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Response.header": {
            "name": "header",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.headers": {
            "name": "headers",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.body": {
            "name": "body",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "body": []
            }
        },
        "Response.handel_default": {
            "name": "handel_default",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.flush_headers": {
            "name": "flush_headers",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sync": [
                    "bool"
                ]
            }
        },
        "Response.flush_body": {
            "name": "flush_body",
            "location": 352,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.cookies": {
            "name": "cookies",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiko-master/aiko/server.py": {
        "ServerProtocol.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [],
                "handle": [],
                "requset_charset": [],
                "response_charset": []
            }
        },
        "ServerProtocol.connection_made": {
            "name": "connection_made",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "ServerProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "ServerProtocol.data_received": {
            "name": "data_received",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ServerProtocol.complete_handle": {
            "name": "complete_handle",
            "location": 79,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiko-master/aiko/utils.py": {
        "decode_bytes": {
            "name": "decode_bytes",
            "location": 31,
            "return": [],
            "arguments": {
                "data": [],
                "encoding": [
                    "typing.Text"
                ],
                "errors": [
                    "typing.Text"
                ]
            }
        },
        "encode_str": {
            "name": "encode_str",
            "location": 38,
            "return": [],
            "arguments": {
                "data": [],
                "encoding": [
                    "typing.Text"
                ],
                "errors": [
                    "typing.Text"
                ]
            }
        },
        "handle_async_gen": {
            "name": "handle_async_gen",
            "location": 46,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "gen": [],
                "gen_obj": []
            }
        },
        "parse_http_date": {
            "name": "parse_http_date",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "date": []
            }
        },
        "fresh": {
            "name": "fresh",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "req_headers": [],
                "res_headers": []
            }
        },
        "ProxyAttr.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proto": [],
                "target": []
            }
        },
        "ProxyAttr.method_map": {
            "name": "method_map",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProxyAttr.getter_map": {
            "name": "getter_map",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProxyAttr.setter_map": {
            "name": "setter_map",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProxyAttr.reuse_handle": {
            "name": "reuse_handle",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "rename": [],
                "pmap": []
            }
        },
        "ProxyAttr.method": {
            "name": "method",
            "location": 191,
            "return": [
                "ProxyAttr"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "rename": [
                    "None"
                ]
            }
        },
        "ProxyAttr.getter": {
            "name": "getter",
            "location": 210,
            "return": [
                "ProxyAttr"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "rename": [
                    "None"
                ]
            }
        },
        "ProxyAttr.setter": {
            "name": "setter",
            "location": 236,
            "return": [
                "ProxyAttr"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "rename": [
                    "None"
                ]
            }
        },
        "ProxyAttr.access": {
            "name": "access",
            "location": 261,
            "return": [
                "ProxyAttr"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "rename": [
                    "None"
                ]
            }
        },
        "ProxyAttr.__str__": {
            "name": "__str__",
            "location": 269,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyAttr.method.proxy_method": {
            "name": "proxy_method",
            "location": 200,
            "return": [],
            "arguments": {
                "self2": []
            }
        },
        "ProxyAttr.getter.proxy_get": {
            "name": "proxy_get",
            "location": 219,
            "return": [],
            "arguments": {
                "this": []
            }
        },
        "ProxyAttr.setter.proxy_set": {
            "name": "proxy_set",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "this": [],
                "val": []
            }
        }
    },
    "aiko-master/aiko/worker.py": {
        "GunicornWorker.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornWorker.init_process": {
            "name": "init_process",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornWorker.run": {
            "name": "run",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornWorker._check_alive": {
            "name": "_check_alive",
            "location": 53,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornWorker._run": {
            "name": "_run",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornWorker._create_ssl_context": {
            "name": "_create_ssl_context",
            "location": 86,
            "return": [
                "None",
                "SSLContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornWorker.close": {
            "name": "close",
            "location": 102,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornUVLoopWorker.init_process": {
            "name": "init_process",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiko-master/aiko/__init__.py": {},
    "aiko-master/aiko/middleware/__init__.py": {},
    "aiko-master/docs/source/conf.py": {},
    "aiko-master/examples/hello/main.py": {
        "hello": {
            "name": "hello",
            "location": 7,
            "return": [
                "typing.Generator[typing.Text]",
                "typing.Generator[]"
            ],
            "arguments": {
                "ctx": [],
                "next_call": [
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "not_found": {
            "name": "not_found",
            "location": 21,
            "return": [
                "tuple[typing.Union[bytes,int,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "tuple[str]"
                ],
                "next_call": [
                    "str",
                    "tuple[str]"
                ]
            }
        }
    },
    "aiko-master/tests/conftest.py": {},
    "aiko-master/tests/test_fresh.py": {
        "test_not_non_conditional": {
            "name": "test_not_non_conditional",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etags_match": {
            "name": "test_etags_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etags_mismatch": {
            "name": "test_etags_mismatch",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etag_least_one_matches": {
            "name": "test_etag_least_one_matches",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etag_is_missing": {
            "name": "test_etag_is_missing",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etag_exact": {
            "name": "test_etag_exact",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etag_strong": {
            "name": "test_etag_strong",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_etag_re_strong": {
            "name": "test_etag_re_strong",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_none_match_not_macth": {
            "name": "test_none_match_not_macth",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_if_modified_since": {
            "name": "test_if_modified_since",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_modified_and_if_none_match": {
            "name": "test_modified_and_if_none_match",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_cache": {
            "name": "test_no_cache",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiko-master/tests/test_proxy.py": {
        "test_get_proxy": {
            "name": "test_get_proxy",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "A.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "A.test1": {
            "name": "test1",
            "location": 17,
            "return": [
                "int",
                "list[list[str]]",
                "list[list[typing.Any]]",
                "bytes",
                "dict[str, typing.Any]",
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        },
        "A.test": {
            "name": "test",
            "location": 20,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "B.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "aiko-master/tests/test_request.py": {
        "TestRequest.test_request_attrib": {
            "name": "test_request_attrib",
            "location": 16,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequest.test_request_attrib.request_complete": {
            "name": "request_complete",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiko-master/tests/utils.py": {
        "run_until_complete": {
            "name": "run_until_complete",
            "location": 10,
            "return": [],
            "arguments": {
                "fun": [
                    "str",
                    "bool"
                ]
            }
        },
        "run_until_complete.wrapper": {
            "name": "wrapper",
            "location": 15,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "BaseTest.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.setUp": {
            "name": "setUp",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTest.tearDown": {
            "name": "tearDown",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.setUp": {
            "name": "setUp",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.listen": {
            "name": "listen",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.unlisten": {
            "name": "unlisten",
            "location": 70,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.tearDown": {
            "name": "tearDown",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiko-master/tests/__init__.py": {}
}
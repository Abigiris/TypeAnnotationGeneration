{
    "aio-openapi-master/docs/conf.py": {},
    "aio-openapi-master/openapi/cli.py": {
        "open_api_cli": {
            "name": "open_api_cli",
            "location": 116,
            "return": [],
            "arguments": {
                "ctx": [
                    "bool"
                ]
            }
        },
        "serve": {
            "name": "serve",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "index": [
                    "int"
                ],
                "reload": []
            }
        },
        "OpenApiClient.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "None",
                    "bool",
                    "str",
                    "list[float]"
                ],
                "setup_app": [
                    "None",
                    "bool",
                    "str",
                    "list[float]"
                ],
                "base_path": [
                    "typing.Text"
                ],
                "commands": [
                    "None",
                    "bool",
                    "list[]",
                    "str",
                    "list[str]",
                    "typing.Callable[float, None]"
                ],
                "index": [
                    "int"
                ],
                "loop": [
                    "None",
                    "bool",
                    "str",
                    "list[float]"
                ]
            }
        },
        "OpenApiClient.web": {
            "name": "web",
            "location": 68,
            "return": [
                "Application"
            ],
            "arguments": {
                "self": [],
                "server": [
                    "bool"
                ]
            }
        },
        "OpenApiClient.get_serve_app": {
            "name": "get_serve_app",
            "location": 81,
            "return": [
                "Application"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenApiClient.get_command": {
            "name": "get_command",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "OpenApiClient.list_commands": {
            "name": "list_commands",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "OpenApiClient.get_server_version": {
            "name": "get_server_version",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "param": [
                    "str",
                    "tuple[str]"
                ],
                "value": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/exc.py": {
        "JsonHttpException.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "None",
                    "str",
                    "int",
                    "list[int]",
                    "float"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/json.py": {
        "encoder": {
            "name": "encoder",
            "location": 10,
            "return": [],
            "arguments": {
                "obj": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/logger.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 19,
            "return": [],
            "arguments": {
                "name": [
                    "typing.Text"
                ]
            }
        },
        "setup_logging": {
            "name": "setup_logging",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "verbose": [],
                "quiet": []
            }
        }
    },
    "aio-openapi-master/openapi/middleware.py": {
        "sentry_middleware": {
            "name": "sentry_middleware",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "typing.Type"
                ],
                "dsn": [
                    "typing.Type"
                ],
                "env": [
                    "typing.Text"
                ]
            }
        },
        "json_error": {
            "name": "json_error",
            "location": 21,
            "return": [],
            "arguments": {
                "status_codes": [
                    "None",
                    "int",
                    "list[typing.Union[str,str,str,str]]",
                    "str"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/rest.py": {
        "rest": {
            "name": "rest",
            "location": 9,
            "return": [
                "OpenApiClient"
            ],
            "arguments": {
                "openapi": [
                    "None",
                    "str",
                    "bool",
                    "typing.Any",
                    "dict[str, int]"
                ],
                "setup_app": [
                    "None",
                    "str",
                    "list[]"
                ],
                "base_path": [
                    "typing.Text"
                ],
                "commands": [
                    "None",
                    "str",
                    "list[]"
                ],
                "allowed_tags": [
                    "tuple[]"
                ],
                "validate_docs": [
                    "bool"
                ],
                "servers": [
                    "None",
                    "str",
                    "list[str]",
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ],
                "security": [
                    "None",
                    "str",
                    "list[str]",
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ],
                "redoc": [
                    "None",
                    "str",
                    "list[str]",
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ],
                "OpenApiSpecClass": []
            }
        }
    },
    "aio-openapi-master/openapi/sentry.py": {
        "setup": {
            "name": "setup",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bool",
                    "typing.Callable[float, None]",
                    "list[]",
                    "None"
                ],
                "dsn": [
                    "str",
                    "bool"
                ],
                "env": [
                    "typing.Text"
                ],
                "level": [],
                "event_level": []
            }
        }
    },
    "aio-openapi-master/openapi/testing.py": {
        "with_test_db": {
            "name": "with_test_db",
            "location": 27,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "db": []
            }
        },
        "SingleConnDatabase.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleConnDatabase.from_db": {
            "name": "from_db",
            "location": 44,
            "return": [],
            "arguments": {
                "cls": [
                    "tuple[typing.Union[float,float]]",
                    "str"
                ],
                "db": [
                    "tuple[typing.Union[float,float]]",
                    "str"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/types.py": {},
    "aio-openapi-master/openapi/tz.py": {
        "utcnow": {
            "name": "utcnow",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "as_utc": {
            "name": "as_utc",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "dt": [
                    "str"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/utils.py": {
        "get_origin": {
            "name": "get_origin",
            "location": 23,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "get_args": {
            "name": "get_args",
            "location": 37,
            "return": [],
            "arguments": {
                "value": [],
                "defaults": []
            }
        },
        "get_env": {
            "name": "get_env",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "get_debug_flag": {
            "name": "get_debug_flag",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "compact": {
            "name": "compact",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "compact_dict": {
            "name": "compact_dict",
            "location": 133,
            "return": [],
            "arguments": {
                "kwargs": []
            }
        },
        "replace_key": {
            "name": "replace_key",
            "location": 137,
            "return": [],
            "arguments": {
                "kwargs": [],
                "from_key": [],
                "to_key": []
            }
        },
        "iter_items": {
            "name": "iter_items",
            "location": 144,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "is_subclass": {
            "name": "is_subclass",
            "location": 152,
            "return": [],
            "arguments": {
                "value": [],
                "Type": []
            }
        },
        "as_list": {
            "name": "as_list",
            "location": 157,
            "return": [],
            "arguments": {
                "errors": []
            }
        },
        "error_dict": {
            "name": "error_dict",
            "location": 163,
            "return": [],
            "arguments": {
                "errors": []
            }
        },
        "str2bool": {
            "name": "str2bool",
            "location": 170,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "docjoin": {
            "name": "docjoin",
            "location": 174,
            "return": [],
            "arguments": {
                "iterable": []
            }
        },
        "TypingInfo.is_dataclass": {
            "name": "is_dataclass",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypingInfo.is_union": {
            "name": "is_union",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypingInfo.is_complex": {
            "name": "is_complex",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypingInfo.is_none": {
            "name": "is_none",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypingInfo.get": {
            "name": "get",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        }
    },
    "aio-openapi-master/openapi/__init__.py": {},
    "aio-openapi-master/openapi/data/db.py": {
        "dataclass_from_table": {
            "name": "dataclass_from_table",
            "location": 27,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "table": [
                    "str",
                    "int",
                    "dict[typing.Any, list[]]",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "column_info": {
            "name": "column_info",
            "location": 70,
            "return": [
                "set[]",
                "dict[, ]",
                "list[dict[str, typing.Any]]",
                "set[dict[str, typing.Any]]"
            ],
            "arguments": {
                "columns": [
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ],
                "value": [
                    "str",
                    "dict[, ]",
                    "int",
                    "typing.Match",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "converter": {
            "name": "converter",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "bl": {
            "name": "bl",
            "location": 89,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "col": [
                    "dict[, ]",
                    "None",
                    "str",
                    "int",
                    "list[]"
                ],
                "required": [
                    "bool",
                    "None",
                    "dict[str, typing.Union[str,int]]"
                ],
                "use_default": [
                    "bool",
                    "None",
                    "dict[str, typing.Union[str,int]]"
                ],
                "ops": [
                    "bool",
                    "None",
                    "dict[str, typing.Union[str,int]]"
                ]
            }
        },
        "integer": {
            "name": "integer",
            "location": 97,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "col": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "str"
                ],
                "required": [
                    "bool"
                ],
                "use_default": [
                    "bool"
                ],
                "ops": [
                    "bool"
                ]
            }
        },
        "number": {
            "name": "number",
            "location": 105,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "col": [
                    "str"
                ],
                "required": [
                    "bool",
                    "BaseException",
                    "typing.Callable[dict[, ], None]",
                    "None"
                ],
                "use_default": [
                    "bool",
                    "BaseException",
                    "typing.Callable[dict[, ], None]",
                    "None"
                ],
                "ops": [
                    "bool",
                    "BaseException",
                    "typing.Callable[dict[, ], None]",
                    "None"
                ]
            }
        },
        "string": {
            "name": "string",
            "location": 116,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "col": [
                    "int",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "dict[int, int]",
                    "None"
                ],
                "required": [
                    "int",
                    "float"
                ],
                "use_default": [
                    "int",
                    "float"
                ],
                "ops": [
                    "int",
                    "float"
                ]
            }
        },
        "dt_ti": {
            "name": "dt_ti",
            "location": 129,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "col": [
                    "str",
                    "None",
                    "int",
                    "float"
                ],
                "required": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[dict[, ], None]",
                    "None",
                    "Exception",
                    "int",
                    "typing.Sequence[str]"
                ],
                "use_default": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[dict[, ], None]",
                    "None",
                    "Exception",
                    "int",
                    "typing.Sequence[str]"
                ],
                "ops": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[dict[, ], None]",
                    "None",
                    "Exception",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "dt": {
            "name": "dt",
            "location": 140,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "col": [
                    "str",
                    "None",
                    "bool",
                    "dict[str, str]"
                ],
                "required": [
                    "None",
                    "str",
                    "typing.Callable[str, str]",
                    "bool",
                    "dict[str, str]"
                ],
                "use_default": [
                    "None",
                    "str",
                    "typing.Callable[str, str]",
                    "bool",
                    "dict[str, str]"
                ],
                "ops": [
                    "None",
                    "str",
                    "typing.Callable[str, str]",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "en": {
            "name": "en",
            "location": 148,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "col": [
                    "str",
                    "None",
                    "bool"
                ],
                "required": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "None"
                ],
                "use_default": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "None"
                ],
                "ops": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "js": {
            "name": "js",
            "location": 159,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "col": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "required": [
                    "bool",
                    "typing.Sequence[str]",
                    "str",
                    "None",
                    "dict[str, object]"
                ],
                "use_default": [
                    "bool",
                    "typing.Sequence[str]",
                    "str",
                    "None",
                    "dict[str, object]"
                ],
                "ops": [
                    "bool",
                    "typing.Sequence[str]",
                    "str",
                    "None",
                    "dict[str, object]"
                ]
            }
        },
        "uuid": {
            "name": "uuid",
            "location": 174,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "col": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "required": [
                    "bool",
                    "None",
                    "dict[str, typing.Union[str,int]]"
                ],
                "use_default": [
                    "bool",
                    "None",
                    "dict[str, typing.Union[str,int]]"
                ],
                "ops": [
                    "bool",
                    "None",
                    "dict[str, typing.Union[str,int]]"
                ]
            }
        },
        "info": {
            "name": "info",
            "location": 181,
            "return": [
                "dict[typing.Union[str,str,str,str], typing.Union[None,typing.Any,typing.Any,typing.Any,bool,None,int,str,int,str]]"
            ],
            "arguments": {
                "col": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "required": [],
                "use_default": [
                    "bool",
                    "str",
                    "None"
                ],
                "ops": [
                    "str",
                    "None",
                    "list[str]",
                    "dict[, ]",
                    "bool",
                    "typing.Callable[dict[, ], bool]"
                ]
            }
        },
        "converter._": {
            "name": "_",
            "location": 80,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "aio-openapi-master/openapi/data/dump.py": {
        "is_nothing": {
            "name": "is_nothing",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "typing.Any",
                    "None",
                    "typing.Iterable[object]",
                    "bytes"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 16,
            "return": [
                "int",
                "dict[str, set[str]]"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Match",
                    "None",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "data": [
                    "int",
                    "dict[str, set[str]]"
                ]
            }
        },
        "dump_dataclass": {
            "name": "dump_dataclass",
            "location": 34,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "schema": [
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Callable[typing.Any, str]",
                    "bool",
                    "str"
                ],
                "data": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "dump_list": {
            "name": "dump_list",
            "location": 57,
            "return": [
                "list[]"
            ],
            "arguments": {
                "schema": [
                    "list[]",
                    "str",
                    "bytes",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "list[]",
                    "str",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "dump_dict": {
            "name": "dump_dict",
            "location": 62,
            "return": [
                "dict[tuple[typing.Union[str,typing.Any]], ]"
            ],
            "arguments": {
                "schema": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Type",
                    "str"
                ],
                "data": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/data/exc.py": {
        "error_response_schema": {
            "name": "error_response_schema",
            "location": 28,
            "return": [
                "ValidationErrors",
                "ErrorMessage"
            ],
            "arguments": {
                "status": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/data/fields.py": {
        "field_dict": {
            "name": "field_dict",
            "location": 52,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "dc": []
            }
        },
        "data_field": {
            "name": "data_field",
            "location": 56,
            "return": [],
            "arguments": {
                "required": [
                    "bool"
                ],
                "validator": [
                    "None"
                ],
                "dump": [
                    "None"
                ],
                "format": [
                    "None"
                ],
                "description": [
                    "None"
                ],
                "items": [
                    "None"
                ],
                "post_process": [
                    "None"
                ],
                "ops": [
                    "tuple[]"
                ],
                "meta": [
                    "None"
                ]
            }
        },
        "str_field": {
            "name": "str_field",
            "location": 109,
            "return": [],
            "arguments": {
                "min_length": [
                    "int"
                ],
                "max_length": [
                    "int"
                ]
            }
        },
        "bool_field": {
            "name": "bool_field",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "uuid_field": {
            "name": "uuid_field",
            "location": 127,
            "return": [],
            "arguments": {
                "format": [
                    "typing.Text"
                ]
            }
        },
        "number_field": {
            "name": "number_field",
            "location": 133,
            "return": [],
            "arguments": {
                "min_value": [
                    "None"
                ],
                "max_value": [
                    "None"
                ],
                "precision": [
                    "None"
                ]
            }
        },
        "integer_field": {
            "name": "integer_field",
            "location": 149,
            "return": [],
            "arguments": {
                "min_value": [
                    "None"
                ],
                "max_value": [
                    "None"
                ]
            }
        },
        "decimal_field": {
            "name": "decimal_field",
            "location": 163,
            "return": [],
            "arguments": {
                "min_value": [
                    "None"
                ],
                "max_value": [
                    "None"
                ],
                "precision": [
                    "None"
                ]
            }
        },
        "email_field": {
            "name": "email_field",
            "location": 168,
            "return": [],
            "arguments": {
                "min_length": [
                    "int"
                ],
                "max_length": [
                    "int"
                ]
            }
        },
        "enum_field": {
            "name": "enum_field",
            "location": 181,
            "return": [],
            "arguments": {
                "EnumClass": []
            }
        },
        "date_field": {
            "name": "date_field",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "date_time_field": {
            "name": "date_time_field",
            "location": 196,
            "return": [],
            "arguments": {
                "timezone": [
                    "bool"
                ]
            }
        },
        "as_field": {
            "name": "as_field",
            "location": 205,
            "return": [
                "Field",
                "None"
            ],
            "arguments": {
                "item": []
            }
        },
        "json_field": {
            "name": "json_field",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "field_ops": {
            "name": "field_ops",
            "location": 224,
            "return": [
                "typing.Generator[]",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "field": []
            }
        },
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "message": []
            }
        },
        "Validator.__call__": {
            "name": "__call__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "Validator.openapi": {
            "name": "openapi",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": []
            }
        },
        "Validator.dump": {
            "name": "dump",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "StrValidator.__call__": {
            "name": "__call__",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "StrValidator.openapi": {
            "name": "openapi",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": []
            }
        },
        "EmailValidator.__call__": {
            "name": "__call__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "ListValidator.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validators": []
            }
        },
        "ListValidator.__call__": {
            "name": "__call__",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "ListValidator.dump": {
            "name": "dump",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ListValidator.openapi": {
            "name": "openapi",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": []
            }
        },
        "UUIDValidator.__call__": {
            "name": "__call__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "UUIDValidator.dump": {
            "name": "dump",
            "location": 307,
            "return": [
                "UUID"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "EnumValidator.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "EnumClass": []
            }
        },
        "EnumValidator.__call__": {
            "name": "__call__",
            "location": 319,
            "return": [
                "self_@_EnumClass"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "EnumValidator.dump": {
            "name": "dump",
            "location": 330,
            "return": [
                "self_@_EnumClass"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Choice.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "choices": []
            }
        },
        "Choice.__call__": {
            "name": "__call__",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "Choice.openapi": {
            "name": "openapi",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": []
            }
        },
        "DateValidator.dump": {
            "name": "dump",
            "location": 350,
            "return": [
                "date",
                "datetime"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DateValidator.__call__": {
            "name": "__call__",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "DateTimeValidator.__init__": {
            "name": "__init__",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timezone": [
                    "bool"
                ]
            }
        },
        "DateTimeValidator.dump": {
            "name": "dump",
            "location": 372,
            "return": [
                "datetime"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DateTimeValidator.__call__": {
            "name": "__call__",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "BoundedNumberValidator.__init__": {
            "name": "__init__",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_value": [
                    "None"
                ],
                "max_value": [
                    "None"
                ]
            }
        },
        "BoundedNumberValidator.__call__": {
            "name": "__call__",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "BoundedNumberValidator.dump": {
            "name": "dump",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BoundedNumberValidator.openapi": {
            "name": "openapi",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": []
            }
        },
        "BoundedNumberValidator.to_number": {
            "name": "to_number",
            "location": 423,
            "return": [
                "int",
                "Decimal"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "NumberValidator.__init__": {
            "name": "__init__",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min_value": [
                    "None"
                ],
                "max_value": [
                    "None"
                ],
                "precision": [
                    "None"
                ]
            }
        },
        "NumberValidator.__call__": {
            "name": "__call__",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "NumberValidator.dump": {
            "name": "dump",
            "location": 452,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "IntegerValidator.__call__": {
            "name": "__call__",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "DecimalValidator.__call__": {
            "name": "__call__",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "BoolValidator.__call__": {
            "name": "__call__",
            "location": 482,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "BoolValidator.dump": {
            "name": "dump",
            "location": 485,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "JSONValidator.__call__": {
            "name": "__call__",
            "location": 490,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "JSONValidator.dump": {
            "name": "dump",
            "location": 496,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "aio-openapi-master/openapi/data/validate.py": {
        "validated_schema": {
            "name": "validated_schema",
            "location": 46,
            "return": [],
            "arguments": {
                "schema": [],
                "data": []
            }
        },
        "validate": {
            "name": "validate",
            "location": 71,
            "return": [],
            "arguments": {
                "schema": [],
                "data": []
            }
        },
        "validate_simple": {
            "name": "validate_simple",
            "location": 137,
            "return": [],
            "arguments": {
                "schema": [],
                "data": []
            }
        },
        "validate_union": {
            "name": "validate_union",
            "location": 143,
            "return": [],
            "arguments": {
                "schema": [],
                "data": [],
                "as_schema": []
            }
        },
        "validate_list": {
            "name": "validate_list",
            "location": 157,
            "return": [],
            "arguments": {
                "schema": [],
                "data": []
            }
        },
        "validate_dict": {
            "name": "validate_dict",
            "location": 183,
            "return": [],
            "arguments": {
                "schema": [],
                "data": []
            }
        },
        "validate_dataclass": {
            "name": "validate_dataclass",
            "location": 213,
            "return": [],
            "arguments": {
                "schema": [],
                "data": []
            }
        },
        "collect_value": {
            "name": "collect_value",
            "location": 273,
            "return": [],
            "arguments": {
                "field": [],
                "value": []
            }
        },
        "is_null": {
            "name": "is_null",
            "location": 288,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "get_default": {
            "name": "get_default",
            "location": 292,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "ValidationErrors.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "errors": []
            }
        },
        "ValidationErrors.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-openapi-master/openapi/data/view.py": {
        "DataView.cleaned": {
            "name": "cleaned",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "bytes",
                    "dict[str, typing.Union[str,int]]",
                    "str"
                ],
                "data": [
                    "float",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "DataView.dump": {
            "name": "dump",
            "location": 56,
            "return": [
                "bool",
                "None",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "data": [
                    "bool",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "DataView.get_schema": {
            "name": "get_schema",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [
                    "None",
                    "str"
                ]
            }
        },
        "DataView.validation_error": {
            "name": "validation_error",
            "location": 80,
            "return": [
                "ValidationErrors"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ],
                "errors": [
                    "None",
                    "str"
                ]
            }
        },
        "DataView.raise_validation_error": {
            "name": "raise_validation_error",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ],
                "errors": [
                    "None",
                    "str"
                ]
            }
        },
        "DataView.raise_bad_data": {
            "name": "raise_bad_data",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "None",
                    "Exception",
                    "str",
                    "dict[, ]"
                ],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "DataView.as_errors": {
            "name": "as_errors",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ],
                "errors": [
                    "None",
                    "typing.IO",
                    "typing.TextIO",
                    "bool"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/data/__init__.py": {},
    "aio-openapi-master/openapi/db/columns.py": {
        "UUIDColumn": {
            "name": "UUIDColumn",
            "location": 7,
            "return": [],
            "arguments": {
                "name": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "dict[str, bytes]",
                    "dict[typing.Union[str,None], str]"
                ],
                "primary_key": [
                    "bool"
                ],
                "nullable": [
                    "bool"
                ],
                "make_default": [
                    "bool"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/db/commands.py": {
        "migration": {
            "name": "migration",
            "location": 10,
            "return": [
                "Migration"
            ],
            "arguments": {
                "ctx": [
                    "bool"
                ]
            }
        },
        "get_db": {
            "name": "get_db",
            "location": 14,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "db": {
            "name": "db",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "migrate": {
            "name": "migrate",
            "location": 37,
            "return": [],
            "arguments": {
                "ctx": [
                    "str",
                    "bytes"
                ],
                "message": [
                    "str",
                    "bytes"
                ],
                "branch_label": [
                    "str",
                    "bytes"
                ]
            }
        },
        "revision": {
            "name": "revision",
            "location": 62,
            "return": [],
            "arguments": {
                "ctx": [
                    "str",
                    "int"
                ],
                "message": [
                    "str",
                    "int"
                ],
                "branch_label": [
                    "str",
                    "int"
                ],
                "autogenerate": [
                    "str",
                    "int"
                ]
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "revision": [
                    "dict[str, typing.Any]",
                    "float"
                ],
                "drop_tables": [
                    "bool",
                    "tuple[str]",
                    "str"
                ]
            }
        },
        "downgrade": {
            "name": "downgrade",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool"
                ],
                "revision": [
                    "bool"
                ]
            }
        },
        "show": {
            "name": "show",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "revision": []
            }
        },
        "history": {
            "name": "history",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "current": {
            "name": "current",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "verbose": []
            }
        },
        "create": {
            "name": "create",
            "location": 124,
            "return": [],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "dbname": [
                    "str"
                ],
                "force": []
            }
        },
        "tables": {
            "name": "tables",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "Exception",
                    "list[str]"
                ],
                "db": [
                    "bool",
                    "list[int]",
                    "str",
                    "list[]"
                ]
            }
        },
        "drop": {
            "name": "drop",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "_drop_tables": {
            "name": "_drop_tables",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "bool"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/db/container.py": {
        "Database.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dsn": [
                    "typing.Text"
                ],
                "metadata": [
                    "None",
                    "str",
                    "typing.IO",
                    "typing.Callable[, ]",
                    "bool",
                    "tuple[str]"
                ]
            }
        },
        "Database.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.dsn": {
            "name": "dsn",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.metadata": {
            "name": "metadata",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.engine": {
            "name": "engine",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.sync_engine": {
            "name": "sync_engine",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Database.__getattr__": {
            "name": "__getattr__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Database.create_all": {
            "name": "create_all",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.drop_all": {
            "name": "drop_all",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.drop_all_schemas": {
            "name": "drop_all_schemas",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-openapi-master/openapi/db/dbmodel.py": {
        "CrudDB.insert_query": {
            "name": "insert_query",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "records": []
            }
        },
        "CrudDB.get_query": {
            "name": "get_query",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "sql_query": []
            }
        },
        "CrudDB.search_query": {
            "name": "search_query",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "sql_query": [],
                "search": []
            }
        },
        "CrudDB.order_by_query": {
            "name": "order_by_query",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "sql_query": [],
                "order_by": []
            }
        },
        "CrudDB.default_filter_field": {
            "name": "default_filter_field",
            "location": 294,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "op": [],
                "value": []
            }
        },
        "DbSearchVisitor.apply_search": {
            "name": "apply_search",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search": [],
                "search_fields": []
            }
        },
        "DbPaginationVisitor.apply_offset_pagination": {
            "name": "apply_offset_pagination",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": [],
                "offset": [],
                "order_by": []
            }
        },
        "DbPaginationVisitor.apply_cursor_pagination": {
            "name": "apply_cursor_pagination",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [],
                "limit": [],
                "order_by": [],
                "previous": [
                    "bool"
                ]
            }
        },
        "DbPaginationVisitor.filter": {
            "name": "filter",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": [],
                "previous": []
            }
        }
    },
    "aio-openapi-master/openapi/db/migrations.py": {
        "get_template_directory": {
            "name": "get_template_directory",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "create_config": {
            "name": "create_config",
            "location": 60,
            "return": [
                "Config"
            ],
            "arguments": {
                "app": []
            }
        },
        "Migration.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Migration.init": {
            "name": "init",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Migration.show": {
            "name": "show",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "revision": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "Migration.history": {
            "name": "history",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Migration.revision": {
            "name": "revision",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool"
                ],
                "autogenerate": [
                    "bool"
                ],
                "branch_label": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "revision": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "Migration.downgrade": {
            "name": "downgrade",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "revision": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "Migration.current": {
            "name": "current",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "Migration.message": {
            "name": "message",
            "location": 53,
            "return": [
                "typing.Type",
                "int",
                "dict[int, str]",
                "str",
                "dict[str, str]",
                "tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-openapi-master/openapi/db/path.py": {
        "SqlApiPath.db": {
            "name": "db",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqlApiPath.db_table": {
            "name": "db_table",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqlApiPath.get_pag_search_filters": {
            "name": "get_pag_search_filters",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SqlApiPath.handle_unique_violation": {
            "name": "handle_unique_violation",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "exception": []
            }
        }
    },
    "aio-openapi-master/openapi/db/__init__.py": {
        "get_db": {
            "name": "get_db",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "store_url": [
                    "None",
                    "str",
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/db/openapi/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/openapi/pagination/create.py": {
        "create_dataclass": {
            "name": "create_dataclass",
            "location": 12,
            "return": [],
            "arguments": {
                "type_info": [
                    "typing.Type",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "data": [
                    "str",
                    "typing.Any",
                    "None"
                ],
                "DataClass": [
                    "dict[str, typing.Any]",
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/pagination/cursor.py": {
        "encode_cursor": {
            "name": "encode_cursor",
            "location": 27,
            "return": [],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, object]",
                    "bool",
                    "bytes",
                    "None"
                ],
                "previous": [
                    "bool"
                ]
            }
        },
        "decode_cursor": {
            "name": "decode_cursor",
            "location": 33,
            "return": [
                "tuple[tuple[]]",
                "tuple[typing.Union[tuple[],bool]]"
            ],
            "arguments": {
                "cursor": [
                    "str"
                ],
                "field_names": []
            }
        },
        "cursor_url": {
            "name": "cursor_url",
            "location": 49,
            "return": [],
            "arguments": {
                "url": [],
                "cursor": [
                    "dict[, ]"
                ]
            }
        },
        "start_values": {
            "name": "start_values",
            "location": 55,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "record": [
                    "str"
                ],
                "field_names": [
                    "dict[, ]"
                ]
            }
        },
        "cursorPagination": {
            "name": "cursorPagination",
            "location": 60,
            "return": [
                "CursorPagination"
            ],
            "arguments": {}
        },
        "cursor_to_python": {
            "name": "cursor_to_python",
            "location": 159,
            "return": [
                "int"
            ],
            "arguments": {
                "py_type": [
                    "int",
                    "str",
                    "None"
                ],
                "value": []
            }
        },
        "cursorPagination.CursorPagination.cursor_info": {
            "name": "cursor_info",
            "location": 89,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "cursorPagination.CursorPagination.previous": {
            "name": "previous",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cursorPagination.CursorPagination.apply": {
            "name": "apply",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": []
            }
        },
        "cursorPagination.CursorPagination.create_pagination": {
            "name": "create_pagination",
            "location": 112,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "cursorPagination.CursorPagination.links": {
            "name": "links",
            "location": 115,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "data": [],
                "total": [
                    "None"
                ]
            }
        },
        "cursorPagination.CursorPagination.get_data": {
            "name": "get_data",
            "location": 150,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "aio-openapi-master/openapi/pagination/offset.py": {
        "offsetPagination": {
            "name": "offsetPagination",
            "location": 19,
            "return": [
                "OffsetPagination"
            ],
            "arguments": {}
        },
        "Links.first_link": {
            "name": "first_link",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "total": [
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ],
                "limit": [
                    "float",
                    "int",
                    "str"
                ],
                "offset": [
                    "float",
                    "int"
                ]
            }
        },
        "Links.prev_link": {
            "name": "prev_link",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "total": [
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "int"
                ],
                "limit": [
                    "dict[str, typing.Any]",
                    "int",
                    "str"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "Links.next_link": {
            "name": "next_link",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "total": [
                    "int",
                    "str"
                ],
                "limit": [
                    "int",
                    "str"
                ],
                "offset": [
                    "int",
                    "str"
                ]
            }
        },
        "Links.last_link": {
            "name": "last_link",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "total": [
                    "str",
                    "bool",
                    "float",
                    "list[str]"
                ],
                "limit": [
                    "str"
                ],
                "offset": [
                    "str"
                ]
            }
        },
        "Links.link": {
            "name": "link",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "int"
                ],
                "limit": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Links._count_part": {
            "name": "_count_part",
            "location": 105,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "total": [
                    "int"
                ],
                "limit": [
                    "int"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "Links.links": {
            "name": "links",
            "location": 112,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": [],
                "total": [
                    "list[]",
                    "tuple['cirq.Qid']"
                ],
                "limit": [
                    "list[]",
                    "tuple['cirq.Qid']"
                ],
                "offset": [
                    "list[]",
                    "tuple['cirq.Qid']"
                ]
            }
        },
        "offsetPagination.OffsetPagination.apply": {
            "name": "apply",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": []
            }
        },
        "offsetPagination.OffsetPagination.create_pagination": {
            "name": "create_pagination",
            "location": 59,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "offsetPagination.OffsetPagination.links": {
            "name": "links",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "data": [],
                "total": [
                    "None"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/pagination/pagination.py": {
        "from_filters_and_dataclass": {
            "name": "from_filters_and_dataclass",
            "location": 47,
            "return": [],
            "arguments": {
                "data_class": [
                    "str",
                    "typing.BinaryIO",
                    "list[int]",
                    "typing.Any",
                    "None",
                    "bool"
                ],
                "data": [
                    "list[tuple[typing.Union[str,str,str]]]",
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Type",
                    "dict[str, typing.Callable[, ]]"
                ]
            }
        },
        "fields_no_sign": {
            "name": "fields_no_sign",
            "location": 55,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "tuple[]"
                ]
            }
        },
        "fields_flip_sign": {
            "name": "fields_flip_sign",
            "location": 59,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "fields": [
                    "str"
                ]
            }
        },
        "flip_field_sign": {
            "name": "flip_field_sign",
            "location": 63,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "field": [
                    "str"
                ]
            }
        },
        "PaginationVisitor.apply_offset_pagination": {
            "name": "apply_offset_pagination",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "offset": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "order_by": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "PaginationVisitor.apply_cursor_pagination": {
            "name": "apply_cursor_pagination",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "limit": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "order_by": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "previous": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "Pagination.create_pagination": {
            "name": "create_pagination",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [
                    "list[dict[str, typing.Any]]",
                    "dict[, ]",
                    "str"
                ],
                "data": [
                    "list[dict[str, typing.Any]]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Pagination.apply": {
            "name": "apply",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "Pagination.paginated": {
            "name": "paginated",
            "location": 79,
            "return": [
                "PaginatedData"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None",
                    "tuple['cirq.Qid']",
                    "list[]"
                ],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None",
                    "tuple['cirq.Qid']",
                    "list[]"
                ],
                "total": [
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "tuple['cirq.Qid']",
                    "list[]"
                ]
            }
        },
        "Pagination.links": {
            "name": "links",
            "location": 85,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "None",
                    "int"
                ],
                "data": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "None",
                    "int"
                ],
                "total": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "int"
                ]
            }
        },
        "Pagination.get_data": {
            "name": "get_data",
            "location": 91,
            "return": [
                "str",
                "list[list[typing.Any]]",
                "dict[, ]",
                "bytes",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "list[list[typing.Any]]",
                    "dict[, ]",
                    "bytes",
                    "dict[str, str]"
                ]
            }
        },
        "PaginatedData.json_response": {
            "name": "json_response",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "headers": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "int",
                    "typing.Callable[..., collections.abc.Coroutine]"
                ]
            }
        },
        "PaginatedData.header_links": {
            "name": "header_links",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-openapi-master/openapi/pagination/search.py": {
        "searchable": {
            "name": "searchable",
            "location": 25,
            "return": [
                "Searchable"
            ],
            "arguments": {}
        },
        "SearchVisitor.apply_search": {
            "name": "apply_search",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search": [
                    "int",
                    "str",
                    "dict[str, list[]]"
                ],
                "search_fields": [
                    "int",
                    "str",
                    "dict[str, list[]]"
                ]
            }
        },
        "Search.create_search": {
            "name": "create_search",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "int",
                    "bytes",
                    "None",
                    "str"
                ],
                "data": [
                    "memoryview",
                    "int",
                    "bytes",
                    "None",
                    "str"
                ]
            }
        },
        "Search.apply": {
            "name": "apply",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "searchable.Searchable.create_search": {
            "name": "create_search",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "searchable.Searchable.apply": {
            "name": "apply",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "visitor": []
            }
        }
    },
    "aio-openapi-master/openapi/pagination/__init__.py": {},
    "aio-openapi-master/openapi/spec/hdrs.py": {},
    "aio-openapi-master/openapi/spec/operation.py": {
        "op.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.Sequence[T]",
                    "tuple[]",
                    "list[int]"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/spec/path.py": {
        "full_url": {
            "name": "full_url",
            "location": 114,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "ApiPath.insert_data": {
            "name": "insert_data",
            "location": 25,
            "return": [
                "str",
                "list[tuple[typing.Union[typing.Any,typing.Any,None]]]",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str"
                ]
            }
        },
        "ApiPath.get_filters": {
            "name": "get_filters",
            "location": 50,
            "return": [
                "dict[, ]",
                "dict[str, set[typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiPath.validation_error": {
            "name": "validation_error",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Text"
                ],
                "errors": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "ApiPath.raise_bad_data": {
            "name": "raise_bad_data",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "None",
                    "Exception",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "ApiPath.full_url": {
            "name": "full_url",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiPath.api_response_data": {
            "name": "api_response_data",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "list[dict[, ]]",
                    "str"
                ],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]"
                ]
            }
        },
        "ApiPath.json_response": {
            "name": "json_response",
            "location": 109,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "str",
                    "bool"
                ],
                "data": [
                    "dict[, ]"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/spec/redoc.py": {
        "Redoc.handle_doc": {
            "name": "handle_doc",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/spec/server.py": {
        "default_server": {
            "name": "default_server",
            "location": 8,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "server_urls": {
            "name": "server_urls",
            "location": 15,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "paths": [
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/spec/spec.py": {
        "OpenApiSpec.routes": {
            "name": "routes",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "OpenApiSpec.setup_app": {
            "name": "setup_app",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "OpenApiSpec.spec_route": {
            "name": "spec_route",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "OpenApiSpec.build": {
            "name": "build",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "SchemaParser.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "validate_docs": []
            }
        },
        "SchemaParser.get_parameters": {
            "name": "get_parameters",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "default_in": []
            }
        },
        "SchemaParser.field2json": {
            "name": "field2json",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "field_or_type": [],
                "validate": []
            }
        },
        "SchemaParser.dataclass2json": {
            "name": "dataclass2json",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "SchemaParser.get_schema_info": {
            "name": "get_schema_info",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "items": []
            }
        },
        "SchemaParser.get_primitive_info": {
            "name": "get_primitive_info",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "SchemaParser.add_schema_to_parse": {
            "name": "add_schema_to_parse",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "SchemaParser.parsed_schemas": {
            "name": "parsed_schemas",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaParser.add_default": {
            "name": "add_default",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "json_property": []
            }
        },
        "SpecDoc.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "spec": [],
                "public": [],
                "private": []
            }
        },
        "SpecDoc.app": {
            "name": "app",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecDoc.__call__": {
            "name": "__call__",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "security": [],
                "servers": []
            }
        },
        "SpecDoc._build_paths": {
            "name": "_build_paths",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecDoc._validate_tags": {
            "name": "_validate_tags",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecDoc._build_path_object": {
            "name": "_build_path_object",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "handler": []
            }
        },
        "SpecDoc._get_method_info": {
            "name": "_get_method_info",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "method_handler": [],
                "method_doc": []
            }
        },
        "SpecDoc._get_response_object": {
            "name": "_get_response_object",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "type_info": [],
                "doc": []
            }
        },
        "SpecDoc._get_request_body_object": {
            "name": "_get_request_body_object",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "type_info": [],
                "doc": []
            }
        },
        "SpecDoc._get_query_parameters": {
            "name": "_get_query_parameters",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "type_info": [],
                "doc": []
            }
        },
        "SpecDoc._extend_tags": {
            "name": "_extend_tags",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "tags": []
            }
        },
        "SpecDoc._include": {
            "name": "_include",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "is_private": []
            }
        }
    },
    "aio-openapi-master/openapi/spec/utils.py": {
        "trim_docstring": {
            "name": "trim_docstring",
            "location": 10,
            "return": [],
            "arguments": {
                "docstring": []
            }
        },
        "dedent": {
            "name": "dedent",
            "location": 25,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "load_yaml_from_docstring": {
            "name": "load_yaml_from_docstring",
            "location": 47,
            "return": [],
            "arguments": {
                "docstring": []
            }
        }
    },
    "aio-openapi-master/openapi/spec/__init__.py": {},
    "aio-openapi-master/openapi/ws/channel.py": {
        "Channel.events": {
            "name": "events",
            "location": 31,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.__len__": {
            "name": "__len__",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.__contains__": {
            "name": "__contains__",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Channel.__iter__": {
            "name": "__iter__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channel.info": {
            "name": "info",
            "location": 44,
            "return": [
                "dict[, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.register": {
            "name": "register",
            "location": 67,
            "return": [
                "str",
                "dict[str, str]",
                "Event"
            ],
            "arguments": {
                "self": [],
                "event_name": [
                    "str"
                ],
                "callback": [
                    "str",
                    "list[int]",
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Channel.get_subscribed": {
            "name": "get_subscribed",
            "location": 78,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Channel.unregister": {
            "name": "unregister",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": [
                    "str"
                ],
                "callback": [
                    "str",
                    "list[str]",
                    "list[list[str]]"
                ]
            }
        },
        "Channel.event_pattern": {
            "name": "event_pattern",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "int",
                    "typing.Mapping",
                    "dict[, ]",
                    "str",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Channel.remove_callback": {
            "name": "remove_callback",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]"
                ]
            }
        },
        "Channel.remove_event_callback": {
            "name": "remove_event_callback",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "list[dict[, ]]",
                    "dict[, ]"
                ],
                "callback": [
                    "str",
                    "int",
                    "set[]",
                    "list[]"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/ws/channels.py": {
        "Channels.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sockets": [
                    "int",
                    "float"
                ]
            }
        },
        "Channels.registered": {
            "name": "registered",
            "location": 20,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channels.__len__": {
            "name": "__len__",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channels.__contains__": {
            "name": "__contains__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "channel_name": [
                    "str"
                ]
            }
        },
        "Channels.__iter__": {
            "name": "__iter__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Channels.clear": {
            "name": "clear",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channels.get": {
            "name": "get",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "channel_name": [
                    "str",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "Channels.info": {
            "name": "info",
            "location": 39,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channels.get_subscribed": {
            "name": "get_subscribed",
            "location": 92,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "dict[, ]",
                    "str",
                    "dict[str, set[str]]",
                    "None"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/ws/errors.py": {},
    "aio-openapi-master/openapi/ws/manager.py": {
        "Websocket.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SocketsManager.sockets": {
            "name": "sockets",
            "location": 25,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketsManager.channels": {
            "name": "channels",
            "location": 30,
            "return": [
                "Channels"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketsManager.add": {
            "name": "add",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "int"
                ]
            }
        },
        "SocketsManager.remove": {
            "name": "remove",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "SocketsManager.server_info": {
            "name": "server_info",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-openapi-master/openapi/ws/path.py": {
        "WsPathMixin.sockets": {
            "name": "sockets",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WsPathMixin.channels": {
            "name": "channels",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WsPathMixin.decode_message": {
            "name": "decode_message",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes"
                ]
            }
        },
        "WsPathMixin.encode_message": {
            "name": "encode_message",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/ws/pubsub.py": {
        "ChannelCallback.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "int",
                    "float"
                ]
            }
        },
        "ChannelCallback.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelCallback.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Publish.get_publish_message": {
            "name": "get_publish_message",
            "location": 63,
            "return": [
                "dict[str, typing.Any]",
                "typing.Mapping",
                "bytes",
                "list[]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "bytes",
                    "list[]",
                    "int"
                ]
            }
        },
        "Subscribe.channel_callback": {
            "name": "channel_callback",
            "location": 86,
            "return": [
                "ChannelCallback"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-openapi-master/openapi/ws/rpc.py": {
        "ws_rpc.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.Sequence[T]",
                    "tuple[]",
                    "list[int]"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/ws/utils.py": {
        "redis_to_py_pattern": {
            "name": "redis_to_py_pattern",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "pattern": [
                    "bytes",
                    "int",
                    "typing.IO",
                    "list[str]",
                    "str"
                ]
            }
        },
        "_redis_to_py_pattern": {
            "name": "_redis_to_py_pattern",
            "location": 5,
            "return": [
                "typing.Generator[typing.Text]",
                "typing.Generator[typing.Union[typing.Text,int,list[str]]]"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "list[int]",
                    "list[list[str]]"
                ]
            }
        }
    },
    "aio-openapi-master/openapi/ws/__init__.py": {},
    "aio-openapi-master/tests/conftest.py": {
        "sync_url": {
            "name": "sync_url",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "clean_migrations": {
            "name": "clean_migrations",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sentry_mock": {
            "name": "sentry_mock",
            "location": 30,
            "return": [],
            "arguments": {
                "mocker": [
                    "typing.Callable[bytes, None]",
                    "float",
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "event_loop": {
            "name": "event_loop",
            "location": 37,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "clear_db": {
            "name": "clear_db",
            "location": 47,
            "return": [],
            "arguments": {
                "sync_url": [
                    "str",
                    "typing.Iterable[str]",
                    "None"
                ]
            }
        }
    },
    "aio-openapi-master/tests/utils.py": {
        "FakeRequest.from_app": {
            "name": "from_app",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]"
                ],
                "app": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "aio-openapi-master/tests/__init__.py": {},
    "aio-openapi-master/tests/core/test_cli.py": {
        "test_usage": {
            "name": "test_usage",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_version": {
            "name": "test_version",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_version_openapi": {
            "name": "test_version_openapi",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serve": {
            "name": "test_serve",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serve_index": {
            "name": "test_serve_index",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_commands": {
            "name": "test_commands",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "hello": {
            "name": "hello",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "aio-openapi-master/tests/core/test_columns.py": {
        "test_runtime_error_with_incorrect_params": {
            "name": "test_runtime_error_with_incorrect_params",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/core/test_cruddb.py": {},
    "aio-openapi-master/tests/core/test_db.py": {
        "test_drop_all": {
            "name": "test_drop_all",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        },
        "test_db_props": {
            "name": "test_db_props",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        }
    },
    "aio-openapi-master/tests/core/test_db_cli.py": {
        "_migrate": {
            "name": "_migrate",
            "location": 10,
            "return": [
                "None",
                "list[tuple[typing.Union[str,str]]]",
                "dict[str, typing.Any]",
                "CliRunner"
            ],
            "arguments": {
                "cli": [
                    "str",
                    "int"
                ],
                "name": [
                    "typing.Text"
                ],
                "runner": [
                    "None",
                    "list[tuple[typing.Union[str,str]]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_current": {
            "name": "_current",
            "location": 22,
            "return": [],
            "arguments": {
                "cli": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "runner": [
                    "None",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "_drop": {
            "name": "_drop",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "str",
                    "None"
                ],
                "runner": [
                    "None",
                    "typing.Mapping",
                    "dict[, ]",
                    "bool"
                ]
            }
        }
    },
    "aio-openapi-master/tests/core/test_db_model.py": {},
    "aio-openapi-master/tests/core/test_db_path_extra.py": {},
    "aio-openapi-master/tests/core/test_db_single.py": {},
    "aio-openapi-master/tests/core/test_dc_db.py": {
        "test_convert_task": {
            "name": "test_convert_task",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        },
        "test_convert_random": {
            "name": "test_convert_random",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "str"
                ]
            }
        },
        "test_validate": {
            "name": "test_validate",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "db": []
            }
        },
        "test_date": {
            "name": "test_date",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "str"
                ]
            }
        },
        "test_json_list": {
            "name": "test_json_list",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "set[str]",
                    "str"
                ]
            }
        },
        "test_include": {
            "name": "test_include",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "str"
                ]
            }
        },
        "test_require": {
            "name": "test_require",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "db": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "aio-openapi-master/tests/core/test_errors.py": {},
    "aio-openapi-master/tests/core/test_filters.py": {},
    "aio-openapi-master/tests/core/test_json.py": {
        "test_encoder_uuid": {
            "name": "test_encoder_uuid",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encoder_enum": {
            "name": "test_encoder_enum",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encoder_datetime": {
            "name": "test_encoder_datetime",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encoder_invalid_type": {
            "name": "test_encoder_invalid_type",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/core/test_logger.py": {
        "test_logger": {
            "name": "test_logger",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_serve": {
            "name": "test_serve",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/core/test_paths.py": {},
    "aio-openapi-master/tests/core/test_union.py": {},
    "aio-openapi-master/tests/core/test_utils.py": {
        "test_env": {
            "name": "test_env",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_debug_flag": {
            "name": "test_debug_flag",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_http_exception": {
            "name": "test_json_http_exception",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_http_exception_reason": {
            "name": "test_json_http_exception_reason",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exist_database_not_configured": {
            "name": "test_exist_database_not_configured",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_key": {
            "name": "test_replace_key",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_typing_info": {
            "name": "test_typing_info",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_typing_info_dict_list": {
            "name": "test_typing_info_dict_list",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_typing_info": {
            "name": "test_bad_typing_info",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/data/test_fields.py": {
        "test_base_validator": {
            "name": "test_base_validator",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ListValidator_call_valid": {
            "name": "test_ListValidator_call_valid",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ListValidator_call_invalid": {
            "name": "test_ListValidator_call_invalid",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_UUIDValidator_call_valid": {
            "name": "test_UUIDValidator_call_valid",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_UUIDValidator_call_invalid": {
            "name": "test_UUIDValidator_call_invalid",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_UUIDValidator_dump": {
            "name": "test_UUIDValidator_dump",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_EnumValidator_call_valid": {
            "name": "test_EnumValidator_call_valid",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_EnumValidator_call_invalid": {
            "name": "test_EnumValidator_call_invalid",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum_validator_dump": {
            "name": "test_enum_validator_dump",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Choice_call_valid": {
            "name": "test_Choice_call_valid",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_Choice_call_invalid": {
            "name": "test_Choice_call_invalid",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_DateTimeValidator_call_valid": {
            "name": "test_DateTimeValidator_call_valid",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_DateTimeValidator_call_invalid": {
            "name": "test_DateTimeValidator_call_invalid",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_DateTimeValidator_dump": {
            "name": "test_DateTimeValidator_dump",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_DateTimeValidator_timezone": {
            "name": "test_DateTimeValidator_timezone",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_NumberValidator_valid": {
            "name": "test_NumberValidator_valid",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_NumberValidator_invalid": {
            "name": "test_NumberValidator_invalid",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_NumberValidator_dump": {
            "name": "test_NumberValidator_dump",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_IntegerValidator_valid": {
            "name": "test_IntegerValidator_valid",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_IntegerValidator_invalid": {
            "name": "test_IntegerValidator_invalid",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_IntegerValidator_dump": {
            "name": "test_IntegerValidator_dump",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_DecimalValidator_valid": {
            "name": "test_DecimalValidator_valid",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_DecimalValidator_precision_None": {
            "name": "test_DecimalValidator_precision_None",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_DecimalValidator_invalid": {
            "name": "test_DecimalValidator_invalid",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_DecimalValidator_dump": {
            "name": "test_DecimalValidator_dump",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_number_validator_string": {
            "name": "test_number_validator_string",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_email_validator_valid": {
            "name": "test_email_validator_valid",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_email_validator_invalid": {
            "name": "test_email_validator_invalid",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_BoolValidator_valid": {
            "name": "test_BoolValidator_valid",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_BoolValidator_dump": {
            "name": "test_BoolValidator_dump",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_override_field_type": {
            "name": "test_override_field_type",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_additional_metadata": {
            "name": "test_additional_metadata",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FakeValidator.dump": {
            "name": "dump",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list[float]",
                    "bool",
                    "typing.Any",
                    "float"
                ]
            }
        },
        "FakeValidator.__call__": {
            "name": "__call__",
            "location": 43,
            "return": [
                "str",
                "int",
                "list[]",
                "list[list[]]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "int",
                    "list[]",
                    "list[list[]]"
                ],
                "value": [
                    "str",
                    "int",
                    "list[]",
                    "list[list[]]"
                ]
            }
        },
        "FakeValidatorError.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type"
                ],
                "value": [
                    "str",
                    "int",
                    "list[]",
                    "list[list[]]"
                ]
            }
        }
    },
    "aio-openapi-master/tests/data/test_json_field.py": {
        "test_validator": {
            "name": "test_validator",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validattionb_fail_list": {
            "name": "test_validattionb_fail_list",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validattionb_fail_dict": {
            "name": "test_validattionb_fail_dict",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_field_error": {
            "name": "test_json_field_error",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/data/test_validate_nested.py": {
        "test_prices": {
            "name": "test_prices",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/data/test_validator.py": {
        "test_validated_schema": {
            "name": "test_validated_schema",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validated_schema_errors": {
            "name": "test_validated_schema_errors",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_openapi_listvalidator": {
            "name": "test_openapi_listvalidator",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_permission": {
            "name": "test_permission",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_role": {
            "name": "test_role",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_post_process": {
            "name": "test_post_process",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_list": {
            "name": "test_validate_list",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_union": {
            "name": "test_validate_union",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_union_nested": {
            "name": "test_validate_union_nested",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_foo": {
            "name": "test_foo",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_foo2": {
            "name": "test_foo2",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_float_validation": {
            "name": "test_float_validation",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/data/test_view.py": {
        "test_error": {
            "name": "test_error",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/example/endpoints.py": {
        "TasksPath.filter_done": {
            "name": "filter_done",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "str",
                    "int",
                    "set[str]",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "list[]",
                    "dict[, ]"
                ],
                "value": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "aio-openapi-master/tests/example/endpoints_additional.py": {
        "TaskPath2.get_filters": {
            "name": "get_filters",
            "location": 227,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoSummaryMethodPath.get": {
            "name": "get",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoDescriptionMethodPath.get": {
            "name": "get",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-openapi-master/tests/example/endpoints_base.py": {},
    "aio-openapi-master/tests/example/endpoints_form.py": {},
    "aio-openapi-master/tests/example/endpoints_pagination.py": {},
    "aio-openapi-master/tests/example/main.py": {
        "create_app": {
            "name": "create_app",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "setup_app": {
            "name": "setup_app",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "aio-openapi-master/tests/example/models.py": {
        "TaskAdd.validate": {
            "name": "validate",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "data": [
                    "int"
                ],
                "errors": [
                    "int"
                ]
            }
        }
    },
    "aio-openapi-master/tests/example/ws.py": {
        "LocalBroker.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalBroker.for_app": {
            "name": "for_app",
            "location": 50,
            "return": [
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "cls": [
                    "tuple[typing.Union[int,int]]",
                    "bool",
                    "str"
                ],
                "app": [
                    "str",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "LocalBroker.get_data": {
            "name": "get_data",
            "location": 88,
            "return": [
                "str",
                "list[list[typing.Any]]",
                "dict[, ]",
                "bytes",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "list[list[typing.Any]]",
                    "dict[, ]",
                    "bytes",
                    "dict[str, str]"
                ]
            }
        },
        "LocalBroker.raise_error": {
            "name": "raise_error",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalBroker.raise_runtime": {
            "name": "raise_runtime",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aio-openapi-master/tests/example/db/tables1.py": {
        "patch_init": {
            "name": "patch_init",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "binary": [],
                "native": []
            }
        },
        "title_field": {
            "name": "title_field",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "meta": {
            "name": "meta",
            "location": 28,
            "return": [],
            "arguments": {
                "meta": []
            }
        }
    },
    "aio-openapi-master/tests/example/db/tables2.py": {
        "additional_meta": {
            "name": "additional_meta",
            "location": 11,
            "return": [
                "str",
                "None",
                "typing.Type",
                "int"
            ],
            "arguments": {
                "meta": [
                    "None",
                    "str",
                    "bool",
                    "typing.Match"
                ]
            }
        },
        "extra": {
            "name": "extra",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "meta": []
            }
        }
    },
    "aio-openapi-master/tests/example/db/__init__.py": {
        "setup": {
            "name": "setup",
            "location": 15,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "setup_tables": {
            "name": "setup_tables",
            "location": 19,
            "return": [
                "str",
                "tuple[typing.Union[float,float]]"
            ],
            "arguments": {
                "db": [
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        }
    },
    "aio-openapi-master/tests/pagination/conftest.py": {},
    "aio-openapi-master/tests/pagination/test_base_classes.py": {
        "test_pagination": {
            "name": "test_pagination",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_search": {
            "name": "test_search",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/pagination/test_cursor_pagination.py": {
        "test_cursor_pagination_error": {
            "name": "test_cursor_pagination_error",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/pagination/test_offset_pagination.py": {
        "pag_links": {
            "name": "pag_links",
            "location": 14,
            "return": [],
            "arguments": {
                "total": [
                    "dict[, ]",
                    "list[dict[, ]]",
                    "str",
                    "set[str]"
                ],
                "limit": [
                    "dict[, ]",
                    "list[dict[, ]]",
                    "str",
                    "set[str]"
                ],
                "offset": [
                    "dict[, ]",
                    "list[dict[, ]]",
                    "str",
                    "set[str]"
                ]
            }
        },
        "test_last_link": {
            "name": "test_last_link",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cursor_pagination_error": {
            "name": "test_cursor_pagination_error",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/pagination/utils.py": {},
    "aio-openapi-master/tests/pagination/__init__.py": {},
    "aio-openapi-master/tests/spec/test_docstrings.py": {
        "test_search_docstring": {
            "name": "test_search_docstring",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/spec/test_schema_parser.py": {
        "parser": {
            "name": "parser",
            "location": 20,
            "return": [
                "SchemaParser"
            ],
            "arguments": {}
        },
        "test_get_schema_ref": {
            "name": "test_get_schema_ref",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_schema2json": {
            "name": "test_schema2json",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_field2json": {
            "name": "test_field2json",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "dict[, ]",
                    "dict[typing.Any, int]",
                    "str"
                ],
                "field": [
                    "dict[, ]",
                    "dict[typing.Any, int]",
                    "str"
                ],
                "schema": [
                    "dict[, ]",
                    "dict[typing.Any, int]",
                    "str"
                ]
            }
        },
        "test_field2json_format": {
            "name": "test_field2json_format",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field2json_invalid_type": {
            "name": "test_field2json_invalid_type",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field2json_missing_description": {
            "name": "test_field2json_missing_description",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum2json": {
            "name": "test_enum2json",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list2json": {
            "name": "test_list2json",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field2json_again": {
            "name": "test_field2json_again",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_string_keys": {
            "name": "test_non_string_keys",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/spec/test_spec.py": {
        "create_spec_request": {
            "name": "create_spec_request",
            "location": 11,
            "return": [],
            "arguments": {
                "routes": [
                    "int",
                    "list[str]",
                    "str",
                    "None"
                ]
            }
        },
        "test_init": {
            "name": "test_init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_spec_request.setup_app": {
            "name": "setup_app",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "aio-openapi-master/tests/spec/test_spec_utils.py": {
        "test_compact": {
            "name": "test_compact",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compact_dict": {
            "name": "test_compact_dict",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_trim_docstring": {
            "name": "test_trim_docstring",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dedent": {
            "name": "test_dedent",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_yaml_from_docstring": {
            "name": "test_load_yaml_from_docstring",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_yaml_from_docstring_invalid": {
            "name": "test_load_yaml_from_docstring_invalid",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aio-openapi-master/tests/spec/test_validate_spec.py": {},
    "aio-openapi-master/tests/ws/test_channels.py": {
        "test_redis_to_py_pattern": {
            "name": "test_redis_to_py_pattern",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "match": {
            "name": "match",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [
                    "str",
                    "typing.Callable[Any,Any, None]",
                    "None"
                ],
                "text": [
                    "str",
                    "typing.Callable[Any,Any, None]",
                    "None"
                ]
            }
        },
        "not_match": {
            "name": "not_match",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": [],
                "text": [
                    "str",
                    "bytes",
                    "typing.Callable[Any,Any, None]",
                    "None"
                ]
            }
        },
        "test_channels_wildcard.fire": {
            "name": "fire",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "channel": [],
                "event": [],
                "data": []
            }
        }
    },
    "aio-openapi-master/tests/ws/test_ws.py": {}
}
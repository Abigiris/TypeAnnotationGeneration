{
    "aioapp-master/setup.py": {},
    "aioapp-master/travis_pypi_setup.py": {
        "load_key": {
            "name": "load_key",
            "location": 28,
            "return": [],
            "arguments": {
                "pubkey": [
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 44,
            "return": [],
            "arguments": {
                "pubkey": [
                    "str",
                    "list[str]",
                    "typing.Callable[T, bool]",
                    "bytes",
                    "None"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "fetch_public_key": {
            "name": "fetch_public_key",
            "location": 55,
            "return": [
                "str",
                "tuple[typing.Union[typing.Any,typing.Any,None]]"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "prepend_line": {
            "name": "prepend_line",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "line": [
                    "str",
                    "int",
                    "typing.Mapping",
                    "typing.Iterator"
                ]
            }
        },
        "load_yaml_config": {
            "name": "load_yaml_config",
            "location": 80,
            "return": [],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "save_yaml_config": {
            "name": "save_yaml_config",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "update_travis_deploy_password": {
            "name": "update_travis_deploy_password",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "encrypted_password": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "aioapp-master/aioapp/app.py": {
        "_raise_graceful_exit": {
            "name": "_raise_graceful_exit",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "Component.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "loop": [],
                "on_start": []
            }
        },
        "Application.add": {
            "name": "add",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "comp": [],
                "stop_after": []
            }
        },
        "Application.__getattr__": {
            "name": "__getattr__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Application.log_err": {
            "name": "log_err",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "err": []
            }
        },
        "Application.log_warn": {
            "name": "log_warn",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "warn": []
            }
        },
        "Application.log_info": {
            "name": "log_info",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "Application.log_debug": {
            "name": "log_debug",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "debug": []
            }
        },
        "Application.setup_logging": {
            "name": "setup_logging",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "tracer_driver": [],
                "tracer_addr": [],
                "tracer_name": [],
                "tracer_sample_rate": [],
                "tracer_send_inteval": [],
                "tracer_default_sampled": [],
                "tracer_default_debug": [],
                "metrics_driver": [],
                "metrics_addr": [],
                "metrics_name": [],
                "on_span_finish": []
            }
        },
        "Application.run": {
            "name": "run",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.run_loop": {
            "name": "run_loop",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aioapp-master/aioapp/config.py": {
        "Val.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Val.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Val.type_name": {
            "name": "type_name",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "Val.args_markdown": {
            "name": "args_markdown",
            "location": 27,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrVal.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "max": [
                    "None",
                    "str",
                    "int"
                ],
                "min": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "StrVal.__call__": {
            "name": "__call__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrVal.type_name": {
            "name": "type_name",
            "location": 54,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "StrVal.args_markdown": {
            "name": "args_markdown",
            "location": 57,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolVal.__call__": {
            "name": "__call__",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolVal.type_name": {
            "name": "type_name",
            "location": 81,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "IntVal.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "max": [
                    "None",
                    "str",
                    "int"
                ],
                "min": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "IntVal.__call__": {
            "name": "__call__",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntVal.type_name": {
            "name": "type_name",
            "location": 108,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "IntVal.args_markdown": {
            "name": "args_markdown",
            "location": 111,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatVal.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "max": [
                    "None",
                    "str",
                    "int"
                ],
                "min": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "FloatVal.__call__": {
            "name": "__call__",
            "location": 129,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatVal.type_name": {
            "name": "type_name",
            "location": 143,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "FloatVal.args_markdown": {
            "name": "args_markdown",
            "location": 146,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileVal.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "mode": [
                    "typing.Text"
                ],
                "encoding": [
                    "typing.Text"
                ]
            }
        },
        "FileVal.__call__": {
            "name": "__call__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "mode": [
                    "typing.Text"
                ],
                "encoding": [
                    "typing.Text"
                ]
            }
        },
        "FileVal.type_name": {
            "name": "type_name",
            "location": 174,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "FileVal.args_markdown": {
            "name": "args_markdown",
            "location": 177,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirVal.__call__": {
            "name": "__call__",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirVal.type_name": {
            "name": "type_name",
            "location": 195,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "bytes"
                ]
            }
        },
        "Config._get_val": {
            "name": "_get_val",
            "location": 238,
            "return": [
                "StrVal",
                "BoolVal",
                "IntVal",
                "FloatVal",
                "FileVal",
                "DirVal",
                "bool",
                "str",
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "dict[, ]",
                    "None",
                    "typing.Type"
                ],
                "val_type": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "Config.as_markdown": {
            "name": "as_markdown",
            "location": 257,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[str, set[str]]",
                    "typing.Type"
                ]
            }
        }
    },
    "aioapp-master/aioapp/error.py": {},
    "aioapp-master/aioapp/misc.py": {
        "async_call": {
            "name": "async_call",
            "location": 17,
            "return": [
                "dict[typing.Text, None]"
            ],
            "arguments": {
                "loop": [],
                "func": []
            }
        },
        "mask_url_pwd": {
            "name": "mask_url_pwd",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "route": []
            }
        },
        "get_func_params": {
            "name": "get_func_params",
            "location": 60,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "method": [],
                "called_params": []
            }
        },
        "_json_encoder": {
            "name": "_json_encoder",
            "location": 99,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "obj": []
            }
        },
        "json_encode": {
            "name": "json_encode",
            "location": 120,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "parse_dsn": {
            "name": "parse_dsn",
            "location": 124,
            "return": [
                "list[typing.Union[typing.Text,int,None]]"
            ],
            "arguments": {
                "dsn": [],
                "default_port": [
                    "int"
                ],
                "protocol": [
                    "typing.Text"
                ]
            }
        },
        "rndstr": {
            "name": "rndstr",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "chars": []
            }
        },
        "async_call._call": {
            "name": "_call",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "func": []
            }
        }
    },
    "aioapp-master/aioapp/tracer.py": {
        "Span.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [],
                "metrics": [],
                "trace_id": [],
                "id": [
                    "None"
                ],
                "parent_id": [
                    "None"
                ],
                "sampled": [
                    "None"
                ],
                "debug": [
                    "bool"
                ],
                "shared": [
                    "bool"
                ],
                "skip": [
                    "bool"
                ],
                "parent": [
                    "None"
                ]
            }
        },
        "Span.skip": {
            "name": "skip",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Span.make_headers": {
            "name": "make_headers",
            "location": 97,
            "return": [
                "dict[, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Span.new_child": {
            "name": "new_child",
            "location": 108,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None"
                ],
                "kind": [
                    "None"
                ]
            }
        },
        "Span.start": {
            "name": "start",
            "location": 128,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "ts": [
                    "None"
                ]
            }
        },
        "Span.finish": {
            "name": "finish",
            "location": 133,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "ts": [
                    "None"
                ],
                "exception": [
                    "None"
                ]
            }
        },
        "Span._send_span": {
            "name": "_send_span",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Span.tag": {
            "name": "tag",
            "location": 184,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": [],
                "metrics": [
                    "bool"
                ]
            }
        },
        "Span.metrics_tag": {
            "name": "metrics_tag",
            "location": 190,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Span.annotate": {
            "name": "annotate",
            "location": 194,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ts": [
                    "None"
                ]
            }
        },
        "Span.kind": {
            "name": "kind",
            "location": 198,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "span_kind": []
            }
        },
        "Span.name": {
            "name": "name",
            "location": 202,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "span_name": []
            }
        },
        "Span.remote_endpoint": {
            "name": "remote_endpoint",
            "location": 206,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "servce_name": []
            }
        },
        "Span.__enter__": {
            "name": "__enter__",
            "location": 214,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": []
            }
        },
        "Span.__exit__": {
            "name": "__exit__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception_type": [],
                "exception_value": [],
                "traceback": []
            }
        },
        "Span.get_zipkin_span": {
            "name": "get_zipkin_span",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Span.__str__": {
            "name": "__str__",
            "location": 235,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tracer.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [],
                "loop": []
            }
        },
        "Tracer.new_trace": {
            "name": "new_trace",
            "location": 257,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "sampled": [
                    "None"
                ],
                "debug": [
                    "None"
                ],
                "skip": [
                    "bool"
                ]
            }
        },
        "Tracer.new_trace_from_headers": {
            "name": "new_trace_from_headers",
            "location": 275,
            "return": [
                "Span"
            ],
            "arguments": {
                "self": [],
                "headers": [],
                "skip": [
                    "bool"
                ]
            }
        },
        "Tracer.setup_tracer": {
            "name": "setup_tracer",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "driver": [],
                "name": [],
                "addr": [],
                "sample_rate": [],
                "send_interval": [],
                "default_sampled": [
                    "bool"
                ],
                "default_debug": [
                    "bool"
                ]
            }
        },
        "Tracer.setup_metrics": {
            "name": "setup_metrics",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "driver": [],
                "addr": [],
                "name": []
            }
        },
        "InfluxMetrics.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [],
                "url": [],
                "name": [],
                "loop": []
            }
        },
        "InfluxMetrics._connect": {
            "name": "_connect",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InfluxMetrics._escape_name": {
            "name": "_escape_name",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "InfluxMetrics.send": {
            "name": "send",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": []
            }
        },
        "InfluxMetrics.connection_made": {
            "name": "connection_made",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "InfluxMetrics.datagram_received": {
            "name": "datagram_received",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "addr": []
            }
        },
        "InfluxMetrics.error_received": {
            "name": "error_received",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "InfluxMetrics.connection_lost": {
            "name": "connection_lost",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": []
            }
        }
    },
    "aioapp-master/aioapp/__init__.py": {},
    "aioapp-master/examples/simple.py": {
        "MyApp.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "int",
                    "bytes",
                    "float"
                ],
                "on_start": [
                    "None",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        }
    },
    "aioapp-master/tests/conftest.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 13,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "str"
                ]
            }
        },
        "get_free_port": {
            "name": "get_free_port",
            "location": 26,
            "return": [],
            "arguments": {
                "protocol": [
                    "typing.Text"
                ]
            }
        },
        "tracer_server": {
            "name": "tracer_server",
            "location": 44,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,list[]]]]"
            ],
            "arguments": {
                "loop": [
                    "str"
                ]
            }
        },
        "metrics_server": {
            "name": "metrics_server",
            "location": 76,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text,int,list[]]]]"
            ],
            "arguments": {
                "loop": []
            }
        },
        "metrics_server.TelegrafProtocol.connection_made": {
            "name": "connection_made",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "metrics_server.TelegrafProtocol.datagram_received": {
            "name": "datagram_received",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "addr": []
            }
        },
        "metrics_server.TelegrafProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "err": []
            }
        }
    },
    "aioapp-master/tests/test_app.py": {
        "test_app_run": {
            "name": "test_app_run",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_run_prepare_fail": {
            "name": "test_app_run_prepare_fail",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_stop_seq": {
            "name": "test_app_stop_seq",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_app_run.Cmp.interrupt": {
            "name": "interrupt",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_app_run_prepare_fail.Cmp.interrupt": {
            "name": "interrupt",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_app_stop_seq.Cmp.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "is_interrupt": [
                    "bool"
                ]
            }
        },
        "test_app_stop_seq.Cmp.interrupt": {
            "name": "interrupt",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioapp-master/tests/test_config.py": {
        "test_config": {
            "name": "test_config",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_invalid_str": {
            "name": "test_config_invalid_str",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_invalid_bool": {
            "name": "test_config_invalid_bool",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_invalid_int": {
            "name": "test_config_invalid_int",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_invalid_float": {
            "name": "test_config_invalid_float",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_invalid_file": {
            "name": "test_config_invalid_file",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_invalid_dir": {
            "name": "test_config_invalid_dir",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_invalid_custom": {
            "name": "test_config_invalid_custom",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_invalid_config": {
            "name": "test_config_invalid_config",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_as_markdown": {
            "name": "test_config_as_markdown",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config.CustomVal.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "compare": []
            }
        },
        "test_config.CustomVal.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_config_invalid_custom.CustomVal.__call__": {
            "name": "__call__",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioapp-master/tests/test_misc.py": {
        "test_get_func_params_as_method": {
            "name": "test_get_func_params_as_method",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_func_params_as_func": {
            "name": "test_get_func_params_as_func",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_func_params_with_functools": {
            "name": "test_get_func_params_with_functools",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_func_params_with_kwargs": {
            "name": "test_get_func_params_with_kwargs",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_func_params": {
            "name": "test_get_func_params",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_func_params_unexpected_param": {
            "name": "test_get_func_params_unexpected_param",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_func_params_no_arg": {
            "name": "test_get_func_params_no_arg",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_func_params_no_kwarg": {
            "name": "test_get_func_params_no_kwarg",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mask_url_pwd": {
            "name": "test_mask_url_pwd",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_encode": {
            "name": "test_json_encode",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rndstr": {
            "name": "test_rndstr",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_dsn": {
            "name": "test_parse_dsn",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_func_params_as_func.a2": {
            "name": "a2",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "c": [
                    "int"
                ]
            }
        },
        "test_get_func_params_with_functools.a4": {
            "name": "a4",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "c": [
                    "int"
                ],
                "e": [
                    "int"
                ]
            }
        },
        "test_get_func_params_with_kwargs.a5": {
            "name": "a5",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "a": []
            }
        },
        "test_get_func_params.func1": {
            "name": "func1",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "c": [
                    "int"
                ],
                "d": [
                    "int"
                ]
            }
        },
        "test_get_func_params_unexpected_param.func1": {
            "name": "func1",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "a": []
            }
        },
        "test_get_func_params_no_arg.func1": {
            "name": "func1",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "a": []
            }
        },
        "test_get_func_params_no_kwarg.func1": {
            "name": "func1",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_encode.uk": {
            "name": "uk",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_func_params_as_method.A1.func": {
            "name": "func",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [],
                "b": [
                    "int"
                ]
            }
        }
    },
    "aioapp-master/tests/test_tracer.py": {},
    "aioapp-master/tests/__init__.py": {}
}
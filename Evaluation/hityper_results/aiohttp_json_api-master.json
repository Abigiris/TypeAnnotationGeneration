{
    "aiohttp_json_api-master/punch_config.py": {},
    "aiohttp_json_api-master/punch_version.py": {},
    "aiohttp_json_api-master/setup.py": {},
    "aiohttp_json_api-master/travis_pypi_setup.py": {
        "load_key": {
            "name": "load_key",
            "location": 29,
            "return": [],
            "arguments": {
                "pubkey": [
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 44,
            "return": [],
            "arguments": {
                "pubkey": [
                    "str",
                    "list[str]",
                    "typing.Callable[T, bool]",
                    "bytes",
                    "None"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "fetch_public_key": {
            "name": "fetch_public_key",
            "location": 55,
            "return": [
                "str",
                "tuple[typing.Union[typing.Any,typing.Any,None]]"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "prepend_line": {
            "name": "prepend_line",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "line": [
                    "str",
                    "int",
                    "typing.Mapping",
                    "typing.Iterator"
                ]
            }
        },
        "load_yaml_config": {
            "name": "load_yaml_config",
            "location": 81,
            "return": [],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "save_yaml_config": {
            "name": "save_yaml_config",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "update_travis_deploy_password": {
            "name": "update_travis_deploy_password",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "encrypted_password": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/common.py": {},
    "aiohttp_json_api-master/aiohttp_json_api/context.py": {
        "JSONAPIContext.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "resource_type": [
                    "None"
                ]
            }
        },
        "JSONAPIContext.request": {
            "name": "request",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIContext.app": {
            "name": "app",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIContext.resource_type": {
            "name": "resource_type",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIContext.registry": {
            "name": "registry",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIContext.schema": {
            "name": "schema",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIContext.controller": {
            "name": "controller",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIContext.filters": {
            "name": "filters",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIContext.fields": {
            "name": "fields",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIContext.include": {
            "name": "include",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIContext.sorting": {
            "name": "sorting",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIContext.event": {
            "name": "event",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIContext.pagination": {
            "name": "pagination",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIContext.convert_field_name": {
            "name": "convert_field_name",
            "location": 132,
            "return": [],
            "arguments": {
                "cls": [],
                "field_name": []
            }
        },
        "JSONAPIContext.parse_request_filters": {
            "name": "parse_request_filters",
            "location": 138,
            "return": [
                "MultiDict"
            ],
            "arguments": {
                "cls": [],
                "request": []
            }
        },
        "JSONAPIContext.parse_request_fields": {
            "name": "parse_request_fields",
            "location": 220,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "cls": [],
                "request": []
            }
        },
        "JSONAPIContext.parse_request_includes": {
            "name": "parse_request_includes",
            "location": 252,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "cls": [],
                "request": []
            }
        },
        "JSONAPIContext.parse_request_sorting": {
            "name": "parse_request_sorting",
            "location": 275,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "cls": [],
                "request": []
            }
        },
        "JSONAPIContext.has_filter": {
            "name": "has_filter",
            "location": 310,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "name": []
            }
        },
        "JSONAPIContext.get_filter": {
            "name": "get_filter",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "name": [],
                "default": [
                    "None"
                ]
            }
        },
        "JSONAPIContext.get_order": {
            "name": "get_order",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "default": []
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/controller.py": {},
    "aiohttp_json_api-master/aiohttp_json_api/encoder.py": {
        "JSONEncoder.default": {
            "name": "default",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "float",
                    "list[list[]]"
                ]
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/errors.py": {
        "Error.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Error.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Error.as_dict": {
            "name": "as_dict",
            "location": 106,
            "return": [
                "dict[typing.Text, typing.Union[str,dict[, ]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorList.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": []
            }
        },
        "ErrorList.__bool__": {
            "name": "__bool__",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorList.__len__": {
            "name": "__len__",
            "location": 152,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorList.__str__": {
            "name": "__str__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ErrorList.status": {
            "name": "status",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorList.append": {
            "name": "append",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "ErrorList.extend": {
            "name": "extend",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": []
            }
        },
        "ErrorList.json": {
            "name": "json",
            "location": 203,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingField.__init__": {
            "name": "__init__",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [],
                "field": []
            }
        },
        "UnresolvableIncludePath.__init__": {
            "name": "__init__",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "UnsortableField.__init__": {
            "name": "__init__",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [],
                "field": []
            }
        },
        "UnfilterableField.__init__": {
            "name": "__init__",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [],
                "field": [],
                "filtername": []
            }
        },
        "ResourceNotFound.__init__": {
            "name": "__init__",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [],
                "id": []
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/handlers.py": {},
    "aiohttp_json_api-master/aiohttp_json_api/helpers.py": {
        "is_generator": {
            "name": "is_generator",
            "location": 16,
            "return": [],
            "arguments": {
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "is_iterable_but_not_string": {
            "name": "is_iterable_but_not_string",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "is_indexable_but_not_string": {
            "name": "is_indexable_but_not_string",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "is_collection": {
            "name": "is_collection",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "list[]"
                ],
                "exclude": [
                    "tuple[]"
                ]
            }
        },
        "ensure_collection": {
            "name": "ensure_collection",
            "location": 40,
            "return": [
                "int",
                "typing.Iterable[object]",
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "typing.Iterable[object]",
                    "str"
                ],
                "exclude": [
                    "tuple[]"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 45,
            "return": [],
            "arguments": {
                "iterable": [
                    "dict[str, float]",
                    "typing.Callable[[], None]",
                    "dict[str, tuple[]]"
                ],
                "default": [
                    "None",
                    "dict[str, float]",
                    "typing.Callable[[], None]",
                    "dict[str, tuple[]]"
                ],
                "key": [
                    "None",
                    "dict[str, float]",
                    "typing.Callable[[], None]",
                    "dict[str, tuple[]]"
                ]
            }
        },
        "make_sentinel": {
            "name": "make_sentinel",
            "location": 77,
            "return": [
                "Sentinel"
            ],
            "arguments": {
                "name": [
                    "typing.Text"
                ],
                "var_name": [
                    "None",
                    "dict[, ]",
                    "bool",
                    "str",
                    "typing.Sequence[str]",
                    "typing.Callable[str, str]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "get_router_resource": {
            "name": "get_router_resource",
            "location": 132,
            "return": [],
            "arguments": {
                "app": [],
                "resource": []
            }
        },
        "get_processors": {
            "name": "get_processors",
            "location": 137,
            "return": [
                "typing.Generator[tuple[typing.Union[str,dict[int, str],dict[str, str],list[tuple[typing.Union[str,int]]],dict[str, typing.Union[dict[, ],typing.Any]],dict[, ],str]]]",
                "None",
                "typing.Generator[tuple[typing.Union[None,str,bool,typing.Sequence[],typing.Type,dict[, ]]]]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool",
                    "None"
                ],
                "tag": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "typing.AnyStr",
                    "bool"
                ],
                "field": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "typing.AnyStr",
                    "bool"
                ],
                "default": [
                    "None",
                    "str",
                    "bool",
                    "typing.Sequence[]",
                    "typing.Type"
                ]
            }
        },
        "quality_and_fitness_parsed": {
            "name": "quality_and_fitness_parsed",
            "location": 157,
            "return": [
                "tuple[typing.Optional[tuple[typing.Union[float,int]]]]"
            ],
            "arguments": {
                "mime_type": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "parsed_ranges": [
                    "str"
                ]
            }
        },
        "best_match": {
            "name": "best_match",
            "location": 214,
            "return": [
                "tuple[typing.Optional[typing.Text]]"
            ],
            "arguments": {
                "supported": [
                    "dict[str, typing.Any]",
                    "str",
                    "list[str]"
                ],
                "header": [
                    "str"
                ]
            }
        },
        "get_mime_type_params": {
            "name": "get_mime_type_params",
            "location": 240,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "mime_type": [
                    "list[]",
                    "str"
                ]
            }
        },
        "make_sentinel.Sentinel.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_sentinel.Sentinel.__repr__": {
            "name": "__repr__",
            "location": 115,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_sentinel.Sentinel.__nonzero__": {
            "name": "__nonzero__",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_sentinel.Sentinel.__reduce__": {
            "name": "__reduce__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/jsonpointer.py": {
        "JSONPointer.__truediv__": {
            "name": "__truediv__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/middleware.py": {},
    "aiohttp_json_api-master/aiohttp_json_api/pagination.py": {
        "PaginationABC.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "PaginationABC.url": {
            "name": "url",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaginationABC.meta": {
            "name": "meta",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaginationABC.links": {
            "name": "links",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaginationABC.page_link": {
            "name": "page_link",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitOffset.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "total_resources": [
                    "int"
                ]
            }
        },
        "LimitOffset.links": {
            "name": "links",
            "location": 183,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LimitOffset.meta": {
            "name": "meta",
            "location": 205,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberSize.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "total_resources": []
            }
        },
        "NumberSize.limit": {
            "name": "limit",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberSize.offset": {
            "name": "offset",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberSize.last_page": {
            "name": "last_page",
            "location": 283,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberSize.links": {
            "name": "links",
            "location": 287,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberSize.meta": {
            "name": "meta",
            "location": 301,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cursor.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "prev_cursor": [
                    "None"
                ],
                "next_cursor": [
                    "None"
                ],
                "cursor_regex": [
                    "None"
                ]
            }
        },
        "Cursor.links": {
            "name": "links",
            "location": 383,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "prev_cursor": [
                    "None"
                ],
                "next_cursor": [
                    "None"
                ]
            }
        },
        "Cursor.meta": {
            "name": "meta",
            "location": 411,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/registry.py": {
        "Registry.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Registry.ensure_identifier": {
            "name": "ensure_identifier",
            "location": 31,
            "return": [
                "ResourceID"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "asdict": [
                    "bool"
                ]
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/schema.py": {
        "BaseSchema.get_object_id": {
            "name": "get_object_id",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "resource": []
            }
        },
        "BaseSchema.get_field": {
            "name": "get_field",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [],
                "key": []
            }
        },
        "BaseSchema.get_relationship_field": {
            "name": "get_relationship_field",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "relation_name": [],
                "source_parameter": [
                    "None"
                ]
            }
        },
        "BaseSchema.default_getter": {
            "name": "default_getter",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "field": [],
                "resource": []
            }
        },
        "BaseSchema.get_value": {
            "name": "get_value",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "resource": []
            }
        },
        "BaseSchema.serialize_resource": {
            "name": "serialize_resource",
            "location": 108,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "resource": []
            }
        },
        "BaseSchema.serialize_relationship": {
            "name": "serialize_relationship",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "relation_name": [],
                "resource": []
            }
        },
        "BaseSchema.map_data_to_schema": {
            "name": "map_data_to_schema",
            "location": 306,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/typings.py": {},
    "aiohttp_json_api-master/aiohttp_json_api/utils.py": {
        "jsonapi_response": {
            "name": "jsonapi_response",
            "location": 17,
            "return": [
                "Response"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "int",
                    "dict[str, dict[str, typing.Any]]",
                    "typing.MutableMapping"
                ]
            }
        },
        "serialize_resource": {
            "name": "serialize_resource",
            "location": 95,
            "return": [],
            "arguments": {
                "resource": [
                    "bool"
                ],
                "ctx": [
                    "bool"
                ]
            }
        },
        "error_to_response": {
            "name": "error_to_response",
            "location": 156,
            "return": [],
            "arguments": {
                "request": [
                    "list[]",
                    "dict[, ]"
                ],
                "error": [
                    "dict[str, str]",
                    "bool",
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "validate_uri_resource_id": {
            "name": "validate_uri_resource_id",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "list[allennlp.common.util.JsonDict]",
                    "None",
                    "float"
                ],
                "resource_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/__init__.py": {
        "setup_app_registry": {
            "name": "setup_app_registry",
            "location": 11,
            "return": [],
            "arguments": {
                "app": [],
                "registry_class": [],
                "config": []
            }
        },
        "setup_custom_handlers": {
            "name": "setup_custom_handlers",
            "location": 64,
            "return": [],
            "arguments": {
                "custom_handlers": []
            }
        },
        "setup_resources": {
            "name": "setup_resources",
            "location": 101,
            "return": [],
            "arguments": {
                "app": [],
                "base_path": [],
                "handlers": [],
                "routes_namespace": []
            }
        },
        "setup_jsonapi": {
            "name": "setup_jsonapi",
            "location": 135,
            "return": [],
            "arguments": {
                "app": [],
                "config": []
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/abc/contoller.py": {
        "ControllerMeta.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str",
                    "bool",
                    "None"
                ],
                "bases": [
                    "str",
                    "bool",
                    "None"
                ],
                "attrs": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "ControllerABC.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/abc/field.py": {
        "FieldABC.key": {
            "name": "key",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldABC.sp": {
            "name": "sp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldABC.name": {
            "name": "name",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "FieldABC.mapped_key": {
            "name": "mapped_key",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "FieldABC.serialize": {
            "name": "serialize",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bool",
                    "str"
                ]
            }
        },
        "FieldABC.deserialize": {
            "name": "deserialize",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bool",
                    "str"
                ],
                "sp": [
                    "bool",
                    "str"
                ]
            }
        },
        "FieldABC.pre_validate": {
            "name": "pre_validate",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "str"
                ],
                "data": [
                    "bool",
                    "str"
                ],
                "sp": [
                    "bool",
                    "str"
                ]
            }
        },
        "FieldABC.post_validate": {
            "name": "post_validate",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]",
                    "list[str]",
                    "list[]"
                ],
                "data": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]",
                    "list[str]",
                    "list[]"
                ],
                "sp": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]",
                    "list[str]",
                    "list[]"
                ]
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/abc/processors.py": {
        "MetaProcessors._resolve_processors": {
            "name": "_resolve_processors",
            "location": 6,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/abc/schema.py": {
        "issubclass": {
            "name": "issubclass",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "subclass": [],
                "baseclass": []
            }
        },
        "_get_fields": {
            "name": "_get_fields",
            "location": 46,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "attrs": [],
                "field_class": [],
                "pop": [
                    "bool"
                ]
            }
        },
        "_get_fields_by_mro": {
            "name": "_get_fields_by_mro",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "klass": [],
                "field_class": []
            }
        },
        "SchemaMeta._assign_sp": {
            "name": "_assign_sp",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "mcs": [],
                "fields": [],
                "sp": []
            }
        },
        "SchemaMeta._sp_to_field": {
            "name": "_sp_to_field",
            "location": 102,
            "return": [
                "MappingProxyType"
            ],
            "arguments": {
                "mcs": [],
                "fields": []
            }
        },
        "SchemaMeta.__new__": {
            "name": "__new__",
            "location": 116,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "attrs": []
            }
        },
        "SchemaMeta.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "attrs": []
            }
        },
        "SchemaMeta.__call__": {
            "name": "__call__",
            "location": 269,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SchemaOpts.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "SchemaABC.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "SchemaABC.default_getter": {
            "name": "default_getter",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "field": [],
                "resource": []
            }
        },
        "SchemaABC.get_field": {
            "name": "get_field",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "key": []
            }
        },
        "SchemaABC.get_relationship_field": {
            "name": "get_relationship_field",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "relation_name": [],
                "source_parameter": [
                    "None"
                ]
            }
        },
        "SchemaABC.get_value": {
            "name": "get_value",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "resource": []
            }
        },
        "SchemaABC.serialize_resource": {
            "name": "serialize_resource",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": []
            }
        },
        "SchemaABC.serialize_relationship": {
            "name": "serialize_relationship",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relation_name": [],
                "resource": []
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/abc/__init__.py": {},
    "aiohttp_json_api-master/aiohttp_json_api/fields/attributes.py": {
        "String.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "String.pre_validate": {
            "name": "pre_validate",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "String.deserialize": {
            "name": "deserialize",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "String.serialize": {
            "name": "serialize",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "Integer.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.pre_validate": {
            "name": "pre_validate",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Integer.deserialize": {
            "name": "deserialize",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Integer.serialize": {
            "name": "serialize",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "Float.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.pre_validate": {
            "name": "pre_validate",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Float.deserialize": {
            "name": "deserialize",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Float.serialize": {
            "name": "serialize",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "Complex.pre_validate": {
            "name": "pre_validate",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Complex.deserialize": {
            "name": "deserialize",
            "location": 183,
            "return": [
                "complex"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Complex.serialize": {
            "name": "serialize",
            "location": 186,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "Decimal.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decimal.pre_validate": {
            "name": "pre_validate",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Decimal.deserialize": {
            "name": "deserialize",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Decimal.serialize": {
            "name": "serialize",
            "location": 212,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "Fraction.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fraction.pre_validate": {
            "name": "pre_validate",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Fraction.deserialize": {
            "name": "deserialize",
            "location": 273,
            "return": [
                "Fraction"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Fraction.serialize": {
            "name": "serialize",
            "location": 276,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "DateTime.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateTime.pre_validate": {
            "name": "pre_validate",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "DateTime.deserialize": {
            "name": "deserialize",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "DateTime.serialize": {
            "name": "serialize",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "Date.__init__": {
            "name": "__init__",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Date.pre_validate": {
            "name": "pre_validate",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Date.deserialize": {
            "name": "deserialize",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Date.serialize": {
            "name": "serialize",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "TimeDelta.__init__": {
            "name": "__init__",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeDelta.pre_validate": {
            "name": "pre_validate",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "TimeDelta.deserialize": {
            "name": "deserialize",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "TimeDelta.serialize": {
            "name": "serialize",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "UUID.__init__": {
            "name": "__init__",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UUID.pre_validate": {
            "name": "pre_validate",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "UUID.deserialize": {
            "name": "deserialize",
            "location": 407,
            "return": [
                "None",
                "UUID"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "UUID.serialize": {
            "name": "serialize",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "Boolean.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boolean.pre_validate": {
            "name": "pre_validate",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Boolean.serialize": {
            "name": "serialize",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "URI.pre_validate": {
            "name": "pre_validate",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "URI.deserialize": {
            "name": "deserialize",
            "location": 452,
            "return": [
                "URL"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "URI.serialize": {
            "name": "serialize",
            "location": 455,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "Email.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Email.pre_validate": {
            "name": "pre_validate",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Email.serialize": {
            "name": "serialize",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "Dict.__init__": {
            "name": "__init__",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "Dict.deserialize": {
            "name": "deserialize",
            "location": 508,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Dict.serialize": {
            "name": "serialize",
            "location": 514,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "List.__init__": {
            "name": "__init__",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "min_length": [
                    "int"
                ],
                "max_length": [
                    "None"
                ]
            }
        },
        "List.pre_validate": {
            "name": "pre_validate",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "List.deserialize": {
            "name": "deserialize",
            "location": 550,
            "return": [
                "None",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "List.serialize": {
            "name": "serialize",
            "location": 559,
            "return": [
                "None",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "Tuple.deserialize": {
            "name": "deserialize",
            "location": 567,
            "return": [
                "tuple[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Tuple.serialize": {
            "name": "serialize",
            "location": 571,
            "return": [
                "tuple[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/fields/base.py": {
        "BaseField.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseField.key": {
            "name": "key",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseField.sp": {
            "name": "sp",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseField.name": {
            "name": "name",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BaseField.mapped_key": {
            "name": "mapped_key",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "BaseField.serialize": {
            "name": "serialize",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "BaseField.deserialize": {
            "name": "deserialize",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "BaseField.pre_validate": {
            "name": "pre_validate",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "BaseField.post_validate": {
            "name": "post_validate",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Attribute.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "route": [],
                "link_of": []
            }
        },
        "Link.serialize": {
            "name": "serialize",
            "location": 250,
            "return": [
                "dict[typing.Text, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "Relationship.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Relationship.add_link": {
            "name": "add_link",
            "location": 325,
            "return": [
                "Relationship"
            ],
            "arguments": {
                "self": [],
                "link": []
            }
        },
        "Relationship.validate_resource_identifier": {
            "name": "validate_resource_identifier",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Relationship.validate_relationship_object": {
            "name": "validate_relationship_object",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "Relationship.pre_validate": {
            "name": "pre_validate",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/fields/decorators.py": {
        "tag_processor": {
            "name": "tag_processor",
            "location": 66,
            "return": [
                "str",
                "tuple[typing.Union[str,str]]",
                "None"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "set[str]",
                    "list[str]",
                    "None",
                    "typing.Any"
                ],
                "callee": [
                    "str",
                    "None",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "gets": {
            "name": "gets",
            "location": 99,
            "return": [],
            "arguments": {
                "field_key": [
                    "str",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "sets": {
            "name": "sets",
            "location": 119,
            "return": [],
            "arguments": {
                "field_key": [
                    "str",
                    "None",
                    "typing.Hashable",
                    "bytes"
                ]
            }
        },
        "validates": {
            "name": "validates",
            "location": 144,
            "return": [],
            "arguments": {
                "field_key": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "step": [],
                "on": []
            }
        },
        "adds": {
            "name": "adds",
            "location": 174,
            "return": [],
            "arguments": {
                "field_key": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "removes": {
            "name": "removes",
            "location": 196,
            "return": [],
            "arguments": {
                "field_key": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "includes": {
            "name": "includes",
            "location": 218,
            "return": [],
            "arguments": {
                "field_key": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "queries": {
            "name": "queries",
            "location": 246,
            "return": [],
            "arguments": {
                "field_key": [
                    "str",
                    "None",
                    "bytes"
                ]
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/fields/relationships.py": {
        "ToOne.validate_relationship_object": {
            "name": "validate_relationship_object",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        },
        "ToOne.serialize": {
            "name": "serialize",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": []
            }
        },
        "ToMany.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ToMany.serialize": {
            "name": "serialize",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "links": [],
                "pagination": []
            }
        },
        "ToMany.validate_relationship_object": {
            "name": "validate_relationship_object",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "schema": [],
                "data": [],
                "sp": []
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/fields/trafarets.py": {
        "DecimalTrafaret.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "places": [
                    "None",
                    "bool",
                    "float",
                    "str"
                ],
                "rounding": [
                    "None",
                    "int",
                    "list[float]"
                ],
                "allow_nan": [
                    "bool"
                ]
            }
        },
        "DecimalTrafaret._converter": {
            "name": "_converter",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "list[\"Block\"]"
                ]
            }
        },
        "DecimalTrafaret.check_and_return": {
            "name": "check_and_return",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "aiohttp_json_api-master/aiohttp_json_api/fields/__init__.py": {},
    "aiohttp_json_api-master/docs/conf.py": {},
    "aiohttp_json_api-master/examples/fantasy/controllers.py": {},
    "aiohttp_json_api-master/examples/fantasy/main.py": {
        "main": {
            "name": "main",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp_json_api-master/examples/fantasy/models.py": {
        "cte_constructor": {
            "name": "cte_constructor",
            "location": 454,
            "return": [],
            "arguments": {
                "cls": [],
                "where": [
                    "None"
                ],
                "limit": [
                    "None"
                ],
                "offset": [
                    "None"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "Author.from_row": {
            "name": "from_row",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [],
                "row": [],
                "books": [],
                "photos": [],
                "alias": [
                    "None"
                ]
            }
        },
        "Author.not_populated": {
            "name": "not_populated",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": [],
                "id": []
            }
        },
        "Book.from_row": {
            "name": "from_row",
            "location": 130,
            "return": [],
            "arguments": {
                "cls": [],
                "row": [],
                "author": [],
                "photos": [],
                "chapters": [],
                "series": [
                    "None"
                ],
                "alias": [
                    "None"
                ]
            }
        },
        "Book.not_populated": {
            "name": "not_populated",
            "location": 148,
            "return": [],
            "arguments": {
                "cls": [],
                "id": []
            }
        },
        "Chapter.from_row": {
            "name": "from_row",
            "location": 234,
            "return": [],
            "arguments": {
                "cls": [],
                "row": [],
                "book": [],
                "alias": [
                    "None"
                ]
            }
        },
        "Chapter.not_populated": {
            "name": "not_populated",
            "location": 247,
            "return": [],
            "arguments": {
                "cls": [],
                "id": []
            }
        },
        "Photo.from_row": {
            "name": "from_row",
            "location": 304,
            "return": [],
            "arguments": {
                "cls": [],
                "row": [],
                "imageable": [],
                "alias": [
                    "None"
                ]
            }
        },
        "Photo.not_populated": {
            "name": "not_populated",
            "location": 319,
            "return": [],
            "arguments": {
                "cls": [],
                "id": []
            }
        },
        "Store.from_row": {
            "name": "from_row",
            "location": 375,
            "return": [],
            "arguments": {
                "cls": [],
                "row": [],
                "books": [],
                "alias": [
                    "None"
                ]
            }
        },
        "Store.not_populated": {
            "name": "not_populated",
            "location": 387,
            "return": [],
            "arguments": {
                "cls": [],
                "id": []
            }
        },
        "Series.not_populated": {
            "name": "not_populated",
            "location": 445,
            "return": [],
            "arguments": {
                "cls": [],
                "id": []
            }
        }
    },
    "aiohttp_json_api-master/examples/fantasy/schemas.py": {},
    "aiohttp_json_api-master/examples/fantasy/tables.py": {},
    "aiohttp_json_api-master/examples/fantasy/tasks.py": {
        "populate_db": {
            "name": "populate_db",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "tuple[str]",
                    "bool",
                    "str"
                ],
                "data_folder": [],
                "dsn": [
                    "None",
                    "str",
                    "int",
                    "set[int]"
                ]
            }
        }
    },
    "aiohttp_json_api-master/examples/fantasy/__init__.py": {},
    "aiohttp_json_api-master/examples/simple/controllers.py": {
        "SimpleController.storage": {
            "name": "storage",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttp_json_api-master/examples/simple/main.py": {
        "setup_fixtures": {
            "name": "setup_fixtures",
            "location": 15,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "main": {
            "name": "main",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aiohttp_json_api-master/examples/simple/models.py": {
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "BaseModel.__hash__": {
            "name": "__hash__",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._repr": {
            "name": "_repr",
            "location": 15,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str"
                ]
            }
        },
        "BaseModel.id": {
            "name": "id",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "People.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "None"
                ],
                "first_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "last_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "twitter": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "People.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "People.populate": {
            "name": "populate",
            "location": 43,
            "return": [
                "typing.Generator[People]"
            ],
            "arguments": {
                "count": [
                    "int"
                ]
            }
        },
        "Comment.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "None"
                ],
                "body": [
                    "str",
                    "int",
                    "list[int]"
                ],
                "author": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "Comment.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Comment.populate": {
            "name": "populate",
            "location": 65,
            "return": [
                "typing.Generator[Comment]"
            ],
            "arguments": {
                "authors": [
                    "str",
                    "bytes",
                    "int",
                    "tuple[]"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Article.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ],
                "title": [
                    "int",
                    "str",
                    "float"
                ],
                "author": [
                    "int",
                    "str",
                    "float"
                ],
                "comments": [
                    "list[str]",
                    "dict[, ]",
                    "str",
                    "list[int]",
                    "bytes"
                ]
            }
        },
        "Article.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Article.populate": {
            "name": "populate",
            "location": 92,
            "return": [
                "typing.Generator[Article]"
            ],
            "arguments": {
                "comments": [
                    "str"
                ],
                "authors": [
                    "int",
                    "float",
                    "str"
                ],
                "count": [
                    "int"
                ]
            }
        },
        "Article.populate.get_random_answers": {
            "name": "get_random_answers",
            "location": 100,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "max": []
            }
        }
    },
    "aiohttp_json_api-master/examples/simple/schemas.py": {},
    "aiohttp_json_api-master/examples/simple/__init__.py": {},
    "aiohttp_json_api-master/tests/conftest.py": {
        "session_id": {
            "name": "session_id",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "docker": {
            "name": "docker",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "unused_port": {
            "name": "unused_port",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "here": {
            "name": "here",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "pg_server": {
            "name": "pg_server",
            "location": 43,
            "return": [],
            "arguments": {
                "unused_port": [],
                "session_id": [],
                "docker": []
            }
        },
        "pg_params": {
            "name": "pg_params",
            "location": 104,
            "return": [],
            "arguments": {
                "pg_server": []
            }
        },
        "populated_db": {
            "name": "populated_db",
            "location": 109,
            "return": [],
            "arguments": {
                "here": [],
                "pg_params": []
            }
        },
        "jsonapi_validator": {
            "name": "jsonapi_validator",
            "location": 120,
            "return": [],
            "arguments": {
                "here": []
            }
        },
        "unused_port.f": {
            "name": "f",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "aiohttp_json_api-master/tests/integration/test_content_negotiation.py": {},
    "aiohttp_json_api-master/tests/integration/test_creating.py": {},
    "aiohttp_json_api-master/tests/integration/test_deleting.py": {},
    "aiohttp_json_api-master/tests/integration/test_document_structure.py": {},
    "aiohttp_json_api-master/tests/integration/test_errors.py": {},
    "aiohttp_json_api-master/tests/integration/test_query_parameters.py": {},
    "aiohttp_json_api-master/tests/integration/test_reading.py": {},
    "aiohttp_json_api-master/tests/integration/test_updating.py": {},
    "aiohttp_json_api-master/tests/schema/test_base_fields.py": {},
    "aiohttp_json_api-master/tests/schema/test_trafarets.py": {
        "test_decimal_repr": {
            "name": "test_decimal_repr",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_decimal": {
            "name": "test_decimal",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "aiohttp_json_api-master/tests/spec/test_spec_schema.py": {}
}
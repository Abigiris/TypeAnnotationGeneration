{
    "aiokatcp-master/setup.py": {},
    "aiokatcp-master/doc/conf.py": {
        "parse_informs_section": {
            "name": "parse_informs_section",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "patched_parse": {
            "name": "patched_parse",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiokatcp-master/examples/example_client.py": {},
    "aiokatcp-master/examples/example_server.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiokatcp-master/examples/mirror_sensors.py": {
        "MirrorWatcher.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "int",
                    "None"
                ],
                "server": [
                    "str",
                    "float"
                ]
            }
        },
        "MirrorWatcher.sensor_added": {
            "name": "sensor_added",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "description": [
                    "str",
                    "bytes",
                    "typing.Sequence[typing.Any]",
                    "typing.Mapping",
                    "typing.Iterator"
                ],
                "units": [
                    "str",
                    "bytes",
                    "typing.Sequence[typing.Any]",
                    "typing.Mapping",
                    "typing.Iterator"
                ],
                "type_name": [
                    "str",
                    "bytes",
                    "typing.Sequence[typing.Any]",
                    "typing.Mapping",
                    "typing.Iterator"
                ]
            }
        },
        "MirrorWatcher.sensor_removed": {
            "name": "sensor_removed",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MirrorWatcher.batch_stop": {
            "name": "batch_stop",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiokatcp-master/src/aiokatcp/client.py": {
        "_make_done": {
            "name": "_make_done",
            "location": 90,
            "return": [],
            "arguments": {
                "future": []
            }
        },
        "_InformHandler.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "_client": [],
                "_msg": []
            }
        },
        "_InformCallback.__call__": {
            "name": "__call__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "_msg": []
            }
        },
        "_PendingRequest.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "mid": [],
                "loop": []
            }
        },
        "ClientMeta._wrap_inform": {
            "name": "_wrap_inform",
            "location": 74,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "value": []
            }
        },
        "ClientMeta.__new__": {
            "name": "__new__",
            "location": 77,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "namespace": []
            }
        },
        "ProtocolError.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "version": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "host": [],
                "port": []
            }
        },
        "Client.__del__": {
            "name": "__del__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client._set_connection": {
            "name": "_set_connection",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "Client.handle_inform": {
            "name": "handle_inform",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Client.unhandled_inform": {
            "name": "unhandled_inform",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Client._close_connection": {
            "name": "_close_connection",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client._warn_failed_connect": {
            "name": "_warn_failed_connect",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "Client.inform_version_connect": {
            "name": "inform_version_connect",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "api": [],
                "version": [],
                "build_state": []
            }
        },
        "Client.inform_disconnect": {
            "name": "inform_disconnect",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "Client.add_connected_callback": {
            "name": "add_connected_callback",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Client.remove_connected_callback": {
            "name": "remove_connected_callback",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Client.add_disconnected_callback": {
            "name": "add_disconnected_callback",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Client.remove_disconnected_callback": {
            "name": "remove_disconnected_callback",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Client.add_failed_connect_callback": {
            "name": "add_failed_connect_callback",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Client.remove_failed_connect_callback": {
            "name": "remove_failed_connect_callback",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Client.add_inform_callback": {
            "name": "add_inform_callback",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "callback": []
            }
        },
        "Client.remove_inform_callback": {
            "name": "remove_inform_callback",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "callback": []
            }
        },
        "Client._run_callbacks": {
            "name": "_run_callbacks",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "callbacks": []
            }
        },
        "Client._on_connected": {
            "name": "_on_connected",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client._on_disconnected": {
            "name": "_on_disconnected",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client._on_failed_connect": {
            "name": "_on_failed_connect",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "Client._done_callback": {
            "name": "_done_callback",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "future": []
            }
        },
        "Client.close": {
            "name": "close",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client._set_last_exc": {
            "name": "_set_last_exc",
            "location": 431,
            "return": [],
            "arguments": {
                "self": [],
                "future": [],
                "exc": []
            }
        },
        "Client.add_sensor_watcher": {
            "name": "add_sensor_watcher",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "Client.remove_sensor_watcher": {
            "name": "remove_sensor_watcher",
            "location": 590,
            "return": [],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "AbstractSensorWatcher.sensor_added": {
            "name": "sensor_added",
            "location": 616,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": [],
                "units": [],
                "type_name": []
            }
        },
        "AbstractSensorWatcher.sensor_removed": {
            "name": "sensor_removed",
            "location": 625,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AbstractSensorWatcher.sensor_updated": {
            "name": "sensor_updated",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "status": [],
                "timestamp": []
            }
        },
        "AbstractSensorWatcher.batch_start": {
            "name": "batch_start",
            "location": 634,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractSensorWatcher.batch_stop": {
            "name": "batch_stop",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractSensorWatcher.state_updated": {
            "name": "state_updated",
            "location": 646,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "DiscreteMixin.katcp_value": {
            "name": "katcp_value",
            "location": 657,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SensorWatcher.__init__": {
            "name": "__init__",
            "location": 693,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "enum_types": []
            }
        },
        "SensorWatcher.rewrite_name": {
            "name": "rewrite_name",
            "location": 703,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SensorWatcher.make_type": {
            "name": "make_type",
            "location": 710,
            "return": [],
            "arguments": {
                "self": [],
                "type_name": [],
                "parameters": []
            }
        },
        "SensorWatcher.sensor_added": {
            "name": "sensor_added",
            "location": 728,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "description": [],
                "units": [],
                "type_name": []
            }
        },
        "SensorWatcher.sensor_removed": {
            "name": "sensor_removed",
            "location": 738,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SensorWatcher.sensor_updated": {
            "name": "sensor_updated",
            "location": 741,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": [],
                "status": [],
                "timestamp": []
            }
        },
        "SensorWatcher.state_updated": {
            "name": "state_updated",
            "location": 758,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "_SensorMonitor.__init__": {
            "name": "__init__",
            "location": 779,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "_SensorMonitor.add_watcher": {
            "name": "add_watcher",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "_SensorMonitor.remove_watcher": {
            "name": "remove_watcher",
            "location": 798,
            "return": [],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "_SensorMonitor.__bool__": {
            "name": "__bool__",
            "location": 804,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SensorMonitor._batch": {
            "name": "_batch",
            "location": 809,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SensorMonitor._cancel_update": {
            "name": "_cancel_update",
            "location": 823,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SensorMonitor._update_done": {
            "name": "_update_done",
            "location": 828,
            "return": [],
            "arguments": {
                "self": [],
                "future": []
            }
        },
        "_SensorMonitor._trigger_update": {
            "name": "_trigger_update",
            "location": 840,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SensorMonitor._connected": {
            "name": "_connected",
            "location": 910,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SensorMonitor._disconnected": {
            "name": "_disconnected",
            "location": 914,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SensorMonitor._interface_changed": {
            "name": "_interface_changed",
            "location": 920,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SensorMonitor._sensor_status": {
            "name": "_sensor_status",
            "location": 924,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": [],
                "n": []
            }
        },
        "_SensorMonitor.close": {
            "name": "close",
            "location": 940,
            "return": [],
            "arguments": {
                "self": [],
                "client_closing": []
            }
        }
    },
    "aiokatcp-master/src/aiokatcp/connection.py": {
        "_identity_decorator": {
            "name": "_identity_decorator",
            "location": 247,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "wrap_handler": {
            "name": "wrap_handler",
            "location": 257,
            "return": [],
            "arguments": {
                "name": [],
                "handler": [],
                "fixed": []
            }
        },
        "ConvertCRProtocol.data_received": {
            "name": "data_received",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionLoggerAdapter.process": {
            "name": "process",
            "location": 117,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "kwargs": []
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [],
                "reader": [],
                "writer": [],
                "is_server": []
            }
        },
        "Connection._close_writer": {
            "name": "_close_writer",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.write_messages": {
            "name": "write_messages",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msgs": []
            }
        },
        "Connection.write_message": {
            "name": "write_message",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "Connection._done_callback": {
            "name": "_done_callback",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": []
            }
        },
        "Connection.close": {
            "name": "close",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "wrap_handler.wrapper": {
            "name": "wrapper",
            "location": 291,
            "return": [],
            "arguments": {}
        }
    },
    "aiokatcp-master/src/aiokatcp/core.py": {
        "register_type": {
            "name": "register_type",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "type_": [],
                "name": [],
                "encode": [],
                "decode": [],
                "default": [
                    "None"
                ]
            }
        },
        "get_type": {
            "name": "get_type",
            "location": 228,
            "return": [],
            "arguments": {
                "type_": []
            }
        },
        "_decode_bool": {
            "name": "_decode_bool",
            "location": 249,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": []
            }
        },
        "_encode_enum": {
            "name": "_encode_enum",
            "location": 258,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_decode_enum": {
            "name": "_decode_enum",
            "location": 265,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": []
            }
        },
        "_default_generic": {
            "name": "_default_generic",
            "location": 282,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "_default_enum": {
            "name": "_default_enum",
            "location": 286,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "encode": {
            "name": "encode",
            "location": 317,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "_union_args": {
            "name": "_union_args",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "decode": {
            "name": "decode",
            "location": 348,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "Address.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "port": [
                    "None"
                ]
            }
        },
        "Address.host": {
            "name": "host",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Address.port": {
            "name": "port",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Address.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.__bytes__": {
            "name": "__bytes__",
            "location": 83,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.parse": {
            "name": "parse",
            "location": 94,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": []
            }
        },
        "Address.__eq__": {
            "name": "__eq__",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Address.__ne__": {
            "name": "__ne__",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Address.__hash__": {
            "name": "__hash__",
            "location": 131,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogLevel.from_python": {
            "name": "from_python",
            "location": 164,
            "return": [],
            "arguments": {
                "cls": [],
                "level": []
            }
        },
        "TypeInfo.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [],
                "name": [],
                "encode": [],
                "decode": [],
                "default": []
            }
        },
        "KatcpSyntaxError.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "raw": [
                    "None"
                ]
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mtype": [],
                "name": []
            }
        },
        "Message.request": {
            "name": "request",
            "location": 458,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "Message.reply": {
            "name": "reply",
            "location": 462,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "Message.inform": {
            "name": "inform",
            "location": 466,
            "return": [],
            "arguments": {
                "cls": [],
                "name": []
            }
        },
        "Message.reply_to_request": {
            "name": "reply_to_request",
            "location": 470,
            "return": [],
            "arguments": {
                "cls": [],
                "msg": []
            }
        },
        "Message.inform_reply": {
            "name": "inform_reply",
            "location": 474,
            "return": [],
            "arguments": {
                "cls": [],
                "msg": []
            }
        },
        "Message._escape_match": {
            "name": "_escape_match",
            "location": 478,
            "return": [],
            "arguments": {
                "cls": [],
                "match": []
            }
        },
        "Message._unescape_match": {
            "name": "_unescape_match",
            "location": 483,
            "return": [],
            "arguments": {
                "cls": [],
                "match": []
            }
        },
        "Message.escape_argument": {
            "name": "escape_argument",
            "location": 491,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cls": [],
                "arg": []
            }
        },
        "Message.unescape_argument": {
            "name": "unescape_argument",
            "location": 499,
            "return": [],
            "arguments": {
                "cls": [],
                "arg": []
            }
        },
        "Message.parse": {
            "name": "parse",
            "location": 509,
            "return": [],
            "arguments": {
                "cls": [],
                "raw": []
            }
        },
        "Message.__bytes__": {
            "name": "__bytes__",
            "location": 552,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 566,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__eq__": {
            "name": "__eq__",
            "location": 571,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Message.__ne__": {
            "name": "__ne__",
            "location": 579,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Message.reply_ok": {
            "name": "reply_ok",
            "location": 587,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiokatcp-master/src/aiokatcp/sensor.py": {
        "_default_status_func": {
            "name": "_default_status_func",
            "location": 65,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Reading.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [],
                "status": [],
                "value": []
            }
        },
        "Sensor.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor_type": [],
                "name": [],
                "description": [
                    "None"
                ],
                "units": [
                    "typing.Text"
                ],
                "default": [
                    "None"
                ],
                "initial_status": []
            }
        },
        "Sensor.notify": {
            "name": "notify",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reading": []
            }
        },
        "Sensor.set_value": {
            "name": "set_value",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "status": [
                    "None"
                ],
                "timestamp": [
                    "None"
                ]
            }
        },
        "Sensor.value": {
            "name": "value",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Sensor.timestamp": {
            "name": "timestamp",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sensor.status": {
            "name": "status",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sensor.reading": {
            "name": "reading",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sensor.params": {
            "name": "params",
            "location": 205,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sensor.attach": {
            "name": "attach",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observer": []
            }
        },
        "Sensor.detach": {
            "name": "detach",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "observer": []
            }
        },
        "SensorSampler.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor": [],
                "observer": [],
                "loop": [],
                "difference": [
                    "None"
                ],
                "shortest": [],
                "longest": [
                    "None"
                ]
            }
        },
        "SensorSampler.__del__": {
            "name": "__del__",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorSampler.observer": {
            "name": "observer",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "observer": []
            }
        },
        "SensorSampler._clear_callback": {
            "name": "_clear_callback",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorSampler._send_update": {
            "name": "_send_update",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sched_time": [],
                "reading": []
            }
        },
        "SensorSampler._receive_update": {
            "name": "_receive_update",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor": [],
                "reading": []
            }
        },
        "SensorSampler.close": {
            "name": "close",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorSampler._parameters": {
            "name": "_parameters",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorSampler.parameters": {
            "name": "parameters",
            "location": 373,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorSampler.factory": {
            "name": "factory",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "sensor": [],
                "observer": [],
                "loop": [],
                "strategy": []
            }
        },
        "_SensorSamplerEventAlways.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor": [],
                "observer": [],
                "loop": []
            }
        },
        "_SensorSamplerEventAlways._parameters": {
            "name": "_parameters",
            "location": 416,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SensorSamplerPeriod.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor": [],
                "observer": [],
                "loop": [],
                "period": []
            }
        },
        "_SensorSamplerPeriod._parameters": {
            "name": "_parameters",
            "location": 426,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SensorSamplerEvent._parameters": {
            "name": "_parameters",
            "location": 431,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SensorSamplerDifferential.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor": [],
                "observer": [],
                "loop": [],
                "difference": []
            }
        },
        "_SensorSamplerDifferential._parameters": {
            "name": "_parameters",
            "location": 441,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SensorSamplerEventRate.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor": [],
                "observer": [],
                "loop": [],
                "shortest": [],
                "longest": []
            }
        },
        "_SensorSamplerEventRate._parameters": {
            "name": "_parameters",
            "location": 455,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SensorSamplerDifferentialRate.__init__": {
            "name": "__init__",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor": [],
                "observer": [],
                "loop": [],
                "difference": [],
                "shortest": [],
                "longest": []
            }
        },
        "_SensorSamplerDifferentialRate._parameters": {
            "name": "_parameters",
            "location": 474,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorSet.__init__": {
            "name": "__init__",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorSet._removed": {
            "name": "_removed",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SensorSet._added": {
            "name": "_added",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SensorSet.add_remove_callback": {
            "name": "add_remove_callback",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "SensorSet.add_add_callback": {
            "name": "add_add_callback",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "SensorSet.remove_remove_callback": {
            "name": "remove_remove_callback",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "SensorSet.remove_add_callback": {
            "name": "remove_add_callback",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "SensorSet.add": {
            "name": "add",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "SensorSet.remove": {
            "name": "remove",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "SensorSet.discard": {
            "name": "discard",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": []
            }
        },
        "SensorSet.clear": {
            "name": "clear",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorSet.popitem": {
            "name": "popitem",
            "location": 565,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorSet.pop": {
            "name": "pop",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "SensorSet.__delitem__": {
            "name": "__delitem__",
            "location": 582,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "SensorSet.__getitem__": {
            "name": "__getitem__",
            "location": 586,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SensorSet.get": {
            "name": "get",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "default": []
            }
        },
        "SensorSet.__contains__": {
            "name": "__contains__",
            "location": 598,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SensorSet.__len__": {
            "name": "__len__",
            "location": 604,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorSet.__bool__": {
            "name": "__bool__",
            "location": 607,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorSet.__iter__": {
            "name": "__iter__",
            "location": 610,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SensorSet.keys": {
            "name": "keys",
            "location": 613,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SensorSet.values": {
            "name": "values",
            "location": 616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SensorSet.items": {
            "name": "items",
            "location": 619,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SensorSet.copy": {
            "name": "copy",
            "location": 622,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sensor.Status.valid_value": {
            "name": "valid_value",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiokatcp-master/src/aiokatcp/server.py": {
        "ClientConnection.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [],
                "reader": [],
                "writer": []
            }
        },
        "ClientConnection.close": {
            "name": "close",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientConnection.set_sampler": {
            "name": "set_sampler",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [],
                "sampler": []
            }
        },
        "ClientConnection.get_sampler": {
            "name": "get_sampler",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "ClientConnection.sensor_update": {
            "name": "sensor_update",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [],
                "reading": []
            }
        },
        "RequestContext.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [],
                "req": []
            }
        },
        "RequestContext.replied": {
            "name": "replied",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequestContext.reply": {
            "name": "reply",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestContext.inform": {
            "name": "inform",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestContext.informs": {
            "name": "informs",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "informs": []
            }
        },
        "DeviceServerMeta._wrap_request": {
            "name": "_wrap_request",
            "location": 179,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "value": []
            }
        },
        "DeviceServerMeta.__new__": {
            "name": "__new__",
            "location": 182,
            "return": [],
            "arguments": {
                "mcs": [],
                "name": [],
                "bases": [],
                "namespace": []
            }
        },
        "DeviceServer.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "port": []
            }
        },
        "DeviceServer._remove_sensor_callback": {
            "name": "_remove_sensor_callback",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "connections": [],
                "sensor": []
            }
        },
        "DeviceServer.halt": {
            "name": "halt",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "cancel": [
                    "bool"
                ]
            }
        },
        "DeviceServer.server": {
            "name": "server",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceServer.sockets": {
            "name": "sockets",
            "location": 416,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceServer.service_tasks": {
            "name": "service_tasks",
            "location": 430,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceServer._service_task_done": {
            "name": "_service_task_done",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": []
            }
        },
        "DeviceServer.add_service_task": {
            "name": "add_service_task",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": []
            }
        },
        "DeviceServer.send_version_info": {
            "name": "send_version_info",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "DeviceServer._write_async_message": {
            "name": "_write_async_message",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [],
                "msg": []
            }
        },
        "DeviceServer._handle_request_done_callback": {
            "name": "_handle_request_done_callback",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [],
                "task": []
            }
        },
        "DeviceServer.mass_inform": {
            "name": "mass_inform",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DeviceServer._get_sensors": {
            "name": "_get_sensors",
            "location": 741,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DeviceServer.LogHandler._self_filter": {
            "name": "_self_filter",
            "location": 248,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "DeviceServer.LogHandler.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": []
            }
        },
        "DeviceServer.LogHandler.emit": {
            "name": "emit",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "DeviceServer.start.factory": {
            "name": "factory",
            "location": 310,
            "return": [],
            "arguments": {}
        }
    },
    "aiokatcp-master/src/aiokatcp/__init__.py": {
        "minor_version": {
            "name": "minor_version",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "aiokatcp-master/src/aiokatcp/tools/katcpcmd.py": {
        "text": {
            "name": "text",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "msg": []
            }
        },
        "main": {
            "name": "main",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "CmdClient.unhandled_inform": {
            "name": "unhandled_inform",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "aiokatcp-master/src/aiokatcp/tools/__init__.py": {},
    "aiokatcp-master/tests/test_client.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 50,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "client_queue": {
            "name": "client_queue",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "DummyClient.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyClient.inform_foo": {
            "name": "inform_foo",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [],
                "integer": []
            }
        },
        "DummyClient.inform_exception": {
            "name": "inform_exception",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyClient.unhandled_inform": {
            "name": "unhandled_inform",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "server.callback": {
            "name": "callback",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "reader": [],
                "writer": []
            }
        },
        "Channel.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "reader": [],
                "writer": []
            }
        },
        "test_inform_callback.callback": {
            "name": "callback",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [],
                "integer": []
            }
        },
        "SensorWatcherChannel.__init__": {
            "name": "__init__",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummySensorWatcher.rewrite_name": {
            "name": "rewrite_name",
            "location": 607,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestSensorWatcher.client": {
            "name": "client",
            "location": 620,
            "return": [],
            "arguments": {
                "self": [],
                "event_loop": []
            }
        },
        "TestSensorWatcher.watcher": {
            "name": "watcher",
            "location": 626,
            "return": [
                "DummySensorWatcher"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestSensorWatcher.test_construct": {
            "name": "test_construct",
            "location": 629,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "TestSensorWatcher.test_sensor_added": {
            "name": "test_sensor_added",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "TestSensorWatcher.test_sensor_added_discrete": {
            "name": "test_sensor_added_discrete",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "TestSensorWatcher.test_sensor_added_known_discrete": {
            "name": "test_sensor_added_known_discrete",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "TestSensorWatcher.test_sensor_added_bad_type": {
            "name": "test_sensor_added_bad_type",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "TestSensorWatcher.test_sensor_removed": {
            "name": "test_sensor_removed",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "TestSensorWatcher.test_sensor_updated": {
            "name": "test_sensor_updated",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "TestSensorWatcher.test_sensor_updated_bad_value": {
            "name": "test_sensor_updated_bad_value",
            "location": 703,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "TestSensorWatcher.test_sensor_updated_unknown_sensor": {
            "name": "test_sensor_updated_unknown_sensor",
            "location": 713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "TestSensorWatcher.test_state_updated": {
            "name": "test_state_updated",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watcher": []
            }
        },
        "TestUnclosedClient.test": {
            "name": "test",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnclosedClient.body.callback": {
            "name": "callback",
            "location": 811,
            "return": [
                "None"
            ],
            "arguments": {
                "reader": [],
                "writer": []
            }
        }
    },
    "aiokatcp-master/tests/test_connection.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 42,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "owner": {
            "name": "owner",
            "location": 93,
            "return": [],
            "arguments": {
                "event_loop": [
                    "dict[, ]",
                    "bool",
                    "list[]"
                ]
            }
        },
        "connection_queue": {
            "name": "connection_queue",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "client_reader": {
            "name": "client_reader",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "client_reader_writer": [
                    "str"
                ]
            }
        },
        "client_writer": {
            "name": "client_writer",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "client_reader_writer": [
                    "str"
                ]
            }
        },
        "server_reader": {
            "name": "server_reader",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "server_reader_writer": [
                    "str"
                ]
            }
        },
        "server_writer": {
            "name": "server_writer",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "server_reader_writer": [
                    "str"
                ]
            }
        }
    },
    "aiokatcp-master/tests/test_core.py": {
        "OverrideEnum.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestAddress.address": {
            "name": "address",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "TestAddress.test_getters": {
            "name": "test_getters",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddress.test_self_equal": {
            "name": "test_self_equal",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TestAddress.test_eq": {
            "name": "test_eq",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddress.test_not_eq": {
            "name": "test_not_eq",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddress.test_str": {
            "name": "test_str",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddress.test_bytes": {
            "name": "test_bytes",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddress.test_repr": {
            "name": "test_repr",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddress.test_hash": {
            "name": "test_hash",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddress.test_parse_round_trip": {
            "name": "test_parse_round_trip",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": []
            }
        },
        "TestAddress.test_parse_bad": {
            "name": "test_parse_bad",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestEncodeDecode.test_encode": {
            "name": "test_encode",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [],
                "value": [],
                "raw": []
            }
        },
        "TestEncodeDecode.test_decode": {
            "name": "test_decode",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [],
                "value": [],
                "raw": []
            }
        },
        "TestEncodeDecode.test_unknown_class": {
            "name": "test_unknown_class",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncodeDecode.test_bad_raw": {
            "name": "test_bad_raw",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [],
                "value": []
            }
        },
        "TestEncodeDecode.test_register_type": {
            "name": "test_register_type",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestEncodeDecode.test_default": {
            "name": "test_default",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [],
                "default": []
            }
        },
        "TestMessage.test_init_basic": {
            "name": "test_init_basic",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_init_mid": {
            "name": "test_init_mid",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_init_bad_name": {
            "name": "test_init_bad_name",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "TestMessage.test_init_bad_mid": {
            "name": "test_init_bad_mid",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mid": []
            }
        },
        "TestMessage.test_request": {
            "name": "test_request",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_reply": {
            "name": "test_reply",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_inform": {
            "name": "test_inform",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_reply_to_request": {
            "name": "test_reply_to_request",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_inform_reply": {
            "name": "test_inform_reply",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_bytes": {
            "name": "test_bytes",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_bytes_mid": {
            "name": "test_bytes_mid",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_repr": {
            "name": "test_repr",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_parse": {
            "name": "test_parse",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_parse_cr": {
            "name": "test_parse_cr",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_parse_trailing_whitespace": {
            "name": "test_parse_trailing_whitespace",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_parse_mid": {
            "name": "test_parse_mid",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_parse_syntax_error": {
            "name": "test_parse_syntax_error",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "TestMessage.test_compare": {
            "name": "test_compare",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMessage.test_reply_ok": {
            "name": "test_reply_ok",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiokatcp-master/tests/test_sensor.py": {
        "test_sensor_state_valid_value": {
            "name": "test_sensor_state_valid_value",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "status": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "valid": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_sensor_status_func": {
            "name": "test_sensor_status_func",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_callback": {
            "name": "add_callback",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "remove_callback": {
            "name": "remove_callback",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "sensors": {
            "name": "sensors",
            "location": 94,
            "return": [
                "list[Sensor]"
            ],
            "arguments": {}
        },
        "alt_sensors": {
            "name": "alt_sensors",
            "location": 99,
            "return": [
                "list[Sensor]"
            ],
            "arguments": {}
        },
        "ss": {
            "name": "ss",
            "location": 105,
            "return": [],
            "arguments": {
                "add_callback": [
                    "typing.Sequence[typing.Any]",
                    "None",
                    "list[int]"
                ],
                "remove_callback": [
                    "str",
                    "None"
                ],
                "sensors": [
                    "str"
                ]
            }
        },
        "_get_sensors": {
            "name": "_get_sensors",
            "location": 113,
            "return": [
                "list[list[str]]"
            ],
            "arguments": {
                "ss": [
                    "dict[str, str]"
                ]
            }
        },
        "test_sensor_status_func.status_func": {
            "name": "status_func",
            "location": 57,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "TestSensorSet.test_construct": {
            "name": "test_construct",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [
                    "str",
                    "list[str]",
                    "typing.Callable[..., T]",
                    "dict[, ]"
                ],
                "sensors": [
                    "str",
                    "list[str]",
                    "typing.Callable[..., T]",
                    "dict[, ]"
                ]
            }
        },
        "TestSensorSet.test_add": {
            "name": "test_add",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [],
                "sensors": [
                    "str"
                ],
                "alt_sensors": [
                    "str"
                ],
                "add_callback": [],
                "remove_callback": []
            }
        },
        "TestSensorSet.test_remove": {
            "name": "test_remove",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [
                    "set[]"
                ],
                "sensors": [
                    "str"
                ],
                "alt_sensors": [
                    "str"
                ],
                "remove_callback": []
            }
        },
        "TestSensorSet.test_discard": {
            "name": "test_discard",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [
                    "set[]"
                ],
                "sensors": [
                    "str"
                ],
                "alt_sensors": [
                    "str"
                ],
                "remove_callback": []
            }
        },
        "TestSensorSet.test_clear": {
            "name": "test_clear",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [],
                "sensors": [
                    "str"
                ],
                "remove_callback": []
            }
        },
        "TestSensorSet.test_popitem": {
            "name": "test_popitem",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [
                    "set[int]"
                ],
                "sensors": [
                    "bytes"
                ],
                "remove_callback": []
            }
        },
        "TestSensorSet.test_pop_absent": {
            "name": "test_pop_absent",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [
                    "dict[, ]"
                ],
                "sensors": [
                    "str"
                ],
                "remove_callback": []
            }
        },
        "TestSensorSet.test_delitem": {
            "name": "test_delitem",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [
                    "str"
                ],
                "sensors": [
                    "str"
                ],
                "remove_callback": []
            }
        },
        "TestSensorSet.test_getitem": {
            "name": "test_getitem",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [
                    "str"
                ],
                "sensors": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestSensorSet.test_get": {
            "name": "test_get",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "sensors": [
                    "str"
                ]
            }
        },
        "TestSensorSet.test_len": {
            "name": "test_len",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [],
                "sensors": [
                    "str"
                ]
            }
        },
        "TestSensorSet.test_contains": {
            "name": "test_contains",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [
                    "typing.Mapping",
                    "dict[str, typing.Any]"
                ],
                "sensors": [
                    "int",
                    "str"
                ],
                "alt_sensors": [
                    "str",
                    "set[int]",
                    "bytes"
                ]
            }
        },
        "TestSensorSet.test_bool": {
            "name": "test_bool",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": []
            }
        },
        "TestSensorSet.test_keys": {
            "name": "test_keys",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [],
                "sensors": [
                    "bytes"
                ]
            }
        },
        "TestSensorSet.test_values": {
            "name": "test_values",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [],
                "sensors": [
                    "str"
                ]
            }
        },
        "TestSensorSet.test_items": {
            "name": "test_items",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [],
                "sensors": [
                    "str"
                ]
            }
        },
        "TestSensorSet.test_iter": {
            "name": "test_iter",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [
                    "set[int]",
                    "str",
                    "bytes"
                ]
            }
        },
        "TestSensorSet.test_copy": {
            "name": "test_copy",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [
                    "int",
                    "list[str]",
                    "str",
                    "bytes",
                    "Exception"
                ],
                "sensors": [
                    "int",
                    "list[str]",
                    "str",
                    "bytes",
                    "Exception"
                ]
            }
        },
        "TestSensorSet.test_remove_callbacks": {
            "name": "test_remove_callbacks",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ss": [],
                "sensors": [
                    "str"
                ],
                "add_callback": [],
                "remove_callback": []
            }
        }
    },
    "aiokatcp-master/tests/test_server.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 50,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "reader": {
            "name": "reader",
            "location": 196,
            "return": [],
            "arguments": {
                "reader_writer": []
            }
        },
        "writer": {
            "name": "writer",
            "location": 201,
            "return": [],
            "arguments": {
                "reader_writer": []
            }
        },
        "mock_time": {
            "name": "mock_time",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "event_loop": []
            }
        },
        "test_metaclass_missing_help": {
            "name": "test_metaclass_missing_help",
            "location": 918,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_metaclass_too_few_parameters": {
            "name": "test_metaclass_too_few_parameters",
            "location": 925,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_metaclass_missing_version": {
            "name": "test_metaclass_missing_version",
            "location": 932,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_metaclass_missing_build_state": {
            "name": "test_metaclass_missing_build_state",
            "location": 939,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DummyServer.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_metaclass_missing_help.MyBadServer.request_no_help": {
            "name": "request_no_help",
            "location": 921,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_metaclass_too_few_parameters.MyBadServer.request_too_few": {
            "name": "request_too_few",
            "location": 928,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
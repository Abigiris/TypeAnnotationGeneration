{
    "aiomultiprocess-main/aiomultiprocess/core.py": {
        "get_manager": {
            "name": "get_manager",
            "location": 25,
            "return": [
                "int",
                "str",
                "set[]",
                "set[str]"
            ],
            "arguments": {}
        },
        "set_start_method": {
            "name": "set_start_method",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [
                    "typing.Text"
                ]
            }
        },
        "get_context": {
            "name": "get_context",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "set_context": {
            "name": "set_context",
            "location": 62,
            "return": [],
            "arguments": {
                "method": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Process.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "None",
                    "bool"
                ],
                "target": [
                    "None",
                    "list[str]",
                    "str"
                ],
                "name": [
                    "None",
                    "bool"
                ],
                "args": [
                    "None"
                ],
                "kwargs": [
                    "None"
                ]
            }
        },
        "Process.__await__": {
            "name": "__await__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.run_async": {
            "name": "run_async",
            "location": 130,
            "return": [],
            "arguments": {
                "unit": []
            }
        },
        "Process.start": {
            "name": "start",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.name": {
            "name": "name",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.is_alive": {
            "name": "is_alive",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.daemon": {
            "name": "daemon",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Process.pid": {
            "name": "pid",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.exitcode": {
            "name": "exitcode",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.terminate": {
            "name": "terminate",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Worker.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.run_async": {
            "name": "run_async",
            "location": 219,
            "return": [
                "dict[str, typing.Any]",
                "tuple[int]"
            ],
            "arguments": {
                "unit": [
                    "typing.Mapping",
                    "int"
                ]
            }
        },
        "Worker.result": {
            "name": "result",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.kill": {
            "name": "kill",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Process.close": {
            "name": "close",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiomultiprocess-main/aiomultiprocess/pool.py": {
        "PoolWorker.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tx": [],
                "rx": [],
                "ttl": [
                    "int"
                ],
                "concurrency": [
                    "int"
                ]
            }
        },
        "PoolResult.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pool": [],
                "task_ids": []
            }
        },
        "PoolResult.__await__": {
            "name": "__await__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PoolResult.__aiter__": {
            "name": "__aiter__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pool.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "processes": [
                    "None"
                ],
                "initializer": [
                    "None"
                ],
                "initargs": [
                    "tuple[]"
                ],
                "maxtasksperchild": [
                    "int"
                ],
                "childconcurrency": [
                    "int"
                ],
                "queuecount": [
                    "None"
                ],
                "scheduler": [
                    "None"
                ],
                "loop_initializer": [
                    "None"
                ],
                "exception_handler": [
                    "None"
                ]
            }
        },
        "Pool.init": {
            "name": "init",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.create_worker": {
            "name": "create_worker",
            "location": 244,
            "return": [
                "PoolWorker"
            ],
            "arguments": {
                "self": [],
                "qid": []
            }
        },
        "Pool.queue_work": {
            "name": "queue_work",
            "location": 264,
            "return": [
                "TaskID"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "args": [],
                "kwargs": []
            }
        },
        "Pool.finish_work": {
            "name": "finish_work",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [],
                "value": [],
                "tb": []
            }
        },
        "Pool.map": {
            "name": "map",
            "location": 333,
            "return": [
                "PoolResult"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "iterable": []
            }
        },
        "Pool.starmap": {
            "name": "starmap",
            "location": 346,
            "return": [
                "PoolResult"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "iterable": []
            }
        },
        "Pool.close": {
            "name": "close",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.terminate": {
            "name": "terminate",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiomultiprocess-main/aiomultiprocess/scheduler.py": {
        "Scheduler.register_queue": {
            "name": "register_queue",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tx": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Scheduler.register_process": {
            "name": "register_process",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qid": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Scheduler.schedule_task": {
            "name": "schedule_task",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "func": [
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "Scheduler.complete_task": {
            "name": "complete_task",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_id": [
                    "str",
                    "int",
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        },
        "RoundRobin.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundRobin.register_queue": {
            "name": "register_queue",
            "location": 66,
            "return": [
                "QueueID"
            ],
            "arguments": {
                "self": [],
                "tx": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "RoundRobin.register_process": {
            "name": "register_process",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qid": [
                    "int",
                    "str"
                ]
            }
        },
        "RoundRobin.schedule_task": {
            "name": "schedule_task",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "_task_id": [
                    "typing.Sequence[typing.Any]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "_func": [
                    "typing.Sequence[typing.Any]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "_args": [
                    "typing.Sequence[typing.Any]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "_kwargs": [
                    "typing.Sequence[typing.Any]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "RoundRobin.complete_task": {
            "name": "complete_task",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_task_id": [
                    "str",
                    "int",
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        }
    },
    "aiomultiprocess-main/aiomultiprocess/types.py": {},
    "aiomultiprocess-main/aiomultiprocess/__init__.py": {},
    "aiomultiprocess-main/aiomultiprocess/__version__.py": {},
    "aiomultiprocess-main/aiomultiprocess/tests/base.py": {
        "do_nothing": {
            "name": "do_nothing",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "initializer": {
            "name": "initializer",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "async_test": {
            "name": "async_test",
            "location": 56,
            "return": [],
            "arguments": {
                "fn": [
                    "bool",
                    "typing.Callable[[], bytes]",
                    "BaseException"
                ]
            }
        },
        "perf_test": {
            "name": "perf_test",
            "location": 65,
            "return": [],
            "arguments": {
                "fn": [
                    "bool",
                    "typing.Callable[[], bytes]",
                    "BaseException"
                ]
            }
        },
        "async_test.wrapper": {
            "name": "wrapper",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "perf_test.wrapper": {
            "name": "wrapper",
            "location": 68,
            "return": [],
            "arguments": {}
        }
    },
    "aiomultiprocess-main/aiomultiprocess/tests/core.py": {
        "CoreTest.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiomultiprocess-main/aiomultiprocess/tests/perf.py": {
        "Timer.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__enter__": {
            "name": "__enter__",
            "location": 33,
            "return": [
                "Timer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__exit__": {
            "name": "__exit__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.result": {
            "name": "result",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiomultiprocess-main/aiomultiprocess/tests/pool.py": {
        "PoolTest.test_pool_args": {
            "name": "test_pool_args",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiomultiprocess-main/aiomultiprocess/tests/scheduler.py": {
        "SchedulerTest.test_roundrobin_scheduler_one": {
            "name": "test_roundrobin_scheduler_one",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulerTest.test_roundrobin_scheduler_two": {
            "name": "test_roundrobin_scheduler_two",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiomultiprocess-main/aiomultiprocess/tests/__init__.py": {},
    "aiomultiprocess-main/aiomultiprocess/tests/__main__.py": {},
    "aiomultiprocess-main/docs/conf.py": {}
}
{
    "aioswitcher-dev/docs/conf.py": {},
    "aioswitcher-dev/scripts/control_device.py": {
        "asdict": {
            "name": "asdict",
            "location": 167,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "dc": [
                    "dict[str, set[str]]",
                    "str",
                    "typing.Mapping",
                    "bytes"
                ],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "aioswitcher-dev/scripts/discover_devices.py": {
        "print_devices.on_device_found_callback": {
            "name": "on_device_found_callback",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "device": []
            }
        }
    },
    "aioswitcher-dev/src/aioswitcher/bridge.py": {
        "_parse_device_from_datagram": {
            "name": "_parse_device_from_datagram",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "device_callback": [
                    "dict[str, typing.Any]"
                ],
                "datagram": [
                    "str",
                    "bool"
                ]
            }
        },
        "SwitcherBridge.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_device": [
                    "int",
                    "float"
                ],
                "broadcast_port": [
                    "int"
                ]
            }
        },
        "SwitcherBridge.is_running": {
            "name": "is_running",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UdpClientProtocol.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_datagram": [
                    "int",
                    "float"
                ]
            }
        },
        "UdpClientProtocol.connection_made": {
            "name": "connection_made",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "UdpClientProtocol.datagram_received": {
            "name": "datagram_received",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "bytearray",
                    "memoryview"
                ],
                "addr": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "UdpClientProtocol.error_received": {
            "name": "error_received",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "str",
                    "Exception"
                ]
            }
        },
        "UdpClientProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "str",
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DatagramParser.is_switcher_originator": {
            "name": "is_switcher_originator",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatagramParser.get_ip": {
            "name": "get_ip",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatagramParser.get_mac": {
            "name": "get_mac",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatagramParser.get_name": {
            "name": "get_name",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatagramParser.get_device_id": {
            "name": "get_device_id",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatagramParser.get_device_state": {
            "name": "get_device_state",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatagramParser.get_auto_shutdown": {
            "name": "get_auto_shutdown",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatagramParser.get_power_consumption": {
            "name": "get_power_consumption",
            "location": 267,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatagramParser.get_remaining": {
            "name": "get_remaining",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatagramParser.get_device_type": {
            "name": "get_device_type",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aioswitcher-dev/src/aioswitcher/__init__.py": {},
    "aioswitcher-dev/src/aioswitcher/api/messages.py": {
        "StateMessageParser.__post_init__": {
            "name": "__post_init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str"
                ]
            }
        },
        "StateMessageParser.get_power_consumption": {
            "name": "get_power_consumption",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMessageParser.get_time_left": {
            "name": "get_time_left",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateMessageParser.get_time_on": {
            "name": "get_time_on",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateMessageParser.get_auto_shutdown": {
            "name": "get_auto_shutdown",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateMessageParser.get_state": {
            "name": "get_state",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SwitcherBaseResponse.successful": {
            "name": "successful",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitcherLoginResponse.__post_init__": {
            "name": "__post_init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitcherStateResponse.__post_init__": {
            "name": "__post_init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitcherGetSchedulesResponse.__post_init__": {
            "name": "__post_init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitcherGetSchedulesResponse.found_schedules": {
            "name": "found_schedules",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioswitcher-dev/src/aioswitcher/api/packets.py": {},
    "aioswitcher-dev/src/aioswitcher/api/__init__.py": {
        "SwitcherApi.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip_address": [],
                "device_id": [],
                "port": [
                    "int"
                ]
            }
        },
        "SwitcherApi.connected": {
            "name": "connected",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aioswitcher-dev/src/aioswitcher/device/tools.py": {
        "seconds_to_iso_time": {
            "name": "seconds_to_iso_time",
            "location": 23,
            "return": [],
            "arguments": {
                "all_seconds": []
            }
        },
        "sign_packet_with_crc_key": {
            "name": "sign_packet_with_crc_key",
            "location": 40,
            "return": [],
            "arguments": {
                "hex_packet": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "minutes_to_hexadecimal_seconds": {
            "name": "minutes_to_hexadecimal_seconds",
            "location": 63,
            "return": [],
            "arguments": {
                "minutes": [
                    "bytearray",
                    "bytes",
                    "float"
                ]
            }
        },
        "timedelta_to_hexadecimal_seconds": {
            "name": "timedelta_to_hexadecimal_seconds",
            "location": 76,
            "return": [],
            "arguments": {
                "full_time": []
            }
        },
        "string_to_hexadecimale_device_name": {
            "name": "string_to_hexadecimale_device_name",
            "location": 96,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "current_timestamp_to_hexadecimal": {
            "name": "current_timestamp_to_hexadecimal",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "watts_to_amps": {
            "name": "watts_to_amps",
            "location": 127,
            "return": [
                "float"
            ],
            "arguments": {
                "watts": [
                    "int"
                ]
            }
        }
    },
    "aioswitcher-dev/src/aioswitcher/device/__init__.py": {
        "DeviceType.__new__": {
            "name": "__new__",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "tuple[typing.Type]",
                    "None",
                    "str"
                ],
                "value": [
                    "str",
                    "list[]"
                ],
                "hex_rep": [
                    "str",
                    "int"
                ],
                "category": [
                    "str",
                    "int"
                ]
            }
        },
        "DeviceType.value": {
            "name": "value",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.hex_rep": {
            "name": "hex_rep",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.category": {
            "name": "category",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceState.__new__": {
            "name": "__new__",
            "location": 76,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "tuple[typing.Type]",
                    "None",
                    "str"
                ],
                "value": [
                    "str",
                    "list[]"
                ],
                "display": [
                    "str",
                    "int"
                ]
            }
        },
        "DeviceState.display": {
            "name": "display",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceState.value": {
            "name": "value",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SwitcherBase.__post_init__": {
            "name": "__post_init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitcherTimedBase.auto_off_set": {
            "name": "auto_off_set",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SwitcherPowerPlug.__post_init__": {
            "name": "__post_init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitcherWaterHeater.__post_init__": {
            "name": "__post_init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aioswitcher-dev/src/aioswitcher/schedule/parser.py": {
        "get_schedules": {
            "name": "get_schedules",
            "location": 106,
            "return": [
                "set[SwitcherSchedule]"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bytes",
                    "None",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "SwitcherSchedule.__post_init__": {
            "name": "__post_init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitcherSchedule.__hash__": {
            "name": "__hash__",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitcherSchedule.__eq__": {
            "name": "__eq__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "list[list[str]]",
                    "dict[, ]",
                    "int",
                    "str"
                ]
            }
        },
        "ScheduleParser.get_id": {
            "name": "get_id",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleParser.is_enabled": {
            "name": "is_enabled",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleParser.is_recurring": {
            "name": "is_recurring",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleParser.get_days": {
            "name": "get_days",
            "location": 82,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleParser.get_state": {
            "name": "get_state",
            "location": 90,
            "return": [
                "ScheduleState"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScheduleParser.get_start_time": {
            "name": "get_start_time",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScheduleParser.get_end_time": {
            "name": "get_end_time",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aioswitcher-dev/src/aioswitcher/schedule/tools.py": {
        "pretty_next_run": {
            "name": "pretty_next_run",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "start_time": [
                    "int",
                    "str"
                ],
                "days": [
                    "set[]"
                ]
            }
        },
        "calc_duration": {
            "name": "calc_duration",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "start_time": [
                    "int"
                ],
                "end_time": [
                    "int"
                ]
            }
        },
        "bit_summary_to_days": {
            "name": "bit_summary_to_days",
            "location": 81,
            "return": [
                "set[]"
            ],
            "arguments": {
                "sum_weekdays_bit": [
                    "int",
                    "float"
                ]
            }
        },
        "hexadecimale_timestamp_to_localtime": {
            "name": "hexadecimale_timestamp_to_localtime",
            "location": 105,
            "return": [],
            "arguments": {
                "hex_timestamp": []
            }
        },
        "weekdays_to_hexadecimal": {
            "name": "weekdays_to_hexadecimal",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "days": []
            }
        },
        "time_to_hexadecimal_timestamp": {
            "name": "time_to_hexadecimal_timestamp",
            "location": 144,
            "return": [],
            "arguments": {
                "time_value": [
                    "str"
                ]
            }
        }
    },
    "aioswitcher-dev/src/aioswitcher/schedule/__init__.py": {
        "Days.__new__": {
            "name": "__new__",
            "location": 40,
            "return": [],
            "arguments": {
                "cls": [
                    "bool",
                    "tuple[typing.Type]",
                    "None",
                    "str"
                ],
                "value": [
                    "str",
                    "list[]"
                ],
                "hex_rep": [
                    "str",
                    "int"
                ],
                "bit_rep": [
                    "str",
                    "int"
                ],
                "weekday": [
                    "str",
                    "int"
                ]
            }
        },
        "Days.bit_rep": {
            "name": "bit_rep",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Days.hex_rep": {
            "name": "hex_rep",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Days.weekday": {
            "name": "weekday",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aioswitcher-dev/tests/test_api_messages.py": {
        "test_switcher_base_response_with_an_empty_bytes_value_should_return_not_succefull": {
            "name": "test_switcher_base_response_with_an_empty_bytes_value_should_return_not_succefull",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "faulty_response": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_switcher_login_response_dataclass": {
            "name": "test_switcher_login_response_dataclass",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_path": []
            }
        },
        "test_switcher_login_response_dataclass_without_a_valid_input_will_throw_an_error": {
            "name": "test_switcher_login_response_dataclass_without_a_valid_input_will_throw_an_error",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_switcher_state_response_dataclass": {
            "name": "test_switcher_state_response_dataclass",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "get_power_consumption": [
                    "typing.Callable[, ]"
                ],
                "get_auto_shutdown": [
                    "typing.Callable[, ]"
                ],
                "get_time_on": [
                    "typing.Callable[, ]"
                ],
                "get_time_left": [
                    "typing.Callable[, ]"
                ],
                "get_state": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_switcher_get_schedules_response_dataclass_with_two_schedules": {
            "name": "test_switcher_get_schedules_response_dataclass_with_two_schedules",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "get_schedules": []
            }
        },
        "test_switcher_get_schedules_response_dataclass_with_no_schedules": {
            "name": "test_switcher_get_schedules_response_dataclass_with_no_schedules",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "get_schedules": []
            }
        },
        "test_the_state_message_parser": {
            "name": "test_the_state_message_parser",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_path": []
            }
        }
    },
    "aioswitcher-dev/tests/test_api_packet_crc_signing.py": {
        "test_sign_packet_with_crc_key_for_a_random_string_throws_error": {
            "name": "test_sign_packet_with_crc_key_for_a_random_string_throws_error",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sign_packet_with_crc_key_for_login_packet_returns_signed_packet": {
            "name": "test_sign_packet_with_crc_key_for_login_packet_returns_signed_packet",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sign_packet_with_crc_key_for_get_state_packet_returns_signed_packet": {
            "name": "test_sign_packet_with_crc_key_for_get_state_packet_returns_signed_packet",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sign_packet_with_crc_key_for_send_control_on_with_no_timer_packet_returns_signed_packet": {
            "name": "test_sign_packet_with_crc_key_for_send_control_on_with_no_timer_packet_returns_signed_packet",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sign_packet_with_crc_key_for_send_control_off_packet_returns_signed_packet": {
            "name": "test_sign_packet_with_crc_key_for_send_control_off_packet_returns_signed_packet",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sign_packet_with_crc_key_for_send_control_on_with_timer_packet_returns_signed_packet": {
            "name": "test_sign_packet_with_crc_key_for_send_control_on_with_timer_packet_returns_signed_packet",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sign_packet_with_crc_key_for_set_auto_off_packet_returns_signed_packet": {
            "name": "test_sign_packet_with_crc_key_for_set_auto_off_packet_returns_signed_packet",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sign_packet_with_crc_key_for_set_device_name_packet_returns_signed_packet": {
            "name": "test_sign_packet_with_crc_key_for_set_device_name_packet_returns_signed_packet",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sign_packet_with_crc_key_for_get_schedules_packet_returns_signed_packet": {
            "name": "test_sign_packet_with_crc_key_for_get_schedules_packet_returns_signed_packet",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aioswitcher-dev/tests/test_api_tcp_client.py": {
        "writer_write": {
            "name": "writer_write",
            "location": 39,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "reader_mock": {
            "name": "reader_mock",
            "location": 44,
            "return": [
                "AsyncMock"
            ],
            "arguments": {}
        },
        "writer_mock": {
            "name": "writer_mock",
            "location": 49,
            "return": [
                "AsyncMock"
            ],
            "arguments": {
                "writer_write": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "_get_two_packets": {
            "name": "_get_two_packets",
            "location": 184,
            "return": [
                "list[]"
            ],
            "arguments": {
                "resource_path_root": [
                    "str",
                    "bool",
                    "typing.IO",
                    "bytes"
                ],
                "second_packet": [
                    "str",
                    "bool",
                    "typing.IO",
                    "bytes"
                ]
            }
        },
        "_load_packet": {
            "name": "_load_packet",
            "location": 191,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "aioswitcher-dev/tests/test_bridge.py": {
        "mock_callback": {
            "name": "mock_callback",
            "location": 31,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "udp_broadcast_server": {
            "name": "udp_broadcast_server",
            "location": 36,
            "return": [],
            "arguments": {}
        }
    },
    "aioswitcher-dev/tests/test_device_dataclasses.py": {
        "fake_data": {
            "name": "fake_data",
            "location": 45,
            "return": [
                "FakeData"
            ],
            "arguments": {}
        },
        "test_given_a_device_of_type_water_heater_when_instantiating_as_a_water_heater_should_be_instatiated_properly": {
            "name": "test_given_a_device_of_type_water_heater_when_instantiating_as_a_water_heater_should_be_instatiated_properly",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_data": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "device_type": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_given_a_device_of_type_power_plug_when_instantiating_as_a_power_plug_should_be_instatiated_properly": {
            "name": "test_given_a_device_of_type_power_plug_when_instantiating_as_a_power_plug_should_be_instatiated_properly",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_data": [
                    "int"
                ]
            }
        },
        "test_given_a_device_of_type_water_heater_when_instantiating_as_a_power_plug_should_raise_an_error": {
            "name": "test_given_a_device_of_type_water_heater_when_instantiating_as_a_power_plug_should_raise_an_error",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_data": [],
                "device_type": []
            }
        },
        "test_given_a_device_of_type_power_plug_when_instantiating_as_a_water_heater_should_raise_an_error": {
            "name": "test_given_a_device_of_type_power_plug_when_instantiating_as_a_water_heater_should_raise_an_error",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_data": [
                    "bool",
                    "str",
                    "tuple[]"
                ]
            }
        }
    },
    "aioswitcher-dev/tests/test_device_enum_helpers.py": {
        "test_the_given_type_custom_properties_are_returning_the_expected_data": {
            "name": "test_the_given_type_custom_properties_are_returning_the_expected_data",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "sut_type": [
                    "str",
                    "float",
                    "dict[str, str]"
                ],
                "expected_value": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "float"
                ],
                "expected_hex_rep": [
                    "str",
                    "int",
                    "None"
                ],
                "expected_category": [
                    "str",
                    "None",
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "test_the_given_state_custom_properties_are_returning_the_expected_data": {
            "name": "test_the_given_state_custom_properties_are_returning_the_expected_data",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "sut_state": [
                    "dict[, ]",
                    "str",
                    "int"
                ],
                "expected_value": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "int"
                ],
                "expected_display": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        }
    },
    "aioswitcher-dev/tests/test_device_parsing.py": {
        "mock_callback": {
            "name": "mock_callback",
            "location": 29,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "mock_device": {
            "name": "mock_device",
            "location": 34,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "test_an_unknown_datagram_not_produces_device": {
            "name": "test_an_unknown_datagram_not_produces_device",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_debug": [],
                "mock_callback": []
            }
        },
        "test_an_unknown_device_type_produces_a_warning": {
            "name": "test_an_unknown_device_type_produces_a_warning",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_callback": []
            }
        },
        "test_a_water_heater_datagram_produces_device": {
            "name": "test_a_water_heater_datagram_produces_device",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_device_cls": [],
                "mock_device": [],
                "resource_path": [],
                "mock_callback": []
            }
        },
        "test_a_power_plug_datagram_produces_device": {
            "name": "test_a_power_plug_datagram_produces_device",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_device_cls": [],
                "mock_device": [],
                "resource_path": [],
                "mock_callback": []
            }
        }
    },
    "aioswitcher-dev/tests/test_device_tools.py": {
        "test_seconds_to_iso_time_with_a_valid_seconds_value_should_return_a_time_string": {
            "name": "test_seconds_to_iso_time_with_a_valid_seconds_value_should_return_a_time_string",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_seconds_to_iso_time_with_a_nagative_value_should_throw_an_error": {
            "name": "test_seconds_to_iso_time_with_a_nagative_value_should_throw_an_error",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_minutes_to_hexadecimal_seconds_with_correct_minutes_should_return_expected_hex_seconds": {
            "name": "test_minutes_to_hexadecimal_seconds_with_correct_minutes_should_return_expected_hex_seconds",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_minutes_to_hexadecimal_seconds_with_a_negative_value_should_throw_an_error": {
            "name": "test_minutes_to_hexadecimal_seconds_with_a_negative_value_should_throw_an_error",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timedelta_to_hexadecimal_seconds_with_an_allowed_timedelta_should_return_an_hex_timestamp": {
            "name": "test_timedelta_to_hexadecimal_seconds_with_an_allowed_timedelta_should_return_an_hex_timestamp",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timedelta_to_hexadecimal_seconds_with_an_out_of_range_value_should_throw_an_error": {
            "name": "test_timedelta_to_hexadecimal_seconds_with_an_out_of_range_value_should_throw_an_error",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "out_of_range": [
                    "str",
                    "typing.Sequence[typing.Hashable]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_string_to_hexadecimale_device_name_with_a_correct_length_name_should_return_a_right_zero_padded_hex_name": {
            "name": "test_string_to_hexadecimale_device_name_with_a_correct_length_name_should_return_a_right_zero_padded_hex_name",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_string_to_hexadecimale_device_name_with_an_unsupported_length_value_should_throw_an_error": {
            "name": "test_string_to_hexadecimale_device_name_with_an_unsupported_length_value_should_throw_an_error",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "unsupported_length_value": [
                    "str"
                ]
            }
        },
        "test_current_timestamp_to_hexadecimal_should_return_the_current_timestamp": {
            "name": "test_current_timestamp_to_hexadecimal_should_return_the_current_timestamp",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_current_timestamp_to_hexadecimal_with_errornous_value_should_throw_an_error": {
            "name": "test_current_timestamp_to_hexadecimal_with_errornous_value_should_throw_an_error",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "test_watts_to_amps_with_parameterized_watts_should_procude_expected_amps": {
            "name": "test_watts_to_amps_with_parameterized_watts_should_procude_expected_amps",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "watts": [
                    "typing.Type"
                ],
                "amps": [
                    "typing.Type"
                ]
            }
        }
    },
    "aioswitcher-dev/tests/test_schedule_days.py": {
        "test_the_and_verify_the_paramerized_member_of_the_days_enum": {
            "name": "test_the_and_verify_the_paramerized_member_of_the_days_enum",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "sut_day": [
                    "dict[, ]",
                    "typing.Hashable"
                ],
                "expected_value": [
                    "dict[, ]",
                    "str",
                    "list[list[str]]",
                    "list[str]"
                ],
                "expected_hex_rep": [
                    "int",
                    "str"
                ],
                "expected_bit_rep": [
                    "int",
                    "str"
                ],
                "expected_weekday": []
            }
        }
    },
    "aioswitcher-dev/tests/test_schedule_parser.py": {
        "test_switcher_schedule_dataclass_to_verify_the_post_initialization_of_the_dispaly_and_duration": {
            "name": "test_switcher_schedule_dataclass_to_verify_the_post_initialization_of_the_dispaly_and_duration",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_switcher_schedule_dataclass_to_verify_equality_and_hashing": {
            "name": "test_switcher_schedule_dataclass_to_verify_equality_and_hashing",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_schedule_parser_with_a_weekly_recurring_enabled_schedule_data": {
            "name": "test_schedule_parser_with_a_weekly_recurring_enabled_schedule_data",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_schedule_parser_with_a_daily_recurring_enabled_schedule_data": {
            "name": "test_schedule_parser_with_a_daily_recurring_enabled_schedule_data",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_schedule_parser_with_a_partial_daily_recurring_enabled_schedule_data": {
            "name": "test_schedule_parser_with_a_partial_daily_recurring_enabled_schedule_data",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_schedule_parser_with_a_non_recurring_enabled_schedule_data": {
            "name": "test_schedule_parser_with_a_non_recurring_enabled_schedule_data",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_schedules_with_a_two_schedules_packet": {
            "name": "test_get_schedules_with_a_two_schedules_packet",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_path": []
            }
        }
    },
    "aioswitcher-dev/tests/test_schedule_tools.py": {
        "today": {
            "name": "today",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "todays_day": {
            "name": "todays_day",
            "location": 36,
            "return": [],
            "arguments": {
                "today": []
            }
        },
        "one_hour_from_now": {
            "name": "one_hour_from_now",
            "location": 41,
            "return": [],
            "arguments": {
                "today": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "test_pretty_next_run_with_no_selected_days_should_return_due_today": {
            "name": "test_pretty_next_run_with_no_selected_days_should_return_due_today",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "one_hour_from_now": [
                    "typing.Callable[List,bool, None]",
                    "bool"
                ]
            }
        },
        "test_pretty_next_run_with_todays_day_should_return_due_today": {
            "name": "test_pretty_next_run_with_todays_day_should_return_due_today",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "todays_day": [],
                "one_hour_from_now": [
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_pretty_next_run_with_multiple_days_should_return_due_the_closest_day": {
            "name": "test_pretty_next_run_with_multiple_days_should_return_due_the_closest_day",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "today": [
                    "int"
                ]
            }
        },
        "test_pretty_next_run_on_yesterday_with_todays_day_should_return_due_tomorrow": {
            "name": "test_pretty_next_run_on_yesterday_with_todays_day_should_return_due_tomorrow",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "today": [],
                "todays_day": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_pretty_next_run_on_two_days_ago_with_todays_day_should_return_due_on_next_day": {
            "name": "test_pretty_next_run_on_two_days_ago_with_todays_day_should_return_due_on_next_day",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "today": [
                    "int",
                    "str"
                ],
                "todays_day": []
            }
        },
        "test_pretty_next_run_on_last_sunday_with_monday_selected_should_return_due_tomorrow": {
            "name": "test_pretty_next_run_on_last_sunday_with_monday_selected_should_return_due_tomorrow",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "today": []
            }
        },
        "test_calc_duration_with_valid_start_and_end_time_should_return_the_duration": {
            "name": "test_calc_duration_with_valid_start_and_end_time_should_return_the_duration",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calc_duration_with_reveresed_start_and_end_time_should_throw_an_error": {
            "name": "test_calc_duration_with_reveresed_start_and_end_time_should_throw_an_error",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hexadecimale_timestamp_to_localtime_with_the_current_timestamp_should_return_a_time_string": {
            "name": "test_hexadecimale_timestamp_to_localtime_with_the_current_timestamp_should_return_a_time_string",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hexadecimale_timestamp_to_localtime_with_wrong_value_should_throw_an_error": {
            "name": "test_hexadecimale_timestamp_to_localtime_with_wrong_value_should_throw_an_error",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bit_summary_to_days_with_parameterized_sum_should_return_the_expected_weekday_set": {
            "name": "test_bit_summary_to_days_with_parameterized_sum_should_return_the_expected_weekday_set",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "sum": [
                    "str",
                    "typing.IO"
                ],
                "expected_weekdays": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "test_bit_summary_to_days_with_wrong_bit_sum_parameterized_value": {
            "name": "test_bit_summary_to_days_with_wrong_bit_sum_parameterized_value",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "wrong_bit_sum": [
                    "str"
                ]
            }
        },
        "test_weekdays_to_hexadecimal_with_parameterized_weekday_set_should_return_the_expected_sum": {
            "name": "test_weekdays_to_hexadecimal_with_parameterized_weekday_set_should_return_the_expected_sum",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "weekdays": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected_sum": [
                    "str",
                    "int"
                ]
            }
        },
        "test_weekdays_to_hexadecimal_with_empty_collections_should_throw_an_error": {
            "name": "test_weekdays_to_hexadecimal_with_empty_collections_should_throw_an_error",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_collection": []
            }
        },
        "test_weekdays_to_hexadecimal_with_duplicate_members_should_throw_an_encoding_error": {
            "name": "test_weekdays_to_hexadecimal_with_duplicate_members_should_throw_an_encoding_error",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "duplicate_members": []
            }
        },
        "test_time_to_hexadecimal_timestamp_with_correct_time_should_return_the_expected_timestamp": {
            "name": "test_time_to_hexadecimal_timestamp_with_correct_time_should_return_the_expected_timestamp",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_to_hexadecimal_timestamp_with_incorrect_time_should_throw_an_error": {
            "name": "test_time_to_hexadecimal_timestamp_with_incorrect_time_should_throw_an_error",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aioswitcher-dev/tests/test_udp_client_protocol.py": {
        "mock_callback": {
            "name": "mock_callback",
            "location": 26,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "sut_protocol": {
            "name": "sut_protocol",
            "location": 31,
            "return": [
                "UdpClientProtocol"
            ],
            "arguments": {
                "mock_callback": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_given_transport_when_connection_made_then_transport_should_be_served": {
            "name": "test_given_transport_when_connection_made_then_transport_should_be_served",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "sut_protocol": []
            }
        },
        "test_given_datagram_when_sut_received_then_the_callback_is_called": {
            "name": "test_given_datagram_when_sut_received_then_the_callback_is_called",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "sut_protocol": [],
                "mock_callback": []
            }
        },
        "test_error_received_with_no_error_should_issue_a_warning": {
            "name": "test_error_received_with_no_error_should_issue_a_warning",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "sut_protocol": []
            }
        },
        "test_error_received_with_an_actual_error_should_write_to_the_error_output": {
            "name": "test_error_received_with_an_actual_error_should_write_to_the_error_output",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_error": [],
                "sut_protocol": []
            }
        },
        "test_connection_lost_with_no_error_should_write_to_the_info_output": {
            "name": "test_connection_lost_with_no_error_should_write_to_the_info_output",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_info": [],
                "sut_protocol": []
            }
        },
        "test_connection_lost_with_an_actual_error_should_write_to_the_critical_output": {
            "name": "test_connection_lost_with_an_actual_error_should_write_to_the_critical_output",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_critical": [],
                "sut_protocol": []
            }
        }
    },
    "aioswitcher-dev/tests/test_udp_datagram_parsing.py": {
        "test_datagram_state_off": {
            "name": "test_datagram_state_off",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_path": [
                    "str",
                    "bool"
                ],
                "type_suffix": [
                    "str",
                    "bool"
                ],
                "expected_type": [
                    "bool",
                    "None",
                    "dict[, ]",
                    "str",
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_datagram_state_on": {
            "name": "test_datagram_state_on",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_path": [
                    "str",
                    "bool"
                ],
                "type_suffix": [
                    "str",
                    "bool"
                ],
                "expected_type": [
                    "bool",
                    "None",
                    "dict[, ]",
                    "str",
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_a_faulty_datagram": {
            "name": "test_a_faulty_datagram",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "resource_path": [
                    "str",
                    "None"
                ],
                "type_suffix": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "aioswitcher-dev/tests/__init__.py": {}
}
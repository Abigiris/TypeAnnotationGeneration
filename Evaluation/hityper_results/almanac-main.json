{
    "almanac-main/tasks.py": {
        "_cwd": {
            "name": "_cwd",
            "location": 29,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "new_cwd": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "build_docs": {
            "name": "build_docs",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "serve_docs": {
            "name": "serve_docs",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "port": [
                    "int"
                ]
            }
        },
        "get_parsed_args": {
            "name": "get_parsed_args",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 91,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "almanac-main/almanac/version.py": {},
    "almanac-main/almanac/__init__.py": {},
    "almanac-main/almanac/__main__.py": {},
    "almanac-main/almanac/arguments/argument_base.py": {
        "ArgumentBase.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ArgumentBase.display_name": {
            "name": "display_name",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "new_display_name": []
            }
        },
        "ArgumentBase._abstract_display_name_setter": {
            "name": "_abstract_display_name_setter",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_display_name": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ArgumentBase.completers": {
            "name": "completers",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentBase.description": {
            "name": "description",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "new_description": []
            }
        },
        "ArgumentBase._abstract_description_setter": {
            "name": "_abstract_description_setter",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_description": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "ArgumentBase.hidden": {
            "name": "hidden",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "new_value": []
            }
        },
        "ArgumentBase._abstract_hidden_setter": {
            "name": "_abstract_hidden_setter",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "bool",
                    "str"
                ]
            }
        },
        "ArgumentBase.real_name": {
            "name": "real_name",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentBase.param": {
            "name": "param",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentBase.annotation": {
            "name": "annotation",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentBase.is_pos_only": {
            "name": "is_pos_only",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentBase.is_kw_only": {
            "name": "is_kw_only",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentBase.is_var_kw": {
            "name": "is_var_kw",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentBase.is_var_pos": {
            "name": "is_var_pos",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentBase.has_default_value": {
            "name": "has_default_value",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentBase.default_value": {
            "name": "default_value",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentBase.__str__": {
            "name": "__str__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentBase.__repr__": {
            "name": "__repr__",
            "location": 193,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/arguments/frozen_argument.py": {
        "FrozenArgument._abstract_display_name_setter": {
            "name": "_abstract_display_name_setter",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_display_name": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "FrozenArgument._abstract_description_setter": {
            "name": "_abstract_description_setter",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_description": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "FrozenArgument._abstract_hidden_setter": {
            "name": "_abstract_hidden_setter",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "bool",
                    "str"
                ]
            }
        },
        "FrozenArgument.abbreviated_description": {
            "name": "abbreviated_description",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrozenArgument.completers": {
            "name": "completers",
            "location": 45,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/arguments/mutable_argument.py": {
        "MutableArgument._abstract_display_name_setter": {
            "name": "_abstract_display_name_setter",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_display_name": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "MutableArgument._abstract_description_setter": {
            "name": "_abstract_description_setter",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_description": [
                    "str",
                    "None",
                    "bool",
                    "list[typing.Any]"
                ]
            }
        },
        "MutableArgument._abstract_hidden_setter": {
            "name": "_abstract_hidden_setter",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "float",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "MutableArgument.completers": {
            "name": "completers",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableArgument.freeze": {
            "name": "freeze",
            "location": 36,
            "return": [
                "FrozenArgument"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/arguments/__init__.py": {},
    "almanac-main/almanac/commands/command_base.py": {
        "CommandBase.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coroutine": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "CommandBase.has_var_kw_arg": {
            "name": "has_var_kw_arg",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandBase.has_var_pos_arg": {
            "name": "has_var_pos_arg",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandBase.name": {
            "name": "name",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "new_name": []
            }
        },
        "CommandBase._abstract_name_setter": {
            "name": "_abstract_name_setter",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_name": [
                    "str"
                ]
            }
        },
        "CommandBase.description": {
            "name": "description",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "new_description": []
            }
        },
        "CommandBase._abstract_description_setter": {
            "name": "_abstract_description_setter",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_description": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "CommandBase.aliases": {
            "name": "aliases",
            "location": 119,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandBase.add_alias": {
            "name": "add_alias",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandBase.identifiers": {
            "name": "identifiers",
            "location": 133,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandBase.signature": {
            "name": "signature",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandBase.coroutine": {
            "name": "coroutine",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/commands/frozen_command.py": {
        "FrozenCommand.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coroutine": [
                    "str",
                    "None",
                    "typing.Any"
                ]
            }
        },
        "FrozenCommand.abbreviated_description": {
            "name": "abbreviated_description",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrozenCommand.resolved_kwarg_names": {
            "name": "resolved_kwarg_names",
            "location": 45,
            "return": [
                "tuple[typing.Union[dict[typing.Union[dict[str, typing.Any],dict[str, str],dict[, ],str,dict[int, typing.Any]], tuple[typing.Union[str,typing.Any]]],dict[tuple[typing.Union[str,typing.Any]], tuple[typing.Union[str,typing.Any]]]]]"
            ],
            "arguments": {
                "self": [],
                "kwarg_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "FrozenCommand._abstract_description_setter": {
            "name": "_abstract_description_setter",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_description": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "FrozenCommand._abstract_name_setter": {
            "name": "_abstract_name_setter",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_name": [
                    "str"
                ]
            }
        },
        "FrozenCommand.add_alias": {
            "name": "add_alias",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenCommand.get_unbound_arguments": {
            "name": "get_unbound_arguments",
            "location": 90,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenCommand._hash_basis": {
            "name": "_hash_basis",
            "location": 129,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenCommand.__hash__": {
            "name": "__hash__",
            "location": 134,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenCommand.__eq__": {
            "name": "__eq__",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FrozenCommand.__iter__": {
            "name": "__iter__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrozenCommand.__getitem__": {
            "name": "__getitem__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "argument_display_name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "FrozenCommand.__len__": {
            "name": "__len__",
            "location": 162,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/commands/mutable_command.py": {
        "MutableCommand.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coroutine": [
                    "str",
                    "None",
                    "typing.Any"
                ]
            }
        },
        "MutableCommand.ensure_command": {
            "name": "ensure_command",
            "location": 56,
            "return": [
                "str",
                "int",
                "float",
                "MutableCommand"
            ],
            "arguments": {
                "new_command": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "MutableCommand._abstract_description_setter": {
            "name": "_abstract_description_setter",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_description": [
                    "str",
                    "None",
                    "bool",
                    "list[typing.Any]"
                ]
            }
        },
        "MutableCommand._abstract_name_setter": {
            "name": "_abstract_name_setter",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_name": [
                    "tuple[typing.Union[str,str]]",
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "MutableCommand.add_alias": {
            "name": "add_alias",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableCommand.freeze": {
            "name": "freeze",
            "location": 89,
            "return": [
                "FrozenCommand"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableCommand.__delitem__": {
            "name": "__delitem__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argument_real_name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "MutableCommand.__iter__": {
            "name": "__iter__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableCommand.__getitem__": {
            "name": "__getitem__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "argument_real_name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "MutableCommand.__len__": {
            "name": "__len__",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableCommand.__setitem__": {
            "name": "__setitem__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argument_real_name": [
                    "str"
                ],
                "argument": [
                    "str"
                ]
            }
        }
    },
    "almanac-main/almanac/commands/__init__.py": {},
    "almanac-main/almanac/completion/completion_utils.py": {
        "rewrite_completion_stream": {
            "name": "rewrite_completion_stream",
            "location": 6,
            "return": [
                "typing.Generator[Completion]"
            ],
            "arguments": {
                "completions": [
                    "str"
                ]
            }
        }
    },
    "almanac-main/almanac/completion/page_path_completer.py": {
        "PagePathCompleter.get_completions": {
            "name": "get_completions",
            "location": 16,
            "return": [
                "None",
                "typing.Generator[Completion]"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "dict[, ]",
                    "int"
                ],
                "complete_event": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        }
    },
    "almanac-main/almanac/completion/word_completer.py": {
        "WordCompleter.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "int",
                    "float"
                ]
            }
        },
        "WordCompleter.get_completions": {
            "name": "get_completions",
            "location": 25,
            "return": [
                "typing.Generator[Completion]"
            ],
            "arguments": {
                "self": [],
                "document": [
                    "dict[, ]",
                    "int"
                ],
                "complete_event": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        }
    },
    "almanac-main/almanac/completion/__init__.py": {},
    "almanac-main/almanac/constants/defaults.py": {},
    "almanac-main/almanac/constants/exit_codes.py": {},
    "almanac-main/almanac/constants/__init__.py": {},
    "almanac-main/almanac/context/context.py": {
        "set_current_app": {
            "name": "set_current_app",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "set[str]"
                ]
            }
        },
        "current_app": {
            "name": "current_app",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "almanac-main/almanac/context/__init__.py": {},
    "almanac-main/almanac/core/application.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.cmd": {
            "name": "cmd",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.arg": {
            "name": "arg",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.hook": {
            "name": "hook",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.bag": {
            "name": "bag",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.current_prompt_str": {
            "name": "current_prompt_str",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.current_path": {
            "name": "current_path",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.on_exit_callbacks": {
            "name": "on_exit_callbacks",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.on_init_callbacks": {
            "name": "on_init_callbacks",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.type_completer_mapping": {
            "name": "type_completer_mapping",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.type_promoter_mapping": {
            "name": "type_promoter_mapping",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.page_navigator": {
            "name": "page_navigator",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.command_engine": {
            "name": "command_engine",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.io": {
            "name": "io",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.io_context": {
            "name": "io_context",
            "location": 199,
            "return": [
                "typing.Generator[typing.Union[list[list[str]],list[typing.Union[int,float]],list[list[]],list[str]]]"
            ],
            "arguments": {
                "self": [],
                "new_io_context": [
                    "list[list[str]]",
                    "list[typing.Union[int,float]]",
                    "list[list[]]",
                    "list[str]"
                ]
            }
        },
        "Application.add_completers_for_type": {
            "name": "add_completers_for_type",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "typing.Type",
                    "str",
                    "None"
                ]
            }
        },
        "Application.add_promoter_for_type": {
            "name": "add_promoter_for_type",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "typing.Type",
                    "BaseException"
                ],
                "promoter_callable": [
                    "typing.Type",
                    "BaseException"
                ]
            }
        },
        "Application.promoter_for": {
            "name": "promoter_for",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.prompt_text": {
            "name": "prompt_text",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.on_exit": {
            "name": "on_exit",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.on_init": {
            "name": "on_init",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application.call_as_current_app_sync": {
            "name": "call_as_current_app_sync",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "typing.Type"
                ]
            }
        },
        "Application.quit": {
            "name": "quit",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application._maybe_propagate_runtime_exc": {
            "name": "_maybe_propagate_runtime_exc",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Application.print_exception_info": {
            "name": "print_exception_info",
            "location": 468,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "bool",
                    "None"
                ],
                "unknown": [
                    "bool"
                ]
            }
        },
        "Application.print_command_suggestions": {
            "name": "print_command_suggestions",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_or_alias": [
                    "float",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "Application._prompt_callback_wrapper": {
            "name": "_prompt_callback_wrapper",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Application._default_prompt_callback": {
            "name": "_default_prompt_callback",
            "location": 518,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.promoter_for.decorator": {
            "name": "decorator",
            "location": 309,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "Application.prompt_text.decorator": {
            "name": "decorator",
            "location": 323,
            "return": [],
            "arguments": {
                "callback_func": []
            }
        },
        "Application.on_exit.decorator": {
            "name": "decorator",
            "location": 347,
            "return": [],
            "arguments": {
                "callback_coro": []
            }
        },
        "Application.on_init.decorator": {
            "name": "decorator",
            "location": 371,
            "return": [],
            "arguments": {
                "callback_coro": []
            }
        }
    },
    "almanac-main/almanac/core/command_completer.py": {
        "CommandCompleter.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "CommandCompleter._maybe_complete_for_type": {
            "name": "_maybe_complete_for_type",
            "location": 45,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "annotation": [
                    "typing.Type",
                    "typing.Callable[, ]"
                ],
                "document": [
                    "str",
                    "bool"
                ],
                "complete_event": [
                    "str",
                    "bool"
                ]
            }
        },
        "CommandCompleter._get_command_completions": {
            "name": "_get_command_completions",
            "location": 57,
            "return": [
                "typing.Generator[Completion]"
            ],
            "arguments": {
                "self": [],
                "start_of_command": []
            }
        },
        "CommandCompleter._get_completions_for_arg": {
            "name": "_get_completions_for_arg",
            "location": 76,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "frozen_arg": [
                    "str",
                    "bool"
                ],
                "document": [
                    "tuple[]",
                    "bool"
                ],
                "complete_event": [
                    "tuple[]",
                    "bool"
                ]
            }
        },
        "CommandCompleter._get_kw_arg_name_completions": {
            "name": "_get_kw_arg_name_completions",
            "location": 101,
            "return": [
                "typing.Generator[Completion]"
            ],
            "arguments": {
                "self": [],
                "start_of_kw_arg": [],
                "unbound_kw_args": [
                    "set[]"
                ]
            }
        },
        "CommandCompleter.get_completions": {
            "name": "get_completions",
            "location": 120,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "document": [],
                "complete_event": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "almanac-main/almanac/core/command_engine.py": {
        "CommandEngine.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "list[str]"
                ]
            }
        },
        "CommandEngine.app": {
            "name": "app",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandEngine.type_promoter_mapping": {
            "name": "type_promoter_mapping",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandEngine.add_promoter_for_type": {
            "name": "add_promoter_for_type",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "str",
                    "typing.Type"
                ],
                "promoter_callable": [
                    "bool",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "CommandEngine.register": {
            "name": "register",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "dict[str, typing.Any]",
                    "typing.Hashable",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "CommandEngine.add_before_command_callback": {
            "name": "add_before_command_callback",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_or_command": [
                    "str"
                ],
                "callback": [
                    "str"
                ]
            }
        },
        "CommandEngine.add_after_command_callback": {
            "name": "add_after_command_callback",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_or_command": [
                    "str"
                ],
                "callback": [
                    "str"
                ]
            }
        },
        "CommandEngine.get": {
            "name": "get",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "name_or_alias": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "CommandEngine.get_suggestions": {
            "name": "get_suggestions",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "name_or_alias": [
                    "str"
                ],
                "max_suggestions": [
                    "int"
                ]
            }
        },
        "CommandEngine.keys": {
            "name": "keys",
            "location": 310,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandEngine.registered_commands": {
            "name": "registered_commands",
            "location": 317,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandEngine.__contains__": {
            "name": "__contains__",
            "location": 323,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name_or_alias": [
                    "set[str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "CommandEngine.__len__": {
            "name": "__len__",
            "location": 330,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandEngine.__repr__": {
            "name": "__repr__",
            "location": 336,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandEngine.__str__": {
            "name": "__str__",
            "location": 341,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/core/decorators.py": {
        "ArgumentDecoratorProxy.__getattr__": {
            "name": "__getattr__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "argument_name": []
            }
        },
        "CommandDecoratorProxy.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "CommandDecoratorProxy.register": {
            "name": "register",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandDecoratorProxy.compose": {
            "name": "compose",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommandDecoratorProxy.__call__": {
            "name": "__call__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentDecoratorProxy.__getattr__.decorator": {
            "name": "decorator",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "CommandDecoratorProxy.register.wrapped": {
            "name": "wrapped",
            "location": 119,
            "return": [],
            "arguments": {
                "command_or_coro": []
            }
        },
        "CommandDecoratorProxy.compose._compose2": {
            "name": "_compose2",
            "location": 136,
            "return": [],
            "arguments": {
                "f": [],
                "g": []
            }
        },
        "CommandDecoratorProxy.compose._nop": {
            "name": "_nop",
            "location": 141,
            "return": [],
            "arguments": {
                "command_or_coro": []
            }
        },
        "CommandDecoratorProxy.__call__.wrapped": {
            "name": "wrapped",
            "location": 154,
            "return": [],
            "arguments": {
                "command_or_coro": []
            }
        },
        "ArgumentDecoratorProxy.__getattr__.decorator.wrapped": {
            "name": "wrapped",
            "location": 48,
            "return": [],
            "arguments": {
                "command_or_coro": []
            }
        },
        "CommandDecoratorProxy.compose._compose2.wrapped": {
            "name": "wrapped",
            "location": 137,
            "return": [],
            "arguments": {
                "command_or_coro": []
            }
        }
    },
    "almanac-main/almanac/core/__init__.py": {},
    "almanac-main/almanac/errors/almanac_error.py": {},
    "almanac-main/almanac/errors/argument_errors.py": {
        "ArgumentNameCollisionError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentNameCollisionError.names": {
            "name": "names",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissingArgumentsError.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingArgumentsError.missing_args": {
            "name": "missing_args",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoSuchArgumentError.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoSuchArgumentError.names": {
            "name": "names",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TooManyPositionalArgumentsError.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TooManyPositionalArgumentsError.values": {
            "name": "values",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnknownArgumentBindingError.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signature": [
                    "int",
                    "str"
                ],
                "pos_args": [
                    "str",
                    "list[typing.Any]"
                ],
                "kw_args": [
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "UnknownArgumentBindingError.signature": {
            "name": "signature",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnknownArgumentBindingError.pos_args": {
            "name": "pos_args",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnknownArgumentBindingError.kw_args": {
            "name": "kw_args",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/errors/command_errors.py": {
        "CommandNameCollisionError.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandNameCollisionError.names": {
            "name": "names",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoSuchCommandError.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoSuchCommandError.names": {
            "name": "names",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/errors/configuration_errors.py": {},
    "almanac-main/almanac/errors/generic_errors.py": {
        "AlmanacKeyError.__str__": {
            "name": "__str__",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionalValueError.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool"
                ],
                "error_pos": [
                    "int",
                    "list[str]",
                    "None",
                    "float"
                ]
            }
        },
        "PositionalValueError.error_pos": {
            "name": "error_pos",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/errors/page_errors.py": {
        "BlockedPageOverwriteError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "BlockedPageOverwriteError.path": {
            "name": "path",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoSuchPageError.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "NoSuchPageError.path": {
            "name": "path",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutOfBoundsPageError.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "OutOfBoundsPageError.path": {
            "name": "path",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/errors/parsing_errors.py": {
        "PartialParseError.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "None"
                ],
                "remaining": [
                    "bool",
                    "str",
                    "list[list[str]]",
                    "None"
                ],
                "partial_result": [
                    "str",
                    "None",
                    "int",
                    "list[list[int]]",
                    "float"
                ],
                "col": []
            }
        }
    },
    "almanac-main/almanac/errors/runtime_errors.py": {},
    "almanac-main/almanac/errors/__init__.py": {},
    "almanac-main/almanac/hooks/assertions.py": {
        "assert_sync_callback": {
            "name": "assert_sync_callback",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "candidate": [
                    "list[]",
                    "str",
                    "int"
                ]
            }
        },
        "assert_async_callback": {
            "name": "assert_async_callback",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "candidate": [
                    "list[]",
                    "bytes"
                ]
            }
        }
    },
    "almanac-main/almanac/hooks/exception_hook_dispatch_table.py": {
        "_mro_distance": {
            "name": "_mro_distance",
            "location": 88,
            "return": [
                "float"
            ],
            "arguments": {
                "sub_cls": [
                    "typing.Callable[, ]",
                    "int",
                    "str"
                ],
                "super_cls": [
                    "int",
                    "dict[str, tuple[typing.Union[int,int]]]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ExceptionHookDispatchTable.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionHookDispatchTable.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionHookDispatchTable.set_hook_for_exc_type": {
            "name": "set_hook_for_exc_type",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "int",
                    "typing.Type",
                    "None"
                ],
                "hook_coro": [
                    "int",
                    "str",
                    "None"
                ],
                "allow_overwrite": [
                    "bool"
                ]
            }
        },
        "ExceptionHookDispatchTable.get_hook_for_exc_type": {
            "name": "get_hook_for_exc_type",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "str"
                ]
            }
        },
        "ExceptionHookDispatchTable.__call__.decorator": {
            "name": "decorator",
            "location": 37,
            "return": [],
            "arguments": {
                "hook_coro": []
            }
        }
    },
    "almanac-main/almanac/hooks/hook_proxy.py": {
        "HookProxy.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "HookProxy.command_engine": {
            "name": "command_engine",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HookProxy.exception": {
            "name": "exception",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HookProxy.before": {
            "name": "before",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HookProxy.after": {
            "name": "after",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HookProxy._resolved_commands": {
            "name": "_resolved_commands",
            "location": 87,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HookProxy.before.decorator": {
            "name": "decorator",
            "location": 52,
            "return": [],
            "arguments": {
                "hook_coro": []
            }
        },
        "HookProxy.after.decorator": {
            "name": "decorator",
            "location": 73,
            "return": [],
            "arguments": {
                "hook_coro": []
            }
        }
    },
    "almanac-main/almanac/hooks/types.py": {
        "PromoterFunction.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__raw_value": [
                    "str",
                    "list[]",
                    "dict[, ]",
                    "bool",
                    "None"
                ]
            }
        },
        "AsyncNoArgsCallback.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncNoArgsCallback.__call__": {
            "name": "__call__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncExceptionHookCallback.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__exc": [
                    "dict[, ]"
                ]
            }
        }
    },
    "almanac-main/almanac/hooks/__init__.py": {},
    "almanac-main/almanac/io/abstract_io_context.py": {
        "AbstractIoContext.info": {
            "name": "info",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractIoContext.warn": {
            "name": "warn",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractIoContext.error": {
            "name": "error",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractIoContext.raw": {
            "name": "raw",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractIoContext.ansi": {
            "name": "ansi",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/io/null_io_context.py": {
        "NullIoContext.info": {
            "name": "info",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullIoContext.warn": {
            "name": "warn",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullIoContext.error": {
            "name": "error",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullIoContext.raw": {
            "name": "raw",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullIoContext.ansi": {
            "name": "ansi",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/io/standard_console_io_context.py": {
        "StandardConsoleIoContext.info": {
            "name": "info",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardConsoleIoContext.warn": {
            "name": "warn",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardConsoleIoContext.error": {
            "name": "error",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardConsoleIoContext.raw": {
            "name": "raw",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardConsoleIoContext.ansi": {
            "name": "ansi",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/io/__init__.py": {},
    "almanac-main/almanac/pages/abstract_page.py": {
        "AbstractPage.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "AbstractPage.help_text": {
            "name": "help_text",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractPage.info_text": {
            "name": "info_text",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractPage.get_prompt": {
            "name": "get_prompt",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractPage.path": {
            "name": "path",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractPage.parent": {
            "name": "parent",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "new_parent": []
            }
        },
        "AbstractPage.children": {
            "name": "children",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractPage.__hash__": {
            "name": "__hash__",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractPage.__eq__": {
            "name": "__eq__",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool"
                ]
            }
        },
        "AbstractPage.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractPage.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/pages/directory_page.py": {
        "DirectoryPage.help_text": {
            "name": "help_text",
            "location": 8,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryPage.info_text": {
            "name": "info_text",
            "location": 14,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryPage.get_prompt": {
            "name": "get_prompt",
            "location": 19,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/pages/page_navigator.py": {
        "PageNavigator.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory_page_cls": []
            }
        },
        "PageNavigator.change_directory": {
            "name": "change_directory",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "destination": [
                    "str"
                ]
            }
        },
        "PageNavigator.forward": {
            "name": "forward",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageNavigator.back": {
            "name": "back",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageNavigator.match": {
            "name": "match",
            "location": 88,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ]
            }
        },
        "PageNavigator.explode": {
            "name": "explode",
            "location": 97,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PageNavigator.directory_page_cls": {
            "name": "directory_page_cls",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageNavigator.root_page": {
            "name": "root_page",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageNavigator.current_page": {
            "name": "current_page",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageNavigator.__iter__": {
            "name": "__iter__",
            "location": 165,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageNavigator.__len__": {
            "name": "__len__",
            "location": 171,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageNavigator.set_page": {
            "name": "set_page",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str"
                ],
                "value": [
                    "bytes",
                    "str",
                    "None"
                ],
                "allow_overwrite": [
                    "bool"
                ]
            }
        },
        "PageNavigator.__setitem__": {
            "name": "__setitem__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "PageNavigator.add_directory_page": {
            "name": "add_directory_page",
            "location": 218,
            "return": [
                "str",
                "dict[str, str]",
                "typing.Pattern",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[]",
                    "None",
                    "dict[str, pathlib.Path]",
                    "dict[str, str]"
                ]
            }
        },
        "PageNavigator.__delitem__": {
            "name": "__delitem__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PageNavigator.__getitem__": {
            "name": "__getitem__",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PageNavigator.__str__": {
            "name": "__str__",
            "location": 298,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageNavigator.__repr__": {
            "name": "__repr__",
            "location": 303,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/pages/page_path.py": {
        "PagePath.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PagePath.assert_absolute_path": {
            "name": "assert_absolute_path",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "PagePath.path": {
            "name": "path",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PagePath.segments": {
            "name": "segments",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PagePath.parent_dirs": {
            "name": "parent_dirs",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PagePath.__contains__": {
            "name": "__contains__",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[]",
                    "typing.IO"
                ]
            }
        },
        "PagePath.__eq__": {
            "name": "__eq__",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "PagePath.__hash__": {
            "name": "__hash__",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PagePath.__str__": {
            "name": "__str__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PagePath.__repr__": {
            "name": "__repr__",
            "location": 108,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/pages/__init__.py": {},
    "almanac-main/almanac/parsing/lexer.py": {
        "_resolve_command": {
            "name": "_resolve_command",
            "location": 42,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "lexer": [
                    "list[str]",
                    "str"
                ],
                "match": []
            }
        },
        "get_lexer_cls_for_app": {
            "name": "get_lexer_cls_for_app",
            "location": 62,
            "return": [
                "_Lexer"
            ],
            "arguments": {
                "app": [
                    "Exception",
                    "bool"
                ]
            }
        },
        "_with_app.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "_with_app.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "str",
                "int",
                "None",
                "complex",
                "bytes",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "int",
                    "None",
                    "complex",
                    "bytes",
                    "typing.Type"
                ]
            }
        }
    },
    "almanac-main/almanac/parsing/parsing.py": {
        "_no_transform": {
            "name": "_no_transform",
            "location": 75,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_bool_transform": {
            "name": "_bool_transform",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "_str_transform": {
            "name": "_str_transform",
            "location": 83,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_parse_type": {
            "name": "_parse_type",
            "location": 96,
            "return": [],
            "arguments": {
                "data_type": []
            }
        },
        "parse_cmd_line": {
            "name": "parse_cmd_line",
            "location": 175,
            "return": [
                "ParseStatus"
            ],
            "arguments": {
                "text": []
            }
        },
        "_raw_parse_cmd_line": {
            "name": "_raw_parse_cmd_line",
            "location": 198,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "last_incomplete_token": {
            "name": "last_incomplete_token",
            "location": 319,
            "return": [
                "IncompleteToken"
            ],
            "arguments": {
                "document": [],
                "unparsed_text": []
            }
        },
        "last_incomplete_token_from_document": {
            "name": "last_incomplete_token_from_document",
            "location": 340,
            "return": [],
            "arguments": {
                "document": []
            }
        },
        "Patterns.is_valid_identifier": {
            "name": "is_valid_identifier",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "_parse_type._parse": {
            "name": "_parse",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "loc": [],
                "toks": []
            }
        },
        "IncompleteToken.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "IncompleteToken._parse": {
            "name": "_parse",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncompleteToken.is_kw_arg": {
            "name": "is_kw_arg",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IncompleteToken.is_pos_arg": {
            "name": "is_pos_arg",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IncompleteToken.is_ambiguous_arg": {
            "name": "is_ambiguous_arg",
            "location": 284,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncompleteToken.key": {
            "name": "key",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IncompleteToken.value": {
            "name": "value",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IncompleteToken.__str__": {
            "name": "__str__",
            "location": 301,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "IncompleteToken.__repr__": {
            "name": "__repr__",
            "location": 313,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/almanac/parsing/__init__.py": {},
    "almanac-main/almanac/shortcuts/builtins.py": {},
    "almanac-main/almanac/shortcuts/exception_hooks.py": {},
    "almanac-main/almanac/shortcuts/promoters.py": {
        "promote_to_page_path": {
            "name": "promote_to_page_path",
            "location": 7,
            "return": [
                "PagePath"
            ],
            "arguments": {
                "raw_path": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "almanac-main/almanac/shortcuts/standard_app.py": {
        "_current_page_prompt_str": {
            "name": "_current_page_prompt_str",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "make_standard_app": {
            "name": "make_standard_app",
            "location": 47,
            "return": [
                "Application"
            ],
            "arguments": {}
        }
    },
    "almanac-main/almanac/shortcuts/__init__.py": {},
    "almanac-main/almanac/style/highlight.py": {
        "highlight_for_mimetype": {
            "name": "highlight_for_mimetype",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "float"
                ],
                "mimetype": [
                    "str",
                    "int",
                    "bytes",
                    "dict[str, int]",
                    "list[str]"
                ]
            }
        }
    },
    "almanac-main/almanac/style/styles.py": {},
    "almanac-main/almanac/style/__init__.py": {},
    "almanac-main/almanac/types/comparisons.py": {
        "is_matching_type": {
            "name": "is_matching_type",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "_type": [
                    "typing.Type",
                    "str",
                    "None"
                ],
                "annotation": [
                    "BaseException",
                    "Exception"
                ]
            }
        }
    },
    "almanac-main/almanac/types/definitions.py": {},
    "almanac-main/almanac/types/__init__.py": {},
    "almanac-main/almanac/utils/fuzzy_matcher.py": {
        "FuzzyMatcher.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reference": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "candidates": [
                    "tuple[typing.Union[float,float]]",
                    "tuple[]",
                    "str"
                ],
                "ratio_threshold": [
                    "float"
                ],
                "num_max_matches": [
                    "int"
                ]
            }
        },
        "FuzzyMatcher.fuzz": {
            "name": "fuzz",
            "location": 50,
            "return": [
                "FuzzResult"
            ],
            "arguments": {
                "reference": [
                    "bool",
                    "None",
                    "str",
                    "float"
                ],
                "comparison": [
                    "str",
                    "None",
                    "float",
                    "typing.Any"
                ]
            }
        },
        "FuzzyMatcher.reference": {
            "name": "reference",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuzzyMatcher.matches": {
            "name": "matches",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuzzyMatcher.results": {
            "name": "results",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FuzzyMatcher.__bool__": {
            "name": "__bool__",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuzzyMatcher.__iter__": {
            "name": "__iter__",
            "location": 84,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FuzzyMatcher.__contains__": {
            "name": "__contains__",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        }
    },
    "almanac-main/almanac/utils/iteration.py": {
        "pairwise": {
            "name": "pairwise",
            "location": 9,
            "return": [],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        }
    },
    "almanac-main/almanac/utils/strings.py": {
        "capitalized": {
            "name": "capitalized",
            "location": 8,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "abbreviated": {
            "name": "abbreviated",
            "location": 18,
            "return": [],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "len": [],
                "placeholder": [
                    "typing.Text"
                ]
            }
        }
    },
    "almanac-main/almanac/utils/__init__.py": {},
    "almanac-main/docs/conf.py": {},
    "almanac-main/examples/http_client_from_readme.py": {
        "custom_prompt": {
            "name": "custom_prompt",
            "location": 36,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "almanac-main/examples/http_client_with_partial_functions.py": {
        "custom_prompt": {
            "name": "custom_prompt",
            "location": 64,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "almanac-main/examples/__init__.py": {},
    "almanac-main/tests/test_app_configuration.py": {
        "test_prompt_str_customization.inc_prompt": {
            "name": "inc_prompt",
            "location": 20,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "test_invalid_exit_callback.sync_callback": {
            "name": "sync_callback",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_init_callback.sync_callback": {
            "name": "sync_callback",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_conflicting_type_promoters.promoter_callback": {
            "name": "promoter_callback",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "x": []
            }
        }
    },
    "almanac-main/tests/test_command_building.py": {
        "test_invalid_command_function.f": {
            "name": "f",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "almanac-main/tests/test_command_execution.py": {},
    "almanac-main/tests/test_command_hooks.py": {
        "test_invalid_command_hook_types.bad_sync_hook_one": {
            "name": "bad_sync_hook_one",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_command_hook_types.bad_sync_hook_two": {
            "name": "bad_sync_hook_two",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "almanac-main/tests/test_exception_hooks.py": {
        "test_invalid_exception_hook_type.sync_hook": {
            "name": "sync_hook",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "exc": []
            }
        }
    },
    "almanac-main/tests/test_matching_types.py": {
        "test_union": {
            "name": "test_union",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "almanac-main/tests/test_page_navigator.py": {
        "TestPageNavigator.setup_class": {
            "name": "setup_class",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "TestPageNavigator.setup_method": {
            "name": "setup_method",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPageNavigator.assert_exploded_path_equals": {
            "name": "assert_exploded_path_equals",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path_to_explode": [
                    "bool",
                    "str",
                    "typing.Pattern",
                    "typing.Callable[str, None]",
                    "set[str]"
                ],
                "expected": [
                    "bool",
                    "str",
                    "typing.Pattern",
                    "typing.Callable[str, None]",
                    "set[str]"
                ]
            }
        },
        "TestPageNavigator.assert_path_is": {
            "name": "assert_path_is",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestPageNavigator.assert_match_is": {
            "name": "assert_match_is",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestPageNavigator.test_back_and_forward": {
            "name": "test_back_and_forward",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPageNavigator.test_match": {
            "name": "test_match",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPageNavigator.test_magic_access_methods": {
            "name": "test_magic_access_methods",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPageNavigator.test_explode_empty_path": {
            "name": "test_explode_empty_path",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPageNavigator.test_explode_single_dots": {
            "name": "test_explode_single_dots",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPageNavigator.test_explode_mixed_dots": {
            "name": "test_explode_mixed_dots",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPageNavigator.test_explode_invalid_parent_references": {
            "name": "test_explode_invalid_parent_references",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/tests/test_page_path.py": {
        "TestPagePath.assert_segments": {
            "name": "assert_segments",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "tuple[str]"
                ],
                "expected": [
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "TestPagePath.assert_parent_dirs": {
            "name": "assert_parent_dirs",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "tuple[str]",
                    "bool"
                ],
                "expected": [
                    "str",
                    "tuple[str]",
                    "bool"
                ]
            }
        },
        "TestPagePath.assert_path": {
            "name": "assert_path",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "TestPagePath.test_non_absolute": {
            "name": "test_non_absolute",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPagePath.test_slash_collapsing": {
            "name": "test_slash_collapsing",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPagePath.test_path_segments": {
            "name": "test_path_segments",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPagePath.test_parent_directories": {
            "name": "test_parent_directories",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "almanac-main/tests/utils.py": {
        "get_test_app": {
            "name": "get_test_app",
            "location": 6,
            "return": [],
            "arguments": {
                "propagate_runtime_exceptions": [
                    "bool"
                ]
            }
        }
    },
    "almanac-main/tests/__init__.py": {}
}
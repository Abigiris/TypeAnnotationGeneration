{
    "alsdata-master/setup.py": {},
    "alsdata-master/alsdata/core.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 17,
            "return": [],
            "arguments": {
                "name": [
                    "typing.Text"
                ]
            }
        },
        "CompareResult.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [],
                "v1": [
                    "None",
                    "int",
                    "list[]"
                ],
                "v2": [
                    "None",
                    "int",
                    "list[]"
                ]
            }
        },
        "CompareResult.__bool__": {
            "name": "__bool__",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_rows": [
                    "None",
                    "list[str]",
                    "str",
                    "tuple[]",
                    "set[str]",
                    "typing.MutableMapping"
                ]
            }
        },
        "Schema.date": {
            "name": "date",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.table": {
            "name": "table",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.add": {
            "name": "add",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "key": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "type_": [
                    "str",
                    "typing.Type",
                    "typing.Callable[, ]"
                ],
                "parent": []
            }
        },
        "Schema.check_arr_dup": {
            "name": "check_arr_dup",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arr_idx": [
                    "list[tuple[typing.Union[int,int]]]",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "list[]"
                ],
                "item_idx": [
                    "list[set[int]]",
                    "int"
                ]
            }
        },
        "Schema._dump_table": {
            "name": "_dump_table",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.done": {
            "name": "done",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "None",
                    "str"
                ]
            }
        },
        "Schema.compare": {
            "name": "compare",
            "location": 166,
            "return": [
                "CompareResult"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "Schema.__eq__": {
            "name": "__eq__",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Collection"
                ]
            }
        },
        "Schema.__hash__": {
            "name": "__hash__",
            "location": 184,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaFactory.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaFactory.process": {
            "name": "process",
            "location": 199,
            "return": [
                "Schema"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "None",
                    "typing.Iterable[typing.Callable[, ]]"
                ]
            }
        },
        "SchemaFactory._extract_date": {
            "name": "_extract_date",
            "location": 206,
            "return": [],
            "arguments": {
                "d": [
                    "list[float]",
                    "list[str]"
                ]
            }
        },
        "SchemaFactory._process_dict": {
            "name": "_process_dict",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "float",
                    "dict[str, float]"
                ],
                "depth": [
                    "int"
                ],
                "obj": [
                    "int",
                    "str"
                ]
            }
        },
        "SchemaFactory._process_array": {
            "name": "_process_array",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "float",
                    "typing.Sequence[str]"
                ],
                "depth": [
                    "int"
                ],
                "arr": []
            }
        },
        "SchemaFactory._type_name": {
            "name": "_type_name",
            "location": 256,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "val": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, str]"
                ]
            }
        },
        "SchemaSet.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSet.add": {
            "name": "add",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int",
                    "None"
                ],
                "id_": [
                    "str",
                    "int"
                ]
            }
        },
        "SchemaSet.items": {
            "name": "items",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaSet.items_bydate": {
            "name": "items_bydate",
            "location": 304,
            "return": [
                "typing.Generator[tuple[tuple[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSet.__iter__": {
            "name": "__iter__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SchemaSet.__getitem__": {
            "name": "__getitem__",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[KT, VT]",
                    "typing.Type"
                ]
            }
        },
        "SchemaSet.__len__": {
            "name": "__len__",
            "location": 315,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alsdata-master/alsdata/report.py": {
        "Reify.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_stream": [
                    "None",
                    "str",
                    "list[dict[, ]]"
                ]
            }
        },
        "Reify.row": {
            "name": "row",
            "location": 27,
            "return": [
                "None",
                "dict[, ]",
                "tuple[object]",
                "str",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "dict[, ]",
                    "tuple[object]",
                    "str"
                ],
                "type_": [
                    "dict[, ]",
                    "tuple[object]",
                    "str",
                    "set[str]"
                ],
                "depth": [
                    "str",
                    "int",
                    "typing.Callable[..., T]",
                    "float"
                ]
            }
        },
        "Reify.done": {
            "name": "done",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reify.pop": {
            "name": "pop",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reify.push": {
            "name": "push",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "dict[str, str]",
                    "str",
                    "list[dict[, ]]",
                    "int",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]"
                ],
                "type_": [
                    "str",
                    "int"
                ]
            }
        },
        "Reify.write": {
            "name": "write",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "None"
                ]
            }
        },
        "Reify.iwrite": {
            "name": "iwrite",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "Reify.item": {
            "name": "item",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ],
                "type_": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "Reify.begin_container": {
            "name": "begin_container",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Pattern",
                    "dict[str, typing.Any]"
                ],
                "type_": [
                    "str",
                    "typing.Pattern",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Reify.end_container": {
            "name": "end_container",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str"
                ]
            }
        },
        "JsonSchemaify.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonSchemaify.section_start": {
            "name": "section_start",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonSchemaify.section_end": {
            "name": "section_end",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonSchemaify.begin_container": {
            "name": "begin_container",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Iterable[]",
                    "None"
                ],
                "type_": [
                    "str",
                    "typing.Pattern",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "JsonSchemaify.end_container": {
            "name": "end_container",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str"
                ]
            }
        },
        "JsonSchemaify.item": {
            "name": "item",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "float",
                    "str",
                    "int"
                ],
                "type_": [
                    "str",
                    "None"
                ]
            }
        },
        "Textify.item": {
            "name": "item",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "float",
                    "str",
                    "int"
                ],
                "type_": [
                    "str",
                    "bool"
                ]
            }
        },
        "Textify.begin_container": {
            "name": "begin_container",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "type_": [
                    "str",
                    "list[str]",
                    "list[T]",
                    "set[]"
                ]
            }
        },
        "Textify.end_container": {
            "name": "end_container",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str"
                ]
            }
        },
        "Report.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ofile": [
                    "float",
                    "bool"
                ]
            }
        },
        "Report.set_output_file": {
            "name": "set_output_file",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "bytes",
                    "int",
                    "tuple[]",
                    "list[]"
                ]
            }
        },
        "Report.write_schema": {
            "name": "write_schema",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "Report.process": {
            "name": "process",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [],
                "i": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "list[str]",
                    "list[int]"
                ]
            }
        },
        "Report.process_children": {
            "name": "process_children",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type",
                    "list[dict[str, typing.Any]]"
                ],
                "i": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type",
                    "list[dict[str, typing.Any]]"
                ],
                "container": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type",
                    "list[dict[str, typing.Any]]"
                ],
                "children": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "JsonSchemaReport.write_schema": {
            "name": "write_schema",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "list[]",
                    "list[int]",
                    "list[float]",
                    "list[list[int]]"
                ]
            }
        },
        "JsonSchemaReport.process_children": {
            "name": "process_children",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "typing.Callable[, ]",
                    "bool",
                    "dict[str, str]",
                    "None",
                    "set[str]"
                ],
                "i": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type",
                    "list[dict[str, typing.Any]]"
                ],
                "container": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type",
                    "list[dict[str, typing.Any]]"
                ],
                "children": []
            }
        },
        "TextReport.write_schema": {
            "name": "write_schema",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "list[]",
                    "list[int]",
                    "list[float]",
                    "list[list[int]]"
                ]
            }
        },
        "TextReport.process_children": {
            "name": "process_children",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "typing.Callable[, ]",
                    "bool",
                    "dict[str, str]",
                    "None",
                    "set[str]"
                ],
                "i": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type",
                    "list[dict[str, typing.Any]]"
                ],
                "container": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type",
                    "list[dict[str, typing.Any]]"
                ],
                "children": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "alsdata-master/alsdata/__init__.py": {},
    "alsdata-master/tests/test_core.py": {
        "setup": {
            "name": "setup",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "teardown": {
            "name": "teardown",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_same_schema": {
            "name": "test_same_schema",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_array_dedup": {
            "name": "test_array_dedup",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_array": {
            "name": "test_simple_array",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_format_schema": {
            "name": "_format_schema",
            "location": 105,
            "return": [
                "str",
                "typing.Type",
                "bytes",
                "tuple[typing.Union[list[typing.Any],list[typing.Any],list[typing.Any],list[typing.Any],list[typing.Any],list[typing.Any],float]]"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "bytearray",
                    "int",
                    "typing.IO",
                    "typing.Callable[bytes, bytes]"
                ],
                "output": [
                    "bool"
                ]
            }
        }
    },
    "alsdata-master/tests/__init__.py": {}
}
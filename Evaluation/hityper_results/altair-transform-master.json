{
    "altair-transform-master/setup.py": {
        "read": {
            "name": "read",
            "location": 12,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "encoding": [
                    "typing.Text"
                ]
            }
        },
        "get_install_requirements": {
            "name": "get_install_requirements",
            "location": 18,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "version": {
            "name": "version",
            "location": 23,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "find_packages": {
            "name": "find_packages",
            "location": 42,
            "return": [
                "list[]"
            ],
            "arguments": {
                "top": []
            }
        }
    },
    "altair-transform-master/altair_transform/conftest.py": {
        "driver": {
            "name": "driver",
            "location": 6,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "altair-transform-master/altair_transform/core.py": {
        "apply": {
            "name": "apply",
            "location": 15,
            "return": [
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "df": [
                    "dict[str, typing.Any]"
                ],
                "transform": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "inplace": [
                    "bool"
                ]
            }
        },
        "extract_data": {
            "name": "extract_data",
            "location": 55,
            "return": [],
            "arguments": {
                "chart": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "apply_encoding_transforms": [
                    "bool"
                ]
            }
        },
        "transform_chart": {
            "name": "transform_chart",
            "location": 94,
            "return": [],
            "arguments": {
                "chart": [
                    "str"
                ],
                "extract_encoding_transforms": [
                    "bool"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/driver.py": {
        "_serialize": {
            "name": "_serialize",
            "location": 40,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "_load": {
            "name": "_load",
            "location": 45,
            "return": [],
            "arguments": {
                "serialized": [
                    "str",
                    "typing.TextIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "_extract_data": {
            "name": "_extract_data",
            "location": 50,
            "return": [],
            "arguments": {
                "spec": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "apply": {
            "name": "apply",
            "location": 102,
            "return": [],
            "arguments": {
                "df": [
                    "dict[str, typing.Any]",
                    "float",
                    "str"
                ],
                "transform": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "get_tz_code": {
            "name": "get_tz_code",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "get_tz_offset": {
            "name": "get_tz_offset",
            "location": 153,
            "return": [],
            "arguments": {
                "tz": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/extract.py": {
        "extract_transform": {
            "name": "extract_transform",
            "location": 13,
            "return": [],
            "arguments": {
                "chart": []
            }
        },
        "_encoding_to_transform": {
            "name": "_encoding_to_transform",
            "location": 69,
            "return": [],
            "arguments": {
                "encoding": []
            }
        }
    },
    "altair-transform-master/altair_transform/vegaexpr.py": {
        "eval_vegajs": {
            "name": "eval_vegajs",
            "location": 21,
            "return": [],
            "arguments": {
                "expression": [],
                "datum": [
                    "None"
                ]
            }
        },
        "vectorize": {
            "name": "vectorize",
            "location": 28,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "isArray": {
            "name": "isArray",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "isBoolean": {
            "name": "isBoolean",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "isDate": {
            "name": "isDate",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "isDefined": {
            "name": "isDefined",
            "location": 86,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "isNumber": {
            "name": "isNumber",
            "location": 96,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "isObject": {
            "name": "isObject",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "isRegExp": {
            "name": "isRegExp",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "isString": {
            "name": "isString",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "isValid": {
            "name": "isValid",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "toBoolean": {
            "name": "toBoolean",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": []
            }
        },
        "toDate": {
            "name": "toDate",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            }
        },
        "toNumber": {
            "name": "toNumber",
            "location": 160,
            "return": [
                "None",
                "float"
            ],
            "arguments": {
                "value": []
            }
        },
        "toString": {
            "name": "toString",
            "location": 171,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "value": []
            }
        },
        "now": {
            "name": "now",
            "location": 184,
            "return": [
                "float"
            ],
            "arguments": {}
        },
        "datetime": {
            "name": "datetime",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "date": {
            "name": "date",
            "location": 241,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "day": {
            "name": "day",
            "location": 249,
            "return": [
                "int"
            ],
            "arguments": {
                "datetime": []
            }
        },
        "year": {
            "name": "year",
            "location": 257,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "quarter": {
            "name": "quarter",
            "location": 263,
            "return": [
                "int"
            ],
            "arguments": {
                "datetime": []
            }
        },
        "month": {
            "name": "month",
            "location": 272,
            "return": [
                "int"
            ],
            "arguments": {
                "datetime": []
            }
        },
        "hours": {
            "name": "hours",
            "location": 280,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "minutes": {
            "name": "minutes",
            "location": 288,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "seconds": {
            "name": "seconds",
            "location": 296,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "milliseconds": {
            "name": "milliseconds",
            "location": 304,
            "return": [
                "int"
            ],
            "arguments": {
                "datetime": []
            }
        },
        "time": {
            "name": "time",
            "location": 313,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "timezoneoffset": {
            "name": "timezoneoffset",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "datetime": []
            }
        },
        "utc": {
            "name": "utc",
            "location": 325,
            "return": [],
            "arguments": {
                "year": [],
                "month": [
                    "int"
                ],
                "day": [
                    "int"
                ],
                "hour": [
                    "int"
                ],
                "min": [
                    "int"
                ],
                "sec": [
                    "int"
                ],
                "millisec": [
                    "int"
                ]
            }
        },
        "utcdate": {
            "name": "utcdate",
            "location": 354,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "utcday": {
            "name": "utcday",
            "location": 360,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "utcyear": {
            "name": "utcyear",
            "location": 366,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "utcquarter": {
            "name": "utcquarter",
            "location": 372,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "utcmonth": {
            "name": "utcmonth",
            "location": 378,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "utchours": {
            "name": "utchours",
            "location": 384,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "utcminutes": {
            "name": "utcminutes",
            "location": 390,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "utcseconds": {
            "name": "utcseconds",
            "location": 396,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "utcmilliseconds": {
            "name": "utcmilliseconds",
            "location": 401,
            "return": [],
            "arguments": {
                "datetime": []
            }
        },
        "dayFormat": {
            "name": "dayFormat",
            "location": 407,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "day": []
            }
        },
        "dayAbbrevFormat": {
            "name": "dayAbbrevFormat",
            "location": 425,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "day": []
            }
        },
        "format": {
            "name": "format",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "specifier": []
            }
        },
        "monthFormat": {
            "name": "monthFormat",
            "location": 441,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "month": []
            }
        },
        "monthAbbrevFormat": {
            "name": "monthAbbrevFormat",
            "location": 461,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "month": []
            }
        },
        "timeFormat": {
            "name": "timeFormat",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "specifier": []
            }
        },
        "timeParse": {
            "name": "timeParse",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {
                "string": [],
                "specifier": []
            }
        },
        "utcFormat": {
            "name": "utcFormat",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "specifier": []
            }
        },
        "utcParse": {
            "name": "utcParse",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [],
                "specifier": []
            }
        },
        "indexof": {
            "name": "indexof",
            "location": 506,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [],
                "value": []
            }
        },
        "lastindexof": {
            "name": "lastindexof",
            "location": 522,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [],
                "value": []
            }
        },
        "length": {
            "name": "length",
            "location": 538,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "lower": {
            "name": "lower",
            "location": 544,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "pad": {
            "name": "pad",
            "location": 550,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [],
                "length": [],
                "character": [
                    "typing.Text"
                ],
                "align": [
                    "typing.Text"
                ]
            }
        },
        "parseFloat": {
            "name": "parseFloat",
            "location": 573,
            "return": [
                "float",
                "None"
            ],
            "arguments": {
                "string": []
            }
        },
        "parseInt": {
            "name": "parseInt",
            "location": 591,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "string": [],
                "base": []
            }
        },
        "replace": {
            "name": "replace",
            "location": 610,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [],
                "pattern": [],
                "replacement": []
            }
        },
        "slice_": {
            "name": "slice_",
            "location": 624,
            "return": [],
            "arguments": {
                "x": [],
                "start": [],
                "end": [
                    "None"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 639,
            "return": [],
            "arguments": {
                "s": [],
                "sep": [],
                "limit": [
                    "int"
                ]
            }
        },
        "substring": {
            "name": "substring",
            "location": 649,
            "return": [],
            "arguments": {
                "string": [],
                "start": [],
                "end": [
                    "None"
                ]
            }
        },
        "trim": {
            "name": "trim",
            "location": 659,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "truncate": {
            "name": "truncate",
            "location": 665,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "string": [],
                "length": [],
                "align": [
                    "typing.Text"
                ],
                "ellipsis": []
            }
        },
        "upper": {
            "name": "upper",
            "location": 689,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "merge": {
            "name": "merge",
            "location": 696,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "sampleNormal": {
            "name": "sampleNormal",
            "location": 706,
            "return": [],
            "arguments": {
                "mean": [
                    "int"
                ],
                "stdev": [
                    "int"
                ]
            }
        },
        "cumulativeNormal": {
            "name": "cumulativeNormal",
            "location": 718,
            "return": [],
            "arguments": {
                "value": [],
                "mean": [
                    "int"
                ],
                "stdev": [
                    "int"
                ]
            }
        },
        "densityNormal": {
            "name": "densityNormal",
            "location": 731,
            "return": [],
            "arguments": {
                "value": [],
                "mean": [
                    "int"
                ],
                "stdev": [
                    "int"
                ]
            }
        },
        "quantileNormal": {
            "name": "quantileNormal",
            "location": 743,
            "return": [],
            "arguments": {
                "probability": [],
                "mean": [
                    "int"
                ],
                "stdev": [
                    "int"
                ]
            }
        },
        "sampleLogNormal": {
            "name": "sampleLogNormal",
            "location": 756,
            "return": [],
            "arguments": {
                "mean": [
                    "int"
                ],
                "stdev": [
                    "int"
                ]
            }
        },
        "cumulativeLogNormal": {
            "name": "cumulativeLogNormal",
            "location": 768,
            "return": [],
            "arguments": {
                "value": [],
                "mean": [
                    "int"
                ],
                "stdev": [
                    "int"
                ]
            }
        },
        "densityLogNormal": {
            "name": "densityLogNormal",
            "location": 781,
            "return": [],
            "arguments": {
                "value": [],
                "mean": [
                    "int"
                ],
                "stdev": [
                    "int"
                ]
            }
        },
        "quantileLogNormal": {
            "name": "quantileLogNormal",
            "location": 794,
            "return": [],
            "arguments": {
                "probability": [],
                "mean": [
                    "int"
                ],
                "stdev": [
                    "int"
                ]
            }
        },
        "sampleUniform": {
            "name": "sampleUniform",
            "location": 807,
            "return": [],
            "arguments": {
                "min": [
                    "int"
                ],
                "max": [
                    "int"
                ]
            }
        },
        "cumulativeUniform": {
            "name": "cumulativeUniform",
            "location": 819,
            "return": [],
            "arguments": {
                "value": [],
                "min": [
                    "int"
                ],
                "max": [
                    "int"
                ]
            }
        },
        "densityUniform": {
            "name": "densityUniform",
            "location": 832,
            "return": [],
            "arguments": {
                "value": [],
                "min": [
                    "int"
                ],
                "max": [
                    "int"
                ]
            }
        },
        "quantileUniform": {
            "name": "quantileUniform",
            "location": 845,
            "return": [],
            "arguments": {
                "probability": [],
                "min": [
                    "int"
                ],
                "max": [
                    "int"
                ]
            }
        },
        "extent": {
            "name": "extent",
            "location": 859,
            "return": [
                "list[]"
            ],
            "arguments": {
                "array": []
            }
        },
        "clampRange": {
            "name": "clampRange",
            "location": 869,
            "return": [
                "list[]"
            ],
            "arguments": {
                "range_": [],
                "min_": [],
                "max_": []
            }
        },
        "inrange": {
            "name": "inrange",
            "location": 890,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [],
                "range_": []
            }
        },
        "join": {
            "name": "join",
            "location": 899,
            "return": [
                "str"
            ],
            "arguments": {
                "array": [],
                "separator": [
                    "typing.Text"
                ]
            }
        },
        "lerp": {
            "name": "lerp",
            "location": 908,
            "return": [],
            "arguments": {
                "array": [],
                "fraction": []
            }
        },
        "peek": {
            "name": "peek",
            "location": 918,
            "return": [],
            "arguments": {
                "array": []
            }
        },
        "reverse": {
            "name": "reverse",
            "location": 928,
            "return": [],
            "arguments": {
                "array": []
            }
        },
        "sequence": {
            "name": "sequence",
            "location": 948,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "span": {
            "name": "span",
            "location": 972,
            "return": [],
            "arguments": {
                "array": []
            }
        },
        "regexp": {
            "name": "regexp",
            "location": 981,
            "return": [
                "JSRegex"
            ],
            "arguments": {
                "pattern": [],
                "flags": [
                    "typing.Text"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 989,
            "return": [],
            "arguments": {
                "regexp": [],
                "string": [
                    "typing.Text"
                ]
            }
        },
        "vectorize.wrapper": {
            "name": "wrapper",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "vectorize.wrapper._get": {
            "name": "_get",
            "location": 41,
            "return": [],
            "arguments": {
                "x": [],
                "i": []
            }
        }
    },
    "altair-transform-master/altair_transform/__init__.py": {},
    "altair-transform-master/altair_transform/tests/test_core.py": {
        "data": {
            "name": "data",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "chart": {
            "name": "chart",
            "location": 23,
            "return": [],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "test_extract_data": {
            "name": "test_extract_data",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "list[float]",
                    "list['PlotInfo']",
                    "list[]"
                ],
                "chart": [
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_transform_chart": {
            "name": "test_transform_chart",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "typing.Callable[bytes, bytes]"
                ],
                "chart": [
                    "dict[, ]"
                ]
            }
        },
        "test_transform_chart_with_aggregate": {
            "name": "test_transform_chart_with_aggregate",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "altair-transform-master/altair_transform/tests/test_driver.py": {
        "test_extract_data_source": {
            "name": "test_extract_data_source",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "str"
                ]
            }
        },
        "test_driver_apply": {
            "name": "test_driver_apply",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": []
            }
        },
        "test_utc_tz_offset": {
            "name": "test_utc_tz_offset",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "int"
                ]
            }
        },
        "test_tz_code": {
            "name": "test_tz_code",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": []
            }
        }
    },
    "altair-transform-master/altair_transform/tests/test_examples.py": {
        "readme": {
            "name": "readme",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_readme_snippets": {
            "name": "test_readme_snippets",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "readme": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/tests/test_extract.py": {
        "test_extract_simple_aggregate": {
            "name": "test_extract_simple_aggregate",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "encoding": [
                    "str"
                ],
                "expected_encoding": [
                    "int",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "expected_transform": [
                    "int",
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/tests/test_vegaexpr.py": {
        "test_vegajs_expressions": {
            "name": "test_vegajs_expressions",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "expression": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.IO"
                ],
                "expected": [
                    "str",
                    "list[typing.Union[str,int]]",
                    "dict[str, typing.Any]",
                    "list[]",
                    "typing.Callable[, ]",
                    "bool",
                    "list[str]"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/tests/__init__.py": {},
    "altair-transform-master/altair_transform/transform/aggregate.py": {
        "visit_aggregate": {
            "name": "visit_aggregate",
            "location": 8,
            "return": [],
            "arguments": {
                "transform": [],
                "df": []
            }
        },
        "confidence_interval": {
            "name": "confidence_interval",
            "location": 54,
            "return": [],
            "arguments": {
                "x": [],
                "level": []
            }
        },
        "visit_aggregate.op": {
            "name": "op",
            "location": 26,
            "return": [],
            "arguments": {
                "col": [],
                "df": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/bin.py": {
        "_cut": {
            "name": "_cut",
            "location": 12,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "series": [
                    "bool",
                    "str",
                    "list[int]",
                    "typing.Callable[, ]"
                ],
                "edges": []
            }
        },
        "visit_bin": {
            "name": "visit_bin",
            "location": 26,
            "return": [],
            "arguments": {
                "transform": [],
                "df": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/calculate.py": {
        "visit_calculate": {
            "name": "visit_calculate",
            "location": 8,
            "return": [],
            "arguments": {
                "transform": [],
                "df": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/filter.py": {
        "visit_filter": {
            "name": "visit_filter",
            "location": 12,
            "return": [],
            "arguments": {
                "transform": [],
                "df": [
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "get_column": {
            "name": "get_column",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "df": [
                    "typing.Type",
                    "int",
                    "str"
                ],
                "predicate": []
            }
        },
        "eval_predicate": {
            "name": "eval_predicate",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "predicate": [
                    "str",
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "df": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "eval_dict": {
            "name": "eval_dict",
            "location": 30,
            "return": [],
            "arguments": {
                "predicate": [
                    "str",
                    "bool",
                    "list[dict[, ]]",
                    "typing.Mapping",
                    "dict[int, dict[str, typing.Any]]",
                    "dict[, ]"
                ],
                "df": [
                    "str",
                    "int"
                ]
            }
        },
        "eval_string": {
            "name": "eval_string",
            "location": 36,
            "return": [],
            "arguments": {
                "predicate": [
                    "int",
                    "list[str]",
                    "str"
                ],
                "df": []
            }
        },
        "eval_field_equal": {
            "name": "eval_field_equal",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "predicate": [
                    "float",
                    "typing.Generator[]",
                    "str"
                ],
                "df": [
                    "float",
                    "typing.Generator[]",
                    "str"
                ]
            }
        },
        "eval_field_range": {
            "name": "eval_field_range",
            "location": 46,
            "return": [],
            "arguments": {
                "predicate": [
                    "list[int]",
                    "typing.Callable[str, str]",
                    "typing.Type"
                ],
                "df": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "eval_field_oneof": {
            "name": "eval_field_oneof",
            "location": 57,
            "return": [],
            "arguments": {
                "predicate": [
                    "str"
                ],
                "df": [
                    "int",
                    "list[int]",
                    "str",
                    "list[str]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "eval_field_lt": {
            "name": "eval_field_lt",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "predicate": [
                    "float",
                    "typing.Generator[]",
                    "str"
                ],
                "df": [
                    "float",
                    "typing.Generator[]",
                    "str"
                ]
            }
        },
        "eval_field_lte": {
            "name": "eval_field_lte",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "predicate": [
                    "float",
                    "typing.Generator[]",
                    "str"
                ],
                "df": [
                    "float",
                    "typing.Generator[]",
                    "str"
                ]
            }
        },
        "eval_field_gt": {
            "name": "eval_field_gt",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "predicate": [
                    "float",
                    "typing.Generator[]",
                    "str"
                ],
                "df": [
                    "float",
                    "typing.Generator[]",
                    "str"
                ]
            }
        },
        "eval_field_gte": {
            "name": "eval_field_gte",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "predicate": [
                    "float",
                    "typing.Generator[]",
                    "str"
                ],
                "df": [
                    "float",
                    "typing.Generator[]",
                    "str"
                ]
            }
        },
        "eval_logical_not": {
            "name": "eval_logical_not",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "predicate": [
                    "str"
                ],
                "df": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "eval_logical_and": {
            "name": "eval_logical_and",
            "location": 88,
            "return": [],
            "arguments": {
                "predicate": [
                    "str"
                ],
                "df": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "eval_logical_or": {
            "name": "eval_logical_or",
            "location": 93,
            "return": [],
            "arguments": {
                "predicate": [
                    "str"
                ],
                "df": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "eval_value": {
            "name": "eval_value",
            "location": 98,
            "return": [
                "str",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "None",
                "typing.Callable[, ]",
                "dict[, ]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "None",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "eval_datetime": {
            "name": "eval_datetime",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "eval_schemabase": {
            "name": "eval_schemabase",
            "location": 109,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/flatten.py": {
        "visit_flatten": {
            "name": "visit_flatten",
            "location": 7,
            "return": [],
            "arguments": {
                "transform": [],
                "df": []
            }
        },
        "visit_flatten.flatten_row": {
            "name": "flatten_row",
            "location": 24,
            "return": [],
            "arguments": {
                "row": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/fold.py": {
        "visit_fold": {
            "name": "visit_fold",
            "location": 7,
            "return": [],
            "arguments": {
                "transform": [],
                "df": [
                    "str",
                    "typing.Iterator"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/transform/impute.py": {
        "visit_impute": {
            "name": "visit_impute",
            "location": 8,
            "return": [
                "bool",
                "str",
                "tuple[typing.Union[typing.Literal,int,typing.Literal,int]]",
                "tuple[str]",
                "dict[str, str]",
                "list[str]"
            ],
            "arguments": {
                "transform": [],
                "df": [
                    "dict[, ]"
                ]
            }
        },
        "visit_impute._impute": {
            "name": "_impute",
            "location": 37,
            "return": [],
            "arguments": {
                "group": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/joinaggregate.py": {
        "visit_joinaggregate": {
            "name": "visit_joinaggregate",
            "location": 8,
            "return": [],
            "arguments": {
                "transform": [],
                "df": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/lookup.py": {
        "visit_lookup": {
            "name": "visit_lookup",
            "location": 10,
            "return": [],
            "arguments": {
                "transform": [],
                "df": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/pivot.py": {
        "visit_pivot": {
            "name": "visit_pivot",
            "location": 8,
            "return": [
                "list[str]",
                "dict[, ]",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "set[]",
                "str"
            ],
            "arguments": {
                "transform": [],
                "df": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/quantile.py": {
        "visit_quantile": {
            "name": "visit_quantile",
            "location": 8,
            "return": [],
            "arguments": {
                "transform": [],
                "df": [
                    "int",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "visit_quantile.qq": {
            "name": "qq",
            "location": 18,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/regression.py": {
        "_ensure_length": {
            "name": "_ensure_length",
            "location": 12,
            "return": [],
            "arguments": {
                "coef": [],
                "k": [
                    "int"
                ]
            }
        },
        "visit_regression": {
            "name": "visit_regression",
            "location": 17,
            "return": [],
            "arguments": {
                "transform": [],
                "df": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reg": [
                    "float",
                    "int",
                    "str",
                    "None"
                ],
                "on": [
                    "int",
                    "float"
                ],
                "extent": [
                    "float",
                    "int",
                    "str",
                    "None"
                ],
                "as_": [
                    "int",
                    "float"
                ],
                "order": [
                    "float",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Model.params": {
            "name": "params",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "df": [
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "df": [
                    "int",
                    "str"
                ]
            }
        },
        "Model._grid": {
            "name": "_grid",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "bool",
                    "tuple[]"
                ]
            }
        },
        "Model._extent_from_data": {
            "name": "_extent_from_data",
            "location": 124,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "float",
                    "typing.Callable[..., float]",
                    "int"
                ]
            }
        },
        "Model._fit": {
            "name": "_fit",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "Model._params": {
            "name": "_params",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._predict": {
            "name": "_predict",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "ExpModel._fit": {
            "name": "_fit",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "ExpModel._predict": {
            "name": "_predict",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str"
                ]
            }
        },
        "ExpModel._params": {
            "name": "_params",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinearModel._grid": {
            "name": "_grid",
            "location": 167,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "str",
                    "bool",
                    "tuple[]"
                ]
            }
        },
        "LinearModel._fit": {
            "name": "_fit",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "LinearModel._predict": {
            "name": "_predict",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "LinearModel._params": {
            "name": "_params",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogModel._fit": {
            "name": "_fit",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "LogModel._predict": {
            "name": "_predict",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "None"
                ]
            }
        },
        "LogModel._params": {
            "name": "_params",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PolyModel._grid": {
            "name": "_grid",
            "location": 206,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "df": [
                    "bytes"
                ]
            }
        },
        "PolyModel._fit": {
            "name": "_fit",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "PolyModel._predict": {
            "name": "_predict",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "PolyModel._params": {
            "name": "_params",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PowModel._fit": {
            "name": "_fit",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "PowModel._predict": {
            "name": "_predict",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "bytes"
                ]
            }
        },
        "PowModel._params": {
            "name": "_params",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuadModel._fit": {
            "name": "_fit",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "QuadModel._predict": {
            "name": "_predict",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "QuadModel._params": {
            "name": "_params",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/sample.py": {
        "visit_sample": {
            "name": "visit_sample",
            "location": 8,
            "return": [],
            "arguments": {
                "transform": [],
                "df": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/timeunit.py": {
        "visit_timeunit": {
            "name": "visit_timeunit",
            "location": 8,
            "return": [],
            "arguments": {
                "transform": [],
                "df": [
                    "dict[, ]"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/transform/vega_utils.py": {
        "calculate_bins": {
            "name": "calculate_bins",
            "location": 14,
            "return": [],
            "arguments": {
                "extent": [
                    "bool",
                    "str",
                    "frozenset"
                ],
                "anchor": [
                    "None",
                    "int"
                ],
                "base": [
                    "int"
                ],
                "divide": [
                    "list[int]"
                ],
                "maxbins": [
                    "int"
                ],
                "minstep": [
                    "int"
                ],
                "nice": [
                    "bool"
                ],
                "step": [
                    "None",
                    "bool",
                    "str",
                    "frozenset"
                ],
                "steps": [
                    "None",
                    "bool",
                    "str",
                    "frozenset"
                ],
                "span": [
                    "None",
                    "bool",
                    "str",
                    "frozenset"
                ]
            }
        },
        "_bin": {
            "name": "_bin",
            "location": 89,
            "return": [],
            "arguments": {
                "extent": [
                    "float",
                    "str",
                    "typing.Type",
                    "typing.BinaryIO",
                    "bool"
                ],
                "base": [
                    "int"
                ],
                "divide": [
                    "list[int]"
                ],
                "maxbins": [
                    "int"
                ],
                "minstep": [
                    "int"
                ],
                "nice": [
                    "bool"
                ],
                "step": [
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "list[\"Block\"]",
                    "str",
                    "complex"
                ],
                "steps": [
                    "None",
                    "list[numpy.ndarray]",
                    "typing.Any",
                    "list[\"Block\"]",
                    "dict[str, object]"
                ],
                "span": [
                    "None",
                    "float",
                    "typing.Collection",
                    "int"
                ]
            }
        },
        "adaptive_sample": {
            "name": "adaptive_sample",
            "location": 147,
            "return": [
                "tuple[typing.Union[float,int,tuple[],tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal]],list[str],list[int],dict[str, int],list[]]]"
            ],
            "arguments": {
                "f": [
                    "int"
                ],
                "extent": [
                    "tuple[typing.Union[float,float]]",
                    "int"
                ],
                "min_steps": [
                    "int"
                ],
                "max_steps": [
                    "int"
                ]
            }
        },
        "_angleDelta": {
            "name": "_angleDelta",
            "location": 212,
            "return": [],
            "arguments": {
                "p": [
                    "tuple[typing.Union[float,float]]"
                ],
                "q": [],
                "r": [
                    "str"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/transform/visitor.py": {
        "visit": {
            "name": "visit",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [],
                "df": [
                    "dict[, ]"
                ]
            }
        },
        "visit_list": {
            "name": "visit_list",
            "location": 14,
            "return": [],
            "arguments": {
                "transform": [
                    "list[]"
                ],
                "df": []
            }
        },
        "visit_dict": {
            "name": "visit_dict",
            "location": 21,
            "return": [],
            "arguments": {
                "transform": [
                    "typing.Type"
                ],
                "df": [
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/transform/window.py": {
        "visit_window": {
            "name": "visit_window",
            "location": 10,
            "return": [],
            "arguments": {
                "transform": [],
                "df": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/__init__.py": {},
    "altair-transform-master/altair_transform/transform/tests/test_aggregate.py": {
        "data": {
            "name": "data",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_aggregate_transform": {
            "name": "test_aggregate_transform",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "groupby": [
                    "bool",
                    "str",
                    "typing.Mapping"
                ],
                "op": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "test_aggregate_against_js": {
            "name": "test_aggregate_against_js",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [],
                "data": [
                    "bytes"
                ],
                "groupby": [
                    "list[str]",
                    "None",
                    "bool",
                    "bytes",
                    "float",
                    "tuple[int]",
                    "dict[str, typing.Any]"
                ],
                "op": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_aggregate_transform.op": {
            "name": "op",
            "location": 63,
            "return": [],
            "arguments": {
                "col": [],
                "df": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/tests/test_bin.py": {
        "data": {
            "name": "data",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_bin_transform_simple": {
            "name": "test_bin_transform_simple",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "test_bin_transform_maxbins": {
            "name": "test_bin_transform_maxbins",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "nice": [
                    "str",
                    "float"
                ],
                "maxbins": [
                    "str",
                    "int"
                ]
            }
        },
        "test_bin_transform_step": {
            "name": "test_bin_transform_step",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "nice": [
                    "str",
                    "float"
                ],
                "step": [
                    "str",
                    "float"
                ]
            }
        },
        "test_bin_transform_steps": {
            "name": "test_bin_transform_steps",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "nice": [
                    "str",
                    "float"
                ],
                "steps": [
                    "list[int]"
                ]
            }
        },
        "test_bin_against_js": {
            "name": "test_bin_against_js",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "data": [],
                "transform": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/tests/test_filter.py": {
        "data": {
            "name": "data",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_filter_transform": {
            "name": "test_filter_transform",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "int"
                ],
                "filter": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bytes"
                ],
                "calc": [
                    "typing.Callable[pandas.DataFrame, pandas.DataFrame]",
                    "dict[, ]",
                    "str",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "test_filter_against_js": {
            "name": "test_filter_against_js",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "data": [],
                "filter": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "_": [
                    "typing.Callable[pandas.DataFrame, pandas.DataFrame]",
                    "str",
                    "list[]",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/transform/tests/test_flatten.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_flatten_transform": {
            "name": "test_flatten_transform",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_flatten_transform_with_as": {
            "name": "test_flatten_transform_with_as",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "test_flatten_against_js": {
            "name": "test_flatten_against_js",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "data": [],
                "transform": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/tests/test_fold.py": {
        "data": {
            "name": "data",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_fold_transform": {
            "name": "test_fold_transform",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "float",
                    "tuple[typing.Union[int,int,bytearray]]",
                    "list[]"
                ],
                "as_": [
                    "bytes",
                    "int"
                ]
            }
        },
        "test_fold_against_js": {
            "name": "test_fold_against_js",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [],
                "data": [
                    "bytes"
                ],
                "fold": [
                    "list[str]",
                    "int",
                    "str",
                    "None",
                    "set[]",
                    "dict[str, typing.Any]"
                ],
                "as_": [
                    "str",
                    "None",
                    "float",
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]",
                    "typing.Callable[..., typing.Any]",
                    "list[str]",
                    "int"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/transform/tests/test_impute.py": {
        "test_impute_transform_no_groupby": {
            "name": "test_impute_transform_no_groupby",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_impute_transform_with_groupby": {
            "name": "test_impute_transform_with_groupby",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "altair-transform-master/altair_transform/transform/tests/test_lookup.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "lookup_data": {
            "name": "lookup_data",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_lookup_transform": {
            "name": "test_lookup_transform",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "lookup_key": [
                    "list[dict[, ]]",
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "test_lookup_transform_default": {
            "name": "test_lookup_transform_default",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "int",
                    "Exception",
                    "None",
                    "str",
                    "dict[, ]",
                    "bytes"
                ],
                "lookup_key": [
                    "dict[, ]"
                ],
                "default": [
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "test_lookup_against_js": {
            "name": "test_lookup_against_js",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [],
                "data": [
                    "str"
                ],
                "lookup_data": [
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "key": [
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "typing.Mapping",
                    "None",
                    "dict[, ]"
                ],
                "default": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/transform/tests/test_pivot.py": {
        "data": {
            "name": "data",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_pivot_transform": {
            "name": "test_pivot_transform",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "test_pivot_transform_groupby": {
            "name": "test_pivot_transform_groupby",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "list[]",
                    "typing.Sequence[T]",
                    "dict[, ]"
                ]
            }
        },
        "test_pivot_transform_limit": {
            "name": "test_pivot_transform_limit",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "test_pivot_against_js": {
            "name": "test_pivot_against_js",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [],
                "data": [],
                "groupby": [
                    "bool",
                    "typing.IO",
                    "None"
                ],
                "limit": [
                    "bool",
                    "typing.IO",
                    "None"
                ],
                "op": [
                    "bool",
                    "typing.IO",
                    "None"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/transform/tests/test_quantile.py": {
        "data": {
            "name": "data",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_quantile_transform": {
            "name": "test_quantile_transform",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "int"
                ]
            }
        },
        "test_quantile_transform_groupby": {
            "name": "test_quantile_transform_groupby",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "list[int]",
                    "str"
                ]
            }
        },
        "test_quantile_against_js": {
            "name": "test_quantile_against_js",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [],
                "data": [
                    "bool"
                ],
                "step": [
                    "float",
                    "None",
                    "bool",
                    "str",
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]"
                ],
                "groupby": [
                    "float",
                    "None",
                    "bool",
                    "str",
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]"
                ],
                "probs": [
                    "float",
                    "None",
                    "bool",
                    "str",
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]"
                ],
                "as_": [
                    "str",
                    "None",
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]",
                    "bool",
                    "list[str]"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/transform/tests/test_regression.py": {
        "data": {
            "name": "data",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_linear": {
            "name": "test_linear",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linear_groupby": {
            "name": "test_linear_groupby",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_linear_params": {
            "name": "test_linear_params",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "method": [
                    "bytes",
                    "str",
                    "None",
                    "list[str]",
                    "int"
                ],
                "coef": [
                    "list[int]",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_poly_vs_linear": {
            "name": "test_poly_vs_linear",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "groupby": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "method": [
                    "str"
                ],
                "order": [
                    "int",
                    "str"
                ]
            }
        },
        "test_regression_against_js": {
            "name": "test_regression_against_js",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "str",
                    "typing.IO",
                    "None"
                ],
                "data": [],
                "method": [
                    "str",
                    "typing.Iterable[str]"
                ],
                "params": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "groupby": [
                    "list[str]",
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/transform/tests/test_timeunit.py": {
        "timezone": {
            "name": "timezone",
            "location": 36,
            "return": [],
            "arguments": {
                "driver": []
            }
        },
        "data": {
            "name": "data",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_timeunit_transform": {
            "name": "test_timeunit_transform",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "int",
                    "None",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "timeUnit": [
                    "str",
                    "bool",
                    "list[list[typing.Any]]"
                ],
                "fmt": [
                    "str",
                    "int",
                    "tuple[str]"
                ]
            }
        },
        "test_timeunit_against_js": {
            "name": "test_timeunit_against_js",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [
                    "str",
                    "typing.IO",
                    "bool"
                ],
                "data": [
                    "list[str]"
                ],
                "timezone": [
                    "str",
                    "int"
                ],
                "timeUnit": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/transform/tests/test_transform.py": {
        "data": {
            "name": "data",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_calculate_transform": {
            "name": "test_calculate_transform",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]"
                ]
            }
        },
        "test_joinaggregate_transform": {
            "name": "test_joinaggregate_transform",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "list[str]"
                ],
                "groupby": [
                    "str",
                    "None"
                ],
                "op": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "test_quantile_values": {
            "name": "test_quantile_values",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sample_transform": {
            "name": "test_sample_transform",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "N": [
                    "int",
                    "tuple[int]",
                    "typing.Callable[, ]",
                    "bytes"
                ]
            }
        },
        "test_multiple_transforms": {
            "name": "test_multiple_transforms",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "test_joinaggregate_transform.validate": {
            "name": "validate",
            "location": 78,
            "return": [],
            "arguments": {
                "group": []
            }
        }
    },
    "altair-transform-master/altair_transform/transform/tests/test_window.py": {
        "data": {
            "name": "data",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_window_transform_basic": {
            "name": "test_window_transform_basic",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "test_window_transform_sorted": {
            "name": "test_window_transform_sorted",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "test_window_transform_grouped": {
            "name": "test_window_transform_grouped",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "test_window_against_js": {
            "name": "test_window_against_js",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "driver": [],
                "data": [
                    "dict[str, typing.Any]"
                ],
                "groupby": [
                    "str",
                    "None",
                    "list[str]",
                    "float"
                ],
                "sort": [
                    "str",
                    "None",
                    "list[str]",
                    "float"
                ],
                "frame": [
                    "str",
                    "None",
                    "list[str]",
                    "float"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/transform/tests/__init__.py": {},
    "altair-transform-master/altair_transform/utils/ast.py": {},
    "altair-transform-master/altair_transform/utils/data.py": {
        "to_dataframe": {
            "name": "to_dataframe",
            "location": 11,
            "return": [
                "pd_@_DataFrame"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "context": [
                    "None",
                    "dict[, ]",
                    "bytes",
                    "int",
                    "str",
                    "typing.Any",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/utils/timeunit.py": {
        "compute_timeunit": {
            "name": "compute_timeunit",
            "location": 12,
            "return": [],
            "arguments": {
                "date": [
                    "str"
                ],
                "timeunit": [
                    "str"
                ]
            }
        },
        "_parse_timeunit_string": {
            "name": "_parse_timeunit_string",
            "location": 59,
            "return": [
                "set[]"
            ],
            "arguments": {
                "timeunit": [
                    "str"
                ]
            }
        },
        "_compute_timeunit": {
            "name": "_compute_timeunit",
            "location": 67,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ],
                "date": [
                    "str",
                    "None"
                ]
            }
        },
        "compute_timeunit.dt": {
            "name": "dt",
            "location": 28,
            "return": [],
            "arguments": {
                "date": []
            }
        },
        "_compute_timeunit.quarter": {
            "name": "quarter",
            "location": 79,
            "return": [
                "int"
            ],
            "arguments": {
                "month": []
            }
        }
    },
    "altair-transform-master/altair_transform/utils/_evaljs.py": {
        "evaljs": {
            "name": "evaljs",
            "location": 57,
            "return": [],
            "arguments": {
                "expression": [
                    "str",
                    "bool"
                ],
                "namespace": [
                    "None",
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "visit": {
            "name": "visit",
            "location": 66,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "obj": [
                    "dict[, ]"
                ],
                "namespace": [
                    "dict[, ]"
                ]
            }
        },
        "_visit_expr": {
            "name": "_visit_expr",
            "location": 71,
            "return": [],
            "arguments": {
                "obj": [],
                "namespace": [
                    "dict[, ]"
                ]
            }
        },
        "_visit_binop": {
            "name": "_visit_binop",
            "location": 76,
            "return": [],
            "arguments": {
                "obj": [],
                "namespace": [
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "_visit_unop": {
            "name": "_visit_unop",
            "location": 84,
            "return": [],
            "arguments": {
                "obj": [],
                "namespace": [
                    "dict[, ]"
                ]
            }
        },
        "_visit_ternop": {
            "name": "_visit_ternop",
            "location": 92,
            "return": [],
            "arguments": {
                "obj": [],
                "namespace": [
                    "dict[, ]"
                ]
            }
        },
        "_visit_number": {
            "name": "_visit_number",
            "location": 102,
            "return": [],
            "arguments": {
                "obj": [
                    "int",
                    "str"
                ],
                "namespace": [
                    "dict[, ]"
                ]
            }
        },
        "_visit_string": {
            "name": "_visit_string",
            "location": 107,
            "return": [],
            "arguments": {
                "obj": [],
                "namespace": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "_visit_regex": {
            "name": "_visit_regex",
            "location": 112,
            "return": [
                "JSRegex"
            ],
            "arguments": {
                "obj": [],
                "namespace": [
                    "dict[, ]"
                ]
            }
        },
        "_visit_global": {
            "name": "_visit_global",
            "location": 117,
            "return": [],
            "arguments": {
                "obj": [],
                "namespace": [
                    "dict[, ]"
                ]
            }
        },
        "_visit_name": {
            "name": "_visit_name",
            "location": 124,
            "return": [],
            "arguments": {
                "obj": [],
                "namespace": [
                    "dict[, ]",
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "_visit_list": {
            "name": "_visit_list",
            "location": 129,
            "return": [
                "list[]"
            ],
            "arguments": {
                "obj": [
                    "dict[, ]"
                ],
                "namespace": [
                    "dict[, ]"
                ]
            }
        },
        "_visit_object": {
            "name": "_visit_object",
            "location": 134,
            "return": [],
            "arguments": {
                "obj": [
                    "dict[, ]"
                ],
                "namespace": [
                    "dict[, ]"
                ]
            }
        },
        "_visit_attr": {
            "name": "_visit_attr",
            "location": 145,
            "return": [],
            "arguments": {
                "obj": [
                    "str"
                ],
                "namespace": [
                    "str"
                ]
            }
        },
        "_visit_item": {
            "name": "_visit_item",
            "location": 155,
            "return": [
                "str",
                "_UndefinedType"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "dict[, ]"
                ],
                "namespace": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "_visit_func": {
            "name": "_visit_func",
            "location": 167,
            "return": [],
            "arguments": {
                "obj": [
                    "dict[, ]"
                ],
                "namespace": [
                    "dict[, ]"
                ]
            }
        },
        "int_inputs": {
            "name": "int_inputs",
            "location": 173,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "zerofill_rshift": {
            "name": "zerofill_rshift",
            "location": 182,
            "return": [
                "int"
            ],
            "arguments": {
                "lhs": [
                    "int"
                ],
                "rhs": [
                    "int"
                ]
            }
        },
        "_UndefinedType.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSRegex.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "str",
                    "typing.Iterator",
                    "list[str]"
                ],
                "flags": [
                    "typing.Text"
                ]
            }
        },
        "JSRegex.__eq__": {
            "name": "__eq__",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "typing.Iterable[]",
                    "None"
                ]
            }
        },
        "JSRegex._reflags": {
            "name": "_reflags",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSRegex.test": {
            "name": "test",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "JSRegex.replace": {
            "name": "replace",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ],
                "replacement": [
                    "str"
                ]
            }
        },
        "_visit_object._visit": {
            "name": "_visit",
            "location": 135,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "entry": []
            }
        },
        "int_inputs.wrapper": {
            "name": "wrapper",
            "location": 175,
            "return": [
                "float"
            ],
            "arguments": {}
        }
    },
    "altair-transform-master/altair_transform/utils/_parser.py": {
        "ParserBase.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserBase.parse": {
            "name": "parse",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [
                    "str",
                    "list[tuple[int]]",
                    "bool"
                ]
            }
        },
        "Parser.t_BINARY": {
            "name": "t_BINARY",
            "location": 136,
            "return": [
                "typing.Callable[None, bool]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "typing.Callable[None, bool]"
                ]
            }
        },
        "Parser.t_OCTAL": {
            "name": "t_OCTAL",
            "location": 141,
            "return": [
                "typing.Callable[None, bool]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "typing.Callable[None, bool]"
                ]
            }
        },
        "Parser.t_HEX": {
            "name": "t_HEX",
            "location": 146,
            "return": [
                "typing.Callable[None, bool]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "typing.Callable[None, bool]"
                ]
            }
        },
        "Parser.t_FLOAT": {
            "name": "t_FLOAT",
            "location": 151,
            "return": [
                "float",
                "tuple[typing.Union[int,int]]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Parser.t_STRING": {
            "name": "t_STRING",
            "location": 156,
            "return": [
                "bytes",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "bytes",
                    "str",
                    "float"
                ]
            }
        },
        "Parser.t_REGEX": {
            "name": "t_REGEX",
            "location": 162,
            "return": [
                "float",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float",
                    "typing.Type"
                ]
            }
        },
        "Parser.t_newline": {
            "name": "t_newline",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Parser.t_error": {
            "name": "t_error",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "str"
                ]
            }
        },
        "Parser.p_expression_binop": {
            "name": "p_expression_binop",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "list[]"
                ]
            }
        },
        "Parser.p_expression_ternary": {
            "name": "p_expression_ternary",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "bytes"
                ]
            }
        },
        "Parser.p_expression_unaryop": {
            "name": "p_expression_unaryop",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "bytes"
                ]
            }
        },
        "Parser.p_expression_atom": {
            "name": "p_expression_atom",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Parser.p_atom": {
            "name": "p_atom",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Parser.p_number": {
            "name": "p_number",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str"
                ]
            }
        },
        "Parser.p_string": {
            "name": "p_string",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Parser.p_regex": {
            "name": "p_regex",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str"
                ]
            }
        },
        "Parser.p_global": {
            "name": "p_global",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str"
                ]
            }
        },
        "Parser.p_name": {
            "name": "p_name",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str"
                ]
            }
        },
        "Parser.p_list": {
            "name": "p_list",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Parser.p_object": {
            "name": "p_object",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Parser.p_objectarglist": {
            "name": "p_objectarglist",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Parser.p_objectarg": {
            "name": "p_objectarg",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Parser.p_objectkey": {
            "name": "p_objectkey",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Parser.p_group": {
            "name": "p_group",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Parser.p_attraccess": {
            "name": "p_attraccess",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str"
                ]
            }
        },
        "Parser.p_indexing": {
            "name": "p_indexing",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str"
                ]
            }
        },
        "Parser.p_functioncall": {
            "name": "p_functioncall",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Parser.p_arglist": {
            "name": "p_arglist",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Parser.p_error": {
            "name": "p_error",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/utils/_parser_Parser_parsetab.py": {},
    "altair-transform-master/altair_transform/utils/__init__.py": {},
    "altair-transform-master/altair_transform/utils/tests/test_data.py": {
        "df": {
            "name": "df",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "csv_data": {
            "name": "csv_data",
            "location": 16,
            "return": [
                "typing.Generator[dict[typing.Text, ]]"
            ],
            "arguments": {
                "df": [
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "str"
                ]
            }
        },
        "json_data": {
            "name": "json_data",
            "location": 23,
            "return": [
                "typing.Generator[dict[typing.Text, ]]"
            ],
            "arguments": {
                "df": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]",
                    "str"
                ]
            }
        },
        "inline_data": {
            "name": "inline_data",
            "location": 30,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "df": []
            }
        },
        "named_data": {
            "name": "named_data",
            "location": 35,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "typing.Iterable[str]",
                    "typing.Iterable[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "sequence_data": {
            "name": "sequence_data",
            "location": 40,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[int,typing.Text]]]"
            ],
            "arguments": {
                "df": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "chart": {
            "name": "chart",
            "location": 45,
            "return": [],
            "arguments": {
                "named_data": [
                    "str"
                ],
                "inline_data": [
                    "str"
                ]
            }
        },
        "test_csv_to_dataframe": {
            "name": "test_csv_to_dataframe",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "None",
                    "bytes"
                ],
                "csv_data": [
                    "int",
                    "bytes",
                    "str"
                ],
                "data_type": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "test_json_to_dataframe": {
            "name": "test_json_to_dataframe",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "None",
                    "bytes"
                ],
                "json_data": [
                    "int",
                    "bytes",
                    "str"
                ],
                "data_type": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "test_inline_to_dataframe": {
            "name": "test_inline_to_dataframe",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "None",
                    "bytes"
                ],
                "inline_data": [
                    "int",
                    "bytes",
                    "str"
                ],
                "data_type": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "test_named_to_dataframe": {
            "name": "test_named_to_dataframe",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "list[str]",
                    "typing.TextIO",
                    "tuple[typing.Union[int,int]]"
                ],
                "chart": [
                    "str",
                    "list[str]",
                    "typing.TextIO",
                    "tuple[typing.Union[int,int]]"
                ],
                "named_data": [
                    "str"
                ],
                "data_type": [
                    "str"
                ]
            }
        },
        "test_sequence_to_dataframe": {
            "name": "test_sequence_to_dataframe",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [
                    "str",
                    "None",
                    "bytes"
                ],
                "sequence_data": [
                    "int",
                    "bytes",
                    "str"
                ],
                "data_type": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/utils/tests/test_evaljs.py": {
        "names": {
            "name": "names",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_expressions": {
            "name": "test_expressions",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "expression": [
                    "str",
                    "bool"
                ],
                "names": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_jsonly_expressions": {
            "name": "test_jsonly_expressions",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "expression": [
                    "str",
                    "int"
                ],
                "output": [
                    "str",
                    "int"
                ],
                "names": [
                    "str",
                    "int"
                ]
            }
        },
        "test_string_vs_ast": {
            "name": "test_string_vs_ast",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "altair-transform-master/altair_transform/utils/tests/test_parser.py": {
        "parser": {
            "name": "parser",
            "location": 9,
            "return": [
                "Parser"
            ],
            "arguments": {}
        },
        "test_bad_expressions": {
            "name": "test_bad_expressions",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_expression": [
                    "str",
                    "typing.IO",
                    "list[str]"
                ],
                "parser": []
            }
        },
        "test_expressions": {
            "name": "test_expressions",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "expression": [
                    "str",
                    "None",
                    "bool"
                ],
                "parser": []
            }
        },
        "test_jsonly_expressions": {
            "name": "test_jsonly_expressions",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "expression": [
                    "str",
                    "dict[str, str]",
                    "int"
                ],
                "output": [
                    "str",
                    "dict[str, str]",
                    "list[str]"
                ],
                "parser": []
            }
        }
    },
    "altair-transform-master/altair_transform/utils/tests/test_timeunit.py": {
        "dates": {
            "name": "dates",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_timeunit_input_types": {
            "name": "test_timeunit_input_types",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "dates": [],
                "timezone": [
                    "int",
                    "str",
                    "typing.Sequence[str]"
                ],
                "unit": [
                    "int",
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "test_all_timeunits": {
            "name": "test_all_timeunits",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "dates": [],
                "timezone": [
                    "str",
                    "int"
                ],
                "timeunit_name": [
                    "str"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/utils/tests/_testcases.py": {
        "extract": {
            "name": "extract",
            "location": 8,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "expressions": [
                    "str"
                ]
            }
        },
        "Bunch.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bunch.__getitem__": {
            "name": "__getitem__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "list[str]"
                ]
            }
        }
    },
    "altair-transform-master/altair_transform/utils/tests/__init__.py": {}
}
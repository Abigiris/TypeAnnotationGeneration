{
    "announcer-master/run.py": {
        "start": {
            "name": "start",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "announcer-master/announcer/service.py": {
        "AnnouncerService.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "posts_addr": [
                    "str",
                    "bool",
                    "None"
                ],
                "accounts_addr": [
                    "str",
                    "bool",
                    "dict[typing.Any, tuple[typing.Union[typing.Any,typing.Any]]]",
                    "None"
                ],
                "email_username": [
                    "int",
                    "str"
                ],
                "email_password": [
                    "int",
                    "str"
                ],
                "email_host": [
                    "int",
                    "str"
                ],
                "email_port": [
                    "int",
                    "str"
                ],
                "view_posts_base_url": [
                    "typing.Text"
                ]
            }
        },
        "AnnouncerService._generate_emails": {
            "name": "_generate_emails",
            "location": 65,
            "return": [
                "list[BroadcastEmail]"
            ],
            "arguments": {
                "self": [],
                "recipients": [
                    "list[str]"
                ],
                "new_posts": [
                    "list[announcer.api.posts.Post]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "announcer-master/announcer/test_service.py": {
        "async_return": {
            "name": "async_return",
            "location": 22,
            "return": [],
            "arguments": {
                "result": [
                    "dict[, ]",
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "typing.Type"
                ]
            }
        },
        "async_exception": {
            "name": "async_exception",
            "location": 28,
            "return": [],
            "arguments": {
                "exception": [
                    "Exception",
                    "list[dict[, ]]",
                    "typing.Callable[, ]",
                    "BaseException",
                    "None"
                ]
            }
        },
        "TestAnnouncerService.generate_service": {
            "name": "generate_service",
            "location": 94,
            "return": [
                "AnnouncerService"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnnouncerService.test_init": {
            "name": "test_init",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockAccountsApi": [],
                "MockEmailBroadcaster": [],
                "MockPostsApi": []
            }
        }
    },
    "announcer-master/announcer/__init__.py": {},
    "announcer-master/announcer/api/accounts.py": {
        "AccountsApi.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "float"
                ]
            }
        },
        "AccountsApi._decode_user": {
            "name": "_decode_user",
            "location": 33,
            "return": [
                "User"
            ],
            "arguments": {
                "self": [],
                "user_data": []
            }
        }
    },
    "announcer-master/announcer/api/posts.py": {
        "PostsApi.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "float"
                ]
            }
        },
        "PostsApi._decode_post": {
            "name": "_decode_post",
            "location": 42,
            "return": [
                "Post"
            ],
            "arguments": {
                "self": [],
                "post_data": []
            }
        }
    },
    "announcer-master/announcer/api/test_accounts.py": {
        "TestAccountsApi.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsApi.test_initialisation": {
            "name": "test_initialisation",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "announcer-master/announcer/api/test_posts.py": {
        "TestPostsApi.test_initialisation": {
            "name": "test_initialisation",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "announcer-master/announcer/api/__init__.py": {},
    "announcer-master/announcer/broadcasters/email.py": {
        "BroadcastEmail.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recipients": [],
                "subject": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "None"
                ],
                "body": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "BroadcastEmail.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "EmailBroadcaster.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "bytes",
                    "int"
                ],
                "password": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "EmailBroadcaster._generate_message": {
            "name": "_generate_message",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "recipient": [
                    "str",
                    "int"
                ],
                "subject": [
                    "str",
                    "int"
                ],
                "body": [
                    "str",
                    "typing.Match",
                    "int",
                    "None",
                    "typing.Iterable[]"
                ]
            }
        }
    },
    "announcer-master/announcer/broadcasters/test_email.py": {
        "TestEmailBroadcaster.setup_smtp_mocks": {
            "name": "setup_smtp_mocks",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailBroadcaster.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailBroadcaster.test_init": {
            "name": "test_init",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "MockSMTP": []
            }
        },
        "TestEmailBroadcaster.generate_message": {
            "name": "generate_message",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "recipient": [
                    "str",
                    "int"
                ],
                "subject": [
                    "str",
                    "int"
                ],
                "body": [
                    "str",
                    "typing.Match",
                    "int",
                    "None",
                    "typing.Iterable[]"
                ]
            }
        },
        "TestBroadcastEmail.test_equality": {
            "name": "test_equality",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBroadcastEmail.test_equality_same_recipients": {
            "name": "test_equality_same_recipients",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBroadcastEmail.test_empty_recipients": {
            "name": "test_empty_recipients",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "announcer-master/announcer/broadcasters/__init__.py": {}
}
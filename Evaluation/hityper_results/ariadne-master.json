{
    "ariadne-master/setup.py": {},
    "ariadne-master/ariadne/asgi.py": {
        "WebSocketConnectionError.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "None",
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GraphQL.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "typing.Mapping",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "GraphQL.handle_not_allowed_method": {
            "name": "handle_not_allowed_method",
            "location": 272,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "set[str]",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        }
    },
    "ariadne-master/ariadne/constants.py": {},
    "ariadne-master/ariadne/enums.py": {
        "set_default_enum_values_on_schema": {
            "name": "set_default_enum_values_on_schema",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "set_default_enum_values": {
            "name": "set_default_enum_values",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "graphql_type": [
                    "typing.Type",
                    "str",
                    "None"
                ]
            }
        },
        "validate_schema_enum_values": {
            "name": "validate_schema_enum_values",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "is_invalid_enum_value": {
            "name": "is_invalid_enum_value",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "typing.Any"
                ]
            }
        },
        "find_enum_values_in_schema": {
            "name": "find_enum_values_in_schema",
            "location": 128,
            "return": [
                "typing.Generator[typing.Union[dict[str, tuple[typing.Union[str,int]]],str]]"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "typing.Any",
                    "None",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "enum_values_in_types": {
            "name": "enum_values_in_types",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "type_": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "enum_values_in_object_type": {
            "name": "enum_values_in_object_type",
            "location": 147,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "typing.Any",
                    "None"
                ],
                "field_name": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "enum_values_in_input_type": {
            "name": "enum_values_in_input_type",
            "location": 156,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "type_": [
                    "str"
                ],
                "field_name": [
                    "str"
                ]
            }
        },
        "enum_values_in_field_args": {
            "name": "enum_values_in_field_args",
            "location": 163,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "field_name": [
                    "str",
                    "int",
                    "None",
                    "list[int]"
                ],
                "field": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "_get_field_with_keys": {
            "name": "_get_field_with_keys",
            "location": 178,
            "return": [
                "typing.Generator[tuple[typing.Union[str,None,bool,None]]]",
                "typing.Generator[tuple[typing.Union[str,None,bool]]]"
            ],
            "arguments": {
                "field_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "fields": [
                    "str"
                ]
            }
        },
        "get_enum_keys_from_ast": {
            "name": "get_enum_keys_from_ast",
            "location": 191,
            "return": [
                "list[tuple[list[]]]"
            ],
            "arguments": {
                "ast_node": [
                    "str",
                    "bytes",
                    "typing.Callable[, ]",
                    "typing.Match"
                ]
            }
        },
        "get_value_from_mapping_value": {
            "name": "get_value_from_mapping_value",
            "location": 210,
            "return": [],
            "arguments": {
                "mapping": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "key_list": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "set_leaf_value_in_mapping": {
            "name": "set_leaf_value_in_mapping",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "mapping": [
                    "str",
                    "None",
                    "bytes",
                    "int"
                ],
                "key_list": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "None",
                    "bytes",
                    "int"
                ]
            }
        },
        "track_type_for_nested": {
            "name": "track_type_for_nested",
            "location": 220,
            "return": [
                "str",
                "list[]",
                "dict[, ]",
                "typing.Type"
            ],
            "arguments": {
                "arg": [
                    "list[str]",
                    "str",
                    "None",
                    "bool"
                ],
                "key_list": [
                    "str",
                    "list[tuple[typing.Union[bytes,bytes]]]",
                    "list[str]"
                ]
            }
        },
        "resolve_null_type": {
            "name": "resolve_null_type",
            "location": 231,
            "return": [
                "typing.Callable[..., None]",
                "int",
                "None"
            ],
            "arguments": {
                "type_": [
                    "typing.Callable[..., None]",
                    "int",
                    "None"
                ]
            }
        },
        "EnumType.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "values": [
                    "str",
                    "bool"
                ]
            }
        },
        "EnumType.bind_to_schema": {
            "name": "bind_to_schema",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Exception"
                ]
            }
        },
        "EnumType.bind_to_default_values": {
            "name": "bind_to_default_values",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "float",
                    "dict[, ]",
                    "tuple[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "EnumType.validate_graphql_type": {
            "name": "validate_graphql_type",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graphql_type": [
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "ariadne-master/ariadne/exceptions.py": {
        "HttpError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "GraphQLFileSyntaxError.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema_file": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "GraphQLFileSyntaxError.format_message": {
            "name": "format_message",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "schema_file": [
                    "str",
                    "typing.IO",
                    "typing.TextIO",
                    "collections.abc.AsyncGenerator",
                    "collections.abc.Coroutine",
                    "bool"
                ],
                "message": [
                    "str",
                    "typing.IO",
                    "typing.TextIO",
                    "collections.abc.AsyncGenerator",
                    "collections.abc.Coroutine",
                    "bool"
                ]
            }
        },
        "GraphQLFileSyntaxError.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "ariadne-master/ariadne/executable_schema.py": {
        "make_executable_schema": {
            "name": "make_executable_schema",
            "location": 19,
            "return": [
                "float",
                "dict[, ]"
            ],
            "arguments": {
                "type_defs": [
                    "str",
                    "typing.Callable[[], mypy.types.Instance]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "join_type_defs": {
            "name": "join_type_defs",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "type_defs": [
                    "list[str]",
                    "list[T]"
                ]
            }
        },
        "flatten_bindables": {
            "name": "flatten_bindables",
            "location": 50,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "repair_default_enum_values": {
            "name": "repair_default_enum_values",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Generator[]",
                    "dict[str, typing.Callable[[], None]]",
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "bindables": [
                    "tuple[int]",
                    "list[dict[str, str]]"
                ]
            }
        }
    },
    "ariadne-master/ariadne/extensions.py": {
        "ExtensionManager.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extensions": [
                    "str"
                ],
                "context": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "ExtensionManager.as_middleware_manager": {
            "name": "as_middleware_manager",
            "location": 26,
            "return": [
                "MiddlewareManager"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "typing.IO",
                    "str"
                ]
            }
        },
        "ExtensionManager.request": {
            "name": "request",
            "location": 34,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtensionManager.has_errors": {
            "name": "has_errors",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "str",
                    "dict[, ]",
                    "Exception",
                    "list[graphql.GraphQLError]",
                    "bool"
                ]
            }
        },
        "ExtensionManager.format": {
            "name": "format",
            "location": 47,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ariadne-master/ariadne/file_uploads.py": {
        "combine_multipart_data": {
            "name": "combine_multipart_data",
            "location": 15,
            "return": [
                "list[str]",
                "list[dict[str, typing.Any]]",
                "set[str]",
                "str",
                "typing.Match",
                "None",
                "list[]",
                "dict[, ]"
            ],
            "arguments": {
                "operations": [
                    "dict[, ]",
                    "list[]",
                    "list[str]",
                    "list[dict[str, typing.Any]]",
                    "set[str]",
                    "str",
                    "typing.Match",
                    "None"
                ],
                "files_map": [
                    "dict[str, typing.Any]",
                    "str",
                    "float",
                    "set[str]"
                ],
                "files": [
                    "str",
                    "bool"
                ]
            }
        },
        "inverse_files_map": {
            "name": "inverse_files_map",
            "location": 38,
            "return": [
                "dict[, str]"
            ],
            "arguments": {
                "files_map": [
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "files": [
                    "str"
                ]
            }
        },
        "add_files_to_variables": {
            "name": "add_files_to_variables",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "variables": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ],
                "path": [
                    "str",
                    "list[]"
                ],
                "files_map": [
                    "dict[, ]"
                ]
            }
        },
        "serialize_upload": {
            "name": "serialize_upload",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_upload_literal": {
            "name": "parse_upload_literal",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "parse_upload_value": {
            "name": "parse_upload_value",
            "location": 104,
            "return": [
                "str",
                "bool",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "None"
                ]
            }
        },
        "FilesDict.__getitem__": {
            "name": "__getitem__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "ariadne-master/ariadne/format_error.py": {
        "format_error": {
            "name": "format_error",
            "location": 11,
            "return": [
                "str",
                "dict[str, str]",
                "dict[str, tuple[typing.Union[str,str]]]",
                "dict[, ]"
            ],
            "arguments": {
                "error": [
                    "str"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "get_error_extension": {
            "name": "get_error_extension",
            "location": 20,
            "return": [
                "None",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "error": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Match",
                    "typing.Type",
                    "typing.Mapping"
                ]
            }
        },
        "get_formatted_error_traceback": {
            "name": "get_formatted_error_traceback",
            "location": 32,
            "return": [
                "list[]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Exception",
                    "BaseException"
                ]
            }
        },
        "get_formatted_error_context": {
            "name": "get_formatted_error_context",
            "location": 39,
            "return": [
                "None",
                "dict[, str]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "list[Exception]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        }
    },
    "ariadne-master/ariadne/graphql.py": {
        "graphql_sync": {
            "name": "graphql_sync",
            "location": 128,
            "return": [],
            "arguments": {
                "schema": [],
                "data": []
            }
        },
        "handle_query_result": {
            "name": "handle_query_result",
            "location": 284,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "handle_graphql_errors": {
            "name": "handle_graphql_errors",
            "location": 300,
            "return": [],
            "arguments": {
                "errors": []
            }
        },
        "parse_query": {
            "name": "parse_query",
            "location": 317,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "add_extensions_to_response": {
            "name": "add_extensions_to_response",
            "location": 326,
            "return": [],
            "arguments": {
                "extension_manager": [],
                "response": []
            }
        },
        "validate_query": {
            "name": "validate_query",
            "location": 335,
            "return": [],
            "arguments": {
                "schema": [],
                "document_ast": [],
                "rules": [],
                "max_errors": [],
                "type_info": [],
                "enable_introspection": []
            }
        },
        "validate_data": {
            "name": "validate_data",
            "location": 363,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "validate_query_body": {
            "name": "validate_query_body",
            "location": 371,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "validate_variables": {
            "name": "validate_variables",
            "location": 376,
            "return": [],
            "arguments": {
                "variables": []
            }
        },
        "validate_operation_name": {
            "name": "validate_operation_name",
            "location": 381,
            "return": [],
            "arguments": {
                "operation_name": []
            }
        }
    },
    "ariadne-master/ariadne/interfaces.py": {
        "InterfaceType.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ],
                "type_resolver": [
                    "None",
                    "str"
                ]
            }
        },
        "InterfaceType.set_type_resolver": {
            "name": "set_type_resolver",
            "location": 21,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "type_resolver": [
                    "str",
                    "None"
                ]
            }
        },
        "InterfaceType.bind_to_schema": {
            "name": "bind_to_schema",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "typing.Callable[..., None]",
                    "int"
                ]
            }
        },
        "InterfaceType.validate_graphql_type": {
            "name": "validate_graphql_type",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graphql_type": [
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "ariadne-master/ariadne/load_schema.py": {
        "load_schema_from_path": {
            "name": "load_schema_from_path",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "walk_graphql_files": {
            "name": "walk_graphql_files",
            "location": 17,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "read_graphql_file": {
            "name": "read_graphql_file",
            "location": 25,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "ariadne-master/ariadne/logger.py": {
        "log_error": {
            "name": "log_error",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [
                    "str",
                    "list[]"
                ],
                "logger_name": [
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        }
    },
    "ariadne-master/ariadne/objects.py": {
        "ObjectType.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "ObjectType.field": {
            "name": "field",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "ObjectType.create_register_resolver": {
            "name": "create_register_resolver",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ObjectType.set_field": {
            "name": "set_field",
            "location": 30,
            "return": [
                "str",
                "list[str]",
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "resolver": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "ObjectType.set_alias": {
            "name": "set_alias",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "set[str]"
                ],
                "to": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "ObjectType.bind_to_schema": {
            "name": "bind_to_schema",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Exception"
                ]
            }
        },
        "ObjectType.validate_graphql_type": {
            "name": "validate_graphql_type",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graphql_type": [
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ObjectType.bind_resolvers_to_graphql_type": {
            "name": "bind_resolvers_to_graphql_type",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graphql_type": [
                    "str",
                    "int",
                    "None"
                ],
                "replace_existing": [
                    "bool"
                ]
            }
        },
        "QueryType.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutationType.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectType.create_register_resolver.register_resolver": {
            "name": "register_resolver",
            "location": 24,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "ariadne-master/ariadne/resolvers.py": {
        "resolve_parent_field": {
            "name": "resolve_parent_field",
            "location": 44,
            "return": [],
            "arguments": {
                "parent": [],
                "field_name": []
            }
        },
        "resolve_to": {
            "name": "resolve_to",
            "location": 50,
            "return": [],
            "arguments": {
                "field_name": []
            }
        },
        "is_default_resolver": {
            "name": "is_default_resolver",
            "location": 62,
            "return": [],
            "arguments": {
                "resolver": []
            }
        },
        "FallbackResolversSetter.bind_to_schema": {
            "name": "bind_to_schema",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "FallbackResolversSetter.add_resolvers_to_object_fields": {
            "name": "add_resolvers_to_object_fields",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "type_object": []
            }
        },
        "FallbackResolversSetter.add_resolver_to_field": {
            "name": "add_resolver_to_field",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "_": [],
                "field_object": []
            }
        },
        "SnakeCaseFallbackResolversSetter.add_resolver_to_field": {
            "name": "add_resolver_to_field",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [],
                "field_object": []
            }
        },
        "resolve_to.resolver": {
            "name": "resolver",
            "location": 51,
            "return": [],
            "arguments": {
                "parent": [],
                "info": []
            }
        }
    },
    "ariadne-master/ariadne/scalars.py": {
        "ScalarType.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "typing.Sequence[typing.Any]",
                    "bool"
                ]
            }
        },
        "ScalarType.set_serializer": {
            "name": "set_serializer",
            "location": 33,
            "return": [
                "str",
                "typing.Callable[..., None]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "typing.Callable[..., None]",
                    "bool"
                ]
            }
        },
        "ScalarType.set_value_parser": {
            "name": "set_value_parser",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str"
                ]
            }
        },
        "ScalarType.set_literal_parser": {
            "name": "set_literal_parser",
            "location": 41,
            "return": [
                "typing.IO",
                "list[str]",
                "str",
                "bytes",
                "set[str]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.IO",
                    "list[str]",
                    "str",
                    "bytes",
                    "set[str]"
                ]
            }
        },
        "ScalarType.bind_to_schema": {
            "name": "bind_to_schema",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Exception"
                ]
            }
        },
        "ScalarType.validate_graphql_type": {
            "name": "validate_graphql_type",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graphql_type": [
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "ariadne-master/ariadne/schema_visitor.py": {
        "each": {
            "name": "each",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "tuple_or_dict": [
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Union[float,str]]"
                ],
                "callback": [
                    "dict[, ]",
                    "bytes",
                    "str",
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "update_each_key": {
            "name": "update_each_key",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "object_map": [
                    "str",
                    "bool",
                    "typing.Mapping"
                ],
                "callback": [
                    "typing.Callable[, ]",
                    "str",
                    "typing.OrderedDict"
                ]
            }
        },
        "visit_schema": {
            "name": "visit_schema",
            "location": 162,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "schema": [
                    "dict[, ]"
                ],
                "visitor_selector": [
                    "dict[, ]"
                ]
            }
        },
        "directive_location_to_visitor_method_name": {
            "name": "directive_location_to_visitor_method_name",
            "location": 312,
            "return": [],
            "arguments": {
                "loc": [
                    "typing.Type",
                    "int"
                ]
            }
        },
        "heal_schema": {
            "name": "heal_schema",
            "location": 464,
            "return": [
                "int",
                "typing.Callable[, ]",
                "str"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "SchemaVisitor.implements_visitor_method": {
            "name": "implements_visitor_method",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "method_name": [
                    "str"
                ]
            }
        },
        "SchemaVisitor.visit_schema": {
            "name": "visit_schema",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "dict[, ]"
                ]
            }
        },
        "SchemaVisitor.visit_scalar": {
            "name": "visit_scalar",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scalar": [
                    "dict[, ]"
                ]
            }
        },
        "SchemaVisitor.visit_object": {
            "name": "visit_object",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_": [
                    "dict[, ]"
                ]
            }
        },
        "SchemaVisitor.visit_field_definition": {
            "name": "visit_field_definition",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "object_type": []
            }
        },
        "SchemaVisitor.visit_argument_definition": {
            "name": "visit_argument_definition",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argument": [],
                "field": [],
                "object_type": []
            }
        },
        "SchemaVisitor.visit_interface": {
            "name": "visit_interface",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "dict[, ]"
                ]
            }
        },
        "SchemaVisitor.visit_union": {
            "name": "visit_union",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "dict[, ]"
                ]
            }
        },
        "SchemaVisitor.visit_enum": {
            "name": "visit_enum",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "typing.Type"
                ]
            }
        },
        "SchemaVisitor.visit_enum_value": {
            "name": "visit_enum_value",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "enum_type": []
            }
        },
        "SchemaVisitor.visit_input_object": {
            "name": "visit_input_object",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_": [
                    "dict[, ]"
                ]
            }
        },
        "SchemaVisitor.visit_input_field_definition": {
            "name": "visit_input_field_definition",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [],
                "object_type": []
            }
        },
        "visit_schema.call_method": {
            "name": "call_method",
            "location": 173,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "method_name": [],
                "type_": []
            }
        },
        "visit_schema.visit": {
            "name": "visit",
            "location": 203,
            "return": [
                "GraphQLSchema"
            ],
            "arguments": {
                "type_": []
            }
        },
        "visit_schema.visit_fields": {
            "name": "visit_fields",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "type_": []
            }
        },
        "SchemaDirectiveVisitor.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, str]"
                ],
                "args": [],
                "visited_type": [
                    "typing.Type",
                    "None"
                ],
                "schema": [
                    "bool",
                    "set[str]",
                    "float",
                    "str",
                    "list[str]",
                    "None"
                ],
                "context": [
                    "bool",
                    "set[str]",
                    "float",
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "SchemaDirectiveVisitor.get_directive_declaration": {
            "name": "get_directive_declaration",
            "location": 328,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Hashable",
                    "None"
                ],
                "directive_name": [
                    "str",
                    "bool"
                ],
                "schema": []
            }
        },
        "SchemaDirectiveVisitor.get_declared_directives": {
            "name": "get_declared_directives",
            "location": 332,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ],
                "schema": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ],
                "directive_visitors": [
                    "bool",
                    "str",
                    "None",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "SchemaDirectiveVisitor.visit_schema_directives": {
            "name": "visit_schema_directives",
            "location": 388,
            "return": [
                "dict[str, list[]]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "None"
                ],
                "schema": [],
                "directive_visitors": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "heal_schema.heal": {
            "name": "heal",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "type_": []
            }
        },
        "heal_schema.heal_fields": {
            "name": "heal_fields",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "type_": []
            }
        },
        "heal_schema.heal_type": {
            "name": "heal_type",
            "location": 567,
            "return": [
                "GraphQLNonNull",
                "GraphQLList"
            ],
            "arguments": {
                "type_": []
            }
        },
        "visit_schema.visit_fields._update_fields": {
            "name": "_update_fields",
            "location": 279,
            "return": [],
            "arguments": {
                "field": [],
                "_": []
            }
        },
        "SchemaDirectiveVisitor.get_declared_directives._add_directive": {
            "name": "_add_directive",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "decl": []
            }
        },
        "SchemaDirectiveVisitor.get_declared_directives._get_overriden_directive": {
            "name": "_get_overriden_directive",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "visitor_class": [],
                "directive_name": []
            }
        },
        "SchemaDirectiveVisitor.get_declared_directives._rest": {
            "name": "_rest",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "decl": [],
                "name": []
            }
        },
        "SchemaDirectiveVisitor.visit_schema_directives._visitor_selector": {
            "name": "_visitor_selector",
            "location": 403,
            "return": [
                "list[]"
            ],
            "arguments": {
                "type_": [],
                "method_name": []
            }
        },
        "heal_schema.heal_fields._heal_arg": {
            "name": "_heal_arg",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": [],
                "_": []
            }
        },
        "heal_schema.heal_fields._heal_field": {
            "name": "_heal_field",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "field": [],
                "_": []
            }
        },
        "visit_schema.visit._start": {
            "name": "_start",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "named_type": [],
                "type_name": []
            }
        },
        "SchemaDirectiveVisitor.get_declared_directives._rest._location_check": {
            "name": "_location_check",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "loc": []
            }
        },
        "heal_schema.heal._heal_original": {
            "name": "_heal_original",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "named_type": [],
                "type_name": []
            }
        },
        "heal_schema.heal._add_back": {
            "name": "_add_back",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "named_type": [],
                "type_name": []
            }
        },
        "heal_schema.heal._heal_directive_declaration": {
            "name": "_heal_directive_declaration",
            "location": 500,
            "return": [
                "None"
            ],
            "arguments": {
                "decl": []
            }
        },
        "heal_schema.heal._heal_type": {
            "name": "_heal_type",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "named_type": [],
                "type_name": []
            }
        },
        "heal_schema.heal._remove_dangling_references": {
            "name": "_remove_dangling_references",
            "location": 518,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "_": [],
                "type_name": []
            }
        },
        "heal_schema.heal._heal_directive_declaration._heal_arg": {
            "name": "_heal_arg",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": [],
                "_": []
            }
        },
        "heal_schema.heal._heal_field_type": {
            "name": "_heal_field_type",
            "location": 537,
            "return": [
                "None"
            ],
            "arguments": {
                "field": [],
                "_": []
            }
        }
    },
    "ariadne-master/ariadne/subscriptions.py": {
        "SubscriptionType.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionType.source": {
            "name": "source",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SubscriptionType.create_register_subscriber": {
            "name": "create_register_subscriber",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SubscriptionType.set_source": {
            "name": "set_source",
            "location": 32,
            "return": [
                "str",
                "int",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "generator": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "SubscriptionType.bind_to_schema": {
            "name": "bind_to_schema",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Exception"
                ]
            }
        },
        "SubscriptionType.bind_subscribers_to_graphql_type": {
            "name": "bind_subscribers_to_graphql_type",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graphql_type": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "SubscriptionType.create_register_subscriber.register_subscriber": {
            "name": "register_subscriber",
            "location": 26,
            "return": [],
            "arguments": {
                "generator": []
            }
        }
    },
    "ariadne-master/ariadne/types.py": {
        "Extension.request_started": {
            "name": "request_started",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "typing.IO",
                    "list[dict[, ]]"
                ]
            }
        },
        "Extension.request_finished": {
            "name": "request_finished",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "typing.Any",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Extension.has_errors": {
            "name": "has_errors",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "Exception",
                    "tuple[]",
                    "list[graphql.GraphQLError]",
                    "str"
                ],
                "context": [
                    "Exception",
                    "tuple[]",
                    "list[graphql.GraphQLError]",
                    "str"
                ]
            }
        },
        "Extension.format": {
            "name": "format",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "list[tuple[typing.Union[int,str]]]",
                    "float",
                    "str"
                ]
            }
        },
        "ExtensionSync.resolve": {
            "name": "resolve",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "next_": [],
                "obj": [],
                "info": []
            }
        },
        "SchemaBindable.bind_to_schema": {
            "name": "bind_to_schema",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "float",
                    "str",
                    "list[int]",
                    "list[list[str]]"
                ]
            }
        }
    },
    "ariadne-master/ariadne/unions.py": {
        "UnionType.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "None"
                ],
                "type_resolver": [
                    "None",
                    "str"
                ]
            }
        },
        "UnionType.set_type_resolver": {
            "name": "set_type_resolver",
            "location": 15,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "type_resolver": [
                    "str",
                    "None"
                ]
            }
        },
        "UnionType.bind_to_schema": {
            "name": "bind_to_schema",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "Exception"
                ]
            }
        },
        "UnionType.validate_graphql_type": {
            "name": "validate_graphql_type",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graphql_type": [
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "ariadne-master/ariadne/utils.py": {
        "convert_camel_case_to_snake": {
            "name": "convert_camel_case_to_snake",
            "location": 9,
            "return": [],
            "arguments": {
                "graphql_name": []
            }
        },
        "gql": {
            "name": "gql",
            "location": 39,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "unwrap_graphql_error": {
            "name": "unwrap_graphql_error",
            "location": 44,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "convert_kwargs_to_snake_case": {
            "name": "convert_kwargs_to_snake_case",
            "location": 52,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "type_implements_interface": {
            "name": "type_implements_interface",
            "location": 80,
            "return": [],
            "arguments": {
                "interface": [],
                "graphql_type": []
            }
        },
        "convert_kwargs_to_snake_case.convert_to_snake_case": {
            "name": "convert_to_snake_case",
            "location": 53,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "convert_kwargs_to_snake_case.wrapper": {
            "name": "wrapper",
            "location": 74,
            "return": [],
            "arguments": {}
        }
    },
    "ariadne-master/ariadne/wsgi.py": {
        "GraphQL.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "bool",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "GraphQL.__call__": {
            "name": "__call__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "start_response": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "GraphQL.handle_graphql_error": {
            "name": "handle_graphql_error",
            "location": 75,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "dict[str, str]",
                    "typing.Sequence[T]"
                ],
                "start_response": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "GraphQL.handle_http_error": {
            "name": "handle_http_error",
            "location": 84,
            "return": [
                "list[bytes]"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "bool"
                ],
                "start_response": [
                    "typing.Callable[, ]",
                    "bytes",
                    "str"
                ]
            }
        },
        "GraphQL.handle_request": {
            "name": "handle_request",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": [
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, bool]",
                    "dict[str, list[typing.Any]]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, str]"
                ]
            }
        },
        "GraphQL.handle_get": {
            "name": "handle_get",
            "location": 99,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "start_response": [
                    "str",
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "GraphQL.handle_post": {
            "name": "handle_post",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "start_response": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GraphQL.get_request_data": {
            "name": "get_request_data",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [
                    "dict[, ]"
                ]
            }
        },
        "GraphQL.extract_data_from_json_request": {
            "name": "extract_data_from_json_request",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [
                    "Exception",
                    "None",
                    "typing.Sequence[int]"
                ]
            }
        },
        "GraphQL.get_request_content_length": {
            "name": "get_request_content_length",
            "location": 132,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict[, ]"
                ]
            }
        },
        "GraphQL.get_request_body": {
            "name": "get_request_body",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [],
                "content_length": [
                    "str"
                ]
            }
        },
        "GraphQL.extract_data_from_multipart_request": {
            "name": "extract_data_from_multipart_request",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [
                    "list[dict[, ]]"
                ]
            }
        },
        "GraphQL.execute_query": {
            "name": "execute_query",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "int",
                    "dict[, ]",
                    "list[]",
                    "dict[str, dict[typing.Any, int]]",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "GraphQL.get_context_for_request": {
            "name": "get_context_for_request",
            "location": 195,
            "return": [
                "dict[typing.Text, typing.Union[int,float,dict[, ],dict[str, typing.Any]]]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "int",
                    "float",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GraphQL.get_extensions_for_request": {
            "name": "get_extensions_for_request",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [
                    "dict[, ]",
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ],
                "context": [
                    "dict[, ]",
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GraphQL.get_middleware_for_request": {
            "name": "get_middleware_for_request",
            "location": 207,
            "return": [
                "MiddlewareManager",
                "None"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict[, ]",
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ],
                "context": [
                    "dict[, ]",
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GraphQL.return_response_from_result": {
            "name": "return_response_from_result",
            "location": 217,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "start_response": [
                    "typing.Callable[, ]",
                    "int",
                    "list[str]",
                    "float",
                    "list[bool]"
                ],
                "result": [
                    "dict[, ]",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "GraphQL.handle_not_allowed_method": {
            "name": "handle_not_allowed_method",
            "location": 225,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, int]"
                ]
            }
        },
        "GraphQLMiddleware.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "graphql_app": [
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "typing.MutableMapping",
                    "str",
                    "list[dict[, ]]"
                ],
                "path": [
                    "typing.Text"
                ]
            }
        },
        "GraphQLMiddleware.__call__": {
            "name": "__call__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "environ": [
                    "str"
                ],
                "start_response": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "ariadne-master/ariadne/__init__.py": {},
    "ariadne-master/ariadne/contrib/__init__.py": {},
    "ariadne-master/ariadne/contrib/federation/interfaces.py": {
        "FederatedInterfaceType.reference_resolver": {
            "name": "reference_resolver",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "arg": [
                    "None",
                    "typing.Callable[, ]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "FederatedInterfaceType.bind_to_schema": {
            "name": "bind_to_schema",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FederatedInterfaceType.reference_resolver.register_reference_resolver": {
            "name": "register_reference_resolver",
            "location": 16,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "ariadne-master/ariadne/contrib/federation/objects.py": {
        "FederatedObjectType.reference_resolver": {
            "name": "reference_resolver",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "arg": [
                    "None",
                    "typing.Callable[, ]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "FederatedObjectType.bind_to_schema": {
            "name": "bind_to_schema",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "typing.Type",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "FederatedObjectType.reference_resolver.register_reference_resolver": {
            "name": "register_reference_resolver",
            "location": 15,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "ariadne-master/ariadne/contrib/federation/schema.py": {
        "has_query_type": {
            "name": "has_query_type",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_defs": [
                    "str",
                    "typing.Type",
                    "list[language.FieldNode]",
                    "list[mypy.types.Instance]"
                ]
            }
        },
        "make_federated_schema": {
            "name": "make_federated_schema",
            "location": 70,
            "return": [],
            "arguments": {
                "type_defs": [
                    "typing.Callable[[], mypy.types.Instance]",
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "extend_federated_schema": {
            "name": "extend_federated_schema",
            "location": 131,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "tuple[typing.Union[str,str,str]]"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "None",
                    "tuple[typing.Sequence[]]",
                    "list[str]",
                    "typing.Sequence[str]"
                ],
                "document_ast": [
                    "int"
                ],
                "assume_valid": [
                    "bool"
                ],
                "assume_valid_sdl": [
                    "bool"
                ]
            }
        }
    },
    "ariadne-master/ariadne/contrib/federation/utils.py": {
        "purge_schema_directives": {
            "name": "purge_schema_directives",
            "location": 63,
            "return": [],
            "arguments": {
                "joined_type_defs": []
            }
        },
        "resolve_entities": {
            "name": "resolve_entities",
            "location": 73,
            "return": [
                "list[]"
            ],
            "arguments": {
                "_": [
                    "dict[, ]",
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "info": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_entity_types": {
            "name": "get_entity_types",
            "location": 108,
            "return": [
                "list[]"
            ],
            "arguments": {
                "schema": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "includes_directive": {
            "name": "includes_directive",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_object": [],
                "directive_name": [
                    "str",
                    "None"
                ]
            }
        },
        "gather_directives": {
            "name": "gather_directives",
            "location": 130,
            "return": [
                "list[]"
            ],
            "arguments": {
                "type_object": []
            }
        },
        "add_typename_to_possible_return": {
            "name": "add_typename_to_possible_return",
            "location": 151,
            "return": [
                "bool",
                "str",
                "list[]",
                "None"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "str",
                    "None",
                    "list[]"
                ],
                "typename": [
                    "str"
                ]
            }
        },
        "get_entity_types.check_type": {
            "name": "check_type",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": []
            }
        }
    },
    "ariadne-master/ariadne/contrib/federation/__init__.py": {},
    "ariadne-master/ariadne/contrib/tracing/apollotracing.py": {
        "ApolloTracingExtension.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trace_default_resolver": [
                    "bool"
                ]
            }
        },
        "ApolloTracingExtension.request_started": {
            "name": "request_started",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "typing.IO",
                    "list[dict[, ]]"
                ]
            }
        },
        "ApolloTracingExtension.get_totals": {
            "name": "get_totals",
            "location": 65,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApolloTracingExtension._get_totals": {
            "name": "_get_totals",
            "location": 70,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApolloTracingExtension.format": {
            "name": "format",
            "location": 78,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[int,str,dict[typing.Text, str]]]]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "list[tuple[typing.Union[int,str]]]",
                    "float",
                    "str"
                ]
            }
        },
        "ApolloTracingExtensionSync.resolve": {
            "name": "resolve",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "next_": [
                    "dict[, ]",
                    "None",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "obj": [
                    "dict[, ]",
                    "None",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "info": [
                    "typing.Callable[, ]",
                    "Exception",
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "perf_counter_ns": {
            "name": "perf_counter_ns",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/ariadne/contrib/tracing/opentracing.py": {
        "opentracing_extension": {
            "name": "opentracing_extension",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "opentracing_extension_sync": {
            "name": "opentracing_extension_sync",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "copy_args_for_tracing": {
            "name": "copy_args_for_tracing",
            "location": 110,
            "return": [
                "dict[, ]",
                "list[]",
                "str",
                "typing.Type"
            ],
            "arguments": {
                "value": [
                    "dict[, ]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "repr_upload_file": {
            "name": "repr_upload_file",
            "location": 120,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "upload_file": [
                    "dict[, ]",
                    "bytes",
                    "typing.IO",
                    "dict[str, str]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "OpenTracingExtension.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenTracingExtension.request_started": {
            "name": "request_started",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "typing.IO",
                    "list[dict[, ]]"
                ]
            }
        },
        "OpenTracingExtension.request_finished": {
            "name": "request_finished",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "typing.Any",
                    "typing.Callable[, ]"
                ]
            }
        },
        "OpenTracingExtension.filter_resolver_args": {
            "name": "filter_resolver_args",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "info": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "OpenTracingExtensionSync.resolve": {
            "name": "resolve",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "next_": [
                    "dict[, ]",
                    "None",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "obj": [
                    "dict[, ]",
                    "None",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "info": [
                    "tuple[]",
                    "typing.Mapping",
                    "typing.Type",
                    "bool",
                    "str",
                    "None"
                ]
            }
        }
    },
    "ariadne-master/ariadne/contrib/tracing/utils.py": {
        "format_path": {
            "name": "format_path",
            "location": 6,
            "return": [],
            "arguments": {
                "path": [
                    "list[]",
                    "list[str]",
                    "str",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "should_trace": {
            "name": "should_trace",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "info": [
                    "str",
                    "typing.Type",
                    "bool"
                ],
                "trace_default_resolver": [
                    "bool"
                ]
            }
        },
        "is_introspection_field": {
            "name": "is_introspection_field",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "info": [
                    "str",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "is_introspection_key": {
            "name": "is_introspection_key",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        }
    },
    "ariadne-master/ariadne/contrib/tracing/__init__.py": {},
    "ariadne-master/ariadne/validation/introspection_disabled.py": {
        "IntrospectionDisabledRule.enter_field": {
            "name": "enter_field",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        }
    },
    "ariadne-master/ariadne/validation/query_cost.py": {
        "validate_cost_map": {
            "name": "validate_cost_map",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "cost_map": [
                    "dict[, ]",
                    "dict[tuple[typing.Union[int,...]], float]"
                ],
                "schema": [
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "report_error": {
            "name": "report_error",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Exception"
                ],
                "error": [
                    "str",
                    "Exception"
                ]
            }
        },
        "cost_analysis_message": {
            "name": "cost_analysis_message",
            "location": 334,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "maximum_cost": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "cost": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "cost_validator": {
            "name": "cost_validator",
            "location": 341,
            "return": [],
            "arguments": {
                "maximum_cost": [
                    "bool",
                    "typing.BinaryIO",
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "CostValidator.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int"
                ],
                "maximum_cost": [
                    "bool",
                    "float"
                ]
            }
        },
        "CostValidator.compute_node_cost": {
            "name": "compute_node_cost",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ],
                "type_def": [],
                "parent_multipliers": [
                    "None",
                    "typing.Callable[bool, None]",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "CostValidator.enter_operation_definition": {
            "name": "enter_operation_definition",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "key": [
                    "typing.Iterable[]",
                    "None",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "parent": [
                    "typing.Iterable[]",
                    "None",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "path": [
                    "typing.Iterable[]",
                    "None",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "ancestors": [
                    "typing.Iterable[]",
                    "None",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "CostValidator.leave_operation_definition": {
            "name": "leave_operation_definition",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "typing.Iterable[]",
                    "None",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "key": [
                    "typing.Iterable[]",
                    "None",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "parent": [
                    "typing.Iterable[]",
                    "None",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "path": [
                    "typing.Iterable[]",
                    "None",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "ancestors": [
                    "typing.Iterable[]",
                    "None",
                    "typing.Callable[, ]",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "CostValidator.compute_cost": {
            "name": "compute_cost",
            "location": 183,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "multipliers": [
                    "None",
                    "str",
                    "int"
                ],
                "use_multipliers": [
                    "bool"
                ],
                "complexity": [
                    "None",
                    "typing.Sequence[str]",
                    "list[]",
                    "dict[, ]",
                    "str",
                    "typing.Callable[..., typing.Any]",
                    "typing.AnyStr"
                ]
            }
        },
        "CostValidator.get_args_from_cost_map": {
            "name": "get_args_from_cost_map",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Type",
                    "None"
                ],
                "parent_type": [],
                "field_args": [
                    "typing.Type"
                ]
            }
        },
        "CostValidator.get_args_from_directives": {
            "name": "get_args_from_directives",
            "location": 209,
            "return": [
                "dict[typing.Text, typing.Union[int,None,list[]]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "directives": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "field_args": [
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "CostValidator.get_multipliers_from_list_node": {
            "name": "get_multipliers_from_list_node",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "multipliers": [
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "field_args": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "CostValidator.get_multipliers_from_string": {
            "name": "get_multipliers_from_string",
            "location": 278,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "multipliers": [
                    "list[]",
                    "bytes",
                    "list[int]",
                    "list[str]"
                ],
                "field_args": []
            }
        },
        "CostValidator.get_cost_exceeded_error": {
            "name": "get_cost_exceeded_error",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "cost_validator._CostValidator.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        }
    },
    "ariadne-master/ariadne/validation/__init__.py": {},
    "ariadne-master/benchmark/conftest.py": {
        "users_data": {
            "name": "users_data",
            "location": 37,
            "return": [
                "typing.Generator[User]"
            ],
            "arguments": {}
        },
        "raw_data": {
            "name": "raw_data",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "raw_data_one_item": {
            "name": "raw_data_one_item",
            "location": 51,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {}
        },
        "hydrated_data": {
            "name": "hydrated_data",
            "location": 56,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "hydrated_data_one_item": {
            "name": "hydrated_data_one_item",
            "location": 61,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "type_defs": {
            "name": "type_defs",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "schema": {
            "name": "schema",
            "location": 72,
            "return": [],
            "arguments": {
                "type_defs": []
            }
        }
    },
    "ariadne-master/benchmark/generate_data.py": {
        "make_random_complex_query": {
            "name": "make_random_complex_query",
            "location": 7,
            "return": [
                "dict[typing.Text, list[dict[typing.Text, typing.Union[str,dict[typing.Text, typing.Union[str,list[]]],list[dict[typing.Text, str]]]]]]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "ariadne-master/benchmark/test_complex.py": {
        "test_benchmark_complex_query_resolved_to_one_dict": {
            "name": "test_benchmark_complex_query_resolved_to_one_dict",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "int"
                ],
                "schema": [
                    "bool",
                    "str"
                ],
                "raw_data_one_item": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_benchmark_complex_query_resolved_to_500_dicts": {
            "name": "test_benchmark_complex_query_resolved_to_500_dicts",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "int"
                ],
                "schema": [
                    "bool"
                ],
                "raw_data": [
                    "bool"
                ]
            }
        },
        "test_benchmark_complex_query_resolved_to_one_object": {
            "name": "test_benchmark_complex_query_resolved_to_one_object",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "int"
                ],
                "schema": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "hydrated_data_one_item": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "test_benchmark_complex_query_resolved_to_500_objects": {
            "name": "test_benchmark_complex_query_resolved_to_500_objects",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "int"
                ],
                "schema": [
                    "bool"
                ],
                "hydrated_data": [
                    "bool"
                ]
            }
        },
        "test_benchmark_complex_query_resolved_to_one_dict.api_call": {
            "name": "api_call",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_benchmark_complex_query_resolved_to_500_dicts.api_call": {
            "name": "api_call",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_benchmark_complex_query_resolved_to_one_object.api_call": {
            "name": "api_call",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_benchmark_complex_query_resolved_to_500_objects.api_call": {
            "name": "api_call",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "ariadne-master/benchmark/test_simple.py": {
        "test_benchmark_simple_query_resolved_to_one_dict": {
            "name": "test_benchmark_simple_query_resolved_to_one_dict",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "int"
                ],
                "schema": [
                    "bool",
                    "str"
                ],
                "raw_data_one_item": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_benchmark_simple_query_resolved_to_500_dicts": {
            "name": "test_benchmark_simple_query_resolved_to_500_dicts",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "int"
                ],
                "schema": [
                    "bool"
                ],
                "raw_data": [
                    "bool"
                ]
            }
        },
        "test_benchmark_simple_query_resolved_to_one_object": {
            "name": "test_benchmark_simple_query_resolved_to_one_object",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "int"
                ],
                "schema": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "hydrated_data_one_item": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "test_benchmark_simple_query_resolved_to_500_objects": {
            "name": "test_benchmark_simple_query_resolved_to_500_objects",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "benchmark": [
                    "int"
                ],
                "schema": [
                    "bool"
                ],
                "hydrated_data": [
                    "bool"
                ]
            }
        },
        "test_benchmark_simple_query_resolved_to_one_dict.api_call": {
            "name": "api_call",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_benchmark_simple_query_resolved_to_500_dicts.api_call": {
            "name": "api_call",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_benchmark_simple_query_resolved_to_one_object.api_call": {
            "name": "api_call",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_benchmark_simple_query_resolved_to_500_objects.api_call": {
            "name": "api_call",
            "location": 58,
            "return": [],
            "arguments": {}
        }
    },
    "ariadne-master/benchmark/__init__.py": {},
    "ariadne-master/tests/conftest.py": {
        "type_defs": {
            "name": "type_defs",
            "location": 16,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "resolve_hello": {
            "name": "resolve_hello",
            "location": 42,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "resolve_status": {
            "name": "resolve_status",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "resolve_test_context": {
            "name": "resolve_test_context",
            "location": 50,
            "return": [],
            "arguments": {
                "_": [
                    "list[tuple[typing.Union[str,str]]]",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "info": [
                    "bytes",
                    "dict[str, int]",
                    "dict[, ]"
                ]
            }
        },
        "resolve_test_root": {
            "name": "resolve_test_root",
            "location": 54,
            "return": [],
            "arguments": {
                "root": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "resolve_error": {
            "name": "resolve_error",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "resolvers": {
            "name": "resolvers",
            "location": 63,
            "return": [
                "QueryType"
            ],
            "arguments": {}
        },
        "resolve_upload": {
            "name": "resolve_upload",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mutations": {
            "name": "mutations",
            "location": 80,
            "return": [
                "MutationType"
            ],
            "arguments": {}
        },
        "subscriptions": {
            "name": "subscriptions",
            "location": 104,
            "return": [
                "SubscriptionType"
            ],
            "arguments": {}
        },
        "schema": {
            "name": "schema",
            "location": 116,
            "return": [],
            "arguments": {
                "type_defs": [],
                "resolvers": [],
                "mutations": [],
                "subscriptions": []
            }
        },
        "validation_rule": {
            "name": "validation_rule",
            "location": 123,
            "return": [
                "NoopRule"
            ],
            "arguments": {}
        },
        "fake_mapping": {
            "name": "fake_mapping",
            "location": 131,
            "return": [
                "FakeMapping"
            ],
            "arguments": {}
        },
        "fake_mapping.FakeMapping.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "fake_mapping.FakeMapping.__getitem__": {
            "name": "__getitem__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "fake_mapping.FakeMapping.__iter__": {
            "name": "__iter__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "fake_mapping.FakeMapping.__len__": {
            "name": "__len__",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ariadne-master/tests/test_camel_case_to_snake_case_convertion.py": {
        "test_lower_case_name_is_not_changed": {
            "name": "test_lower_case_name_is_not_changed",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_two_words_snake_case_name_is_not_changed": {
            "name": "test_two_words_snake_case_name_is_not_changed",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_three_words_snake_case_name_is_not_changed": {
            "name": "test_three_words_snake_case_name_is_not_changed",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pascal_case_name_is_lowercased": {
            "name": "test_pascal_case_name_is_lowercased",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_two_words_pascal_case_name_is_converted": {
            "name": "test_two_words_pascal_case_name_is_converted",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_two_words_camel_case_name_is_converted": {
            "name": "test_two_words_camel_case_name_is_converted",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_three_words_pascal_case_name_is_converted": {
            "name": "test_three_words_pascal_case_name_is_converted",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_three_words_camel_case_name_is_converted": {
            "name": "test_three_words_camel_case_name_is_converted",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_underscore_added_if_previous_character_is_an_underscore": {
            "name": "test_no_underscore_added_if_previous_character_is_an_underscore",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_underscore_added_if_previous_character_is_uppercase": {
            "name": "test_no_underscore_added_if_previous_character_is_uppercase",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_digits_are_treated_as_word": {
            "name": "test_digits_are_treated_as_word",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "test_str": [
                    "list[str]",
                    "str"
                ],
                "result": [
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "ariadne-master/tests/test_custom_scalars.py": {
        "resolve_test_serialize": {
            "name": "resolve_test_serialize",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "resolve_test_input": {
            "name": "resolve_test_input",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "resolve_test_input_type": {
            "name": "resolve_test_input_type",
            "location": 39,
            "return": [
                "typing.Iterable[str]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "serialize_date": {
            "name": "serialize_date",
            "location": 47,
            "return": [],
            "arguments": {
                "date": []
            }
        },
        "parse_date_value": {
            "name": "parse_date_value",
            "location": 55,
            "return": [],
            "arguments": {
                "formatted_date": [
                    "str"
                ]
            }
        },
        "parse_date_literal": {
            "name": "parse_date_literal",
            "location": 61,
            "return": [],
            "arguments": {
                "ast": [
                    "str",
                    "None",
                    "bool"
                ],
                "variable_values": [
                    "None",
                    "bool",
                    "str",
                    "list[]"
                ]
            }
        },
        "parse_value_from_default_literal_parser": {
            "name": "parse_value_from_default_literal_parser",
            "location": 74,
            "return": [],
            "arguments": {
                "value": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "test_attempt_bind_scalar_to_undefined_type_raises_error": {
            "name": "test_attempt_bind_scalar_to_undefined_type_raises_error",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attempt_bind_scalar_to_invalid_schema_type_raises_error": {
            "name": "test_attempt_bind_scalar_to_invalid_schema_type_raises_error",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_python_date_is_serialized_by_scalar": {
            "name": "test_python_date_is_serialized_by_scalar",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_literal_with_valid_date_str_is_deserialized_to_python_date": {
            "name": "test_literal_with_valid_date_str_is_deserialized_to_python_date",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attempt_deserialize_str_literal_without_valid_date_raises_error": {
            "name": "test_attempt_deserialize_str_literal_without_valid_date_raises_error",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attempt_deserialize_wrong_type_literal_raises_error": {
            "name": "test_attempt_deserialize_wrong_type_literal_raises_error",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_literal_parser_is_used_to_extract_value_str_from_ast_node": {
            "name": "test_default_literal_parser_is_used_to_extract_value_str_from_ast_node",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_variable_with_valid_date_string_is_deserialized_to_python_date": {
            "name": "test_variable_with_valid_date_string_is_deserialized_to_python_date",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attempt_deserialize_str_variable_without_valid_date_raises_error": {
            "name": "test_attempt_deserialize_str_variable_without_valid_date_raises_error",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attempt_deserialize_wrong_type_variable_raises_error": {
            "name": "test_attempt_deserialize_wrong_type_variable_raises_error",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scalar_serializer_can_be_set_on_initialization": {
            "name": "test_scalar_serializer_can_be_set_on_initialization",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scalar_serializer_can_be_set_with_setter": {
            "name": "test_scalar_serializer_can_be_set_with_setter",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scalar_value_parser_can_be_set_on_initialization": {
            "name": "test_scalar_value_parser_can_be_set_on_initialization",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scalar_value_parser_can_be_set_with_setter": {
            "name": "test_scalar_value_parser_can_be_set_with_setter",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scalar_literal_parser_can_be_set_on_initialization": {
            "name": "test_scalar_literal_parser_can_be_set_on_initialization",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scalar_literal_parser_can_be_set_with_setter": {
            "name": "test_scalar_literal_parser_can_be_set_with_setter",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setting_scalar_value_parser_sets_default_literal_parsers_if_none_is_set": {
            "name": "test_setting_scalar_value_parser_sets_default_literal_parsers_if_none_is_set",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_literal_string_is_deserialized_by_default_parser": {
            "name": "test_literal_string_is_deserialized_by_default_parser",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_literal_int_is_deserialized_by_default_parser": {
            "name": "test_literal_int_is_deserialized_by_default_parser",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_literal_float_is_deserialized_by_default_parser": {
            "name": "test_literal_float_is_deserialized_by_default_parser",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_literal_bool_true_is_deserialized_by_default_parser": {
            "name": "test_literal_bool_true_is_deserialized_by_default_parser",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_literal_bool_false_is_deserialized_by_default_parser": {
            "name": "test_literal_bool_false_is_deserialized_by_default_parser",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_literal_object_is_deserialized_by_default_parser": {
            "name": "test_literal_object_is_deserialized_by_default_parser",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_literal_list_is_deserialized_by_default_parser": {
            "name": "test_literal_list_is_deserialized_by_default_parser",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_default_resolvers.py": {
        "test_alias_resolver_supports_callable_return_value": {
            "name": "test_alias_resolver_supports_callable_return_value",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_alias_resolver_passess_field_args_to_callable_return_value": {
            "name": "test_alias_resolver_passess_field_args_to_callable_return_value",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_alias_resolver_passess_default_resolver_check": {
            "name": "test_alias_resolver_passess_default_resolver_check",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_graphql_core_default_resolver_passess_default_resolver_check": {
            "name": "test_graphql_core_default_resolver_passess_default_resolver_check",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_custom_resolver_fails_default_resolver_check": {
            "name": "test_custom_resolver_fails_default_resolver_check",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_alias_resolver_supports_callable_return_value.callable_resolver": {
            "name": "callable_resolver",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_alias_resolver_passess_field_args_to_callable_return_value.callable_resolver": {
            "name": "callable_resolver",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_custom_resolver_fails_default_resolver_check.custom_resolver": {
            "name": "custom_resolver",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_descriptions.py": {
        "schema": {
            "name": "schema",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_enum_has_description": {
            "name": "test_enum_has_description",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_enum_value_has_description": {
            "name": "test_enum_value_has_description",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_object_type_has_description": {
            "name": "test_object_type_has_description",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_object_field_has_description": {
            "name": "test_object_field_has_description",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_object_field_argument_has_description": {
            "name": "test_object_field_argument_has_description",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "test_undocumented_object_field_description_is_none": {
            "name": "test_undocumented_object_field_description_is_none",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_undocumented_object_field_argument_description_is_none": {
            "name": "test_undocumented_object_field_argument_description_is_none",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "ariadne-master/tests/test_directives.py": {
        "test_field_definition_directive_replaces_field_resolver_with_custom_one": {
            "name": "test_field_definition_directive_replaces_field_resolver_with_custom_one",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_multiple_field_definition_directives_replace_field_resolver_with_chainable_resolvers": {
            "name": "test_multiple_field_definition_directives_replace_field_resolver_with_chainable_resolvers",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "test_directive_can_have_optional_argument": {
            "name": "test_directive_can_have_optional_argument",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "test_directive_can_have_required_argument": {
            "name": "test_directive_can_have_required_argument",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_directive_raises_type_error_if_required_argument_is_not_given": {
            "name": "test_directive_raises_type_error_if_required_argument_is_not_given",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "test_can_implement_unique_id_directive": {
            "name": "test_can_implement_unique_id_directive",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "test_can_implement_remove_enum_values_directive": {
            "name": "test_can_implement_remove_enum_values_directive",
            "location": 261,
            "return": [],
            "arguments": {}
        },
        "test_can_swap_names_of_GraphQLNamedType_objects": {
            "name": "test_can_swap_names_of_GraphQLNamedType_objects",
            "location": 290,
            "return": [],
            "arguments": {}
        },
        "test_defining_non_callable_visitor_attribute_raises_error": {
            "name": "test_defining_non_callable_visitor_attribute_raises_error",
            "location": 331,
            "return": [],
            "arguments": {}
        },
        "test_returning_value_from_visit_schema_raises_error": {
            "name": "test_returning_value_from_visit_schema_raises_error",
            "location": 351,
            "return": [],
            "arguments": {}
        },
        "test_visitor_missing_method_raises_error": {
            "name": "test_visitor_missing_method_raises_error",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "test_can_be_used_to_implement_auth_example": {
            "name": "test_can_be_used_to_implement_auth_example",
            "location": 389,
            "return": [],
            "arguments": {}
        },
        "test_directive_can_add_new_type_to_schema": {
            "name": "test_directive_can_add_new_type_to_schema",
            "location": 519,
            "return": [],
            "arguments": {}
        },
        "test_directive_can_be_defined_without_being_used": {
            "name": "test_directive_can_be_defined_without_being_used",
            "location": 549,
            "return": [],
            "arguments": {}
        },
        "UpperDirective.visit_field_definition": {
            "name": "visit_field_definition",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "object_type": []
            }
        },
        "ReverseDirective.visit_field_definition": {
            "name": "visit_field_definition",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "object_type": []
            }
        },
        "ReturnValueDirective.visit_field_definition": {
            "name": "visit_field_definition",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "object_type": []
            }
        },
        "test_can_be_used_to_implement_auth_example._get_user": {
            "name": "_get_user",
            "location": 400,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "test_can_be_used_to_implement_auth_example._users_resolver": {
            "name": "_users_resolver",
            "location": 467,
            "return": [],
            "arguments": {
                "_": [],
                "__": []
            }
        },
        "test_can_be_used_to_implement_auth_example.exec_with_role": {
            "name": "exec_with_role",
            "location": 474,
            "return": [],
            "arguments": {
                "role": []
            }
        },
        "test_can_be_used_to_implement_auth_example._check_results": {
            "name": "_check_results",
            "location": 489,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "test_directive_can_be_defined_without_being_used.resolve_union_test_type": {
            "name": "resolve_union_test_type",
            "location": 578,
            "return": [],
            "arguments": {}
        },
        "UpperDirective.visit_field_definition.resolve_upper": {
            "name": "resolve_upper",
            "location": 36,
            "return": [],
            "arguments": {
                "obj": [],
                "info": []
            }
        },
        "ReverseDirective.visit_field_definition.resolve_reverse": {
            "name": "resolve_reverse",
            "location": 52,
            "return": [],
            "arguments": {
                "obj": [],
                "info": []
            }
        },
        "ReturnValueDirective.visit_field_definition.resolver": {
            "name": "resolver",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_can_implement_unique_id_directive.UniqueIDDirective.visit_object": {
            "name": "visit_object",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "object_": []
            }
        },
        "test_can_implement_remove_enum_values_directive.RemoveEnumDirective.visit_enum_value": {
            "name": "visit_enum_value",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "enum_type": []
            }
        },
        "test_can_swap_names_of_GraphQLNamedType_objects.RenameTypeDirective.visit_object": {
            "name": "visit_object",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "object_": []
            }
        },
        "test_returning_value_from_visit_schema_raises_error.Visitor.visit_schema": {
            "name": "visit_schema",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "test_visitor_missing_method_raises_error.Visitor.visit_object": {
            "name": "visit_object",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "object_": []
            }
        },
        "test_can_be_used_to_implement_auth_example.User.__init__": {
            "name": "__init__",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "test_can_be_used_to_implement_auth_example.User.has_role": {
            "name": "has_role",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "role": []
            }
        },
        "test_can_be_used_to_implement_auth_example.AuthDirective.visit_object": {
            "name": "visit_object",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "object_": []
            }
        },
        "test_can_be_used_to_implement_auth_example.AuthDirective.visit_field_definition": {
            "name": "visit_field_definition",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "object_type": []
            }
        },
        "test_can_be_used_to_implement_auth_example.AuthDirective.ensure_fields_wrapped": {
            "name": "ensure_fields_wrapped",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "object_type": []
            }
        },
        "test_directive_can_add_new_type_to_schema.Visitor.visit_object": {
            "name": "visit_object",
            "location": 536,
            "return": [],
            "arguments": {
                "self": [],
                "object_": []
            }
        },
        "test_directive_can_be_defined_without_being_used.CustomDirective.visit_object": {
            "name": "visit_object",
            "location": 569,
            "return": [],
            "arguments": {
                "self": [],
                "object_": []
            }
        },
        "test_directive_can_be_defined_without_being_used.CustomDirective.visit_interface": {
            "name": "visit_interface",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "interface": []
            }
        },
        "test_can_implement_unique_id_directive.UniqueIDDirective.visit_object._field_resolver": {
            "name": "_field_resolver",
            "location": 205,
            "return": [],
            "arguments": {
                "field": [],
                "_": []
            }
        },
        "test_can_be_used_to_implement_auth_example.AuthDirective.ensure_fields_wrapped._resolver": {
            "name": "_resolver",
            "location": 421,
            "return": [],
            "arguments": {
                "_": [],
                "info": []
            }
        }
    },
    "ariadne-master/tests/test_enums.py": {
        "test_succesfull_enum_typed_field": {
            "name": "test_succesfull_enum_typed_field",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unsuccesfull_invalid_enum_value_evaluation": {
            "name": "test_unsuccesfull_invalid_enum_value_evaluation",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_successful_enum_value_passed_as_argument": {
            "name": "test_successful_enum_value_passed_as_argument",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unbound_enum_arg_is_transformed_to_string": {
            "name": "test_unbound_enum_arg_is_transformed_to_string",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unsuccessful_invalid_enum_value_passed_as_argument": {
            "name": "test_unsuccessful_invalid_enum_value_passed_as_argument",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "schema_with_enum": {
            "name": "schema_with_enum",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_attempt_bind_custom_enum_to_undefined_type_raises_error": {
            "name": "test_attempt_bind_custom_enum_to_undefined_type_raises_error",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_with_enum": [
                    "str",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "test_attempt_bind_custom_enum_to_wrong_schema_type_raises_error": {
            "name": "test_attempt_bind_custom_enum_to_wrong_schema_type_raises_error",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_with_enum": [
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "test_attempt_bind_custom_enum_to_schema_enum_missing_value_raises_error": {
            "name": "test_attempt_bind_custom_enum_to_schema_enum_missing_value_raises_error",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_with_enum": [
                    "typing.Type"
                ]
            }
        },
        "test_dict_enum_is_resolved_from_internal_value": {
            "name": "test_dict_enum_is_resolved_from_internal_value",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dict_enum_arg_is_transformed_to_internal_value": {
            "name": "test_dict_enum_arg_is_transformed_to_internal_value",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum_is_resolved_from_member_value": {
            "name": "test_enum_is_resolved_from_member_value",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum_arg_is_transformed_to_internal_value": {
            "name": "test_enum_arg_is_transformed_to_internal_value",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_enum_is_resolved_from_member_value": {
            "name": "test_str_enum_is_resolved_from_member_value",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_enum_is_resolved_from_internal_value": {
            "name": "test_str_enum_is_resolved_from_internal_value",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_enum_arg_is_transformed_to_internal_value": {
            "name": "test_str_enum_arg_is_transformed_to_internal_value",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_enum_is_resolved_from_field_value": {
            "name": "test_int_enum_is_resolved_from_field_value",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_enum_is_resolved_from_internal_value": {
            "name": "test_int_enum_is_resolved_from_internal_value",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_enum_arg_is_transformed_to_internal_value": {
            "name": "test_int_enum_arg_is_transformed_to_internal_value",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_enum_arg_default_python_value_is_set": {
            "name": "test_int_enum_arg_default_python_value_is_set",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_enum_input_default_python_value_is_set": {
            "name": "test_int_enum_input_default_python_value_is_set",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_enum_input_nested_default_python_value_is_set": {
            "name": "test_int_enum_input_nested_default_python_value_is_set",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_input_exc_schema_raises_exception_for_undefined_enum_value_in_flat_input": {
            "name": "test_input_exc_schema_raises_exception_for_undefined_enum_value_in_flat_input",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_input_exc_schema_raises_exception_for_undefined_enum_value_in_nested_object": {
            "name": "test_input_exc_schema_raises_exception_for_undefined_enum_value_in_nested_object",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_input_exc_schema_raises_exception_for_undefined_enum_value_in_nested_field_arg": {
            "name": "test_input_exc_schema_raises_exception_for_undefined_enum_value_in_nested_field_arg",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_enum_values_in_schema_for_undefined_and_invalid_values": {
            "name": "test_find_enum_values_in_schema_for_undefined_and_invalid_values",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enum_type_is_able_to_represent_enum_default_value_in_schema": {
            "name": "test_enum_type_is_able_to_represent_enum_default_value_in_schema",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_enum_arg_default_python_value_is_set.resolve_test_enum": {
            "name": "resolve_test_enum",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_int_enum_input_default_python_value_is_set.resolve_test_enum": {
            "name": "resolve_test_enum",
            "location": 262,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_int_enum_input_nested_default_python_value_is_set.resolve_test_enum": {
            "name": "resolve_test_enum",
            "location": 291,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_enum_type_is_able_to_represent_enum_default_value_in_schema.resolve_test_enum": {
            "name": "resolve_test_enum",
            "location": 432,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_error_formatting.py": {
        "failing_repr_mock": {
            "name": "failing_repr_mock",
            "location": 16,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "erroring_resolvers": {
            "name": "erroring_resolvers",
            "location": 21,
            "return": [
                "QueryType"
            ],
            "arguments": {
                "failing_repr_mock": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "schema": {
            "name": "schema",
            "location": 38,
            "return": [],
            "arguments": {
                "type_defs": [],
                "resolvers": [],
                "erroring_resolvers": [],
                "subscriptions": []
            }
        },
        "test_default_formatter_is_not_extending_error_by_default": {
            "name": "test_default_formatter_is_not_extending_error_by_default",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_default_formatter_extends_error_with_stacktrace": {
            "name": "test_default_formatter_extends_error_with_stacktrace",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_default_formatter_extends_error_with_context": {
            "name": "test_default_formatter_extends_error_with_context",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_default_formatter_fills_context_with_reprs_of_python_context": {
            "name": "test_default_formatter_fills_context_with_reprs_of_python_context",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "typing.Callable[, ]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ],
                "erroring_resolvers": [],
                "failing_repr_mock": []
            }
        },
        "test_default_formatter_is_not_extending_plain_graphql_error": {
            "name": "test_default_formatter_is_not_extending_plain_graphql_error",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_error_extension_is_not_available_for_error_without_traceback": {
            "name": "test_error_extension_is_not_available_for_error_without_traceback",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_incomplete_traceback_is_handled_by_context_extractor": {
            "name": "test_incomplete_traceback_is_handled_by_context_extractor",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "erroring_resolvers.resolve_hello_with_context_and_attribute_error": {
            "name": "resolve_hello_with_context_and_attribute_error",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_executable_schema_validation.py": {
        "test_executable_schema_creation_errors_if_type_defs_is_graphql_query": {
            "name": "test_executable_schema_creation_errors_if_type_defs_is_graphql_query",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_executable_schema_creation_errors_if_type_defs_is_invalid_schema": {
            "name": "test_executable_schema_creation_errors_if_type_defs_is_invalid_schema",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_extensions.py": {
        "test_request_started_hook_is_called_by_extension_manager": {
            "name": "test_request_started_hook_is_called_by_extension_manager",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_finished_hook_is_called_by_extension_manager": {
            "name": "test_request_finished_hook_is_called_by_extension_manager",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_has_errors_hook_is_called_with_errors_list_and_context": {
            "name": "test_has_errors_hook_is_called_with_errors_list_and_context",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extension_format_hook_is_called_with_context": {
            "name": "test_extension_format_hook_is_called_with_context",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extensions_are_formatted": {
            "name": "test_extensions_are_formatted",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_extensions_sync.py": {
        "test_request_started_hook_is_called_by_extension_manager": {
            "name": "test_request_started_hook_is_called_by_extension_manager",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_request_finished_hook_is_called_by_extension_manager": {
            "name": "test_request_finished_hook_is_called_by_extension_manager",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_has_errors_hook_is_called_with_errors_list_and_context": {
            "name": "test_has_errors_hook_is_called_with_errors_list_and_context",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extension_format_hook_is_called_with_context": {
            "name": "test_extension_format_hook_is_called_with_context",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extensions_are_formatted": {
            "name": "test_extensions_are_formatted",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_extension_hooks_dont_interrupt_query_execution": {
            "name": "test_default_extension_hooks_dont_interrupt_query_execution",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        }
    },
    "ariadne-master/tests/test_fallback_resolvers.py": {
        "schema": {
            "name": "schema",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_default_fallback_resolves_fields_by_exact_names": {
            "name": "test_default_fallback_resolves_fields_by_exact_names",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_default_fallback_is_not_converting_field_name_case_to_snake_case": {
            "name": "test_default_fallback_is_not_converting_field_name_case_to_snake_case",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_default_fallback_is_not_replacing_already_set_resolvers": {
            "name": "test_default_fallback_is_not_replacing_already_set_resolvers",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_snake_case_fallback_resolves_fields_names_to_snake_case_counterparts": {
            "name": "test_snake_case_fallback_resolves_fields_names_to_snake_case_counterparts",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_snake_case_fallback_is_not_resolving_fields_by_exact_names": {
            "name": "test_snake_case_fallback_is_not_resolving_fields_by_exact_names",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_snake_case_fallback_is_not_replacing_already_set_resolvers": {
            "name": "test_snake_case_fallback_is_not_replacing_already_set_resolvers",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        }
    },
    "ariadne-master/tests/test_file_uploads.py": {
        "test_file_is_set_in_variable": {
            "name": "test_file_is_set_in_variable",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_files_are_set_in_multiple_variables": {
            "name": "test_files_are_set_in_multiple_variables",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_single_file_is_set_in_multiple_variables": {
            "name": "test_single_file_is_set_in_multiple_variables",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_is_set_in_list_variable": {
            "name": "test_file_is_set_in_list_variable",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_files_are_set_in_list_variable": {
            "name": "test_files_are_set_in_list_variable",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_is_set_in_input_variable": {
            "name": "test_file_is_set_in_input_variable",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_files_are_set_in_input_list_variable": {
            "name": "test_files_are_set_in_input_list_variable",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_files_are_set_in_list_of_inputs_variable": {
            "name": "test_files_are_set_in_list_of_inputs_variable",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file_is_set_in_one_operation_variable": {
            "name": "test_file_is_set_in_one_operation_variable",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setting_file_value_in_variables_leaves_other_variables_unchanged": {
            "name": "test_setting_file_value_in_variables_leaves_other_variables_unchanged",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_is_raised_if_operations_value_is_not_a_list_or_dict": {
            "name": "test_error_is_raised_if_operations_value_is_not_a_list_or_dict",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_is_raised_if_map_value_is_not_a_list_or_dict": {
            "name": "test_error_is_raised_if_map_value_is_not_a_list_or_dict",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_is_raised_if_file_paths_value_is_not_a_list": {
            "name": "test_error_is_raised_if_file_paths_value_is_not_a_list",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_is_raised_if_file_paths_list_item_is_not_a_str": {
            "name": "test_error_is_raised_if_file_paths_list_item_is_not_a_str",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_error_is_raised_if_file_described_in_map_is_not_found": {
            "name": "test_error_is_raised_if_file_described_in_map_is_not_found",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_upload_scalar_doesnt_support_serialization": {
            "name": "test_default_upload_scalar_doesnt_support_serialization",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_upload_scalar_doesnt_support_literals": {
            "name": "test_default_upload_scalar_doesnt_support_literals",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_upload_scalar_passes_variable_value_as_is": {
            "name": "test_default_upload_scalar_passes_variable_value_as_is",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_gql_util.py": {
        "test_valid_graphql_schema_string_is_returned_unchanged": {
            "name": "test_valid_graphql_schema_string_is_returned_unchanged",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_graphql_schema_string_causes_syntax_error": {
            "name": "test_invalid_graphql_schema_string_causes_syntax_error",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_graphql_query_string_is_returned_unchanged": {
            "name": "test_valid_graphql_query_string_is_returned_unchanged",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_graphql_query_string_causes_syntax_error": {
            "name": "test_invalid_graphql_query_string_causes_syntax_error",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_graphql.py": {
        "test_graphql_sync_executes_the_query": {
            "name": "test_graphql_sync_executes_the_query",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "int"
                ]
            }
        },
        "test_graphql_sync_uses_validation_rules": {
            "name": "test_graphql_sync_uses_validation_rules",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "int"
                ]
            }
        },
        "test_graphql_sync_prevents_introspection_query_when_option_is_disabled": {
            "name": "test_graphql_sync_prevents_introspection_query_when_option_is_disabled",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "int"
                ]
            }
        },
        "AlwaysInvalid.leave_operation_definition": {
            "name": "leave_operation_definition",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ariadne-master/tests/test_interfaces.py": {
        "schema": {
            "name": "schema",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_attempt_to_bind_interface_to_undefined_type_raises_error": {
            "name": "test_attempt_to_bind_interface_to_undefined_type_raises_error",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Type",
                    "str",
                    "int"
                ]
            }
        },
        "test_attempt_to_bind_interface_to_invalid_type_raises_error": {
            "name": "test_attempt_to_bind_interface_to_invalid_type_raises_error",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Type",
                    "str",
                    "int"
                ]
            }
        },
        "query": {
            "name": "query",
            "location": 73,
            "return": [
                "QueryType"
            ],
            "arguments": {}
        },
        "query_with_user_result": {
            "name": "query_with_user_result",
            "location": 78,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "query_with_thread_result": {
            "name": "query_with_thread_result",
            "location": 84,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "query_with_invalid_result": {
            "name": "query_with_invalid_result",
            "location": 90,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "test_interface_type_resolver_may_be_set_on_initialization": {
            "name": "test_interface_type_resolver_may_be_set_on_initialization",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "query_with_user_result": [
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_interface_type_resolver_may_be_set_using_setter": {
            "name": "test_interface_type_resolver_may_be_set_using_setter",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "query_with_user_result": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "test_interface_type_resolver_may_be_set_using_decorator": {
            "name": "test_interface_type_resolver_may_be_set_using_decorator",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "query_with_user_result": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "resolve_result_type": {
            "name": "resolve_result_type",
            "location": 126,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "obj": []
            }
        },
        "interface": {
            "name": "interface",
            "location": 135,
            "return": [
                "InterfaceType"
            ],
            "arguments": {}
        },
        "test_result_is_username_if_interface_resolves_type_to_user": {
            "name": "test_result_is_username_if_interface_resolves_type_to_user",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "query_with_user_result": [
                    "str",
                    "int",
                    "bytes"
                ],
                "interface": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_result_is_thread_title_if_interface_resolves_type_to_thread": {
            "name": "test_result_is_thread_title_if_interface_resolves_type_to_thread",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "query_with_thread_result": [
                    "typing.Callable[Any,Any, typing.Any]",
                    "str",
                    "int"
                ],
                "interface": [
                    "typing.Callable[Any,Any, typing.Any]",
                    "str",
                    "int"
                ]
            }
        },
        "test_query_errors_if_interface_didnt_resolve_the_type": {
            "name": "test_query_errors_if_interface_didnt_resolve_the_type",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "query_with_invalid_result": [
                    "bool",
                    "str",
                    "dict[str, str]"
                ],
                "interface": [
                    "bool",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "test_attempt_bind_interface_field_to_undefined_field_raises_error": {
            "name": "test_attempt_bind_interface_field_to_undefined_field_raises_error",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Type"
                ],
                "interface": []
            }
        },
        "test_resolver": {
            "name": "test_resolver",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field_decorator_assigns_decorated_function_as_field_resolver": {
            "name": "test_field_decorator_assigns_decorated_function_as_field_resolver",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "query_with_user_result": [],
                "interface": []
            }
        },
        "test_set_field_method_assigns_function_as_field_resolver": {
            "name": "test_set_field_method_assigns_function_as_field_resolver",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "dict[, ]"
                ],
                "query_with_user_result": [],
                "interface": []
            }
        },
        "test_alias_method_creates_resolver_for_specified_attribute": {
            "name": "test_alias_method_creates_resolver_for_specified_attribute",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "dict[, ]"
                ],
                "query_with_user_result": [],
                "interface": []
            }
        },
        "test_interface_doesnt_set_resolver_for_type_not_implementing_it": {
            "name": "test_interface_doesnt_set_resolver_for_type_not_implementing_it",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "interface": []
            }
        },
        "test_interface_sets_resolver_on_implementing_types": {
            "name": "test_interface_sets_resolver_on_implementing_types",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "int"
                ],
                "interface": []
            }
        },
        "test_interface_resolver_doesnt_override_existing_resolver": {
            "name": "test_interface_resolver_doesnt_override_existing_resolver",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[dict[, ]]",
                    "dict[, ]"
                ],
                "interface": []
            }
        },
        "test_interface_type_resolver_may_be_set_using_setter.resolve_result_type": {
            "name": "resolve_result_type",
            "location": 103,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "test_interface_type_resolver_may_be_set_using_decorator.resolve_result_type": {
            "name": "resolve_result_type",
            "location": 118,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "test_interface_resolver_doesnt_override_existing_resolver.interface_resolver": {
            "name": "interface_resolver",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_introspection.py": {
        "test_executable_schema_can_be_introspected": {
            "name": "test_executable_schema_can_be_introspected",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_kwargs_camel_case_conversion.py": {
        "test_decorator_converts_kwargs_to_camel_case": {
            "name": "test_decorator_converts_kwargs_to_camel_case",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decorator_converts_kwargs_to_camel_case_for_mapping": {
            "name": "test_decorator_converts_kwargs_to_camel_case_for_mapping",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_mapping": [
                    "str"
                ]
            }
        },
        "test_decorator_leaves_snake_case_kwargs_unchanged": {
            "name": "test_decorator_leaves_snake_case_kwargs_unchanged",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decorator_converts_objects_in_lists_to_camel_case": {
            "name": "test_decorator_converts_objects_in_lists_to_camel_case",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decorator_converts_mappings_in_lists_to_camel_case": {
            "name": "test_decorator_converts_mappings_in_lists_to_camel_case",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_mapping": [
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_decorator_leaves_primitives_in_lists_unchanged": {
            "name": "test_decorator_leaves_primitives_in_lists_unchanged",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decorator_converts_kwargs_to_camel_case.wrapped_func": {
            "name": "wrapped_func",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decorator_converts_kwargs_to_camel_case_for_mapping.wrapped_func": {
            "name": "wrapped_func",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decorator_leaves_snake_case_kwargs_unchanged.wrapped_func": {
            "name": "wrapped_func",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decorator_converts_objects_in_lists_to_camel_case.wrapped_func": {
            "name": "wrapped_func",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decorator_converts_mappings_in_lists_to_camel_case.wrapped_func": {
            "name": "wrapped_func",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decorator_leaves_primitives_in_lists_unchanged.wrapped_func": {
            "name": "wrapped_func",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_modularization.py": {
        "test_list_of_type_defs_is_merged_into_executable_schema": {
            "name": "test_list_of_type_defs_is_merged_into_executable_schema",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_redefining_existing_type_causes_type_error": {
            "name": "test_redefining_existing_type_causes_type_error",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_same_type_resolver_maps_are_merged_into_executable_schema": {
            "name": "test_same_type_resolver_maps_are_merged_into_executable_schema",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_different_types_resolver_maps_are_merged_into_executable_schema": {
            "name": "test_different_types_resolver_maps_are_merged_into_executable_schema",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_defined_type_can_be_extended_with_new_field": {
            "name": "test_defined_type_can_be_extended_with_new_field",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_bindables_can_be_passed_as_separate_args": {
            "name": "test_multiple_bindables_can_be_passed_as_separate_args",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_same_type_resolver_maps_are_merged_into_executable_schema.resolve_test": {
            "name": "resolve_test",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_mutations.py": {
        "test_executing_mutation_takes_scalar_args_and_returns_scalar_sum": {
            "name": "test_executing_mutation_takes_scalar_args_and_returns_scalar_sum",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_executing_mutation_takes_scalar_arg_and_returns_type": {
            "name": "test_executing_mutation_takes_scalar_arg_and_returns_type",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_executing_mutation_using_input_type": {
            "name": "test_executing_mutation_using_input_type",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_executing_mutation_takes_scalar_arg_and_returns_type.resolve_add_staff": {
            "name": "resolve_add_staff",
            "location": 45,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "test_executing_mutation_using_input_type.resolve_add_staff": {
            "name": "resolve_add_staff",
            "location": 78,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_objects.py": {
        "schema": {
            "name": "schema",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_attempt_bind_object_type_to_undefined_type_raises_error": {
            "name": "test_attempt_bind_object_type_to_undefined_type_raises_error",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int"
                ]
            }
        },
        "test_attempt_bind_object_type_to_invalid_type_raises_error": {
            "name": "test_attempt_bind_object_type_to_invalid_type_raises_error",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int"
                ]
            }
        },
        "test_attempt_bind_object_type_field_to_undefined_field_raises_error": {
            "name": "test_attempt_bind_object_type_field_to_undefined_field_raises_error",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "typing.Callable[, ]",
                    "str",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float"
                ]
            }
        },
        "test_field_resolver_can_be_set_using_decorator": {
            "name": "test_field_resolver_can_be_set_using_decorator",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "dict[, ]"
                ]
            }
        },
        "test_value_error_is_raised_if_field_decorator_was_used_without_argument": {
            "name": "test_value_error_is_raised_if_field_decorator_was_used_without_argument",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field_resolver_can_be_set_using_setter": {
            "name": "test_field_resolver_can_be_set_using_setter",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "dict[, ]"
                ]
            }
        },
        "test_set_alias_method_creates_resolver_for_specified_attribute": {
            "name": "test_set_alias_method_creates_resolver_for_specified_attribute",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        }
    },
    "ariadne-master/tests/test_queries.py": {
        "test_default_resolver_resolves_value_from_dict_item": {
            "name": "test_default_resolver_resolves_value_from_dict_item",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_resolver_resolves_value_from_object_attr": {
            "name": "test_default_resolver_resolves_value_from_object_attr",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_custom_resolver_is_called_to_resolve_custom_type_field_value": {
            "name": "test_custom_resolver_is_called_to_resolve_custom_type_field_value",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_custom_and_default_resolvers_are_combined_to_resolve_custom_type_fields": {
            "name": "test_custom_and_default_resolvers_are_combined_to_resolve_custom_type_fields",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_custom_resolver_is_called_with_arguments_passed_with_query": {
            "name": "test_custom_resolver_is_called_with_arguments_passed_with_query",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_custom_resolver_is_called_with_input_type_value_as_dict": {
            "name": "test_custom_resolver_is_called_with_input_type_value_as_dict",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_custom_resolver_is_called_with_arguments_passed_with_query.resolve_test": {
            "name": "resolve_test",
            "location": 109,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "test_custom_resolver_is_called_with_input_type_value_as_dict.resolve_test": {
            "name": "resolve_test",
            "location": 134,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/test_query_cost_validation.py": {
        "schema": {
            "name": "schema",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "schema_with_costs": {
            "name": "schema_with_costs",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_cost_map_is_used_to_calculate_query_cost": {
            "name": "test_cost_map_is_used_to_calculate_query_cost",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_query_validation_fails_if_cost_map_contains_undefined_type": {
            "name": "test_query_validation_fails_if_cost_map_contains_undefined_type",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_query_validation_fails_if_cost_map_contains_undefined_type_field": {
            "name": "test_query_validation_fails_if_cost_map_contains_undefined_type_field",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_query_validation_fails_if_cost_map_contains_non_object_type": {
            "name": "test_query_validation_fails_if_cost_map_contains_non_object_type",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_cost_directive_is_used_to_calculate_query_cost": {
            "name": "test_cost_directive_is_used_to_calculate_query_cost",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_with_costs": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_field_cost_defined_in_map_is_multiplied_by_value_from_variables": {
            "name": "test_field_cost_defined_in_map_is_multiplied_by_value_from_variables",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_field_cost_defined_in_map_is_multiplied_by_nested_value_from_variables": {
            "name": "test_field_cost_defined_in_map_is_multiplied_by_nested_value_from_variables",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_field_cost_defined_in_map_is_multiplied_by_value_from_literal": {
            "name": "test_field_cost_defined_in_map_is_multiplied_by_value_from_literal",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_field_cost_defined_in_directive_is_multiplied_by_value_from_variables": {
            "name": "test_field_cost_defined_in_directive_is_multiplied_by_value_from_variables",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_with_costs": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_default_values_are_used_to_calculate_query_cost_without_directive_args": {
            "name": "test_default_values_are_used_to_calculate_query_cost_without_directive_args",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_with_costs": [
                    "typing.Callable[, ]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "test_field_cost_defined_in_directive_is_multiplied_by_nested_value_from_variables": {
            "name": "test_field_cost_defined_in_directive_is_multiplied_by_nested_value_from_variables",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_with_costs": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "test_field_cost_defined_in_directive_is_multiplied_by_value_from_literal": {
            "name": "test_field_cost_defined_in_directive_is_multiplied_by_value_from_literal",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_with_costs": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_complex_field_cost_defined_in_map_is_multiplied_by_values_from_variables": {
            "name": "test_complex_field_cost_defined_in_map_is_multiplied_by_values_from_variables",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_complex_field_cost_defined_in_map_is_multiplied_by_values_from_literal": {
            "name": "test_complex_field_cost_defined_in_map_is_multiplied_by_values_from_literal",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_complex_field_cost_multiplication_by_values_from_variables_handles_nulls": {
            "name": "test_complex_field_cost_multiplication_by_values_from_variables_handles_nulls",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_complex_field_cost_multiplication_by_values_from_literals_handles_nulls": {
            "name": "test_complex_field_cost_multiplication_by_values_from_literals_handles_nulls",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_complex_field_cost_multiplication_by_values_from_variables_handles_optional": {
            "name": "test_complex_field_cost_multiplication_by_values_from_variables_handles_optional",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_complex_field_cost_multiplication_by_values_from_literals_handles_optional": {
            "name": "test_complex_field_cost_multiplication_by_values_from_literals_handles_optional",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_complex_field_cost_defined_in_directive_is_multiplied_by_values_from_variables": {
            "name": "test_complex_field_cost_defined_in_directive_is_multiplied_by_values_from_variables",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_with_costs": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_complex_field_cost_defined_in_directive_is_multiplied_by_values_from_literal": {
            "name": "test_complex_field_cost_defined_in_directive_is_multiplied_by_values_from_literal",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_with_costs": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_child_field_cost_defined_in_map_is_multiplied_by_values_from_variables": {
            "name": "test_child_field_cost_defined_in_map_is_multiplied_by_values_from_variables",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_child_field_cost_defined_in_map_is_multiplied_by_values_from_literal": {
            "name": "test_child_field_cost_defined_in_map_is_multiplied_by_values_from_literal",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_child_field_cost_defined_in_directive_is_multiplied_by_values_from_variables": {
            "name": "test_child_field_cost_defined_in_directive_is_multiplied_by_values_from_variables",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_with_costs": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_child_field_cost_defined_in_directive_is_multiplied_by_values_from_literal": {
            "name": "test_child_field_cost_defined_in_directive_is_multiplied_by_values_from_literal",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_with_costs": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "ariadne-master/tests/test_schema_file_load.py": {
        "single_file_schema": {
            "name": "single_file_schema",
            "location": 20,
            "return": [],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_load_schema_from_single_file": {
            "name": "test_load_schema_from_single_file",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "single_file_schema": [
                    "str"
                ]
            }
        },
        "incorrect_schema_file": {
            "name": "incorrect_schema_file",
            "location": 42,
            "return": [],
            "arguments": {
                "tmpdir_factory": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_loading_schema_fails_on_bad_syntax": {
            "name": "test_loading_schema_fails_on_bad_syntax",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "incorrect_schema_file": []
            }
        },
        "schema_directory": {
            "name": "schema_directory",
            "location": 62,
            "return": [],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "test_loading_schema_from_directory": {
            "name": "test_loading_schema_from_directory",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_directory": []
            }
        },
        "schema_nested_directories": {
            "name": "schema_nested_directories",
            "location": 78,
            "return": [],
            "arguments": {
                "tmp_path_factory": []
            }
        },
        "test_loading_schema_from_nested_directories": {
            "name": "test_loading_schema_from_nested_directories",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_nested_directories": []
            }
        }
    },
    "ariadne-master/tests/test_schema_visitor.py": {
        "test_visitor": {
            "name": "test_visitor",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_check_if_a_visitor_method_is_implemented": {
            "name": "test_can_check_if_a_visitor_method_is_implemented",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_visitor.SimpleVisitor.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "test_visitor.SimpleVisitor.visit": {
            "name": "visit",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_visitor.SimpleVisitor.visit_object": {
            "name": "visit_object",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_": []
            }
        },
        "test_can_check_if_a_visitor_method_is_implemented.Visitor.not_visitor_method": {
            "name": "not_visitor_method",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_can_check_if_a_visitor_method_is_implemented.Visitor.visit_object": {
            "name": "visit_object",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "object_": []
            }
        }
    },
    "ariadne-master/tests/test_subscriptions.py": {
        "schema": {
            "name": "schema",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_field_source_can_be_set_using_setter": {
            "name": "test_field_source_can_be_set_using_setter",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "test_field_source_can_be_set_using_decorator": {
            "name": "test_field_source_can_be_set_using_decorator",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "test_value_error_is_raised_if_source_decorator_was_used_without_argument": {
            "name": "test_value_error_is_raised_if_source_decorator_was_used_without_argument",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_attempt_bind_subscription_to_undefined_field_raises_error": {
            "name": "test_attempt_bind_subscription_to_undefined_field_raises_error",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        }
    },
    "ariadne-master/tests/test_unions.py": {
        "schema": {
            "name": "schema",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_attempt_to_bind_union_to_undefined_type_raises_error": {
            "name": "test_attempt_to_bind_union_to_undefined_type_raises_error",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Type",
                    "str",
                    "int"
                ]
            }
        },
        "test_attempt_to_bind_union_to_invalid_type_raises_error": {
            "name": "test_attempt_to_bind_union_to_invalid_type_raises_error",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "typing.Type",
                    "str",
                    "int"
                ]
            }
        },
        "query": {
            "name": "query",
            "location": 61,
            "return": [
                "QueryType"
            ],
            "arguments": {}
        },
        "query_with_user_item": {
            "name": "query_with_user_item",
            "location": 66,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "query_with_thread_item": {
            "name": "query_with_thread_item",
            "location": 72,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "query_with_invalid_item": {
            "name": "query_with_invalid_item",
            "location": 78,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "test_union_type_resolver_may_be_set_on_initialization": {
            "name": "test_union_type_resolver_may_be_set_on_initialization",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "query_with_user_item": [
                    "typing.Type",
                    "typing.IO"
                ]
            }
        },
        "test_union_type_resolver_may_be_set_using_setter": {
            "name": "test_union_type_resolver_may_be_set_using_setter",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "query_with_user_item": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_union_type_resolver_may_be_set_using_decorator": {
            "name": "test_union_type_resolver_may_be_set_using_decorator",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "query_with_user_item": [
                    "str",
                    "bool"
                ]
            }
        },
        "resolve_result_type": {
            "name": "resolve_result_type",
            "location": 114,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "obj": []
            }
        },
        "test_result_is_username_if_union_resolves_type_to_user": {
            "name": "test_result_is_username_if_union_resolves_type_to_user",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "query_with_user_item": [
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "test_result_is_thread_title_if_union_resolves_type_to_thread": {
            "name": "test_result_is_thread_title_if_union_resolves_type_to_thread",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "query_with_thread_item": [
                    "str",
                    "bool",
                    "dict[typing.Hashable, typing.Any]",
                    "None",
                    "dict[str, list[str]]",
                    "list[]",
                    "set[]"
                ]
            }
        },
        "test_result_is_none_if_union_didnt_resolve_the_type": {
            "name": "test_result_is_none_if_union_didnt_resolve_the_type",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "query_with_invalid_item": [
                    "bool",
                    "str",
                    "dict[str, list[str]]"
                ]
            }
        },
        "test_union_type_resolver_may_be_set_using_setter.resolve_result_type": {
            "name": "resolve_result_type",
            "location": 91,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "test_union_type_resolver_may_be_set_using_decorator.resolve_result_type": {
            "name": "resolve_result_type",
            "location": 106,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/__init__.py": {},
    "ariadne-master/tests/asgi/conftest.py": {
        "app": {
            "name": "app",
            "location": 10,
            "return": [
                "GraphQL"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str"
                ]
            }
        },
        "app_with_tracing": {
            "name": "app_with_tracing",
            "location": 15,
            "return": [
                "GraphQL"
            ],
            "arguments": {
                "schema": [
                    "bool"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 23,
            "return": [
                "TestClient"
            ],
            "arguments": {
                "app": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "client_for_tracing": {
            "name": "client_for_tracing",
            "location": 28,
            "return": [
                "TestClient"
            ],
            "arguments": {
                "app_with_tracing": []
            }
        },
        "app_with_tracing.dummy_filter": {
            "name": "dummy_filter",
            "location": 16,
            "return": [],
            "arguments": {
                "args": [],
                "_": []
            }
        }
    },
    "ariadne-master/tests/asgi/test_configuration.py": {
        "test_custom_context_value_is_passed_to_resolvers": {
            "name": "test_custom_context_value_is_passed_to_resolvers",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_context_value_function_is_set_and_called_by_app": {
            "name": "test_custom_context_value_function_is_set_and_called_by_app",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_context_value_function_result_is_passed_to_resolvers": {
            "name": "test_custom_context_value_function_result_is_passed_to_resolvers",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_async_context_value_function_result_is_awaited_before_passing_to_resolvers": {
            "name": "test_async_context_value_function_result_is_awaited_before_passing_to_resolvers",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_root_value_is_passed_to_query_resolvers": {
            "name": "test_custom_root_value_is_passed_to_query_resolvers",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_root_value_is_passed_to_subscription_resolvers": {
            "name": "test_custom_root_value_is_passed_to_subscription_resolvers",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_root_value_function_is_called_by_query": {
            "name": "test_custom_root_value_function_is_called_by_query",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_root_value_function_is_called_by_subscription": {
            "name": "test_custom_root_value_function_is_called_by_subscription",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_root_value_function_is_called_with_context_value": {
            "name": "test_custom_root_value_function_is_called_with_context_value",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_validation_rule_is_called_by_query_validation": {
            "name": "test_custom_validation_rule_is_called_by_query_validation",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "schema": [],
                "validation_rule": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_custom_validation_rules_function_is_set_and_called_on_query_execution": {
            "name": "test_custom_validation_rules_function_is_set_and_called_on_query_execution",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "schema": [],
                "validation_rule": [
                    "int"
                ]
            }
        },
        "test_custom_validation_rules_function_is_called_with_context_value": {
            "name": "test_custom_validation_rules_function_is_called_with_context_value",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "validation_rule": []
            }
        },
        "execute_failing_query": {
            "name": "execute_failing_query",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_default_logger_is_used_to_log_error_if_custom_is_not_set": {
            "name": "test_default_logger_is_used_to_log_error_if_custom_is_not_set",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "mocker": []
            }
        },
        "test_custom_logger_is_used_to_log_query_error": {
            "name": "test_custom_logger_is_used_to_log_query_error",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "mocker": []
            }
        },
        "test_custom_logger_is_used_to_log_subscription_source_error": {
            "name": "test_custom_logger_is_used_to_log_subscription_source_error",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "mocker": []
            }
        },
        "test_custom_logger_is_used_to_log_subscription_resolver_error": {
            "name": "test_custom_logger_is_used_to_log_subscription_resolver_error",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "mocker": []
            }
        },
        "test_custom_error_formatter_is_used_to_format_query_error": {
            "name": "test_custom_error_formatter_is_used_to_format_query_error",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_error_formatter_is_used_to_format_subscription_syntax_error": {
            "name": "test_custom_error_formatter_is_used_to_format_subscription_syntax_error",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_error_formatter_is_used_to_format_subscription_source_error": {
            "name": "test_custom_error_formatter_is_used_to_format_subscription_source_error",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_error_formatter_is_used_to_format_subscription_resolver_error": {
            "name": "test_custom_error_formatter_is_used_to_format_subscription_resolver_error",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_error_formatter_is_called_with_debug_enabled": {
            "name": "test_error_formatter_is_called_with_debug_enabled",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_error_formatter_is_called_with_debug_disabled": {
            "name": "test_error_formatter_is_called_with_debug_disabled",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_extension_from_option_are_passed_to_query_executor": {
            "name": "test_extension_from_option_are_passed_to_query_executor",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_extensions_function_result_is_passed_to_query_executor": {
            "name": "test_extensions_function_result_is_passed_to_query_executor",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_async_extensions_function_result_is_passed_to_query_executor": {
            "name": "test_async_extensions_function_result_is_passed_to_query_executor",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "middleware": {
            "name": "middleware",
            "location": 323,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "next_fn": [
                    "str",
                    "typing.Type",
                    "typing.IO"
                ]
            }
        },
        "test_middlewares_are_passed_to_query_executor": {
            "name": "test_middlewares_are_passed_to_query_executor",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_middleware_function_result_is_passed_to_query_executor": {
            "name": "test_middleware_function_result_is_passed_to_query_executor",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_async_middleware_function_result_is_passed_to_query_executor": {
            "name": "test_async_middleware_function_result_is_passed_to_query_executor",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_extensions_function_result_is_passed_to_query_executor.get_extensions": {
            "name": "get_extensions",
            "location": 304,
            "return": [
                "list[CustomExtension]"
            ],
            "arguments": {}
        },
        "test_middleware_function_result_is_passed_to_query_executor.get_middleware": {
            "name": "get_middleware",
            "location": 336,
            "return": [
                "list[]"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/asgi/test_http_methods.py": {
        "test_options_method_is_supported": {
            "name": "test_options_method_is_supported",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_options_response_excludes_get_if_introspection_is_disabled": {
            "name": "test_options_response_excludes_get_if_introspection_is_disabled",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_patch_is_not_supported": {
            "name": "test_patch_is_not_supported",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_put_is_not_supported": {
            "name": "test_put_is_not_supported",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_delete_is_not_supported": {
            "name": "test_delete_is_not_supported",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_unsupported_method_response_excludes_get_if_introspection_is_disabled": {
            "name": "test_unsupported_method_response_excludes_get_if_introspection_is_disabled",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        }
    },
    "ariadne-master/tests/asgi/test_playground.py": {
        "test_playground_html_is_served_on_get_request": {
            "name": "test_playground_html_is_served_on_get_request",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "snapshot": []
            }
        }
    },
    "ariadne-master/tests/asgi/test_query_execution.py": {
        "test_query_is_executed_for_post_json_request": {
            "name": "test_query_is_executed_for_post_json_request",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_complex_query_is_executed_for_post_json_request": {
            "name": "test_complex_query_is_executed_for_post_json_request",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_complex_query_without_operation_name_executes_successfully": {
            "name": "test_complex_query_without_operation_name_executes_successfully",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_attempt_execute_complex_query_without_variables_returns_error_json": {
            "name": "test_attempt_execute_complex_query_without_variables_returns_error_json",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_attempt_execute_query_without_query_entry_returns_error_json": {
            "name": "test_attempt_execute_query_without_query_entry_returns_error_json",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_attempt_execute_query_with_non_string_query_returns_error_json": {
            "name": "test_attempt_execute_query_with_non_string_query_returns_error_json",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_attempt_execute_query_with_invalid_variables_returns_error_json": {
            "name": "test_attempt_execute_query_with_invalid_variables_returns_error_json",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_attempt_execute_query_with_invalid_operation_name_string_returns_error_json": {
            "name": "test_attempt_execute_query_with_invalid_operation_name_string_returns_error_json",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_attempt_execute_query_with_invalid_operation_name_type_returns_error_json": {
            "name": "test_attempt_execute_query_with_invalid_operation_name_type_returns_error_json",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_attempt_execute_subscription_with_invalid_query_returns_error_json": {
            "name": "test_attempt_execute_subscription_with_invalid_query_returns_error_json",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_query_is_executed_for_multipart_form_request_with_file": {
            "name": "test_query_is_executed_for_multipart_form_request_with_file",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "client_for_tracing": [],
                "snapshot": []
            }
        },
        "test_query_is_executed_for_multipart_request_with_large_file_with_tracing": {
            "name": "test_query_is_executed_for_multipart_request_with_large_file_with_tracing",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "client_for_tracing": [],
                "snapshot": []
            }
        },
        "test_middlewares_and_extensions_are_combined_in_correct_order": {
            "name": "test_middlewares_and_extensions_are_combined_in_correct_order",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_middlewares_and_extensions_are_combined_in_correct_order.test_middleware": {
            "name": "test_middleware",
            "location": 176,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "next_fn": []
            }
        }
    },
    "ariadne-master/tests/asgi/test_request_data_reading.py": {
        "test_attempt_parse_request_missing_content_type_raises_bad_request_error": {
            "name": "test_attempt_parse_request_missing_content_type_raises_bad_request_error",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_attempt_parse_non_json_request_raises_bad_request_error": {
            "name": "test_attempt_parse_non_json_request_raises_bad_request_error",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_attempt_parse_non_json_request_body_raises_bad_request_error": {
            "name": "test_attempt_parse_non_json_request_body_raises_bad_request_error",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_attempt_parse_json_scalar_request_raises_graphql_bad_request_error": {
            "name": "test_attempt_parse_json_scalar_request_raises_graphql_bad_request_error",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_attempt_parse_json_array_request_raises_graphql_bad_request_error": {
            "name": "test_attempt_parse_json_array_request_raises_graphql_bad_request_error",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_multipart_form_request_fails_if_operations_is_not_valid_json": {
            "name": "test_multipart_form_request_fails_if_operations_is_not_valid_json",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        },
        "test_multipart_form_request_fails_if_map_is_not_valid_json": {
            "name": "test_multipart_form_request_fails_if_map_is_not_valid_json",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "snapshot": []
            }
        }
    },
    "ariadne-master/tests/asgi/test_websockets.py": {
        "test_field_can_be_subscribed_using_websocket_connection": {
            "name": "test_field_can_be_subscribed_using_websocket_connection",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_field_can_be_subscribed_using_unnamed_operation_in_websocket_connection": {
            "name": "test_field_can_be_subscribed_using_unnamed_operation_in_websocket_connection",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_field_can_be_subscribed_using_named_operation_in_websocket_connection": {
            "name": "test_field_can_be_subscribed_using_named_operation_in_websocket_connection",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_immediate_disconnect": {
            "name": "test_immediate_disconnect",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_stop": {
            "name": "test_stop",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_custom_websocket_on_connect_is_called": {
            "name": "test_custom_websocket_on_connect_is_called",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_on_connect_is_called_with_payload": {
            "name": "test_custom_websocket_on_connect_is_called_with_payload",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_on_connect_is_awaited_if_its_async": {
            "name": "test_custom_websocket_on_connect_is_awaited_if_its_async",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_error_in_custom_websocket_on_connect_is_handled": {
            "name": "test_error_in_custom_websocket_on_connect_is_handled",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_connection_error_in_custom_websocket_on_connect_is_handled": {
            "name": "test_custom_websocket_connection_error_in_custom_websocket_on_connect_is_handled",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_on_operation_is_called": {
            "name": "test_custom_websocket_on_operation_is_called",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_on_operation_is_awaited_if_its_async": {
            "name": "test_custom_websocket_on_operation_is_awaited_if_its_async",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_error_in_custom_websocket_on_operation_is_handled": {
            "name": "test_error_in_custom_websocket_on_operation_is_handled",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_on_complete_is_called_on_stop": {
            "name": "test_custom_websocket_on_complete_is_called_on_stop",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_on_complete_is_called_on_terminate": {
            "name": "test_custom_websocket_on_complete_is_called_on_terminate",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_on_complete_is_called_on_disconnect": {
            "name": "test_custom_websocket_on_complete_is_called_on_disconnect",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_on_complete_is_awaited_if_its_async": {
            "name": "test_custom_websocket_on_complete_is_awaited_if_its_async",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_error_in_custom_websocket_on_complete_is_handled": {
            "name": "test_error_in_custom_websocket_on_complete_is_handled",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_on_disconnect_is_called_on_terminate_message": {
            "name": "test_custom_websocket_on_disconnect_is_called_on_terminate_message",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_on_disconnect_is_called_on_connection_close": {
            "name": "test_custom_websocket_on_disconnect_is_called_on_connection_close",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_on_disconnect_is_awaited_if_its_async": {
            "name": "test_custom_websocket_on_disconnect_is_awaited_if_its_async",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_error_in_custom_websocket_on_disconnect_is_handled": {
            "name": "test_error_in_custom_websocket_on_disconnect_is_handled",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_websocket_on_connect_is_called.on_connect": {
            "name": "on_connect",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "websocket": [],
                "payload": []
            }
        },
        "test_custom_websocket_on_connect_is_called_with_payload.on_connect": {
            "name": "on_connect",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "websocket": [],
                "payload": []
            }
        },
        "test_error_in_custom_websocket_on_connect_is_handled.on_connect": {
            "name": "on_connect",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "websocket": [],
                "payload": []
            }
        },
        "test_custom_websocket_connection_error_in_custom_websocket_on_connect_is_handled.on_connect": {
            "name": "on_connect",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "websocket": [],
                "payload": []
            }
        },
        "test_custom_websocket_on_operation_is_called.on_operation": {
            "name": "on_operation",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "websocket": [],
                "operation": []
            }
        },
        "test_custom_websocket_on_complete_is_called_on_stop.on_complete": {
            "name": "on_complete",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "websocket": [],
                "operation": []
            }
        },
        "test_custom_websocket_on_complete_is_called_on_terminate.on_complete": {
            "name": "on_complete",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "websocket": [],
                "operation": []
            }
        },
        "test_custom_websocket_on_complete_is_called_on_disconnect.on_complete": {
            "name": "on_complete",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "websocket": [],
                "operation": []
            }
        },
        "test_custom_websocket_on_disconnect_is_called_on_terminate_message.on_disconnect": {
            "name": "on_disconnect",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "websocket": []
            }
        },
        "test_custom_websocket_on_disconnect_is_called_on_connection_close.on_disconnect": {
            "name": "on_disconnect",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "websocket": []
            }
        }
    },
    "ariadne-master/tests/asgi/__init__.py": {},
    "ariadne-master/tests/asgi/snapshots/snap_test_playground.py": {},
    "ariadne-master/tests/asgi/snapshots/snap_test_query_execution.py": {},
    "ariadne-master/tests/asgi/snapshots/snap_test_request_data_reading.py": {},
    "ariadne-master/tests/asgi/snapshots/__init__.py": {},
    "ariadne-master/tests/federation/test_interfaces.py": {
        "schema": {
            "name": "schema",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_bind_interface_to_undefined_type_raises_error": {
            "name": "test_bind_interface_to_undefined_type_raises_error",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "list[]"
                ]
            }
        },
        "test_bind_interface_to_invalid_type_raises_error": {
            "name": "test_bind_interface_to_invalid_type_raises_error",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "list[]"
                ]
            }
        },
        "test_reference_resolver_can_be_set_using_decorator": {
            "name": "test_reference_resolver_can_be_set_using_decorator",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_reference_resolver_can_be_set_using_setter": {
            "name": "test_reference_resolver_can_be_set_using_setter",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_reference_resolver_can_be_set_on_both_interface_and_type": {
            "name": "test_reference_resolver_can_be_set_on_both_interface_and_type",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "float"
                ]
            }
        },
        "test_reference_resolver_can_be_set_using_decorator.resolve_result_type": {
            "name": "resolve_result_type",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "test_reference_resolver_can_be_set_using_setter.resolve_result_type": {
            "name": "resolve_result_type",
            "location": 79,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "test_reference_resolver_can_be_set_on_both_interface_and_type.resolve_result_type": {
            "name": "resolve_result_type",
            "location": 109,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/federation/test_objects.py": {
        "schema": {
            "name": "schema",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_bind_federated_object_type_to_undefined_type_raises_error": {
            "name": "test_bind_federated_object_type_to_undefined_type_raises_error",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int"
                ]
            }
        },
        "test_bind_federated_object_type_to_invalid_type_raises_error": {
            "name": "test_bind_federated_object_type_to_invalid_type_raises_error",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int"
                ]
            }
        },
        "test_reference_resolver_can_be_set_using_decorator": {
            "name": "test_reference_resolver_can_be_set_using_decorator",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_reference_resolver_can_be_set_using_setter": {
            "name": "test_reference_resolver_can_be_set_using_setter",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "ariadne-master/tests/federation/test_schema.py": {
        "test_federated_schema_mark_type_with_key": {
            "name": "test_federated_schema_mark_type_with_key",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_mark_type_with_key_split_type_defs": {
            "name": "test_federated_schema_mark_type_with_key_split_type_defs",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_mark_type_with_multiple_keys": {
            "name": "test_federated_schema_mark_type_with_multiple_keys",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_not_mark_type_with_no_keys": {
            "name": "test_federated_schema_not_mark_type_with_no_keys",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_type_with_multiple_keys": {
            "name": "test_federated_schema_type_with_multiple_keys",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_mark_interface_with_key": {
            "name": "test_federated_schema_mark_interface_with_key",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_mark_interface_with_multiple_keys": {
            "name": "test_federated_schema_mark_interface_with_multiple_keys",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_augment_root_query_with_type_key": {
            "name": "test_federated_schema_augment_root_query_with_type_key",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_augment_root_query_with_interface_key": {
            "name": "test_federated_schema_augment_root_query_with_interface_key",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_augment_root_query_with_no_keys": {
            "name": "test_federated_schema_augment_root_query_with_no_keys",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_execute_reference_resolver": {
            "name": "test_federated_schema_execute_reference_resolver",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_execute_reference_resolver_with_multiple_keys": {
            "name": "test_federated_schema_execute_reference_resolver_with_multiple_keys",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "primary_key": [
                    "str",
                    "int"
                ]
            }
        },
        "test_federated_schema_execute_default_reference_resolver": {
            "name": "test_federated_schema_execute_default_reference_resolver",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_execute_reference_resolver_that_returns_none": {
            "name": "test_federated_schema_execute_reference_resolver_that_returns_none",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_raises_error_on_missing_type": {
            "name": "test_federated_schema_raises_error_on_missing_type",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_query_service_with_key": {
            "name": "test_federated_schema_query_service_with_key",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_query_service_with_multiple_keys": {
            "name": "test_federated_schema_query_service_with_multiple_keys",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_query_service_provide_federation_directives": {
            "name": "test_federated_schema_query_service_provide_federation_directives",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_query_service_ignore_custom_directives": {
            "name": "test_federated_schema_query_service_ignore_custom_directives",
            "location": 775,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_without_query_is_valid": {
            "name": "test_federated_schema_without_query_is_valid",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federation_2_0_version_is_detected_in_schema": {
            "name": "test_federation_2_0_version_is_detected_in_schema",
            "location": 841,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_federated_schema_execute_reference_resolver.product_reference_resolver": {
            "name": "product_reference_resolver",
            "location": 312,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "_obj": [],
                "_info": [],
                "reference": []
            }
        },
        "test_federated_schema_execute_reference_resolver.user_reference_resolver": {
            "name": "user_reference_resolver",
            "location": 319,
            "return": [
                "Mock"
            ],
            "arguments": {
                "_obj": [],
                "_info": [],
                "reference": []
            }
        },
        "test_federated_schema_execute_reference_resolver_with_multiple_keys.product_reference_resolver": {
            "name": "product_reference_resolver",
            "location": 383,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "_obj": [],
                "_info": [],
                "reference": []
            }
        },
        "test_federated_schema_execute_reference_resolver_with_multiple_keys.user_reference_resolver": {
            "name": "user_reference_resolver",
            "location": 390,
            "return": [
                "Mock"
            ],
            "arguments": {
                "_obj": [],
                "_info": [],
                "reference": []
            }
        },
        "test_federated_schema_execute_reference_resolver_that_returns_none.product_reference_resolver": {
            "name": "product_reference_resolver",
            "location": 555,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "_obj": [],
                "_info": [],
                "reference": []
            }
        }
    },
    "ariadne-master/tests/federation/test_utils.py": {
        "test_purge_directives_retain_federation_directives": {
            "name": "test_purge_directives_retain_federation_directives",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_purge_directives_retain_builtin_directives": {
            "name": "test_purge_directives_retain_builtin_directives",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_purge_directives_remove_custom_directives": {
            "name": "test_purge_directives_remove_custom_directives",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_purge_directives_remove_custom_directives_with_block_string_description": {
            "name": "test_purge_directives_remove_custom_directives_with_block_string_description",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_purge_directives_remove_custom_directives_with_single_line_description": {
            "name": "test_purge_directives_remove_custom_directives_with_single_line_description",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_entity_types_with_key_directive": {
            "name": "test_get_entity_types_with_key_directive",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_includes_directive": {
            "name": "test_includes_directive",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gather_directives": {
            "name": "test_gather_directives",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_typename_to_dict": {
            "name": "test_add_typename_to_dict",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_typename_to_object": {
            "name": "test_add_typename_to_object",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/federation/__init__.py": {},
    "ariadne-master/tests/snapshots/__init__.py": {},
    "ariadne-master/tests/tracing/test_apollotracing.py": {
        "freeze_microtime": {
            "name": "freeze_microtime",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "ariadne-master/tests/tracing/test_apollotracing_sync.py": {
        "freeze_microtime": {
            "name": "freeze_microtime",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "ariadne-master/tests/tracing/test_opentracing.py": {
        "global_tracer_mock": {
            "name": "global_tracer_mock",
            "location": 16,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "active_span_mock": {
            "name": "active_span_mock",
            "location": 21,
            "return": [],
            "arguments": {
                "global_tracer_mock": []
            }
        },
        "test_resolver_args_filter_handles_uploaded_files_from_asgi.arg_filter": {
            "name": "arg_filter",
            "location": 123,
            "return": [],
            "arguments": {
                "args": [],
                "_": []
            }
        }
    },
    "ariadne-master/tests/tracing/test_opentracing_sync.py": {
        "global_tracer_mock": {
            "name": "global_tracer_mock",
            "location": 20,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "active_span_mock": {
            "name": "active_span_mock",
            "location": 25,
            "return": [],
            "arguments": {
                "global_tracer_mock": []
            }
        },
        "test_opentracing_extension_causes_no_errors_in_query_execution": {
            "name": "test_opentracing_extension_causes_no_errors_in_query_execution",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "int"
                ]
            }
        },
        "test_opentracing_extension_uses_global_tracer": {
            "name": "test_opentracing_extension_uses_global_tracer",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int"
                ],
                "global_tracer_mock": []
            }
        },
        "test_opentracing_extension_creates_span_for_query_root": {
            "name": "test_opentracing_extension_creates_span_for_query_root",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "global_tracer_mock": [
                    "str"
                ]
            }
        },
        "test_opentracing_extension_creates_span_for_field": {
            "name": "test_opentracing_extension_creates_span_for_field",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "global_tracer_mock": [
                    "str"
                ]
            }
        },
        "test_opentracing_extension_sets_graphql_component_tag_on_root_span": {
            "name": "test_opentracing_extension_sets_graphql_component_tag_on_root_span",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "active_span_mock": []
            }
        },
        "test_opentracing_extension_calls_custom_arg_filter": {
            "name": "test_opentracing_extension_calls_custom_arg_filter",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "mocker": []
            }
        },
        "test_opentracing_extension_sets_filtered_args_on_span": {
            "name": "test_opentracing_extension_sets_filtered_args_on_span",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "tuple[typing.Union[str,dict[, ]]]"
                ],
                "active_span_mock": [],
                "mocker": []
            }
        },
        "test_opentracing_extension_handles_errors_in_resolvers": {
            "name": "test_opentracing_extension_handles_errors_in_resolvers",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "int"
                ]
            }
        },
        "test_opentracing_extension_doesnt_break_introspection": {
            "name": "test_opentracing_extension_doesnt_break_introspection",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_resolver_args_filter_handles_uploaded_files_from_wsgi": {
            "name": "test_resolver_args_filter_handles_uploaded_files_from_wsgi",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_resolver_args_with_uploaded_files_from_wsgi_are_copied_for_tracing": {
            "name": "test_resolver_args_with_uploaded_files_from_wsgi_are_copied_for_tracing",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resolver_args_filter_handles_uploaded_files_from_wsgi.arg_filter": {
            "name": "arg_filter",
            "location": 115,
            "return": [],
            "arguments": {
                "args": [],
                "_": []
            }
        }
    },
    "ariadne-master/tests/tracing/test_utils.py": {
        "test_util_formats_info_path_value_into_reversed_list": {
            "name": "test_util_formats_info_path_value_into_reversed_list",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_introspection_check_returns_true_for_introspection_field": {
            "name": "test_introspection_check_returns_true_for_introspection_field",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_introspection_check_returns_true_for_child_field_of_introspection_field": {
            "name": "test_introspection_check_returns_true_for_child_field_of_introspection_field",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_introspection_check_returns_false_for_non_introspection_field": {
            "name": "test_introspection_check_returns_false_for_non_introspection_field",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_introspection_check_returns_false_for__field": {
            "name": "test_introspection_check_returns_false_for__field",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_introspection_field_is_excluded_from_tracing": {
            "name": "test_introspection_field_is_excluded_from_tracing",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field_with_default_resolver_is_excluded_from_tracing_by_default": {
            "name": "test_field_with_default_resolver_is_excluded_from_tracing_by_default",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field_with_default_resolver_is_included_in_tracing_when_set": {
            "name": "test_field_with_default_resolver_is_included_in_tracing_when_set",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_field_with_custom_resolver_is_included_in_tracing": {
            "name": "test_field_with_custom_resolver_is_included_in_tracing",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/tracing/__init__.py": {},
    "ariadne-master/tests/tracing/snapshots/snap_test_apollotracing.py": {},
    "ariadne-master/tests/tracing/snapshots/snap_test_apollotracing_sync.py": {},
    "ariadne-master/tests/tracing/snapshots/__init__.py": {},
    "ariadne-master/tests/wsgi/conftest.py": {
        "client": {
            "name": "client",
            "location": 12,
            "return": [
                "Client"
            ],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        },
        "graphql_response_headers": {
            "name": "graphql_response_headers",
            "location": 17,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "error_response_headers": {
            "name": "error_response_headers",
            "location": 22,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {}
        },
        "app_mock": {
            "name": "app_mock",
            "location": 27,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "start_response": {
            "name": "start_response",
            "location": 32,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "server": {
            "name": "server",
            "location": 37,
            "return": [
                "GraphQL"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "middleware": {
            "name": "middleware",
            "location": 42,
            "return": [
                "GraphQLMiddleware"
            ],
            "arguments": {
                "app_mock": [],
                "server": []
            }
        },
        "middleware_request": {
            "name": "middleware_request",
            "location": 47,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "graphql_query_request_factory": {
            "name": "graphql_query_request_factory",
            "location": 52,
            "return": [],
            "arguments": {
                "middleware_request": [
                    "dict[str, typing.Union[str,int]]",
                    "list[str]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "assert_json_response_equals_snapshot": {
            "name": "assert_json_response_equals_snapshot",
            "location": 93,
            "return": [],
            "arguments": {
                "snapshot": [
                    "bool",
                    "bytes",
                    "typing.Iterable[str]"
                ]
            }
        },
        "graphql_query_request_factory.wrapped_graphql_query_request_factory": {
            "name": "wrapped_graphql_query_request_factory",
            "location": 53,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,None,int,StringIO]]"
            ],
            "arguments": {
                "raw_data": [],
                "query": [
                    "None"
                ],
                "operationName": [
                    "None"
                ],
                "variables": [
                    "None"
                ],
                "content_type": [
                    "typing.Text"
                ],
                "content_length": [
                    "None"
                ]
            }
        },
        "assert_json_response_equals_snapshot.assertion": {
            "name": "assertion",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "reponse": []
            }
        }
    },
    "ariadne-master/tests/wsgi/factories.py": {
        "create_multipart_request": {
            "name": "create_multipart_request",
            "location": 4,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int,BytesIO]]"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "ariadne-master/tests/wsgi/test_configuration.py": {
        "test_custom_context_value_is_passed_to_resolvers": {
            "name": "test_custom_context_value_is_passed_to_resolvers",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_context_value_function_is_set_and_called_by_app": {
            "name": "test_custom_context_value_function_is_set_and_called_by_app",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_context_value_function_is_called_with_request_value": {
            "name": "test_custom_context_value_function_is_called_with_request_value",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_context_value_function_result_is_passed_to_resolvers": {
            "name": "test_custom_context_value_function_result_is_passed_to_resolvers",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_root_value_is_passed_to_resolvers": {
            "name": "test_custom_root_value_is_passed_to_resolvers",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_root_value_function_is_set_and_called_by_app": {
            "name": "test_custom_root_value_function_is_set_and_called_by_app",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_root_value_function_is_called_with_context_value": {
            "name": "test_custom_root_value_function_is_called_with_context_value",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_custom_validation_rule_is_called_by_query_validation": {
            "name": "test_custom_validation_rule_is_called_by_query_validation",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "schema": [],
                "validation_rule": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_custom_validation_rules_function_is_set_and_called_on_query_execution": {
            "name": "test_custom_validation_rules_function_is_set_and_called_on_query_execution",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "schema": [],
                "validation_rule": [
                    "int"
                ]
            }
        },
        "test_custom_validation_rules_function_is_called_with_context_value": {
            "name": "test_custom_validation_rules_function_is_called_with_context_value",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "validation_rule": []
            }
        },
        "execute_failing_query": {
            "name": "execute_failing_query",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_default_logger_is_used_to_log_error_if_custom_is_not_set": {
            "name": "test_default_logger_is_used_to_log_error_if_custom_is_not_set",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "mocker": []
            }
        },
        "test_custom_logger_is_used_to_log_error": {
            "name": "test_custom_logger_is_used_to_log_error",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [],
                "mocker": []
            }
        },
        "test_custom_error_formatter_is_used_to_format_error": {
            "name": "test_custom_error_formatter_is_used_to_format_error",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_error_formatter_is_called_with_debug_enabled_flag": {
            "name": "test_error_formatter_is_called_with_debug_enabled_flag",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_error_formatter_is_called_with_debug_disabled_flag": {
            "name": "test_error_formatter_is_called_with_debug_disabled_flag",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_extension_from_option_are_passed_to_query_executor": {
            "name": "test_extension_from_option_are_passed_to_query_executor",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_extensions_function_result_is_passed_to_query_executor": {
            "name": "test_extensions_function_result_is_passed_to_query_executor",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "middleware": {
            "name": "middleware",
            "location": 174,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "next_fn": [
                    "str",
                    "typing.Type",
                    "typing.IO"
                ]
            }
        },
        "test_middlewares_are_passed_to_query_executor": {
            "name": "test_middlewares_are_passed_to_query_executor",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_middleware_function_result_is_passed_to_query_executor": {
            "name": "test_middleware_function_result_is_passed_to_query_executor",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "TestClient.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str"
                ]
            }
        },
        "CustomExtension.resolve": {
            "name": "resolve",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "next_": [
                    "typing.Mapping",
                    "str",
                    "list[]",
                    "typing.Type",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "obj": [
                    "typing.Mapping",
                    "str",
                    "list[]",
                    "typing.Type",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "info": [
                    "typing.Mapping",
                    "str",
                    "list[]",
                    "typing.Type",
                    "dict[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "test_extensions_function_result_is_passed_to_query_executor.get_extensions": {
            "name": "get_extensions",
            "location": 165,
            "return": [
                "list[CustomExtension]"
            ],
            "arguments": {}
        },
        "test_middleware_function_result_is_passed_to_query_executor.get_middleware": {
            "name": "get_middleware",
            "location": 186,
            "return": [
                "list[]"
            ],
            "arguments": {}
        }
    },
    "ariadne-master/tests/wsgi/test_http_error_handling.py": {
        "test_http_errors_raised_in_handle_request_are_passed_to_http_error_handler": {
            "name": "test_http_errors_raised_in_handle_request_are_passed_to_http_error_handler",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int",
                    "str",
                    "float",
                    "None"
                ],
                "middleware_request": [
                    "float",
                    "None",
                    "str",
                    "int"
                ],
                "start_response": [
                    "bool",
                    "list[list[int]]",
                    "dict[, ]",
                    "None",
                    "str"
                ]
            }
        },
        "test_http_error_400_is_converted_to_http_response_in_http_error_handler": {
            "name": "test_http_error_400_is_converted_to_http_response_in_http_error_handler",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [],
                "middleware_request": [
                    "dict[str, typing.Any]",
                    "float"
                ],
                "start_response": [
                    "dict[str, typing.Any]",
                    "float",
                    "dict[, ]"
                ],
                "error_response_headers": [
                    "bytes",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "test_http_error_400_with_message_is_converted_to_http_response_in_http_error_handler": {
            "name": "test_http_error_400_with_message_is_converted_to_http_response_in_http_error_handler",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [],
                "middleware_request": [
                    "dict[str, typing.Any]",
                    "float"
                ],
                "start_response": [
                    "dict[str, typing.Any]",
                    "float"
                ],
                "error_response_headers": [
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "ariadne-master/tests/wsgi/test_initialization.py": {
        "test_initializing_middleware_without_path_raises_value_error": {
            "name": "test_initializing_middleware_without_path_raises_value_error",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "test_initializing_middleware_with_non_callable_app_raises_type_error": {
            "name": "test_initializing_middleware_with_non_callable_app_raises_type_error",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "None",
                    "typing.Any",
                    "list[typing.Any]"
                ]
            }
        },
        "test_initializing_middleware_without_app_raises_type_error": {
            "name": "test_initializing_middleware_without_app_raises_type_error",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "None"
                ]
            }
        },
        "test_initializing_middleware_with_app_and_root_path_raises_value_error": {
            "name": "test_initializing_middleware_with_app_and_root_path_raises_value_error",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "app_mock": [],
                "schema": []
            }
        }
    },
    "ariadne-master/tests/wsgi/test_playground.py": {
        "test_playground_html_is_served_on_get_request": {
            "name": "test_playground_html_is_served_on_get_request",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int"
                ],
                "middleware_request": [],
                "snapshot": [],
                "start_response": [
                    "int"
                ]
            }
        }
    },
    "ariadne-master/tests/wsgi/test_query_execution.py": {
        "test_query_is_executed_for_post_json_request": {
            "name": "test_query_is_executed_for_post_json_request",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "bool"
                ],
                "start_response": [],
                "graphql_query_request_factory": [
                    "typing.Callable[, ]",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict[int, str]"
                ],
                "graphql_response_headers": [
                    "dict[, ]",
                    "str",
                    "typing.Hashable",
                    "None"
                ],
                "assert_json_response_equals_snapshot": [
                    "tuple[]",
                    "list[dict[, ]]"
                ]
            }
        },
        "test_complex_query_is_executed_for_post_json_request": {
            "name": "test_complex_query_is_executed_for_post_json_request",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int",
                    "None"
                ],
                "start_response": [
                    "int",
                    "bytes"
                ],
                "graphql_query_request_factory": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[int, str]",
                    "float",
                    "dict[str, str]",
                    "None",
                    "str"
                ],
                "graphql_response_headers": [
                    "dict[, ]",
                    "str",
                    "typing.Hashable",
                    "None"
                ],
                "assert_json_response_equals_snapshot": [
                    "tuple[]"
                ]
            }
        },
        "test_complex_query_without_operation_name_executes_successfully": {
            "name": "test_complex_query_without_operation_name_executes_successfully",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int",
                    "None",
                    "str"
                ],
                "start_response": [
                    "int",
                    "str",
                    "None"
                ],
                "graphql_query_request_factory": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "int",
                    "dict[str, str]",
                    "None",
                    "dict[, ]"
                ],
                "graphql_response_headers": [
                    "dict[, ]",
                    "typing.Hashable",
                    "str",
                    "int"
                ],
                "assert_json_response_equals_snapshot": [
                    "tuple[]"
                ]
            }
        },
        "test_attempt_execute_complex_query_without_variables_returns_error_json": {
            "name": "test_attempt_execute_complex_query_without_variables_returns_error_json",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int",
                    "None"
                ],
                "start_response": [
                    "int",
                    "bytes",
                    "str",
                    "None"
                ],
                "graphql_query_request_factory": [
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "graphql_response_headers": [
                    "dict[, ]",
                    "typing.Hashable",
                    "str",
                    "typing.Callable[, ]"
                ],
                "assert_json_response_equals_snapshot": [
                    "tuple[]"
                ]
            }
        },
        "test_attempt_execute_query_without_query_entry_returns_error_json": {
            "name": "test_attempt_execute_query_without_query_entry_returns_error_json",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int",
                    "None"
                ],
                "start_response": [
                    "bool"
                ],
                "graphql_query_request_factory": [
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Type"
                ],
                "graphql_response_headers": [
                    "str",
                    "bool"
                ],
                "assert_json_response_equals_snapshot": [
                    "tuple[]"
                ]
            }
        },
        "test_attempt_execute_query_with_non_string_query_returns_error_json": {
            "name": "test_attempt_execute_query_with_non_string_query_returns_error_json",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int",
                    "None"
                ],
                "start_response": [
                    "bool"
                ],
                "graphql_query_request_factory": [
                    "bool",
                    "dict[str, str]",
                    "None",
                    "typing.Callable[, ]"
                ],
                "graphql_response_headers": [
                    "str"
                ],
                "assert_json_response_equals_snapshot": [
                    "tuple[]"
                ]
            }
        },
        "test_attempt_execute_query_with_invalid_variables_returns_error_json": {
            "name": "test_attempt_execute_query_with_invalid_variables_returns_error_json",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int",
                    "None"
                ],
                "start_response": [
                    "bool"
                ],
                "graphql_query_request_factory": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "None",
                    "dict[str, float]",
                    "str"
                ],
                "graphql_response_headers": [
                    "list[typing.Callable[, ]]",
                    "str"
                ],
                "assert_json_response_equals_snapshot": [
                    "tuple[]"
                ]
            }
        },
        "test_attempt_execute_query_with_invalid_operation_name_string_returns_error_json": {
            "name": "test_attempt_execute_query_with_invalid_operation_name_string_returns_error_json",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int",
                    "None"
                ],
                "start_response": [
                    "int",
                    "bytes",
                    "str",
                    "None"
                ],
                "graphql_query_request_factory": [
                    "dict[int, str]",
                    "dict[str, typing.Any]",
                    "typing.Callable[typing.Any, None]",
                    "list[]"
                ],
                "graphql_response_headers": [
                    "dict[, ]",
                    "str",
                    "typing.Hashable",
                    "None",
                    "typing.Callable[, ]"
                ],
                "assert_json_response_equals_snapshot": [
                    "tuple[]"
                ]
            }
        },
        "test_attempt_execute_query_with_invalid_operation_name_type_returns_error_json": {
            "name": "test_attempt_execute_query_with_invalid_operation_name_type_returns_error_json",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int",
                    "None"
                ],
                "start_response": [
                    "typing.Callable[, ]"
                ],
                "graphql_query_request_factory": [
                    "list[dict[, ]]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "graphql_response_headers": [
                    "str",
                    "bool"
                ],
                "assert_json_response_equals_snapshot": [
                    "tuple[]"
                ]
            }
        },
        "test_query_is_executed_for_multipart_form_request_with_file": {
            "name": "test_query_is_executed_for_multipart_form_request_with_file",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int",
                    "str"
                ],
                "snapshot": [],
                "start_response": [
                    "int"
                ],
                "graphql_response_headers": [
                    "dict[, ]"
                ]
            }
        },
        "test_middlewares_and_extensions_are_combined_in_correct_order": {
            "name": "test_middlewares_and_extensions_are_combined_in_correct_order",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "TestClient.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str"
                ]
            }
        },
        "CustomExtension.resolve": {
            "name": "resolve",
            "location": 189,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "next_": [
                    "dict[str, typing.Any]",
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "obj": [
                    "dict[str, typing.Any]",
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "info": [
                    "dict[str, typing.Any]",
                    "str",
                    "bytes",
                    "None",
                    "int"
                ]
            }
        },
        "test_middlewares_and_extensions_are_combined_in_correct_order.test_middleware": {
            "name": "test_middleware",
            "location": 195,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "next_fn": []
            }
        }
    },
    "ariadne-master/tests/wsgi/test_request_data_reading.py": {
        "test_attempt_parse_request_missing_content_type_raises_bad_request_error": {
            "name": "test_attempt_parse_request_missing_content_type_raises_bad_request_error",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "typing.Callable[, ]",
                    "float",
                    "set[]",
                    "int"
                ],
                "start_response": [
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "str",
                    "int",
                    "bytes"
                ],
                "snapshot": [],
                "graphql_query_request_factory": [
                    "bytes",
                    "str",
                    "dict[str, int]"
                ],
                "error_response_headers": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "Exception"
                ]
            }
        },
        "test_attempt_parse_non_json_request_raises_bad_request_error": {
            "name": "test_attempt_parse_non_json_request_raises_bad_request_error",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ],
                "start_response": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "bytes",
                    "str"
                ],
                "snapshot": [],
                "graphql_query_request_factory": [
                    "Exception",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, int]",
                    "dict[str, str]",
                    "int",
                    "None",
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]"
                ],
                "error_response_headers": [
                    "str",
                    "typing.Callable[, ]",
                    "Exception",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_attempt_get_content_length_from_missing_header_raises_bad_request_error": {
            "name": "test_attempt_get_content_length_from_missing_header_raises_bad_request_error",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "bool",
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "start_response": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "bytes",
                    "str"
                ],
                "snapshot": [],
                "graphql_query_request_factory": [
                    "bool",
                    "typing.OrderedDict",
                    "bytes",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "error_response_headers": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "Exception",
                    "bytes"
                ]
            }
        },
        "test_attempt_get_content_length_from_malformed_header_raises_bad_request_error": {
            "name": "test_attempt_get_content_length_from_malformed_header_raises_bad_request_error",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "bool",
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "start_response": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "bytes",
                    "str"
                ],
                "snapshot": [],
                "graphql_query_request_factory": [
                    "str",
                    "bool",
                    "tuple[]"
                ],
                "error_response_headers": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "Exception",
                    "bytes"
                ]
            }
        },
        "test_attempt_get_request_body_from_missing_wsgi_input_raises_bad_request_error": {
            "name": "test_attempt_get_request_body_from_missing_wsgi_input_raises_bad_request_error",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "int"
                ],
                "start_response": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "bytes",
                    "int"
                ],
                "snapshot": [],
                "graphql_query_request_factory": [
                    "bool",
                    "typing.OrderedDict",
                    "tuple[typing.Union[int,int]]",
                    "dict[, ]",
                    "bytes"
                ],
                "error_response_headers": [
                    "str",
                    "bytes",
                    "typing.Callable[, ]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_attempt_get_request_body_from_empty_wsgi_input_raises_bad_request_error": {
            "name": "test_attempt_get_request_body_from_empty_wsgi_input_raises_bad_request_error",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "int"
                ],
                "start_response": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "bytes",
                    "int"
                ],
                "snapshot": [
                    "typing.Callable[list[], None]",
                    "bytes"
                ],
                "graphql_query_request_factory": [
                    "bool",
                    "typing.OrderedDict",
                    "tuple[typing.Union[int,int]]",
                    "dict[, ]",
                    "bytes"
                ],
                "error_response_headers": [
                    "str",
                    "bytes",
                    "typing.Callable[, ]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "test_attempt_parse_non_json_request_body_raises_bad_request_error": {
            "name": "test_attempt_parse_non_json_request_body_raises_bad_request_error",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "int",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ],
                "start_response": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "bytes",
                    "str"
                ],
                "snapshot": [],
                "graphql_query_request_factory": [
                    "str",
                    "bytes"
                ],
                "error_response_headers": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "Exception"
                ]
            }
        },
        "test_attempt_parse_json_scalar_request_raises_graphql_bad_request_error": {
            "name": "test_attempt_parse_json_scalar_request_raises_graphql_bad_request_error",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "bool",
                    "None"
                ],
                "start_response": [
                    "bytes",
                    "dict[tuple[typing.Union[int,int]], str]",
                    "str",
                    "None"
                ],
                "graphql_query_request_factory": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "graphql_response_headers": [
                    "str",
                    "dict[tuple[typing.Union[int,int]], str]"
                ],
                "assert_json_response_equals_snapshot": [
                    "tuple[]"
                ]
            }
        },
        "test_attempt_parse_json_array_request_raises_graphql_bad_request_error": {
            "name": "test_attempt_parse_json_array_request_raises_graphql_bad_request_error",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "bool",
                    "None"
                ],
                "start_response": [
                    "bytes",
                    "dict[tuple[typing.Union[int,int]], str]",
                    "str",
                    "None"
                ],
                "graphql_query_request_factory": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "graphql_response_headers": [
                    "str",
                    "dict[tuple[typing.Union[int,int]], str]"
                ],
                "assert_json_response_equals_snapshot": [
                    "tuple[]"
                ]
            }
        },
        "test_multipart_form_request_fails_if_operations_is_not_valid_json": {
            "name": "test_multipart_form_request_fails_if_operations_is_not_valid_json",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "snapshot": [
                    "typing.Callable[list[], None]"
                ],
                "start_response": [],
                "error_response_headers": []
            }
        },
        "test_multipart_form_request_fails_if_map_is_not_valid_json": {
            "name": "test_multipart_form_request_fails_if_map_is_not_valid_json",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "snapshot": [
                    "typing.Callable[list[], None]"
                ],
                "start_response": [],
                "error_response_headers": []
            }
        }
    },
    "ariadne-master/tests/wsgi/test_request_dispatching.py": {
        "test_request_to_app_root_path_is_forwarded": {
            "name": "test_request_to_app_root_path_is_forwarded",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "app_mock": [],
                "middleware": []
            }
        },
        "test_request_to_app_sub_path_is_forwarded": {
            "name": "test_request_to_app_sub_path_is_forwarded",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "app_mock": [],
                "middleware": []
            }
        },
        "test_request_to_graphql_path_is_handled": {
            "name": "test_request_to_graphql_path_is_handled",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "app_mock": [],
                "middleware": []
            }
        },
        "test_request_to_graphql_server_root_path_is_handled": {
            "name": "test_request_to_graphql_server_root_path_is_handled",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_request_to_graphql_server_sub_path_is_handled": {
            "name": "test_request_to_graphql_server_sub_path_is_handled",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "server": []
            }
        },
        "test_app_exceptions_are_not_handled": {
            "name": "test_app_exceptions_are_not_handled",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "app_mock": [
                    "dict[str, typing.Any]"
                ],
                "schema": []
            }
        },
        "test_get_handler_is_called_for_get_request": {
            "name": "test_get_handler_is_called_for_get_request",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "float"
                ],
                "middleware_request": [],
                "start_response": [
                    "bool"
                ]
            }
        },
        "test_post_handler_is_called_for_post_request": {
            "name": "test_post_handler_is_called_for_post_request",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "float"
                ],
                "middleware_request": [],
                "start_response": [
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "test_allowed_methods_list_is_returned_for_options_request": {
            "name": "test_allowed_methods_list_is_returned_for_options_request",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "str",
                    "float",
                    "None"
                ],
                "middleware_request": [],
                "start_response": [
                    "int",
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "test_allowed_methods_list_returned_for_options_request_excludes_get": {
            "name": "test_allowed_methods_list_returned_for_options_request_excludes_get",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "app_mock": [],
                "middleware_request": [],
                "start_response": [],
                "schema": []
            }
        },
        "test_http_not_allowed_response_is_returned_for_delete_request": {
            "name": "test_http_not_allowed_response_is_returned_for_delete_request",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "str",
                    "float",
                    "None"
                ],
                "middleware_request": [],
                "start_response": [
                    "int"
                ]
            }
        },
        "test_http_not_allowed_response_is_returned_for_head_request": {
            "name": "test_http_not_allowed_response_is_returned_for_head_request",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "float",
                    "None",
                    "str",
                    "int"
                ],
                "middleware_request": [],
                "start_response": [
                    "int"
                ]
            }
        },
        "test_http_not_allowed_response_is_returned_for_patch_request": {
            "name": "test_http_not_allowed_response_is_returned_for_patch_request",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "float",
                    "None",
                    "str",
                    "int"
                ],
                "middleware_request": [],
                "start_response": [
                    "int"
                ]
            }
        },
        "test_http_not_allowed_response_is_returned_for_put_request": {
            "name": "test_http_not_allowed_response_is_returned_for_put_request",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "middleware": [
                    "float",
                    "None",
                    "str"
                ],
                "middleware_request": [],
                "start_response": [
                    "int"
                ]
            }
        }
    },
    "ariadne-master/tests/wsgi/__init__.py": {},
    "ariadne-master/tests/wsgi/snapshots/snap_test_playground.py": {},
    "ariadne-master/tests/wsgi/snapshots/snap_test_query_execution.py": {},
    "ariadne-master/tests/wsgi/snapshots/snap_test_request_data_reading.py": {},
    "ariadne-master/tests/wsgi/snapshots/__init__.py": {}
}
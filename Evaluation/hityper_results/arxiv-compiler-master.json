{
    "arxiv-compiler-master/app.py": {},
    "arxiv-compiler-master/mock_vault.py": {
        "log_in": {
            "name": "log_in",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "get_kv_secret": {
            "name": "get_kv_secret",
            "location": 24,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_aws_secret": {
            "name": "get_aws_secret",
            "location": 50,
            "return": [],
            "arguments": {
                "role": [
                    "str",
                    "None"
                ]
            }
        },
        "look_up_a_token": {
            "name": "look_up_a_token",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-compiler-master/test.py": {
        "generate_arxiv_id": {
            "name": "generate_arxiv_id",
            "location": 9,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "payload": {
            "name": "payload",
            "location": 16,
            "return": [
                "dict[typing.Text, typing.Union[list[int],typing.Text,bool]]"
            ],
            "arguments": {
                "id": [
                    "list[int]"
                ]
            }
        },
        "check_status": {
            "name": "check_status",
            "location": 30,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "task_url": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "N": [
                    "int"
                ],
                "ids": [
                    "list[]"
                ]
            }
        }
    },
    "arxiv-compiler-master/wsgi.py": {
        "application": {
            "name": "application",
            "location": 11,
            "return": [],
            "arguments": {
                "environ": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "start_response": [
                    "typing.Callable[, ]",
                    "bytes"
                ]
            }
        }
    },
    "arxiv-compiler-master/compiler/celery.py": {},
    "arxiv-compiler-master/compiler/celeryconfig.py": {},
    "arxiv-compiler-master/compiler/compiler.py": {
        "is_available": {
            "name": "is_available",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "await_result": [
                    "bool"
                ]
            }
        },
        "start_compilation": {
            "name": "start_compilation",
            "location": 123,
            "return": [],
            "arguments": {
                "src_id": [
                    "str"
                ],
                "chk": [
                    "str"
                ],
                "stamp_label": [
                    "None",
                    "str"
                ],
                "stamp_link": [
                    "None",
                    "str"
                ],
                "output_format": [],
                "preferred_compiler": [
                    "None",
                    "str"
                ],
                "token": [
                    "None",
                    "str"
                ],
                "owner": [
                    "None",
                    "str"
                ]
            }
        },
        "get_task": {
            "name": "get_task",
            "location": 175,
            "return": [
                "Task"
            ],
            "arguments": {
                "src_id": [
                    "str"
                ],
                "chk": [
                    "str"
                ],
                "fmt": []
            }
        },
        "_mark_sent": {
            "name": "_mark_sent",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "None",
                    "str",
                    "typing.Hashable",
                    "dict[, ]",
                    "bytes"
                ],
                "headers": [
                    "None",
                    "str"
                ],
                "body": [
                    "None",
                    "typing.Any",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "do_nothing": {
            "name": "do_nothing",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_compile": {
            "name": "do_compile",
            "location": 236,
            "return": [],
            "arguments": {
                "src_id": [
                    "str",
                    "None"
                ],
                "chk": [
                    "str"
                ],
                "stamp_label": [
                    "str",
                    "None",
                    "typing.Mapping"
                ],
                "stamp_link": [
                    "str",
                    "None",
                    "typing.Mapping"
                ],
                "output_format": [
                    "typing.Text"
                ],
                "preferred_compiler": [
                    "None",
                    "str",
                    "bool"
                ],
                "token": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "bool"
                ],
                "owner": [
                    "None",
                    "str",
                    "typing.MutableMapping",
                    "int"
                ]
            }
        },
        "_get_task_id": {
            "name": "_get_task_id",
            "location": 550,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "src_id": [
                    "str"
                ],
                "chk": [
                    "str"
                ],
                "fmt": [
                    "str"
                ]
            }
        },
        "_file_size": {
            "name": "_file_size",
            "location": 555,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Converter.is_available": {
            "name": "is_available",
            "location": 369,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Converter._new_client": {
            "name": "_new_client",
            "location": 379,
            "return": [
                "DockerClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "Converter.image": {
            "name": "image",
            "location": 391,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Converter._get_ecr_login": {
            "name": "_get_ecr_login",
            "location": 400,
            "return": [
                "tuple[typing.Union[list[],str,list[str],set[str],dict[str, list[typing.Any]],list[dict[str, typing.Any]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Converter._pull_image": {
            "name": "_pull_image",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "None"
                ]
            }
        },
        "Converter.__call__": {
            "name": "__call__",
            "location": 424,
            "return": [
                "tuple[typing.Optional[str]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "stamp_label": [
                    "str",
                    "None",
                    "int",
                    "list[str]",
                    "set[int]",
                    "list[]"
                ],
                "stamp_link": [
                    "str",
                    "None",
                    "int",
                    "list[str]",
                    "set[int]",
                    "list[]"
                ],
                "output_format": [],
                "add_stamp": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ],
                "add_psmapfile": [
                    "bool"
                ],
                "P_dvips_flag": [
                    "bool"
                ],
                "dvips_layout": [
                    "typing.Text"
                ],
                "D_dvips_flag": [
                    "bool"
                ],
                "id_for_decryption": [
                    "None",
                    "str",
                    "int",
                    "list[str]",
                    "set[int]",
                    "list[]"
                ],
                "tex_tree_timestamp": [
                    "None",
                    "str",
                    "int",
                    "list[str]",
                    "set[int]",
                    "list[]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "arxiv-compiler-master/compiler/config.py": {},
    "arxiv-compiler-master/compiler/controllers.py": {
        "is_urlsafe_base64": {
            "name": "is_urlsafe_base64",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "val": [
                    "str",
                    "list[int]",
                    "list[]"
                ]
            }
        },
        "_status_from_store": {
            "name": "_status_from_store",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "source_id": [
                    "str"
                ],
                "checksum": [
                    "str"
                ],
                "output_format": [
                    "str"
                ]
            }
        },
        "_redirect_to_status": {
            "name": "_redirect_to_status",
            "location": 66,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "source_id": [
                    "str",
                    "None"
                ],
                "checksum": [
                    "str",
                    "None"
                ],
                "output_format": [
                    "str",
                    "None"
                ],
                "code": []
            }
        },
        "service_status": {
            "name": "service_status",
            "location": 74,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {}
        },
        "compile": {
            "name": "compile",
            "location": 87,
            "return": [],
            "arguments": {
                "request_data": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "token": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "dict[str, object]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "session": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "typing.IO"
                ],
                "is_authorized": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_status": {
            "name": "get_status",
            "location": 150,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "source_id": [
                    "str"
                ],
                "checksum": [
                    "str",
                    "None",
                    "dict[, ]",
                    "list[str]"
                ],
                "output_format": [
                    "str",
                    "int",
                    "None"
                ],
                "is_authorized": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_product": {
            "name": "get_product",
            "location": 191,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "source_id": [
                    "str"
                ],
                "checksum": [
                    "str",
                    "typing.Mapping",
                    "None",
                    "int"
                ],
                "output_format": [
                    "str",
                    "int",
                    "None"
                ],
                "is_authorized": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_log": {
            "name": "get_log",
            "location": 240,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "source_id": [
                    "str"
                ],
                "checksum": [
                    "str",
                    "dict[str, list[typing.Any]]"
                ],
                "output_format": [
                    "str",
                    "int",
                    "None"
                ],
                "is_authorized": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "_validate_source_id": {
            "name": "_validate_source_id",
            "location": 289,
            "return": [
                "str"
            ],
            "arguments": {
                "source_id": [
                    "str"
                ]
            }
        },
        "_validate_checksum": {
            "name": "_validate_checksum",
            "location": 295,
            "return": [
                "str"
            ],
            "arguments": {
                "checksum": [
                    "str"
                ]
            }
        },
        "_validate_output_format": {
            "name": "_validate_output_format",
            "location": 312,
            "return": [
                "Format"
            ],
            "arguments": {
                "output_format": [
                    "str"
                ]
            }
        },
        "_is_valid_source_id": {
            "name": "_is_valid_source_id",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {
                "source_id": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "_get_owner": {
            "name": "_get_owner",
            "location": 324,
            "return": [],
            "arguments": {
                "source_id": [
                    "str",
                    "None"
                ],
                "checksum": [
                    "str",
                    "None"
                ],
                "token": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "arxiv-compiler-master/compiler/domain.py": {
        "Format.ext": {
            "name": "ext",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Format.content_type": {
            "name": "content_type",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.ext": {
            "name": "ext",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.content_type": {
            "name": "content_type",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.to_dict": {
            "name": "to_dict",
            "location": 114,
            "return": [
                "dict[typing.Text, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.from_dict": {
            "name": "from_dict",
            "location": 130,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "dict[, ]",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "data": []
            }
        }
    },
    "arxiv-compiler-master/compiler/factory.py": {
        "create_app": {
            "name": "create_app",
            "location": 27,
            "return": [
                "Flask"
            ],
            "arguments": {}
        },
        "wait_for": {
            "name": "wait_for",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "service": [],
                "delay": [
                    "int"
                ]
            }
        },
        "register_error_handlers": {
            "name": "register_error_handlers",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "jsonify_exception": {
            "name": "jsonify_exception",
            "location": 113,
            "return": [],
            "arguments": {
                "error": []
            }
        },
        "IAwaitable.is_available": {
            "name": "is_available",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-compiler-master/compiler/routes.py": {
        "authorizer": {
            "name": "authorizer",
            "location": 35,
            "return": [],
            "arguments": {
                "scope": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "resource_id": {
            "name": "resource_id",
            "location": 47,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "source_id": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ],
                "checksum": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ],
                "output_format": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ]
            }
        },
        "get_service_status": {
            "name": "get_service_status",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "compile": {
            "name": "compile",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "get_status": {
            "name": "get_status",
            "location": 84,
            "return": [],
            "arguments": {
                "source_id": [
                    "str"
                ],
                "checksum": [
                    "str"
                ],
                "output_format": [
                    "str"
                ]
            }
        },
        "get_log": {
            "name": "get_log",
            "location": 102,
            "return": [],
            "arguments": {
                "source_id": [
                    "str",
                    "bool",
                    "typing.IO",
                    "None",
                    "list[str]"
                ],
                "checksum": [
                    "str",
                    "bool",
                    "typing.IO",
                    "None",
                    "list[str]"
                ],
                "output_format": [
                    "str",
                    "bool",
                    "typing.IO",
                    "None",
                    "list[str]"
                ]
            }
        },
        "get_product": {
            "name": "get_product",
            "location": 115,
            "return": [],
            "arguments": {
                "source_id": [
                    "str"
                ],
                "checksum": [
                    "str"
                ],
                "output_format": [
                    "str"
                ]
            }
        },
        "authorizer.inner": {
            "name": "inner",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "task": []
            }
        }
    },
    "arxiv-compiler-master/compiler/util.py": {
        "ResponseStream.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "arxiv-compiler-master/compiler/worker.py": {
        "get_secrets": {
            "name": "get_secrets",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "verify_converter_image_up_to_date": {
            "name": "verify_converter_image_up_to_date",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "verify_secrets_up_to_date": {
            "name": "verify_secrets_up_to_date",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-compiler-master/compiler/__init__.py": {},
    "arxiv-compiler-master/compiler/services/__init__.py": {},
    "arxiv-compiler-master/compiler/services/filemanager/__init__.py": {
        "Default.__missing__": {
            "name": "__missing__",
            "location": 32,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "FileManager.is_available": {
            "name": "is_available",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileManager._must_verify_checksum": {
            "name": "_must_verify_checksum",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileManager.owner": {
            "name": "owner",
            "location": 63,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "source_id": [
                    "str",
                    "int"
                ],
                "checksum": [
                    "str",
                    "dict[str, str]"
                ],
                "token": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileManager.get_source_content": {
            "name": "get_source_content",
            "location": 76,
            "return": [
                "SourcePackage"
            ],
            "arguments": {
                "self": [],
                "source_id": [
                    "str",
                    "bool"
                ],
                "token": [
                    "str",
                    "None",
                    "bool"
                ],
                "save_to": [
                    "typing.Text"
                ]
            }
        },
        "FileManager._save_content": {
            "name": "_save_content",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "source_id": [
                    "str"
                ],
                "response": [],
                "source_dir": [
                    "str"
                ]
            }
        },
        "FileManager.get_upload_info": {
            "name": "get_upload_info",
            "location": 134,
            "return": [
                "SourcePackageInfo"
            ],
            "arguments": {
                "self": [],
                "source_id": [
                    "str",
                    "None"
                ],
                "token": [
                    "str"
                ]
            }
        }
    },
    "arxiv-compiler-master/compiler/services/filemanager/tests/test_filemanager.py": {
        "TestServiceStatus.test_status": {
            "name": "test_status",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestGetUploadInfo.session": {
            "name": "session",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "status_code": [],
                "method": [
                    "typing.Text"
                ],
                "json": [
                    "dict[, ]"
                ],
                "content": [
                    "typing.Text"
                ],
                "headers": [
                    "dict[, ]"
                ]
            }
        },
        "TestGetUploadInfo.test_get_upload_info": {
            "name": "test_get_upload_info",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestGetUploadInfo.test_get_upload_info_nonexistant": {
            "name": "test_get_upload_info_nonexistant",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestGetUploadInfo.test_get_upload_info_bad_request": {
            "name": "test_get_upload_info_bad_request",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestGetUploadInfo.test_get_upload_info_unauthorized": {
            "name": "test_get_upload_info_unauthorized",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestGetUploadInfo.test_get_upload_info_forbidden": {
            "name": "test_get_upload_info_forbidden",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestGetUploadInfo.test_get_upload_info_error": {
            "name": "test_get_upload_info_error",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestGetUploadInfo.test_get_upload_info_bad_json": {
            "name": "test_get_upload_info_bad_json",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestGetUploadInfo.test_get_upload_info_bad_ssl": {
            "name": "test_get_upload_info_bad_ssl",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestGetUploadInfo.test_get_upload_info_no_connection": {
            "name": "test_get_upload_info_no_connection",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestGetUpload.session": {
            "name": "session",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "status_code": [],
                "method": [
                    "typing.Text"
                ],
                "json": [
                    "dict[, ]"
                ],
                "content": [
                    "typing.Text"
                ],
                "headers": [
                    "dict[, ]"
                ]
            }
        },
        "TestGetUpload.test_get_upload": {
            "name": "test_get_upload",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestGetUpload.test_get_upload_with_filename": {
            "name": "test_get_upload_with_filename",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestGetUpload.test_get_upload_with_suspicious_filename": {
            "name": "test_get_upload_with_suspicious_filename",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestGetUpload.test_get_upload_with_malicious_filename": {
            "name": "test_get_upload_with_malicious_filename",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestGetUpload.test_get_upload_nonexistant": {
            "name": "test_get_upload_nonexistant",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestGetUploadInfo.test_get_upload_info_bad_json.raise_JSONDecodeError": {
            "name": "raise_JSONDecodeError",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetUploadInfo.test_get_upload_info_bad_ssl.raise_ssl_error": {
            "name": "raise_ssl_error",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestGetUploadInfo.test_get_upload_info_no_connection.raise_connection_error": {
            "name": "raise_connection_error",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-compiler-master/compiler/services/filemanager/tests/__init__.py": {},
    "arxiv-compiler-master/compiler/services/store/tests.py": {
        "TestStore.test_set_get_compilation_status": {
            "name": "test_set_get_compilation_status",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStore.test_store_retrieve": {
            "name": "test_store_retrieve",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStore.test_store_retrieve_log": {
            "name": "test_store_retrieve_log",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-compiler-master/compiler/services/store/__init__.py": {
        "hash_content": {
            "name": "hash_content",
            "location": 47,
            "return": [],
            "arguments": {
                "body": [
                    "bytes",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Store.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "bool",
                    "None"
                ],
                "verify": [
                    "bool"
                ],
                "region_name": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "endpoint_url": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "aws_access_key_id": [
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "aws_secret_access_key": [
                    "None",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "Store._new_client": {
            "name": "_new_client",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "config": [
                    "None",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]",
                    "dict[str, str]",
                    "list[str]"
                ]
            }
        },
        "Store._handle_client_error": {
            "name": "_handle_client_error",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "dict[, ]"
                ]
            }
        },
        "Store.__hash__": {
            "name": "__hash__",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store.is_available": {
            "name": "is_available",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "retries": [
                    "int"
                ],
                "read_timeout": [
                    "int"
                ],
                "connect_timeout": [
                    "int"
                ]
            }
        },
        "Store._test_put": {
            "name": "_test_put",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retries": [
                    "int"
                ],
                "read_timeout": [
                    "int"
                ],
                "connect_timeout": [
                    "int"
                ]
            }
        },
        "Store._wait_for_bucket": {
            "name": "_wait_for_bucket",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retries": [
                    "int"
                ],
                "delay": [
                    "int"
                ]
            }
        },
        "Store.initialize": {
            "name": "initialize",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store.get_status": {
            "name": "get_status",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "src_id": [
                    "str",
                    "bool"
                ],
                "chk": [
                    "str",
                    "bool"
                ],
                "out_fmt": [
                    "str",
                    "bool"
                ]
            }
        },
        "Store.set_status": {
            "name": "set_status",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Store.store": {
            "name": "store",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "Store.retrieve": {
            "name": "retrieve",
            "location": 234,
            "return": [
                "Product"
            ],
            "arguments": {
                "self": [],
                "src_id": [
                    "str",
                    "None"
                ],
                "chk": [
                    "str",
                    "None"
                ],
                "out_fmt": [
                    "str",
                    "None"
                ]
            }
        },
        "Store.store_log": {
            "name": "store_log",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product": [
                    "dict[, ]",
                    "bytes",
                    "str"
                ]
            }
        },
        "Store.retrieve_log": {
            "name": "retrieve_log",
            "location": 278,
            "return": [
                "Product"
            ],
            "arguments": {
                "self": [],
                "src_id": [
                    "str",
                    "typing.Sequence[str]"
                ],
                "chk": [
                    "str",
                    "typing.Sequence[str]"
                ],
                "out_fmt": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Store._create_bucket": {
            "name": "_create_bucket",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retries": [
                    "int"
                ],
                "read_timeout": [
                    "int"
                ],
                "connect_timeout": [
                    "int"
                ]
            }
        },
        "Store._get": {
            "name": "_get",
            "location": 308,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Store._put": {
            "name": "_put",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "body": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "content_type": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Store.init_app": {
            "name": "init_app",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "app": []
            }
        },
        "Store.get_session": {
            "name": "get_session",
            "location": 335,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "Store.current_session": {
            "name": "current_session",
            "location": 346,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "arxiv-compiler-master/compiler/tests/test_app.py": {
        "TestCompilerApp.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompilerApp.raise_does_not_exist": {
            "name": "raise_does_not_exist",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCompilerApp.raise_no_such_task": {
            "name": "raise_no_such_task",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCompilerApp.test_get_status": {
            "name": "test_get_status",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_session": []
            }
        },
        "TestCompilerApp.test_get_nonexistant": {
            "name": "test_get_nonexistant",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompilerApp.test_post_bad_request": {
            "name": "test_post_bad_request",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompilerApp.test_post_request_compile": {
            "name": "test_post_request_compile",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_fm": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_post_compilation_product_exists": {
            "name": "test_post_compilation_product_exists",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_product_exists_unauthorized": {
            "name": "test_product_exists_unauthorized",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_post_task_start_failed": {
            "name": "test_post_task_start_failed",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_fm": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_get_status_completed": {
            "name": "test_get_status_completed",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_get_status_not_owner": {
            "name": "test_get_status_not_owner",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_get_status_nonexistant": {
            "name": "test_get_status_nonexistant",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_get_status_invalid_format": {
            "name": "test_get_status_invalid_format",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_get_log": {
            "name": "test_get_log",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_get_log_not_owner": {
            "name": "test_get_log_not_owner",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_get_log_nononexistant": {
            "name": "test_get_log_nononexistant",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_get_log_invalid_format": {
            "name": "test_get_log_invalid_format",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_get_product": {
            "name": "test_get_product",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_get_product_not_owner": {
            "name": "test_get_product_not_owner",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_get_product_nononexistant": {
            "name": "test_get_product_nononexistant",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_get_product_invalid_format": {
            "name": "test_get_product_invalid_format",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestCompilerApp.test_post_task_start_failed.raise_creation_failed": {
            "name": "raise_creation_failed",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-compiler-master/compiler/tests/test_compiler.py": {
        "TestStartCompilation.test_start_compilation_ok": {
            "name": "test_start_compilation_ok",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStartCompilation.test_start_compilation_errs": {
            "name": "test_start_compilation_errs",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_do_compile": [
                    "str"
                ]
            }
        },
        "TestGetTask.test_get_nonexistant_task": {
            "name": "test_get_nonexistant_task",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_do": []
            }
        },
        "TestGetTask.test_get_unstarted_task": {
            "name": "test_get_unstarted_task",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_do": []
            }
        },
        "TestGetTask.test_get_started_task": {
            "name": "test_get_started_task",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_do": []
            }
        },
        "TestGetTask.test_get_retry_task": {
            "name": "test_get_retry_task",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_do": []
            }
        },
        "TestGetTask.test_get_failed": {
            "name": "test_get_failed",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_do": []
            }
        },
        "TestGetTask.test_get_succeeded": {
            "name": "test_get_succeeded",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_do": []
            }
        },
        "TestGetTask.test_get_failed_gracefully": {
            "name": "test_get_failed_gracefully",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_do": []
            }
        },
        "TestDoCompile.test_do_compile_success": {
            "name": "test_do_compile_success",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_Compiler": [],
                "mock_filemanager": []
            }
        },
        "TestDoCompile.test_cannot_store_log": {
            "name": "test_cannot_store_log",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_Compiler": [],
                "mock_filemanager": []
            }
        },
        "TestDoCompile.test_docker_fails": {
            "name": "test_docker_fails",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_Compiler": [],
                "mock_filemanager": []
            }
        },
        "TestDoCompile.test_unauthorized": {
            "name": "test_unauthorized",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_Compiler": [],
                "mock_filemanager": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestDoCompile.test_forbidden": {
            "name": "test_forbidden",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_Compiler": [],
                "mock_filemanager": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestDoCompile.test_connection_failed": {
            "name": "test_connection_failed",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_Compiler": [],
                "mock_filemanager": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestDoCompile.test_not_found": {
            "name": "test_not_found",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_Compiler": [],
                "mock_filemanager": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestDoCompile.test_source_corrupted": {
            "name": "test_source_corrupted",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_Compiler": [],
                "mock_filemanager": []
            }
        },
        "TestDoCompile.test_no_output": {
            "name": "test_no_output",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_Compiler": [],
                "mock_filemanager": []
            }
        },
        "TestDoCompile.test_cannot_save": {
            "name": "test_cannot_save",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_Compiler": [],
                "mock_filemanager": []
            }
        },
        "TestCompiler.setUp": {
            "name": "setUp",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompiler.tearDown": {
            "name": "tearDown",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompiler.test_is_available": {
            "name": "test_is_available",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_current_app": [],
                "mock_DockerClient": [],
                "mock_boto3_client": []
            }
        },
        "TestCompiler.test_is_not_available": {
            "name": "test_is_not_available",
            "location": 574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_current_app": [
                    "list[]"
                ],
                "mock_DockerClient": [],
                "mock_boto3_client": [
                    "list[]"
                ]
            }
        },
        "TestCompiler.test_run": {
            "name": "test_run",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_current_app": [],
                "mock_DockerClient": [],
                "mock_boto3_client": []
            }
        },
        "TestCompiler.test_run_logfile_fails": {
            "name": "test_run_logfile_fails",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_current_app": [],
                "mock_DockerClient": [],
                "mock_boto3_client": []
            }
        },
        "TestCompiler.test_docker_api_fails": {
            "name": "test_docker_api_fails",
            "location": 685,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_current_app": [
                    "list[]"
                ],
                "mock_DockerClient": [],
                "mock_boto3_client": [
                    "list[]"
                ]
            }
        },
        "TestCompiler.test_run_fails": {
            "name": "test_run_fails",
            "location": 718,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_current_app": [],
                "mock_DockerClient": [],
                "mock_boto3_client": []
            }
        },
        "TestStartCompilation.test_start_compilation_errs.raise_runtimeerror": {
            "name": "raise_runtimeerror",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDoCompile.test_unauthorized.raise_unauthorized": {
            "name": "raise_unauthorized",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDoCompile.test_forbidden.raise_forbidden": {
            "name": "raise_forbidden",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDoCompile.test_connection_failed.raise_conn_failed": {
            "name": "raise_conn_failed",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDoCompile.test_not_found.raise_not_found": {
            "name": "raise_not_found",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDoCompile.test_source_corrupted.raise_corrupted": {
            "name": "raise_corrupted",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestDoCompile.test_cannot_save.raise_runtimeerror": {
            "name": "raise_runtimeerror",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCompiler.test_is_not_available.raise_APIError": {
            "name": "raise_APIError",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestCompiler.test_docker_api_fails.raise_APIError": {
            "name": "raise_APIError",
            "location": 705,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-compiler-master/compiler/tests/test_controllers.py": {
        "mock_url_for": {
            "name": "mock_url_for",
            "location": 16,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "endpoint": [
                    "int",
                    "str",
                    "set[]"
                ]
            }
        },
        "raise_store_does_not_exist": {
            "name": "raise_store_does_not_exist",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "raise_no_such_task": {
            "name": "raise_no_such_task",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestRequestCompilation.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestCompilation.test_request_missing_parameter": {
            "name": "test_request_missing_parameter",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestCompilation.test_bad_checksum": {
            "name": "test_bad_checksum",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestCompilation.test_bad_source_id": {
            "name": "test_bad_source_id",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestCompilation.test_bad_format": {
            "name": "test_bad_format",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestCompilation.test_compile_de_novo": {
            "name": "test_compile_de_novo",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_fm": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestRequestCompilation.test_compile_exists": {
            "name": "test_compile_exists",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_compiler": []
            }
        },
        "TestGetTask.test_bad_checksum": {
            "name": "test_bad_checksum",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetTask.test_bad_source_id": {
            "name": "test_bad_source_id",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetTask.test_bad_format": {
            "name": "test_bad_format",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetTask.test_get_info_completed": {
            "name": "test_get_info_completed",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": []
            }
        },
        "TestGetTask.test_get_info_in_progress": {
            "name": "test_get_info_in_progress",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": []
            }
        },
        "TestGetTask.test_get_info_nonexistant": {
            "name": "test_get_info_nonexistant",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": []
            }
        },
        "TestGetTask.test_get_status_completed": {
            "name": "test_get_status_completed",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": []
            }
        },
        "TestGetTask.test_get_status_in_progress": {
            "name": "test_get_status_in_progress",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": []
            }
        },
        "TestGetProduct.test_bad_checksum": {
            "name": "test_bad_checksum",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetProduct.test_bad_source_id": {
            "name": "test_bad_source_id",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetProduct.test_bad_format": {
            "name": "test_bad_format",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetProduct.test_get_product_completed": {
            "name": "test_get_product_completed",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": []
            }
        },
        "TestGetProduct.test_get_product_nonexistant": {
            "name": "test_get_product_nonexistant",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": []
            }
        },
        "TestGetCompilationLog.test_bad_checksum": {
            "name": "test_bad_checksum",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetCompilationLog.test_bad_source_id": {
            "name": "test_bad_source_id",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetCompilationLog.test_bad_format": {
            "name": "test_bad_format",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetCompilationLog.test_get_log_completed": {
            "name": "test_get_log_completed",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": []
            }
        },
        "TestGetCompilationLog.test_get_log_nonexistant": {
            "name": "test_get_log_nonexistant",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": []
            }
        }
    },
    "arxiv-compiler-master/compiler/tests/__init__.py": {},
    "arxiv-compiler-master/docs/source/conf.py": {}
}
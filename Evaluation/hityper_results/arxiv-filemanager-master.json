{
    "arxiv-filemanager-master/app.py": {},
    "arxiv-filemanager-master/bootstrap.py": {},
    "arxiv-filemanager-master/generate_token.py": {
        "generate_token": {
            "name": "generate_token",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "email": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "int"
                ],
                "first_name": [
                    "typing.Text"
                ],
                "last_name": [
                    "typing.Text"
                ],
                "suffix_name": [
                    "typing.Text"
                ],
                "affiliation": [
                    "typing.Text"
                ],
                "rank": [],
                "country": [
                    "typing.Text"
                ],
                "default_category": [
                    "typing.Text"
                ],
                "submission_groups": [
                    "typing.Text"
                ],
                "endorsements": [
                    "typing.Text"
                ],
                "scope": [
                    "typing.Text"
                ]
            }
        }
    },
    "arxiv-filemanager-master/populate_test_database.py": {
        "populate_database": {
            "name": "populate_database",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-filemanager-master/wsgi.py": {
        "application": {
            "name": "application",
            "location": 10,
            "return": [],
            "arguments": {
                "environ": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "start_response": [
                    "typing.Callable[, ]",
                    "bytes"
                ]
            }
        }
    },
    "arxiv-filemanager-master/filemanager/celeryconfig.py": {},
    "arxiv-filemanager-master/filemanager/config.py": {},
    "arxiv-filemanager-master/filemanager/domain.py": {
        "Property.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "klass": [
                    "None",
                    "int",
                    "typing.Sequence[]",
                    "str"
                ],
                "default": [
                    "None",
                    "int",
                    "typing.Sequence[]",
                    "str"
                ]
            }
        },
        "Property.__get__": {
            "name": "__get__",
            "location": 17,
            "return": [
                "Property"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "typing.Pattern",
                    "list[str]",
                    "dict[int, str]",
                    "dict[str, str]"
                ],
                "owner": [
                    "None",
                    "typing.Type"
                ]
            }
        },
        "Property.__set__": {
            "name": "__set__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "list[str]"
                ],
                "value": [
                    "float",
                    "str",
                    "typing.Any",
                    "None",
                    "typing.Hashable",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "Data.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/encode.py": {
        "ISO8601JSONEncoder.default": {
            "name": "default",
            "location": 12,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/factory.py": {
        "create_web_app": {
            "name": "create_web_app",
            "location": 19,
            "return": [
                "Flask"
            ],
            "arguments": {}
        },
        "register_error_handlers": {
            "name": "register_error_handlers",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "jsonify_exception": {
            "name": "jsonify_exception",
            "location": 54,
            "return": [],
            "arguments": {
                "error": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/shared.py": {
        "url_for": {
            "name": "url_for",
            "location": 7,
            "return": [
                "str",
                "set[]",
                "dict[str, str]",
                "set[str]",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "set[]",
                    "dict[str, str]",
                    "set[str]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "arxiv-filemanager-master/filemanager/tasks.py": {
        "sanitize_upload": {
            "name": "sanitize_upload",
            "location": 23,
            "return": [
                "dict[typing.Text, typing.Union[str,int]]"
            ],
            "arguments": {
                "upload_id": [
                    "str",
                    "int"
                ],
                "file": [
                    "str",
                    "int",
                    "None"
                ],
                "with_sleep": [
                    "int"
                ]
            }
        },
        "check_sanitize_status": {
            "name": "check_sanitize_status",
            "location": 72,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "check_upload_status": {
            "name": "check_upload_status",
            "location": 97,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "update_sent_state": {
            "name": "update_sent_state",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "dict[, ]",
                    "str"
                ],
                "headers": [
                    "None",
                    "str"
                ],
                "body": [
                    "None",
                    "bool",
                    "typing.AbstractSet",
                    "list[dict[, ]]",
                    "list[str]",
                    "dict[str, typing.Iterable[typing.Any]]"
                ]
            }
        }
    },
    "arxiv-filemanager-master/filemanager/worker.py": {},
    "arxiv-filemanager-master/filemanager/__init__.py": {},
    "arxiv-filemanager-master/filemanager/arxiv/file.py": {
        "File.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "list[str]"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "File.name": {
            "name": "name",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.ext": {
            "name": "ext",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.dir": {
            "name": "dir",
            "location": 55,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.base_dir": {
            "name": "base_dir",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "base": []
            }
        },
        "File.public_dir": {
            "name": "public_dir",
            "location": 73,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.filepath": {
            "name": "filepath",
            "location": 99,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "File.public_filepath": {
            "name": "public_filepath",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.initialize_type": {
            "name": "initialize_type",
            "location": 109,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.type": {
            "name": "type",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "File.type_string": {
            "name": "type_string",
            "location": 135,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.sha256sum": {
            "name": "sha256sum",
            "location": 147,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.checksum": {
            "name": "checksum",
            "location": 152,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.description": {
            "name": "description",
            "location": 178,
            "return": [
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "description": []
            }
        },
        "File.is_tex_type": {
            "name": "is_tex_type",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.size": {
            "name": "size",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.modified_datetime": {
            "name": "modified_datetime",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.removed": {
            "name": "removed",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.remove": {
            "name": "remove",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "arxiv-filemanager-master/filemanager/arxiv/file_type.py": {
        "_type_of_latex2e": {
            "name": "_type_of_latex2e",
            "location": 134,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "file": [],
                "count": [
                    "int"
                ]
            }
        },
        "guess_file_type": {
            "name": "guess_file_type",
            "location": 152,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Exception"
                ]
            }
        },
        "is_tex_type": {
            "name": "is_tex_type",
            "location": 464,
            "return": [
                "bool"
            ],
            "arguments": {
                "type": [
                    "str"
                ]
            }
        },
        "get_type_name": {
            "name": "get_type_name",
            "location": 472,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "type": [
                    "str",
                    "None"
                ]
            }
        },
        "get_type_priority": {
            "name": "get_type_priority",
            "location": 484,
            "return": [
                "int"
            ],
            "arguments": {
                "file_type": [
                    "str"
                ]
            }
        },
        "guess": {
            "name": "guess",
            "location": 500,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "name": {
            "name": "name",
            "location": 516,
            "return": [],
            "arguments": {
                "type": [
                    "str"
                ]
            }
        },
        "_is_tex_type": {
            "name": "_is_tex_type",
            "location": 529,
            "return": [],
            "arguments": {
                "type": [
                    "str"
                ]
            }
        }
    },
    "arxiv-filemanager-master/filemanager/arxiv/__init__.py": {},
    "arxiv-filemanager-master/filemanager/controllers/status.py": {
        "service_status": {
            "name": "service_status",
            "location": 13,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {}
        }
    },
    "arxiv-filemanager-master/filemanager/controllers/upload.py": {
        "_get_service_logs_directory": {
            "name": "_get_service_logs_directory",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "delete_workspace": {
            "name": "delete_workspace",
            "location": 123,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "upload_id": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "client_delete_file": {
            "name": "client_delete_file",
            "location": 213,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "upload_id": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "public_file_path": [
                    "str",
                    "typing.IO",
                    "None",
                    "int"
                ]
            }
        },
        "client_delete_all_files": {
            "name": "client_delete_all_files",
            "location": 285,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "upload_id": [
                    "str"
                ]
            }
        },
        "upload": {
            "name": "upload",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "upload_id": [
                    "str",
                    "None",
                    "int",
                    "typing.Mapping"
                ],
                "file": [
                    "int",
                    "None",
                    "str"
                ],
                "archive": [
                    "str",
                    "None",
                    "list[str]",
                    "dict[, ]"
                ],
                "user": [
                    "str",
                    "None",
                    "int"
                ],
                "ancillary": [
                    "bool"
                ]
            }
        },
        "upload_summary": {
            "name": "upload_summary",
            "location": 571,
            "return": [
                "tuple[dict[typing.Text, list[dict[typing.Text, ]]]]"
            ],
            "arguments": {
                "upload_id": [
                    "str",
                    "int"
                ]
            }
        },
        "upload_lock": {
            "name": "upload_lock",
            "location": 651,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "upload_id": [
                    "str"
                ]
            }
        },
        "upload_unlock": {
            "name": "upload_unlock",
            "location": 711,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "upload_id": [
                    "str"
                ]
            }
        },
        "upload_release": {
            "name": "upload_release",
            "location": 765,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "upload_id": [
                    "str",
                    "int"
                ]
            }
        },
        "upload_unrelease": {
            "name": "upload_unrelease",
            "location": 842,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "upload_id": [
                    "str"
                ]
            }
        },
        "check_upload_content_exists": {
            "name": "check_upload_content_exists",
            "location": 926,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "upload_id": [
                    "str",
                    "int",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "get_upload_content": {
            "name": "get_upload_content",
            "location": 969,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "check_upload_file_content_exists": {
            "name": "check_upload_file_content_exists",
            "location": 1006,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "upload_id": [
                    "str",
                    "int"
                ],
                "public_file_path": [
                    "bytes",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "get_upload_file_content": {
            "name": "get_upload_file_content",
            "location": 1073,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "upload_id": [
                    "str"
                ],
                "public_file_path": [
                    "bytes",
                    "int",
                    "list[tuple[typing.Union[str,int]]]",
                    "str"
                ]
            }
        },
        "check_upload_source_log_exists": {
            "name": "check_upload_source_log_exists",
            "location": 1148,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "get_upload_source_log": {
            "name": "get_upload_source_log",
            "location": 1192,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str"
                ]
            }
        },
        "__checksum": {
            "name": "__checksum",
            "location": 1242,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "__last_modified": {
            "name": "__last_modified",
            "location": 1252,
            "return": [],
            "arguments": {
                "filepath": [
                    "str",
                    "typing.Sequence[str]",
                    "list[str]"
                ]
            }
        },
        "__content_pointer": {
            "name": "__content_pointer",
            "location": 1266,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "log_path": [
                    "str"
                ]
            }
        },
        "check_upload_service_log_exists": {
            "name": "check_upload_service_log_exists",
            "location": 1283,
            "return": [
                "tuple[dict[typing.Text, typing.Union[str,int,list[tuple[typing.Union[str,typing.Any]]],list[str]]]]"
            ],
            "arguments": {}
        },
        "get_upload_service_log": {
            "name": "get_upload_service_log",
            "location": 1312,
            "return": [
                "tuple[dict[typing.Text, typing.Union[typing.Text,int,list[str]]]]"
            ],
            "arguments": {}
        },
        "_status_data": {
            "name": "_status_data",
            "location": 1338,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "upload_db_data": [
                    "str",
                    "dict[str, int]",
                    "int",
                    "list[typing.Optional[str]]",
                    "bytes",
                    "None"
                ],
                "upload_workspace": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/controllers/__init__.py": {},
    "arxiv-filemanager-master/filemanager/controllers/tests/test_status.py": {
        "TestCheckServiceStatus.test_all_ok": {
            "name": "test_all_ok",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckServiceStatus.test_database_not_available": {
            "name": "test_database_not_available",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckServiceStatus.test_filesystem_not_available": {
            "name": "test_filesystem_not_available",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/controllers/tests/__init__.py": {},
    "arxiv-filemanager-master/filemanager/process/upload.py": {
        "_get_base_directory": {
            "name": "_get_base_directory",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "is_available": {
            "name": "is_available",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Upload.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "upload_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Upload.set_debug": {
            "name": "set_debug",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "set": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "Upload.debug": {
            "name": "debug",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.has_files": {
            "name": "has_files",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.has_files_on_disk": {
            "name": "has_files_on_disk",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.get_files": {
            "name": "get_files",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.add_file": {
            "name": "add_file",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "Upload.clear_file_list": {
            "name": "clear_file_list",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.remove_file_from_list": {
            "name": "remove_file_from_list",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "bool",
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "Upload.add_warning": {
            "name": "add_warning",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public_filepath": [
                    "int",
                    "str",
                    "None"
                ],
                "msg": [
                    "int",
                    "str"
                ]
            }
        },
        "Upload.has_warnings": {
            "name": "has_warnings",
            "location": 275,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.search_warnings": {
            "name": "search_warnings",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "search": [
                    "str"
                ]
            }
        },
        "Upload.get_warnings": {
            "name": "get_warnings",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.add_error": {
            "name": "add_error",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public_filepath": [
                    "str",
                    "typing.Callable[T, bool]"
                ],
                "msg": [
                    "str",
                    "typing.Callable[T, bool]"
                ]
            }
        },
        "Upload.has_errors": {
            "name": "has_errors",
            "location": 315,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.search_errors": {
            "name": "search_errors",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "search": [
                    "str"
                ]
            }
        },
        "Upload.clear_warnings_and_errors": {
            "name": "clear_warnings_and_errors",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.get_errors": {
            "name": "get_errors",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.upload_id": {
            "name": "upload_id",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.remove_file": {
            "name": "remove_file",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "msg": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "Upload.remove_workspace": {
            "name": "remove_workspace",
            "location": 412,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.resolve_public_file_path": {
            "name": "resolve_public_file_path",
            "location": 464,
            "return": [
                "File",
                "None"
            ],
            "arguments": {
                "self": [],
                "public_file_path": []
            }
        },
        "Upload.client_remove_file": {
            "name": "client_remove_file",
            "location": 533,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "public_file_path": []
            }
        },
        "Upload.client_remove_all_files": {
            "name": "client_remove_all_files",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.get_upload_directory": {
            "name": "get_upload_directory",
            "location": 665,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.create_upload_directory": {
            "name": "create_upload_directory",
            "location": 678,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.get_source_directory": {
            "name": "get_source_directory",
            "location": 700,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.get_removed_directory": {
            "name": "get_removed_directory",
            "location": 704,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.get_ancillary_directory": {
            "name": "get_ancillary_directory",
            "location": 708,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.create_upload_workspace": {
            "name": "create_upload_workspace",
            "location": 719,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.get_upload_source_log_path": {
            "name": "get_upload_source_log_path",
            "location": 743,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.create_upload_log": {
            "name": "create_upload_log",
            "location": 747,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.log": {
            "name": "log",
            "location": 764,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "Upload.deposit_upload": {
            "name": "deposit_upload",
            "location": 768,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "ancillary": [
                    "bool"
                ]
            }
        },
        "Upload.bbl_missing_error": {
            "name": "bbl_missing_error",
            "location": 812,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "basename": [
                    "str"
                ]
            }
        },
        "Upload.get_graphic_error_msg": {
            "name": "get_graphic_error_msg",
            "location": 822,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "bool"
                ]
            }
        },
        "Upload.check_files": {
            "name": "check_files",
            "location": 837,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.check_file_termination": {
            "name": "check_file_termination",
            "location": 1251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_obj": [
                    "typing.TextIO",
                    "list[typing.TextIO]",
                    "typing.BinaryIO",
                    "list[F]"
                ]
            }
        },
        "Upload.unmacify": {
            "name": "unmacify",
            "location": 1336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_obj": [
                    "str",
                    "bool",
                    "typing.TextIO",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Upload.strip_tiff": {
            "name": "strip_tiff",
            "location": 1393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_obj": [
                    "typing.Type"
                ]
            }
        },
        "Upload.strip_preview": {
            "name": "strip_preview",
            "location": 1470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_obj": [
                    "str"
                ],
                "what_to_strip": [
                    "str"
                ]
            }
        },
        "Upload.repair_dos_eps": {
            "name": "repair_dos_eps",
            "location": 1560,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "file_obj": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "Upload.repair_postscript": {
            "name": "repair_postscript",
            "location": 1708,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "file_obj": []
            }
        },
        "Upload.check_postscript": {
            "name": "check_postscript",
            "location": 1821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_obj": [
                    "bool",
                    "str",
                    "None"
                ],
                "tiff_flag": [
                    "int",
                    "typing.Iterator",
                    "str"
                ]
            }
        },
        "Upload.formcheck": {
            "name": "formcheck",
            "location": 1910,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_obj": [
                    "str",
                    "None"
                ]
            }
        },
        "Upload.graphic_error": {
            "name": "graphic_error",
            "location": 1925,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_obj": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "Upload.extract_uu": {
            "name": "extract_uu",
            "location": 1942,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "bool"
                ],
                "file_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "Upload.total_upload_size": {
            "name": "total_upload_size",
            "location": 1963,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "total_size": []
            }
        },
        "Upload.calculate_client_upload_size": {
            "name": "calculate_client_upload_size",
            "location": 1974,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.create_file_list": {
            "name": "create_file_list",
            "location": 2002,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.create_file_upload_summary": {
            "name": "create_file_upload_summary",
            "location": 2038,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.set_file_permissions": {
            "name": "set_file_permissions",
            "location": 2089,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.fix_top_level_directory": {
            "name": "fix_top_level_directory",
            "location": 2108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.finalize_upload": {
            "name": "finalize_upload",
            "location": 2154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.process_upload": {
            "name": "process_upload",
            "location": 2172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "typing.IO"
                ],
                "ancillary": [
                    "bool"
                ]
            }
        },
        "Upload.get_content_path": {
            "name": "get_content_path",
            "location": 2239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.remove_content_package": {
            "name": "remove_content_package",
            "location": 2248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.pack_content": {
            "name": "pack_content",
            "location": 2253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.last_modified": {
            "name": "last_modified",
            "location": 2263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.get_content": {
            "name": "get_content",
            "location": 2269,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.content_package_exists": {
            "name": "content_package_exists",
            "location": 2279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.content_package_modified": {
            "name": "content_package_modified",
            "location": 2284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.content_package_size": {
            "name": "content_package_size",
            "location": 2292,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.content_package_stale": {
            "name": "content_package_stale",
            "location": 2312,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.content_checksum": {
            "name": "content_checksum",
            "location": 2326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload._get_checksum": {
            "name": "_get_checksum",
            "location": 2339,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Upload.content_file_path": {
            "name": "content_file_path",
            "location": 2349,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "public_file_path": [
                    "str"
                ]
            }
        },
        "Upload.content_file_exists": {
            "name": "content_file_exists",
            "location": 2369,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "public_file_path": [
                    "str"
                ]
            }
        },
        "Upload.content_file_size": {
            "name": "content_file_size",
            "location": 2390,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "public_file_path": [
                    "str"
                ]
            }
        },
        "Upload.content_file_checksum": {
            "name": "content_file_checksum",
            "location": 2409,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "public_file_path": [
                    "str"
                ]
            }
        },
        "Upload.content_file_pointer": {
            "name": "content_file_pointer",
            "location": 2431,
            "return": [
                "typing.IO",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "public_file_path": [
                    "str"
                ]
            }
        },
        "Upload.content_file_last_modified": {
            "name": "content_file_last_modified",
            "location": 2452,
            "return": [],
            "arguments": {
                "self": [],
                "public_file_path": [
                    "str"
                ]
            }
        },
        "Upload.source_log_exists": {
            "name": "source_log_exists",
            "location": 2475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.source_log_size": {
            "name": "source_log_size",
            "location": 2489,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.source_log_last_modified": {
            "name": "source_log_last_modified",
            "location": 2502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.source_log_checksum": {
            "name": "source_log_checksum",
            "location": 2514,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.source_log_file_pointer": {
            "name": "source_log_file_pointer",
            "location": 2535,
            "return": [
                "typing.IO",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.count_file_types": {
            "name": "count_file_types",
            "location": 2544,
            "return": [
                "list[]",
                "list[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.get_single_file": {
            "name": "get_single_file",
            "location": 2585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upload.fix_file_ext": {
            "name": "fix_file_ext",
            "location": 2621,
            "return": [
                "typing.Sequence[str]",
                "frozenset",
                "File",
                "None"
            ],
            "arguments": {
                "self": [],
                "file_obj": [
                    "typing.Sequence[str]",
                    "frozenset"
                ],
                "new_extension": [
                    "str",
                    "bool"
                ]
            }
        },
        "Upload.source_format": {
            "name": "source_format",
            "location": 2684,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Upload.check_files._add_file": {
            "name": "_add_file",
            "location": 859,
            "return": [
                "File"
            ],
            "arguments": {
                "fpath": [],
                "warnings": [],
                "errors": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/process/__init__.py": {},
    "arxiv-filemanager-master/filemanager/process/tests/test_available.py": {
        "TestIsAvailable.test_fs_is_available": {
            "name": "test_fs_is_available",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsAvailable.test_base_dir_does_not_exist": {
            "name": "test_base_dir_does_not_exist",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsAvailable.test_base_dir_not_writeable": {
            "name": "test_base_dir_not_writeable",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/process/tests/test_compressed_upload.py": {
        "TestCompressedUpload.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompressedUpload.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompressedUpload.test_content_package_stale": {
            "name": "test_content_package_stale",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompressedUpload.test_content_package_exists": {
            "name": "test_content_package_exists",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompressedUpload.test_content_package_modified": {
            "name": "test_content_package_modified",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompressedUpload.test_content_package_size": {
            "name": "test_content_package_size",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompressedUpload.test_content_package_size_after_removing_workspace": {
            "name": "test_content_package_size_after_removing_workspace",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompressedUpload.test_content_package_size_after_removing_all_files": {
            "name": "test_content_package_size_after_removing_all_files",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompressedUpload.test_content_package_size_after_removing_a_file": {
            "name": "test_content_package_size_after_removing_a_file",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompressedUpload.test_get_content": {
            "name": "test_get_content",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/process/tests/test_process_upload.py": {
        "TestInternalSupportRoutines.test_get_upload_directory": {
            "name": "test_get_upload_directory",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_create_upload_directory": {
            "name": "test_create_upload_directory",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_get_source_directory": {
            "name": "test_get_source_directory",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_get_removed_directory": {
            "name": "test_get_removed_directory",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_create_upload_workspace": {
            "name": "test_create_upload_workspace",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_deposit_upload": {
            "name": "test_deposit_upload",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_check_file_termination": {
            "name": "test_check_file_termination",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_check_file_unmacify": {
            "name": "test_check_file_unmacify",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_fix_file_extension": {
            "name": "test_fix_file_extension",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_check_postscript": {
            "name": "test_check_postscript",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_strip_tiff": {
            "name": "test_strip_tiff",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_postscript_repair": {
            "name": "test_postscript_repair",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_repair_dos_eps": {
            "name": "test_repair_dos_eps",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_process_upload_with_subdirectories": {
            "name": "test_process_upload_with_subdirectories",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_process_count_file_types": {
            "name": "test_process_count_file_types",
            "location": 797,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_process_determine_source_format": {
            "name": "test_process_determine_source_format",
            "location": 969,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_process_anc_upload": {
            "name": "test_process_anc_upload",
            "location": 1013,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_process_bib_bbl_handling": {
            "name": "test_process_bib_bbl_handling",
            "location": 1039,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_process_unpack": {
            "name": "test_process_unpack",
            "location": 1130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.xxx_test_one_off_upload": {
            "name": "xxx_test_one_off_upload",
            "location": 1206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpload.test_process_general_upload": {
            "name": "test_process_general_upload",
            "location": 1243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInternalSupportRoutines.test_check_file_unmacify.has_cr": {
            "name": "has_cr",
            "location": 388,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/process/tests/__init__.py": {},
    "arxiv-filemanager-master/filemanager/routes/upload_api.py": {
        "is_owner": {
            "name": "is_owner",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "int",
                    "str"
                ],
                "upload_id": [
                    "int",
                    "str"
                ]
            }
        },
        "service_status": {
            "name": "service_status",
            "location": 40,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "new_upload": {
            "name": "new_upload",
            "location": 54,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "upload_files": {
            "name": "upload_files",
            "location": 83,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str"
                ]
            }
        },
        "get_upload_files": {
            "name": "get_upload_files",
            "location": 109,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str"
                ]
            }
        },
        "delete_file": {
            "name": "delete_file",
            "location": 124,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str",
                    "bytes",
                    "dict[str, str]"
                ],
                "public_file_path": [
                    "int",
                    "str",
                    "bytes",
                    "dict[str, str]"
                ]
            }
        },
        "delete_all_files": {
            "name": "delete_all_files",
            "location": 144,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str"
                ]
            }
        },
        "workspace_delete": {
            "name": "workspace_delete",
            "location": 160,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str"
                ]
            }
        },
        "lock": {
            "name": "lock",
            "location": 178,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "unlock": {
            "name": "unlock",
            "location": 198,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "release": {
            "name": "release",
            "location": 207,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "unrelease": {
            "name": "unrelease",
            "location": 221,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "check_upload_content_exists": {
            "name": "check_upload_content_exists",
            "location": 236,
            "return": [],
            "arguments": {
                "upload_id": [
                    "int"
                ]
            }
        },
        "get_upload_content": {
            "name": "get_upload_content",
            "location": 250,
            "return": [],
            "arguments": {
                "upload_id": [
                    "int",
                    "float",
                    "bytes",
                    "str"
                ]
            }
        },
        "check_file_exists": {
            "name": "check_file_exists",
            "location": 268,
            "return": [],
            "arguments": {
                "upload_id": [
                    "str",
                    "int",
                    "list[int]"
                ],
                "public_file_path": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "get_file_content": {
            "name": "get_file_content",
            "location": 284,
            "return": [],
            "arguments": {
                "upload_id": [
                    "str"
                ],
                "public_file_path": [
                    "str"
                ]
            }
        },
        "check_upload_source_log_exists": {
            "name": "check_upload_source_log_exists",
            "location": 304,
            "return": [],
            "arguments": {
                "upload_id": [
                    "int"
                ]
            }
        },
        "get_upload_source_log": {
            "name": "get_upload_source_log",
            "location": 326,
            "return": [],
            "arguments": {
                "upload_id": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "check_upload_service_log_exists": {
            "name": "check_upload_service_log_exists",
            "location": 351,
            "return": [],
            "arguments": {}
        },
        "get_upload_service_log": {
            "name": "get_upload_service_log",
            "location": 368,
            "return": [],
            "arguments": {}
        },
        "handle_exception": {
            "name": "handle_exception",
            "location": 397,
            "return": [],
            "arguments": {
                "error": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_update_headers": {
            "name": "_update_headers",
            "location": 414,
            "return": [
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "response": [
                    "dict[str, typing.Any]"
                ],
                "headers": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "arxiv-filemanager-master/filemanager/routes/__init__.py": {},
    "arxiv-filemanager-master/filemanager/routes/tests/test_head_requests.py": {
        "TestContentLengthHeader.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContentLengthHeader.test_check_upload_content_exists": {
            "name": "test_check_upload_content_exists",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_controller": []
            }
        },
        "TestContentLengthHeader.test_check_file_exists": {
            "name": "test_check_file_exists",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_controller": []
            }
        },
        "TestContentLengthHeader.test_check_upload_source_log_exists": {
            "name": "test_check_upload_source_log_exists",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_controller": []
            }
        },
        "TestContentLengthHeader.test_check_upload_service_log_exists": {
            "name": "test_check_upload_service_log_exists",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_controller": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/routes/tests/test_readiness_endpoint.py": {
        "TestReadinessEndpoint.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadinessEndpoint.test_get_readiness_endpoint": {
            "name": "test_get_readiness_endpoint",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReadinessEndpoint.test_not_ready": {
            "name": "test_not_ready",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/routes/tests/__init__.py": {},
    "arxiv-filemanager-master/filemanager/services/__init__.py": {},
    "arxiv-filemanager-master/filemanager/services/tests/test_db_available.py": {
        "raise_operationalerror": {
            "name": "raise_operationalerror",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestIsAvailable.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsAvailable.test_db_is_available": {
            "name": "test_db_is_available",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsAvailable.test_database_not_available": {
            "name": "test_database_not_available",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/services/tests/__init__.py": {},
    "arxiv-filemanager-master/filemanager/services/uploads/models.py": {},
    "arxiv-filemanager-master/filemanager/services/uploads/__init__.py": {
        "init_app": {
            "name": "init_app",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "None"
                ]
            }
        },
        "is_available": {
            "name": "is_available",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "retrieve": {
            "name": "retrieve",
            "location": 39,
            "return": [
                "None",
                "Upload"
            ],
            "arguments": {
                "upload_id": [
                    "int",
                    "str",
                    "float",
                    "None"
                ],
                "skip_cache": [
                    "bool"
                ]
            }
        },
        "store": {
            "name": "store",
            "location": 117,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "typing.Type",
                "int",
                "None"
            ],
            "arguments": {
                "new_upload_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "int",
                    "None"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "upload_update_data": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "dict[, ]",
                    "int",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        }
    },
    "arxiv-filemanager-master/filemanager/utilities/unpack.py": {
        "unpack_archive": {
            "name": "unpack_archive",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "upload": []
            }
        }
    },
    "arxiv-filemanager-master/filemanager/utilities/upload_size.py": {
        "check_upload_file_size_limit": {
            "name": "check_upload_file_size_limit",
            "location": 2,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "check_individual_file_size_limit": {
            "name": "check_individual_file_size_limit",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "check_aggregate_size_limit": {
            "name": "check_aggregate_size_limit",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "upload_id": [
                    "str",
                    "list[str]",
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "arxiv-filemanager-master/tests/test_ancillary_upload.py": {
        "TestUploadAncillaryFile.test_upload_ancillary": {
            "name": "test_upload_ancillary",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_base_dir": []
            }
        }
    },
    "arxiv-filemanager-master/tests/test_malicious_uploads.py": {
        "TestRelativePaths.test_relative_path": {
            "name": "test_relative_path",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_base_dir": []
            }
        }
    },
    "arxiv-filemanager-master/tests/test_pack_content.py": {
        "TestPackContent.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_base_dir": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "TestPackContent.test_get_content_path": {
            "name": "test_get_content_path",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_base_dir": []
            }
        },
        "TestPackContent.test_pack_content": {
            "name": "test_pack_content",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_base_dir": []
            }
        },
        "TestPackContent.test_content_checksum": {
            "name": "test_content_checksum",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_base_dir": []
            }
        },
        "TestPackContent.test_get_content": {
            "name": "test_get_content",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_base_dir": []
            }
        }
    },
    "arxiv-filemanager-master/tests/test_routes_upload_api.py": {
        "generate_token": {
            "name": "generate_token",
            "location": 31,
            "return": [
                "str",
                "dict[typing.Any, str]",
                "list[]"
            ],
            "arguments": {
                "app": [],
                "scope": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestUploadAPIRoutes.setUp": {
            "name": "setUp",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.test_create_upload_failures": {
            "name": "test_create_upload_failures",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.test_existing_upload_failures": {
            "name": "test_existing_upload_failures",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.test_various_log_download_requests": {
            "name": "test_various_log_download_requests",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.test_individual_file_content_download": {
            "name": "test_individual_file_content_download",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.test_delete_file": {
            "name": "test_delete_file",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.test_delete_all_files": {
            "name": "test_delete_all_files",
            "location": 720,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.test_delete_upload_workspace": {
            "name": "test_delete_upload_workspace",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.test_lock_unlock": {
            "name": "test_lock_unlock",
            "location": 904,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.test_release_unrelease": {
            "name": "test_release_unrelease",
            "location": 1012,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.test_missing_bbl_upload": {
            "name": "test_missing_bbl_upload",
            "location": 1136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.search_errors": {
            "name": "search_errors",
            "location": 1228,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "mstring": [
                    "str",
                    "typing.Any"
                ],
                "mtype": [
                    "bool"
                ],
                "filename": [
                    "str",
                    "int",
                    "typing.Type"
                ],
                "error_list": [
                    "str"
                ]
            }
        },
        "TestUploadAPIRoutes.search_files": {
            "name": "search_files",
            "location": 1250,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "files": [
                    "list[dict[str, typing.Any]]",
                    "set[str]"
                ]
            }
        },
        "TestUploadAPIRoutes.test_warnings_and_errors": {
            "name": "test_warnings_and_errors",
            "location": 1264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.test_eps_repair": {
            "name": "test_eps_repair",
            "location": 1475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.xxx_test_one_off_situations": {
            "name": "xxx_test_one_off_situations",
            "location": 1656,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadAPIRoutes.test_upload_files_normal": {
            "name": "test_upload_files_normal",
            "location": 1715,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-filemanager-master/tests/test_service_upload.py": {
        "TestUploadGetter.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadGetter.tearDown": {
            "name": "tearDown",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadGetter.test_get_an_upload_that_exists": {
            "name": "test_get_an_upload_that_exists",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadGetter.test_get_an_upload_that_doesnt_exist": {
            "name": "test_get_an_upload_that_doesnt_exist",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadGetter.test_get_upload_when_db_is_unavailable": {
            "name": "test_get_upload_when_db_is_unavailable",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": []
            }
        },
        "TestUploadCreator.setUp": {
            "name": "setUp",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadCreator.tearDown": {
            "name": "tearDown",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadCreator.test_store_an_upload": {
            "name": "test_store_an_upload",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadUpdater.setUp": {
            "name": "setUp",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadUpdater.tearDown": {
            "name": "tearDown",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadUpdater.test_update_an_upload": {
            "name": "test_update_an_upload",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadUpdater.test_operationalerror_is_handled": {
            "name": "test_operationalerror_is_handled",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": []
            }
        },
        "TestUploadUpdater.test_upload_really_does_not_exist": {
            "name": "test_upload_really_does_not_exist",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploadUpdater.test_thing_does_not_exist": {
            "name": "test_thing_does_not_exist",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestUploadGetter.test_get_upload_when_db_is_unavailable.raise_op_error": {
            "name": "raise_op_error",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestUploadUpdater.test_operationalerror_is_handled.raise_op_error": {
            "name": "raise_op_error",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "arxiv-filemanager-master/tests/test_unit_file.py": {
        "TestFileClass.test_file": {
            "name": "test_file",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileClass.test_file_subdirectory": {
            "name": "test_file_subdirectory",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileClass.test_file_setters": {
            "name": "test_file_setters",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileClass.test_remove": {
            "name": "test_remove",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileClass.test_anc_detection": {
            "name": "test_anc_detection",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileClass.test_dirs": {
            "name": "test_dirs",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-filemanager-master/tests/test_unit_file_type.py": {
        "TestGuessFileType.test_file_type_guess": {
            "name": "test_file_type_guess",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGuessFileType.test_get_type_name": {
            "name": "test_get_type_name",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGuessFileType.test_is_tex_type": {
            "name": "test_is_tex_type",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGuessFileType.test_type_priority": {
            "name": "test_type_priority",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExternalMethods.test_abreviated_type_methods": {
            "name": "test_abreviated_type_methods",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-filemanager-master/tests/__init__.py": {}
}
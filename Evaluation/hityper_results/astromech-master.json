{
    "astromech-master/setup.py": {},
    "astromech-master/astromech/dynamodb.py": {
        "resource": {
            "name": "resource",
            "location": 28,
            "return": [
                "int",
                "str",
                "None",
                "set[]",
                "set[str]",
                "dict[str, typing.Any]"
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "table": {
            "name": "table",
            "location": 62,
            "return": [
                "dict[str, typing.Type]",
                "str",
                "dict[str, dict[str, bool]]",
                "list[str]"
            ],
            "arguments": {
                "table_name": [
                    "None",
                    "str"
                ]
            }
        },
        "exists": {
            "name": "exists",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": []
            }
        }
    },
    "astromech-master/astromech/logging.py": {},
    "astromech-master/astromech/s3.py": {
        "client": {
            "name": "client",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "parse_uri": {
            "name": "parse_uri",
            "location": 41,
            "return": [
                "tuple[typing.Union[int,list[],bytes,dict[str, typing.Union[int,str]],list[int],dict[, ],list[str],str]]"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "to_uri": {
            "name": "to_uri",
            "location": 56,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "typing.Type",
                    "dict[str, str]"
                ],
                "key": [
                    "str",
                    "typing.Type",
                    "dict[str, str]"
                ]
            }
        },
        "default_path": {
            "name": "default_path",
            "location": 69,
            "return": [
                "tuple[typing.Union[None,str,dict[, ],dict[str, typing.Any],bytes]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes"
                ],
                "bucket": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "key_prefix": [
                    "None",
                    "str",
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "exists": {
            "name": "exists",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_size": {
            "name": "get_size",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "get_bytes": {
            "name": "get_bytes",
            "location": 147,
            "return": [],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "get_tags": {
            "name": "get_tags",
            "location": 162,
            "return": [],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "put_bytes": {
            "name": "put_bytes",
            "location": 188,
            "return": [
                "tuple[typing.Union[str,bytes,dict[, ],int]]"
            ],
            "arguments": {
                "buf": [],
                "bucket": [
                    "str",
                    "bytes",
                    "dict[, ]"
                ],
                "key": [
                    "str",
                    "bytes",
                    "dict[, ]"
                ],
                "tags": [
                    "dict[, ]"
                ],
                "acl": [
                    "typing.Text"
                ]
            }
        }
    },
    "astromech-master/astromech/sns.py": {
        "client": {
            "name": "client",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "publish": {
            "name": "publish",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "topic_arn": [
                    "str",
                    "dict[, ]",
                    "typing.BinaryIO",
                    "typing.Mapping"
                ],
                "context": [
                    "str",
                    "bool",
                    "typing.Type"
                ],
                "payload": [
                    "str",
                    "dict[, ]",
                    "typing.BinaryIO",
                    "typing.Mapping"
                ],
                "extra_attributes": [
                    "dict[, ]"
                ],
                "subject": [
                    "None",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "publish_to_bus": {
            "name": "publish_to_bus",
            "location": 77,
            "return": [],
            "arguments": {
                "context": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "payload": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "extra_attributes": [
                    "dict[, ]"
                ],
                "subject": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        }
    },
    "astromech-master/astromech/sqs.py": {
        "client": {
            "name": "client",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "parse_event": {
            "name": "parse_event",
            "location": 39,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        }
    },
    "astromech-master/astromech/ssm.py": {
        "client": {
            "name": "client",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "get_param_value": {
            "name": "get_param_value",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "param": [
                    "dict[str, dict[str, typing.Any]]"
                ],
                "decrypt": [
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        }
    },
    "astromech-master/astromech/__init__.py": {},
    "astromech-master/tests/conftest.py": {
        "context": {
            "name": "context",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "astromech-master/tests/test_dynamodb.py": {
        "test_resource": {
            "name": "test_resource",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_localstack_resource": {
            "name": "test_localstack_resource",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_client": {
            "name": "test_client",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_table_no_envvar": {
            "name": "test_table_no_envvar",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_table_using_env": {
            "name": "test_table_using_env",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_table_using_arg": {
            "name": "test_table_using_arg",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_localstack_table": {
            "name": "test_localstack_table",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_exists": {
            "name": "test_exists",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_does_not_exist": {
            "name": "test_does_not_exist",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "astromech-master/tests/test_s3.py": {
        "bucket": {
            "name": "bucket",
            "location": 12,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "key": {
            "name": "key",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "test_client": {
            "name": "test_client",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_localstack_client": {
            "name": "test_localstack_client",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_parse_uri": {
            "name": "test_parse_uri",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_non_s3_uri": {
            "name": "test_parse_non_s3_uri",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_uri": {
            "name": "test_to_uri",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_path": {
            "name": "test_default_path",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_exists": {
            "name": "test_exists",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_does_not_exist": {
            "name": "test_does_not_exist",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "test_get_size": {
            "name": "test_get_size",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_bytes": {
            "name": "test_get_bytes",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "test_get_tags": {
            "name": "test_get_tags",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [
                    "str",
                    "list[str]"
                ],
                "key": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_put_bytes": {
            "name": "test_put_bytes",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [
                    "list[str]",
                    "typing.TextIO",
                    "str"
                ],
                "key": [
                    "list[str]",
                    "typing.TextIO",
                    "str"
                ]
            }
        }
    },
    "astromech-master/tests/test_sns.py": {
        "test_client": {
            "name": "test_client",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_localstack_client": {
            "name": "test_localstack_client",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "params_for_publish": {
            "name": "params_for_publish",
            "location": 31,
            "return": [
                "tuple[typing.Union[typing.Text,dict[typing.Text, dict[typing.Text, typing.Text]],dict[typing.Text, typing.Union[typing.Text,tuple['cirq.Qid'],int,dict[typing.Text, dict[typing.Text, typing.Text]]]]]]"
            ],
            "arguments": {
                "context": [
                    "dict[str, str]"
                ],
                "subject": [
                    "tuple['cirq.Qid']",
                    "int"
                ]
            }
        },
        "test_publish": {
            "name": "test_publish",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "subject": []
            }
        },
        "test_publish_to_bus": {
            "name": "test_publish_to_bus",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "subject": [],
                "monkeypatch": []
            }
        }
    },
    "astromech-master/tests/test_sqs.py": {
        "test_client": {
            "name": "test_client",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_localstack_client": {
            "name": "test_localstack_client",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_parse_event": {
            "name": "test_parse_event",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "astromech-master/tests/test_ssm.py": {
        "test_client": {
            "name": "test_client",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_localstack_client": {
            "name": "test_localstack_client",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_param_value": {
            "name": "test_get_param_value",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
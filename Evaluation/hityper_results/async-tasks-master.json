{
    "async-tasks-master/setup.py": {},
    "async-tasks-master/at_control/definitions.py": {
        "TaskDef.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.Sequence[typing.Any]",
                    "bool"
                ],
                "topic": [
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ],
                "timeout": [
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "ProjectDef.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "int",
                    "list[int]",
                    "str",
                    "list[str]"
                ],
                "tasks": [
                    "str"
                ]
            }
        }
    },
    "async-tasks-master/at_control/deploy.py": {
        "deploy": {
            "name": "deploy",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "__deploy_task": {
            "name": "__deploy_task",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "gen_path": [
                    "str"
                ],
                "task": [
                    "str",
                    "typing.IO",
                    "None",
                    "list[]"
                ]
            }
        },
        "__generate_source_dir": {
            "name": "__generate_source_dir",
            "location": 36,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "list[]"
                ],
                "project": [
                    "typing.Pattern",
                    "set[]",
                    "str"
                ]
            }
        },
        "__main_content": {
            "name": "__main_content",
            "location": 61,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "project": [
                    "str",
                    "bytes",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "__requirements_content": {
            "name": "__requirements_content",
            "location": 87,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "async-tasks-master/at_control/loader.py": {
        "load_project": {
            "name": "load_project",
            "location": 8,
            "return": [
                "ProjectDef"
            ],
            "arguments": {
                "dir": []
            }
        },
        "__load_task": {
            "name": "__load_task",
            "location": 24,
            "return": [
                "TaskDef"
            ],
            "arguments": {
                "module": [
                    "str",
                    "list[dict[str, str]]",
                    "list[]"
                ],
                "dir": []
            }
        }
    },
    "async-tasks-master/at_control/__init__.py": {},
    "async-tasks-master/at_runner/storage.py": {
        "LazyConnection.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "LazyConnection.__getattr__": {
            "name": "__getattr__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "list[]"
                ]
            }
        },
        "LazyConnection.__connect": {
            "name": "__connect",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Storage.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bool"
                ]
            }
        },
        "Storage.setup": {
            "name": "setup",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Storage.lock": {
            "name": "lock",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None",
                    "dict[str, L]"
                ],
                "id": [
                    "str",
                    "int",
                    "None",
                    "dict[str, L]"
                ],
                "timeout": [
                    "bool"
                ]
            }
        },
        "Storage.complete": {
            "name": "complete",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "None"
                ],
                "id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Storage.release": {
            "name": "release",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "id": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Storage.invalid": {
            "name": "invalid",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "bytes",
                    "None"
                ],
                "id": [
                    "str",
                    "int",
                    "bytes",
                    "None"
                ],
                "data": [
                    "str",
                    "int",
                    "bytes",
                    "None"
                ],
                "errors": [
                    "str",
                    "int",
                    "bytes",
                    "None"
                ]
            }
        }
    },
    "async-tasks-master/at_runner/task.py": {
        "Task.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store": [
                    "str",
                    "int",
                    "None",
                    "dict[str, T]"
                ],
                "name": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "timeout": [
                    "float",
                    "int",
                    "tuple[]",
                    "list[float]",
                    "None"
                ]
            }
        },
        "Task.lock_and_run": {
            "name": "lock_and_run",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "context": [
                    "str"
                ]
            }
        },
        "Task.schema": {
            "name": "schema",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.run": {
            "name": "run",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "dict[str, str]",
                    "int",
                    "str"
                ],
                "data": [
                    "dict[str, str]",
                    "int",
                    "str"
                ],
                "attributes": [
                    "dict[str, str]",
                    "int",
                    "str"
                ],
                "timestamp": [
                    "dict[str, str]",
                    "int",
                    "str"
                ]
            }
        },
        "Task.__id": {
            "name": "__id",
            "location": 67,
            "return": [
                "int",
                "...",
                "str"
            ],
            "arguments": {
                "context": [
                    "tuple[typing.Union[int,...]]",
                    "str"
                ]
            }
        },
        "Task.__parse": {
            "name": "__parse",
            "location": 70,
            "return": [
                "tuple[typing.Union[str,list[int],bytes]]",
                "tuple[typing.Optional[dict[typing.Text, list[typing.Text]]]]"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]"
                ]
            }
        }
    },
    "async-tasks-master/at_runner/test.py": {
        "TestTask.schema": {
            "name": "schema",
            "location": 17,
            "return": [
                "TestSchema"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTask.run": {
            "name": "run",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "dict[str, str]",
                    "int",
                    "str"
                ],
                "data": [
                    "dict[str, str]",
                    "int",
                    "str"
                ],
                "attributes": [
                    "dict[str, str]",
                    "int",
                    "str"
                ],
                "timestamp": [
                    "dict[str, str]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "async-tasks-master/at_runner/__init__.py": {},
    "async-tasks-master/example/one/__init__.py": {
        "OneTask.schema": {
            "name": "schema",
            "location": 15,
            "return": [
                "OneSchema"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneTask.run": {
            "name": "run",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "dict[str, str]",
                    "int",
                    "str"
                ],
                "data": [
                    "dict[str, str]",
                    "int",
                    "str"
                ],
                "attributes": [
                    "dict[str, str]",
                    "int",
                    "str"
                ],
                "timestamp": [
                    "dict[str, str]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "async-tasks-master/example/two/__init__.py": {
        "TwoTask.schema": {
            "name": "schema",
            "location": 16,
            "return": [
                "TwoSchema"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwoTask.run": {
            "name": "run",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "dict[str, str]",
                    "int",
                    "str"
                ],
                "data": [
                    "dict[str, str]",
                    "int",
                    "str"
                ],
                "attributes": [
                    "dict[str, str]",
                    "int",
                    "str"
                ],
                "timestamp": [
                    "dict[str, str]",
                    "int",
                    "str"
                ]
            }
        }
    }
}
{
    "augury-main/app.py": {
        "_run_kwargs": {
            "name": "_run_kwargs",
            "location": 39,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Text]]"
            ],
            "arguments": {}
        },
        "_unauthorized_response": {
            "name": "_unauthorized_response",
            "location": 53,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_request_is_authorized": {
            "name": "_request_is_authorized",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "http_request": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "predictions": {
            "name": "predictions",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "fixtures": {
            "name": "fixtures",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "match_results": {
            "name": "match_results",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "matches": {
            "name": "matches",
            "location": 187,
            "return": [],
            "arguments": {}
        },
        "ml_models": {
            "name": "ml_models",
            "location": 216,
            "return": [],
            "arguments": {}
        }
    },
    "augury-main/.ipython/profile_default/startup/00-kedro-init.py": {
        "reload_kedro": {
            "name": "reload_kedro",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "line": [
                    "None",
                    "str",
                    "bool",
                    "list[]",
                    "list[str]"
                ]
            }
        }
    },
    "augury-main/docs/source/conf.py": {
        "remove_arrows_in_examples": {
            "name": "remove_arrows_in_examples",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "autodoc_process_docstring": {
            "name": "autodoc_process_docstring",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bool",
                    "None"
                ],
                "what": [
                    "str",
                    "bool",
                    "None"
                ],
                "name": [
                    "str",
                    "bool",
                    "None"
                ],
                "obj": [
                    "str",
                    "bool",
                    "None"
                ],
                "options": [
                    "str",
                    "bool",
                    "None"
                ],
                "lines": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "skip": {
            "name": "skip",
            "location": 243,
            "return": [
                "bool",
                "str",
                "int",
                "None",
                "list[str]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ],
                "what": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ],
                "name": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ],
                "obj": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ],
                "skip": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ],
                "options": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "augury-main/notebooks/__init__.py": {},
    "augury-main/notebooks/src/__init__.py": {},
    "augury-main/notebooks/src/data/data_builder.py": {
        "DataBuilder.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_classes": [],
                "csv_paths": [],
                "shared_index_cols": [
                    "list[typing.Text]"
                ]
            }
        },
        "DataBuilder.concat": {
            "name": "concat",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "raw": [
                    "bool"
                ]
            }
        },
        "BettingData.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csv_path": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "shared_index_cols": [
                    "str",
                    "typing.Type"
                ],
                "index_col": [
                    "tuple[typing.Text]"
                ],
                "parse_dates": [
                    "list[typing.Text]"
                ]
            }
        },
        "BettingData.data_frame": {
            "name": "data_frame",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BettingData.__split_home_away": {
            "name": "__split_home_away",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "team_type": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "BettingData.__rename_home_away_columns": {
            "name": "__rename_home_away_columns",
            "location": 57,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "self": [],
                "team_type": [
                    "str",
                    "None",
                    "list[str]",
                    "typing.Type"
                ]
            }
        },
        "MatchData.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csv_path": [
                    "str",
                    "None"
                ],
                "shared_index_cols": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "parse_dates": [
                    "list[typing.Text]"
                ]
            }
        },
        "MatchData.data_frame": {
            "name": "data_frame",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MatchData.__convert_datetime_to_date": {
            "name": "__convert_datetime_to_date",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "df": [
                    "str"
                ]
            }
        }
    },
    "augury-main/notebooks/src/data/data_transformer.py": {
        "DataTransformer.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "DataTransformer.clean": {
            "name": "clean",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "min_year": [
                    "typing.Text"
                ],
                "max_year": [
                    "typing.Text"
                ],
                "drop_cols": [
                    "list[typing.Text]"
                ]
            }
        },
        "DataTransformer.stack_teams": {
            "name": "stack_teams",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataTransformer.__extract_round_number": {
            "name": "__extract_round_number",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "DataTransformer.__match_round": {
            "name": "__match_round",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "round_string": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "DataTransformer.__team_df": {
            "name": "__team_df",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "team_type": [
                    "str"
                ]
            }
        },
        "DataTransformer.__replace_col_names": {
            "name": "__replace_col_names",
            "location": 75,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "team_type": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "oppo_team_type": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "DataTransformer.__extract_year": {
            "name": "__extract_year",
            "location": 81,
            "return": [],
            "arguments": {
                "df": [
                    "str"
                ]
            }
        }
    },
    "augury-main/notebooks/src/data/feature_builder.py": {
        "FeatureBuilder.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": []
            }
        },
        "FeatureBuilder.transform": {
            "name": "transform",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureBuilder.add_last_week_score": {
            "name": "add_last_week_score",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureBuilder.add_season_cum_features": {
            "name": "add_season_cum_features",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oppo_col": [
                    "bool"
                ]
            }
        },
        "FeatureBuilder.add_rolling_features": {
            "name": "add_rolling_features",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oppo_col": [
                    "bool"
                ]
            }
        },
        "FeatureBuilder.add_ladder_position": {
            "name": "add_ladder_position",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oppo_col": [
                    "bool"
                ]
            }
        },
        "FeatureBuilder.add_win_streak": {
            "name": "add_win_streak",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oppo_col": [
                    "bool"
                ]
            }
        },
        "FeatureBuilder.__cum_percent_col": {
            "name": "__cum_percent_col",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FeatureBuilder.__cum_win_points_col": {
            "name": "__cum_win_points_col",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FeatureBuilder.__rolling_pred_win_rate_col": {
            "name": "__rolling_pred_win_rate_col",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FeatureBuilder.__rolling_last_week_win_rate_col": {
            "name": "__rolling_last_week_win_rate_col",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FeatureBuilder.__ladder_position_col": {
            "name": "__ladder_position_col",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FeatureBuilder.__win_streak_col": {
            "name": "__win_streak_col",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FeatureBuilder.__cum_col": {
            "name": "__cum_col",
            "location": 159,
            "return": [],
            "arguments": {
                "series": [
                    "int",
                    "str",
                    "typing.Type",
                    "list[list[str]]"
                ]
            }
        },
        "FeatureBuilder.__rolling_col": {
            "name": "__rolling_col",
            "location": 167,
            "return": [],
            "arguments": {
                "series": []
            }
        },
        "FeatureBuilder.__add_oppo_col": {
            "name": "__add_oppo_col",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "col_name": []
            }
        }
    },
    "augury-main/notebooks/src/data/feature_engineering.py": {
        "city_lat_long": {
            "name": "city_lat_long",
            "location": 62,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "city": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "team_match_id": {
            "name": "team_match_id",
            "location": 66,
            "return": [],
            "arguments": {
                "df": [
                    "str"
                ]
            }
        },
        "match_result": {
            "name": "match_result",
            "location": 72,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "margin": [
                    "int"
                ]
            }
        },
        "home_away_df": {
            "name": "home_away_df",
            "location": 80,
            "return": [],
            "arguments": {
                "at_home": [
                    "list[]"
                ],
                "df": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "ladder_position": {
            "name": "ladder_position",
            "location": 102,
            "return": [],
            "arguments": {
                "data_frame": []
            }
        },
        "_elo_formula": {
            "name": "_elo_formula",
            "location": 151,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "prev_elo_rating": [
                    "int",
                    "float"
                ],
                "prev_oppo_elo_rating": [
                    "int"
                ],
                "margin": [
                    "int",
                    "float"
                ],
                "at_home": [
                    "int",
                    "tuple[numpy.dtype]",
                    "typing.Iterator"
                ]
            }
        },
        "_cross_year_elo": {
            "name": "_cross_year_elo",
            "location": 161,
            "return": [
                "float"
            ],
            "arguments": {
                "elo_rating": [
                    "int"
                ]
            }
        },
        "_calculate_prev_elo_ratings": {
            "name": "_calculate_prev_elo_ratings",
            "location": 165,
            "return": [
                "tuple[int]",
                "tuple[typing.Union[int,pd_@_Series]]"
            ],
            "arguments": {
                "prev_match": [
                    "str",
                    "None",
                    "float",
                    "dict[str, typing.Any]"
                ],
                "prev_oppo_match": [
                    "int",
                    "None"
                ],
                "cum_elo_ratings": [
                    "dict[str, typing.Any]",
                    "float",
                    "None"
                ],
                "year": [
                    "int",
                    "typing.Sequence[int]"
                ]
            }
        },
        "_calculate_elo_rating": {
            "name": "_calculate_elo_rating",
            "location": 202,
            "return": [],
            "arguments": {
                "prev_match": [
                    "float",
                    "None",
                    "int"
                ],
                "prev_oppo_match": [
                    "float",
                    "None",
                    "int"
                ],
                "match_row": [
                    "tuple[]",
                    "str"
                ],
                "cum_elo_ratings": [
                    "float",
                    "None",
                    "int"
                ]
            }
        },
        "_get_previous_match": {
            "name": "_get_previous_match",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "data_frame": [
                    "tuple[typing.Union[int,int]]",
                    "str"
                ],
                "year": [
                    "int"
                ],
                "round_number": [
                    "int",
                    "str"
                ],
                "team": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        },
        "_calculate_match_elo_rating": {
            "name": "_calculate_match_elo_rating",
            "location": 237,
            "return": [
                "float",
                "int",
                "typing.Callable[numpy.ndarray,numpy.ndarray, float]",
                "None"
            ],
            "arguments": {
                "root_data_frame": [],
                "cum_elo_ratings": [
                    "float",
                    "int",
                    "None",
                    "typing.Callable[numpy.ndarray,numpy.ndarray, float]"
                ],
                "items": [
                    "int",
                    "list[str]",
                    "str",
                    "list[typing.Optional['Cell']]"
                ]
            }
        },
        "add_elo_rating": {
            "name": "add_elo_rating",
            "location": 263,
            "return": [
                "dict[str, list[typing.Any]]",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "float",
                    "bool",
                    "tuple[]"
                ]
            }
        },
        "match_id": {
            "name": "match_id",
            "location": 279,
            "return": [],
            "arguments": {
                "data_frame": [
                    "str",
                    "bytes"
                ]
            }
        },
        "player_team_match_id": {
            "name": "player_team_match_id",
            "location": 294,
            "return": [],
            "arguments": {
                "df": [
                    "str"
                ]
            }
        },
        "playing_for_team_match_id": {
            "name": "playing_for_team_match_id",
            "location": 298,
            "return": [],
            "arguments": {
                "df": [
                    "str"
                ]
            }
        }
    },
    "augury-main/notebooks/src/data/fitzroy_data.py": {
        "fitzroy": {
            "name": "fitzroy",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_last_week_goals": {
            "name": "add_last_week_goals",
            "location": 133,
            "return": [],
            "arguments": {
                "data_frame": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "add_last_week_behinds": {
            "name": "add_last_week_behinds",
            "location": 141,
            "return": [],
            "arguments": {
                "data_frame": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "add_out_of_state": {
            "name": "add_out_of_state",
            "location": 149,
            "return": [],
            "arguments": {
                "data_frame": [
                    "list[]"
                ]
            }
        },
        "haversine_formula": {
            "name": "haversine_formula",
            "location": 157,
            "return": [],
            "arguments": {
                "lat_long1": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "lat_long2": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "add_travel_distance": {
            "name": "add_travel_distance",
            "location": 174,
            "return": [],
            "arguments": {
                "data_frame": []
            }
        },
        "fr_match_data": {
            "name": "fr_match_data",
            "location": 190,
            "return": [],
            "arguments": {}
        }
    },
    "augury-main/notebooks/src/data/player_data.py": {
        "id_col": {
            "name": "id_col",
            "location": 44,
            "return": [],
            "arguments": {
                "df": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "player_data": {
            "name": "player_data",
            "location": 52,
            "return": [],
            "arguments": {
                "start_date": [
                    "typing.Text"
                ],
                "end_date": [
                    "typing.Text"
                ],
                "aggregate": [
                    "bool"
                ],
                "prev_match_stats": [
                    "bool"
                ]
            }
        }
    },
    "augury-main/notebooks/src/data/preprocessing.py": {
        "raw_betting_df": {
            "name": "raw_betting_df",
            "location": 8,
            "return": [],
            "arguments": {
                "path": [
                    "typing.Text"
                ]
            }
        },
        "raw_match_df": {
            "name": "raw_match_df",
            "location": 28,
            "return": [],
            "arguments": {
                "path": [
                    "typing.Text"
                ]
            }
        },
        "betting_df": {
            "name": "betting_df",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "get_round_number": {
            "name": "get_round_number",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "typing.Type",
                    "typing.Sequence[str]"
                ]
            }
        },
        "betting_model_df": {
            "name": "betting_model_df",
            "location": 73,
            "return": [],
            "arguments": {
                "test_year": [
                    "typing.Text"
                ]
            }
        },
        "team_df": {
            "name": "team_df",
            "location": 87,
            "return": [],
            "arguments": {
                "df": [],
                "team_type": [
                    "typing.Text"
                ]
            }
        },
        "team_betting_model_df": {
            "name": "team_betting_model_df",
            "location": 108,
            "return": [],
            "arguments": {
                "df": []
            }
        },
        "team_year_cum_col": {
            "name": "team_year_cum_col",
            "location": 116,
            "return": [],
            "arguments": {
                "df": [
                    "dict[\"core.Edge\", \"state.State\"]",
                    "int",
                    "dict[str, str]",
                    "bytes",
                    "str",
                    "typing.Sequence[tuple[typing.Union[str,int]]]"
                ],
                "stat_label": [
                    "dict[\"core.Edge\", \"state.State\"]",
                    "int",
                    "dict[str, str]",
                    "bytes",
                    "str",
                    "typing.Sequence[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "team_year_percent": {
            "name": "team_year_percent",
            "location": 126,
            "return": [],
            "arguments": {
                "df": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "team_year_win_points": {
            "name": "team_year_win_points",
            "location": 132,
            "return": [],
            "arguments": {
                "df": [
                    "str"
                ]
            }
        },
        "team_year_ladder_position": {
            "name": "team_year_ladder_position",
            "location": 142,
            "return": [],
            "arguments": {
                "df": [
                    "int",
                    "float"
                ]
            }
        },
        "team_year_oppo_feature": {
            "name": "team_year_oppo_feature",
            "location": 173,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "column_label": [
                    "int",
                    "list[]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "rolling_team_rate": {
            "name": "rolling_team_rate",
            "location": 189,
            "return": [],
            "arguments": {
                "series": []
            }
        },
        "rolling_pred_win_rate": {
            "name": "rolling_pred_win_rate",
            "location": 205,
            "return": [],
            "arguments": {
                "df": [
                    "str"
                ]
            }
        },
        "last_week_result": {
            "name": "last_week_result",
            "location": 211,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "df": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "rolling_last_week_win_rate": {
            "name": "rolling_last_week_win_rate",
            "location": 217,
            "return": [],
            "arguments": {
                "df": [
                    "int"
                ]
            }
        },
        "win_streak": {
            "name": "win_streak",
            "location": 224,
            "return": [],
            "arguments": {
                "df": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "cum_team_df": {
            "name": "cum_team_df",
            "location": 257,
            "return": [],
            "arguments": {
                "df": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "augury-main/notebooks/src/data/__init__.py": {},
    "augury-main/notebooks/src/model/charts.py": {
        "graph_yearly_model_performance": {
            "name": "graph_yearly_model_performance",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "year_data_frame": [
                    "int",
                    "dict[, ]"
                ],
                "error": [
                    "bool"
                ]
            }
        },
        "graph_tf_model_history": {
            "name": "graph_tf_model_history",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "history": [
                    "typing.Callable[, ]",
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "graph_cv_model_performance": {
            "name": "graph_cv_model_performance",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "performance_data_frame": []
            }
        }
    },
    "augury-main/notebooks/src/model/metrics.py": {
        "regression_accuracy": {
            "name": "regression_accuracy",
            "location": 13,
            "return": [],
            "arguments": {
                "y": [],
                "y_pred": []
            }
        },
        "measure_regressor": {
            "name": "measure_regressor",
            "location": 26,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "estimator": [],
                "data": [
                    "str",
                    "int"
                ],
                "accuracy": [
                    "bool"
                ]
            }
        },
        "measure_classifier": {
            "name": "measure_classifier",
            "location": 57,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "estimator": [],
                "data": [
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "set[]"
                ]
            }
        },
        "measure_estimators": {
            "name": "measure_estimators",
            "location": 80,
            "return": [],
            "arguments": {
                "estimators": [
                    "str"
                ],
                "data": [
                    "int",
                    "str",
                    "dict[str, float]",
                    "bytes",
                    "dict[str, str]"
                ],
                "model_type": [
                    "typing.Text"
                ],
                "accuracy": [
                    "bool"
                ],
                "cv": [
                    "int"
                ],
                "n_jobs": [
                    "int"
                ]
            }
        },
        "_estimator_score": {
            "name": "_estimator_score",
            "location": 143,
            "return": [
                "dict[typing.Text, typing.Union[str,dict[, ],tuple[typing.Union[str,str,str,str]]]]"
            ],
            "arguments": {
                "year": [
                    "str",
                    "dict[, ]"
                ],
                "data": [
                    "int",
                    "None"
                ],
                "estimator_params": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "_yearly_performance_score": {
            "name": "_yearly_performance_score",
            "location": 165,
            "return": [
                "list[]"
            ],
            "arguments": {
                "estimators": [
                    "str",
                    "list[]"
                ],
                "features": [
                    "str"
                ],
                "labels": [
                    "int",
                    "str",
                    "None"
                ],
                "data_frame": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "year": [
                    "str"
                ]
            }
        },
        "yearly_performance_scores": {
            "name": "yearly_performance_scores",
            "location": 190,
            "return": [],
            "arguments": {
                "estimators": [
                    "int",
                    "list[float]",
                    "bytes"
                ],
                "features": [
                    "int",
                    "list[float]",
                    "bytes"
                ],
                "labels": [
                    "int",
                    "list[float]",
                    "bytes"
                ],
                "parallel": [
                    "bool"
                ],
                "data_frame": [
                    "bool"
                ]
            }
        }
    },
    "augury-main/scripts/generate_prediction_data.py": {
        "_predicted_home_margins": {
            "name": "_predicted_home_margins",
            "location": 23,
            "return": [],
            "arguments": {
                "df": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "float"
                ],
                "pred_col": [
                    "bool"
                ]
            }
        },
        "_calculate_correct": {
            "name": "_calculate_correct",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "y": [
                    "float",
                    "int"
                ],
                "y_pred": [
                    "float",
                    "int"
                ]
            }
        },
        "_betting_predictions": {
            "name": "_betting_predictions",
            "location": 55,
            "return": [],
            "arguments": {
                "data": [
                    "dict[str, typing.Any]",
                    "str",
                    "typing.MutableMapping",
                    "int",
                    "bytes"
                ]
            }
        },
        "_model_predictions": {
            "name": "_model_predictions",
            "location": 76,
            "return": [],
            "arguments": {
                "data": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "year_range": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "_predictions": {
            "name": "_predictions",
            "location": 82,
            "return": [],
            "arguments": {
                "data": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "int"
                ],
                "year_range": [
                    "str",
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "augury-main/scripts/save_default_models.py": {
        "_train_save_model": {
            "name": "_train_save_model",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "augury-main/src/augury/api.py": {
        "_clean_data_frame_for_json": {
            "name": "_clean_data_frame_for_json",
            "location": 25,
            "return": [],
            "arguments": {
                "data_frame": []
            }
        },
        "_api_response": {
            "name": "_api_response",
            "location": 34,
            "return": [
                "dict[typing.Text, typing.Union[dict[, ],int]]"
            ],
            "arguments": {
                "data": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "_run_pipelines": {
            "name": "_run_pipelines",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "list[str]",
                    "None",
                    "typing.Type"
                ],
                "ml_models": [
                    "str"
                ]
            }
        },
        "make_predictions": {
            "name": "make_predictions",
            "location": 49,
            "return": [],
            "arguments": {
                "year_range": [
                    "str",
                    "bool"
                ],
                "round_number": [
                    "None",
                    "str",
                    "bool"
                ],
                "ml_model_names": [
                    "None",
                    "str",
                    "typing.Callable[typing.Optional[], None]",
                    "dict[str, typing.Any]",
                    "typing.Any",
                    "list[str]"
                ],
                "train": [
                    "bool"
                ]
            }
        },
        "fetch_fixture_data": {
            "name": "fetch_fixture_data",
            "location": 97,
            "return": [],
            "arguments": {
                "start_date": [
                    "str",
                    "int",
                    "None",
                    "typing.Callable[[], bool]"
                ],
                "end_date": [
                    "str",
                    "int",
                    "None",
                    "typing.Callable[[], bool]"
                ],
                "data_import": [],
                "verbose": [
                    "int"
                ]
            }
        },
        "fetch_match_data": {
            "name": "fetch_match_data",
            "location": 124,
            "return": [],
            "arguments": {
                "start_date": [
                    "str",
                    "int",
                    "typing.Callable[[], bool]",
                    "None"
                ],
                "end_date": [
                    "str",
                    "int",
                    "typing.Callable[[], bool]",
                    "None"
                ],
                "data_import": [],
                "verbose": [
                    "int"
                ]
            }
        },
        "fetch_match_results_data": {
            "name": "fetch_match_results_data",
            "location": 151,
            "return": [],
            "arguments": {
                "round_number": [
                    "int",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]"
                ],
                "data_import": [],
                "verbose": [
                    "int"
                ]
            }
        },
        "fetch_ml_model_info": {
            "name": "fetch_ml_model_info",
            "location": 173,
            "return": [],
            "arguments": {}
        }
    },
    "augury-main/src/augury/cli.py": {
        "_config_file_callback": {
            "name": "_config_file_callback",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": [],
                "param": [
                    "bool",
                    "tuple[str]",
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_get_values_as_tuple": {
            "name": "_get_values_as_tuple",
            "location": 101,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "_reformat_load_versions": {
            "name": "_reformat_load_versions",
            "location": 105,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "tuple[str]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "param": [
                    "bool",
                    "tuple[str]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "value": [
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "_split_params": {
            "name": "_split_params",
            "location": 126,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_try_convert_to_numeric": {
            "name": "_try_convert_to_numeric",
            "location": 149,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "env": [
                    "str"
                ],
                "parallel": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ],
                "runner": [
                    "str",
                    "None",
                    "dict[, ]",
                    "bool"
                ],
                "is_async": [
                    "list[]",
                    "list[dict[, ]]",
                    "list[dict[str, typing.Any]]",
                    "dict[str, str]",
                    "list[str]"
                ],
                "node_names": [
                    "str",
                    "None",
                    "bool",
                    "dict[, ]"
                ],
                "to_nodes": [
                    "list[]",
                    "list[dict[, ]]",
                    "list[dict[str, typing.Any]]",
                    "dict[str, str]",
                    "list[str]"
                ],
                "from_nodes": [
                    "list[]",
                    "list[dict[, ]]",
                    "list[dict[str, typing.Any]]",
                    "dict[str, str]",
                    "list[str]"
                ],
                "from_inputs": [
                    "list[]",
                    "list[dict[, ]]",
                    "list[dict[str, typing.Any]]",
                    "dict[str, str]",
                    "list[str]"
                ],
                "load_version": [
                    "list[]",
                    "list[dict[, ]]",
                    "list[dict[str, typing.Any]]",
                    "dict[str, str]",
                    "list[str]"
                ],
                "pipeline": [
                    "list[]",
                    "list[dict[, ]]",
                    "list[dict[str, typing.Any]]",
                    "dict[str, str]",
                    "list[str]"
                ],
                "config": [
                    "str",
                    "bool",
                    "None"
                ],
                "params": [
                    "str"
                ]
            }
        }
    },
    "augury-main/src/augury/hooks.py": {
        "ProjectHooks.register_pipelines": {
            "name": "register_pipelines",
            "location": 44,
            "return": [
                "dict[typing.Text, Pipeline]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectHooks.register_config_loader": {
            "name": "register_config_loader",
            "location": 80,
            "return": [
                "ConfigLoader"
            ],
            "arguments": {
                "self": [],
                "conf_paths": [
                    "str"
                ]
            }
        },
        "ProjectHooks.register_catalog": {
            "name": "register_catalog",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "catalog": [
                    "bool",
                    "str"
                ],
                "credentials": [
                    "bool",
                    "str"
                ],
                "load_versions": [
                    "bool",
                    "str"
                ],
                "save_version": [
                    "bool",
                    "str"
                ],
                "journal": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "augury-main/src/augury/ml_data.py": {
        "MLData.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "typing.Any",
                    "int",
                    "float"
                ],
                "data_set": [
                    "typing.Text"
                ],
                "train_year_range": [],
                "test_year_range": [],
                "index_cols": [],
                "label_col": [
                    "typing.Text"
                ]
            }
        },
        "MLData.data": {
            "name": "data",
            "location": 63,
            "return": [
                "str",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLData.train_data": {
            "name": "train_data",
            "location": 71,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLData.test_data": {
            "name": "test_data",
            "location": 95,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLData.train_year_range": {
            "name": "train_year_range",
            "location": 124,
            "return": [
                "float",
                "bool",
                "None",
                "bytes",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "years": []
            }
        },
        "MLData.test_year_range": {
            "name": "test_year_range",
            "location": 133,
            "return": [
                "int",
                "str",
                "float",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "years": []
            }
        },
        "MLData.data_set": {
            "name": "data_set",
            "location": 142,
            "return": [
                "str",
                "dict[, ]",
                "dict[str, object]"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "MLData._load_data": {
            "name": "_load_data",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MLData._X": {
            "name": "_X",
            "location": 165,
            "return": [
                "dict[str, float]",
                "str",
                "dict[str, list[typing.Any]]",
                "dict[, ]",
                "dict[typing.Any, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLData._load_X": {
            "name": "_load_X",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MLData._y": {
            "name": "_y",
            "location": 198,
            "return": [
                "dict[str, typing.Any]",
                "dict[, ]",
                "typing.Counter",
                "str",
                "dict[str, typing.Union[str,float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLData._load_y": {
            "name": "_load_y",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/augury/model_tracking.py": {
        "score_model": {
            "name": "score_model",
            "location": 30,
            "return": [],
            "arguments": {
                "model": [
                    "str",
                    "bytes",
                    "int",
                    "None"
                ],
                "data": [
                    "int",
                    "str"
                ],
                "cv_year_range": [],
                "scoring": [
                    "dict[typing.Text, ]"
                ],
                "n_jobs": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "graph_tf_model_history": {
            "name": "graph_tf_model_history",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "history": [
                    "typing.Callable[, ]",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "metrics": [
                    "list[]"
                ]
            }
        },
        "_graph_accuracy_scores": {
            "name": "_graph_accuracy_scores",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "performance_data_frame": [],
                "sort": [
                    "typing.Callable[, ]",
                    "int",
                    "None",
                    "Exception"
                ]
            }
        },
        "_graph_mae_scores": {
            "name": "_graph_mae_scores",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "performance_data_frame": [],
                "sort": [
                    "typing.Callable[, ]",
                    "bytes",
                    "int",
                    "None"
                ]
            }
        },
        "graph_cv_model_performance": {
            "name": "graph_cv_model_performance",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "performance_data_frame": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]"
                ],
                "sort": [
                    "bool"
                ]
            }
        }
    },
    "augury-main/src/augury/predictions.py": {
        "Predictor.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "year_range": [
                    "str",
                    "dict[, ]"
                ],
                "context": [
                    "str",
                    "tuple[]",
                    "bool",
                    "None"
                ],
                "round_number": [
                    "None",
                    "int",
                    "str"
                ],
                "train": [
                    "bool"
                ],
                "verbose": [
                    "int"
                ]
            }
        },
        "Predictor.make_predictions": {
            "name": "make_predictions",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "ml_models": [
                    "int",
                    "float"
                ]
            }
        },
        "Predictor._make_predictions_by_year": {
            "name": "_make_predictions_by_year",
            "location": 79,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "ml_models": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "year": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "None"
                ]
            }
        },
        "Predictor._make_model_predictions": {
            "name": "_make_model_predictions",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "float",
                    "None"
                ],
                "ml_model": []
            }
        },
        "Predictor._train_model": {
            "name": "_train_model",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "ml_model": []
            }
        },
        "Predictor._prediction_data": {
            "name": "_prediction_data",
            "location": 144,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, ],str]]"
            ],
            "arguments": {
                "ml_model": [
                    "str"
                ],
                "y_pred": [
                    "str"
                ]
            }
        }
    },
    "augury-main/src/augury/run.py": {
        "run_package": {
            "name": "run_package",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "round_number": [
                    "None",
                    "int",
                    "list[int]"
                ],
                "start_date": [
                    "typing.Text"
                ],
                "end_date": [
                    "typing.Text"
                ]
            }
        }
    },
    "augury-main/src/augury/settings.py": {
        "ProjectContext.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "typing.Text"
                ],
                "project_path": [],
                "env": [],
                "extra_params": [
                    "None",
                    "str",
                    "list[]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ProjectContext.round_number": {
            "name": "round_number",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "round_number": []
            }
        },
        "ProjectContext.start_date": {
            "name": "start_date",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectContext.end_date": {
            "name": "end_date",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/augury/setup.py": {},
    "augury-main/src/augury/types.py": {},
    "augury-main/src/augury/__init__.py": {},
    "augury-main/src/augury/data_import/base_data.py": {
        "_handle_response_data": {
            "name": "_handle_response_data",
            "location": 14,
            "return": [
                "list[]"
            ],
            "arguments": {
                "response": []
            }
        },
        "_make_request": {
            "name": "_make_request",
            "location": 28,
            "return": [],
            "arguments": {
                "url": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "params": [
                    "dict[, ]"
                ],
                "headers": [
                    "dict[, ]"
                ],
                "retry": [
                    "bool"
                ]
            }
        },
        "fetch_afl_data": {
            "name": "fetch_afl_data",
            "location": 50,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "params": [
                    "dict[, ]"
                ]
            }
        }
    },
    "augury-main/src/augury/data_import/betting_data.py": {
        "fetch_betting_data": {
            "name": "fetch_betting_data",
            "location": 15,
            "return": [
                "int"
            ],
            "arguments": {
                "start_date": [
                    "typing.Text"
                ],
                "end_date": [
                    "typing.Text"
                ],
                "verbose": [
                    "int"
                ]
            }
        },
        "save_betting_data": {
            "name": "save_betting_data",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "start_date": [
                    "typing.Text"
                ],
                "end_date": [
                    "typing.Text"
                ],
                "verbose": [
                    "int"
                ],
                "for_prod": [
                    "bool"
                ]
            }
        }
    },
    "augury-main/src/augury/data_import/match_data.py": {
        "fetch_match_data": {
            "name": "fetch_match_data",
            "location": 17,
            "return": [
                "str",
                "dict[str, str]",
                "int",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "start_date": [
                    "typing.Text"
                ],
                "end_date": [
                    "typing.Text"
                ],
                "verbose": [
                    "int"
                ]
            }
        },
        "save_match_data": {
            "name": "save_match_data",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "start_date": [
                    "typing.Text"
                ],
                "end_date": [
                    "typing.Text"
                ],
                "verbose": [
                    "int"
                ],
                "for_prod": [
                    "bool"
                ]
            }
        },
        "fetch_fixture_data": {
            "name": "fetch_fixture_data",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "start_date": [
                    "str"
                ],
                "end_date": [
                    "typing.Text"
                ],
                "verbose": [
                    "int"
                ]
            }
        },
        "fetch_match_results_data": {
            "name": "fetch_match_results_data",
            "location": 111,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "bytes",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "round_number": [
                    "int",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "bytes",
                    "str"
                ],
                "verbose": [
                    "int"
                ]
            }
        }
    },
    "augury-main/src/augury/data_import/player_data.py": {
        "_date_range": {
            "name": "_date_range",
            "location": 26,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "start_date": [],
                "end_date": [
                    "str",
                    "tuple[]",
                    "int"
                ],
                "time_spread": [],
                "period": []
            }
        },
        "_fetch_player_stats_batch": {
            "name": "_fetch_player_stats_batch",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "start_date": [
                    "str",
                    "int"
                ],
                "end_date": [
                    "str",
                    "int"
                ],
                "verbose": [
                    "int"
                ]
            }
        },
        "_player_batch_date_ranges": {
            "name": "_player_batch_date_ranges",
            "location": 51,
            "return": [
                "list[]"
            ],
            "arguments": {
                "start_date": [
                    "str"
                ],
                "end_date": [
                    "str",
                    "int"
                ]
            }
        },
        "fetch_player_data": {
            "name": "fetch_player_data",
            "location": 62,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "start_date": [
                    "typing.Text"
                ],
                "end_date": [
                    "str"
                ],
                "verbose": [
                    "int"
                ]
            }
        },
        "save_player_data": {
            "name": "save_player_data",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "start_date": [
                    "typing.Text"
                ],
                "end_date": [
                    "typing.Text"
                ],
                "verbose": [
                    "int"
                ],
                "for_prod": [
                    "bool"
                ]
            }
        },
        "fetch_roster_data": {
            "name": "fetch_roster_data",
            "location": 143,
            "return": [
                "dict[, ]",
                "bytes",
                "list[str]",
                "list[bool]"
            ],
            "arguments": {
                "round_number": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "bytes",
                    "list[dict[str, typing.Any]]",
                    "str"
                ],
                "verbose": [
                    "int"
                ]
            }
        }
    },
    "augury-main/src/augury/data_import/__init__.py": {},
    "augury-main/src/augury/io/json_remote_data_set.py": {
        "JSONRemoteDataSet.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source": [
                    "str"
                ],
                "date_range_type": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "JSONRemoteDataSet._load": {
            "name": "_load",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRemoteDataSet._save": {
            "name": "_save",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list[dict[, ]]",
                    "list[tuple[]]",
                    "int",
                    "bytes"
                ]
            }
        },
        "JSONRemoteDataSet._describe": {
            "name": "_describe",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONRemoteDataSet._validate_date_range_type": {
            "name": "_validate_date_range_type",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "date_range_type": [
                    "str",
                    "None",
                    "list[str]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "augury-main/src/augury/io/__init__.py": {},
    "augury-main/src/augury/ml_estimators/base_ml_estimator.py": {
        "BaseMLEstimator.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "bool",
                    "str",
                    "None"
                ],
                "name": [
                    "None",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "BaseMLEstimator.name": {
            "name": "name",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMLEstimator.pickle_filepath": {
            "name": "pickle_filepath",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseMLEstimator.dump": {
            "name": "dump",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "None",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "BaseMLEstimator.fit": {
            "name": "fit",
            "location": 83,
            "return": [
                "BaseMLEstimator"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "BaseMLEstimator.predict": {
            "name": "predict",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "BaseMLEstimator._default_directory": {
            "name": "_default_directory",
            "location": 100,
            "return": [],
            "arguments": {}
        }
    },
    "augury-main/src/augury/ml_estimators/basic_estimator.py": {
        "BasicEstimator.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "set[VT]",
                    "str"
                ],
                "name": [
                    "typing.Text"
                ]
            }
        }
    },
    "augury-main/src/augury/ml_estimators/confidence_estimator.py": {
        "ConfidenceEstimator.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "ConfidenceEstimator.fit": {
            "name": "fit",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "float",
                    "int",
                    "bytes"
                ],
                "y": []
            }
        },
        "ConfidenceEstimator.predict_proba": {
            "name": "predict_proba",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "ConfidenceEstimator.predict": {
            "name": "predict",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "augury-main/src/augury/ml_estimators/estimator_params.py": {},
    "augury-main/src/augury/ml_estimators/stacking_estimator.py": {
        "StackingEstimator.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "set[T]",
                    "list[T]",
                    "str"
                ],
                "name": [
                    "typing.Text"
                ],
                "min_year": []
            }
        },
        "StackingEstimator.fit": {
            "name": "fit",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "dict[str, typing.Any]"
                ],
                "y": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "StackingEstimator.predict": {
            "name": "predict",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "str",
                    "int",
                    "typing.Generator[]",
                    "None"
                ]
            }
        },
        "StackingEstimator._filter_by_min_year": {
            "name": "_filter_by_min_year",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        }
    },
    "augury-main/src/augury/ml_estimators/__init__.py": {},
    "augury-main/src/augury/pipelines/__init__.py": {},
    "augury-main/src/augury/pipelines/betting/nodes.py": {
        "clean_data": {
            "name": "clean_data",
            "location": 17,
            "return": [
                "list[dict[str, str]]",
                "dict[str, typing.Any]",
                "list[dict[str, typing.Any]]"
            ],
            "arguments": {
                "betting_data": [
                    "int",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]",
                    "bytes"
                ]
            }
        },
        "add_betting_pred_win": {
            "name": "add_betting_pred_win",
            "location": 60,
            "return": [],
            "arguments": {
                "data_frame": []
            }
        }
    },
    "augury-main/src/augury/pipelines/betting/pipeline.py": {
        "create_pipeline": {
            "name": "create_pipeline",
            "location": 9,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "start_date": [
                    "str",
                    "float",
                    "None"
                ],
                "end_date": [
                    "str",
                    "float",
                    "None"
                ]
            }
        }
    },
    "augury-main/src/augury/pipelines/betting/__init__.py": {},
    "augury-main/src/augury/pipelines/full/pipeline.py": {
        "create_pipeline": {
            "name": "create_pipeline",
            "location": 15,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "start_date": [
                    "str"
                ],
                "end_date": [
                    "str"
                ]
            }
        }
    },
    "augury-main/src/augury/pipelines/full/__init__.py": {},
    "augury-main/src/augury/pipelines/match/nodes.py": {
        "_correct_home_away_teams": {
            "name": "_correct_home_away_teams",
            "location": 82,
            "return": [],
            "arguments": {
                "match_data": [
                    "list[str]",
                    "list[dict[, ]]"
                ]
            }
        },
        "clean_match_data": {
            "name": "clean_match_data",
            "location": 114,
            "return": [
                "list[]",
                "list[dict[str, str]]",
                "list[str]",
                "bytes",
                "str",
                "dict[int, typing.Any]"
            ],
            "arguments": {
                "match_data": [
                    "dict[, ]"
                ]
            }
        },
        "_map_footywire_venues": {
            "name": "_map_footywire_venues",
            "location": 153,
            "return": [
                "int",
                "typing.Callable[, ]",
                "str"
            ],
            "arguments": {
                "venue": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "_map_round_type": {
            "name": "_map_round_type",
            "location": 161,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "year": [
                    "int"
                ],
                "round_number": [
                    "int"
                ]
            }
        },
        "_round_type_column": {
            "name": "_round_type_column",
            "location": 185,
            "return": [],
            "arguments": {
                "data_frame": [
                    "str"
                ]
            }
        },
        "_match_id_column": {
            "name": "_match_id_column",
            "location": 199,
            "return": [],
            "arguments": {
                "data_frame": [
                    "str",
                    "list[dict[, ]]",
                    "list[tuple[typing.Union[str,...]]]",
                    "list[]",
                    "list[bytes]"
                ]
            }
        },
        "clean_fixture_data": {
            "name": "clean_fixture_data",
            "location": 205,
            "return": [
                "str",
                "list[str]",
                "dict[str, list[str]]",
                "dict[str, typing.Union[bool,str]]",
                "bool",
                "dict[, ]"
            ],
            "arguments": {
                "fixture_data": [
                    "int",
                    "bytes",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "clean_match_results_data": {
            "name": "clean_match_results_data",
            "location": 240,
            "return": [],
            "arguments": {
                "data_frame": [
                    "int",
                    "list[]",
                    "dict[str, typing.Any]",
                    "dict[str, list[int]]"
                ]
            }
        },
        "_elo_formula": {
            "name": "_elo_formula",
            "location": 290,
            "return": [],
            "arguments": {
                "prev_elo_rating": [],
                "prev_oppo_elo_rating": [
                    "int"
                ],
                "margin": [
                    "int",
                    "float"
                ],
                "at_home": [
                    "int",
                    "tuple[numpy.dtype]",
                    "typing.Iterator"
                ]
            }
        },
        "_calculate_match_elo_rating": {
            "name": "_calculate_match_elo_rating",
            "location": 306,
            "return": [
                "dict[typing.Text, dict[str, typing.Any]]"
            ],
            "arguments": {
                "elo_ratings": [],
                "match_row": [
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "add_elo_rating": {
            "name": "add_elo_rating",
            "location": 348,
            "return": [],
            "arguments": {
                "data_frame_arg": [
                    "list[numpy.ndarray]"
                ]
            }
        },
        "add_out_of_state": {
            "name": "add_out_of_state",
            "location": 398,
            "return": [],
            "arguments": {
                "data_frame": []
            }
        },
        "_haversine_formula": {
            "name": "_haversine_formula",
            "location": 410,
            "return": [],
            "arguments": {
                "lat_long1": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "lat_long2": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "add_travel_distance": {
            "name": "add_travel_distance",
            "location": 430,
            "return": [],
            "arguments": {
                "data_frame": []
            }
        },
        "add_result": {
            "name": "add_result",
            "location": 450,
            "return": [],
            "arguments": {
                "data_frame": []
            }
        },
        "add_margin": {
            "name": "add_margin",
            "location": 461,
            "return": [],
            "arguments": {
                "data_frame": [
                    "str"
                ]
            }
        },
        "_shift_features": {
            "name": "_shift_features",
            "location": 469,
            "return": [],
            "arguments": {
                "columns": [
                    "dict[str, dict[str, float]]",
                    "dict[, ]"
                ],
                "shift": [
                    "int"
                ],
                "data_frame": [
                    "int",
                    "dict[, ]",
                    "dict[str, dict[str, float]]"
                ]
            }
        },
        "add_shifted_team_features": {
            "name": "add_shifted_team_features",
            "location": 492,
            "return": [],
            "arguments": {
                "shift_columns": [
                    "list[]"
                ],
                "keep_columns": [
                    "list[]"
                ]
            }
        },
        "add_cum_win_points": {
            "name": "add_cum_win_points",
            "location": 513,
            "return": [],
            "arguments": {
                "data_frame": []
            }
        },
        "add_win_streak": {
            "name": "add_win_streak",
            "location": 527,
            "return": [],
            "arguments": {
                "data_frame": [
                    "list[]",
                    "bytes"
                ]
            }
        },
        "add_cum_percent": {
            "name": "add_cum_percent",
            "location": 574,
            "return": [],
            "arguments": {
                "data_frame": []
            }
        },
        "add_ladder_position": {
            "name": "add_ladder_position",
            "location": 595,
            "return": [],
            "arguments": {
                "data_frame": [
                    "int",
                    "list[T]"
                ]
            }
        },
        "add_elo_pred_win": {
            "name": "add_elo_pred_win",
            "location": 634,
            "return": [],
            "arguments": {
                "data_frame": []
            }
        },
        "_replace_col_names": {
            "name": "_replace_col_names",
            "location": 648,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "at_home": [
                    "dict[, ]"
                ]
            }
        },
        "_match_data_frame": {
            "name": "_match_data_frame",
            "location": 659,
            "return": [],
            "arguments": {
                "data_frame": [
                    "list[T]",
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "dict[int, set[int]]"
                ],
                "match_cols": [
                    "list[]"
                ],
                "at_home": [
                    "bool"
                ]
            }
        }
    },
    "augury-main/src/augury/pipelines/match/pipeline.py": {
        "create_past_match_pipeline": {
            "name": "create_past_match_pipeline",
            "location": 31,
            "return": [
                "Pipeline"
            ],
            "arguments": {}
        },
        "create_future_match_pipeline": {
            "name": "create_future_match_pipeline",
            "location": 54,
            "return": [
                "Pipeline"
            ],
            "arguments": {}
        },
        "create_pipeline": {
            "name": "create_pipeline",
            "location": 64,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "start_date": [
                    "str"
                ],
                "end_date": [
                    "str"
                ],
                "past_match_pipeline": [
                    "str"
                ]
            }
        }
    },
    "augury-main/src/augury/pipelines/match/__init__.py": {},
    "augury-main/src/augury/pipelines/nodes/base.py": {
        "_localize_dates": {
            "name": "_localize_dates",
            "location": 25,
            "return": [],
            "arguments": {
                "row": [
                    "str"
                ]
            }
        },
        "_format_time": {
            "name": "_format_time",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "unformatted_time": [
                    "str"
                ]
            }
        },
        "_parse_dates": {
            "name": "_parse_dates",
            "location": 73,
            "return": [],
            "arguments": {
                "data_frame": [
                    "list[str]"
                ],
                "time_col": [
                    "None",
                    "int",
                    "list[str]"
                ]
            }
        },
        "_translate_team_name": {
            "name": "_translate_team_name",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "team_name": [
                    "str"
                ]
            }
        },
        "_translate_team_column": {
            "name": "_translate_team_column",
            "location": 97,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "col_name": [
                    "str",
                    "float"
                ]
            }
        },
        "_validate_required_columns": {
            "name": "_validate_required_columns",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "required_columns": [
                    "list[]"
                ],
                "data_frame_columns": [
                    "list[]"
                ]
            }
        },
        "_validate_unique_team_index_columns": {
            "name": "_validate_unique_team_index_columns",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "data_frame": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "_validate_no_dodgy_zeros": {
            "name": "_validate_no_dodgy_zeros",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "data_frame": []
            }
        },
        "_validate_canoncial_team_names": {
            "name": "_validate_canoncial_team_names",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "data_frame": [
                    "str",
                    "list[T]",
                    "dict[str, str]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "_filter_out_dodgy_data": {
            "name": "_filter_out_dodgy_data",
            "location": 161,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "keep": [
                    "typing.Text"
                ]
            }
        },
        "_convert_id_to_string": {
            "name": "_convert_id_to_string",
            "location": 181,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "id_label": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "augury-main/src/augury/pipelines/nodes/common.py": {
        "convert_to_data_frame": {
            "name": "convert_to_data_frame",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "_combine_data_horizontally": {
            "name": "_combine_data_horizontally",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "_append_data_frames": {
            "name": "_append_data_frames",
            "location": 77,
            "return": [],
            "arguments": {
                "acc_data_frame": [
                    "str"
                ],
                "curr_data_frame": []
            }
        },
        "_combine_data_vertically": {
            "name": "_combine_data_vertically",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "combine_data": {
            "name": "combine_data",
            "location": 112,
            "return": [],
            "arguments": {
                "axis": [
                    "int"
                ]
            }
        },
        "_filter_by_date": {
            "name": "_filter_by_date",
            "location": 132,
            "return": [],
            "arguments": {
                "start_date": [
                    "str",
                    "None"
                ],
                "end_date": [
                    "str",
                    "None"
                ],
                "data_frame": []
            }
        },
        "filter_by_date": {
            "name": "filter_by_date",
            "location": 148,
            "return": [],
            "arguments": {
                "start_date": [
                    "str"
                ],
                "end_date": [
                    "str"
                ]
            }
        },
        "_replace_col_names": {
            "name": "_replace_col_names",
            "location": 173,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "team_type": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "oppo_team_type": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "_team_data_frame": {
            "name": "_team_data_frame",
            "location": 179,
            "return": [],
            "arguments": {
                "data_frame": [],
                "team_type": [
                    "str",
                    "bytes"
                ]
            }
        },
        "convert_match_rows_to_teammatch_rows": {
            "name": "convert_match_rows_to_teammatch_rows",
            "location": 198,
            "return": [],
            "arguments": {
                "match_row_data_frame": [
                    "bool",
                    "memoryview"
                ]
            }
        },
        "_validate_no_duplicated_columns": {
            "name": "_validate_no_duplicated_columns",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "data_frame": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "_oppo_features": {
            "name": "_oppo_features",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "data_frame": [
                    "str",
                    "list[str]",
                    "list[dict[str, typing.Any]]"
                ],
                "cols_to_convert": [
                    "str"
                ]
            }
        },
        "_cols_to_convert_to_oppo": {
            "name": "_cols_to_convert_to_oppo",
            "location": 275,
            "return": [
                "list[]"
            ],
            "arguments": {
                "data_frame": [
                    "list[str]",
                    "str",
                    "bytes",
                    "dict[str, int]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "match_cols": [
                    "list[]"
                ],
                "oppo_feature_cols": [
                    "list[]"
                ]
            }
        },
        "_add_oppo_features_node": {
            "name": "_add_oppo_features_node",
            "location": 286,
            "return": [],
            "arguments": {
                "data_frame": [
                    "int",
                    "dict[tuple[typing.Union[int,int]], int]",
                    "float"
                ],
                "match_cols": [
                    "list[]"
                ],
                "oppo_feature_cols": [
                    "list[]"
                ]
            }
        },
        "add_oppo_features": {
            "name": "add_oppo_features",
            "location": 316,
            "return": [],
            "arguments": {
                "match_cols": [
                    "list[]"
                ],
                "oppo_feature_cols": [
                    "list[]"
                ]
            }
        },
        "finalize_data": {
            "name": "finalize_data",
            "location": 355,
            "return": [
                "list[typing.Union[typing.Any,typing.Any]]",
                "int"
            ],
            "arguments": {
                "data_frame": [
                    "int",
                    "bytes"
                ],
                "index_cols": []
            }
        },
        "_sort_data_frame_columns_node": {
            "name": "_sort_data_frame_columns_node",
            "location": 381,
            "return": [],
            "arguments": {
                "category_cols": [
                    "list[str]",
                    "None",
                    "str"
                ],
                "data_frame": [
                    "str",
                    "bytes"
                ]
            }
        },
        "sort_data_frame_columns": {
            "name": "sort_data_frame_columns",
            "location": 405,
            "return": [],
            "arguments": {
                "category_cols": [
                    "None",
                    "list[str]",
                    "str"
                ]
            }
        },
        "clean_full_data": {
            "name": "clean_full_data",
            "location": 422,
            "return": [
                "list[]"
            ],
            "arguments": {}
        }
    },
    "augury-main/src/augury/pipelines/nodes/feature_calculation.py": {
        "_calculate_feature_col": {
            "name": "_calculate_feature_col",
            "location": 31,
            "return": [
                "list[]"
            ],
            "arguments": {
                "data_calculator": [
                    "int",
                    "None",
                    "bytearray",
                    "list[]"
                ],
                "column_sets": []
            }
        },
        "_calculate_features": {
            "name": "_calculate_features",
            "location": 43,
            "return": [],
            "arguments": {
                "calculators": [
                    "bytearray",
                    "str",
                    "list[str]",
                    "tuple[int]"
                ],
                "data_frame": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "feature_calculator": {
            "name": "feature_calculator",
            "location": 54,
            "return": [],
            "arguments": {
                "calculators": [
                    "str",
                    "list[str]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "rolling_rate_filled_by_expanding_rate": {
            "name": "rolling_rate_filled_by_expanding_rate",
            "location": 61,
            "return": [],
            "arguments": {
                "groups": [
                    "dict[, ]"
                ],
                "rolling_window": [
                    "str",
                    "None"
                ]
            }
        },
        "_rolling_rate": {
            "name": "_rolling_rate",
            "location": 83,
            "return": [],
            "arguments": {
                "column": [
                    "dict[, ]",
                    "str"
                ],
                "data_frame": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "calculate_rolling_rate": {
            "name": "calculate_rolling_rate",
            "location": 109,
            "return": [],
            "arguments": {
                "column": []
            }
        },
        "_rolling_mean_by_dimension": {
            "name": "_rolling_mean_by_dimension",
            "location": 119,
            "return": [],
            "arguments": {
                "column_pair": [
                    "int",
                    "list[list[int]]",
                    "str",
                    "None"
                ],
                "rolling_windows": [],
                "data_frame": [
                    "str",
                    "dict[, ]",
                    "None",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "calculate_rolling_mean_by_dimension": {
            "name": "calculate_rolling_mean_by_dimension",
            "location": 157,
            "return": [],
            "arguments": {
                "column_pair": [],
                "rolling_windows": [
                    "dict[typing.Text, int]"
                ]
            }
        },
        "_division": {
            "name": "_division",
            "location": 178,
            "return": [],
            "arguments": {
                "column_pair": [
                    "typing.Sequence[str]",
                    "int",
                    "list[str]",
                    "float",
                    "str"
                ],
                "data_frame": [
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "list[typing.Any]",
                    "None",
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        },
        "calculate_division": {
            "name": "calculate_division",
            "location": 197,
            "return": [],
            "arguments": {
                "column_pair": []
            }
        },
        "_multiplication": {
            "name": "_multiplication",
            "location": 208,
            "return": [],
            "arguments": {
                "column_pair": [
                    "typing.Sequence[str]",
                    "int",
                    "typing.Iterable[str]"
                ],
                "data_frame": [
                    "tuple[]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "calculate_multiplication": {
            "name": "calculate_multiplication",
            "location": 222,
            "return": [],
            "arguments": {
                "column_pair": []
            }
        },
        "_add_columns": {
            "name": "_add_columns",
            "location": 233,
            "return": [
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "str",
                    "bytes"
                ],
                "addition_column": [
                    "int",
                    "str",
                    "list[typing.Any]"
                ],
                "column_label": [
                    "int"
                ]
            }
        },
        "_addition": {
            "name": "_addition",
            "location": 242,
            "return": [],
            "arguments": {
                "columns": [],
                "data_frame": [
                    "typing.Sequence[str]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "calculate_addition": {
            "name": "calculate_addition",
            "location": 258,
            "return": [],
            "arguments": {
                "columns": []
            }
        }
    },
    "augury-main/src/augury/pipelines/nodes/__init__.py": {},
    "augury-main/src/augury/pipelines/player/nodes.py": {
        "_translate_team_name": {
            "name": "_translate_team_name",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "team_name": [
                    "str"
                ]
            }
        },
        "_translate_team_column": {
            "name": "_translate_team_column",
            "location": 92,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "col_name": [
                    "str",
                    "float"
                ]
            }
        },
        "_player_id_col": {
            "name": "_player_id_col",
            "location": 96,
            "return": [],
            "arguments": {
                "data_frame": [
                    "str",
                    "bytes"
                ]
            }
        },
        "clean_player_data": {
            "name": "clean_player_data",
            "location": 108,
            "return": [
                "list[]",
                "str"
            ],
            "arguments": {
                "player_data": [],
                "match_data": [
                    "bytes",
                    "bool",
                    "typing.Any"
                ]
            }
        },
        "clean_roster_data": {
            "name": "clean_roster_data",
            "location": 177,
            "return": [],
            "arguments": {
                "roster_data": [],
                "clean_player_data_frame": [
                    "int",
                    "str",
                    "dict[str, int]",
                    "dict[, ]"
                ]
            }
        },
        "_sort_columns": {
            "name": "_sort_columns",
            "location": 245,
            "return": [
                "bytes",
                "float",
                "str"
            ],
            "arguments": {
                "data_frame": [
                    "dict[str, set[str]]",
                    "bytes",
                    "list[float]",
                    "str"
                ]
            }
        },
        "_replace_col_names": {
            "name": "_replace_col_names",
            "location": 249,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "team_type": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "_team_data_frame": {
            "name": "_team_data_frame",
            "location": 257,
            "return": [],
            "arguments": {
                "data_frame": [
                    "str",
                    "bytes"
                ],
                "team_type": [
                    "str",
                    "bytes"
                ]
            }
        },
        "convert_player_match_rows_to_player_teammatch_rows": {
            "name": "convert_player_match_rows_to_player_teammatch_rows",
            "location": 266,
            "return": [],
            "arguments": {
                "data_frame": [
                    "bool",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "add_last_year_brownlow_votes": {
            "name": "add_last_year_brownlow_votes",
            "location": 298,
            "return": [],
            "arguments": {
                "data_frame": [
                    "str"
                ]
            }
        },
        "add_rolling_player_stats": {
            "name": "add_rolling_player_stats",
            "location": 321,
            "return": [],
            "arguments": {
                "data_frame": []
            }
        },
        "add_cum_matches_played": {
            "name": "add_cum_matches_played",
            "location": 380,
            "return": [],
            "arguments": {
                "data_frame": [
                    "str",
                    "dict[str, dict[str, dict[, ]]]",
                    "dict[str, list[str]]"
                ]
            }
        },
        "_aggregations": {
            "name": "_aggregations",
            "location": 390,
            "return": [
                "dict[dict[typing.Text, list[]], dict[str, typing.Text]]"
            ],
            "arguments": {
                "match_stats_cols": [
                    "list[str]"
                ],
                "aggregations": [
                    "list[]"
                ]
            }
        },
        "_agg_column_name": {
            "name": "_agg_column_name",
            "location": 401,
            "return": [
                "str",
                "'Photo'"
            ],
            "arguments": {
                "match_stats_cols": [
                    "list[str]",
                    "str"
                ],
                "column_pair": [
                    "tuple[typing.Union[str,str]]",
                    "str",
                    "list['Photo']"
                ]
            }
        },
        "_aggregate_player_stats_by_team_match_node": {
            "name": "_aggregate_player_stats_by_team_match_node",
            "location": 406,
            "return": [],
            "arguments": {
                "player_data_frame": [],
                "aggregations": [
                    "list[]"
                ]
            }
        },
        "aggregate_player_stats_by_team_match": {
            "name": "aggregate_player_stats_by_team_match",
            "location": 457,
            "return": [],
            "arguments": {
                "aggregations": [
                    "list[str]",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "augury-main/src/augury/pipelines/player/pipeline.py": {
        "create_past_player_pipeline": {
            "name": "create_past_player_pipeline",
            "location": 21,
            "return": [
                "Pipeline"
            ],
            "arguments": {}
        },
        "create_roster_pipeline": {
            "name": "create_roster_pipeline",
            "location": 44,
            "return": [
                "Pipeline"
            ],
            "arguments": {}
        },
        "create_pipeline": {
            "name": "create_pipeline",
            "location": 58,
            "return": [
                "Pipeline"
            ],
            "arguments": {
                "start_date": [
                    "str",
                    "int"
                ],
                "end_date": [
                    "str",
                    "int"
                ],
                "past_match_pipeline": [
                    "Pipeline"
                ]
            }
        }
    },
    "augury-main/src/augury/pipelines/player/__init__.py": {},
    "augury-main/src/augury/sklearn/metrics.py": {
        "_calculate_team_margin": {
            "name": "_calculate_team_margin",
            "location": 20,
            "return": [],
            "arguments": {
                "team_margin": [
                    "int",
                    "typing.Sequence[]"
                ],
                "oppo_margin": [
                    "int",
                    "typing.Sequence[]"
                ]
            }
        },
        "_calculate_match_accuracy": {
            "name": "_calculate_match_accuracy",
            "location": 33,
            "return": [],
            "arguments": {
                "X": [],
                "y_true": [],
                "y_pred": []
            }
        },
        "create_match_accuracy": {
            "name": "create_match_accuracy",
            "location": 60,
            "return": [],
            "arguments": {
                "X": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "match_accuracy_scorer": {
            "name": "match_accuracy_scorer",
            "location": 67,
            "return": [],
            "arguments": {
                "estimator": [],
                "X": [
                    "int",
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "regressor_team_match_accuracy": {
            "name": "regressor_team_match_accuracy",
            "location": 74,
            "return": [],
            "arguments": {
                "y": [
                    "str"
                ],
                "y_pred": [
                    "str"
                ]
            }
        },
        "_positive_pred": {
            "name": "_positive_pred",
            "location": 86,
            "return": [],
            "arguments": {
                "y_pred": []
            }
        },
        "_draw_bits": {
            "name": "_draw_bits",
            "location": 90,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "y_pred": [
                    "float",
                    "int"
                ]
            }
        },
        "_correct_bits": {
            "name": "_correct_bits",
            "location": 94,
            "return": [],
            "arguments": {
                "y_pred": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "_incorrect_bits": {
            "name": "_incorrect_bits",
            "location": 98,
            "return": [],
            "arguments": {
                "y_pred": [
                    "float",
                    "int"
                ]
            }
        },
        "_correct_preds": {
            "name": "_correct_preds",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "y_true": [],
                "y_pred": []
            }
        },
        "_calculate_bits": {
            "name": "_calculate_bits",
            "location": 109,
            "return": [],
            "arguments": {
                "y_true": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "y_pred": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "bits_scorer": {
            "name": "bits_scorer",
            "location": 121,
            "return": [
                "int"
            ],
            "arguments": {
                "estimator": [],
                "X": [
                    "float",
                    "int",
                    "list[]"
                ],
                "y": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "n_rows_per_match": [
                    "int"
                ]
            }
        },
        "_draw_bits_hessian": {
            "name": "_draw_bits_hessian",
            "location": 157,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "y_pred": []
            }
        },
        "_correct_bits_hessian": {
            "name": "_correct_bits_hessian",
            "location": 163,
            "return": [
                "int"
            ],
            "arguments": {
                "y_pred": []
            }
        },
        "_incorrect_bits_hessian": {
            "name": "_incorrect_bits_hessian",
            "location": 167,
            "return": [
                "float"
            ],
            "arguments": {
                "y_pred": [
                    "float",
                    "int"
                ]
            }
        },
        "_bits_hessian": {
            "name": "_bits_hessian",
            "location": 171,
            "return": [],
            "arguments": {
                "y_true": [
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "y_pred": [
                    "bool",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "_draw_bits_gradient": {
            "name": "_draw_bits_gradient",
            "location": 183,
            "return": [
                "float"
            ],
            "arguments": {
                "y_pred": []
            }
        },
        "_correct_bits_gradient": {
            "name": "_correct_bits_gradient",
            "location": 187,
            "return": [
                "float"
            ],
            "arguments": {
                "y_pred": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "_incorrect_bits_gradient": {
            "name": "_incorrect_bits_gradient",
            "location": 191,
            "return": [
                "float"
            ],
            "arguments": {
                "y_pred": [
                    "float",
                    "int"
                ]
            }
        },
        "_bits_gradient": {
            "name": "_bits_gradient",
            "location": 195,
            "return": [],
            "arguments": {
                "y_true": [
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "y_pred": [
                    "bool",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "bits_objective": {
            "name": "bits_objective",
            "location": 207,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "y_true": [],
                "y_pred": [
                    "int",
                    "list[tuple[typing.Union[float,float]]]",
                    "dict[, ]",
                    "list[tuple[typing.Union[int,int]]]",
                    "str"
                ]
            }
        },
        "_bits_error": {
            "name": "_bits_error",
            "location": 254,
            "return": [],
            "arguments": {
                "y_true": [
                    "typing.Callable[, ]",
                    "tuple[str]"
                ],
                "y_pred": [
                    "typing.Callable[, ]",
                    "tuple[str]"
                ]
            }
        },
        "bits_metric": {
            "name": "bits_metric",
            "location": 269,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "y_pred": [
                    "str",
                    "bool",
                    "typing.IO",
                    "list[str]"
                ],
                "y_true_matrix": []
            }
        },
        "_positive_pred_tensor": {
            "name": "_positive_pred_tensor",
            "location": 289,
            "return": [],
            "arguments": {
                "y_pred": [
                    "list[str]",
                    "typing.Mapping",
                    "str",
                    "float"
                ]
            }
        },
        "_log2": {
            "name": "_log2",
            "location": 295,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "_draw_bits_tensor": {
            "name": "_draw_bits_tensor",
            "location": 301,
            "return": [],
            "arguments": {
                "y_pred": [
                    "list[set[int]]",
                    "tuple[typing.Union[float,float]]",
                    "None",
                    "set[]",
                    "str"
                ]
            }
        },
        "_correct_bits_tensor": {
            "name": "_correct_bits_tensor",
            "location": 311,
            "return": [],
            "arguments": {
                "y_pred": [
                    "int"
                ]
            }
        },
        "_incorrect_bits_tensor": {
            "name": "_incorrect_bits_tensor",
            "location": 315,
            "return": [],
            "arguments": {
                "y_pred": [
                    "int"
                ]
            }
        },
        "bits_loss": {
            "name": "bits_loss",
            "location": 322,
            "return": [],
            "arguments": {
                "y_true": [
                    "typing.Iterable[bytes]",
                    "Exception"
                ],
                "y_pred": [
                    "list[dict[, ]]"
                ]
            }
        }
    },
    "augury-main/src/augury/sklearn/models.py": {
        "rnn_model_func": {
            "name": "rnn_model_func",
            "location": 656,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "n_teams": [
                    "int"
                ],
                "n_venues": [
                    "int"
                ],
                "n_categories": [
                    "int"
                ],
                "n_round_types": [
                    "int"
                ],
                "n_steps": [
                    "None"
                ],
                "n_features": [
                    "int"
                ],
                "round_type_dim": [
                    "None",
                    "int",
                    "typing.Type",
                    "str"
                ],
                "venue_dim": [
                    "None",
                    "int",
                    "str"
                ],
                "team_dim": [
                    "None",
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "typing.Type"
                ],
                "n_cells": [
                    "None",
                    "int",
                    "list[int]",
                    "float",
                    "list[float]",
                    "str"
                ],
                "dropout": [
                    "None",
                    "int",
                    "list[int]",
                    "float",
                    "list[float]",
                    "str"
                ],
                "recurrent_dropout": [
                    "None",
                    "int",
                    "list[int]",
                    "float",
                    "list[float]",
                    "str"
                ],
                "n_hidden_layers": [
                    "int"
                ],
                "kernel_regularizer": [
                    "None",
                    "int",
                    "list[int]",
                    "float",
                    "list[float]",
                    "str"
                ],
                "recurrent_regularizer": [
                    "None",
                    "int",
                    "list[int]",
                    "float",
                    "list[float]",
                    "str"
                ],
                "bias_regularizer": [
                    "None",
                    "int",
                    "list[int]",
                    "float",
                    "list[float]",
                    "str"
                ],
                "activity_regularizer": [
                    "None",
                    "int",
                    "list[int]",
                    "float",
                    "list[float]",
                    "str"
                ],
                "loss": [
                    "None",
                    "int",
                    "tuple[]",
                    "float",
                    "dict[, ]",
                    "str"
                ],
                "optimizer": [
                    "None",
                    "int",
                    "tuple[]",
                    "float",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "EloRegressor.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "float"
                ],
                "x": [
                    "float"
                ],
                "m": [
                    "int"
                ],
                "home_ground_advantage": [
                    "int"
                ],
                "s": [
                    "int"
                ],
                "season_carryover": [
                    "float"
                ]
            }
        },
        "EloRegressor.fit": {
            "name": "fit",
            "location": 132,
            "return": [
                "EloRegressor"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float"
                ],
                "_y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "EloRegressor.predict": {
            "name": "predict",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "EloRegressor._calculate_current_elo_predictions": {
            "name": "_calculate_current_elo_predictions",
            "location": 233,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "match_row": [
                    "int",
                    "list[str]",
                    "typing.Sequence[str]",
                    "str"
                ]
            }
        },
        "EloRegressor._update_current_elo_ratings": {
            "name": "_update_current_elo_ratings",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match_row": [
                    "int",
                    "list[list[str]]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "EloRegressor._update_prev_elo_ratings": {
            "name": "_update_prev_elo_ratings",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match_row": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[str]",
                    "list[list[bool]]"
                ]
            }
        },
        "EloRegressor._calculate_current_elo_rating": {
            "name": "_calculate_current_elo_rating",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "team_idx": [
                    "int"
                ],
                "match_row": [
                    "list[list[bool]]",
                    "str"
                ]
            }
        },
        "EloRegressor._calculate_team_elo_prediction": {
            "name": "_calculate_team_elo_prediction",
            "location": 317,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "elo_rating": [],
                "oppo_elo_rating": [],
                "at_home": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "EloRegressor._calculate_team_elo_rating": {
            "name": "_calculate_team_elo_rating",
            "location": 330,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "elo_rating": [
                    "int",
                    "float"
                ],
                "elo_prediction": [
                    "int",
                    "float"
                ],
                "margin": [
                    "int",
                    "list[int]",
                    "list[]"
                ]
            }
        },
        "EloRegressor._reset_elo_state": {
            "name": "_reset_elo_state",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EloRegressor._validate_consecutive_rounds": {
            "name": "_validate_consecutive_rounds",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match_year": [
                    "dict[, ]",
                    "bool"
                ],
                "match_round": [
                    "str",
                    "bool"
                ]
            }
        },
        "TimeSeriesRegressor.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats_model": [
                    "str",
                    "None",
                    "typing.Iterable[str]",
                    "int",
                    "typing.Container"
                ],
                "order": [],
                "exog_cols": [
                    "list[]"
                ],
                "fit_method": [
                    "None",
                    "float",
                    "int",
                    "str",
                    "tuple[int]"
                ],
                "fit_solver": [
                    "None",
                    "float",
                    "int",
                    "str",
                    "tuple[int]"
                ],
                "confidence": [
                    "bool"
                ],
                "verbose": [
                    "int"
                ]
            }
        },
        "TimeSeriesRegressor.fit": {
            "name": "fit",
            "location": 421,
            "return": [
                "TimeSeriesRegressor"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float"
                ],
                "y": [
                    "bool",
                    "float"
                ]
            }
        },
        "TimeSeriesRegressor.predict": {
            "name": "predict",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "float",
                    "int",
                    "typing.Iterable['cirq.Qid']"
                ]
            }
        },
        "TimeSeriesRegressor._fit_team_model": {
            "name": "_fit_team_model",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "team_name": [
                    "str",
                    "int",
                    "float"
                ],
                "team_df": []
            }
        },
        "TimeSeriesRegressor._predict_with_team_model": {
            "name": "_predict_with_team_model",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "str",
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[typing.Any, list[]]"
                ],
                "team_name": [
                    "str",
                    "bool",
                    "list[list[str]]"
                ],
                "team_model": [
                    "bool",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "TimeSeriesRegressor._exog_arg": {
            "name": "_exog_arg",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_frame": [
                    "bool"
                ]
            }
        },
        "KerasClassifier.__init__": {
            "name": "__init__",
            "location": 528,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_func": [
                    "float",
                    "int"
                ],
                "n_hidden_layers": [
                    "int"
                ],
                "n_cells": [
                    "int"
                ],
                "dropout_rate": [
                    "float"
                ],
                "label_activation": [
                    "typing.Text"
                ],
                "n_labels": [
                    "int"
                ],
                "loss": [],
                "embed_dim": [
                    "int"
                ],
                "epochs": [
                    "int"
                ]
            }
        },
        "KerasClassifier.fit": {
            "name": "fit",
            "location": 568,
            "return": [
                "KerasClassifier"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "list[]"
                ],
                "y": [
                    "bool",
                    "list[]"
                ],
                "validation_data": [
                    "None",
                    "bool",
                    "list[]"
                ]
            }
        },
        "KerasClassifier.predict_proba": {
            "name": "predict_proba",
            "location": 582,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "KerasClassifier.predict": {
            "name": "predict",
            "location": 590,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "KerasClassifier.set_params": {
            "name": "set_params",
            "location": 594,
            "return": [
                "KerasClassifier"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasClassifier.history": {
            "name": "history",
            "location": 607,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KerasClassifier._create_model": {
            "name": "_create_model",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasClassifier.__getstate__": {
            "name": "__getstate__",
            "location": 637,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KerasClassifier.__setstate__": {
            "name": "__setstate__",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "RNNRegressor.__init__": {
            "name": "__init__",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_categories": [
                    "int"
                ],
                "n_features": [
                    "None",
                    "int",
                    "float"
                ],
                "n_steps": [
                    "int"
                ],
                "patience": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "recurrent_dropout": [
                    "int"
                ],
                "kernel_regularizer": [
                    "None",
                    "int",
                    "str"
                ],
                "recurrent_regularizer": [
                    "None",
                    "int",
                    "str"
                ],
                "bias_regularizer": [
                    "None",
                    "int",
                    "str"
                ],
                "activity_regularizer": [
                    "None",
                    "int",
                    "str"
                ],
                "n_cells": [
                    "int"
                ],
                "batch_size": [
                    "None",
                    "int"
                ],
                "team_dim": [
                    "int"
                ],
                "round_type_dim": [
                    "int"
                ],
                "venue_dim": [
                    "int"
                ],
                "verbose": [
                    "int"
                ],
                "n_hidden_layers": [
                    "int"
                ],
                "epochs": [
                    "int"
                ],
                "optimizer": [
                    "typing.Text"
                ],
                "metrics": [
                    "None",
                    "int",
                    "float"
                ],
                "loss": [
                    "typing.Text"
                ],
                "model_func": []
            }
        },
        "RNNRegressor.fit": {
            "name": "fit",
            "location": 872,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "list[]",
                    "dict[, ]",
                    "int",
                    "None"
                ],
                "y": [
                    "list[]",
                    "dict[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "RNNRegressor.predict": {
            "name": "predict",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "RNNRegressor.score": {
            "name": "score",
            "location": 901,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": [],
                "sample_weight": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "RNNRegressor.history": {
            "name": "history",
            "location": 909,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RNNRegressor.set_params": {
            "name": "set_params",
            "location": 916,
            "return": [
                "RNNRegressor"
            ],
            "arguments": {
                "self": []
            }
        },
        "RNNRegressor.n_cells": {
            "name": "n_cells",
            "location": 956,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "n_cells": []
            }
        },
        "RNNRegressor._train_test_split": {
            "name": "_train_test_split",
            "location": 959,
            "return": [
                "tuple[typing.Union[bytes,float]]"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": [
                    "bytes",
                    "list[float]"
                ]
            }
        },
        "RNNRegressor._inputs": {
            "name": "_inputs",
            "location": 975,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int"
                ]
            }
        },
        "RNNRegressor._labels": {
            "name": "_labels",
            "location": 979,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "RNNRegressor._create_model": {
            "name": "_create_model",
            "location": 985,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RNNRegressor._load_model": {
            "name": "_load_model",
            "location": 1008,
            "return": [
                "KerasRegressor"
            ],
            "arguments": {
                "self": [],
                "saved_model": [
                    "str",
                    "int"
                ]
            }
        },
        "RNNRegressor.__getstate__": {
            "name": "__getstate__",
            "location": 1018,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RNNRegressor.__setstate__": {
            "name": "__setstate__",
            "location": 1032,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        }
    },
    "augury-main/src/augury/sklearn/model_selection.py": {
        "year_cv_split": {
            "name": "year_cv_split",
            "location": 4,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "X": [
                    "list[\"Block\"]"
                ],
                "year_range": [
                    "int",
                    "float",
                    "list[\"Block\"]"
                ]
            }
        }
    },
    "augury-main/src/augury/sklearn/preprocessing.py": {
        "CorrelationSelector.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cols_to_keep": [
                    "None",
                    "str",
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]",
                    "int",
                    "float"
                ],
                "threshold": [
                    "None",
                    "str",
                    "Exception",
                    "typing.Mapping",
                    "dict[str, str]",
                    "int"
                ],
                "labels": [
                    "None",
                    "str",
                    "list[str]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CorrelationSelector.transform": {
            "name": "transform",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ],
                "_y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "CorrelationSelector.fit": {
            "name": "fit",
            "location": 46,
            "return": [
                "CorrelationSelector"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float"
                ],
                "y": [
                    "None",
                    "str",
                    "bytes",
                    "int",
                    "float",
                    "list[]"
                ]
            }
        },
        "CorrelationSelector.cols_to_keep": {
            "name": "cols_to_keep",
            "location": 81,
            "return": [
                "int",
                "str",
                "set[int]"
            ],
            "arguments": {
                "self": [],
                "cols_to_keep": []
            }
        },
        "TeammatchToMatchConverter.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match_cols": [
                    "list[typing.Text]"
                ]
            }
        },
        "TeammatchToMatchConverter.fit": {
            "name": "fit",
            "location": 107,
            "return": [
                "TeammatchToMatchConverter"
            ],
            "arguments": {
                "self": [],
                "_X": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "_y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "TeammatchToMatchConverter.transform": {
            "name": "transform",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int"
                ]
            }
        },
        "TeammatchToMatchConverter._validate_required_columns": {
            "name": "_validate_required_columns",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_frame": [
                    "bool",
                    "str",
                    "list[]"
                ]
            }
        },
        "TeammatchToMatchConverter._match_data_frame": {
            "name": "_match_data_frame",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "data_frame": [
                    "int",
                    "str",
                    "dict[str, typing.Type]"
                ],
                "at_home": [
                    "bool"
                ]
            }
        },
        "TeammatchToMatchConverter._replace_col_names": {
            "name": "_replace_col_names",
            "location": 166,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "at_home": [
                    "dict[, ]"
                ]
            }
        },
        "ColumnDropper.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cols_to_drop": [
                    "list[]"
                ]
            }
        },
        "ColumnDropper.fit": {
            "name": "fit",
            "location": 189,
            "return": [
                "ColumnDropper"
            ],
            "arguments": {
                "self": [],
                "_X": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "ColumnDropper.transform": {
            "name": "transform",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ],
                "y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "DataFrameConverter.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "columns": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "list[str]"
                ],
                "index": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "list[str]"
                ]
            }
        },
        "DataFrameConverter.fit": {
            "name": "fit",
            "location": 224,
            "return": [
                "DataFrameConverter"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "DataFrameConverter.transform": {
            "name": "transform",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "list[]",
                    "int",
                    "str"
                ]
            }
        },
        "TimeStepReshaper.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_steps": [
                    "None",
                    "int",
                    "dict[str, np.ndarray]",
                    "dict[, ]",
                    "tuple[typing.Union[float,float]]",
                    "list[]"
                ],
                "are_labels": [
                    "bool"
                ],
                "segment_col": [
                    "int"
                ]
            }
        },
        "TimeStepReshaper.fit": {
            "name": "fit",
            "location": 270,
            "return": [
                "TimeStepReshaper"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "TimeStepReshaper.transform": {
            "name": "transform",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "TimeStepReshaper._segment_arrays": {
            "name": "_segment_arrays",
            "location": 292,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "tuple[float]"
                ]
            }
        },
        "TimeStepReshaper._segment": {
            "name": "_segment",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "segment_value": [
                    "float",
                    "int",
                    "bytes",
                    "bytearray",
                    "memoryview"
                ]
            }
        },
        "TimeStepReshaper._shift_by_steps": {
            "name": "_shift_by_steps",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "segment": [
                    "float",
                    "int"
                ]
            }
        },
        "KerasInputLister.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_inputs": [
                    "int"
                ]
            }
        },
        "KerasInputLister.fit": {
            "name": "fit",
            "location": 339,
            "return": [
                "KerasInputLister"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "KerasInputLister.transform": {
            "name": "transform",
            "location": 343,
            "return": [
                "list[typing.Union[bytearray,int]]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bytearray",
                    "list[int]"
                ],
                "y": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "augury-main/src/tests/conftest.py": {
        "kedro_session": {
            "name": "kedro_session",
            "location": 9,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "augury-main/src/tests/helpers.py": {
        "ColumnAssertionMixin._assert_column_added": {
            "name": "_assert_column_added",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column_names": [
                    "list[]"
                ],
                "valid_data_frame": [
                    "None",
                    "str",
                    "bool",
                    "bytes"
                ],
                "feature_function": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "col_diff": [
                    "int"
                ]
            }
        },
        "ColumnAssertionMixin._assert_required_columns": {
            "name": "_assert_required_columns",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req_cols": [
                    "list[]"
                ],
                "valid_data_frame": [
                    "None"
                ],
                "feature_function": [
                    "None",
                    "int",
                    "typing.Iterable[typing.Union[int,str]]",
                    "float"
                ]
            }
        },
        "ColumnAssertionMixin._make_column_assertions": {
            "name": "_make_column_assertions",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column_names": [
                    "list[]"
                ],
                "req_cols": [
                    "list[]"
                ],
                "valid_data_frame": [
                    "None",
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "feature_function": [
                    "None",
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "col_diff": [
                    "int"
                ]
            }
        }
    },
    "augury-main/src/tests/__init__.py": {},
    "augury-main/src/tests/fixtures/data_factories.py": {
        "fake_match_results_data": {
            "name": "fake_match_results_data",
            "location": 40,
            "return": [],
            "arguments": {
                "match_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, float]",
                    "typing.AnyStr"
                ],
                "round_number": [
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "bytes"
                ]
            }
        }
    },
    "augury-main/src/tests/fixtures/fake_estimator.py": {
        "create_fake_pipeline": {
            "name": "create_fake_pipeline",
            "location": 116,
            "return": [
                "Pipeline"
            ],
            "arguments": {}
        },
        "pickle_fake_estimator": {
            "name": "pickle_fake_estimator",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FakeEstimator.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipeline": [],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "FakeEstimatorData.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_set": [
                    "typing.Text"
                ],
                "max_year": [
                    "int"
                ]
            }
        },
        "FakeEstimatorData.data": {
            "name": "data",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/fixtures/__init__.py": {},
    "augury-main/src/tests/integration/__init__.py": {},
    "augury-main/src/tests/integration/data_import/test_betting_data_request.py": {
        "TestBettingData.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBettingData.test_fetch_betting_data": {
            "name": "test_fetch_betting_data",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBettingDataProd.setUp": {
            "name": "setUp",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBettingDataProd.test_fetch_betting_data": {
            "name": "test_fetch_betting_data",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/integration/data_import/test_match_data_request.py": {
        "TestMatchData.setUp": {
            "name": "setUp",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_fetch_match_data": {
            "name": "test_fetch_match_data",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_fetch_fixture_data": {
            "name": "test_fetch_fixture_data",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_fetch_match_results_data": {
            "name": "test_fetch_match_results_data",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchDataProd.setUp": {
            "name": "setUp",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchDataProd.test_fetch_match_data": {
            "name": "test_fetch_match_data",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchDataProd.test_fetch_fixture_data": {
            "name": "test_fetch_fixture_data",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchDataProd.test_fetch_match_results_data": {
            "name": "test_fetch_match_results_data",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/integration/data_import/test_player_data_request.py": {
        "TestPlayerData.setUp": {
            "name": "setUp",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerData.test_fetch_player_data": {
            "name": "test_fetch_player_data",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerDataProd.setUp": {
            "name": "setUp",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerDataProd.test_fetch_player_data": {
            "name": "test_fetch_player_data",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerDataProd.test_fetch_roster_data": {
            "name": "test_fetch_roster_data",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/test_api.py": {
        "TestApi.test_make_predictions": {
            "name": "test_make_predictions",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_make_predictions": []
            }
        },
        "TestApi.test_fetch_fixture_data": {
            "name": "test_fetch_fixture_data",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_fetch_match_data": {
            "name": "test_fetch_match_data",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_fetch_match_results_data": {
            "name": "test_fetch_match_results_data",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_fetch_ml_model_info": {
            "name": "test_fetch_ml_model_info",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/test_ml_data.py": {
        "TestMLData.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLData.test_train_data": {
            "name": "test_train_data",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLData.test_test_data": {
            "name": "test_test_data",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLData.test_train_test_data_compatibility": {
            "name": "test_train_test_data_compatibility",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLData.test_data": {
            "name": "test_data",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMLData.test_data_set": {
            "name": "test_data_set",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/test_ml_estimators.py": {
        "test_model_pickle_file_compatibility": {
            "name": "test_model_pickle_file_compatibility",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "model_name": [
                    "str",
                    "list[str]"
                ],
                "kedro_session": []
            }
        }
    },
    "augury-main/src/tests/unit/test_predictions.py": {
        "predictor": {
            "name": "predictor",
            "location": 36,
            "return": [
                "Predictor"
            ],
            "arguments": {}
        },
        "test_make_predictions": {
            "name": "test_make_predictions",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "models": [
                    "str",
                    "int"
                ],
                "prediction_multiplier": [
                    "str"
                ],
                "predictor": []
            }
        }
    },
    "augury-main/src/tests/unit/test_sklearn.py": {
        "data": {
            "name": "data",
            "location": 285,
            "return": [
                "FakeEstimatorData"
            ],
            "arguments": {}
        },
        "estimator": {
            "name": "estimator",
            "location": 290,
            "return": [],
            "arguments": {}
        },
        "test_match_accuracy_scorer": {
            "name": "test_match_accuracy_scorer",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[str, typing.Any]",
                    "str",
                    "list[]"
                ],
                "estimator": [
                    "bool",
                    "str",
                    "tuple[typing.Union[numpy.ndarray,numpy.ndarray]]",
                    "float"
                ]
            }
        },
        "test_year_cv_split": {
            "name": "test_year_cv_split",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_bits_scorer_with_regressor": {
            "name": "test_bits_scorer_with_regressor",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "estimator": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_bits_scorer_with_classifier": {
            "name": "test_bits_scorer_with_classifier",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_bits_objective": {
            "name": "test_bits_objective",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_handling_of_invalid_values": {
            "name": "test_handling_of_invalid_values",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_preds": [
                    "dict[, ]"
                ]
            }
        },
        "TestCorrelationSelector.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCorrelationSelector.test_transform": {
            "name": "test_transform",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEloRegressor.setUp": {
            "name": "setUp",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEloRegressor.test_predict": {
            "name": "test_predict",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTeammatchToMatchConverter.setUp": {
            "name": "setUp",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTeammatchToMatchConverter.test_transform": {
            "name": "test_transform",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumnDropper.setUp": {
            "name": "setUp",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestColumnDropper.test_transform": {
            "name": "test_transform",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataFrameConverter.setUp": {
            "name": "setUp",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataFrameConverter.test_fit": {
            "name": "test_fit",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataFrameConverter.test_transform": {
            "name": "test_transform",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKerasClassifier.setUp": {
            "name": "setUp",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKerasClassifier.test_predict": {
            "name": "test_predict",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKerasClassifier.test_predict_proba": {
            "name": "test_predict_proba",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKerasClassifier.test_set_params": {
            "name": "test_set_params",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKerasClassifier.test_history": {
            "name": "test_history",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKerasClassifier.model_func": {
            "name": "model_func",
            "location": 265,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/__init__.py": {},
    "augury-main/src/tests/unit/data_import/test_base_data.py": {
        "TestBaseData.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseData.test_fetch_afl_data": {
            "name": "test_fetch_afl_data",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/data_import/test_betting_data.py": {
        "TestBettingData.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBettingData.test_save_betting_data": {
            "name": "test_save_betting_data",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_mock_json_dump": [],
                "mock_fetch_data": []
            }
        }
    },
    "augury-main/src/tests/unit/data_import/test_match_data.py": {
        "TestMatchData.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMatchData.test_save_match_data": {
            "name": "test_save_match_data",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_mock_json_dump": [],
                "mock_fetch_data": []
            }
        }
    },
    "augury-main/src/tests/unit/data_import/test_player_data.py": {
        "TestPlayerData.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayerData.test_save_player_data": {
            "name": "test_save_player_data",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_mock_json_dump": [],
                "mock_fetch_data": []
            }
        }
    },
    "augury-main/src/tests/unit/io/test_json_remote_data_set.py": {
        "TestJSONRemoteDataSet.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRemoteDataSet.test_load": {
            "name": "test_load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONRemoteDataSet.test_save": {
            "name": "test_save",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/nodes/test_betting.py": {
        "TestBetting.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBetting.test_clean_data": {
            "name": "test_clean_data",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBetting.test_add_betting_pred_win": {
            "name": "test_add_betting_pred_win",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/nodes/test_common.py": {
        "TestCommon.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommon.test_convert_to_data_frame": {
            "name": "test_convert_to_data_frame",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommon.test_combine_data": {
            "name": "test_combine_data",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommon.test_filter_by_date": {
            "name": "test_filter_by_date",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommon.test_convert_match_rows_to_teammatch_rows": {
            "name": "test_convert_match_rows_to_teammatch_rows",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommon.test_add_oppo_features": {
            "name": "test_add_oppo_features",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommon.test_finalize_data": {
            "name": "test_finalize_data",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCommon.test_sort_columns": {
            "name": "test_sort_columns",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/nodes/test_feature_calculation.py": {
        "assert_required_columns": {
            "name": "assert_required_columns",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "test_case": [],
                "req_cols": [
                    "list[]"
                ],
                "valid_data_frame": [
                    "None"
                ],
                "feature_function": [
                    "None",
                    "bool",
                    "dict[str, str]",
                    "Exception"
                ]
            }
        },
        "TestFeatureCalculations.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureCalculations.test_feature_calculator": {
            "name": "test_feature_calculator",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureCalculations.test_rolling_rate_filled_by_expanding_rate": {
            "name": "test_rolling_rate_filled_by_expanding_rate",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureCalculations.test_calculate_rolling_rate": {
            "name": "test_calculate_rolling_rate",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureCalculations.test_calculate_division": {
            "name": "test_calculate_division",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureCalculations.test_calculate_multiplication": {
            "name": "test_calculate_multiplication",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureCalculations.test_calculate_rolling_mean_by_dimension": {
            "name": "test_calculate_rolling_mean_by_dimension",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureCalculations.test_calculate_addition": {
            "name": "test_calculate_addition",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFeatureCalculations.test_feature_calculator.calc_func": {
            "name": "calc_func",
            "location": 37,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {
                "col": []
            }
        }
    },
    "augury-main/src/tests/unit/nodes/test_match.py": {
        "TestMatch.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_clean_match_data": {
            "name": "test_clean_match_data",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_clean_fixture_data": {
            "name": "test_clean_fixture_data",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_clean_match_results_data": {
            "name": "test_clean_match_results_data",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_add_elo_rating": {
            "name": "test_add_elo_rating",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_add_out_of_state": {
            "name": "test_add_out_of_state",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_add_travel_distance": {
            "name": "test_add_travel_distance",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_add_result": {
            "name": "test_add_result",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_add_margin": {
            "name": "test_add_margin",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_add_shifted_team_features": {
            "name": "test_add_shifted_team_features",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_add_cum_win_points": {
            "name": "test_add_cum_win_points",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_add_win_streak": {
            "name": "test_add_win_streak",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_add_cum_percent": {
            "name": "test_add_cum_percent",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_add_ladder_position": {
            "name": "test_add_ladder_position",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatch.test_add_elo_pred_win": {
            "name": "test_add_elo_pred_win",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/nodes/test_player.py": {
        "TestPlayer.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_clean_player_data": {
            "name": "test_clean_player_data",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_clean_roster_data": {
            "name": "test_clean_roster_data",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_add_last_year_brownlow_votes": {
            "name": "test_add_last_year_brownlow_votes",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_add_rolling_player_stats": {
            "name": "test_add_rolling_player_stats",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_add_cum_matches_played": {
            "name": "test_add_cum_matches_played",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_aggregate_player_stats_by_team_match": {
            "name": "test_aggregate_player_stats_by_team_match",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/pipelines/test_betting_pipeline.py": {
        "TestBettingPipeline.test_create_pipeline": {
            "name": "test_create_pipeline",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/pipelines/test_full_pipeline.py": {
        "TestFullPipeline.test_create_pipeline": {
            "name": "test_create_pipeline",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/pipelines/test_match_pipeline.py": {
        "TestMatchPipeline.test_create_pipeline": {
            "name": "test_create_pipeline",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "augury-main/src/tests/unit/pipelines/test_player_pipeline.py": {
        "TestPlayerPipeline.test_create_pipeline": {
            "name": "test_create_pipeline",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
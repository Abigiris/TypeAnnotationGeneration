{
    "aur-sync-master/setup.py": {},
    "aur-sync-master/aursync/flattener.py": {
        "compose_keys": {
            "name": "compose_keys",
            "location": 12,
            "return": [],
            "arguments": {
                "root": [],
                "leaf": [],
                "separation": [],
                "dict_sep": [
                    "typing.Text"
                ],
                "list_sep": [
                    "typing.Text"
                ]
            }
        },
        "_flatten": {
            "name": "_flatten",
            "location": 31,
            "return": [
                "typing.Generator[]",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "d": [],
                "list_sep": [],
                "dict_sep": [],
                "key_str": [
                    "typing.Text"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 47,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "d": [],
                "list_sep": [
                    "typing.Text"
                ],
                "dict_sep": [
                    "typing.Text"
                ]
            }
        },
        "inflate": {
            "name": "inflate",
            "location": 91,
            "return": [],
            "arguments": {
                "d": [],
                "dict_sep": [
                    "typing.Text"
                ],
                "list_sep": [
                    "typing.Text"
                ]
            }
        },
        "_Composition.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Composition.partial_compose": {
            "name": "partial_compose",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "container": []
            }
        },
        "_Composition.set_parent_and_compose": {
            "name": "set_parent_and_compose",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_target": [],
                "layer_factory": []
            }
        },
        "_Composition.reset": {
            "name": "reset",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Composition.add_dict": {
            "name": "add_dict",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [],
                "k": [],
                "v": []
            }
        },
        "_Composition.add_list": {
            "name": "add_list",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "li": [],
                "i": [],
                "v": []
            }
        }
    },
    "aur-sync-master/aursync/mpmc.py": {
        "MPMC.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis_conn": [
                    "bool",
                    "str",
                    "None",
                    "typing.Sequence[str]",
                    "list[str]",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ],
                "serializer": [],
                "deserializer": []
            }
        }
    },
    "aur-sync-master/aursync/sync.py": {
        "_listify_arg": {
            "name": "_listify_arg",
            "location": 75,
            "return": [
                "list[]",
                "list_like__types",
                "list[typing.Union[int,float,None,list_like__types]]"
            ],
            "arguments": {
                "listy": [
                    "int",
                    "None",
                    "float"
                ]
            }
        },
        "_flatten": {
            "name": "_flatten",
            "location": 85,
            "return": [],
            "arguments": {
                "li": [],
                "list_types": [
                    "tuple[typing.Union[list[],tuple[]]]"
                ]
            }
        },
        "_parameterize": {
            "name": "_parameterize",
            "location": 101,
            "return": [],
            "arguments": {
                "deco_to_enhance": [
                    "list[str]",
                    "float",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_link_args": {
            "name": "_link_args",
            "location": 119,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "list[]",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "_timegate": {
            "name": "_timegate",
            "location": 132,
            "return": [],
            "arguments": {
                "coro": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "gate": [
                    "float"
                ]
            }
        },
        "_ConfigProxy.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sync": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int,int]]"
                ],
                "key_root": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "_ConfigProxy._verify_redis": {
            "name": "_verify_redis",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ConfigProxy.__setitem__": {
            "name": "__setitem__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "tuple[]",
                    "typing.ChainMap",
                    "dict[, ]"
                ],
                "v": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "_ConfigProxy.compose_key": {
            "name": "compose_key",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "bytes",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "_ConfigProxy.__delitem__": {
            "name": "__delitem__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "list[str]",
                    "str",
                    "list[int]"
                ]
            }
        },
        "_ConfigProxy.__getitem__": {
            "name": "__getitem__",
            "location": 64,
            "return": [
                "_ConfigProxy"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "list[str]",
                    "str",
                    "list[int]"
                ]
            }
        },
        "_ConfigProxy.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_parameterize.deco_factory": {
            "name": "deco_factory",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "_link_args.wrapper": {
            "name": "wrapper",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AurRedis.aur_get": {
            "name": "aur_get",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "Sync.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "redis": [
                    "None",
                    "int",
                    "typing.Sequence[]",
                    "str"
                ],
                "serializer": [],
                "deserializer": []
            }
        },
        "Sync.subscribe": {
            "name": "subscribe",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler_func": [
                    "list[Exception]",
                    "None",
                    "int",
                    "str"
                ],
                "channels": [
                    "None",
                    "float",
                    "str",
                    "int"
                ],
                "channel_patterns": [
                    "None",
                    "int"
                ],
                "wait": [
                    "bool"
                ]
            }
        },
        "Sync.publish": {
            "name": "publish",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "list[float]",
                    "bytes"
                ],
                "channels": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ],
                "wait": [
                    "bool"
                ],
                "callback": [
                    "None",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "_parameterize.deco_factory.deco_wrapper": {
            "name": "deco_wrapper",
            "location": 109,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Sync._handle.track_live_handlers": {
            "name": "track_live_handlers",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        }
    },
    "aur-sync-master/aursync/__init__.py": {},
    "aur-sync-master/tests/compress_inflate_test.py": {
        "test_dict_getset": {
            "name": "test_dict_getset",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aur-sync-master/tests/getset_test.py": {
        "makeEvilDict": {
            "name": "makeEvilDict",
            "location": 16,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "aur-sync-master/tests/test2.py": {},
    "aur-sync-master/tests/test3.py": {},
    "aur-sync-master/tests/tester.py": {
        "message": {
            "name": "message",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_long_sync_handler.handle": {
            "name": "handle",
            "location": 126,
            "return": [],
            "arguments": {
                "message": []
            }
        }
    }
}
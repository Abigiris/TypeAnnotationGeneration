{
    "autobrowser-master/conftest.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 11,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "behavior_manager_config": {
            "name": "behavior_manager_config",
            "location": 18,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Iterator"
                ]
            }
        }
    },
    "autobrowser-master/crawler_tester.py": {},
    "autobrowser-master/driver.py": {},
    "autobrowser-master/server.py": {},
    "autobrowser-master/autobrowser/abcs.py": {
        "Behavior.done": {
            "name": "done",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Behavior.paused": {
            "name": "paused",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Behavior.reset": {
            "name": "reset",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Behavior.end": {
            "name": "end",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Behavior.evaluate_in_page": {
            "name": "evaluate_in_page",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "js_string": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "Behavior.run_task": {
            "name": "run_task",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Behavior.timed_run_task": {
            "name": "timed_run_task",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_run_time": [
                    "int",
                    "float",
                    "str",
                    "list[dict[, ]]",
                    "typing.Sequence[T]",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Behavior._finished": {
            "name": "_finished",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Behavior.__await__": {
            "name": "__await__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Browser.autoid": {
            "name": "autoid",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Browser.reqid": {
            "name": "reqid",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Browser.config": {
            "name": "config",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Browser.behavior_manager": {
            "name": "behavior_manager",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Browser.loop": {
            "name": "loop",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Driver.determine_exit_code": {
            "name": "determine_exit_code",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Driver.initiate_shutdown": {
            "name": "initiate_shutdown",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Driver.on_browser_exit": {
            "name": "on_browser_exit",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "Tab.create": {
            "name": "create",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "int",
                    "dict[str, str]",
                    "dict[str, bool]",
                    "str"
                ]
            }
        },
        "Tab.loop": {
            "name": "loop",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.behavior_manager": {
            "name": "behavior_manager",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.config": {
            "name": "config",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.connection_closed": {
            "name": "connection_closed",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.autoid": {
            "name": "autoid",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.reqid": {
            "name": "reqid",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.behaviors_paused": {
            "name": "behaviors_paused",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.tab_id": {
            "name": "tab_id",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.tab_url": {
            "name": "tab_url",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.running": {
            "name": "running",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.reconnecting": {
            "name": "reconnecting",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.set_running_behavior": {
            "name": "set_running_behavior",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "behavior": [
                    "str",
                    "None",
                    "int",
                    "list[dict[, ]]"
                ]
            }
        },
        "Tab.unset_running_behavior": {
            "name": "unset_running_behavior",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "behavior": [
                    "bool",
                    "typing.AbstractSet",
                    "typing.Callable[, ]",
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "autobrowser-master/autobrowser/chrome_browser.py": {
        "Chrome.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "behavior_manager": [
                    "str",
                    "dict[, ]"
                ],
                "session": [
                    "None",
                    "list[str]",
                    "str"
                ],
                "redis": [
                    "None",
                    "tuple[]",
                    "list[str]",
                    "dict[, ]"
                ],
                "loop": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "Chrome.autoid": {
            "name": "autoid",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.reqid": {
            "name": "reqid",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.config": {
            "name": "config",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.behavior_manager": {
            "name": "behavior_manager",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.loop": {
            "name": "loop",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chrome.__repr__": {
            "name": "__repr__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/errors.py": {},
    "autobrowser-master/autobrowser/events.py": {},
    "autobrowser-master/autobrowser/exit_code_aware_runner.py": {
        "run_automation": {
            "name": "run_automation",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "main": [
                    "bool",
                    "collections.abc.Coroutine",
                    "str",
                    "None"
                ]
            }
        },
        "_run": {
            "name": "_run",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {
                "main": [
                    "str"
                ]
            }
        },
        "_cancel_all_tasks": {
            "name": "_cancel_all_tasks",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": []
            }
        }
    },
    "autobrowser-master/autobrowser/__init__.py": {},
    "autobrowser-master/autobrowser/automation/details.py": {
        "get_browser_host_ip": {
            "name": "get_browser_host_ip",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "browser_host": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "env": {
            "name": "env",
            "location": 46,
            "return": [
                "None",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "type_": [
                    "str"
                ],
                "default": [
                    "None",
                    "typing.Any",
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "convert_screenshot_dims": {
            "name": "convert_screenshot_dims",
            "location": 99,
            "return": [
                "None",
                "str",
                "typing.Any",
                "tuple[float]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "typing.Any"
                ]
            }
        },
        "build_automation_config": {
            "name": "build_automation_config",
            "location": 345,
            "return": [
                "AutomationConfig"
            ],
            "arguments": {
                "options": [
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "to_redis_key": {
            "name": "to_redis_key",
            "location": 428,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "aid": [
                    "str",
                    "dict[str, typing.BinaryIO]",
                    "bool"
                ]
            }
        },
        "exit_code_from_reason": {
            "name": "exit_code_from_reason",
            "location": 485,
            "return": [
                "int"
            ],
            "arguments": {
                "reason": [
                    "bytes",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "AutomationConfig.should_take_screenshot": {
            "name": "should_take_screenshot",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutomationConfig.should_retrieve_raw_dom": {
            "name": "should_retrieve_raw_dom",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutomationConfig.should_retrieve_mhtml": {
            "name": "should_retrieve_mhtml",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutomationConfig.require_post_behavior_actions": {
            "name": "require_post_behavior_actions",
            "location": 213,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutomationConfig.has_browser_overrides": {
            "name": "has_browser_overrides",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutomationConfig.make_shepherd_url": {
            "name": "make_shepherd_url",
            "location": 226,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "shepherd_endpoint": [
                    "typing.Text"
                ]
            }
        },
        "AutomationConfig.request_new_browser_url": {
            "name": "request_new_browser_url",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "browser_id": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "AutomationConfig.browser_info_url": {
            "name": "browser_info_url",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "reqid": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "AutomationConfig.init_browser_url": {
            "name": "init_browser_url",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "reqid": [
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "AutomationConfig.make_cdp_url": {
            "name": "make_cdp_url",
            "location": 262,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "browser_ip_or_host": [
                    "str",
                    "float"
                ]
            }
        },
        "AutomationConfig.cdp_json_url": {
            "name": "cdp_json_url",
            "location": 271,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "browser_ip_or_host": [
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "AutomationConfig.cdp_json_new_url": {
            "name": "cdp_json_new_url",
            "location": 280,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "browser_ip_or_host": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "AutomationConfig.retrieve_behavior_url": {
            "name": "retrieve_behavior_url",
            "location": 289,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "page_url": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "bool",
                    "float"
                ]
            }
        },
        "AutomationConfig.behavior_info_url": {
            "name": "behavior_info_url",
            "location": 298,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "page_url": [
                    "str",
                    "bytes",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "AutomationConfig.get": {
            "name": "get",
            "location": 308,
            "return": [
                "None",
                "str",
                "typing.Any",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "default": [
                    "None",
                    "str",
                    "typing.Any"
                ]
            }
        },
        "AutomationConfig.config_value": {
            "name": "config_value",
            "location": 314,
            "return": [
                "dict[, ]",
                "list[tuple[typing.Union[str,str]]]",
                "dict[str, str]",
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "dict[str, dict[str, typing.Any]]",
                "list[]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "AutomationConfig.browser_override": {
            "name": "browser_override",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "override": [
                    "str",
                    "list[]",
                    "dict[str, bool]",
                    "dict[, ]",
                    "dict[str, dict[str, str]]",
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]"
                ],
                "default": [
                    "None",
                    "str",
                    "list[]",
                    "dict[str, bool]",
                    "dict[, ]",
                    "dict[str, dict[str, str]]",
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]"
                ]
            }
        },
        "AutomationConfig.redis_keys_default": {
            "name": "redis_keys_default",
            "location": 340,
            "return": [
                "RedisKeys"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisKeys.__init__": {
            "name": "__init__",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "CloseReason.__str__": {
            "name": "__str__",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CloseReason.__repr__": {
            "name": "__repr__",
            "location": 481,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BrowserExitInfo.exit_reason_code": {
            "name": "exit_reason_code",
            "location": 511,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/automation/shutdown.py": {
        "ShutdownCondition.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "ShutdownCondition.shutdown_condition_met": {
            "name": "shutdown_condition_met",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShutdownCondition.shutdown_from_signal": {
            "name": "shutdown_from_signal",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShutdownCondition.initiate_shutdown": {
            "name": "initiate_shutdown",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShutdownCondition._initiate_shutdown_signal": {
            "name": "_initiate_shutdown_signal",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShutdownCondition.__await__": {
            "name": "__await__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/automation/__init__.py": {},
    "autobrowser-master/autobrowser/behaviors/managers.py": {
        "RemoteBehaviorManager.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "str"
                ],
                "session": [
                    "str"
                ],
                "loop": [
                    "None",
                    "str"
                ]
            }
        },
        "RemoteBehaviorManager.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoteBehaviorManager.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/behaviors/runners.py": {
        "WRBehaviorRunner.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "behavior_js": [
                    "str",
                    "dict[str, str]",
                    "bool",
                    "None"
                ],
                "tab": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "None",
                    "list[]",
                    "typing.Callable[, ]"
                ],
                "next_action_expression": [
                    "str",
                    "bool",
                    "None"
                ],
                "loop": [
                    "None",
                    "bool"
                ],
                "collect_outlinks": [
                    "bool"
                ],
                "post_run_actions": [
                    "bool"
                ],
                "frame": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "typing.Any"
                ]
            }
        },
        "WRBehaviorRunner.done": {
            "name": "done",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WRBehaviorRunner.paused": {
            "name": "paused",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WRBehaviorRunner.reset": {
            "name": "reset",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WRBehaviorRunner.end": {
            "name": "end",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WRBehaviorRunner.evaluate_in_page": {
            "name": "evaluate_in_page",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "js_string": [
                    "str",
                    "bool",
                    "list[str]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "WRBehaviorRunner.run_task": {
            "name": "run_task",
            "location": 99,
            "return": [
                "str",
                "None",
                "list[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WRBehaviorRunner.timed_run_task": {
            "name": "timed_run_task",
            "location": 105,
            "return": [
                "bool",
                "typing.Any",
                "None",
                "str"
            ],
            "arguments": {
                "self": [],
                "max_run_time": [
                    "typing.Callable[, ]",
                    "None",
                    "list[typing.Any]"
                ]
            }
        },
        "WRBehaviorRunner._finished": {
            "name": "_finished",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WRBehaviorRunner.__done": {
            "name": "__done",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WRBehaviorRunner.__get_frame": {
            "name": "__get_frame",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WRBehaviorRunner.__str__": {
            "name": "__str__",
            "location": 268,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "WRBehaviorRunner.__repr__": {
            "name": "__repr__",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/behaviors/__init__.py": {},
    "autobrowser-master/autobrowser/drivers/basedriver.py": {
        "BaseDriver.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "bytes"
                ],
                "loop": [
                    "None",
                    "int"
                ]
            }
        },
        "BaseDriver.determine_exit_code": {
            "name": "determine_exit_code",
            "location": 120,
            "return": [
                "int",
                "set[]",
                "list[]",
                "str",
                "bytes",
                "tuple[typing.Union[typing.Any,typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDriver.initiate_shutdown": {
            "name": "initiate_shutdown",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDriver.__str__": {
            "name": "__str__",
            "location": 164,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDriver.__repr__": {
            "name": "__repr__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/drivers/local.py": {
        "LocalBrowserDiver.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "loop": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "LocalBrowserDiver._make_connect_opts": {
            "name": "_make_connect_opts",
            "location": 28,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalBrowserDiver.on_browser_exit": {
            "name": "on_browser_exit",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "LocalBrowserDiver.__str__": {
            "name": "__str__",
            "location": 140,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/drivers/shepherd.py": {
        "ShepherdDriver.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "str",
                    "int"
                ],
                "loop": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "SingleBrowserDriver.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "loop": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "SingleBrowserDriver.on_browser_exit": {
            "name": "on_browser_exit",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "SingleBrowserDriver.__str__": {
            "name": "__str__",
            "location": 312,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiBrowserDriver.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "loop": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "MultiBrowserDriver.on_browser_exit": {
            "name": "on_browser_exit",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MultiBrowserDriver.__str__": {
            "name": "__str__",
            "location": 431,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/drivers/__init__.py": {},
    "autobrowser-master/autobrowser/frontier/memory.py": {
        "Frontier.init_": {
            "name": "init_",
            "location": 47,
            "return": [
                "Frontier"
            ],
            "arguments": {
                "depth": [
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Iterable[int]"
                ],
                "seed_list": []
            }
        }
    },
    "autobrowser-master/autobrowser/frontier/redis.py": {
        "RedisFrontier.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis": [],
                "config": [
                    "dict[, ]",
                    "bool"
                ],
                "loop": [
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "RedisFrontier.did_wait": {
            "name": "did_wait",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisFrontier.crawling_new_page": {
            "name": "crawling_new_page",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page_url": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "RedisFrontier.next_depth": {
            "name": "next_depth",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisFrontier.add_to_pending": {
            "name": "add_to_pending",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "RedisFrontier.remove_from_pending": {
            "name": "remove_from_pending",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "RedisFrontier.pop_inner_page_link": {
            "name": "pop_inner_page_link",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisFrontier.__str__": {
            "name": "__str__",
            "location": 317,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisFrontier.__repr__": {
            "name": "__repr__",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/frontier/__init__.py": {},
    "autobrowser-master/autobrowser/scope/memory.py": {
        "Scope.from_seeds": {
            "name": "from_seeds",
            "location": 20,
            "return": [
                "Scope"
            ],
            "arguments": {
                "seed_list": [
                    "list[str]",
                    "list[]",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[dict[str, str]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "Scope.in_scope": {
            "name": "in_scope",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "autobrowser-master/autobrowser/scope/redis.py": {
        "strip_frag": {
            "name": "strip_frag",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "RedisScope.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis": [
                    "typing.Mapping",
                    "int",
                    "str"
                ],
                "keys": [
                    "str",
                    "None",
                    "dict[, ]",
                    "bytes",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RedisScope.current_page": {
            "name": "current_page",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisScope.in_scope": {
            "name": "in_scope",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "float"
                ]
            }
        },
        "RedisScope.add_scope_rule": {
            "name": "add_scope_rule",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope_rule": [
                    "typing.Any",
                    "str",
                    "None"
                ]
            }
        },
        "RedisScope.is_inner_page_link": {
            "name": "is_inner_page_link",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "typing.Type",
                    "typing.Sequence[dict[str, str]]"
                ]
            }
        },
        "RedisScope.crawling_new_page": {
            "name": "crawling_new_page",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_page": []
            }
        },
        "RedisScope.__str__": {
            "name": "__str__",
            "location": 125,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisScope.__repr__": {
            "name": "__repr__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/scope/__init__.py": {},
    "autobrowser-master/autobrowser/tabs/basetab.py": {
        "BaseTab.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "str",
                    "bool"
                ],
                "tab_data": [
                    "str"
                ],
                "redis": [
                    "None",
                    "str",
                    "bytes",
                    "list[]",
                    "dict[, ]"
                ],
                "session": [
                    "None",
                    "str",
                    "bytes",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "BaseTab.loop": {
            "name": "loop",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.behaviors_paused": {
            "name": "behaviors_paused",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.connection_closed": {
            "name": "connection_closed",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.behavior_manager": {
            "name": "behavior_manager",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.config": {
            "name": "config",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.autoid": {
            "name": "autoid",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.reqid": {
            "name": "reqid",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.tab_id": {
            "name": "tab_id",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.tab_url": {
            "name": "tab_url",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.running": {
            "name": "running",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.reconnecting": {
            "name": "reconnecting",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.devtools_reconnect": {
            "name": "devtools_reconnect",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "BaseTab.set_running_behavior": {
            "name": "set_running_behavior",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "behavior": [
                    "str",
                    "bool",
                    "list[int]",
                    "list[bytes]",
                    "typing.Type"
                ]
            }
        },
        "BaseTab.unset_running_behavior": {
            "name": "unset_running_behavior",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "behavior": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseTab.__str__": {
            "name": "__str__",
            "location": 606,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTab.__repr__": {
            "name": "__repr__",
            "location": 611,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/tabs/behaviorTab.py": {
        "BehaviorTab.create": {
            "name": "create",
            "location": 14,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "tuple[]"
                ]
            }
        }
    },
    "autobrowser-master/autobrowser/tabs/crawlerTab.py": {
        "CrawlerTab.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrawlerTab.create": {
            "name": "create",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "tuple[]"
                ]
            }
        },
        "CrawlerTab.main_frame": {
            "name": "main_frame",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrawlerTab.main_frame_getter": {
            "name": "main_frame_getter",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrawlerTab.set_timestamp_from_response": {
            "name": "set_timestamp_from_response",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "typing.Iterator"
                ]
            }
        },
        "CrawlerTab._crawl_loop_running": {
            "name": "_crawl_loop_running",
            "location": 470,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrawlerTab._determine_navigation_result": {
            "name": "_determine_navigation_result",
            "location": 477,
            "return": [],
            "arguments": {
                "self": [],
                "navigation_response": [
                    "str",
                    "int"
                ]
            }
        },
        "CrawlerTab._should_exit_crawl_loop": {
            "name": "_should_exit_crawl_loop",
            "location": 635,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/tabs/__init__.py": {},
    "autobrowser-master/autobrowser/util/helper.py": {
        "Helper.event_loop": {
            "name": "event_loop",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "Helper.ensure_loop": {
            "name": "ensure_loop",
            "location": 38,
            "return": [
                "int",
                "list[typing.Callable[, ]]",
                "str"
            ],
            "arguments": {
                "loop": [
                    "None",
                    "int",
                    "list[typing.Callable[, ]]",
                    "str"
                ]
            }
        },
        "Helper.create_aio_http_client_session": {
            "name": "create_aio_http_client_session",
            "location": 50,
            "return": [
                "ClientSession"
            ],
            "arguments": {
                "loop": [
                    "None",
                    "str"
                ]
            }
        },
        "Helper.one_tick_sleep": {
            "name": "one_tick_sleep",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "Helper.json_string": {
            "name": "json_string",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "Helper.url_has_crawlable_scheme": {
            "name": "url_has_crawlable_scheme",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "typing.Mapping"
                ]
            }
        }
    },
    "autobrowser-master/autobrowser/util/loggers.py": {
        "create_autologger": {
            "name": "create_autologger",
            "location": 85,
            "return": [
                "AutoLogger"
            ],
            "arguments": {
                "name": [
                    "str",
                    "list[str]"
                ],
                "class_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "AutoLogger.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "class_name": [
                    "str"
                ],
                "logging_instance": [
                    "str",
                    "float",
                    "None",
                    "int",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "AutoLogger.critical": {
            "name": "critical",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "typing.Any",
                    "None",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "msg": [
                    "str",
                    "typing.Any",
                    "None",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "exc_info": [
                    "None",
                    "str",
                    "typing.Any",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "AutoLogger.debug": {
            "name": "debug",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]"
                ],
                "msg": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]"
                ]
            }
        },
        "AutoLogger.error": {
            "name": "error",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "typing.Pattern"
                ],
                "msg": [
                    "str",
                    "typing.Pattern"
                ]
            }
        },
        "AutoLogger.exception": {
            "name": "exception",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "None",
                    "bool"
                ],
                "msg": [
                    "str",
                    "None",
                    "bool"
                ],
                "exc_info": [
                    "bool"
                ]
            }
        },
        "AutoLogger.log": {
            "name": "log",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "int",
                    "float"
                ],
                "method": [
                    "str",
                    "int",
                    "float"
                ],
                "msg": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "AutoLogger.info": {
            "name": "info",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "typing.Type"
                ],
                "msg": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "AutoLogger.warning": {
            "name": "warning",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ],
                "msg": [
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "AutoLogger.warn": {
            "name": "warn",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ],
                "msg": [
                    "str",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "AutoLogger.isEnabledFor": {
            "name": "isEnabledFor",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "int"
                ]
            }
        },
        "AutoLogger.setLevel": {
            "name": "setLevel",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "bool",
                    "str",
                    "Exception",
                    "bytes"
                ]
            }
        },
        "AutoLogger.findCaller": {
            "name": "findCaller",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "stack_info": [
                    "bool"
                ]
            }
        },
        "AutoLogger.getEffectiveLevel": {
            "name": "getEffectiveLevel",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoLogger.addFilter": {
            "name": "addFilter",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_": [
                    "str",
                    "dict[, ]",
                    "None",
                    "bool"
                ]
            }
        },
        "AutoLogger.removeFilter": {
            "name": "removeFilter",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_": []
            }
        },
        "AutoLogger.__str__": {
            "name": "__str__",
            "location": 78,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoLogger.__repr__": {
            "name": "__repr__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "autobrowser-master/autobrowser/util/__init__.py": {},
    "autobrowser-master/tests/test_behavior_manager.py": {}
}
{
    "axion-master/setup.py": {},
    "axion-master/axion/conf.py": {},
    "axion-master/axion/plugin.py": {
        "PluginMeta.__new__": {
            "name": "__new__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "typing.Callable[str, int]"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "bases": [
                    "str",
                    "typing.Callable[str, str]",
                    "list[]",
                    "int"
                ],
                "dct": [],
                "id": [
                    "None",
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "version": [
                    "str"
                ]
            }
        },
        "Plugin.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "int",
                    "float"
                ]
            }
        },
        "Plugin.add_api": {
            "name": "add_api",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "PluginMeta.__new__._no_subclassing_of_plugin": {
            "name": "_no_subclassing_of_plugin",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "PluginMeta.__new__._ensure_no_duplicates": {
            "name": "_ensure_no_duplicates",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "p_id": []
            }
        },
        "PluginMeta.__new__._is_axion_configuration": {
            "name": "_is_axion_configuration",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": []
            }
        },
        "PluginMeta.__new__._ensure_correct_init_signature": {
            "name": "_ensure_correct_init_signature",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "p_id": []
            }
        }
    },
    "axion-master/axion/__init__.py": {
        "_plugins": {
            "name": "_plugins",
            "location": 71,
            "return": [
                "str",
                "dict[, ]",
                "typing.Pattern",
                "dict[str, pathlib.Path]"
            ],
            "arguments": {}
        },
        "Axion.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_dir": [
                    "str",
                    "None"
                ],
                "plugin_id": [
                    "str",
                    "typing.Callable[, ]",
                    "list[str]",
                    "int",
                    "float",
                    "bytes",
                    "set[]"
                ],
                "configuration": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "None",
                    "bytes"
                ]
            }
        },
        "Axion.add_api": {
            "name": "add_api",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec_location": [],
                "spec_arguments": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Axion.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "_plugins.iter_ns": {
            "name": "iter_ns",
            "location": 90,
            "return": [],
            "arguments": {
                "import_name": []
            }
        },
        "_plugins.to_plugin": {
            "name": "to_plugin",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "maybe_plugin": [
                    "None"
                ]
            }
        },
        "_plugins.check_and_get": {
            "name": "check_and_get",
            "location": 105,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "m": []
            }
        }
    },
    "axion-master/axion/handler/exceptions.py": {
        "IncorrectTypeReason.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "bool",
                    "None"
                ],
                "actual": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "IncorrectTypeReason.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidHandlerError.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation_id": [
                    "str",
                    "int"
                ],
                "errors": [
                    "str"
                ],
                "message": [
                    "None",
                    "str"
                ]
            }
        },
        "InvalidHandlerError.operation_id": {
            "name": "operation_id",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidHandlerError.reasons": {
            "name": "reasons",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidHandlerError.__iter__": {
            "name": "__iter__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InvalidHandlerError.__len__": {
            "name": "__len__",
            "location": 78,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidHandlerError.__getitem__": {
            "name": "__getitem__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "InvalidHandlerError.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "axion-master/axion/handler/model.py": {
        "get_f_param": {
            "name": "get_f_param",
            "location": 46,
            "return": [
                "FunctionArgName"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "convert_oas_param_to_ptype": {
            "name": "convert_oas_param_to_ptype",
            "location": 52,
            "return": [],
            "arguments": {
                "param": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "BaseHandler.__post_init__": {
            "name": "__post_init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param_mapping": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "BaseHandler.__post_init__._params": {
            "name": "_params",
            "location": 120,
            "return": [],
            "arguments": {
                "param_in": []
            }
        }
    },
    "axion-master/axion/handler/__init__.py": {
        "resolve": {
            "name": "resolve",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "operation": [
                    "bool",
                    "list[dict[, ]]",
                    "dict[, ]"
                ]
            }
        },
        "_resolve": {
            "name": "_resolve",
            "location": 60,
            "return": [],
            "arguments": {
                "handler": [
                    "dict[, ]"
                ],
                "operation": [
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "_import": {
            "name": "_import",
            "location": 82,
            "return": [],
            "arguments": {
                "operation_id": [
                    "str"
                ],
                "asynchronous": [
                    "bool",
                    "str",
                    "typing.Sequence[str]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "axion-master/axion/handler/analysis/body_arg.py": {
        "analyze": {
            "name": "analyze",
            "location": 11,
            "return": [],
            "arguments": {
                "request_body": [
                    "typing.Type",
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "float"
                ],
                "body_arg": [
                    "typing.Type",
                    "None",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]",
                    "list[tuple[typing.Union[str,bytes]]]"
                ]
            }
        },
        "_analyze_signature_set_oas_set": {
            "name": "_analyze_signature_set_oas_set",
            "location": 30,
            "return": [
                "tuple[typing.Union[set[Error],bool]]",
                "tuple[typing.Union[set[],bool]]"
            ],
            "arguments": {
                "request_body": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "body_arg": [
                    "str"
                ]
            }
        },
        "_analyze_signature_set_oas_gone": {
            "name": "_analyze_signature_set_oas_gone",
            "location": 51,
            "return": [
                "tuple[typing.Union[set[Error],bool]]"
            ],
            "arguments": {}
        },
        "_analyze_signature_gone_oas_gone": {
            "name": "_analyze_signature_gone_oas_gone",
            "location": 64,
            "return": [
                "tuple[typing.Union[set[],bool]]"
            ],
            "arguments": {}
        },
        "_analyze_signature_gone_oas_set": {
            "name": "_analyze_signature_gone_oas_set",
            "location": 69,
            "return": [
                "tuple[typing.Union[set[Error],bool]]"
            ],
            "arguments": {}
        }
    },
    "axion-master/axion/handler/analysis/cookies_arg.py": {
        "analyze": {
            "name": "analyze",
            "location": 13,
            "return": [
                "tuple[typing.Union[set[],dict[, ]]]"
            ],
            "arguments": {
                "parameters": [],
                "cookies_arg": [
                    "typing.OrderedDict",
                    "str",
                    "bool"
                ]
            }
        },
        "_signature_gone_oas_gone": {
            "name": "_signature_gone_oas_gone",
            "location": 80,
            "return": [
                "tuple[typing.Union[set[],dict[, ]]]"
            ],
            "arguments": {}
        },
        "_signature_gone_oas_set": {
            "name": "_signature_gone_oas_set",
            "location": 85,
            "return": [
                "tuple[typing.Union[set[],dict[, ]]]"
            ],
            "arguments": {}
        },
        "_signature_set_oas_gone": {
            "name": "_signature_set_oas_gone",
            "location": 100,
            "return": [
                "tuple[typing.Union[set[],dict[, ]]]"
            ],
            "arguments": {
                "cookies_arg": [
                    "int",
                    "str",
                    "list[int]",
                    "list[]",
                    "None"
                ]
            }
        },
        "_signature_set_oas_set": {
            "name": "_signature_set_oas_set",
            "location": 112,
            "return": [
                "tuple[typing.Union[set[],dict[, ]]]"
            ],
            "arguments": {
                "parameters": [],
                "cookies_arg": [
                    "list[str]",
                    "bool",
                    "typing.Type",
                    "str"
                ]
            }
        }
    },
    "axion-master/axion/handler/analysis/headers_arg.py": {
        "analyze": {
            "name": "analyze",
            "location": 16,
            "return": [
                "tuple[typing.Union[set[],dict[, ]]]"
            ],
            "arguments": {
                "parameters": [],
                "headers_arg": [
                    "typing.Type",
                    "None",
                    "int"
                ]
            }
        },
        "_signature_gone_oas_gone": {
            "name": "_signature_gone_oas_gone",
            "location": 92,
            "return": [
                "tuple[typing.Union[set[],dict[, ]]]"
            ],
            "arguments": {}
        },
        "_signature_gone_oas_set": {
            "name": "_signature_gone_oas_set",
            "location": 97,
            "return": [
                "tuple[typing.Union[set[],dict[, ]]]"
            ],
            "arguments": {}
        },
        "_signature_set_oas_gone": {
            "name": "_signature_set_oas_gone",
            "location": 109,
            "return": [
                "tuple[typing.Union[set[],dict[, ]]]"
            ],
            "arguments": {
                "headers_arg": [
                    "dict[str, int]"
                ]
            }
        },
        "_analyze_headers_signature_set_oas_set": {
            "name": "_analyze_headers_signature_set_oas_set",
            "location": 169,
            "return": [
                "tuple[typing.Union[set[],dict[, tuple[dict[, str]]]]]"
            ],
            "arguments": {
                "parameters": [
                    "typing.Any",
                    "None"
                ],
                "headers_arg": [
                    "str",
                    "dict[str, typing.Any]",
                    "set[str]",
                    "list[str]"
                ]
            }
        }
    },
    "axion-master/axion/handler/analysis/path_query_arg.py": {
        "analyze": {
            "name": "analyze",
            "location": 10,
            "return": [
                "tuple[typing.Union[set[],dict[, ]]]"
            ],
            "arguments": {
                "parameters": [
                    "dict[str, typing.Any]"
                ],
                "signature": [
                    "str",
                    "int",
                    "list[]",
                    "Exception",
                    "tuple[typing.Union[str,bool]]"
                ]
            }
        }
    },
    "axion-master/axion/handler/analysis/return_type.py": {
        "analyze": {
            "name": "analyze",
            "location": 14,
            "return": [
                "set[]"
            ],
            "arguments": {
                "operation": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "signature": []
            }
        },
        "_analyze_headers": {
            "name": "_analyze_headers",
            "location": 69,
            "return": [
                "set[]"
            ],
            "arguments": {
                "operation": [
                    "int"
                ],
                "headers": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "_analyze_cookies": {
            "name": "_analyze_cookies",
            "location": 94,
            "return": [
                "set[]"
            ],
            "arguments": {
                "operation": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "cookies": [
                    "int",
                    "typing.Iterable[str]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "_analyze_http_code": {
            "name": "_analyze_http_code",
            "location": 119,
            "return": [
                "set[]"
            ],
            "arguments": {
                "operation": [
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Type"
                ],
                "rt_http_code": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "axion-master/axion/handler/analysis/__init__.py": {
        "analyze": {
            "name": "analyze",
            "location": 16,
            "return": [],
            "arguments": {
                "handler": [
                    "int",
                    "dict[str, collections.abc.AsyncGenerator]"
                ],
                "operation": [
                    "str"
                ]
            }
        }
    },
    "axion-master/axion/oas/endpoint.py": {
        "oas_endpoint": {
            "name": "oas_endpoint",
            "location": 11,
            "return": [],
            "arguments": {
                "f": [
                    "int",
                    "str",
                    "typing.Iterator"
                ]
            }
        },
        "oas_endpoint.wrapper": {
            "name": "wrapper",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "axion-master/axion/oas/exceptions.py": {},
    "axion-master/axion/oas/functions.py": {
        "operation_filter_parameters": {
            "name": "operation_filter_parameters",
            "location": 26,
            "return": [
                "list[]"
            ],
            "arguments": {
                "operation": [
                    "str",
                    "typing.Type",
                    "bool",
                    "None"
                ]
            }
        },
        "parameter_in": {
            "name": "parameter_in",
            "location": 42,
            "return": [],
            "arguments": {
                "param": []
            }
        },
        "parameter_default_values": {
            "name": "parameter_default_values",
            "location": 46,
            "return": [],
            "arguments": {
                "param": [
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "parameter_default_values._filter": {
            "name": "_filter",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "v": []
            }
        }
    },
    "axion-master/axion/oas/loader.py": {
        "load_spec": {
            "name": "load_spec",
            "location": 13,
            "return": [],
            "arguments": {
                "spec": [
                    "typing.Iterable[str]",
                    "str"
                ],
                "arguments": [
                    "None",
                    "str",
                    "typing.Container",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "axion-master/axion/oas/model.py": {
        "PythonTypeCompatible.python_type": {
            "name": "python_type",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MimeType.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_type": [
                    "str"
                ]
            }
        },
        "MimeType.is_json": {
            "name": "is_json",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MimeType.is_text": {
            "name": "is_text",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MimeType.__hash__": {
            "name": "__hash__",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MimeType.__eq__": {
            "name": "__eq__",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MimeType.__repr__": {
            "name": "__repr__",
            "location": 84,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASRequestBody.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "dict[, ]",
                    "bytes",
                    "list[typing.Callable[, ]]"
                ],
                "required": [
                    "bool"
                ]
            }
        },
        "OASRequestBody.__getitem__": {
            "name": "__getitem__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "OASRequestBody.__iter__": {
            "name": "__iter__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OASRequestBody.__len__": {
            "name": "__len__",
            "location": 118,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASOperation.__hash__": {
            "name": "__hash__",
            "location": 138,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASOperation.__repr__": {
            "name": "__repr__",
            "location": 141,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASSpecification.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int",
                    "float",
                    "typing.Sequence[int]",
                    "str"
                ],
                "servers": [
                    "int",
                    "float",
                    "typing.Sequence[int]",
                    "str"
                ],
                "operations": [
                    "int",
                    "float",
                    "typing.Sequence[int]",
                    "str"
                ]
            }
        },
        "OASMediaType.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "float"
                ]
            }
        },
        "OASType.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "int",
                    "tuple[]",
                    "float"
                ],
                "example": [
                    "int",
                    "tuple[]",
                    "float"
                ],
                "nullable": [
                    "str",
                    "None",
                    "float",
                    "bool"
                ],
                "deprecated": [
                    "int",
                    "tuple[]",
                    "float"
                ],
                "read_only": [
                    "int",
                    "typing.IO",
                    "bytes",
                    "str"
                ],
                "write_only": [
                    "int",
                    "tuple[]",
                    "float"
                ]
            }
        },
        "OASType.oas_type": {
            "name": "oas_type",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASType.__repr__": {
            "name": "__repr__",
            "location": 220,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASAnyType.python_type": {
            "name": "python_type",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OASOneOfType.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "example": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "nullable": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "deprecated": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "read_only": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "write_only": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "discriminator": [
                    "int",
                    "tuple[]",
                    "float"
                ],
                "schemas": [
                    "int",
                    "tuple[]",
                    "float"
                ]
            }
        },
        "OASOneOfType.python_type": {
            "name": "python_type",
            "location": 271,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASAnyOfType.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "example": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "nullable": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "deprecated": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "read_only": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "write_only": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "discriminator": [
                    "int",
                    "tuple[]",
                    "float"
                ],
                "schemas": [
                    "int",
                    "tuple[]",
                    "float"
                ]
            }
        },
        "OASAnyOfType.python_type": {
            "name": "python_type",
            "location": 307,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASBooleanType.python_type": {
            "name": "python_type",
            "location": 316,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASNumberType.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "example": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "nullable": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "deprecated": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "read_only": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "write_only": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "number_cls": [
                    "int",
                    "float"
                ],
                "format": [
                    "int",
                    "float"
                ],
                "minimum": [
                    "int",
                    "float"
                ],
                "maximum": [
                    "int",
                    "float"
                ],
                "multiple_of": [
                    "int",
                    "float"
                ],
                "exclusive_minimum": [
                    "int",
                    "float"
                ],
                "exclusive_maximum": [
                    "int",
                    "float"
                ]
            }
        },
        "OASNumberType.oas_type": {
            "name": "oas_type",
            "location": 368,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASNumberType.python_type": {
            "name": "python_type",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OASStringType.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "example": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "nullable": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "deprecated": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "read_only": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "write_only": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "min_length": [
                    "int",
                    "tuple[]",
                    "float"
                ],
                "max_length": [
                    "int",
                    "None",
                    "tuple[typing.Union[float,float]]"
                ],
                "pattern": [
                    "int",
                    "tuple[]",
                    "float"
                ],
                "format": [
                    "int",
                    "tuple[]",
                    "float"
                ]
            }
        },
        "OASStringType.python_type": {
            "name": "python_type",
            "location": 414,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASFileType.__init__": {
            "name": "__init__",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nullable": [
                    "bool",
                    "None",
                    "float",
                    "str"
                ],
                "deprecated": [
                    "bool",
                    "None",
                    "float",
                    "str"
                ],
                "read_only": [
                    "bool",
                    "None",
                    "float",
                    "str"
                ],
                "write_only": [
                    "bool",
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "OASFileType.python_type": {
            "name": "python_type",
            "location": 439,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASDiscriminator.__init__": {
            "name": "__init__",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "property_name": [
                    "bool",
                    "str",
                    "None",
                    "set[str]",
                    "list[str]"
                ],
                "mapping": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        },
        "OASObjectType.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "example": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "nullable": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "deprecated": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "read_only": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "write_only": [
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "min_properties": [
                    "None",
                    "float",
                    "int",
                    "bytes",
                    "dict[, ]",
                    "dict[str, list[typing.Any]]"
                ],
                "max_properties": [
                    "None",
                    "int",
                    "float"
                ],
                "properties": [
                    "None",
                    "float",
                    "int",
                    "bytes",
                    "dict[, ]",
                    "dict[str, list[typing.Any]]"
                ],
                "required": [
                    "None",
                    "float",
                    "int",
                    "bytes",
                    "dict[, ]",
                    "dict[str, list[typing.Any]]"
                ],
                "additional_properties": [
                    "bool"
                ],
                "discriminator": [
                    "None",
                    "float",
                    "int",
                    "bytes",
                    "dict[, ]",
                    "dict[str, list[typing.Any]]"
                ]
            }
        },
        "OASObjectType.python_type": {
            "name": "python_type",
            "location": 503,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASObjectType.is_free_form": {
            "name": "is_free_form",
            "location": 507,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASArrayType.__init__": {
            "name": "__init__",
            "location": 523,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "bool",
                    "None",
                    "typing.Iterable[typing.Any]"
                ],
                "example": [
                    "bool",
                    "None",
                    "typing.Iterable[typing.Any]"
                ],
                "nullable": [
                    "bool",
                    "None",
                    "typing.Iterable[typing.Any]"
                ],
                "deprecated": [
                    "bool",
                    "None",
                    "typing.Iterable[typing.Any]"
                ],
                "read_only": [
                    "bool",
                    "None",
                    "typing.Iterable[typing.Any]"
                ],
                "write_only": [
                    "bool",
                    "None",
                    "typing.Iterable[typing.Any]"
                ],
                "items_type": [
                    "list[float]",
                    "None",
                    "str"
                ],
                "min_length": [
                    "bool",
                    "None",
                    "dict[str, list[typing.Any]]"
                ],
                "max_length": [
                    "int",
                    "None",
                    "float"
                ],
                "unique_items": [
                    "bool",
                    "None",
                    "dict[str, list[typing.Any]]"
                ]
            }
        },
        "OASArrayType.python_type": {
            "name": "python_type",
            "location": 552,
            "return": [
                "set[]",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASParameter.__init__": {
            "name": "__init__",
            "location": 568,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Any",
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "schema": [
                    "int",
                    "str",
                    "typing.Iterable[typing.Hashable]"
                ],
                "example": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ],
                "required": [
                    "bool",
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Any"
                ],
                "explode": [
                    "dict[str, str]",
                    "typing.IO",
                    "None",
                    "list[str]",
                    "int",
                    "list[int]",
                    "str"
                ],
                "deprecated": [
                    "bool",
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Any"
                ]
            }
        },
        "OASParameter.__hash__": {
            "name": "__hash__",
            "location": 591,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OASParameter.__eq__": {
            "name": "__eq__",
            "location": 597,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "OASParameter.python_type": {
            "name": "python_type",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OASPathParameter.__init__": {
            "name": "__init__",
            "location": 621,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str",
                    "typing.Callable[, ]"
                ],
                "schema": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str",
                    "typing.Callable[, ]"
                ],
                "example": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str",
                    "typing.Callable[, ]"
                ],
                "explode": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str",
                    "typing.Callable[, ]"
                ],
                "deprecated": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "OASQueryParameter.__init__": {
            "name": "__init__",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "schema": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "example": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "required": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "explode": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "deprecated": [
                    "bool",
                    "None",
                    "typing.Any",
                    "str"
                ],
                "allow_empty_value": [
                    "tuple[typing.Union[int,...]]",
                    "None",
                    "typing.Sequence[typing.Any]",
                    "list[typing.Any]"
                ],
                "allow_reserved": [
                    "list[str]",
                    "None",
                    "str",
                    "bool",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "OASParameterStyle.__init__": {
            "name": "__init__",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[str, str]"
                ],
                "type": [
                    "bool",
                    "str",
                    "float",
                    "set[str]",
                    "None"
                ],
                "locations": [
                    "str",
                    "int",
                    "dict[str, str]"
                ]
            }
        }
    },
    "axion-master/axion/oas/__init__.py": {},
    "axion-master/axion/oas/parser/all_of.py": {
        "merge": {
            "name": "merge",
            "location": 14,
            "return": [],
            "arguments": {
                "oas_type": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "None"
                ],
                "a": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "b": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "_any": {
            "name": "_any",
            "location": 33,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "a": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "b": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "_boolean": {
            "name": "_boolean",
            "location": 47,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "a": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "b": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "_string": {
            "name": "_string",
            "location": 62,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "a": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "b": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "_number": {
            "name": "_number",
            "location": 81,
            "return": [
                "dict[typing.Text, typing.Union[dict[str, typing.Any],str,dict[, ]]]"
            ],
            "arguments": {
                "oas_type": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]"
                ],
                "a": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "b": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "_array": {
            "name": "_array",
            "location": 111,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "a": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "b": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "_object": {
            "name": "_object",
            "location": 134,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[, ],dict[str, str],dict[str, dict[str, typing.Any]],dict[int, int],bytes,dict[str, dict[str, str]],typing.Pattern,dict[str, dict[str, bool]]]]"
            ],
            "arguments": {
                "a": [
                    "dict[, ]",
                    "dict[str, float]"
                ],
                "b": [
                    "dict[, ]",
                    "dict[str, float]"
                ]
            }
        },
        "_merge_discriminator": {
            "name": "_merge_discriminator",
            "location": 176,
            "return": [
                "dict[typing.Text, dict[, ]]",
                "None"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "_merge_object_additional_properties": {
            "name": "_merge_object_additional_properties",
            "location": 214,
            "return": [
                "None",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "_merge_object_properties": {
            "name": "_merge_object_properties",
            "location": 263,
            "return": [
                "dict[, dict[typing.Text, typing.Union[dict[int, str],dict[str, str],dict[, ],int]]]",
                "None"
            ],
            "arguments": {
                "a": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "b": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "_get_value": {
            "name": "_get_value",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "oas_property": [
                    "str",
                    "float",
                    "int",
                    "list[dict[str, str]]"
                ],
                "a": [
                    "str",
                    "set[int]"
                ],
                "b": [
                    "str",
                    "set[int]",
                    "int"
                ]
            }
        }
    },
    "axion-master/axion/oas/parser/ref.py": {
        "resolve": {
            "name": "resolve",
            "location": 8,
            "return": [
                "dict[str, typing.Any]",
                "float",
                "dict[, ]",
                "str"
            ],
            "arguments": {
                "components": [
                    "str"
                ],
                "ref": [
                    "None",
                    "str",
                    "dict[, ]",
                    "list[list[typing.Callable[, ]]]",
                    "int",
                    "typing.Callable[str, str]"
                ]
            }
        }
    },
    "axion-master/axion/oas/parser/type.py": {
        "resolve": {
            "name": "resolve",
            "location": 15,
            "return": [],
            "arguments": {
                "components": [
                    "int"
                ],
                "work_item": []
            }
        },
        "_resolve_oas_any": {
            "name": "_resolve_oas_any",
            "location": 62,
            "return": [],
            "arguments": {
                "work_item": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_resolve_one_of": {
            "name": "_resolve_one_of",
            "location": 73,
            "return": [],
            "arguments": {
                "components": [
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "work_item": [
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[, ]"
                ]
            }
        },
        "_resolve_all_of": {
            "name": "_resolve_all_of",
            "location": 117,
            "return": [],
            "arguments": {
                "components": [
                    "list[str]",
                    "None",
                    "bytes"
                ],
                "work_item": [
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[, ]"
                ]
            }
        },
        "_resolve_any_of": {
            "name": "_resolve_any_of",
            "location": 165,
            "return": [],
            "arguments": {
                "components": [
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "work_item": [
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[, ]"
                ]
            }
        },
        "_handle_any_one_all_of_not": {
            "name": "_handle_any_one_all_of_not",
            "location": 225,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "components": [
                    "dict[str, dict[str, typing.Any]]"
                ],
                "work_item": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "_resolve_oas_array": {
            "name": "_resolve_oas_array",
            "location": 236,
            "return": [],
            "arguments": {
                "components": [
                    "bool",
                    "list[str]"
                ],
                "work_item": []
            }
        },
        "_resolve_oas_object": {
            "name": "_resolve_oas_object",
            "location": 259,
            "return": [],
            "arguments": {
                "components": [
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, int]",
                    "dict[, ]",
                    "str",
                    "dict[str, str]"
                ],
                "work_item": [
                    "dict[str, typing.Any]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "_resolve_discriminator": {
            "name": "_resolve_discriminator",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "work_item": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_resolve_oas_string": {
            "name": "_resolve_oas_string",
            "location": 333,
            "return": [],
            "arguments": {
                "work_item": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "_resolve_oas_number": {
            "name": "_resolve_oas_number",
            "location": 394,
            "return": [],
            "arguments": {
                "number_cls": [
                    "str",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "work_item": [
                    "dict[str, typing.Any]",
                    "dict[str, float]",
                    "dict[str, dict[str, int]]"
                ]
            }
        },
        "_resolve_oas_boolean": {
            "name": "_resolve_oas_boolean",
            "location": 449,
            "return": [],
            "arguments": {
                "work_item": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_resolve_oas_object._resolve_additional_properties": {
            "name": "_resolve_additional_properties",
            "location": 263,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "axion-master/axion/oas/parser/__init__.py": {
        "parse_spec": {
            "name": "parse_spec",
            "location": 18,
            "return": [],
            "arguments": {
                "spec": []
            }
        },
        "_resolve_operations": {
            "name": "_resolve_operations",
            "location": 44,
            "return": [
                "set[]"
            ],
            "arguments": {
                "paths": [
                    "dict[, ]"
                ],
                "components": [
                    "str",
                    "bool"
                ]
            }
        },
        "_resolve_request_body": {
            "name": "_resolve_request_body",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "request_body": [
                    "dict[str, typing.Any]"
                ],
                "components": [
                    "dict[str, typing.Any]",
                    "None",
                    "str",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "_resolve_responses": {
            "name": "_resolve_responses",
            "location": 112,
            "return": [],
            "arguments": {
                "responses_dict": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "components": [
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "_resolve_content": {
            "name": "_resolve_content",
            "location": 140,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "components": [
                    "dict[str, dict[str, typing.Any]]",
                    "int",
                    "None",
                    "float",
                    "typing.BinaryIO"
                ],
                "work_item": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "_resolve_parameters": {
            "name": "_resolve_parameters",
            "location": 180,
            "return": [
                "set[]"
            ],
            "arguments": {
                "components": [
                    "dict[str, typing.Any]",
                    "list[]",
                    "dict[, ]",
                    "bytearray",
                    "bool"
                ],
                "parameters": [
                    "list[dict[str, typing.Any]]",
                    "list[]",
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "_resolve_parameter": {
            "name": "_resolve_parameter",
            "location": 228,
            "return": [],
            "arguments": {
                "components": [
                    "dict[str, dict[str, typing.Any]]",
                    "str",
                    "dict[str, str]",
                    "None",
                    "list[str]"
                ],
                "param_name": [
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "list[str]",
                    "None"
                ],
                "param_def": [],
                "param_in": [
                    "dict[str, typing.Any]",
                    "bool",
                    "typing.Type",
                    "dict[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "_response_code": {
            "name": "_response_code",
            "location": 330,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "val": []
            }
        },
        "_resolve_content._build_media_type": {
            "name": "_build_media_type",
            "location": 152,
            "return": [],
            "arguments": {
                "mime_type": [],
                "media_type_def": []
            }
        }
    },
    "axion-master/axion/oas_mypy/app_ctor_analyzer.py": {
        "hook": {
            "name": "hook",
            "location": 12,
            "return": [],
            "arguments": {
                "f_ctx": [
                    "dict[, ]",
                    "list[mypy.nodes.Argument]",
                    "list[]"
                ]
            }
        }
    },
    "axion-master/axion/oas_mypy/conf.py": {
        "OASPluginConfig.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        }
    },
    "axion-master/axion/oas_mypy/errors.py": {
        "not_oas_handler": {
            "name": "not_oas_handler",
            "location": 30,
            "return": [],
            "arguments": {
                "msg": [
                    "str"
                ],
                "ctx": [
                    "dict[, ]"
                ],
                "line_number": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "invalid_argument": {
            "name": "invalid_argument",
            "location": 47,
            "return": [],
            "arguments": {
                "msg": [
                    "str"
                ],
                "ctx": [
                    "dict[, ]"
                ],
                "line_number": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "invalid_default_value": {
            "name": "invalid_default_value",
            "location": 64,
            "return": [],
            "arguments": {
                "msg": [
                    "str",
                    "dict[, ]",
                    "typing.Type"
                ],
                "ctx": [
                    "dict[, ]"
                ],
                "line_number": [
                    "None",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "default_value_not_in_oas": {
            "name": "default_value_not_in_oas",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "ctx": [],
                "line_number": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "axion-master/axion/oas_mypy/__init__.py": {
        "_oas_handler_analyzer": {
            "name": "_oas_handler_analyzer",
            "location": 89,
            "return": [],
            "arguments": {
                "specifications": [
                    "str",
                    "int",
                    "BaseException"
                ],
                "f_ctx": [
                    "bytes"
                ]
            }
        },
        "_get_default_value": {
            "name": "_get_default_value",
            "location": 219,
            "return": [
                "list[]",
                "typing.Pattern",
                "typing.DefaultDict"
            ],
            "arguments": {
                "arg_name": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]"
                ],
                "oas_handler": [
                    "str",
                    "int",
                    "BaseException",
                    "None"
                ]
            }
        },
        "transform_parameter_to_type": {
            "name": "transform_parameter_to_type",
            "location": 253,
            "return": [],
            "arguments": {
                "param": [
                    "bool",
                    "typing.Callable[str, mypy.types.Instance]"
                ],
                "handler_arg_type": [
                    "list[mypy.types.Type]"
                ],
                "handler_arg_default_value": [
                    "list[mypy.types.Type]",
                    "typing.Type",
                    "dict[, ]",
                    "None"
                ],
                "ctx": [
                    "list[mypy.types.Type]"
                ]
            }
        },
        "transform_oas_type": {
            "name": "transform_oas_type",
            "location": 296,
            "return": [],
            "arguments": {
                "oas_type": [
                    "bool",
                    "str",
                    "None"
                ],
                "handler_type": [],
                "ctx": []
            }
        },
        "transform_oas_object_type": {
            "name": "transform_oas_object_type",
            "location": 348,
            "return": [],
            "arguments": {
                "oas_type": [
                    "dict[mypy.nodes.Expression, mypy.types.Type]",
                    "None",
                    "int"
                ],
                "handler_arg_type": [
                    "dict[mypy.nodes.Expression, mypy.types.Type]",
                    "None",
                    "int"
                ],
                "ctx": [
                    "None"
                ]
            }
        },
        "get_typed_dict_type": {
            "name": "get_typed_dict_type",
            "location": 411,
            "return": [
                "TypedDictType"
            ],
            "arguments": {
                "ctx": [],
                "handler_arg_type": [
                    "bool"
                ],
                "oas_type": []
            }
        },
        "get_generic_type_vt": {
            "name": "get_generic_type_vt",
            "location": 439,
            "return": [
                "AnyType",
                "typing.Type",
                "list[int]"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "handler_arg_type": [
                    "str"
                ],
                "oas_type": [
                    "str"
                ]
            }
        },
        "_get_oas_operation": {
            "name": "_get_oas_operation",
            "location": 459,
            "return": [],
            "arguments": {
                "f_oas_id": [
                    "str",
                    "typing.Mapping",
                    "int",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None",
                    "dict[, ]"
                ],
                "specifications": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "_oas_handler_msg": {
            "name": "_oas_handler_msg",
            "location": 478,
            "return": [],
            "arguments": {
                "msg_fn": [
                    "int",
                    "None",
                    "typing.Type",
                    "str"
                ],
                "f_ctx": [],
                "msg": [
                    "str"
                ],
                "line_number": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "_load_specs": {
            "name": "_load_specs",
            "location": 496,
            "return": [
                "dict[, typing.Union[str,dict[str, str],dict[, ]]]"
            ],
            "arguments": {
                "oas_dirs": [
                    "typing.Iterable[pathlib.Path]",
                    "str"
                ]
            }
        },
        "plugin": {
            "name": "plugin",
            "location": 512,
            "return": [
                "OASPlugin"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "OASPlugin.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "OASPlugin.get_function_hook": {
            "name": "get_function_hook",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "OASPlugin.get_method_hook": {
            "name": "get_method_hook",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        }
    },
    "axion-master/axion/pipeline/model.py": {},
    "axion-master/axion/pipeline/validator.py": {
        "Validator.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oas_operation": [
                    "int",
                    "float"
                ]
            }
        },
        "Validator.__call__": {
            "name": "__call__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "float"
                ]
            }
        },
        "HttpCodeValidator.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oas_operation": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "HttpCodeValidator.__call__": {
            "name": "__call__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        }
    },
    "axion-master/axion/pipeline/__init__.py": {},
    "axion-master/axion/plugins/_aiohttp.py": {
        "_apply_specification": {
            "name": "_apply_specification",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "for_app": [
                    "str",
                    "bool",
                    "list[]",
                    "dict[str, typing.Any]"
                ],
                "spec": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "_make_handler": {
            "name": "_make_handler",
            "location": 108,
            "return": [],
            "arguments": {
                "operation": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "_response_processor": {
            "name": "_response_processor",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "operation": [
                    "bool",
                    "str",
                    "None",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "_request_processor": {
            "name": "_request_processor",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "operation": [
                    "typing.Any",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_get_base_path": {
            "name": "_get_base_path",
            "location": 134,
            "return": [],
            "arguments": {
                "servers": []
            }
        },
        "_get_target_app": {
            "name": "_get_target_app",
            "location": 163,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "root_app": [
                    "str"
                ],
                "base_path": [
                    "str"
                ],
                "known_base_paths": [
                    "str",
                    "bytes"
                ],
                "middlewares": [
                    "None",
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "AioHttpPlugin.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ],
                "loop": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "AioHttpPlugin.add_api": {
            "name": "add_api",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "str",
                    "None"
                ],
                "base_path": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "_get_target_app.check_overlapping": {
            "name": "check_overlapping",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "axion-master/axion/plugins/__init__.py": {},
    "axion-master/axion/utils/get_type_repr.py": {
        "get_repr": {
            "name": "get_repr",
            "location": 9,
            "return": [],
            "arguments": {
                "val": [
                    "bool",
                    "set[str]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "_repr": {
            "name": "_repr",
            "location": 17,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "val": []
            }
        },
        "_qualified_name": {
            "name": "_qualified_name",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "tt": [
                    "typing.Type",
                    "list[str]",
                    "typing.Callable[str, None]",
                    "str"
                ]
            }
        }
    },
    "axion-master/axion/utils/types.py": {
        "is_none_type": {
            "name": "is_none_type",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "tt": [
                    "typing.Type"
                ]
            }
        },
        "is_any_type": {
            "name": "is_any_type",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "tt": []
            }
        },
        "is_dict_like": {
            "name": "is_dict_like",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "tt": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "resolve_root_type": {
            "name": "resolve_root_type",
            "location": 74,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "tt": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "literal_types": {
            "name": "literal_types",
            "location": 80,
            "return": [
                "set[]"
            ],
            "arguments": {
                "tt": []
            }
        },
        "_literal_types": {
            "name": "_literal_types",
            "location": 86,
            "return": [
                "tuple[typing.Type]"
            ],
            "arguments": {
                "tt": []
            }
        }
    },
    "axion-master/axion/utils/__init__.py": {},
    "axion-master/examples/setup.py": {},
    "axion-master/examples/petstore/__init__.py": {},
    "axion-master/examples/petstore/__main__.py": {},
    "axion-master/examples/petstore/api/__init__.py": {},
    "axion-master/tests/conftest.py": {
        "random_spec": {
            "name": "random_spec",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "spec_path": {
            "name": "spec_path",
            "location": 19,
            "return": [
                "str",
                "bool",
                "typing.Callable[, ]",
                "set[pathlib.Path]"
            ],
            "arguments": {
                "random_spec": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "set[pathlib.Path]"
                ]
            }
        },
        "clean_plugins": {
            "name": "clean_plugins",
            "location": 24,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "caplog": {
            "name": "caplog",
            "location": 31,
            "return": [
                "typing.Generator[typing.Union[int,str,typing.Iterable['Context']]]"
            ],
            "arguments": {
                "caplog": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "caplog.LoguruHandler.emit": {
            "name": "emit",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "axion-master/tests/test_axion_app.py": {
        "mocked_plugin": {
            "name": "mocked_plugin",
            "location": 14,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "request": [],
                "mocker": []
            }
        },
        "test_correct_init": {
            "name": "test_correct_init",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_plugin": [
                    "tuple[typing.Union[str,mock.Mock]]"
                ],
                "mocker": []
            }
        },
        "test_add_api_single_server": {
            "name": "test_add_api_single_server",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "mocked_plugin": [
                    "tuple[typing.Union[str,mock.Mock]]"
                ],
                "base_path": [
                    "str",
                    "None"
                ],
                "mocker": [],
                "tmp_path": []
            }
        },
        "test_add_api_relative_spec_path": {
            "name": "test_add_api_relative_spec_path",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "base_path": [
                    "str",
                    "None"
                ],
                "mocked_plugin": [
                    "tuple[typing.Union[str,mock.Mock]]",
                    "str"
                ],
                "mocker": []
            }
        }
    },
    "axion-master/tests/test_axion_plugins.py": {
        "test_builtin_plugins_detected": {
            "name": "test_builtin_plugins_detected",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/tests/test_handler_analysis.py": {
        "normal_f": {
            "name": "normal_f",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_handler_bad_cases": {
            "name": "test_make_handler_bad_cases",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "operation_id": [
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "error_msg": [
                    "str",
                    "typing.Pattern"
                ],
                "mocker": []
            }
        },
        "test_resolve_handler_couroutine": {
            "name": "test_resolve_handler_couroutine",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_handler_signature": {
            "name": "test_empty_handler_signature",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": []
            }
        },
        "test_not_empty_signature": {
            "name": "test_not_empty_signature",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "mocker": []
            }
        }
    },
    "axion-master/tests/test_handler_analysis_body_arg.py": {
        "test_no_request_body_empty_signature": {
            "name": "test_no_request_body_empty_signature",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_request_body_signature_set": {
            "name": "test_request_body_signature_set",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "required": [
                    "bool"
                ],
                "mocker": []
            }
        },
        "test_request_body_required_signature_optional": {
            "name": "test_request_body_required_signature_optional",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_request_body_different_types": {
            "name": "test_request_body_different_types",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "typing.Type",
                    "str",
                    "list[int]"
                ],
                "mocker": []
            }
        },
        "test_no_request_body_signature_set": {
            "name": "test_no_request_body_signature_set",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "int",
                    "str"
                ],
                "mocker": []
            }
        },
        "test_request_body_empty_signature": {
            "name": "test_request_body_empty_signature",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "required": [
                    "bool",
                    "dict[, ]"
                ],
                "caplog": [
                    "str",
                    "int"
                ],
                "mocker": []
            }
        },
        "_make_operation": {
            "name": "_make_operation",
            "location": 193,
            "return": [],
            "arguments": {
                "request_body_def": [
                    "None",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]",
                    "typing.Callable[dict[, ], None]",
                    "str"
                ]
            }
        }
    },
    "axion-master/tests/test_handler_analysis_cookies_arg.py": {
        "test_signature_empty_no_oas_cookies": {
            "name": "test_signature_empty_no_oas_cookies",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_signature_set_no_oas_cookies": {
            "name": "test_signature_set_no_oas_cookies",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "typing.Type",
                    "dict[, ]",
                    "str"
                ],
                "caplog": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ],
                "mocker": []
            }
        },
        "test_signature_empty_oas_cookies": {
            "name": "test_signature_empty_oas_cookies",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_signature_set_oas_cookies": {
            "name": "test_signature_set_oas_cookies",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "typing.Type",
                    "dict[, ]",
                    "str"
                ],
                "caplog": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ],
                "mocker": []
            }
        },
        "test_signature_set_bad_oas_cookies_type_mismatch": {
            "name": "test_signature_set_bad_oas_cookies_type_mismatch",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "typing.Type",
                    "bool",
                    "str",
                    "Exception",
                    "dict[str, bool]",
                    "tuple[]"
                ],
                "expected_errors": [
                    "list[tuple[typing.Union[str,str]]]",
                    "str",
                    "list[str]",
                    "list[]",
                    "list[int]",
                    "bytes"
                ],
                "mocker": []
            }
        },
        "test_invalid_cookies_type": {
            "name": "test_invalid_cookies_type",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "op_id": [
                    "str",
                    "int"
                ],
                "the_type": [
                    "typing.Type",
                    "str",
                    "int",
                    "typing.Any"
                ],
                "mocker": []
            }
        },
        "test_valid_cookies_any_type": {
            "name": "test_valid_cookies_any_type",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "typing.Type"
                ],
                "caplog": [],
                "mocker": []
            }
        },
        "test_signature_set_bad_oas_cookies_unknown": {
            "name": "test_signature_set_bad_oas_cookies_unknown",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "typing.Type",
                    "dict[, ]",
                    "str"
                ],
                "extra_param": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "mocker": []
            }
        }
    },
    "axion-master/tests/test_handler_analysis_headers_arg.py": {
        "test_valid_headers_any_type": {
            "name": "test_valid_headers_any_type",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "typing.Type",
                    "str",
                    "list[str]"
                ],
                "op_id": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "caplog": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "mocker": []
            }
        },
        "test_invalid_headers_type": {
            "name": "test_invalid_headers_type",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "variation": [
                    "int",
                    "str"
                ],
                "mocker": []
            }
        },
        "test_oas_headers_signature_empty": {
            "name": "test_oas_headers_signature_empty",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "mocker": []
            }
        },
        "test_no_oas_headers_signature_empty": {
            "name": "test_no_oas_headers_signature_empty",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "mocker": []
            }
        },
        "test_no_oas_headers_mapping": {
            "name": "test_no_oas_headers_mapping",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "dict[, ]"
                ],
                "mocker": []
            }
        },
        "test_no_oas_headers_typed_dict_unknown_header": {
            "name": "test_no_oas_headers_typed_dict_unknown_header",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "mocker": []
            }
        },
        "test_typed_dict_bad_type": {
            "name": "test_typed_dict_bad_type",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "op_id": [
                    "str",
                    "None"
                ],
                "caplog": [
                    "str",
                    "bool",
                    "None",
                    "float",
                    "typing.Type",
                    "typing.Callable[..., str]"
                ],
                "mocker": []
            }
        },
        "test_no_oas_headers_typed_dict": {
            "name": "test_no_oas_headers_typed_dict",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "mocker": []
            }
        },
        "test_oas_headers_signature_mapping": {
            "name": "test_oas_headers_signature_mapping",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "mocker": []
            }
        },
        "test_oas_headers_signature_typed_dict": {
            "name": "test_oas_headers_signature_typed_dict",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [],
                "mocker": []
            }
        },
        "test_oas_headers_extra_header_typed_dict": {
            "name": "test_oas_headers_extra_header_typed_dict",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "bool"
                ],
                "mocker": []
            }
        },
        "test_no_oas_headers_typed_dict_bad_type": {
            "name": "test_no_oas_headers_typed_dict_bad_type",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "typing.Type",
                    "Exception"
                ],
                "caplog": [
                    "typing.Type",
                    "str",
                    "dict[, ]"
                ],
                "mocker": []
            }
        }
    },
    "axion-master/tests/test_handler_analysis_path_query_arg.py": {
        "test_signature_mismatch_missing": {
            "name": "test_signature_mismatch_missing",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_signature_all_missing": {
            "name": "test_signature_all_missing",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_signature_mismatch_bad_type": {
            "name": "test_signature_mismatch_bad_type",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_signature_all_bad_type": {
            "name": "test_signature_all_bad_type",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_signature_match": {
            "name": "test_signature_match",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "axion-master/tests/test_handler_analysis_return_type.py": {
        "test_correct_handler_no_oas_body": {
            "name": "test_correct_handler_no_oas_body",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "response_code": [
                    "int",
                    "typing.Type"
                ],
                "return_type": [
                    "int",
                    "typing.Type"
                ],
                "mocker": []
            }
        },
        "test_missing_return_annotation": {
            "name": "test_missing_return_annotation",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_omitted_return_code_single_oas_resp": {
            "name": "test_omitted_return_code_single_oas_resp",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "response_code": [
                    "dict[, ]"
                ],
                "mocker": []
            }
        },
        "test_omitted_return_code_couple_oas_resp": {
            "name": "test_omitted_return_code_couple_oas_resp",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_incorrect_return_type": {
            "name": "test_incorrect_return_type",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "return_type": [
                    "typing.Type",
                    "typing.MutableMapping",
                    "str"
                ],
                "mocker": []
            }
        },
        "test_incorrect_headers_type": {
            "name": "test_incorrect_headers_type",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "headers_type": [
                    "typing.Type"
                ],
                "mocker": []
            }
        },
        "test_incorrect_cookies_type": {
            "name": "test_incorrect_cookies_type",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "cookies_type": [
                    "typing.Type",
                    "list[typing.Callable[, ]]"
                ],
                "mocker": []
            }
        },
        "test_headers_cookies_any": {
            "name": "test_headers_cookies_any",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "mocker": []
            }
        },
        "test_incorrect_return_http_code": {
            "name": "test_incorrect_return_http_code",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "return_code": [
                    "typing.Type",
                    "str",
                    "list[str]"
                ],
                "mocker": []
            }
        },
        "_make_operation": {
            "name": "_make_operation",
            "location": 406,
            "return": [],
            "arguments": {
                "responses_def": [
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[str,None,str,None]]",
                    "str"
                ]
            }
        }
    },
    "axion-master/tests/test_init_import.py": {
        "test_import_application_from_root_pkg": {
            "name": "test_import_application_from_root_pkg",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/tests/test_mime_type.py": {
        "test_spec_mime_type_is_json": {
            "name": "test_spec_mime_type_is_json",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_mime_type": [
                    "str",
                    "bool",
                    "typing.IO",
                    "typing.Sequence[typing.Sequence[str]]"
                ],
                "expected_json": [
                    "str",
                    "bool",
                    "typing.IO",
                    "typing.Sequence[typing.Sequence[str]]"
                ]
            }
        },
        "test_spec_mime_type_is_text": {
            "name": "test_spec_mime_type_is_text",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_mime_type": [
                    "str",
                    "bool",
                    "None",
                    "list[str]"
                ],
                "expected_text": [
                    "str",
                    "bool",
                    "None",
                    "list[str]"
                ]
            }
        },
        "test_is_discrete": {
            "name": "test_is_discrete",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "mime_type": [
                    "str",
                    "bool",
                    "typing.Type"
                ],
                "is_discrete": [
                    "str",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "test_mime_type_eq": {
            "name": "test_mime_type_eq",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/tests/test_oas_any.py": {
        "test_python_type": {
            "name": "test_python_type",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "python_type": [
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "axion-master/tests/test_oas_array.py": {
        "test_python_type": {
            "name": "test_python_type",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "unique_items": [
                    "str",
                    "typing.Type",
                    "int",
                    "typing.Mapping"
                ],
                "python_type": [
                    "str"
                ]
            }
        },
        "test_oas_type": {
            "name": "test_oas_type",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/tests/test_oas_boolean.py": {
        "test_wrong_value_type": {
            "name": "test_wrong_value_type",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "test_python_type": {
            "name": "test_python_type",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_oas_type": {
            "name": "test_oas_type",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/tests/test_oas_endpoint.py": {
        "test_sync_endpoint": {
            "name": "test_sync_endpoint",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_async_endpoint": {
            "name": "test_async_endpoint",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sync_endpoint.handler": {
            "name": "handler",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/tests/test_oas_file.py": {
        "test_oas_file": {
            "name": "test_oas_file",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "str_format": [
                    "str",
                    "typing.Type",
                    "None",
                    "int"
                ],
                "expected_cls": [
                    "str",
                    "typing.Type",
                    "None",
                    "int"
                ]
            }
        },
        "test_oas_file_python_type": {
            "name": "test_oas_file_python_type",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_oas_type": {
            "name": "test_oas_type",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/tests/test_oas_mixed_type.py": {
        "test_any_one_of": {
            "name": "test_any_one_of",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "mix_key": [
                    "str",
                    "dict[str, bytes]",
                    "None",
                    "dict[, ]"
                ],
                "in_mix": [
                    "str",
                    "dict[, ]"
                ],
                "expected_schemas": [
                    "list[tuple[typing.Union[bool,typing.Any]]]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "test_any_of_is_any": {
            "name": "test_any_of_is_any",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_any_of_discriminator": {
            "name": "test_one_any_of_discriminator",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "mix_key": [
                    "str"
                ],
                "weapon_discriminator": [
                    "str",
                    "dict[, ]"
                ],
                "mix_discriminator": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_all_of_more_than_one_type": {
            "name": "test_all_of_more_than_one_type",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_of_conflict_in_value": {
            "name": "test_all_of_conflict_in_value",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "oas_type": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]",
                    "bytes"
                ],
                "prop_key": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type"
                ],
                "prop_value": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "test_all_of_integer": {
            "name": "test_all_of_integer",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "oas_type": [
                    "str"
                ]
            }
        },
        "test_all_of_any": {
            "name": "test_all_of_any",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_of_boolean": {
            "name": "test_all_of_boolean",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_of_object": {
            "name": "test_all_of_object",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_of_object_with_ref": {
            "name": "test_all_of_object_with_ref",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_of_object_ref_properties": {
            "name": "test_all_of_object_ref_properties",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_of_object_additional_properties": {
            "name": "test_all_of_object_additional_properties",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "should_raise": [
                    "bool",
                    "str"
                ],
                "ap_1": [
                    "str"
                ],
                "ap_2": [
                    "str"
                ]
            }
        },
        "test_all_of_object_discriminator_prop_name": {
            "name": "test_all_of_object_discriminator_prop_name",
            "location": 912,
            "return": [
                "None"
            ],
            "arguments": {
                "p_1": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "p_2": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "should_raise": []
            }
        },
        "test_all_of_object_discriminator_mapping": {
            "name": "test_all_of_object_discriminator_mapping",
            "location": 1073,
            "return": [
                "None"
            ],
            "arguments": {
                "m_1": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "m_2": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "should_raise": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_all_of_array": {
            "name": "test_all_of_array",
            "location": 1173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_of_object_additional_properties._do": {
            "name": "_do",
            "location": 681,
            "return": [],
            "arguments": {}
        },
        "test_all_of_object_discriminator_prop_name._do": {
            "name": "_do",
            "location": 917,
            "return": [],
            "arguments": {}
        },
        "test_all_of_object_discriminator_mapping._do": {
            "name": "_do",
            "location": 1078,
            "return": [],
            "arguments": {}
        }
    },
    "axion-master/tests/test_oas_number.py": {
        "test_python_type": {
            "name": "test_python_type",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "oas_type": [
                    "str",
                    "bool"
                ],
                "number_cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_wrong_value_type": {
            "name": "test_wrong_value_type",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "oas_type": [
                    "str",
                    "None"
                ],
                "key": [
                    "str",
                    "None"
                ],
                "value": [
                    "str",
                    "None"
                ]
            }
        },
        "test_mismatch_example_default": {
            "name": "test_mismatch_example_default",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "example": [
                    "typing.Callable[, ]",
                    "int",
                    "set[typing.Hashable]",
                    "typing.Hashable"
                ],
                "default": [
                    "typing.Callable[, ]",
                    "int",
                    "set[typing.Hashable]",
                    "typing.Hashable"
                ]
            }
        },
        "test_oas_type": {
            "name": "test_oas_type",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "oas_type": [
                    "str"
                ]
            }
        }
    },
    "axion-master/tests/test_oas_object.py": {
        "test_free_form": {
            "name": "test_free_form",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "properties": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "additional_properties": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "expected_result": [
                    "bool",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "test_discriminator": {
            "name": "test_discriminator",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_discriminator_and__additional_properties": {
            "name": "test_discriminator_and__additional_properties",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "additional_properties": [
                    "str",
                    "int"
                ],
                "should_raise": [
                    "bool"
                ]
            }
        },
        "test_correct_python_type": {
            "name": "test_correct_python_type",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_oas_type": {
            "name": "test_oas_type",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/tests/test_oas_parameter.py": {
        "test_path_param_resolve": {
            "name": "test_path_param_resolve",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_path_param_path_required_false": {
            "name": "test_path_param_path_required_false",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_param_resolve": {
            "name": "test_header_param_resolve",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_param_invalid_name": {
            "name": "test_header_param_invalid_name",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "param_name": [
                    "str",
                    "list[]"
                ]
            }
        },
        "test_param_python_type": {
            "name": "test_param_python_type",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "oas_type": [
                    "str"
                ],
                "param_in": [
                    "str"
                ],
                "param_required": [
                    "str"
                ],
                "python_type": [
                    "typing.Type",
                    "str"
                ]
            }
        }
    },
    "axion-master/tests/test_oas_parameter_default_value.py": {
        "test_simple_schema": {
            "name": "test_simple_schema",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_complex_schema": {
            "name": "test_complex_schema",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/tests/test_oas_parameter_in.py": {
        "test_paramter_in": {
            "name": "test_paramter_in",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "param_in": [
                    "str",
                    "None"
                ],
                "param_loc": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "axion-master/tests/test_oas_string.py": {
        "test_oas_type": {
            "name": "test_oas_type",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_correct_python_type": {
            "name": "test_correct_python_type",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_wrong_type": {
            "name": "test_default_wrong_type",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "default": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "test_example_wrong_type": {
            "name": "test_example_wrong_type",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "example": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_invalid_min_max_length": {
            "name": "test_invalid_min_max_length",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "min_length": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "str"
                ],
                "max_length": [
                    "int",
                    "list[dict[str, typing.Any]]",
                    "str"
                ]
            }
        },
        "test_pattern": {
            "name": "test_pattern",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ],
                "should_match": [
                    "list[str]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "should_not_match": [
                    "list[str]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        }
    },
    "axion-master/tests/test_pipeline_validator.py": {
        "TestHttpCode.test_always_true_default_repr": {
            "name": "test_always_true_default_repr",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestHttpCode.test_true_if_code_matches": {
            "name": "test_true_if_code_matches",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestHttpCode.test_fail_if_no_match": {
            "name": "test_fail_if_no_match",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "axion-master/tests/test_plugin.py": {
        "test_missing_plugin_meta": {
            "name": "test_missing_plugin_meta",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "meta_dict": [
                    "dict[str, str]",
                    "list[tuple[typing.Union[bool,typing.Any]]]"
                ],
                "expected_err": [
                    "str",
                    "bool",
                    "typing.ClassVar"
                ]
            }
        },
        "test_missing_doc": {
            "name": "test_missing_doc",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subclass_ok": {
            "name": "test_subclass_ok",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_double_subclass": {
            "name": "test_no_double_subclass",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_plugin_duplication": {
            "name": "test_no_plugin_duplication",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bad_init_extra_arg": {
            "name": "test_bad_init_extra_arg",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_good_inits": {
            "name": "test_good_inits",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_missing_plugin_meta.exec_body": {
            "name": "exec_body",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "ns": []
            }
        },
        "test_good_inits.GoodInit_1.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "test_good_inits.GoodInit_3.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": []
            }
        },
        "test_good_inits.GoodInit_4.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_debug": [],
                "cfg": []
            }
        },
        "test_bad_init_extra_arg.BadInit.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_debug": [],
                "cfg": []
            }
        }
    },
    "axion-master/tests/test_plugin_aiohttp.py": {
        "test_add_api_single_server": {
            "name": "test_add_api_single_server",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "server_base_path": [
                    "str"
                ],
                "add_api_base_path": [
                    "str",
                    "None"
                ],
                "mocker": [],
                "tmp_path": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "test_add_api_multiple_servers": {
            "name": "test_add_api_multiple_servers",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": [
                    "int"
                ]
            }
        },
        "test_app_add_api_duplicated_base_path": {
            "name": "test_app_add_api_duplicated_base_path",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "server_url": [
                    "str"
                ],
                "mocker": []
            }
        },
        "test_app_add_api_overlapping_base_paths": {
            "name": "test_app_add_api_overlapping_base_paths",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "server_url": [
                    "str"
                ],
                "overlapping_server_url": [
                    "str",
                    "int"
                ],
                "mocker": []
            }
        },
        "test_app_add_with_custom_base_path": {
            "name": "test_app_add_with_custom_base_path",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_app_add_api_different_base_path": {
            "name": "test_app_add_api_different_base_path",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "tmp_path": []
            }
        },
        "test_apply_specification_no_subapp": {
            "name": "test_apply_specification_no_subapp",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "spec_path": [
                    "bool"
                ],
                "mocker": []
            }
        },
        "test_apply_specification_subapp": {
            "name": "test_apply_specification_subapp",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "spec_path": [
                    "str",
                    "list[int]"
                ],
                "mocker": []
            }
        },
        "test_app_get_base_path": {
            "name": "test_app_get_base_path",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict[str, str]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "variables": [
                    "str",
                    "dict[str, str]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "expected_base_path": [
                    "str",
                    "dict[str, str]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        }
    },
    "axion-master/tests/test_spec_loader.py": {
        "test_spec_is_just_invalid": {
            "name": "test_spec_is_just_invalid",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_spec_load_from_path": {
            "name": "test_spec_load_from_path",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "spec_path": [],
                "mocker": []
            }
        },
        "test_spec_load_from_unsupported_type": {
            "name": "test_spec_load_from_unsupported_type",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "axion-master/tests/test_spec_parser.py": {
        "test_spec_render_complex_schema": {
            "name": "test_spec_render_complex_schema",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/tests/test_spec_parser_ref.py": {
        "test_spec_load_follow_ref": {
            "name": "test_spec_load_follow_ref",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "reference": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "expected_def": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_spec_load_follow_ref_no_such_ref": {
            "name": "test_spec_load_follow_ref_no_such_ref",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/tests/test_utils_get_type_repr.py": {
        "test_get_type_repr": {
            "name": "test_get_type_repr",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "str"
                ],
                "expected_type_repr": [
                    "bool",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "str",
                    "None",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "test_response_repr": {
            "name": "test_response_repr",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/tests/test_utils_types.py": {
        "test_is_any_type": {
            "name": "test_is_any_type",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "str",
                    "typing.Hashable"
                ],
                "expected_result": [
                    "bool",
                    "dict[, ]",
                    "list[str]",
                    "typing.Type",
                    "dict[str, str]"
                ]
            }
        },
        "test_is_not_any_type": {
            "name": "test_is_not_any_type",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "str",
                    "typing.Type",
                    "typing.Hashable"
                ]
            }
        },
        "test_is_dict_like": {
            "name": "test_is_dict_like",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "str",
                    "bool",
                    "collections.abc.Awaitable[]"
                ],
                "expected_result": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "test_is_none_type": {
            "name": "test_is_none_type",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "str",
                    "dict[, ]"
                ],
                "expected_result": [
                    "bool"
                ]
            }
        },
        "test_literal_types": {
            "name": "test_literal_types",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "typing.Type",
                    "None"
                ],
                "expected_types": [
                    "typing.Sequence[typing.Any]",
                    "str",
                    "typing.Type",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_literal_types_not_literal_input": {
            "name": "test_literal_types_not_literal_input",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_literal_types_not_resolvable_type": {
            "name": "test_literal_types_not_resolvable_type",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "the_type": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "BaseException",
                    "Exception",
                    "typing.Type"
                ]
            }
        }
    },
    "axion-master/tests/__init__.py": {},
    "axion-master/tests/app/conftest.py": {
        "_make_app": {
            "name": "_make_app",
            "location": 29,
            "return": [],
            "arguments": {
                "spec_path": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "test_module": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ]
            }
        },
        "_make_app.wrap": {
            "name": "wrap",
            "location": 33,
            "return": [],
            "arguments": {
                "loop": []
            }
        }
    },
    "axion-master/tests/app/__init__.py": {},
    "axion-master/typesafety/conftest.py": {
        "axion_plugins": {
            "name": "axion_plugins",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "axion-master/typesafety/test_hook.py": {
        "hook": {
            "name": "hook",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "test_item": [
                    "str",
                    "None",
                    "dict[str, object]"
                ]
            }
        }
    }
}
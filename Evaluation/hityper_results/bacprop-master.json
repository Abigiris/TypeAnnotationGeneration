{
    "bacprop-master/conftest.py": {},
    "bacprop-master/bacprop/cli.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bacprop-master/bacprop/defs.py": {},
    "bacprop-master/bacprop/mqtt.py": {
        "SensorStream.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bacprop-master/bacprop/service.py": {
        "BacPropagator.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BacPropagator._handle_sensor_data": {
            "name": "_handle_sensor_data",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "BacPropagator._start_bacnet_thread": {
            "name": "_start_bacnet_thread",
            "location": 103,
            "return": [
                "Thread"
            ],
            "arguments": {
                "self": []
            }
        },
        "BacPropagator.start": {
            "name": "start",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bacprop-master/bacprop/__init__.py": {},
    "bacprop-master/bacprop/__main__.py": {},
    "bacprop-master/bacprop/bacnet/network.py": {
        "_VLANRouter.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_address": [
                    "bool",
                    "float"
                ],
                "local_network": [
                    "bool"
                ]
            }
        },
        "_VLANRouter.bind": {
            "name": "bind",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "None"
                ],
                "address": [
                    "None"
                ]
            }
        },
        "_VLANRouter.start": {
            "name": "start",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualSensorNetwork.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_address": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "VirtualSensorNetwork.get_sensor": {
            "name": "get_sensor",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "_id": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "VirtualSensorNetwork.get_sensors": {
            "name": "get_sensors",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VirtualSensorNetwork.create_sensor": {
            "name": "create_sensor",
            "location": 83,
            "return": [
                "Sensor"
            ],
            "arguments": {
                "self": [],
                "_id": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ]
            }
        },
        "VirtualSensorNetwork.run": {
            "name": "run",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualSensorNetwork.stop": {
            "name": "stop",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bacprop-master/bacprop/bacnet/sensor.py": {
        "_SensorValueObject.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.IO"
                ],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "_SensorValueObject.set_value": {
            "name": "set_value",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "_SensorValueObject.set_fault": {
            "name": "set_fault",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fault": []
            }
        },
        "_VLANApplication.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vlan_device": [
                    "bool",
                    "float"
                ],
                "vlan_address": [
                    "int",
                    "None",
                    "dict[str, typing.Callable[, ]]",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "_VLANApplication.request": {
            "name": "request",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apdu": [
                    "Exception",
                    "None",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "_VLANApplication.indication": {
            "name": "indication",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apdu": [
                    "str",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ]
            }
        },
        "_VLANApplication.response": {
            "name": "response",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apdu": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "_VLANApplication.confirmation": {
            "name": "confirmation",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "apdu": [
                    "str",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ]
            }
        },
        "_VLANApplication.get_node": {
            "name": "get_node",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sensor.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensor_id": [
                    "int",
                    "str"
                ],
                "vlan_address": [
                    "int",
                    "str"
                ]
            }
        },
        "Sensor._register_objects": {
            "name": "_register_objects",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "list[]",
                    "list[int]",
                    "list[typing.Union[str,bytes,str,bytes,str,bytes,str,bytes,str,bytes,str,bytes,str,bytes,str]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "Sensor._clear_objects": {
            "name": "_clear_objects",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sensor.set_values": {
            "name": "set_values",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_values": []
            }
        },
        "Sensor.mark_fault": {
            "name": "mark_fault",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sensor.mark_ok": {
            "name": "mark_ok",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sensor.has_fault": {
            "name": "has_fault",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sensor.get_update_time": {
            "name": "get_update_time",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bacprop-master/tests/test_cli.py": {
        "TestCli.test_service_init": {
            "name": "test_service_init",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestCli.test_service_start": {
            "name": "test_service_start",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "bacprop-master/tests/test_mqtt.py": {
        "TestSensorStream.test_init": {
            "name": "test_init",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bacprop-master/tests/test_service.py": {
        "async_return": {
            "name": "async_return",
            "location": 20,
            "return": [],
            "arguments": {
                "result": [
                    "dict[, ]",
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "typing.Type"
                ]
            }
        },
        "bacprop_service": {
            "name": "bacprop_service",
            "location": 27,
            "return": [
                "BacPropagator"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "TestBacPropagator.test_init": {
            "name": "test_init",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestBacPropagator.test_start": {
            "name": "test_start",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "bacprop_service": []
            }
        },
        "TestBacPropagator.test_main_interrupt": {
            "name": "test_main_interrupt",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "bool",
                    "str"
                ],
                "bacprop_service": []
            }
        },
        "TestBacPropagator.test_main_error": {
            "name": "test_main_error",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "str",
                    "int"
                ],
                "bacprop_service": []
            }
        },
        "TestBacPropagator.test_start_bacnet": {
            "name": "test_start_bacnet",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "bacprop_service": []
            }
        },
        "TestBacPropagator.test_handle_data_new_sensor": {
            "name": "test_handle_data_new_sensor",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "bacprop_service": []
            }
        },
        "TestBacPropagator.test_handle_bad_data": {
            "name": "test_handle_bad_data",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "bacprop_service": []
            }
        },
        "TestBacPropagator.test_handle_bad_sensor_id": {
            "name": "test_handle_bad_sensor_id",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "bacprop_service": []
            }
        },
        "TestBacPropagator.test_handle_negative_sensor_id": {
            "name": "test_handle_negative_sensor_id",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "bacprop_service": []
            }
        },
        "TestBacPropagator.test_handle_new_data": {
            "name": "test_handle_new_data",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "bacprop_service": []
            }
        },
        "TestBacPropagator.test_handle_new_data_faulty_sensor": {
            "name": "test_handle_new_data_faulty_sensor",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "bacprop_service": []
            }
        },
        "TestBacPropagator.test_handle_weird_data": {
            "name": "test_handle_weird_data",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "bacprop_service": []
            }
        },
        "TestBacPropagator.test_main_interrupt.throw": {
            "name": "throw",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestBacPropagator.test_main_error.throw": {
            "name": "throw",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bacprop-master/tests/test__main__.py": {
        "test_calls_cli": {
            "name": "test_calls_cli",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "bacprop-master/tests/bacnet/test_network.py": {
        "TestVirtualSensorNetwork.test_init_address": {
            "name": "test_init_address",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestVirtualSensorNetwork.test_init_router": {
            "name": "test_init_router",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestVirtualSensorNetwork.test_create_sensor": {
            "name": "test_create_sensor",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestVirtualSensorNetwork.test_create_sensor_exists": {
            "name": "test_create_sensor_exists",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestVirtualSensorNetwork.test_get_sensor": {
            "name": "test_get_sensor",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestVirtualSensorNetwork.test_get_sensors": {
            "name": "test_get_sensors",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestVirtualSensorNetwork.test_run": {
            "name": "test_run",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestVirtualSensorNetwork.test_stop": {
            "name": "test_stop",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "bacprop-master/tests/bacnet/test_sensor.py": {
        "TestSensor.test_init_id": {
            "name": "test_init_id",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSensor.test_init_address": {
            "name": "test_init_address",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSensor.test_set_values": {
            "name": "test_set_values",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSensor.test_set_values_object_order": {
            "name": "test_set_values_object_order",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSensor.test_mark_fault": {
            "name": "test_mark_fault",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSensor.test_mark_ok": {
            "name": "test_mark_ok",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSensor.test_change_props": {
            "name": "test_change_props",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSensor.test_request_hook": {
            "name": "test_request_hook",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSensor.test_response_hook": {
            "name": "test_response_hook",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSensor.test_indication_hook": {
            "name": "test_indication_hook",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSensor.test_confirmation_hook": {
            "name": "test_confirmation_hook",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    }
}
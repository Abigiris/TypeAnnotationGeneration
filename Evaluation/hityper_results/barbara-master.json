{
    "barbara-master/barbara/cli.py": {
        "barbara_develop": {
            "name": "barbara_develop",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "skip_existing": [
                    "bool",
                    "str",
                    "typing.Any",
                    "None"
                ],
                "output": [],
                "template": [
                    "typing.Iterable[bytes]",
                    "bool",
                    "None"
                ],
                "zero_input": [
                    "bool",
                    "list[str]"
                ]
            }
        }
    },
    "barbara-master/barbara/readers.py": {
        "get_reader": {
            "name": "get_reader",
            "location": 22,
            "return": [],
            "arguments": {
                "file_or_name": []
            }
        },
        "BaseTemplateReader.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "EnvReader.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "EnvReader.read": {
            "name": "read",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YAMLTemplateReader.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "YAMLTemplateReader._read": {
            "name": "_read",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YAMLTemplateReader.read": {
            "name": "read",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "barbara-master/barbara/utils.py": {
        "confirm_target_file": {
            "name": "confirm_target_file",
            "location": 13,
            "return": [],
            "arguments": {
                "target_file": []
            }
        },
        "create_target_file": {
            "name": "create_target_file",
            "location": 30,
            "return": [],
            "arguments": {
                "target_file": []
            }
        },
        "prompt_user_for_value": {
            "name": "prompt_user_for_value",
            "location": 36,
            "return": [],
            "arguments": {
                "env_variable": [
                    "typing.MutableMapping",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "merge_keys": {
            "name": "merge_keys",
            "location": 41,
            "return": [
                "list[]"
            ],
            "arguments": {
                "existing": [
                    "dict[str, typing.Any]"
                ],
                "template": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "skip_existing": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "merge_with_presets": {
            "name": "merge_with_presets",
            "location": 57,
            "return": [],
            "arguments": {
                "existing": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "template": [
                    "dict[, ]",
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "skip_existing": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "merge_with_prompts": {
            "name": "merge_with_prompts",
            "location": 80,
            "return": [],
            "arguments": {
                "existing": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "template": [
                    "dict[, ]",
                    "int",
                    "str",
                    "dict[str, typing.Any]",
                    "list[typing.Any]",
                    "None"
                ],
                "skip_existing": [
                    "str",
                    "typing.Mapping"
                ]
            }
        }
    },
    "barbara-master/barbara/variables.py": {
        "AutoVariable.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "AutoVariable.MATCHER": {
            "name": "MATCHER",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoVariable.validate": {
            "name": "validate",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoVariable.generate": {
            "name": "generate",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitCommitVariable.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "length": []
            }
        },
        "GitCommitVariable.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "dict[, ]",
                    "int",
                    "typing.Callable[..., collections.abc.Awaitable[typing.Any]]",
                    "None"
                ]
            }
        },
        "GitCommitVariable.__repr__": {
            "name": "__repr__",
            "location": 47,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCommitVariable.validate": {
            "name": "validate",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitCommitVariable.generate": {
            "name": "generate",
            "location": 54,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "barbara-master/barbara/writers.py": {
        "Writer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_file": [
                    "str"
                ],
                "environment": [
                    "str",
                    "typing.TextIO",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "Writer.write": {
            "name": "write",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "barbara-master/barbara/__init__.py": {},
    "barbara-master/tests/test_readers.py": {
        "TestEnvReader.assert_env_value": {
            "name": "assert_env_value",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "typing.Sequence[str]"
                ],
                "key": [
                    "str",
                    "typing.Sequence[str]"
                ],
                "value": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "TestEnvReader.test_read_single_line": {
            "name": "test_read_single_line",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestEnvReader.test_read_multi_line": {
            "name": "test_read_multi_line",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestEnvReader.test_read_single_line_with_comment": {
            "name": "test_read_single_line_with_comment",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestEnvReader.test_read_multi_line_with_comment": {
            "name": "test_read_multi_line_with_comment",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestYAMLConfigReader.test_read_single_line": {
            "name": "test_read_single_line",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestYAMLConfigReader.test_read_multi_line": {
            "name": "test_read_multi_line",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestYAMLConfigReader.test_read_single_line_with_comment": {
            "name": "test_read_single_line_with_comment",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestYAMLConfigReader.test_read_multi_line_with_comment": {
            "name": "test_read_multi_line_with_comment",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestYAMLConfigReader.test_find_git_commit": {
            "name": "test_find_git_commit",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestYAMLConfigReader.test_find_git_commit__malformed_variable": {
            "name": "test_find_git_commit__malformed_variable",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        }
    },
    "barbara-master/tests/test_utils.py": {
        "create_stub_template": {
            "name": "create_stub_template",
            "location": 9,
            "return": [
                "dict[typing.Text, EnvVariable]"
            ],
            "arguments": {}
        },
        "create_stub_template_with_auto_variables": {
            "name": "create_stub_template_with_auto_variables",
            "location": 19,
            "return": [
                "dict[typing.Text, typing.Union[EnvVariable,GitCommitVariable]]"
            ],
            "arguments": {}
        },
        "patch_subprocess_output": {
            "name": "patch_subprocess_output",
            "location": 30,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_confirm_target_default_create_confirmed": {
            "name": "test_confirm_target_default_create_confirmed",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_create_target": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]"
                ],
                "patched_click": [
                    "bool",
                    "str"
                ],
                "tmp_path": []
            }
        },
        "test_confirm_target_default_create_rejected": {
            "name": "test_confirm_target_default_create_rejected",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_create_target": [],
                "patched_click": [
                    "bool",
                    "str",
                    "None"
                ],
                "tmp_path": [
                    "str"
                ]
            }
        },
        "test_confirm_target_provided_confirmed": {
            "name": "test_confirm_target_provided_confirmed",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_click": [
                    "str"
                ],
                "tmp_path": []
            }
        },
        "test_confirm_target_provided_rejected": {
            "name": "test_confirm_target_provided_rejected",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_create_target": [],
                "patched_click": [
                    "str",
                    "bool",
                    "None"
                ],
                "tmp_path": []
            }
        },
        "TestEnvVariableMerges.test_merge_with_presets_matching_with_skip": {
            "name": "test_merge_with_presets_matching_with_skip",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestEnvVariableMerges.test_merge_with_presets_matching_without_skip": {
            "name": "test_merge_with_presets_matching_without_skip",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "dict[, ]",
                    "typing.Callable[None,None, bool]"
                ]
            }
        },
        "TestEnvVariableMerges.test_merge_with_prompts_matching_with_skip": {
            "name": "test_merge_with_prompts_matching_with_skip",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_get": [],
                "template": []
            }
        },
        "TestEnvVariableMerges.test_merge_with_prompts_matching_without_skip": {
            "name": "test_merge_with_prompts_matching_without_skip",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_get": [
                    "str",
                    "list[str]",
                    "typing.Type"
                ],
                "template": [
                    "int",
                    "str"
                ]
            }
        },
        "TestEnvVariableMerges.test_prompt_user_for_value": {
            "name": "test_prompt_user_for_value",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_click": [
                    "str"
                ]
            }
        },
        "TestAutoVariableMerges.test_merge_with_presets_matching_with_skip": {
            "name": "test_merge_with_presets_matching_with_skip",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auto_var_template": [
                    "str"
                ],
                "patched_subprocess_output": [
                    "bool",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "TestAutoVariableMerges.test_merge_with_presets_matching_without_skip": {
            "name": "test_merge_with_presets_matching_without_skip",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auto_var_template": [
                    "str"
                ],
                "patched_subprocess_output": [
                    "bool",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "TestAutoVariableMerges.test_merge_with_presets_matching_without_skip_and_auto_vars": {
            "name": "test_merge_with_presets_matching_without_skip_and_auto_vars",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auto_var_template": [
                    "str"
                ],
                "patched_subprocess_output": [
                    "bool",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "TestAutoVariableMerges.test_merge_with_prompts_matching_with_skip": {
            "name": "test_merge_with_prompts_matching_with_skip",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_get": [],
                "auto_var_template": [
                    "str"
                ],
                "patched_subprocess_output": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "TestAutoVariableMerges.test_merge_with_prompts_matching_without_skip": {
            "name": "test_merge_with_prompts_matching_without_skip",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patched_get": [
                    "bool"
                ],
                "auto_var_template": [
                    "str"
                ],
                "patched_subprocess_output": [
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "barbara-master/tests/test_writers.py": {
        "test_writer_writes": {
            "name": "test_writer_writes",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_shutil": [
                    "str",
                    "typing.Mapping"
                ],
                "patched_os": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_writer_backup": {
            "name": "test_writer_backup",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "patched_os": [],
                "patched_shutil": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    }
}
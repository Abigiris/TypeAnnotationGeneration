{
    "bcompiler-master/setup.py": {
        "read": {
            "name": "read",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "bcompiler-master/bcompiler/compile.py": {
        "get_current_quarter": {
            "name": "get_current_quarter",
            "location": 30,
            "return": [],
            "arguments": {
                "source_file": [
                    "str"
                ]
            }
        },
        "parse_source_cells": {
            "name": "parse_source_cells",
            "location": 52,
            "return": [
                "list[typing.Union[dict[, ],str,list[],typing.Pattern,float,set[str]]]"
            ],
            "arguments": {
                "source_file": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "bool"
                ],
                "datamap_source_file": [
                    "str",
                    "bool",
                    "typing.TextIO",
                    "typing.BinaryIO"
                ]
            }
        },
        "_index_projects": {
            "name": "_index_projects",
            "location": 119,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "parsed_master": [
                    "str"
                ]
            }
        },
        "parse_comparison_master": {
            "name": "parse_comparison_master",
            "location": 130,
            "return": [
                "FileComparitor"
            ],
            "arguments": {
                "compare_master": [
                    "str",
                    "int",
                    "BaseException",
                    "None"
                ]
            }
        },
        "_remove_datetimes": {
            "name": "_remove_datetimes",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "out_map": [
                    "str"
                ]
            }
        },
        "write_excel": {
            "name": "write_excel",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "source_file": [
                    "str",
                    "int"
                ],
                "count": [
                    "int",
                    "list[int]",
                    "list[P]"
                ],
                "workbook": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "compare_master": [
                    "None",
                    "list[str]",
                    "str",
                    "typing.BinaryIO"
                ],
                "comparitor": [
                    "None",
                    "bool"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "compare_master": [
                    "None",
                    "str",
                    "int"
                ],
                "comparitor": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/main.py": {
        "analyser_args": {
            "name": "analyser_args",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "func": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "rcf_args": {
            "name": "rcf_args",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "func": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "tuple[]",
                    "bytes"
                ]
            }
        },
        "keyword_args": {
            "name": "keyword_args",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "func": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "get_parser": {
            "name": "get_parser",
            "location": 169,
            "return": [],
            "arguments": {}
        },
        "clean_datamap": {
            "name": "clean_datamap",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "dm_file": [
                    "str"
                ]
            }
        },
        "get_list_projects": {
            "name": "get_list_projects",
            "location": 330,
            "return": [
                "None",
                "list[]"
            ],
            "arguments": {
                "source_master_file": [
                    "str",
                    "int",
                    "typing.Iterable[]",
                    "float",
                    "None"
                ]
            }
        },
        "get_datamap": {
            "name": "get_datamap",
            "location": 346,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "imprint_current_quarter": {
            "name": "imprint_current_quarter",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "sheet": [
                    "list[int]"
                ]
            }
        },
        "_initial_clean": {
            "name": "_initial_clean",
            "location": 396,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "dm_tabs_list": {
            "name": "dm_tabs_list",
            "location": 409,
            "return": [],
            "arguments": {}
        },
        "populate_blank_bicc_form": {
            "name": "populate_blank_bicc_form",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "master_obj": [
                    "int",
                    "str"
                ],
                "proj_num": []
            }
        },
        "pop_all": {
            "name": "pop_all",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_dropdown_data": {
            "name": "get_dropdown_data",
            "location": 531,
            "return": [
                "tuple[]",
                "list[list[]]"
            ],
            "arguments": {
                "header": [
                    "None",
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_dropdown_headers": {
            "name": "get_dropdown_headers",
            "location": 552,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "create_validation": {
            "name": "create_validation",
            "location": 560,
            "return": [
                "DataValidation",
                "None"
            ],
            "arguments": {
                "header": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bcompiler-master/bcompiler/utils.py": {
        "directory_has_returns_check": {
            "name": "directory_has_returns_check",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "dir": [
                    "str",
                    "int"
                ]
            }
        },
        "row_check": {
            "name": "row_check",
            "location": 54,
            "return": [
                "list[]"
            ],
            "arguments": {
                "excel_file": []
            }
        },
        "row_data_formatter": {
            "name": "row_data_formatter",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "csv_output": [
                    "bool"
                ],
                "quiet": [
                    "bool"
                ]
            }
        },
        "quick_typechecker": {
            "name": "quick_typechecker",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "simple_round": {
            "name": "simple_round",
            "location": 170,
            "return": [
                "float"
            ],
            "arguments": {
                "fl": [
                    "int"
                ],
                "prec": [
                    "int"
                ]
            }
        },
        "bc_is_close": {
            "name": "bc_is_close",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "cell_bg_colour": {
            "name": "cell_bg_colour",
            "location": 183,
            "return": [
                "PatternFill"
            ],
            "arguments": {
                "rgb": [
                    "list[]"
                ]
            }
        },
        "get_relevant_names": {
            "name": "get_relevant_names",
            "location": 191,
            "return": [
                "tuple[typing.Union[str,ImportError,int,None,tuple[typing.Union[typing.Literal,typing.Literal]],typing.Type]]"
            ],
            "arguments": {
                "project_name": [
                    "bool"
                ],
                "project_data": [
                    "str"
                ]
            }
        },
        "project_data_from_master": {
            "name": "project_data_from_master",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "master_file": [
                    "str",
                    "None"
                ],
                "opened_wb": [
                    "bool"
                ]
            }
        },
        "project_data_line": {
            "name": "project_data_line",
            "location": 274,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "open_openpyxl_template": {
            "name": "open_openpyxl_template",
            "location": 288,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "template_file": [
                    "str",
                    "None",
                    "typing.IO",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "working_directory": {
            "name": "working_directory",
            "location": 297,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "dir_type": [
                    "None",
                    "str"
                ]
            }
        },
        "index_returns_directory": {
            "name": "index_returns_directory",
            "location": 333,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "splat_rows": {
            "name": "splat_rows",
            "location": 354,
            "return": [
                "typing.Generator[list[tuple[]]]"
            ],
            "arguments": {
                "row": [
                    "dict[str, typing.Any]",
                    "list[list[]]",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "parse_csv_to_file": {
            "name": "parse_csv_to_file",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "source_file": [
                    "str"
                ]
            }
        },
        "create_master_dict_transposed": {
            "name": "create_master_dict_transposed",
            "location": 385,
            "return": [
                "list[]"
            ],
            "arguments": {
                "source_master_csv": [
                    "str"
                ]
            }
        },
        "row_accessor": {
            "name": "row_accessor",
            "location": 492,
            "return": [
                "typing.Generator[tuple[str]]"
            ],
            "arguments": {
                "row": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "gen_sheet_data": {
            "name": "gen_sheet_data",
            "location": 503,
            "return": [
                "dict[, list[list[]]]"
            ],
            "arguments": {
                "workbook": [
                    "str",
                    "int",
                    "bytes",
                    "typing.Generator[]"
                ]
            }
        },
        "parse_data_row": {
            "name": "parse_data_row",
            "location": 520,
            "return": [
                "typing.Generator[tuple[typing.Union[typing.Text,typing.Text]]]"
            ],
            "arguments": {
                "row": [
                    "str",
                    "list[list[str]]"
                ]
            }
        },
        "get_sheets_in_workbook": {
            "name": "get_sheets_in_workbook",
            "location": 530,
            "return": [],
            "arguments": {
                "real_template": [
                    "int",
                    "str"
                ]
            }
        },
        "generate_test_template_from_real": {
            "name": "generate_test_template_from_real",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "real_template": [
                    "typing.Mapping"
                ],
                "save_path": [
                    "str"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/__init__.py": {},
    "bcompiler-master/bcompiler/analysers/ad_hoc.py": {
        "process_master": {
            "name": "process_master",
            "location": 14,
            "return": [
                "tuple[list[list[typing.Union[tuple[typing.Union[str,typing.Any]],tuple[typing.Union[str,int]]]]]]"
            ],
            "arguments": {
                "source_wb": [
                    "str",
                    "float",
                    "int",
                    "typing.Iterable[]"
                ],
                "project_number": [
                    "str",
                    "int",
                    "None"
                ],
                "search_term": [
                    "bytes",
                    "dict[, ]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "typing.MutableMapping",
                    "tuple[bool]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "output_path": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "dict[, ]"
                ],
                "user_provided_master_path": [
                    "None",
                    "str"
                ],
                "search_term": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/analysers/annex.py": {
        "abbreviate_project_stage": {
            "name": "abbreviate_project_stage",
            "location": 37,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "stage": []
            }
        },
        "process_master": {
            "name": "process_master",
            "location": 48,
            "return": [],
            "arguments": {
                "source_wb": [],
                "project_number": [],
                "dca_map": [],
                "diff": []
            }
        },
        "_dca_map": {
            "name": "_dca_map",
            "location": 184,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "master_file": []
            }
        },
        "run": {
            "name": "run",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "compare_master": [
                    "None"
                ],
                "output_path": [],
                "user_provided_master_path": [
                    "None"
                ]
            }
        },
        "process_master._pattern": {
            "name": "_pattern",
            "location": 173,
            "return": [],
            "arguments": {
                "str_colour": []
            }
        }
    },
    "bcompiler-master/bcompiler/analysers/financial.py": {
        "_calc_quarter_totals": {
            "name": "_calc_quarter_totals",
            "location": 16,
            "return": [],
            "arguments": {
                "global_data": [
                    "dict[str, set[str]]",
                    "dict[, ]",
                    "dict[str, \"Outcome\"]"
                ]
            }
        },
        "_replace_underscore": {
            "name": "_replace_underscore",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_color_gen": {
            "name": "_color_gen",
            "location": 53,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "_create_chart": {
            "name": "_create_chart",
            "location": 68,
            "return": [],
            "arguments": {
                "worksheet": []
            }
        },
        "run": {
            "name": "run",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "output_path": [
                    "str"
                ]
            }
        },
        "run._update_total": {
            "name": "_update_total",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "keys": [],
                "inner_target_keys": [],
                "data": [],
                "quarter": [
                    "None"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/analysers/keyword.py": {
        "process_master": {
            "name": "process_master",
            "location": 15,
            "return": [
                "tuple[list[list[typing.Union[tuple[typing.Union[str,typing.Any]],tuple[typing.Union[str,int]]]]]]"
            ],
            "arguments": {
                "source_wb": [
                    "str",
                    "float",
                    "int",
                    "typing.Iterable[]"
                ],
                "project_number": [
                    "str",
                    "int",
                    "None"
                ],
                "search_term": [
                    "bytes",
                    "dict[, ]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "typing.MutableMapping",
                    "tuple[bool]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "output_path": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "dict[, ]"
                ],
                "user_provided_master_path": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "dict[, ]"
                ],
                "search_term": [
                    "None",
                    "str"
                ],
                "xlsx": [
                    "str"
                ]
            }
        },
        "run.val_gen": {
            "name": "val_gen",
            "location": 59,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "row": [],
                "p_name": [],
                "t": [],
                "ws": []
            }
        }
    },
    "bcompiler-master/bcompiler/analysers/rcf.py": {
        "_process_masters": {
            "name": "_process_masters",
            "location": 46,
            "return": [
                "tuple[typing.Union[Quarter,dict[, ]]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "create_rcf_output": {
            "name": "create_rcf_output",
            "location": 59,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_main_keys": {
            "name": "_main_keys",
            "location": 63,
            "return": [
                "list[]"
            ],
            "arguments": {
                "dictionary": [
                    "str",
                    "tuple[]",
                    "list[]"
                ]
            }
        },
        "_headers": {
            "name": "_headers",
            "location": 67,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "p_name": [
                    "int"
                ],
                "dictionary": [
                    "str"
                ]
            }
        },
        "_vals": {
            "name": "_vals",
            "location": 71,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "p_name": [],
                "dictionary": [
                    "str"
                ]
            }
        },
        "_inject": {
            "name": "_inject",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "lst": [
                    "list[]"
                ],
                "op": [
                    "int"
                ],
                "place": [
                    "int"
                ],
                "idxa": [
                    "int"
                ],
                "idxb": [
                    "int"
                ]
            }
        },
        "_insert_gaps": {
            "name": "_insert_gaps",
            "location": 103,
            "return": [
                "list[None]",
                "list[]"
            ],
            "arguments": {
                "lst": [
                    "list[]"
                ],
                "indices": []
            }
        },
        "_replace_underscore": {
            "name": "_replace_underscore",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "_get_master_files_and_order_them": {
            "name": "_get_master_files_and_order_them",
            "location": 113,
            "return": [
                "list[]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_process_data_cols": {
            "name": "_process_data_cols",
            "location": 128,
            "return": [
                "list[]",
                "int",
                "float"
            ],
            "arguments": {
                "worksheet": [
                    "list[]",
                    "int",
                    "float"
                ],
                "data_row": [
                    "list[]"
                ],
                "masters": [],
                "headers": [
                    "list[]",
                    "bool",
                    "str",
                    "None"
                ],
                "start_row": [
                    "int",
                    "list[]",
                    "float"
                ]
            }
        },
        "_generate_chart": {
            "name": "_generate_chart",
            "location": 161,
            "return": [
                "ScatterChart"
            ],
            "arguments": {
                "worksheet": [
                    "int",
                    "list[int]"
                ],
                "top_row": [
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "leftmost_col": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "output_path": [
                    "None",
                    "bytes",
                    "bool"
                ],
                "user_provided_master_path": [
                    "None",
                    "str",
                    "list[tuple[typing.Union[int,str]]]"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/analysers/swimlane.py": {
        "date_range_milestones": {
            "name": "date_range_milestones",
            "location": 49,
            "return": [
                "int",
                "str",
                "list[]",
                "dict[int, str]",
                "list[int]"
            ],
            "arguments": {
                "source_sheet": [
                    "int",
                    "str",
                    "None",
                    "dict[str, dict[, ]]"
                ],
                "output_sheet": [
                    "int",
                    "str",
                    "list[]",
                    "dict[int, str]",
                    "list[int]"
                ],
                "cols": [
                    "tuple[]",
                    "str",
                    "None",
                    "int",
                    "tuple[typing.Union[float,float]]"
                ],
                "start_row": [
                    "list[str]",
                    "tuple[typing.Union[int,int]]",
                    "list[dict[str, typing.Any]]"
                ],
                "column": [
                    "int",
                    "list[str]"
                ],
                "date_ends": [
                    "str"
                ]
            }
        },
        "date_diff_column": {
            "name": "date_diff_column",
            "location": 75,
            "return": [
                "int",
                "dict[, ]",
                "dict[str, int]",
                "list[str]",
                "list[tuple[typing.Union[int,int]]]",
                "str",
                "tuple[]"
            ],
            "arguments": {
                "source_sheet": [
                    "str",
                    "None",
                    "list[D]",
                    "list[str]",
                    "int"
                ],
                "output_sheet": [
                    "int",
                    "dict[, ]",
                    "dict[str, int]",
                    "list[str]",
                    "list[tuple[typing.Union[int,int]]]",
                    "str",
                    "tuple[]"
                ],
                "cols": [
                    "tuple[]",
                    "bool",
                    "float",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "dict[str, tuple[typing.Union[str,str,typing.Any]]]",
                    "list[dict[str, typing.Any]]",
                    "str"
                ],
                "start_row": [
                    "list[str]",
                    "bool",
                    "list[int]"
                ],
                "column": [
                    "int",
                    "str",
                    "tuple[]",
                    "list[str]"
                ],
                "interested_range": [
                    "int"
                ]
            }
        },
        "splat_date_range": {
            "name": "splat_date_range",
            "location": 94,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "dt": [
                    "str"
                ]
            }
        },
        "gather_data": {
            "name": "gather_data",
            "location": 105,
            "return": [
                "tuple[typing.Union[int,str,None,float]]"
            ],
            "arguments": {
                "start_row": [
                    "int",
                    "list[]",
                    "list[str]",
                    "list[bool]"
                ],
                "project_number": [
                    "int",
                    "list[]",
                    "tuple[str]",
                    "tuple[int]"
                ],
                "newwb": [
                    "int",
                    "str",
                    "None",
                    "float"
                ],
                "block_start_row": [
                    "int"
                ],
                "interested_range": [
                    "int"
                ],
                "master_path": [
                    "None",
                    "list[str]",
                    "str",
                    "list[]",
                    "bool"
                ],
                "date_range": [
                    "list[str]"
                ]
            }
        },
        "_segment_series": {
            "name": "_segment_series",
            "location": 171,
            "return": [
                "typing.Generator[typing.Union[list[],list[tuple[str]]]]"
            ],
            "arguments": {}
        },
        "_series_producer": {
            "name": "_series_producer",
            "location": 178,
            "return": [
                "tuple[typing.Union[Series,int]]"
            ],
            "arguments": {
                "sheet": [
                    "str",
                    "int",
                    "list[list[int]]"
                ],
                "start_row": [
                    "int",
                    "list[list[int]]"
                ],
                "step": [
                    "int",
                    "list[list[int]]"
                ]
            }
        },
        "_row_calc": {
            "name": "_row_calc",
            "location": 197,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "project_number": [
                    "int"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "output_path": [
                    "str"
                ],
                "user_provided_master_path": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "date_range": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/analysers/swimlane_assurance.py": {
        "date_range_milestones": {
            "name": "date_range_milestones",
            "location": 49,
            "return": [
                "int",
                "str",
                "list[]",
                "dict[int, str]",
                "list[int]"
            ],
            "arguments": {
                "source_sheet": [
                    "int",
                    "str",
                    "None",
                    "dict[str, dict[, ]]"
                ],
                "output_sheet": [
                    "int",
                    "str",
                    "list[]",
                    "dict[int, str]",
                    "list[int]"
                ],
                "cols": [
                    "tuple[]",
                    "str",
                    "None",
                    "int",
                    "tuple[typing.Union[float,float]]"
                ],
                "start_row": [
                    "list[str]",
                    "tuple[typing.Union[int,int]]",
                    "list[dict[str, typing.Any]]"
                ],
                "column": [
                    "int",
                    "list[str]"
                ],
                "date_ends": [
                    "str"
                ]
            }
        },
        "date_diff_column": {
            "name": "date_diff_column",
            "location": 76,
            "return": [
                "int",
                "dict[, ]",
                "dict[str, int]",
                "list[str]",
                "list[tuple[typing.Union[int,int]]]",
                "str",
                "tuple[]"
            ],
            "arguments": {
                "source_sheet": [
                    "str",
                    "None",
                    "list[D]",
                    "list[str]",
                    "int"
                ],
                "output_sheet": [
                    "int",
                    "dict[, ]",
                    "dict[str, int]",
                    "list[str]",
                    "list[tuple[typing.Union[int,int]]]",
                    "str",
                    "tuple[]"
                ],
                "cols": [
                    "tuple[]",
                    "bool",
                    "float",
                    "dict[str, tuple[typing.Union[str,int,int]]]",
                    "dict[str, tuple[typing.Union[str,str,typing.Any]]]",
                    "list[dict[str, typing.Any]]",
                    "str"
                ],
                "start_row": [
                    "list[str]",
                    "bool",
                    "list[int]"
                ],
                "column": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "interested_range": [
                    "int"
                ]
            }
        },
        "splat_date_range": {
            "name": "splat_date_range",
            "location": 97,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "dt": [
                    "str"
                ]
            }
        },
        "gather_data": {
            "name": "gather_data",
            "location": 108,
            "return": [
                "tuple[typing.Union[int,float,str]]"
            ],
            "arguments": {
                "start_row": [
                    "int",
                    "list[]",
                    "list[str]",
                    "list[bool]"
                ],
                "project_number": [
                    "int"
                ],
                "newwb": [
                    "int",
                    "float",
                    "str"
                ],
                "block_start_row": [
                    "int"
                ],
                "interested_range": [
                    "int"
                ],
                "master_path": [
                    "None",
                    "list[str]",
                    "str",
                    "list[]",
                    "bool"
                ],
                "date_range": [
                    "list[str]"
                ]
            }
        },
        "_segment_series": {
            "name": "_segment_series",
            "location": 177,
            "return": [
                "typing.Generator[typing.Union[list[tuple[typing.Union[str,bool]]],list[],list[tuple[str]]]]"
            ],
            "arguments": {}
        },
        "_series_producer": {
            "name": "_series_producer",
            "location": 184,
            "return": [
                "tuple[typing.Union[Series,int]]"
            ],
            "arguments": {
                "sheet": [
                    "str",
                    "int",
                    "list[list[int]]"
                ],
                "start_row": [
                    "int",
                    "list[list[int]]"
                ],
                "step": [
                    "int",
                    "list[list[int]]"
                ]
            }
        },
        "_row_calc": {
            "name": "_row_calc",
            "location": 203,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "project_number": [
                    "int"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "output_path": [
                    "str"
                ],
                "user_provided_master_path": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "date_range": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/analysers/utils.py": {
        "list_of_milestone_type": {
            "name": "list_of_milestone_type",
            "location": 18,
            "return": [
                "list[]"
            ],
            "arguments": {
                "project_dict": [
                    "dict[, ]",
                    "dict[str, int]"
                ],
                "milestone_type": [
                    "str",
                    "dict[, ]",
                    "dict[str, int]",
                    "list[typing.Union[str,int]]",
                    "list[list[str]]",
                    "list[]"
                ]
            }
        },
        "date_convertor": {
            "name": "date_convertor",
            "location": 53,
            "return": [
                "str",
                "list[datetime.date]",
                "None",
                "datetime_@_datetime"
            ],
            "arguments": {
                "date_thing": [
                    "str",
                    "list[datetime.date]"
                ]
            }
        },
        "diff_date_list": {
            "name": "diff_date_list",
            "location": 87,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "start_date": [
                    "int"
                ],
                "end_date": [
                    "int"
                ]
            }
        },
        "get_number_of_projects": {
            "name": "get_number_of_projects",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "source_wb": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "project_titles_in_master": {
            "name": "project_titles_in_master",
            "location": 109,
            "return": [
                "list[]"
            ],
            "arguments": {
                "master": [
                    "bool",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "projects_in_master": {
            "name": "projects_in_master",
            "location": 123,
            "return": [
                "int"
            ],
            "arguments": {
                "master": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "DatamapData.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatamapData.__len__": {
            "name": "__len__",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatamapData.__getitem__": {
            "name": "__getitem__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "list[int]"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/analysers/__init__.py": {},
    "bcompiler-master/bcompiler/api/api.py": {
        "project_data_from_master_api": {
            "name": "project_data_from_master_api",
            "location": 4,
            "return": [
                "Master"
            ],
            "arguments": {
                "master_file": [
                    "str",
                    "int",
                    "None",
                    "typing.Iterable[list[typing.Any]]",
                    "typing.IO"
                ],
                "quarter": [
                    "str",
                    "int",
                    "None",
                    "typing.Iterable[list[typing.Any]]",
                    "typing.IO"
                ],
                "year": [
                    "str",
                    "int",
                    "None",
                    "typing.Iterable[list[typing.Any]]",
                    "typing.IO"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/api/__init__.py": {},
    "bcompiler-master/bcompiler/core/master.py": {
        "_convert_str_date_to_object": {
            "name": "_convert_str_date_to_object",
            "location": 68,
            "return": [
                "tuple[str]",
                "str",
                "tuple[]"
            ],
            "arguments": {
                "d_str": [
                    "str",
                    "tuple[]"
                ]
            }
        },
        "ProjectData.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "bytes",
                    "list[str]",
                    "str"
                ]
            }
        },
        "ProjectData.__len__": {
            "name": "__len__",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectData.__getitem__": {
            "name": "__getitem__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "typing.Collection",
                    "dict[, ]",
                    "list[]",
                    "typing.MutableMapping",
                    "str"
                ]
            }
        },
        "ProjectData.key_filter": {
            "name": "key_filter",
            "location": 33,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[str, typing.Any]",
                    "set[]",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "ProjectData.pull_keys": {
            "name": "pull_keys",
            "location": 42,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "input_iter": [
                    "bytes"
                ],
                "flat": [
                    "bool"
                ]
            }
        },
        "ProjectData.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Master.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quarter": [
                    "dict[, ]",
                    "bool"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "Master.__getitem__": {
            "name": "__getitem__",
            "location": 124,
            "return": [
                "ProjectData"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str"
                ]
            }
        },
        "Master.data": {
            "name": "data",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Master.quarter": {
            "name": "quarter",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Master.filename": {
            "name": "filename",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Master.projects": {
            "name": "projects",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Master.duplicate_keys": {
            "name": "duplicate_keys",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "to_log": [
                    "None",
                    "list[]",
                    "list[str]",
                    "dict[str, str]",
                    "list[I]",
                    "int",
                    "list[typing.Union[int,typing.Any]]",
                    "dict[, ]"
                ]
            }
        },
        "Master.__repr__": {
            "name": "__repr__",
            "location": 207,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-master/bcompiler/core/row.py": {
        "Row.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anchor_column": [
                    "typing.TextIO",
                    "int"
                ],
                "anchor_row": [
                    "int",
                    "typing.Any",
                    "None",
                    "set[str]",
                    "frozenset",
                    "list[dict[str, typing.Any]]",
                    "list[]"
                ],
                "seq": [
                    "int",
                    "typing.Iterable[typing.Iterable[]]",
                    "bytes"
                ]
            }
        },
        "Row._basic_bind": {
            "name": "_basic_bind",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Row._cell_bind": {
            "name": "_cell_bind",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "dict[, ]",
                    "float",
                    "typing.Sequence['cirq.Qid']"
                ]
            }
        },
        "Row.bind": {
            "name": "bind",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "worksheet": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/core/temporal.py": {
        "FinancialYear.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "FinancialYear.q1": {
            "name": "q1",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FinancialYear.q2": {
            "name": "q2",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FinancialYear.q3": {
            "name": "q3",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FinancialYear.q4": {
            "name": "q4",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FinancialYear.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinancialYear._generate_quarters": {
            "name": "_generate_quarters",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinancialYear.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quarter.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quarter": [
                    "int"
                ],
                "year": [
                    "int",
                    "str",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "Quarter.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quarter._start_date": {
            "name": "_start_date",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "q": [
                    "int",
                    "str"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        },
        "Quarter._end_date": {
            "name": "_end_date",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "q": [
                    "int",
                    "float",
                    "str",
                    "None"
                ],
                "y": [
                    "int",
                    "float",
                    "list[]"
                ]
            }
        },
        "Quarter.__repr__": {
            "name": "__repr__",
            "location": 114,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quarter.fy": {
            "name": "fy",
            "location": 118,
            "return": [
                "FinancialYear"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-master/bcompiler/core/__init__.py": {},
    "bcompiler-master/bcompiler/process/bootstrap.py": {
        "add_git_command": {
            "name": "add_git_command",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "typing.Callable[T, T]",
                    "bool"
                ],
                "command": [
                    "typing.Callable[T, T]",
                    "bool"
                ]
            }
        },
        "set_module_checks": {
            "name": "set_module_checks",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_git_command": {
            "name": "_git_command",
            "location": 112,
            "return": [],
            "arguments": {
                "opts": [
                    "str"
                ]
            }
        },
        "_git_check_untracked": {
            "name": "_git_check_untracked",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "_discover_master_file": {
            "name": "_discover_master_file",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "g_output": [
                    "list[str]",
                    "str",
                    "bytes"
                ]
            }
        },
        "_git_check_modified_files": {
            "name": "_git_check_modified_files",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "dir": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AuxReportBlock.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "check": [
                    "int",
                    "list[str]"
                ]
            }
        },
        "AuxReportBlock._git_command": {
            "name": "_git_command",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "str"
                ]
            }
        },
        "AuxReport.__repr__": {
            "name": "__repr__",
            "location": 90,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuxReport.add_check_component": {
            "name": "add_check_component",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "typing.Type",
                    "int"
                ],
                "component": [
                    "str",
                    "list[str]",
                    "set[str]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "AuxReport.check_components": {
            "name": "check_components",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-master/bcompiler/process/cell.py": {
        "Cell.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell_key": [
                    "str",
                    "dict[str, str]",
                    "float",
                    "None",
                    "int"
                ],
                "cell_value": [
                    "float",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "str",
                    "tuple[typing.Union[str,str]]"
                ],
                "cell_reference": [
                    "str",
                    "int",
                    "None"
                ],
                "template_sheet": [
                    "str",
                    "bool",
                    "dict[str, str]",
                    "None"
                ],
                "bg_colour": [
                    "str",
                    "int",
                    "None"
                ],
                "fg_colour": [
                    "str",
                    "int",
                    "None"
                ],
                "number_format": [
                    "str",
                    "typing.Iterable[str]"
                ],
                "verification_list": [
                    "str",
                    "dict[, ]",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "r_idx": [
                    "None",
                    "int",
                    "str",
                    "list[str]",
                    "bytes"
                ],
                "c_idx": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "Cell.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-master/bcompiler/process/cellformat.py": {
        "CellFormatState.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellFormatState.new_state": {
            "name": "new_state",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "CellFormatState.set_style": {
            "name": "set_style",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellFormatState.action": {
            "name": "action",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CellFormatState.compare": {
            "name": "compare",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "second": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "CellFormatState.clear": {
            "name": "clear",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlankCellFormat.action": {
            "name": "action",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlankCellFormat.export_rule": {
            "name": "export_rule",
            "location": 148,
            "return": [
                "tuple[typing.Union[PatternFill,typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringCellFormat.set_style": {
            "name": "set_style",
            "location": 173,
            "return": [
                "tuple[PatternFill]"
            ],
            "arguments": {
                "self": [],
                "rgb": [
                    "str",
                    "float"
                ]
            }
        },
        "StringCellFormat.export_rule": {
            "name": "export_rule",
            "location": 179,
            "return": [
                "tuple[PatternFill]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringCellFormat.clear": {
            "name": "clear",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerCellFormat.set_style": {
            "name": "set_style",
            "location": 212,
            "return": [
                "tuple[PatternFill]"
            ],
            "arguments": {
                "self": [],
                "rgb": [
                    "str",
                    "float"
                ]
            }
        },
        "IntegerCellFormat.export_rule": {
            "name": "export_rule",
            "location": 219,
            "return": [
                "tuple[PatternFill]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerCellFormat.clear": {
            "name": "clear",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatCellFormat.set_style": {
            "name": "set_style",
            "location": 240,
            "return": [
                "tuple[PatternFill]"
            ],
            "arguments": {
                "self": [],
                "rgb": [
                    "str",
                    "float"
                ]
            }
        },
        "FloatCellFormat.export_rule": {
            "name": "export_rule",
            "location": 246,
            "return": [
                "tuple[PatternFill]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatCellFormat.clear": {
            "name": "clear",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateCellFormat.set_style": {
            "name": "set_style",
            "location": 267,
            "return": [
                "tuple[PatternFill]"
            ],
            "arguments": {
                "self": [],
                "rgb": [
                    "str",
                    "float"
                ]
            }
        },
        "DateCellFormat.export_rule": {
            "name": "export_rule",
            "location": 273,
            "return": [
                "tuple[PatternFill]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-master/bcompiler/process/cleansers.py": {
        "Cleanser.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "Cleanser._sort_checks": {
            "name": "_sort_checks",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cleanser._endash": {
            "name": "_endash",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._pound": {
            "name": "_pound",
            "location": 156,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._percent": {
            "name": "_percent",
            "location": 167,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._float": {
            "name": "_float",
            "location": 175,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._int": {
            "name": "_int",
            "location": 181,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._date": {
            "name": "_date",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._date_time": {
            "name": "_date_time",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._commas": {
            "name": "_commas",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._apostrophe": {
            "name": "_apostrophe",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._newline": {
            "name": "_newline",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._doublespace": {
            "name": "_doublespace",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._trailingspace": {
            "name": "_trailingspace",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._space_pipe_char": {
            "name": "_space_pipe_char",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "regex": [],
                "fix": []
            }
        },
        "Cleanser._access_checks": {
            "name": "_access_checks",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "c_type": []
            }
        },
        "Cleanser._analyse": {
            "name": "_analyse",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cleanser.clean": {
            "name": "clean",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-master/bcompiler/process/datamap.py": {
        "Datamap.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Datamap.add_cell": {
            "name": "add_cell",
            "location": 23,
            "return": [
                "typing.Callable[[], None]",
                "str",
                "list[]",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "typing.Callable[[], None]",
                    "str",
                    "list[]",
                    "tuple[]"
                ]
            }
        },
        "Datamap.delete_cell": {
            "name": "delete_cell",
            "location": 27,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "str",
                    "int"
                ]
            }
        },
        "Datamap.cell_map_from_csv": {
            "name": "cell_map_from_csv",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "Datamap._open_with_encoding_and_extract_data": {
            "name": "_open_with_encoding_and_extract_data",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str"
                ],
                "encoding": [
                    "str",
                    "int"
                ]
            }
        },
        "Datamap._import_source_data": {
            "name": "_import_source_data",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_file": [
                    "str",
                    "dict[str, str]"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/process/simple_comparitor.py": {
        "populate_cells": {
            "name": "populate_cells",
            "location": 163,
            "return": [
                "dict[str, str]",
                "None",
                "set[str]",
                "tuple[typing.Union[str,...]]"
            ],
            "arguments": {
                "worksheet": [
                    "dict[str, str]",
                    "None",
                    "set[str]",
                    "tuple[typing.Union[str,...]]"
                ],
                "bc_cells": [
                    "list[]"
                ]
            }
        },
        "BCCell.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None",
                    "list[]"
                ],
                "row_num": [
                    "None",
                    "int"
                ],
                "col_num": [
                    "None",
                    "int",
                    "tuple[]",
                    "list[str]",
                    "list[]",
                    "str",
                    "float"
                ],
                "cellref": [
                    "None",
                    "int",
                    "tuple[]",
                    "list[str]",
                    "list[]",
                    "str",
                    "float"
                ]
            }
        },
        "ParsedMaster.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master_file": [
                    "bool",
                    "str"
                ]
            }
        },
        "ParsedMaster._cleanse_key": {
            "name": "_cleanse_key",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Hashable",
                    "dict[str, str]"
                ]
            }
        },
        "ParsedMaster._parse": {
            "name": "_parse",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedMaster.projects": {
            "name": "projects",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParsedMaster._create_single_project_tuple": {
            "name": "_create_single_project_tuple",
            "location": 54,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "None",
                    "int",
                    "str",
                    "bytes"
                ],
                "col_index": [
                    "None",
                    "typing.Sequence[str]",
                    "str",
                    "list[typing.Any]",
                    "typing.Any",
                    "list[str]",
                    "int"
                ]
            }
        },
        "ParsedMaster._index_projects": {
            "name": "_index_projects",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedMaster.print_project_index": {
            "name": "print_project_index",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedMaster._create_dict_all_project_tuples": {
            "name": "_create_dict_all_project_tuples",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedMaster.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParsedMaster.get_project_data": {
            "name": "get_project_data",
            "location": 101,
            "return": [
                "list[]",
                "dict[str, int]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "self": [],
                "column": [
                    "None",
                    "int",
                    "float",
                    "bytes",
                    "str"
                ],
                "col_index": [
                    "None",
                    "int",
                    "typing.IO",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "ParsedMaster._query_for_key": {
            "name": "_query_for_key",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "list[dict[, ]]",
                    "list[str]"
                ],
                "key": [
                    "str",
                    "bool",
                    "set[str]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "ParsedMaster.get_data_with_key": {
            "name": "get_data_with_key",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[str, str]"
                ],
                "key": [
                    "str",
                    "dict[str, list[typing.Any]]",
                    "bytes",
                    "None"
                ]
            }
        },
        "ParsedMaster.index_target_files_with_previous_master": {
            "name": "index_target_files_with_previous_master",
            "location": 145,
            "return": [
                "tuple[typing.Union[str,set[str],tuple[typing.Union[str,str,str,str]],list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileComparitor.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "masters": []
            }
        },
        "FileComparitor._get_data": {
            "name": "_get_data",
            "location": 203,
            "return": [
                "tuple[ParsedMaster]",
                "ParsedMaster"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileComparitor.data": {
            "name": "data",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileComparitor.compare": {
            "name": "compare",
            "location": 223,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "proj_index": [
                    "dict[, ]",
                    "str",
                    "Exception",
                    "None"
                ],
                "key": [
                    "bytes",
                    "list[bytes]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/process/template.py": {
        "FormTemplate.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ],
                "blank": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "BICCTemplate.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str",
                    "None"
                ],
                "blank": [
                    "bool"
                ]
            }
        },
        "BICCTemplate.add_sheet": {
            "name": "add_sheet",
            "location": 37,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "sheet_name": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/process/__init__.py": {},
    "bcompiler-master/bcompiler/scripts/datamap_checker.py": {
        "get_lines": {
            "name": "get_lines",
            "location": 1,
            "return": [
                "list[]"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        },
        "get_first_field_from_fields": {
            "name": "get_first_field_from_fields",
            "location": 6,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "intersect": {
            "name": "intersect",
            "location": 10,
            "return": [
                "list[]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "list[int]"
                ],
                "b": [
                    "str",
                    "list[int]"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/templates/templates.py": {
        "CommissioningTemplate.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommissioningTemplate._load_workbook": {
            "name": "_load_workbook",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-master/bcompiler/templates/__init__.py": {},
    "bcompiler-master/bcompiler/tests/conftest.py": {
        "blank_template": {
            "name": "blank_template",
            "location": 1434,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "datamap": {
            "name": "datamap",
            "location": 1443,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "populated_template": {
            "name": "populated_template",
            "location": 1458,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {}
        },
        "populated_template_comparison": {
            "name": "populated_template_comparison",
            "location": 1486,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {}
        },
        "split_datamap_line": {
            "name": "split_datamap_line",
            "location": 1512,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "line": []
            }
        },
        "master": {
            "name": "master",
            "location": 1518,
            "return": [],
            "arguments": {}
        },
        "previous_quarter_master": {
            "name": "previous_quarter_master",
            "location": 1621,
            "return": [],
            "arguments": {}
        },
        "master_one_extra_proj": {
            "name": "master_one_extra_proj",
            "location": 1738,
            "return": [],
            "arguments": {}
        },
        "master_with_quarter_year_in_filename": {
            "name": "master_with_quarter_year_in_filename",
            "location": 1857,
            "return": [],
            "arguments": {}
        }
    },
    "bcompiler-master/bcompiler/tests/test_annex.py": {
        "test_annex_title": {
            "name": "test_annex_title",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "previous_quarter_master": [],
                "tmpdir": [],
                "master": []
            }
        },
        "test_pound_sign": {
            "name": "test_pound_sign",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "previous_quarter_master": [],
                "tmpdir": [],
                "master": []
            }
        },
        "test_b5_one_decimal": {
            "name": "test_b5_one_decimal",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "previous_quarter_master": [],
                "tmpdir": [],
                "master": []
            }
        },
        "test_b5_alignment": {
            "name": "test_b5_alignment",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "previous_quarter_master": [],
                "tmpdir": [],
                "master": []
            }
        },
        "test_abbr_func": {
            "name": "test_abbr_func",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_abbreviate_stage_name": {
            "name": "test_abbreviate_stage_name",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "previous_quarter_master": [],
                "tmpdir": [],
                "master": []
            }
        },
        "test_correct_date_format": {
            "name": "test_correct_date_format",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "previous_quarter_master": [],
                "tmpdir": [],
                "master": []
            }
        },
        "test_amber_green_cell_colour": {
            "name": "test_amber_green_cell_colour",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "previous_quarter_master": [],
                "tmpdir": [],
                "master": []
            }
        },
        "test_dca_map": {
            "name": "test_dca_map",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "previous_quarter_master": [],
                "tmpdir": [],
                "master": []
            }
        },
        "test_ipa_rag_value": {
            "name": "test_ipa_rag_value",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "previous_quarter_master": [],
                "tmpdir": [],
                "master": []
            }
        },
        "test_list_projects_in_master": {
            "name": "test_list_projects_in_master",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "master": []
            }
        },
        "test_for_new_projects_in_current_master": {
            "name": "test_for_new_projects_in_current_master",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "previous_quarter_master": [],
                "tmpdir": [],
                "master_one_extra_proj": []
            }
        }
    },
    "bcompiler-master/bcompiler/tests/test_bootstrap.py": {
        "TestAuxReportBlock.test_base_AuxReportBlock_modified": {
            "name": "test_base_AuxReportBlock_modified",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuxReportBlock.test_base_AuxReportBlock_untracked": {
            "name": "test_base_AuxReportBlock_untracked",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuxReportBlock.test_base_AuxReportBlock_log": {
            "name": "test_base_AuxReportBlock_log",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuxReportBlock.test_manually_add_git_command": {
            "name": "test_manually_add_git_command",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuxReportBase.test_base_AuxReport": {
            "name": "test_base_AuxReport",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuxReportBase.test_add_attribute_value_Auxreport": {
            "name": "test_add_attribute_value_Auxreport",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuxReportBase.test_function_to_find_master_file": {
            "name": "test_function_to_find_master_file",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuxReportBase.test_add_AuxReport_instance": {
            "name": "test_add_AuxReport_instance",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuxReportBase.test_change_instance_expect_attribute_change": {
            "name": "test_change_instance_expect_attribute_change",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuxReportBase.test_for_non_existing_attribute": {
            "name": "test_for_non_existing_attribute",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuxReportBase.test_dynamically_adding_attribute": {
            "name": "test_dynamically_adding_attribute",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuxReportBase.test_wrong_component_type_added": {
            "name": "test_wrong_component_type_added",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuxReportBase.test_get_list_of_check_components_from_instance": {
            "name": "test_get_list_of_check_components_from_instance",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bcompiler-master/bcompiler/tests/test_cleanser.py": {
        "test_cleaning_dot_date": {
            "name": "test_cleaning_dot_date",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cleaning_slash_date": {
            "name": "test_cleaning_slash_date",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_em_dash_key": {
            "name": "test_em_dash_key",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_double_trailing_space": {
            "name": "test_double_trailing_space",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bcompiler-master/bcompiler/tests/test_datamap.py": {
        "test_datamap_object": {
            "name": "test_datamap_object",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initial_state": {
            "name": "test_initial_state",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_datamap_from_csv": {
            "name": "test_datamap_from_csv",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "datamap": [
                    "int"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/tests/test_empty_returns_dir.py": {
        "test_empty_returns_dir_throws_exception": {
            "name": "test_empty_returns_dir_throws_exception",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "tmpdir": []
            }
        }
    },
    "bcompiler-master/bcompiler/tests/test_external_deps.py": {
        "test_existence": {
            "name": "test_existence",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "datamap": []
            }
        },
        "test_generated_template": {
            "name": "test_generated_template",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "blank_template": [
                    "str",
                    "int"
                ]
            }
        },
        "test_incorrect_template_cells": {
            "name": "test_incorrect_template_cells",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "blank_template": [
                    "str",
                    "int"
                ]
            }
        },
        "test_populated_template": {
            "name": "test_populated_template",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_template": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/tests/test_file_parsing.py": {
        "test_populate_single_template_from_master": {
            "name": "test_populate_single_template_from_master",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_template": [
                    "str"
                ],
                "datamap": [
                    "str"
                ]
            }
        },
        "test_compile_all_returns_to_master_no_comparison": {
            "name": "test_compile_all_returns_to_master_no_comparison",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_template": [
                    "str"
                ],
                "datamap": [
                    "str"
                ]
            }
        },
        "test_compile_all_returns_to_master_with_string_comparison": {
            "name": "test_compile_all_returns_to_master_with_string_comparison",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "datamap": [
                    "str",
                    "None"
                ],
                "previous_quarter_master": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "populated_template_comparison": []
            }
        },
        "test_compile_all_returns_to_master_with_date_comparison": {
            "name": "test_compile_all_returns_to_master_with_date_comparison",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "datamap": [
                    "str",
                    "None"
                ],
                "previous_quarter_master": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "populated_template_comparison": []
            }
        },
        "test_datamap_class": {
            "name": "test_datamap_class",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "datamap": [
                    "typing.Type",
                    "typing.Iterable[typing.Any]"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/tests/test_financial_year.py": {
        "test_fy": {
            "name": "test_fy",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_errors": {
            "name": "test_errors",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_quarters_in_fy": {
            "name": "test_quarters_in_fy",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_forbid_setting_quarters_manually": {
            "name": "test_forbid_setting_quarters_manually",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fy_from_quarter": {
            "name": "test_fy_from_quarter",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bcompiler-master/bcompiler/tests/test_integration.py": {
        "test_bcompiler_help": {
            "name": "test_bcompiler_help",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bcompiler_version": {
            "name": "test_bcompiler_version",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bcompiler_count_rows": {
            "name": "test_bcompiler_count_rows",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_template": [
                    "list[str]",
                    "bool",
                    "str",
                    "dict[str, object]"
                ]
            }
        },
        "test_bcompiler_count_rows_csv": {
            "name": "test_bcompiler_count_rows_csv",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_template": [
                    "list[str]",
                    "bool",
                    "str",
                    "dict[str, object]"
                ]
            }
        },
        "test_bcompiler_count_rows_quiet": {
            "name": "test_bcompiler_count_rows_quiet",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_template": [
                    "list[str]",
                    "bool",
                    "str",
                    "dict[str, object]"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/tests/test_master.py": {
        "test_master": {
            "name": "test_master",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "master": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "test_project_data_object": {
            "name": "test_project_data_object",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "master": [
                    "int"
                ]
            }
        },
        "test_master_key_filter": {
            "name": "test_master_key_filter",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "master": [
                    "int",
                    "BaseException",
                    "str"
                ]
            }
        },
        "test_master_key_filter_missing_key": {
            "name": "test_master_key_filter_missing_key",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "master": [
                    "int"
                ]
            }
        },
        "test_pull_iterable_from_master_based_on_key": {
            "name": "test_pull_iterable_from_master_based_on_key",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "master": [
                    "str"
                ]
            }
        },
        "test_pull_iterable_from_master_based_on_key_flat": {
            "name": "test_pull_iterable_from_master_based_on_key_flat",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "master": [
                    "str"
                ]
            }
        },
        "test_duplicate_keys_in_master": {
            "name": "test_duplicate_keys_in_master",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "master": [
                    "int"
                ],
                "caplog": [
                    "str",
                    "dict[str, float]"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/tests/test_populate_templates.py": {
        "test_get_list_projects_main_xlsx": {
            "name": "test_get_list_projects_main_xlsx",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "master": [
                    "int",
                    "typing.Iterable[]"
                ]
            }
        },
        "test_pull_data_from_xlsx_master": {
            "name": "test_pull_data_from_xlsx_master",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "master": []
            }
        },
        "test_populate_single_template": {
            "name": "test_populate_single_template",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "master": [
                    "int",
                    "BaseException",
                    "str"
                ],
                "blank_template": [
                    "str"
                ],
                "datamap": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_populate_date_cell": {
            "name": "test_populate_date_cell",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "master": [
                    "str",
                    "BaseException",
                    "int"
                ],
                "blank_template": [
                    "str"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/tests/test_quarter.py": {
        "test_initialisation": {
            "name": "test_initialisation",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_desc_string": {
            "name": "test_desc_string",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_errors": {
            "name": "test_errors",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bcompiler-master/bcompiler/tests/test_rcf.py": {
        "test_rcf": {
            "name": "test_rcf",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "master_with_quarter_year_in_filename": [
                    "str"
                ],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_rcf_chart_data_columns": {
            "name": "test_rcf_chart_data_columns",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "master_with_quarter_year_in_filename": [],
                "tmpdir": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "bcompiler-master/bcompiler/tests/test_row.py": {
        "test_for_basic_row_object_given_list": {
            "name": "test_for_basic_row_object_given_list",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_for_basic_row_object_given_tuple": {
            "name": "test_for_basic_row_object_given_tuple",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_row_object_given_column_reference_as_string": {
            "name": "test_row_object_given_column_reference_as_string",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_row_object_given_column_reference_as_double_string": {
            "name": "test_row_object_given_column_reference_as_double_string",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_wrong_cell_reference": {
            "name": "test_wrong_cell_reference",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "bcompiler-master/bcompiler/tests/test_swimlane.py": {
        "test_basic_swimlane_data": {
            "name": "test_basic_swimlane_data",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "master": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_swimlane_assurance_data": {
            "name": "test_swimlane_assurance_data",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "master": []
            }
        }
    },
    "bcompiler-master/bcompiler/tests/__init__.py": {},
    "bcompiler-master/docs/conf.py": {}
}
{
    "bidaf-self-attention-master/external/evaluate_v2.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "make_qid_to_has_ans": {
            "name": "make_qid_to_has_ans",
            "location": 37,
            "return": [
                "dict[, bool]"
            ],
            "arguments": {
                "dataset": []
            }
        },
        "normalize_answer": {
            "name": "normalize_answer",
            "location": 45,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "get_tokens": {
            "name": "get_tokens",
            "location": 59,
            "return": [
                "list[]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "compute_exact": {
            "name": "compute_exact",
            "location": 63,
            "return": [
                "int"
            ],
            "arguments": {
                "a_gold": [
                    "int",
                    "str"
                ],
                "a_pred": [
                    "int",
                    "str"
                ]
            }
        },
        "compute_f1": {
            "name": "compute_f1",
            "location": 66,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "a_gold": [
                    "typing.Callable[T,T, T]",
                    "int"
                ],
                "a_pred": [
                    "typing.Callable[T,T, T]",
                    "int"
                ]
            }
        },
        "get_raw_scores": {
            "name": "get_raw_scores",
            "location": 81,
            "return": [
                "tuple[dict[int, ]]"
            ],
            "arguments": {
                "dataset": [
                    "str",
                    "dict[, ]"
                ],
                "preds": [
                    "str"
                ]
            }
        },
        "apply_no_ans_threshold": {
            "name": "apply_no_ans_threshold",
            "location": 102,
            "return": [
                "dict[, float]"
            ],
            "arguments": {
                "scores": [],
                "na_probs": [
                    "float",
                    "int",
                    "str"
                ],
                "qid_to_has_ans": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ],
                "na_prob_thresh": [
                    "str"
                ]
            }
        },
        "make_eval_dict": {
            "name": "make_eval_dict",
            "location": 112,
            "return": [],
            "arguments": {
                "exact_scores": [],
                "f1_scores": [],
                "qid_list": []
            }
        },
        "merge_eval": {
            "name": "merge_eval",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "main_eval": [],
                "new_eval": [],
                "prefix": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "plot_pr_curve": {
            "name": "plot_pr_curve",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "precisions": [
                    "list[float]",
                    "list[str]",
                    "None",
                    "bool",
                    "str"
                ],
                "recalls": [
                    "list[float]",
                    "list[str]",
                    "None",
                    "bool",
                    "str"
                ],
                "out_image": [
                    "list[float]",
                    "tuple[typing.Union[int,int,int]]",
                    "bytes",
                    "list[]"
                ],
                "title": [
                    "list[float]",
                    "tuple[typing.Union[int,int,int]]",
                    "bytes",
                    "list[]"
                ]
            }
        },
        "make_precision_recall_eval": {
            "name": "make_precision_recall_eval",
            "location": 143,
            "return": [
                "dict[typing.Text, float]"
            ],
            "arguments": {
                "scores": [
                    "int",
                    "typing.Callable[..., None]",
                    "str",
                    "list[list[int]]"
                ],
                "na_probs": [],
                "num_true_pos": [
                    "int",
                    "float",
                    "None"
                ],
                "qid_to_has_ans": [
                    "int",
                    "typing.Callable[..., None]",
                    "str",
                    "list[list[int]]"
                ],
                "out_image": [
                    "None",
                    "tuple[int]",
                    "int",
                    "str",
                    "float",
                    "list[]"
                ],
                "title": [
                    "None",
                    "tuple[int]",
                    "int",
                    "str",
                    "float",
                    "list[]"
                ]
            }
        },
        "run_precision_recall_analysis": {
            "name": "run_precision_recall_analysis",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "main_eval": [
                    "int",
                    "typing.Callable[..., None]",
                    "str"
                ],
                "exact_raw": [
                    "int",
                    "float",
                    "typing.Iterable[typing.Union[int,str]]",
                    "str"
                ],
                "f1_raw": [
                    "int",
                    "float"
                ],
                "na_probs": [
                    "int",
                    "float",
                    "typing.Iterable[typing.Union[int,str]]",
                    "str"
                ],
                "qid_to_has_ans": [],
                "out_image_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "histogram_na_prob": {
            "name": "histogram_na_prob",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "na_probs": [
                    "str"
                ],
                "qid_list": [],
                "image_dir": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "list[]",
                    "None"
                ]
            }
        },
        "find_best_thresh": {
            "name": "find_best_thresh",
            "location": 202,
            "return": [
                "tuple[typing.Union[float,str]]"
            ],
            "arguments": {
                "preds": [
                    "float",
                    "bool",
                    "str"
                ],
                "scores": [],
                "na_probs": [
                    "dict[str, typing.Any]",
                    "str",
                    "list[str]"
                ],
                "qid_to_has_ans": []
            }
        },
        "find_all_best_thresh": {
            "name": "find_all_best_thresh",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "main_eval": [
                    "int"
                ],
                "preds": [
                    "bool",
                    "str"
                ],
                "exact_raw": [
                    "bool",
                    "str"
                ],
                "f1_raw": [
                    "typing.Callable[float, float]",
                    "float",
                    "bool",
                    "tuple[int]"
                ],
                "na_probs": [
                    "bool",
                    "str"
                ],
                "qid_to_has_ans": [
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "normalize_answer.remove_articles": {
            "name": "remove_articles",
            "location": 47,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "normalize_answer.white_space_fix": {
            "name": "white_space_fix",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "normalize_answer.remove_punc": {
            "name": "remove_punc",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "normalize_answer.lower": {
            "name": "lower",
            "location": 55,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "bidaf-self-attention-master/src/my_layers.py": {
        "uniform_weights": {
            "name": "uniform_weights",
            "location": 525,
            "return": [
                "int",
                "list[int]"
            ],
            "arguments": {
                "x": [],
                "x_mask": [
                    "str",
                    "float",
                    "typing.Container",
                    "int",
                    "list[str]"
                ]
            }
        },
        "weighted_avg": {
            "name": "weighted_avg",
            "location": 542,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ],
                "weights": [
                    "float",
                    "int"
                ]
            }
        },
        "StackedBRNN.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "typing.Callable[, ]",
                    "int",
                    "list[]",
                    "tuple[typing.Union[int,int]]"
                ],
                "hidden_size": [
                    "int",
                    "list[]",
                    "tuple[typing.Union[int,int]]"
                ],
                "num_layers": [
                    "int",
                    "float"
                ],
                "dropout_rate": [
                    "int"
                ],
                "dropout_output": [
                    "bool"
                ],
                "rnn_type": [],
                "concat_layers": [
                    "bool"
                ],
                "padding": [
                    "bool"
                ]
            }
        },
        "StackedBRNN.forward": {
            "name": "forward",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "x_mask": [
                    "int"
                ]
            }
        },
        "StackedBRNN._forward_unpadded": {
            "name": "_forward_unpadded",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "x_mask": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "StackedBRNN._forward_padded": {
            "name": "_forward_padded",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "x_mask": []
            }
        },
        "FeedForwardNetwork.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "list[int]",
                    "int"
                ],
                "hidden_size": [
                    "list[int]",
                    "int",
                    "list[]",
                    "typing.Callable[, ]"
                ],
                "output_size": [
                    "int",
                    "list[int]"
                ],
                "dropout_rate": [
                    "int"
                ]
            }
        },
        "FeedForwardNetwork.forward": {
            "name": "forward",
            "location": 177,
            "return": [
                "float",
                "int",
                "list[]",
                "list[float]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "PointerNetwork.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_size": [
                    "int",
                    "float"
                ],
                "y_size": [
                    "int",
                    "float"
                ],
                "hidden_size": [
                    "int",
                    "str",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ],
                "dropout_rate": [
                    "int"
                ],
                "cell_type": [],
                "normalize": [
                    "bool"
                ]
            }
        },
        "PointerNetwork.init_hiddens": {
            "name": "init_hiddens",
            "location": 194,
            "return": [
                "typing.Pattern",
                "int"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "typing.Callable[, ]",
                    "float",
                    "None",
                    "typing.Iterable[str]",
                    "str",
                    "int"
                ],
                "y_mask": [
                    "typing.Callable[, ]",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "PointerNetwork.pointer": {
            "name": "pointer",
            "location": 206,
            "return": [
                "tuple[typing.Union[typing.Pattern,tuple[]]]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "state": [
                    "float",
                    "int"
                ],
                "x_mask": [
                    "int",
                    "dict[str, torch.Tensor]",
                    "None"
                ]
            }
        },
        "PointerNetwork.forward": {
            "name": "forward",
            "location": 225,
            "return": [
                "tuple[typing.Union[dict[str, typing.Any],int,str]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "x_mask": [
                    "int"
                ],
                "y_mask": [
                    "int",
                    "float"
                ]
            }
        },
        "MemoryAnsPointer.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_size": [
                    "int"
                ],
                "y_size": [
                    "float",
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "hop": [
                    "int"
                ],
                "dropout_rate": [
                    "int"
                ],
                "normalize": [
                    "bool"
                ]
            }
        },
        "MemoryAnsPointer.forward": {
            "name": "forward",
            "location": 250,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [
                    "str"
                ],
                "x_mask": [
                    "dict[str, torch.Tensor]",
                    "typing.Sequence[int]",
                    "dict[str, torch.LongTensor]"
                ],
                "y_mask": [
                    "list[typing.Any]",
                    "None",
                    "list[list[str]]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "SeqAttnMatch.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "float",
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ],
                "identity": [
                    "bool"
                ]
            }
        },
        "SeqAttnMatch.forward": {
            "name": "forward",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "y_mask": [
                    "int",
                    "typing.Any",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "SelfAttnMatch.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "float",
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ],
                "identity": [
                    "bool"
                ],
                "diag": [
                    "bool"
                ]
            }
        },
        "SelfAttnMatch.forward": {
            "name": "forward",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "x_mask": []
            }
        },
        "BilinearSeqAttn.__init__": {
            "name": "__init__",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_size": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "list[float]"
                ],
                "y_size": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]",
                    "list[float]"
                ],
                "identity": [
                    "bool"
                ],
                "normalize": [
                    "bool"
                ]
            }
        },
        "BilinearSeqAttn.forward": {
            "name": "forward",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "bytes"
                ],
                "y": [
                    "str",
                    "None",
                    "int",
                    "tuple[typing.Union[float,float]]"
                ],
                "x_mask": [
                    "int",
                    "str"
                ]
            }
        },
        "LinearSeqAttn.__init__": {
            "name": "__init__",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "LinearSeqAttn.forward": {
            "name": "forward",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "x_mask": [
                    "str",
                    "int",
                    "list[list[str]]"
                ]
            }
        },
        "NonLinearSeqAttn.__init__": {
            "name": "__init__",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "float",
                    "str"
                ],
                "hidden_size": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "NonLinearSeqAttn.forward": {
            "name": "forward",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "bytes"
                ],
                "x_mask": [
                    "str",
                    "int",
                    "list[list[str]]"
                ]
            }
        },
        "Gate.__init__": {
            "name": "__init__",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "None"
                ]
            }
        },
        "Gate.forward": {
            "name": "forward",
            "location": 489,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "SFU.__init__": {
            "name": "__init__",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "float"
                ],
                "fusion_size": [
                    "int",
                    "float"
                ]
            }
        },
        "SFU.forward": {
            "name": "forward",
            "location": 512,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "typing.Sequence[int]",
                    "typing.Sequence[float]"
                ],
                "fusions": [
                    "float"
                ]
            }
        }
    },
    "bidaf-self-attention-master/src/__init__.py": {},
    "bidaf-self-attention-master/src/common/file_root.py": {},
    "bidaf-self-attention-master/src/common/__init__.py": {},
    "bidaf-self-attention-master/src/dataset_readers/squad_v2.py": {
        "SquadReaderV2.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "tuple[typing.Union[int,int]]",
                    "list[int]",
                    "str"
                ],
                "token_indexers": [
                    "None",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "lazy": [
                    "bool"
                ]
            }
        },
        "SquadReaderV2._read": {
            "name": "_read",
            "location": 31,
            "return": [
                "typing.Generator[tuple[typing.Union[str,int]]]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "SquadReaderV2.text_to_instance": {
            "name": "text_to_instance",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "question_text": [
                    "str",
                    "bool",
                    "range",
                    "typing.Match",
                    "None"
                ],
                "passage_text": [
                    "str"
                ],
                "char_spans": [
                    "None",
                    "list[list[int]]",
                    "int",
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,int]]"
                ],
                "answer_texts": [
                    "None",
                    "list[allennlp.data.tokenizers.Token]",
                    "list[str]",
                    "list[tuple[typing.Union[int,int]]]",
                    "bool",
                    "str"
                ],
                "passage_tokens": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        }
    },
    "bidaf-self-attention-master/src/dataset_readers/__init__.py": {},
    "bidaf-self-attention-master/src/metrics/squad_v2.py": {
        "SquadMetricsV2.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SquadMetricsV2.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "best_span_string": [
                    "str",
                    "float",
                    "None"
                ],
                "answer_strings": [
                    "str"
                ]
            }
        },
        "SquadMetricsV2.get_metric": {
            "name": "get_metric",
            "location": 48,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        },
        "SquadMetricsV2.reset": {
            "name": "reset",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SquadMetricsV2.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SquadMetricsV2.get_metric.ave_score": {
            "name": "ave_score",
            "location": 56,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [],
                "count": []
            }
        }
    },
    "bidaf-self-attention-master/src/metrics/__init__.py": {},
    "bidaf-self-attention-master/src/models/bidaf_v2.py": {
        "BidafV2.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ],
                "text_field_embedder": [],
                "num_highway_layers": [
                    "bool",
                    "None",
                    "list[str]"
                ],
                "phrase_layer": [],
                "metric": [
                    "typing.Callable[, ]",
                    "int",
                    "list[typing.Any]",
                    "None"
                ],
                "similarity_function": [
                    "typing.Callable[, ]",
                    "int",
                    "list[typing.Any]",
                    "None"
                ],
                "modeling_layer": [],
                "span_end_encoder": [],
                "dropout": [
                    "float"
                ],
                "mask_lstms": [
                    "bool"
                ],
                "no_answer": [
                    "bool"
                ],
                "initializer": [
                    "InitializerApplicator"
                ],
                "regularizer": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "BidafV2.forward": {
            "name": "forward",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "question": [
                    "dict[str, torch.LongTensor]",
                    "bool",
                    "float"
                ],
                "passage": [
                    "dict[str, torch.LongTensor]",
                    "bool",
                    "float"
                ],
                "span_start": [
                    "None",
                    "list[int]",
                    "str",
                    "list[str]",
                    "float",
                    "int"
                ],
                "span_end": [
                    "None",
                    "str",
                    "list[int]",
                    "list[str]"
                ],
                "metadata": [
                    "None",
                    "list[dict[str, typing.Any]]",
                    "float",
                    "bool"
                ]
            }
        },
        "BidafV2.get_metrics": {
            "name": "get_metrics",
            "location": 272,
            "return": [
                "dict[typing.Text, typing.Union[str,float,dict[str, typing.Any],list[int],tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal]],tuple[frozenset],int]]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        },
        "BidafV2.get_best_span": {
            "name": "get_best_span",
            "location": 287,
            "return": [],
            "arguments": {
                "span_start_logits": [],
                "span_end_logits": [],
                "no_answer": [
                    "bool"
                ]
            }
        }
    },
    "bidaf-self-attention-master/src/models/__init__.py": {},
    "bidaf-self-attention-master/tests/bidaf_v2_test.py": {
        "BidafV2SquadV1Test.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BidafV2SquadV1Test.test_forward_pass_runs_correctly": {
            "name": "test_forward_pass_runs_correctly",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BidafV2SquadV1Test.test_model_can_train_save_and_load": {
            "name": "test_model_can_train_save_and_load",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BidafV2SquadV1Test.test_batch_predictions_are_consistent": {
            "name": "test_batch_predictions_are_consistent",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BidafV2SquadV1Test.test_get_best_span": {
            "name": "test_get_best_span",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BidafV2SquadV1Test.test_mismatching_dimensions_throws_configuration_error": {
            "name": "test_mismatching_dimensions_throws_configuration_error",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BidafV2SquadV2Test.setUp": {
            "name": "setUp",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BidafV2SquadV2Test.test_get_best_span": {
            "name": "test_get_best_span",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bidaf-self-attention-master/tests/squad_v2_test.py": {
        "TestSquadReaderV2.test_read_from_file": {
            "name": "test_read_from_file",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestSquadReaderV2.test_can_build_from_params": {
            "name": "test_can_build_from_params",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
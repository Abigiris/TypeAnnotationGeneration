{
    "bike-company-master/bike/wsgi.py": {},
    "bike-company-master/bike/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "revision": [],
                "directives": []
            }
        }
    },
    "bike-company-master/bike/migrations/versions/c9e6b45f735a_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bike-company-master/bike/src/configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bike-company-master/bike/src/server.py": {
        "create_api": {
            "name": "create_api",
            "location": 14,
            "return": [
                "Flask"
            ],
            "arguments": {
                "configuration": [
                    "bool",
                    "list[str]",
                    "str",
                    "None"
                ]
            }
        },
        "_register_blueprints": {
            "name": "_register_blueprints",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "api_application": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "bike-company-master/bike/src/__init__.py": {},
    "bike-company-master/bike/src/api/index.py": {
        "hello": {
            "name": "hello",
            "location": 10,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "bike-company-master/bike/src/api/ping.py": {
        "ping": {
            "name": "ping",
            "location": 9,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "bike-company-master/bike/src/api/__init__.py": {},
    "bike-company-master/bike/src/api/v1/bike.py": {
        "bikes": {
            "name": "bikes",
            "location": 18,
            "return": [],
            "arguments": {
                "bike_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "bike-company-master/bike/src/api/v1/__init__.py": {},
    "bike-company-master/bike/src/database/__init__.py": {},
    "bike-company-master/bike/src/database/models/bike.py": {},
    "bike-company-master/bike/src/database/models/__init__.py": {},
    "bike-company-master/bike/src/database/schemas/bike_schema.py": {
        "BikeSchema.make_bike": {
            "name": "make_bike",
            "location": 12,
            "return": [
                "Bike"
            ],
            "arguments": {
                "self": [],
                "bike_data": [
                    "dict[, ]",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "BikeSchema.validate_location": {
            "name": "validate_location",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "list[str]"
                ]
            }
        }
    },
    "bike-company-master/bike/src/database/schemas/__init__.py": {},
    "bike-company-master/bike/src/logging/mixin.py": {
        "LoggingMixin.logger": {
            "name": "logger",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoggingMixin._setup_logger": {
            "name": "_setup_logger",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bike-company-master/bike/src/logging/__init__.py": {},
    "bike-company-master/bike/src/repository/bike_repository.py": {
        "BikeRepository.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bike_schema": [
                    "int",
                    "float"
                ]
            }
        },
        "BikeRepository.insert": {
            "name": "insert",
            "location": 11,
            "return": [
                "tuple[typing.Union[dict[, ],str,dict[int, str],Exception,int]]",
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]"
            ],
            "arguments": {
                "self": [],
                "bikes_to_add": []
            }
        },
        "BikeRepository.get": {
            "name": "get",
            "location": 23,
            "return": [
                "tuple[typing.Union[Exception,int,dict[str, str],str]]",
                "tuple[typing.Union[str,int,list[str],dict[int, str],Exception]]",
                "tuple[typing.Union[str,dict[int, str],tuple[typing.Union[typing.Literal,typing.Literal]],bool,None]]"
            ],
            "arguments": {
                "self": [],
                "bike_id": [
                    "None",
                    "str",
                    "int",
                    "list[typing.Optional[int]]"
                ]
            }
        }
    },
    "bike-company-master/bike/src/repository/__init__.py": {},
    "bike-company-master/gateway/wsgi.py": {},
    "bike-company-master/gateway/src/server.py": {
        "create_api": {
            "name": "create_api",
            "location": 11,
            "return": [
                "Flask"
            ],
            "arguments": {}
        },
        "_register_blueprints": {
            "name": "_register_blueprints",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "api_application": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "bike-company-master/gateway/src/__init__.py": {},
    "bike-company-master/gateway/src/api/index.py": {
        "hello": {
            "name": "hello",
            "location": 10,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "bike-company-master/gateway/src/api/ping.py": {
        "ping": {
            "name": "ping",
            "location": 9,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "bike-company-master/gateway/src/api/__init__.py": {},
    "bike-company-master/gateway/src/api/v1/gateway.py": {
        "get_bikes": {
            "name": "get_bikes",
            "location": 18,
            "return": [
                "Response"
            ],
            "arguments": {
                "bike_id": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "start_trip": {
            "name": "start_trip",
            "location": 39,
            "return": [
                "Response"
            ],
            "arguments": {
                "bike_id": [
                    "str",
                    "int"
                ]
            }
        },
        "end_trip": {
            "name": "end_trip",
            "location": 58,
            "return": [
                "Response"
            ],
            "arguments": {
                "bike_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "bike-company-master/gateway/src/api/v1/__init__.py": {},
    "bike-company-master/gateway/src/logging/mixin.py": {
        "LoggingMixin.logger": {
            "name": "logger",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoggingMixin._setup_logger": {
            "name": "_setup_logger",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bike-company-master/gateway/src/logging/__init__.py": {},
    "bike-company-master/trip/wsgi.py": {},
    "bike-company-master/trip/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "revision": [],
                "directives": []
            }
        }
    },
    "bike-company-master/trip/migrations/versions/57061ffce27d_create_table_trip.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bike-company-master/trip/src/configuration.py": {
        "Configuration.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bike-company-master/trip/src/server.py": {
        "create_api": {
            "name": "create_api",
            "location": 14,
            "return": [
                "Flask"
            ],
            "arguments": {
                "configuration": [
                    "bool",
                    "list[str]",
                    "str",
                    "None"
                ]
            }
        },
        "_register_blueprints": {
            "name": "_register_blueprints",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "api_application": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "bike-company-master/trip/src/__init__.py": {},
    "bike-company-master/trip/src/api/index.py": {
        "hello": {
            "name": "hello",
            "location": 10,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "bike-company-master/trip/src/api/ping.py": {
        "ping": {
            "name": "ping",
            "location": 9,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        }
    },
    "bike-company-master/trip/src/api/__init__.py": {},
    "bike-company-master/trip/src/api/v1/trip.py": {
        "start_trip": {
            "name": "start_trip",
            "location": 17,
            "return": [],
            "arguments": {
                "bike_id": [
                    "str",
                    "int"
                ]
            }
        },
        "end_trip": {
            "name": "end_trip",
            "location": 34,
            "return": [],
            "arguments": {
                "bike_id": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "bike-company-master/trip/src/api/v1/__init__.py": {},
    "bike-company-master/trip/src/database/__init__.py": {},
    "bike-company-master/trip/src/database/models/trip.py": {},
    "bike-company-master/trip/src/database/models/__init__.py": {},
    "bike-company-master/trip/src/database/schemas/trip_schema.py": {
        "TripSchema.make_trip": {
            "name": "make_trip",
            "location": 17,
            "return": [
                "Trip"
            ],
            "arguments": {
                "self": [],
                "trip_data": [
                    "dict[, ]",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "TripSchema.validate_locations": {
            "name": "validate_locations",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locations": [
                    "list[dict[, ]]",
                    "str"
                ]
            }
        }
    },
    "bike-company-master/trip/src/database/schemas/__init__.py": {},
    "bike-company-master/trip/src/logging/mixin.py": {
        "LoggingMixin.logger": {
            "name": "logger",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoggingMixin._setup_logger": {
            "name": "_setup_logger",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bike-company-master/trip/src/logging/__init__.py": {},
    "bike-company-master/trip/src/repository/trip_repository.py": {
        "TripRepository.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "trip_schema": [
                    "int",
                    "float"
                ]
            }
        },
        "TripRepository.start_trip": {
            "name": "start_trip",
            "location": 19,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Text],int]]",
                "tuple[typing.Union[dict[, ],str,Exception,int]]",
                "tuple[typing.Union[dict[typing.Text, ],int]]"
            ],
            "arguments": {
                "self": [],
                "bike_id": [
                    "str"
                ]
            }
        },
        "TripRepository.end_trip": {
            "name": "end_trip",
            "location": 43,
            "return": [
                "tuple[typing.Union[str,bytes,int]]",
                "tuple[typing.Union[str,int,list[str],dict[int, str],Exception]]"
            ],
            "arguments": {
                "self": [],
                "bike_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "TripRepository.in_use": {
            "name": "in_use",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "bike_id": [
                    "int",
                    "str"
                ]
            }
        },
        "TripRepository._get_bike_last_trip": {
            "name": "_get_bike_last_trip",
            "location": 64,
            "return": [
                "dict[str, int]",
                "typing.Pattern",
                "str"
            ],
            "arguments": {
                "self": [],
                "bike_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "bike-company-master/trip/src/repository/__init__.py": {}
}
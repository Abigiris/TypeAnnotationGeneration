{
    "binance-chain-python-master/setup.py": {},
    "binance-chain-python-master/binancechain/crypto.py": {
        "from_path": {
            "name": "from_path",
            "location": 8,
            "return": [],
            "arguments": {
                "root_key": [],
                "path": [
                    "str"
                ]
            }
        },
        "get_address": {
            "name": "get_address",
            "location": 26,
            "return": [],
            "arguments": {
                "prefix": [
                    "str",
                    "tuple[]"
                ],
                "key": [
                    "bytes",
                    "str",
                    "typing.IO"
                ]
            }
        },
        "address_decode": {
            "name": "address_decode",
            "location": 32,
            "return": [
                "bytes"
            ],
            "arguments": {
                "address": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "generate_signature": {
            "name": "generate_signature",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ],
                "data": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "verify_signature": {
            "name": "verify_signature",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "bool"
                ],
                "signed_data": [
                    "bytes",
                    "bool"
                ],
                "pubkey": [
                    "bytes",
                    "bool"
                ]
            }
        },
        "generate_id": {
            "name": "generate_id",
            "location": 46,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "address": [
                    "str"
                ],
                "sequence": [
                    "int"
                ]
            }
        }
    },
    "binance-chain-python-master/binancechain/enums.py": {},
    "binance-chain-python-master/binancechain/exceptions.py": {
        "BinanceChainException.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "None",
                    "list[dict[, ]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BinanceChainException.__repr__": {
            "name": "__repr__",
            "location": 12,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binance-chain-python-master/binancechain/httpclient.py": {
        "HTTPClient.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testnet": [
                    "bool"
                ],
                "api_version": [
                    "typing.Text"
                ],
                "url": [
                    "None",
                    "str",
                    "list[str]",
                    "typing.Callable[str, str]"
                ],
                "rate_limit": [
                    "bool"
                ]
            }
        },
        "HTTPClient.__del__": {
            "name": "__del__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binance-chain-python-master/binancechain/noderpc.py": {
        "NodeRPC.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ],
                "testnet": [
                    "bool"
                ]
            }
        },
        "NodeRPC.__del__": {
            "name": "__del__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeRPC.subscribe": {
            "name": "subscribe",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "None"
                ],
                "callback": [
                    "None",
                    "str",
                    "dict[, ]",
                    "typing.Callable[dict[, ], None]",
                    "list[]",
                    "tuple[]"
                ]
            }
        },
        "NodeRPC.unsubscribe": {
            "name": "unsubscribe",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "None"
                ]
            }
        },
        "NodeRPC.unsubscribe_all": {
            "name": "unsubscribe_all",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeRPC.start": {
            "name": "start",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "on_open": [
                    "None",
                    "str",
                    "bool"
                ],
                "on_msg": [
                    "None",
                    "str",
                    "bool"
                ],
                "on_error": [
                    "None",
                    "str",
                    "bool"
                ],
                "loop": [
                    "None",
                    "int",
                    "str"
                ],
                "keepalive": [
                    "bool"
                ]
            }
        },
        "NodeRPC.close": {
            "name": "close",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binance-chain-python-master/binancechain/ratelimit.py": {
        "RateLimiter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "period": [
                    "int"
                ]
            }
        },
        "RateLimiter.close": {
            "name": "close",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binance-chain-python-master/binancechain/transaction.py": {
        "Transaction.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wallet": [],
                "client": [
                    "None"
                ],
                "testnet": [
                    "bool"
                ]
            }
        }
    },
    "binance-chain-python-master/binancechain/transaction_base.py": {
        "TransactionBase.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "bool",
                    "float"
                ],
                "account_number": [
                    "int",
                    "dict[, ]",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "sequence": [
                    "dict[str, dict[str, typing.Any]]",
                    "list[str]",
                    "None",
                    "set[]",
                    "int",
                    "dict[, ]",
                    "str"
                ],
                "chainid": [
                    "str",
                    "list[str]",
                    "dict[str, str]",
                    "list[]"
                ],
                "memo": [
                    "typing.Text"
                ],
                "data": [
                    "typing.Text"
                ]
            }
        },
        "TransactionBase.get_new_order_msg": {
            "name": "get_new_order_msg",
            "location": 71,
            "return": [
                "str",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "int",
                    "bytes",
                    "None"
                ],
                "side": [
                    "str",
                    "int",
                    "bytes",
                    "None"
                ],
                "price": [
                    "int",
                    "None",
                    "str"
                ],
                "quantity": [
                    "int",
                    "None",
                    "str"
                ],
                "sequence": [
                    "None",
                    "str",
                    "int",
                    "typing.TextIO"
                ],
                "ordertype": [],
                "timeInForce": []
            }
        },
        "TransactionBase.generate_stdNewOrderMsg": {
            "name": "generate_stdNewOrderMsg",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TransactionBase.get_cancel_order_msg": {
            "name": "get_cancel_order_msg",
            "location": 119,
            "return": [
                "str",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "refid": [
                    "str",
                    "bool"
                ]
            }
        },
        "TransactionBase.get_transfer_msg": {
            "name": "get_transfer_msg",
            "location": 135,
            "return": [
                "str",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "to_address": [
                    "str",
                    "None",
                    "int"
                ],
                "symbol": [],
                "amount": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "TransactionBase.get_multi_transfer_msg": {
            "name": "get_multi_transfer_msg",
            "location": 169,
            "return": [
                "str",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "to_address": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "int"
                ],
                "transfers": [
                    "str",
                    "list[dict[, ]]",
                    "list[str]"
                ]
            }
        },
        "TransactionBase.get_freeze_token_msg": {
            "name": "get_freeze_token_msg",
            "location": 202,
            "return": [
                "str",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "None"
                ],
                "amount": [
                    "str",
                    "int"
                ]
            }
        },
        "TransactionBase.get_unfreeze_token_msg": {
            "name": "get_unfreeze_token_msg",
            "location": 219,
            "return": [
                "str",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "None"
                ],
                "amount": [
                    "str",
                    "int"
                ]
            }
        },
        "TransactionBase.get_vote_msg": {
            "name": "get_vote_msg",
            "location": 236,
            "return": [
                "str",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "proposal_id": [
                    "int",
                    "str"
                ],
                "option": [
                    "str",
                    "int",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "TransactionBase.get_issue_msg": {
            "name": "get_issue_msg",
            "location": 254,
            "return": [
                "str",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "symbol": [
                    "str",
                    "None",
                    "typing.Callable[..., T]",
                    "bool",
                    "set[str]"
                ],
                "supply": [],
                "mintable": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "bool",
                    "dict[str, str]",
                    "dict[str, L]"
                ]
            }
        },
        "TransactionBase.get_mint_msg": {
            "name": "get_mint_msg",
            "location": 276,
            "return": [
                "str",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "bool",
                    "typing.Hashable"
                ],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "TransactionBase.get_burn_msg": {
            "name": "get_burn_msg",
            "location": 291,
            "return": [
                "str",
                "list[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "bool",
                    "typing.Hashable"
                ],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "TransactionBase.get_sign_message": {
            "name": "get_sign_message",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionBase.update_signature": {
            "name": "update_signature",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "pubkey": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "typing.BinaryIO",
                    "bytes",
                    "list[]"
                ],
                "signature": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "TransactionBase.pubkey_to_msg": {
            "name": "pubkey_to_msg",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "pubkey": [
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "TransactionBase.generate_stdSignatureMsg": {
            "name": "generate_stdSignatureMsg",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "pubkey_bytes": [
                    "bytes",
                    "int",
                    "dict[str, int]"
                ],
                "signature": [
                    "str",
                    "int",
                    "bytes",
                    "bytearray",
                    "list[int]",
                    "float"
                ]
            }
        },
        "TransactionBase.generate_StdTxMsg": {
            "name": "generate_StdTxMsg",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransactionBase.___repr__": {
            "name": "___repr__",
            "location": 350,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binance-chain-python-master/binancechain/transaction_pb2.py": {},
    "binance-chain-python-master/binancechain/wallet.py": {
        "Wallet.create_wallet": {
            "name": "create_wallet",
            "location": 20,
            "return": [
                "Wallet"
            ],
            "arguments": {
                "password": [
                    "typing.Text"
                ],
                "testnet": [
                    "bool"
                ]
            }
        },
        "Wallet.create_keystore": {
            "name": "create_keystore",
            "location": 29,
            "return": [],
            "arguments": {
                "password": [
                    "typing.Text"
                ]
            }
        },
        "Wallet.create_wallet_mnemonic": {
            "name": "create_wallet_mnemonic",
            "location": 42,
            "return": [
                "Wallet"
            ],
            "arguments": {
                "language": [
                    "typing.Text"
                ],
                "password": [
                    "typing.Text"
                ],
                "testnet": [
                    "bool"
                ]
            }
        },
        "Wallet.wallet_from_keystore": {
            "name": "wallet_from_keystore",
            "location": 55,
            "return": [
                "Wallet"
            ],
            "arguments": {
                "keystore": [
                    "str",
                    "bytes",
                    "list[str]"
                ],
                "password": [
                    "typing.Text"
                ],
                "testnet": [
                    "bool"
                ]
            }
        },
        "Wallet.wallet_from_privatekey": {
            "name": "wallet_from_privatekey",
            "location": 64,
            "return": [
                "Wallet"
            ],
            "arguments": {
                "privatekey": [
                    "str",
                    "list[str]",
                    "typing.AnyStr"
                ],
                "password": [
                    "typing.Text"
                ],
                "testnet": [
                    "bool"
                ]
            }
        },
        "Wallet.wallet_from_mnemonic": {
            "name": "wallet_from_mnemonic",
            "location": 72,
            "return": [
                "Wallet"
            ],
            "arguments": {
                "words": [
                    "str",
                    "bool",
                    "set[str]"
                ],
                "password": [
                    "typing.Text"
                ],
                "testnet": [
                    "bool"
                ]
            }
        },
        "Wallet.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "testnet": [
                    "bool"
                ],
                "mnemonic": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Wallet.get_address": {
            "name": "get_address",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Wallet.get_privatekey": {
            "name": "get_privatekey",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Wallet.get_publickey": {
            "name": "get_publickey",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Wallet.get_mnemonic": {
            "name": "get_mnemonic",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Wallet.sign": {
            "name": "sign",
            "location": 110,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "Wallet.verify_signature": {
            "name": "verify_signature",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [
                    "int"
                ],
                "signature": [
                    "int",
                    "bytearray",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "binance-chain-python-master/binancechain/websocket.py": {
        "WebSocket.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "testnet": [
                    "bool"
                ],
                "keepalive": [
                    "bool"
                ],
                "loop": [
                    "None",
                    "bool"
                ],
                "url": [
                    "None",
                    "str",
                    "typing.Mapping",
                    "dict[str, str]",
                    "dict[, ]",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "WebSocket.on": {
            "name": "on",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "list[list[int]]",
                    "list[]",
                    "list[int]",
                    "dict[str, list[]]",
                    "bool"
                ],
                "func": [
                    "None",
                    "float",
                    "int",
                    "str",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "WebSocket.start": {
            "name": "start",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "on_open": [
                    "None",
                    "str",
                    "int",
                    "typing.Iterator"
                ],
                "on_error": [
                    "None",
                    "str",
                    "int",
                    "typing.Iterator"
                ],
                "loop": [
                    "None",
                    "bool",
                    "list[str]",
                    "str"
                ]
            }
        },
        "WebSocket.subscribe": {
            "name": "subscribe",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "dict[, ]",
                    "str",
                    "int"
                ],
                "symbols": [
                    "None",
                    "list[str]",
                    "str",
                    "typing.Callable[dict[, ], None]"
                ],
                "address": [
                    "None",
                    "int",
                    "str",
                    "bytes"
                ],
                "callback": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "WebSocket.unsubscribe": {
            "name": "unsubscribe",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "int"
                ],
                "symbols": [
                    "None",
                    "list[str]",
                    "str",
                    "typing.Callable[dict[, ], None]"
                ]
            }
        },
        "WebSocket.subscribe_user_orders": {
            "name": "subscribe_user_orders",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int"
                ],
                "address": [
                    "None",
                    "int"
                ]
            }
        },
        "WebSocket.subscribe_user_accounts": {
            "name": "subscribe_user_accounts",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int"
                ],
                "address": [
                    "None",
                    "int"
                ]
            }
        },
        "WebSocket.subscribe_user_transfers": {
            "name": "subscribe_user_transfers",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "int"
                ],
                "address": [
                    "None",
                    "int"
                ]
            }
        },
        "WebSocket.subscribe_trades": {
            "name": "subscribe_trades",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbols": [],
                "callback": []
            }
        },
        "WebSocket.subscribe_market_diff": {
            "name": "subscribe_market_diff",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbols": [],
                "callback": []
            }
        },
        "WebSocket.subscribe_market_depth": {
            "name": "subscribe_market_depth",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbols": [],
                "callback": []
            }
        },
        "WebSocket.subscribe_kline": {
            "name": "subscribe_kline",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "symbols": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "callback": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "WebSocket.subscribe_ticker": {
            "name": "subscribe_ticker",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbols": [],
                "callback": []
            }
        },
        "WebSocket.subscribe_all_tickers": {
            "name": "subscribe_all_tickers",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "WebSocket.subscribe_mini_ticker": {
            "name": "subscribe_mini_ticker",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbols": [],
                "callback": []
            }
        },
        "WebSocket.subscribe_all_mini_tickers": {
            "name": "subscribe_all_mini_tickers",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "WebSocket.subscribe_blockheight": {
            "name": "subscribe_blockheight",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "float",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "WebSocket.keepalive": {
            "name": "keepalive",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocket.close": {
            "name": "close",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "binance-chain-python-master/binancechain/__init__.py": {},
    "binance-chain-python-master/examples/cli.py": {
        "run": {
            "name": "run",
            "location": 17,
            "return": [],
            "arguments": {
                "coro": [
                    "collections.abc.Coroutine",
                    "str",
                    "None"
                ]
            }
        },
        "dex_run": {
            "name": "dex_run",
            "location": 23,
            "return": [
                "list[]",
                "list[str]",
                "typing.Pattern",
                "set[]",
                "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                "set[str]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "time": {
            "name": "time",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "node_info": {
            "name": "node_info",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fees": {
            "name": "fees",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "validators": {
            "name": "validators",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "peers": {
            "name": "peers",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tokens": {
            "name": "tokens",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "markets": {
            "name": "markets",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "depth": {
            "name": "depth",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "broadcast": {
            "name": "broadcast",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "klines": {
            "name": "klines",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "closed_orders": {
            "name": "closed_orders",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "open_orders": {
            "name": "open_orders",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ticker": {
            "name": "ticker",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "trades": {
            "name": "trades",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "block_exchange_fee": {
            "name": "block_exchange_fee",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "transactions": {
            "name": "transactions",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "binance-chain-python-master/examples/http_examples.py": {},
    "binance-chain-python-master/examples/noderpc_examples.py": {},
    "binance-chain-python-master/examples/transaction_examples.py": {},
    "binance-chain-python-master/examples/wallet_examples.py": {},
    "binance-chain-python-master/examples/websocket_decorator.py": {},
    "binance-chain-python-master/examples/websocket_examples.py": {
        "callback": {
            "name": "callback",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int"
                ]
            }
        },
        "on_open": {
            "name": "on_open",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "user_orders": {
            "name": "user_orders",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "user_accounts": {
            "name": "user_accounts",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "dict[, ]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "user_transfers": {
            "name": "user_transfers",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "on_error": {
            "name": "on_error",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        }
    },
    "binance-chain-python-master/test/test_httpclient.py": {},
    "binance-chain-python-master/test/test_noderpc.py": {
        "on_error": {
            "name": "on_error",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_ws_open_close.on_open": {
            "name": "on_open",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ws_subscribe.on_msg": {
            "name": "on_msg",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_ws_subscribe.on_open": {
            "name": "on_open",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ws_unsubscribe.on_msg": {
            "name": "on_msg",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_ws_unsubscribe.on_open": {
            "name": "on_open",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ws_unsubscribe_all.on_msg": {
            "name": "on_msg",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_ws_unsubscribe_all.on_open": {
            "name": "on_open",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "binance-chain-python-master/test/test_ratelimit.py": {},
    "binance-chain-python-master/test/test_transaction.py": {},
    "binance-chain-python-master/test/test_wallet.py": {},
    "binance-chain-python-master/test/test_websocket.py": {
        "on_error": {
            "name": "on_error",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_open_close.on_open": {
            "name": "on_open",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_trades.callback": {
            "name": "callback",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_trades.on_open": {
            "name": "on_open",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_market_diff.callback": {
            "name": "callback",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_market_diff.on_open": {
            "name": "on_open",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_market_depth.callback": {
            "name": "callback",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_market_depth.on_open": {
            "name": "on_open",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kline.callback": {
            "name": "callback",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_kline.on_open": {
            "name": "on_open",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tickers.callback": {
            "name": "callback",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_tickers.on_open": {
            "name": "on_open",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_tickers.callback": {
            "name": "callback",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_all_tickers.on_open": {
            "name": "on_open",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mini_ticker.callback": {
            "name": "callback",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_mini_ticker.on_open": {
            "name": "on_open",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_mini_ticker.callback": {
            "name": "callback",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_all_mini_ticker.on_open": {
            "name": "on_open",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_blockheight.callback": {
            "name": "callback",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_blockheight.on_open": {
            "name": "on_open",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_keepalive.on_open": {
            "name": "on_open",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unsubscribe.callback": {
            "name": "callback",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "test_unsubscribe.on_open": {
            "name": "on_open",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decorator.callback": {
            "name": "callback",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
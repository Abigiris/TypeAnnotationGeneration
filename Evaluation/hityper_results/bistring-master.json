{
    "bistring-master/docs/conf.py": {
        "npm_install": {
            "name": "npm_install",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ],
                "config": [
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "bistring-master/js/scripts/generate_unicode.py": {
        "escape": {
            "name": "escape",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cp": [
                    "int"
                ]
            }
        },
        "gen_boundary_regex": {
            "name": "gen_boundary_regex",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "normalizer": []
            }
        },
        "export_boundary_regex": {
            "name": "export_boundary_regex",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [],
                "form": [
                    "typing.IO",
                    "typing.Callable[, ]",
                    "memoryview",
                    "str"
                ]
            }
        }
    },
    "bistring-master/python/setup.py": {
        "readme": {
            "name": "readme",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "bistring-master/python/bistring/_alignment.py": {
        "Alignment.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "Alignment._create": {
            "name": "_create",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [],
                "original": [],
                "modified": []
            }
        },
        "Alignment.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alignment.__repr__": {
            "name": "__repr__",
            "location": 119,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alignment.__eq__": {
            "name": "__eq__",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Alignment._parse_bounds": {
            "name": "_parse_bounds",
            "location": 136,
            "return": [
                "tuple[]",
                "tuple[int]"
            ],
            "arguments": {
                "cls": [],
                "args": []
            }
        },
        "Alignment._parse_optional_bounds": {
            "name": "_parse_optional_bounds",
            "location": 158,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "cls": [],
                "args": []
            }
        },
        "Alignment.identity": {
            "name": "identity",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Alignment._infer_costs": {
            "name": "_infer_costs",
            "location": 200,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "cls": [],
                "original": [],
                "modified": [],
                "cost_fn": []
            }
        },
        "Alignment._infer_matrix": {
            "name": "_infer_matrix",
            "location": 230,
            "return": [],
            "arguments": {
                "cls": [],
                "original": [],
                "modified": [],
                "cost_fn": []
            }
        },
        "Alignment._infer_recursive": {
            "name": "_infer_recursive",
            "location": 276,
            "return": [],
            "arguments": {
                "cls": [],
                "original": [],
                "modified": [],
                "cost_fn": []
            }
        },
        "Alignment.infer": {
            "name": "infer",
            "location": 304,
            "return": [
                "Alignment"
            ],
            "arguments": {
                "cls": [],
                "original": [],
                "modified": [],
                "cost_fn": [
                    "None"
                ]
            }
        },
        "Alignment.__iter__": {
            "name": "__iter__",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alignment.__len__": {
            "name": "__len__",
            "location": 347,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alignment.__getitem__": {
            "name": "__getitem__",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Alignment.shift": {
            "name": "shift",
            "location": 378,
            "return": [],
            "arguments": {
                "self": [],
                "delta_o": [],
                "delta_m": []
            }
        },
        "Alignment._search": {
            "name": "_search",
            "location": 395,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "start": [],
                "stop": []
            }
        },
        "Alignment._bounds": {
            "name": "_bounds",
            "location": 407,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "target": [],
                "args": []
            }
        },
        "Alignment.original_bounds": {
            "name": "original_bounds",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alignment.original_range": {
            "name": "original_range",
            "location": 439,
            "return": [
                "range"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alignment.original_slice": {
            "name": "original_slice",
            "location": 445,
            "return": [
                "range"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alignment.modified_bounds": {
            "name": "modified_bounds",
            "location": 451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alignment.modified_range": {
            "name": "modified_range",
            "location": 475,
            "return": [
                "range"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alignment.modified_slice": {
            "name": "modified_slice",
            "location": 481,
            "return": [
                "range"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alignment.slice_by_original": {
            "name": "slice_by_original",
            "location": 487,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alignment.slice_by_modified": {
            "name": "slice_by_modified",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Alignment.__add__": {
            "name": "__add__",
            "location": 525,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Alignment.compose": {
            "name": "compose",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Alignment.inverse": {
            "name": "inverse",
            "location": 585,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "bistring-master/python/bistring/_bistr.py": {
        "bistr.__new__": {
            "name": "__new__",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": [],
                "original": [],
                "modified": [],
                "alignment": []
            }
        },
        "bistr.infer": {
            "name": "infer",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [],
                "original": [],
                "modified": [],
                "cost_fn": []
            }
        },
        "bistr.__str__": {
            "name": "__str__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bistr.__repr__": {
            "name": "__repr__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bistr.__len__": {
            "name": "__len__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bistr.__eq__": {
            "name": "__eq__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "bistr.__add__": {
            "name": "__add__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "bistr.__radd__": {
            "name": "__radd__",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "bistr.__iter__": {
            "name": "__iter__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bistr.__getitem__": {
            "name": "__getitem__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "bistr.__setattr__": {
            "name": "__setattr__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "bistr.__delattr__": {
            "name": "__delattr__",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "bistr.inverse": {
            "name": "inverse",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bistr.chunks": {
            "name": "chunks",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bistr.count": {
            "name": "count",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [],
                "end": []
            }
        },
        "bistr.find": {
            "name": "find",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [],
                "end": []
            }
        },
        "bistr.find_bounds": {
            "name": "find_bounds",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [],
                "end": []
            }
        },
        "bistr.rfind": {
            "name": "rfind",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [],
                "end": []
            }
        },
        "bistr.rfind_bounds": {
            "name": "rfind_bounds",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [],
                "end": []
            }
        },
        "bistr.index": {
            "name": "index",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [],
                "end": []
            }
        },
        "bistr.index_bounds": {
            "name": "index_bounds",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [],
                "end": []
            }
        },
        "bistr.rindex": {
            "name": "rindex",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [],
                "end": []
            }
        },
        "bistr.rindex_bounds": {
            "name": "rindex_bounds",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "sub": [],
                "start": [],
                "end": []
            }
        },
        "bistr.startswith": {
            "name": "startswith",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "start": [],
                "end": []
            }
        },
        "bistr.endswith": {
            "name": "endswith",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "suffix": [],
                "start": [],
                "end": []
            }
        },
        "bistr._append_alignment": {
            "name": "_append_alignment",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "alist": [],
                "alignment": []
            }
        },
        "bistr.join": {
            "name": "join",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "bistr._find_whitespace": {
            "name": "_find_whitespace",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "bistr.split": {
            "name": "split",
            "location": 409,
            "return": [],
            "arguments": {
                "self": [],
                "sep": [],
                "maxsplit": []
            }
        },
        "bistr.partition": {
            "name": "partition",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "sep": []
            }
        },
        "bistr.rpartition": {
            "name": "rpartition",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "sep": []
            }
        },
        "bistr.center": {
            "name": "center",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "fillchar": []
            }
        },
        "bistr.ljust": {
            "name": "ljust",
            "location": 473,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "fillchar": []
            }
        },
        "bistr.rjust": {
            "name": "rjust",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "width": [],
                "fillchar": []
            }
        },
        "bistr._builder": {
            "name": "_builder",
            "location": 495,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bistr.casefold": {
            "name": "casefold",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bistr.lower": {
            "name": "lower",
            "location": 514,
            "return": [],
            "arguments": {
                "self": [],
                "locale": []
            }
        },
        "bistr.upper": {
            "name": "upper",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "locale": []
            }
        },
        "bistr.title": {
            "name": "title",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "locale": []
            }
        },
        "bistr.capitalize": {
            "name": "capitalize",
            "location": 562,
            "return": [],
            "arguments": {
                "self": [],
                "locale": []
            }
        },
        "bistr.swapcase": {
            "name": "swapcase",
            "location": 588,
            "return": [],
            "arguments": {
                "self": [],
                "locale": []
            }
        },
        "bistr.expandtabs": {
            "name": "expandtabs",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "tabsize": []
            }
        },
        "bistr.replace": {
            "name": "replace",
            "location": 656,
            "return": [],
            "arguments": {
                "self": [],
                "old": [],
                "new": [],
                "count": []
            }
        },
        "bistr.sub": {
            "name": "sub",
            "location": 679,
            "return": [],
            "arguments": {
                "self": [],
                "regex": [],
                "repl": []
            }
        },
        "bistr._should_strip": {
            "name": "_should_strip",
            "location": 694,
            "return": [],
            "arguments": {
                "self": [],
                "c": [],
                "chars": []
            }
        },
        "bistr.strip": {
            "name": "strip",
            "location": 700,
            "return": [],
            "arguments": {
                "self": [],
                "chars": []
            }
        },
        "bistr.lstrip": {
            "name": "lstrip",
            "location": 720,
            "return": [],
            "arguments": {
                "self": [],
                "chars": []
            }
        },
        "bistr.rstrip": {
            "name": "rstrip",
            "location": 735,
            "return": [],
            "arguments": {
                "self": [],
                "chars": []
            }
        },
        "bistr.normalize": {
            "name": "normalize",
            "location": 750,
            "return": [],
            "arguments": {
                "self": [],
                "form": []
            }
        }
    },
    "bistring-master/python/bistring/_builder.py": {
        "BistrBuilder.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "original": []
            }
        },
        "BistrBuilder.original": {
            "name": "original",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BistrBuilder.current": {
            "name": "current",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BistrBuilder.modified": {
            "name": "modified",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BistrBuilder.alignment": {
            "name": "alignment",
            "location": 98,
            "return": [
                "Alignment"
            ],
            "arguments": {
                "self": []
            }
        },
        "BistrBuilder.position": {
            "name": "position",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BistrBuilder.remaining": {
            "name": "remaining",
            "location": 112,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BistrBuilder.is_complete": {
            "name": "is_complete",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BistrBuilder.peek": {
            "name": "peek",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "BistrBuilder._advance": {
            "name": "_advance",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ocount": [],
                "mcount": []
            }
        },
        "BistrBuilder.skip": {
            "name": "skip",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "BistrBuilder.skip_rest": {
            "name": "skip_rest",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BistrBuilder.insert": {
            "name": "insert",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "BistrBuilder.discard": {
            "name": "discard",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "BistrBuilder.discard_rest": {
            "name": "discard_rest",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BistrBuilder.replace": {
            "name": "replace",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "repl": []
            }
        },
        "BistrBuilder.append": {
            "name": "append",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bs": []
            }
        },
        "BistrBuilder._match": {
            "name": "_match",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "regex": []
            }
        },
        "BistrBuilder._search": {
            "name": "_search",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "regex": []
            }
        },
        "BistrBuilder._finditer": {
            "name": "_finditer",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "regex": []
            }
        },
        "BistrBuilder.skip_match": {
            "name": "skip_match",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "regex": []
            }
        },
        "BistrBuilder.discard_match": {
            "name": "discard_match",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "regex": []
            }
        },
        "BistrBuilder.replace_match": {
            "name": "replace_match",
            "location": 235,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "regex": [],
                "repl": []
            }
        },
        "BistrBuilder.replace_next": {
            "name": "replace_next",
            "location": 255,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "regex": [],
                "repl": []
            }
        },
        "BistrBuilder.replace_all": {
            "name": "replace_all",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": [],
                "repl": []
            }
        },
        "BistrBuilder.build": {
            "name": "build",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BistrBuilder.rewind": {
            "name": "rewind",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bistring-master/python/bistring/_icu.py": {
        "_edit": {
            "name": "_edit",
            "location": 11,
            "return": [],
            "arguments": {
                "bs": [
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "op": [
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "typing.Type"
                ],
                "locale": [
                    "None",
                    "int",
                    "str",
                    "list[]"
                ]
            }
        },
        "casefold": {
            "name": "casefold",
            "location": 32,
            "return": [],
            "arguments": {
                "bs": [
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "lower": {
            "name": "lower",
            "location": 36,
            "return": [],
            "arguments": {
                "bs": [
                    "str",
                    "None",
                    "bytes"
                ],
                "locale": [
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "upper": {
            "name": "upper",
            "location": 40,
            "return": [],
            "arguments": {
                "bs": [
                    "str",
                    "None",
                    "bytes",
                    "bool"
                ],
                "locale": [
                    "str",
                    "None",
                    "bytes",
                    "bool"
                ]
            }
        },
        "title": {
            "name": "title",
            "location": 44,
            "return": [],
            "arguments": {
                "bs": [
                    "str",
                    "None",
                    "bytes"
                ],
                "locale": [
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "_normalize": {
            "name": "_normalize",
            "location": 48,
            "return": [],
            "arguments": {
                "normalizer": [
                    "typing.Sequence[int]",
                    "typing.Sequence[dict[, ]]",
                    "bool",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[C]",
                    "dict[int, bool]",
                    "bytes",
                    "list[str]"
                ],
                "bs": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 75,
            "return": [],
            "arguments": {
                "bs": [
                    "bytes",
                    "str",
                    "None"
                ],
                "form": [
                    "dict[str, typing.Any]",
                    "float",
                    "dict[, ]",
                    "bool"
                ]
            }
        }
    },
    "bistring-master/python/bistring/_infer.py": {
        "heuristic_infer": {
            "name": "heuristic_infer",
            "location": 123,
            "return": [],
            "arguments": {
                "original": [
                    "int",
                    "str"
                ],
                "modified": [
                    "int",
                    "str"
                ]
            }
        },
        "AugmentedChar.cost_fn": {
            "name": "cost_fn",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "a": [
                    "int",
                    "float",
                    "None",
                    "list[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "None",
                    "list[int]"
                ]
            }
        },
        "AugmentedString.augment": {
            "name": "augment",
            "location": 96,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "float"
                ],
                "original": [
                    "int",
                    "list[]",
                    "dict[str, typing.Any]",
                    "float"
                ]
            }
        }
    },
    "bistring-master/python/bistring/_regex.py": {
        "compile_regex": {
            "name": "compile_regex",
            "location": 10,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "regex": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "expand_template": {
            "name": "expand_template",
            "location": 17,
            "return": [],
            "arguments": {
                "match": [],
                "repl": [
                    "str",
                    "dict[, ]",
                    "typing.Match"
                ]
            }
        }
    },
    "bistring-master/python/bistring/_token.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "start": [],
                "end": []
            }
        },
        "Token.original": {
            "name": "original",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.modified": {
            "name": "modified",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Token.slice": {
            "name": "slice",
            "location": 79,
            "return": [],
            "arguments": {
                "cls": [],
                "text": [],
                "start": [],
                "end": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 92,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [],
                "tokens": []
            }
        },
        "Tokenization.infer": {
            "name": "infer",
            "location": 138,
            "return": [],
            "arguments": {
                "cls": [],
                "text": [],
                "tokens": []
            }
        },
        "Tokenization.__iter__": {
            "name": "__iter__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.__len__": {
            "name": "__len__",
            "location": 171,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.__getitem__": {
            "name": "__getitem__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Tokenization.__str__": {
            "name": "__str__",
            "location": 203,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.__repr__": {
            "name": "__repr__",
            "location": 207,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.substring": {
            "name": "substring",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.text_bounds": {
            "name": "text_bounds",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.original_bounds": {
            "name": "original_bounds",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.bounds_for_text": {
            "name": "bounds_for_text",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.bounds_for_original": {
            "name": "bounds_for_original",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.slice_by_text": {
            "name": "slice_by_text",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.slice_by_original": {
            "name": "slice_by_original",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.snap_text_bounds": {
            "name": "snap_text_bounds",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tokenization.snap_original_bounds": {
            "name": "snap_original_bounds",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tokenizer.tokenize": {
            "name": "tokenize",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "RegexTokenizer.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": []
            }
        },
        "RegexTokenizer.tokenize": {
            "name": "tokenize",
            "location": 316,
            "return": [
                "Tokenization"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "SplittingTokenizer.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regex": []
            }
        },
        "SplittingTokenizer.tokenize": {
            "name": "tokenize",
            "location": 344,
            "return": [
                "Tokenization"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "_IcuTokenizer.__init__": {
            "name": "__init__",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locale": [],
                "constructor": []
            }
        },
        "_IcuTokenizer._break_iterator": {
            "name": "_break_iterator",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_IcuTokenizer.tokenize": {
            "name": "tokenize",
            "location": 385,
            "return": [
                "Tokenization"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "_IcuTokenizer._check_token": {
            "name": "_check_token",
            "location": 407,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "CharacterTokenizer.__init__": {
            "name": "__init__",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locale": []
            }
        },
        "WordTokenizer.__init__": {
            "name": "__init__",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locale": []
            }
        },
        "WordTokenizer._check_token": {
            "name": "_check_token",
            "location": 452,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "SentenceTokenizer.__init__": {
            "name": "__init__",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "locale": []
            }
        }
    },
    "bistring-master/python/bistring/_typing.py": {},
    "bistring-master/python/bistring/__init__.py": {},
    "bistring-master/python/tests/test_alignment.py": {
        "test_empty": {
            "name": "test_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_indexing": {
            "name": "test_indexing",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_identity": {
            "name": "test_identity",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aligning": {
            "name": "test_aligning",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_canonicalization": {
            "name": "test_canonicalization",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_test_composition": {
            "name": "_test_composition",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "first": [],
                "second": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_compose": {
            "name": "test_compose",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_test_identity_composition": {
            "name": "_test_identity_composition",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "alignment": []
            }
        },
        "test_compose_identity": {
            "name": "test_compose_identity",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_infer": {
            "name": "test_infer",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bistring-master/python/tests/test_bistr.py": {
        "test_new": {
            "name": "test_new",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_infer": {
            "name": "test_infer",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_concat": {
            "name": "test_concat",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_index": {
            "name": "test_find_index",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rfind_rindex": {
            "name": "test_rfind_rindex",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_starts_ends_with": {
            "name": "test_starts_ends_with",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_justify": {
            "name": "test_justify",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_join": {
            "name": "test_join",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_split": {
            "name": "test_split",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_partition": {
            "name": "test_partition",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_expandtabs": {
            "name": "test_expandtabs",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_strip": {
            "name": "test_strip",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_casefold": {
            "name": "test_casefold",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lower": {
            "name": "test_lower",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_upper": {
            "name": "test_upper",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_title": {
            "name": "test_title",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_capitalize": {
            "name": "test_capitalize",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_swapcase": {
            "name": "test_swapcase",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_normalize": {
            "name": "test_normalize",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_readme": {
            "name": "test_readme",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_equality": {
            "name": "test_equality",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_alternative_regex": {
            "name": "test_alternative_regex",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bistring-master/python/tests/test_builder.py": {
        "test_chunk_words": {
            "name": "test_chunk_words",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chunk_chars": {
            "name": "test_chunk_chars",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty_string": {
            "name": "test_empty_string",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_iterative": {
            "name": "test_iterative",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_matches": {
            "name": "test_replace_matches",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_replace_backreference": {
            "name": "test_replace_backreference",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_append": {
            "name": "test_append",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bistring-master/python/tests/test_token.py": {
        "test_tokenization": {
            "name": "test_tokenization",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_infer": {
            "name": "test_infer",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_regex_tokenizer": {
            "name": "test_regex_tokenizer",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_splitting_tokenizer": {
            "name": "test_splitting_tokenizer",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_character_tokenizer": {
            "name": "test_character_tokenizer",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_word_tokenizer": {
            "name": "test_word_tokenizer",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sentence_tokenizer": {
            "name": "test_sentence_tokenizer",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bistring-master/python/tests/__init__.py": {}
}
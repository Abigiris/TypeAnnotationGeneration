{
    "blanketdb-master/blanketdb.py": {
        "_parse_form": {
            "name": "_parse_form",
            "location": 22,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "form_s": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "_parse_dt": {
            "name": "_parse_dt",
            "location": 41,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "list[bytes]"
                ]
            }
        },
        "_json_default": {
            "name": "_json_default",
            "location": 83,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_serialize_json": {
            "name": "_serialize_json",
            "location": 89,
            "return": [],
            "arguments": {
                "data": [
                    "int",
                    "None",
                    "bytes",
                    "str",
                    "dict[, ]"
                ],
                "indent": [
                    "int"
                ]
            }
        },
        "_j": {
            "name": "_j",
            "location": 94,
            "return": [],
            "arguments": {
                "obj_to_serialize": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BlanketDB.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_string": [
                    "str"
                ],
                "now": []
            }
        },
        "BlanketDB.store": {
            "name": "store",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "typing.Type"
                ],
                "bucket": [
                    "typing.Text"
                ]
            }
        },
        "BlanketDB.store_dict": {
            "name": "store_dict",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "bucket": [
                    "typing.Text"
                ]
            }
        },
        "BlanketDB.__getitem__": {
            "name": "__getitem__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "int",
                    "str"
                ]
            }
        },
        "BlanketDB.query": {
            "name": "query",
            "location": 169,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "since_id": [
                    "None",
                    "str",
                    "int",
                    "bytes"
                ],
                "since": [
                    "None",
                    "str",
                    "int",
                    "list[dict[, ]]",
                    "dict[str, dict[str, str]]"
                ],
                "before_id": [
                    "None",
                    "int",
                    "str",
                    "float"
                ],
                "before": [
                    "None",
                    "str",
                    "typing.Sequence[str]",
                    "dict[str, str]",
                    "bool"
                ],
                "limit": [
                    "int"
                ],
                "newest_first": [
                    "bool"
                ]
            }
        },
        "BlanketDB.__iter__": {
            "name": "__iter__",
            "location": 196,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlanketDB.__delitem__": {
            "name": "__delitem__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry_id": [
                    "int",
                    "tuple[typing.Union[str,None,str]]",
                    "str"
                ]
            }
        },
        "BlanketDB.delete": {
            "name": "delete",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "bucket": [
                    "str"
                ],
                "since_id": [
                    "None",
                    "str",
                    "int",
                    "set[int]"
                ],
                "since": [
                    "None",
                    "int"
                ],
                "before_id": [
                    "None",
                    "int",
                    "str",
                    "dict[int, dict[str, float]]"
                ],
                "before": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "BlanketDB.__call__": {
            "name": "__call__",
            "location": 232,
            "return": [
                "typing.Generator[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [],
                "start_response": [
                    "None",
                    "typing.Callable[str, T]"
                ]
            }
        },
        "BlanketDB.__call__.start_json_response": {
            "name": "start_json_response",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "status": [],
                "headers": [
                    "list[tuple[typing.Text]]"
                ]
            }
        }
    },
    "blanketdb-master/blanketdb_wsgi.py": {},
    "blanketdb-master/setup.py": {},
    "blanketdb-master/docs/conf.py": {},
    "blanketdb-master/tests/test_actual_api_capable.py": {
        "ActualApiAdapter.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str"
                ]
            }
        },
        "ActualApiAdapter.request_qs": {
            "name": "request_qs",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "None",
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "path": [
                    "str",
                    "None",
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "params": [
                    "str",
                    "None",
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "exptected_status": [
                    "int",
                    "float",
                    "bytes",
                    "list[int]",
                    "list[str]",
                    "tuple[]",
                    "typing.Callable[None, None]"
                ]
            }
        },
        "ActualApiAdapter.request_body": {
            "name": "request_body",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "path": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "body": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "exptected_status": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "ActualApiAdapter.get": {
            "name": "get",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "params": [
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "ActualApiAdapter.post": {
            "name": "post",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "body": [
                    "None",
                    "str"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "ActualApiAdapter.post_json": {
            "name": "post_json",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "body": [
                    "None",
                    "str"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "ActualApiAdapter.put": {
            "name": "put",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ],
                "body": [
                    "None",
                    "str",
                    "bool"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "ActualApiAdapter.delete": {
            "name": "delete",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "params": [
                    "None",
                    "str"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "TestBlanketDBActualHttpApiCapable.setUp": {
            "name": "setUp",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBActualHttpApiCapable.tearDown": {
            "name": "tearDown",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBActualHttpApiCapable.test_basic_web_requests": {
            "name": "test_basic_web_requests",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBActualHttpApiCapable.test_method_not_allowed_requests": {
            "name": "test_method_not_allowed_requests",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBActualHttpApiCapable.test_create_entry_requests": {
            "name": "test_create_entry_requests",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBActualHttpApiCapable.test_query_requests": {
            "name": "test_query_requests",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBActualHttpApiCapable.test_delete_requests": {
            "name": "test_delete_requests",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blanketdb-master/tests/test_blanketdb_http_api.py": {
        "TestBlanketDBHttpApi.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBHttpApi.tearDown": {
            "name": "tearDown",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBHttpApi.test_basic_web_requests": {
            "name": "test_basic_web_requests",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBHttpApi.test_method_not_allowed_requests": {
            "name": "test_method_not_allowed_requests",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBHttpApi.test_create_entry_requests": {
            "name": "test_create_entry_requests",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBHttpApi.test_query_requests": {
            "name": "test_query_requests",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBHttpApi.test_delete_requests": {
            "name": "test_delete_requests",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blanketdb-master/tests/test_blanketdb_python_api.py": {
        "TestBlanketDBPythonApi.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBPythonApi.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBPythonApi.test_storing_from_python": {
            "name": "test_storing_from_python",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBPythonApi.test_query_from_python": {
            "name": "test_query_from_python",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlanketDBPythonApi.test_delete_from_python": {
            "name": "test_delete_from_python",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blanketdb-master/tests/test_helper_functions.py": {
        "is_close": {
            "name": "is_close",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "dt1": [],
                "dt2": [],
                "max_diff_sec": [
                    "int"
                ]
            }
        },
        "TestHelperFunctions.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelperFunctions.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelperFunctions.test_parse_form": {
            "name": "test_parse_form",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelperFunctions.test_parse_date": {
            "name": "test_parse_date",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelperFunctions.test_serialize_json": {
            "name": "test_serialize_json",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHelperFunctions.test_j": {
            "name": "test_j",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "blanketdb-master/tests/__init__.py": {}
}
{
    "bopt-master/pajp.py": {},
    "bopt-master/setup.py": {},
    "bopt-master/benchmarks/measure_funs.py": {},
    "bopt-master/benchmarks/run_single_fun.py": {},
    "bopt-master/bopt/basic_types.py": {
        "Bound.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "float",
                    "int",
                    "tuple[]"
                ],
                "high": [
                    "float",
                    "int",
                    "tuple[]"
                ],
                "buckets": [
                    "float",
                    "int",
                    "tuple[]"
                ]
            }
        },
        "Bound.map": {
            "name": "map",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "Bound.inverse_map": {
            "name": "inverse_map",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "Bound.is_discrete": {
            "name": "is_discrete",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bound.is_logscale": {
            "name": "is_logscale",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bound.sample": {
            "name": "sample",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bound.validate": {
            "name": "validate",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "Bound.should_transform": {
            "name": "should_transform",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bound.parse": {
            "name": "parse",
            "location": 60,
            "return": [
                "int",
                "tuple[typing.Union[str,int]]",
                "complex",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "Bound.scipy_bound_tuple": {
            "name": "scipy_bound_tuple",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bound.compare_values": {
            "name": "compare_values",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "bool"
                ],
                "b": [
                    "str",
                    "bool"
                ]
            }
        },
        "Bound.maybe_round": {
            "name": "maybe_round",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "Bound.grid": {
            "name": "grid",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "resolution": [
                    "Exception",
                    "int"
                ]
            }
        },
        "Bound.step_size": {
            "name": "step_size",
            "location": 86,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "buckets": [
                    "int"
                ]
            }
        },
        "Bound.compute_bins": {
            "name": "compute_bins",
            "location": 92,
            "return": [
                "list[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bound.round_buckets": {
            "name": "round_buckets",
            "location": 113,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Integer.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "int"
                ],
                "high": [
                    "int"
                ],
                "buckets": [
                    "str",
                    "bool",
                    "tuple[str]"
                ]
            }
        },
        "Integer.sample": {
            "name": "sample",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Integer.map": {
            "name": "map",
            "location": 142,
            "return": [
                "int",
                "tuple[typing.Union[str,int]]",
                "complex",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "Integer.inverse_map": {
            "name": "inverse_map",
            "location": 145,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "float"
                ]
            }
        },
        "Integer.is_discrete": {
            "name": "is_discrete",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.is_logscale": {
            "name": "is_logscale",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.should_transform": {
            "name": "should_transform",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.validate": {
            "name": "validate",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Integer.__repr__": {
            "name": "__repr__",
            "location": 162,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.parse": {
            "name": "parse",
            "location": 165,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Integer.scipy_bound_tuple": {
            "name": "scipy_bound_tuple",
            "location": 168,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.compare_values": {
            "name": "compare_values",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "typing.Sequence[T]"
                ],
                "b": [
                    "int",
                    "str"
                ]
            }
        },
        "Integer.maybe_round": {
            "name": "maybe_round",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Float.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]"
                ],
                "high": [
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]"
                ],
                "buckets": [
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Float.sample": {
            "name": "sample",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Float.map": {
            "name": "map",
            "location": 193,
            "return": [
                "int",
                "tuple[typing.Union[str,int]]",
                "complex",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "Float.inverse_map": {
            "name": "inverse_map",
            "location": 196,
            "return": [
                "int",
                "tuple[typing.Union[str,int]]",
                "complex",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "Float.is_discrete": {
            "name": "is_discrete",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.is_logscale": {
            "name": "is_logscale",
            "location": 202,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.should_transform": {
            "name": "should_transform",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.validate": {
            "name": "validate",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "list[list[int]]",
                    "typing.Sequence[float]",
                    "int"
                ]
            }
        },
        "Float.__repr__": {
            "name": "__repr__",
            "location": 212,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.parse": {
            "name": "parse",
            "location": 215,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list[float]",
                    "bool",
                    "typing.Any",
                    "float"
                ]
            }
        },
        "Float.scipy_bound_tuple": {
            "name": "scipy_bound_tuple",
            "location": 218,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Float.compare_values": {
            "name": "compare_values",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "typing.Iterable[str]",
                    "typing.Sequence[T]",
                    "str",
                    "bool"
                ],
                "b": [
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "Float.maybe_round": {
            "name": "maybe_round",
            "location": 232,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "LogscaleInt.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]"
                ],
                "high": [
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]"
                ],
                "buckets": [
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "LogscaleInt.sample": {
            "name": "sample",
            "location": 246,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogscaleInt.is_discrete": {
            "name": "is_discrete",
            "location": 249,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogscaleInt.is_logscale": {
            "name": "is_logscale",
            "location": 253,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogscaleInt.should_transform": {
            "name": "should_transform",
            "location": 256,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogscaleInt.validate": {
            "name": "validate",
            "location": 259,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "LogscaleInt.__repr__": {
            "name": "__repr__",
            "location": 264,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogscaleInt.map": {
            "name": "map",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "LogscaleInt.inverse_map": {
            "name": "inverse_map",
            "location": 270,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "bool"
                ]
            }
        },
        "LogscaleInt.parse": {
            "name": "parse",
            "location": 273,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "LogscaleInt.scipy_bound_tuple": {
            "name": "scipy_bound_tuple",
            "location": 276,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogscaleInt.compare_values": {
            "name": "compare_values",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "typing.Sequence[T]"
                ],
                "b": [
                    "int",
                    "str"
                ]
            }
        },
        "LogscaleInt.maybe_round": {
            "name": "maybe_round",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "LogscaleFloat.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]"
                ],
                "high": [
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]"
                ],
                "buckets": [
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "LogscaleFloat.sample": {
            "name": "sample",
            "location": 299,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogscaleFloat.is_discrete": {
            "name": "is_discrete",
            "location": 302,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogscaleFloat.is_logscale": {
            "name": "is_logscale",
            "location": 305,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogscaleFloat.should_transform": {
            "name": "should_transform",
            "location": 308,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogscaleFloat.validate": {
            "name": "validate",
            "location": 311,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "list[list[int]]",
                    "typing.Sequence[float]",
                    "int"
                ]
            }
        },
        "LogscaleFloat.__repr__": {
            "name": "__repr__",
            "location": 315,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogscaleFloat.map": {
            "name": "map",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "LogscaleFloat.inverse_map": {
            "name": "inverse_map",
            "location": 321,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LogscaleFloat.parse": {
            "name": "parse",
            "location": 324,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list[float]",
                    "bool",
                    "typing.Any",
                    "float"
                ]
            }
        },
        "LogscaleFloat.scipy_bound_tuple": {
            "name": "scipy_bound_tuple",
            "location": 327,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogscaleFloat.compare_values": {
            "name": "compare_values",
            "location": 330,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "float",
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "LogscaleFloat.maybe_round": {
            "name": "maybe_round",
            "location": 340,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "Discrete.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "Discrete.sample": {
            "name": "sample",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Discrete.validate": {
            "name": "validate",
            "location": 359,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "typing.Collection"
                ]
            }
        },
        "Discrete.is_discrete": {
            "name": "is_discrete",
            "location": 363,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Discrete.is_logscale": {
            "name": "is_logscale",
            "location": 366,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Discrete.should_transform": {
            "name": "should_transform",
            "location": 369,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Discrete.map": {
            "name": "map",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "list[]",
                    "int",
                    "list[typing.Union[int,float]]"
                ]
            }
        },
        "Discrete.inverse_map": {
            "name": "inverse_map",
            "location": 375,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Discrete.__repr__": {
            "name": "__repr__",
            "location": 378,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Discrete.parse": {
            "name": "parse",
            "location": 381,
            "return": [
                "int",
                "tuple[typing.Union[str,int]]",
                "complex",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "Discrete.scipy_bound_tuple": {
            "name": "scipy_bound_tuple",
            "location": 384,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Discrete.compare_values": {
            "name": "compare_values",
            "location": 387,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "bool"
                ],
                "b": [
                    "int",
                    "str"
                ]
            }
        },
        "Discrete.maybe_round": {
            "name": "maybe_round",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Hyperparameter.to_dict": {
            "name": "to_dict",
            "location": 401,
            "return": [
                "dict[typing.Text, typing.Text]",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hyperparameter.validate": {
            "name": "validate",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "Hyperparameter.maybe_round": {
            "name": "maybe_round",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Hyperparameter.from_dict": {
            "name": "from_dict",
            "location": 422,
            "return": [
                "Hyperparameter"
            ],
            "arguments": {
                "name": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, str]",
                    "bool",
                    "dict[str, L]",
                    "set[str]"
                ],
                "data": [
                    "str"
                ]
            }
        }
    },
    "bopt-master/bopt/experiment.py": {
        "NoAliasDumper.ignore_aliases": {
            "name": "ignore_aliases",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "Experiment.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_name": [
                    "str",
                    "bool",
                    "None"
                ],
                "batch_name": [
                    "str",
                    "bool",
                    "None"
                ],
                "hyperparameters": [
                    "str",
                    "None",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "runner": [
                    "str",
                    "None",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "result_regex": [
                    "str",
                    "None",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "gp_config": [
                    "bool",
                    "str",
                    "None",
                    "tuple[]"
                ]
            }
        },
        "Experiment.to_dict": {
            "name": "to_dict",
            "location": 73,
            "return": [
                "dict[typing.Text, typing.Union[dict[, ],list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.from_dict": {
            "name": "from_dict",
            "location": 85,
            "return": [
                "Experiment"
            ],
            "arguments": {
                "data": []
            }
        },
        "Experiment.best_result": {
            "name": "best_result",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Experiment.stats": {
            "name": "stats",
            "location": 120,
            "return": [
                "ExperimentStats"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.collect_results": {
            "name": "collect_results",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.samples_for_prediction": {
            "name": "samples_for_prediction",
            "location": 207,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.predictive_samples_before": {
            "name": "predictive_samples_before",
            "location": 210,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "int",
                    "float",
                    "None",
                    "tuple[typing.Union[float,float]]",
                    "dict[, ]"
                ]
            }
        },
        "Experiment.get_xy": {
            "name": "get_xy",
            "location": 223,
            "return": [
                "tuple[typing.Union[int,str,list[],dict[, ],list[int],list[list[int]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.suggest": {
            "name": "suggest",
            "location": 231,
            "return": [
                "tuple[RandomSearch]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.run_next": {
            "name": "run_next",
            "location": 258,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "num_similar_retries": [
                    "int"
                ]
            }
        },
        "Experiment.get_similar_samples": {
            "name": "get_similar_samples",
            "location": 272,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "hyperparam_values": [
                    "int",
                    "float",
                    "list[str]"
                ]
            }
        },
        "Experiment.get_finished_similar_samples": {
            "name": "get_finished_similar_samples",
            "location": 277,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "hyperparam_values": [
                    "str",
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "Experiment.manual_run": {
            "name": "manual_run",
            "location": 284,
            "return": [
                "tuple[typing.Union[Sample,bool]]"
            ],
            "arguments": {
                "self": [],
                "hyperparam_values": [],
                "model_params": []
            }
        },
        "Experiment.sample_results": {
            "name": "sample_results",
            "location": 390,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.bootstrapped_sample_results": {
            "name": "bootstrapped_sample_results",
            "location": 394,
            "return": [
                "str",
                "float",
                "tuple[typing.Union[int,str]]",
                "dict[str, list[]]",
                "int",
                "list[list[float]]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "num_bootstrap": [
                    "int"
                ]
            }
        },
        "Experiment.sample_cumulative_results": {
            "name": "sample_cumulative_results",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Experiment.serialize": {
            "name": "serialize",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.deserialize": {
            "name": "deserialize",
            "location": 423,
            "return": [],
            "arguments": {}
        }
    },
    "bopt-master/bopt/gp_config.py": {
        "GPParam.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "type": [
                    "list[str]",
                    "None",
                    "bool"
                ],
                "default": [
                    "list[str]",
                    "None",
                    "bool"
                ],
                "action": [
                    "list[str]",
                    "None",
                    "bool"
                ],
                "help": [
                    "list[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "GPConfig.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "GPConfig.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPConfig.to_dict": {
            "name": "to_dict",
            "location": 105,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPConfig.from_dict": {
            "name": "from_dict",
            "location": 123,
            "return": [
                "GPConfig"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "str",
                    "typing.Callable[, ]",
                    "bytes",
                    "Exception",
                    "None",
                    "dict[str, str]"
                ]
            }
        }
    },
    "bopt-master/bopt/hyperparam_values.py": {
        "HyperparamValues.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "int",
                    "str",
                    "tuple[]"
                ],
                "x": [
                    "int",
                    "str",
                    "tuple[]"
                ]
            }
        },
        "HyperparamValues.to_dict": {
            "name": "to_dict",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HyperparamValues.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperparamValues.validate": {
            "name": "validate",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HyperparamValues.similar_to": {
            "name": "similar_to",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "HyperparamValues.sample_params": {
            "name": "sample_params",
            "location": 44,
            "return": [],
            "arguments": {
                "hyperparameters": [
                    "str"
                ]
            }
        },
        "HyperparamValues.mapping_from_vector": {
            "name": "mapping_from_vector",
            "location": 51,
            "return": [
                "HyperparamValues"
            ],
            "arguments": {
                "x": [
                    "dict[, ]",
                    "list[typing.Optional[float]]"
                ],
                "hyperparameters": [
                    "set[str]",
                    "dict[str, float]"
                ]
            }
        },
        "HyperparamValues.from_mapping": {
            "name": "from_mapping",
            "location": 86,
            "return": [
                "HyperparamValues"
            ],
            "arguments": {
                "mapping": []
            }
        }
    },
    "bopt-master/bopt/plot.py": {
        "base64_plot": {
            "name": "base64_plot",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "plots": {
            "name": "plots",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "plot_convergence": {
            "name": "plot_convergence",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "X_sample": [
                    "list[]",
                    "str",
                    "tuple[typing.Union[float,float]]"
                ],
                "y_sample": [
                    "bytes",
                    "list[int]"
                ],
                "n_init": [
                    "int"
                ]
            }
        },
        "plot_current": {
            "name": "plot_current",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "experiment": [
                    "int",
                    "None",
                    "list[str]"
                ],
                "gpy_model": [
                    "int",
                    "None",
                    "str",
                    "float",
                    "list[str]"
                ],
                "x_next": [
                    "int"
                ],
                "resolution": [
                    "int"
                ]
            }
        },
        "plot_objective": {
            "name": "plot_objective",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "float",
                    "dict[, ]"
                ],
                "x_slice": [],
                "x_next": [
                    "str",
                    "int",
                    "float"
                ],
                "plot_limits": [
                    "str"
                ],
                "vmin": [
                    "int",
                    "str",
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "float"
                ],
                "vmax": [
                    "int",
                    "str",
                    "None",
                    "list[tuple[typing.Union[int,int]]]",
                    "float"
                ],
                "hyperparameters": [
                    "int",
                    "str",
                    "typing.Iterable[str]"
                ],
                "outer_grid": [
                    "str"
                ],
                "fig": [],
                "acq": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "float"
                ],
                "zscale": [
                    "typing.Text"
                ],
                "dimensions": [
                    "None",
                    "int",
                    "list[T]",
                    "tuple[typing.Union[float,float]]",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "acq_for_dims": {
            "name": "acq_for_dims",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "int",
                    "set[int]",
                    "str"
                ],
                "acq": [
                    "bool",
                    "typing.Sequence[typing.Any]",
                    "list[str]"
                ],
                "x_slice": [],
                "hyperparameters": [
                    "bool",
                    "str",
                    "typing.Sequence[str]"
                ],
                "ax": [
                    "str",
                    "int",
                    "float",
                    "None"
                ],
                "dims": [],
                "plot_limits": []
            }
        }
    },
    "bopt-master/bopt/sample.py": {
        "maybe_timestamp_to_datetime": {
            "name": "maybe_timestamp_to_datetime",
            "location": 17,
            "return": [
                "datetime_@_datetime",
                "None"
            ],
            "arguments": {
                "ts": [
                    "None",
                    "int"
                ]
            }
        },
        "maybe_datetime_to_timestamp": {
            "name": "maybe_datetime_to_timestamp",
            "location": 26,
            "return": [
                "None",
                "float",
                "int"
            ],
            "arguments": {
                "d": [
                    "float",
                    "None",
                    "int"
                ]
            }
        },
        "Sample.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "bool",
                    "list[str]",
                    "str",
                    "float",
                    "None"
                ],
                "model_params": [
                    "bool",
                    "list[str]",
                    "str",
                    "float",
                    "None"
                ],
                "hyperparam_values": [
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "tuple[typing.Union[list[str],str,None]]"
                ],
                "mu_pred": [
                    "bool",
                    "list[str]",
                    "str",
                    "float",
                    "None"
                ],
                "sigma_pred": [
                    "bool",
                    "list[str]",
                    "str",
                    "float",
                    "None"
                ],
                "collect_flag": [
                    "str",
                    "float",
                    "bool",
                    "tuple[str]",
                    "dict[str, typing.Any]"
                ],
                "created_at": [
                    "bool",
                    "list[str]",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "Sample.status": {
            "name": "status",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sample.to_dict": {
            "name": "to_dict",
            "location": 88,
            "return": [
                "dict[typing.Text, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.from_dict": {
            "name": "from_dict",
            "location": 105,
            "return": [
                "Sample"
            ],
            "arguments": {
                "data": [],
                "hyperparameters": [
                    "list[]"
                ]
            }
        },
        "Sample.to_x": {
            "name": "to_x",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sample.to_xy": {
            "name": "to_xy",
            "location": 138,
            "return": [
                "tuple[typing.Union[int,set[int]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.get_output": {
            "name": "get_output",
            "location": 169,
            "return": [
                "dict[, ]",
                "list[dict[, ]]",
                "tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                "list[int]",
                "list[str]",
                "typing.Pattern",
                "tuple[typing.Type]",
                "set[]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.__str__": {
            "name": "__str__",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.short_collect_flag_str": {
            "name": "short_collect_flag_str",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sample.run_time_str": {
            "name": "run_time_str",
            "location": 231,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sample.is_pending": {
            "name": "is_pending",
            "location": 246,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampleCollection.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "samples": [
                    "int",
                    "float"
                ]
            }
        },
        "SampleCollection.to_xy": {
            "name": "to_xy",
            "location": 258,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bopt-master/bopt/__init__.py": {},
    "bopt-master/bopt/acquisition_functions/acquisition_functions.py": {
        "AcquisitionFunction.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "gp": [],
                "X": [
                    "None",
                    "str",
                    "int",
                    "typing.AnyStr",
                    "Exception",
                    "typing.Sequence[str]"
                ],
                "f_s": [
                    "list[str]"
                ],
                "xi": [
                    "float"
                ]
            }
        },
        "AcquisitionFunction.raw_call": {
            "name": "raw_call",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mu": [
                    "float",
                    "bool",
                    "tuple['cirq.Qid']"
                ],
                "sigma": [
                    "float",
                    "bool",
                    "tuple['cirq.Qid']"
                ],
                "f_s": [
                    "float",
                    "bool",
                    "tuple['cirq.Qid']"
                ],
                "xi": [
                    "float"
                ]
            }
        },
        "AcquisitionFunction.name": {
            "name": "name",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpectedImprovement.raw_call": {
            "name": "raw_call",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "mu": [
                    "int"
                ],
                "sigma": [
                    "int",
                    "float"
                ],
                "f_s": [
                    "int"
                ],
                "xi": [
                    "float"
                ]
            }
        },
        "ExpectedImprovement.name": {
            "name": "name",
            "location": 50,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProbabilityOfImprovement.raw_call": {
            "name": "raw_call",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "mu": [
                    "int"
                ],
                "sigma": [
                    "int"
                ],
                "f_s": [
                    "int"
                ],
                "xi": [
                    "float"
                ]
            }
        },
        "ProbabilityOfImprovement.name": {
            "name": "name",
            "location": 61,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bopt-master/bopt/acquisition_functions/__init__.py": {},
    "bopt-master/bopt/cli/clean.py": {
        "run": {
            "name": "run",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bopt-master/bopt/cli/cli.py": {
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_main": {
            "name": "run_main",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bopt-master/bopt/cli/convert_meta.py": {
        "flag_to_int": {
            "name": "flag_to_int",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "flag_or_int": [
                    "int",
                    "bytes"
                ]
            }
        },
        "convert_collect_flag": {
            "name": "convert_collect_flag",
            "location": 15,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "sample": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bopt-master/bopt/cli/debug.py": {
        "run": {
            "name": "run",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bopt-master/bopt/cli/exp.py": {
        "run": {
            "name": "run",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bopt-master/bopt/cli/init.py": {
        "run": {
            "name": "run",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bopt-master/bopt/cli/jobstat.py": {
        "run": {
            "name": "run",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bopt-master/bopt/cli/manual_run.py": {
        "run": {
            "name": "run",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bopt-master/bopt/cli/plot.py": {
        "run": {
            "name": "run",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bopt-master/bopt/cli/run.py": {
        "try_start_job": {
            "name": "try_start_job",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "run": {
            "name": "run",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bopt-master/bopt/cli/run_single.py": {
        "run": {
            "name": "run",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bopt-master/bopt/cli/suggest.py": {
        "run": {
            "name": "run",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "bopt-master/bopt/cli/util.py": {
        "handle_cd": {
            "name": "handle_cd",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "acquire_lock": {
            "name": "acquire_lock",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "handle_cd_revertible.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newdir": [
                    "int",
                    "float"
                ]
            }
        },
        "handle_cd_revertible.__enter__": {
            "name": "__enter__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "handle_cd_revertible.__exit__": {
            "name": "__exit__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "BaseException",
                    "None"
                ],
                "value": [
                    "BaseException",
                    "None"
                ],
                "traceback": [
                    "BaseException",
                    "None"
                ]
            }
        },
        "ensure_meta_yml.__enter__": {
            "name": "__enter__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ensure_meta_yml.__exit__": {
            "name": "__exit__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "BaseException",
                    "None"
                ],
                "value": [
                    "BaseException",
                    "None"
                ],
                "traceback": [
                    "BaseException",
                    "None"
                ]
            }
        }
    },
    "bopt-master/bopt/cli/web.py": {
        "create_gp_for_data": {
            "name": "create_gp_for_data",
            "location": 18,
            "return": [],
            "arguments": {
                "experiment": [
                    "bytes",
                    "dict[, ]"
                ],
                "hyperparameters": [
                    "str"
                ],
                "X": [],
                "Y": [
                    "str"
                ]
            }
        },
        "create_slice_1d": {
            "name": "create_slice_1d",
            "location": 162,
            "return": [
                "Slice1D"
            ],
            "arguments": {
                "i": [
                    "int"
                ],
                "experiment": [],
                "resolution": [
                    "int",
                    "float"
                ],
                "n_dims": [
                    "int",
                    "float",
                    "list[float]",
                    "str"
                ],
                "x_slice": [
                    "list[float]"
                ],
                "model": [
                    "int"
                ],
                "sample": [
                    "int",
                    "tuple[]"
                ],
                "show_marginal": [
                    "int",
                    "float",
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "create_slice_2d": {
            "name": "create_slice_2d",
            "location": 220,
            "return": [
                "Slice2D"
            ],
            "arguments": {
                "i": [
                    "int"
                ],
                "j": [
                    "int"
                ],
                "experiment": [],
                "resolution": [
                    "int"
                ],
                "n_dims": [
                    "int",
                    "list[str]",
                    "None"
                ],
                "x_slice": [],
                "model": [
                    "int",
                    "str"
                ],
                "sample": [
                    "int",
                    "tuple[]"
                ],
                "show_marginal": [
                    "int",
                    "list[str]",
                    "None"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "web_type": [
                    "typing.Any",
                    "None",
                    "BaseException"
                ],
                "args": []
            }
        },
        "Slice1D.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "x": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "x_slice_at": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "mu": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "sigma": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "acq": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "other_samples": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ],
                "model": [
                    "str",
                    "bool",
                    "float",
                    "None"
                ]
            }
        },
        "Slice1D.sigma_low": {
            "name": "sigma_low",
            "location": 86,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice1D.sigma_high": {
            "name": "sigma_high",
            "location": 89,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice1D.mu_bounds": {
            "name": "mu_bounds",
            "location": 92,
            "return": [
                "tuple[typing.Union[int,bytes,float,list[tuple[typing.Union[int,int]]],str,list[]]]"
            ],
            "arguments": {
                "self": [],
                "show_acq": [
                    "int",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "Slice1D.x_range": {
            "name": "x_range",
            "location": 104,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice2D.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p1": [
                    "bool",
                    "bytes",
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "p2": [
                    "bool",
                    "bytes",
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "x1": [
                    "bool",
                    "bytes",
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "x2": [
                    "bool",
                    "bytes",
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "x1_slice_at": [
                    "bool",
                    "bytes",
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "x2_slice_at": [
                    "bool",
                    "bytes",
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "mu": [
                    "bool",
                    "bytes",
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "other_samples": [
                    "bool",
                    "bytes",
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "model": [
                    "bool",
                    "bytes",
                    "float",
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "Slice2D.x1_bounds": {
            "name": "x1_bounds",
            "location": 155,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Slice2D.x2_bounds": {
            "name": "x2_bounds",
            "location": 158,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "run.experiment_detail": {
            "name": "experiment_detail",
            "location": 323,
            "return": [],
            "arguments": {
                "exp_dir": [],
                "index": [
                    "None"
                ]
            }
        },
        "run.multi_detail": {
            "name": "multi_detail",
            "location": 428,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "run.multi": {
            "name": "multi",
            "location": 432,
            "return": [],
            "arguments": {}
        },
        "run.index": {
            "name": "index",
            "location": 464,
            "return": [],
            "arguments": {}
        }
    },
    "bopt-master/bopt/cli/__init__.py": {},
    "bopt-master/bopt/models/gpy_model.py": {
        "GPyModel.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "None"
                ],
                "acquisition_fn": [
                    "bool",
                    "None"
                ]
            }
        },
        "GPyModel.to_model_params": {
            "name": "to_model_params",
            "location": 31,
            "return": [
                "ModelParameters"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPyModel.create_kernel": {
            "name": "create_kernel",
            "location": 43,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "kernel_name": [
                    "str",
                    "int"
                ],
                "input_dim": [
                    "bool",
                    "str"
                ],
                "ARD": [
                    "bool",
                    "str"
                ]
            }
        },
        "GPyModel.from_model_params": {
            "name": "from_model_params",
            "location": 49,
            "return": [
                "GPyModel"
            ],
            "arguments": {
                "gp_config": [
                    "int",
                    "None",
                    "float"
                ],
                "model_params": [
                    "int",
                    "None"
                ],
                "X": [],
                "Y": [
                    "list[]",
                    "str"
                ]
            }
        },
        "GPyModel.gpy_regression": {
            "name": "gpy_regression",
            "location": 62,
            "return": [],
            "arguments": {
                "hyperparameters": [
                    "list[H]"
                ],
                "gp_config": [
                    "list[]",
                    "int",
                    "None"
                ],
                "X_sample": [],
                "Y_sample": [
                    "bool"
                ]
            }
        },
        "GPyModel.wrap_kernel_with_rounding": {
            "name": "wrap_kernel_with_rounding",
            "location": 115,
            "return": [
                "list[H]",
                "str",
                "list[list[typing.Any]]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "model": [
                    "list[H]",
                    "str",
                    "list[list[typing.Any]]",
                    "dict[str, typing.Any]"
                ],
                "hyperparameters": [
                    "list[H]",
                    "str",
                    "list[list[typing.Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GPyModel.predict_next": {
            "name": "predict_next",
            "location": 120,
            "return": [
                "tuple[GPyModel]"
            ],
            "arguments": {
                "gp_config": [
                    "list[H]",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "hyperparameters": [
                    "list[H]"
                ],
                "X_sample": [
                    "list[H]",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "Y_sample": [
                    "typing.Callable[, ]",
                    "dict[str, model.Integration]"
                ]
            }
        },
        "GPyModel.propose_location": {
            "name": "propose_location",
            "location": 151,
            "return": [
                "str",
                "int",
                "list[]",
                "None"
            ],
            "arguments": {
                "acquisition_fn": [
                    "float",
                    "bool"
                ],
                "gp": [
                    "bool",
                    "list[str]"
                ],
                "y_max": [
                    "float",
                    "bool"
                ],
                "hyperparameters": [
                    "list[H]"
                ],
                "gp_config": [
                    "bool",
                    "str",
                    "None",
                    "BaseException"
                ]
            }
        },
        "GPyModel.parse_kernel_name": {
            "name": "parse_kernel_name",
            "location": 196,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "GPyModel.parse_acquisition_fn": {
            "name": "parse_acquisition_fn",
            "location": 207,
            "return": [
                "ExpectedImprovement",
                "ProbabilityOfImprovement"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "GPyModel.prior_for_hyperparam": {
            "name": "prior_for_hyperparam",
            "location": 216,
            "return": [],
            "arguments": {
                "gp_config": [
                    "list[typing.Any]",
                    "None",
                    "int",
                    "dict[, ]"
                ],
                "param": [
                    "int",
                    "tuple[float]"
                ]
            }
        },
        "RoundingKernelWrapper.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kernel": [
                    "int",
                    "float"
                ],
                "hyperparameters": [
                    "int",
                    "float"
                ]
            }
        },
        "RoundingKernelWrapper.K": {
            "name": "K",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "float",
                    "int"
                ],
                "X2": [
                    "float",
                    "int"
                ]
            }
        },
        "RoundingKernelWrapper.Kdiag": {
            "name": "Kdiag",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "RoundingKernelWrapper.K_of_r": {
            "name": "K_of_r",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "r": [
                    "typing.Pattern",
                    "bool",
                    "list[\"Block\"]"
                ]
            }
        },
        "RoundingKernelWrapper.rounded": {
            "name": "rounded",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "RoundingKernelWrapper.name": {
            "name": "name",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPyModel.propose_location.min_obj": {
            "name": "min_obj",
            "location": 155,
            "return": [],
            "arguments": {
                "X": []
            }
        }
    },
    "bopt-master/bopt/models/model.py": {
        "Model.to_model_params": {
            "name": "to_model_params",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bopt-master/bopt/models/parameters.py": {
        "ModelParameters.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "params": [
                    "str",
                    "None",
                    "bool"
                ],
                "kernel": [
                    "str",
                    "None",
                    "bool"
                ],
                "acquisition_fn": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "ModelParameters.to_dict": {
            "name": "to_dict",
            "location": 15,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelParameters.sampled_from_random_search": {
            "name": "sampled_from_random_search",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelParameters.can_predict_mean": {
            "name": "can_predict_mean",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelParameters.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelParameters.from_dict": {
            "name": "from_dict",
            "location": 41,
            "return": [
                "ModelParameters"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "list[]"
                ]
            }
        },
        "ModelParameters.for_manual_run": {
            "name": "for_manual_run",
            "location": 49,
            "return": [
                "ModelParameters"
            ],
            "arguments": {}
        }
    },
    "bopt-master/bopt/models/random_search.py": {
        "RandomSearch.predict_next": {
            "name": "predict_next",
            "location": 14,
            "return": [],
            "arguments": {
                "hyperparameters": [
                    "str"
                ]
            }
        },
        "RandomSearch.to_model_params": {
            "name": "to_model_params",
            "location": 26,
            "return": [
                "ModelParameters"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bopt-master/bopt/models/__init__.py": {},
    "bopt-master/bopt/runner/abstract.py": {
        "Job.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "dict[, ]",
                    "list[int]",
                    "None"
                ]
            }
        },
        "Job.to_dict": {
            "name": "to_dict",
            "location": 17,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.job_type": {
            "name": "job_type",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.kill": {
            "name": "kill",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.is_finished": {
            "name": "is_finished",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_path": [
                    "str",
                    "typing.Iterable[str]"
                ],
                "arguments": [
                    "dict[, ]",
                    "bool"
                ],
                "manual_arg_fnames": [
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "Runner.start": {
            "name": "start",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_dir": [
                    "list[str]",
                    "str",
                    "int",
                    "list[]"
                ],
                "hyperparam_values": [
                    "list[str]",
                    "str",
                    "int",
                    "list[]"
                ],
                "manual_file_args": [
                    "list[str]",
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "Runner.runner_type": {
            "name": "runner_type",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.to_dict": {
            "name": "to_dict",
            "location": 53,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runner.fetch_and_shift_manual_file_args": {
            "name": "fetch_and_shift_manual_file_args",
            "location": 61,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bopt-master/bopt/runner/job_loader.py": {
        "JobLoader.from_dict": {
            "name": "from_dict",
            "location": 18,
            "return": [],
            "arguments": {
                "data": [
                    "str"
                ]
            }
        }
    },
    "bopt-master/bopt/runner/local_runner.py": {
        "LocalJob.job_type": {
            "name": "job_type",
            "location": 14,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalJob.is_finished": {
            "name": "is_finished",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalJob.kill": {
            "name": "kill",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalRunner.runner_type": {
            "name": "runner_type",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalRunner.start": {
            "name": "start",
            "location": 29,
            "return": [
                "LocalJob"
            ],
            "arguments": {
                "self": [],
                "output_dir": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ],
                "hyperparam_values": [
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ],
                "manual_file_args": [
                    "list[str]",
                    "list[bytes]",
                    "list[]",
                    "dict[str, str]",
                    "tuple[typing.Union[typing.Any,typing.Any]]"
                ]
            }
        }
    },
    "bopt-master/bopt/runner/runner_loader.py": {
        "RunnerLoader.from_dict": {
            "name": "from_dict",
            "location": 10,
            "return": [
                "LocalRunner",
                "SGERunner"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "bopt-master/bopt/runner/sge_runner.py": {
        "SGEJob.job_type": {
            "name": "job_type",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SGEJob.is_finished": {
            "name": "is_finished",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SGEJob.kill": {
            "name": "kill",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SGERunner.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_path": [
                    "list[str]",
                    "str"
                ],
                "arguments": [
                    "list[str]",
                    "str"
                ],
                "qsub_arguments": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "manual_arg_fnames": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "SGERunner.runner_type": {
            "name": "runner_type",
            "location": 43,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SGERunner.start": {
            "name": "start",
            "location": 46,
            "return": [
                "SGEJob"
            ],
            "arguments": {
                "self": [],
                "output_dir": [
                    "str",
                    "bool"
                ],
                "hyperparam_values": [
                    "bool",
                    "str",
                    "tuple[bool]",
                    "dict[str, str]",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "None"
                ],
                "manual_file_args": [
                    "str",
                    "bool",
                    "list[str]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "SGERunner.to_dict": {
            "name": "to_dict",
            "location": 85,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bopt-master/bopt/runner/__init__.py": {},
    "bopt-master/bopt/templates/__init__.py": {},
    "bopt-master/experiments/simple_function.py": {},
    "bopt-master/experiments/simple_function2d.py": {},
    "bopt-master/experiments/rl/cart_pole_evaluator.py": {
        "environment": {
            "name": "environment",
            "location": 6,
            "return": [],
            "arguments": {
                "discrete": [
                    "bool"
                ]
            }
        }
    },
    "bopt-master/experiments/rl/gym_evaluator.py": {
        "GymEnvironment.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]",
                    "list[str]"
                ],
                "separators": [
                    "dict[, ]",
                    "list[str]"
                ],
                "tiles": [
                    "None",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "GymEnvironment._maybe_discretize": {
            "name": "_maybe_discretize",
            "location": 33,
            "return": [
                "str",
                "list[str]",
                "tuple[typing.Union[str,...]]",
                "bool",
                "tuple[typing.Union[str,str]]",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,...]]",
                    "bool",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "GymEnvironment.states": {
            "name": "states",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GymEnvironment.weights": {
            "name": "weights",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GymEnvironment.state_shape": {
            "name": "state_shape",
            "location": 73,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GymEnvironment.actions": {
            "name": "actions",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GymEnvironment.action_shape": {
            "name": "action_shape",
            "location": 87,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GymEnvironment.action_ranges": {
            "name": "action_ranges",
            "location": 94,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GymEnvironment.episode": {
            "name": "episode",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GymEnvironment.reset": {
            "name": "reset",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "start_evaluate": [
                    "bool"
                ]
            }
        },
        "GymEnvironment.step": {
            "name": "step",
            "location": 113,
            "return": [
                "tuple[typing.Union[list[float],int,typing.Sequence[typing.Sequence[typing.Any]],typing.Pattern]]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "GymEnvironment.parallel_init": {
            "name": "parallel_init",
            "location": 138,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "environments": [
                    "str",
                    "bool"
                ]
            }
        },
        "GymEnvironment._parallel_worker": {
            "name": "_parallel_worker",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "None",
                    "str"
                ],
                "env": [
                    "typing.Callable[, ]"
                ],
                "seed": [
                    "str",
                    "bool",
                    "list[str]",
                    "dict[str, typing.Union[str,None]]",
                    "typing.Callable[, ]"
                ],
                "connection": []
            }
        },
        "GymEnvironment.parallel_step": {
            "name": "parallel_step",
            "location": 176,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "GymEnvironment.render": {
            "name": "render",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bopt-master/experiments/rl/monte_carlo.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "bopt-master/tests/opt_functions.py": {
        "get_fun_by_name": {
            "name": "get_fun_by_name",
            "location": 115,
            "return": [
                "typing.Text",
                "dict[str, str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "get_opt_test_functions": {
            "name": "get_opt_test_functions",
            "location": 120,
            "return": [
                "list[XSquared]"
            ],
            "arguments": {}
        },
        "OptFunction.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Beale.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Beale.f": {
            "name": "f",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "Easom.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Easom.f": {
            "name": "f",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "Eggholder.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Eggholder.f": {
            "name": "f",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "McCormick.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "McCormick.f": {
            "name": "f",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "XSquared.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XSquared.f": {
            "name": "f",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "bopt-master/tests/test_bounds.py": {
        "TestOptFunctions.test_int_bins": {
            "name": "test_int_bins",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOptFunctions.test_float_bins": {
            "name": "test_float_bins",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOptFunctions.test_discrete_bins": {
            "name": "test_discrete_bins",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOptFunctions.test_discrete_maybe_round": {
            "name": "test_discrete_maybe_round",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOptFunctions.test_int_maybe_round": {
            "name": "test_int_maybe_round",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOptFunctions.test_float_maybe_round": {
            "name": "test_float_maybe_round",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bopt-master/tests/test_opt_functions.py": {
        "TestOptFunctions.test_opt_functions": {
            "name": "test_opt_functions",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bopt-master/tests/test_todict_fromdict.py": {
        "test_exp1": {
            "name": "test_exp1",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "TestToDictFromDict.test_experiment": {
            "name": "test_experiment",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "bopt-master/tests/__init__.py": {}
}
{
    "cannula-master/setup.py": {},
    "cannula-master/cannula/api.py": {
        "Resolver.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "list[]",
                    "tuple[]"
                ],
                "schema": [
                    "None",
                    "bool",
                    "typing.Sequence[]",
                    "str"
                ],
                "schema_directory": [
                    "typing.Text"
                ],
                "query_directory": [
                    "typing.Text"
                ]
            }
        },
        "Resolver.schema_directory": {
            "name": "schema_directory",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Resolver.find_schema": {
            "name": "find_schema",
            "location": 106,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resolver.query_directory": {
            "name": "query_directory",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resolver.load_query": {
            "name": "load_query",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "query_name": [
                    "str"
                ]
            }
        },
        "Resolver.resolver": {
            "name": "resolver",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "type_name": [
                    "typing.Text"
                ]
            }
        },
        "Resolver.datasource": {
            "name": "datasource",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Resolver.get_form_query": {
            "name": "get_form_query",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Resolver.get_form_mutation": {
            "name": "get_form_mutation",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "API.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.schema": {
            "name": "schema",
            "location": 190,
            "return": [
                "int",
                "dict[, ]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "API._all_schema": {
            "name": "_all_schema",
            "location": 195,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "API._build_schema": {
            "name": "_build_schema",
            "location": 210,
            "return": [
                "str",
                "tuple[str]",
                "dict[typing.Any, bytes]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "API._make_executable": {
            "name": "_make_executable",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str"
                ]
            }
        },
        "API.context": {
            "name": "context",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "API.get_context": {
            "name": "get_context",
            "location": 238,
            "return": [
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any]]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "API._merge_registry": {
            "name": "_merge_registry",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "API.call_sync": {
            "name": "call_sync",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "document": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ],
                "request": [
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ],
                "variables": [
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Resolver.resolver.decorator": {
            "name": "decorator",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "function": []
            }
        },
        "Resolver.datasource.decorator": {
            "name": "decorator",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "klass": []
            }
        },
        "API.context.decorator": {
            "name": "decorator",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "klass": []
            }
        }
    },
    "cannula-master/cannula/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "typing.Callable[..., collections.abc.Coroutine]"
                ]
            }
        },
        "Context.handle_request": {
            "name": "handle_request",
            "location": 13,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ]
            }
        }
    },
    "cannula-master/cannula/errors.py": {
        "format_errors": {
            "name": "format_errors",
            "location": 8,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "errors": [
                    "list[str]",
                    "str"
                ],
                "logger": [
                    "None",
                    "Exception"
                ],
                "level": []
            }
        },
        "log_error": {
            "name": "log_error",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [
                    "int",
                    "BaseException",
                    "str"
                ],
                "logger": [],
                "level": [
                    "int",
                    "Exception",
                    "list[list[str]]"
                ]
            }
        }
    },
    "cannula-master/cannula/helpers.py": {
        "get_root_path": {
            "name": "get_root_path",
            "location": 6,
            "return": [],
            "arguments": {
                "import_name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "cannula-master/cannula/schema.py": {
        "extract_extensions": {
            "name": "extract_extensions",
            "location": 36,
            "return": [
                "DocumentNode"
            ],
            "arguments": {
                "ast": [
                    "dict[int, int]",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "assert_has_query_and_mutation": {
            "name": "assert_has_query_and_mutation",
            "location": 42,
            "return": [
                "dict[str, typing.Any]",
                "None",
                "list[]"
            ],
            "arguments": {
                "ast": [
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "maybe_parse": {
            "name": "maybe_parse",
            "location": 65,
            "return": [
                "typing.Type",
                "None",
                "BaseException",
                "str"
            ],
            "arguments": {
                "type_def": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "build_and_extend_schema": {
            "name": "build_and_extend_schema",
            "location": 71,
            "return": [
                "str",
                "list[tuple[typing.Union[str,typing.Any,str]]]",
                "typing.Callable[[], None]",
                "typing.Type",
                "bool",
                "frozenset"
            ],
            "arguments": {
                "type_defs": [
                    "str"
                ]
            }
        },
        "fix_abstract_resolve_type": {
            "name": "fix_abstract_resolve_type",
            "location": 96,
            "return": [
                "typing.Type",
                "BaseException"
            ],
            "arguments": {
                "schema": [
                    "typing.Type",
                    "BaseException"
                ]
            }
        },
        "load_schema": {
            "name": "load_schema",
            "location": 115,
            "return": [
                "list[]"
            ],
            "arguments": {
                "directory": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.IO"
                ]
            }
        },
        "fix_abstract_resolve_type.custom_resolve_type": {
            "name": "custom_resolve_type",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [],
                "_info": []
            }
        },
        "load_schema.find_graphql_files": {
            "name": "find_graphql_files",
            "location": 119,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "cannula-master/cannula/utils.py": {
        "gql": {
            "name": "gql",
            "location": 4,
            "return": [],
            "arguments": {
                "schema": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "cannula-master/cannula/__init__.py": {},
    "cannula-master/cannula/datasource/forms.py": {
        "unwrap_args": {
            "name": "unwrap_args",
            "location": 565,
            "return": [
                "dict[str, str]"
            ],
            "arguments": {
                "form_query_argument_list": [
                    "list[str]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "Wrapper.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "Wrapper.__getattr__": {
            "name": "__getattr__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "ValidatorWrapper.attributes": {
            "name": "attributes",
            "location": 298,
            "return": [
                "dict[, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WidgetWrapper.__typename__": {
            "name": "__typename__",
            "location": 317,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "WidgetWrapper.type": {
            "name": "type",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WidgetWrapper.name": {
            "name": "name",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptionWrapper.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "list[]"
                ],
                "label": [
                    "int",
                    "str",
                    "float"
                ],
                "selected": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "FieldWrapper.__typename__": {
            "name": "__typename__",
            "location": 349,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldWrapper.label": {
            "name": "label",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldWrapper.widget": {
            "name": "widget",
            "location": 361,
            "return": [
                "WidgetWrapper"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldWrapper.validators": {
            "name": "validators",
            "location": 365,
            "return": [
                "typing.Generator[ValidatorWrapper]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldWrapper.fields": {
            "name": "fields",
            "location": 370,
            "return": [
                "typing.Generator[FieldWrapper]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldWrapper.entries": {
            "name": "entries",
            "location": 376,
            "return": [
                "typing.Generator[FieldWrapper]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldWrapper.inputType": {
            "name": "inputType",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldWrapper.options": {
            "name": "options",
            "location": 387,
            "return": [
                "None",
                "typing.Generator[OptionWrapper]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDataWrapper.__contains__": {
            "name": "__contains__",
            "location": 411,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "FormDataWrapper.decode": {
            "name": "decode",
            "location": 414,
            "return": [
                "FormDataWrapper"
            ],
            "arguments": {
                "self": []
            }
        },
        "WTFormsDataSource.__call__": {
            "name": "__call__",
            "location": 445,
            "return": [
                "WTFormsDataSource"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "typing.Type"
                ]
            }
        },
        "WTFormsDataSource._get_form_args": {
            "name": "_get_form_args",
            "location": 456,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WTFormsDataSource.get_query": {
            "name": "get_query",
            "location": 461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WTFormsDataSource.get_mutation": {
            "name": "get_mutation",
            "location": 478,
            "return": [
                "dict[int, str]",
                "tuple[typing.Union[str,str]]",
                "dict[str, typing.Any]",
                "list[str]",
                "list[]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WTFormsResolver.__init__": {
            "name": "__init__",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WTFormsResolver.register_form": {
            "name": "register_form",
            "location": 512,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "args": [
                    "None"
                ],
                "return_type": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "return_fields": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "WTFormsResolver._extend_schema": {
            "name": "_extend_schema",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_name": [
                    "str",
                    "int",
                    "typing.Callable[[], int]"
                ],
                "mutation_name": [
                    "str",
                    "int",
                    "typing.Callable[[], int]"
                ],
                "return_type": [
                    "str",
                    "int",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "WTFormsResolver.register_form.decorator": {
            "name": "decorator",
            "location": 524,
            "return": [],
            "arguments": {
                "klass": []
            }
        }
    },
    "cannula-master/cannula/datasource/http.py": {
        "cacheable": {
            "name": "cacheable",
            "location": 60,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "FutureSession.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_workers": [
                    "int"
                ]
            }
        },
        "FutureSession.request": {
            "name": "request",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FutureSession.close": {
            "name": "close",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadSafeCacheable.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coroutine": [
                    "int",
                    "float"
                ]
            }
        },
        "ThreadSafeCacheable.__await__": {
            "name": "__await__",
            "location": 48,
            "return": [
                "str",
                "list[tuple[typing.Union[str,typing.Any]]]",
                "int",
                "tuple[typing.Union[str,str]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "cacheable.wrapped": {
            "name": "wrapped",
            "location": 61,
            "return": [
                "ThreadSafeCacheable"
            ],
            "arguments": {}
        },
        "HTTPDataSource.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "list[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "HTTPDataSource.assert_has_http_session": {
            "name": "assert_has_http_session",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "typing.Sequence[float]",
                    "bytearray",
                    "None"
                ]
            }
        },
        "HTTPDataSource.assert_has_resource_name": {
            "name": "assert_has_resource_name",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPDataSource.will_send_request": {
            "name": "will_send_request",
            "location": 113,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]"
                ]
            }
        },
        "HTTPDataSource.cache_key_for_request": {
            "name": "cache_key_for_request",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "set[str]",
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "HTTPDataSource.get_request_url": {
            "name": "get_request_url",
            "location": 127,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "HTTPDataSource.did_receive_error": {
            "name": "did_receive_error",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception",
                    "dict[str, typing.Any]"
                ],
                "request": [
                    "Exception",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "HTTPDataSource.convert_to_object": {
            "name": "convert_to_object",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "json_obj": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "cannula-master/cannula/datasource/__init__.py": {},
    "cannula-master/cannula/middleware/debug.py": {
        "DebugMiddleware.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [],
                "logger": [
                    "None",
                    "str",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        }
    },
    "cannula-master/cannula/middleware/mocks.py": {
        "SuperDict.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "dict[, ]"
                ]
            }
        },
        "MockObjectStore.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_objects": [
                    "dict[str, str]"
                ]
            }
        },
        "MockObjectStore.__contains__": {
            "name": "__contains__",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MockObjectStore.has_named_type": {
            "name": "has_named_type",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "named_type_name": [
                    "str",
                    "bool",
                    "typing.Iterable[str]",
                    "None"
                ]
            }
        },
        "MockObjectStore.has_parent_field": {
            "name": "has_parent_field",
            "location": 223,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent_type_name": [
                    "str",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Any",
                    "None"
                ],
                "field_name": [
                    "str",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "MockObjectStore.get": {
            "name": "get",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "tuple[str]",
                    "bool"
                ],
                "default": [
                    "None",
                    "str",
                    "tuple[str]",
                    "bool"
                ]
            }
        },
        "MockObjectStore.get_parent_field": {
            "name": "get_parent_field",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent_type_name": [
                    "str"
                ],
                "field_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "MockObjectStore.return_results": {
            "name": "return_results",
            "location": 255,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "dict[, ]"
                ]
            }
        },
        "MockObjectStore.maybe_wrap": {
            "name": "maybe_wrap",
            "location": 267,
            "return": [
                "SuperDict",
                "dict[str, typing.Any]",
                "float",
                "bool",
                "str",
                "list[]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "float",
                    "bool",
                    "str",
                    "list[]"
                ]
            }
        },
        "MockMiddleware.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_objects": [
                    "dict[, ]"
                ],
                "mock_all": [
                    "bool"
                ],
                "mock_object_header": [
                    "typing.Text"
                ]
            }
        },
        "MockMiddleware.get_mocks": {
            "name": "get_mocks",
            "location": 296,
            "return": [
                "None",
                "MockObjectStore"
            ],
            "arguments": {
                "self": [],
                "extra": []
            }
        },
        "MockMiddleware.get_mocks_from_headers": {
            "name": "get_mocks_from_headers",
            "location": 308,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "MockMiddleware.resolve.resolve_return_type": {
            "name": "resolve_return_type",
            "location": 366,
            "return": [
                "list[]",
                "SuperDict"
            ],
            "arguments": {
                "schema_type": []
            }
        }
    },
    "cannula-master/cannula/middleware/profile.py": {
        "ProfileMiddleware.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [],
                "logger": [
                    "None",
                    "str",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        }
    },
    "cannula-master/cannula/middleware/__init__.py": {},
    "cannula-master/docs/conf.py": {},
    "cannula-master/examples/forms.py": {
        "DummyPostData.getlist": {
            "name": "getlist",
            "location": 104,
            "return": [
                "list[]",
                "list[str]",
                "tuple[]",
                "typing.Iterator",
                "typing.Type",
                "int",
                "list[typing.Union[list[],list[str],tuple[],typing.Iterator,typing.Type,int]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[KT, V]",
                    "typing.Type"
                ]
            }
        }
    },
    "cannula-master/examples/hello.py": {},
    "cannula-master/examples/mocks.py": {},
    "cannula-master/examples/cloud/api.py": {},
    "cannula-master/examples/cloud/app.py": {},
    "cannula-master/examples/cloud/mock_server.py": {
        "name": {
            "name": "name",
            "location": 74,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "get_id": {
            "name": "get_id",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_ip": {
            "name": "get_ip",
            "location": 84,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "catalog": {
            "name": "catalog",
            "location": 91,
            "return": [
                "list[dict[typing.Text, typing.Union[list[dict[typing.Text, str]],typing.Text]]]"
            ],
            "arguments": {
                "project_id": [
                    "str"
                ]
            }
        },
        "expires": {
            "name": "expires",
            "location": 162,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {}
        },
        "create_new_server": {
            "name": "create_new_server",
            "location": 462,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "image_id": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "flavor_id": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "None",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "get_ip.bit": {
            "name": "bit",
            "location": 86,
            "return": [],
            "arguments": {}
        }
    },
    "cannula-master/examples/cloud/session.py": {
        "flatten_catalog": {
            "name": "flatten_catalog",
            "location": 44,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "catalog": [
                    "list[dict[, ]]",
                    "str"
                ]
            }
        },
        "get_user": {
            "name": "get_user",
            "location": 53,
            "return": [
                "dict[int, typing.Any]",
                "dict[, ]",
                "dict[str, str]",
                "dict[object, dict[str, typing.Any]]",
                "int",
                "User"
            ],
            "arguments": {
                "session_id": [
                    "str",
                    "int"
                ]
            }
        },
        "set_user": {
            "name": "set_user",
            "location": 62,
            "return": [
                "User"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int",
                    "dict[int, dict[str, float]]"
                ],
                "auth_token": [
                    "str",
                    "int",
                    "dict[int, dict[str, float]]"
                ],
                "catalog": [
                    "str",
                    "bool"
                ],
                "roles": [
                    "str"
                ]
            }
        },
        "is_authenticated": {
            "name": "is_authenticated",
            "location": 146,
            "return": [],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "User.is_admin": {
            "name": "is_admin",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_authenticated": {
            "name": "is_authenticated",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.has_role": {
            "name": "has_role",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "User.get_service_url": {
            "name": "get_service_url",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "service": [
                    "dict[str, bool]",
                    "dict[, ]",
                    "int",
                    "str"
                ],
                "region": [
                    "dict[str, bool]",
                    "dict[, ]",
                    "int",
                    "str"
                ]
            }
        },
        "OpenStackContext.handle_request": {
            "name": "handle_request",
            "location": 139,
            "return": [
                "str",
                "dict[, ]",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "cannula-master/examples/cloud/resolvers/base.py": {
        "OpenStackBase.get_service_url": {
            "name": "get_service_url",
            "location": 14,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "OpenStackBase.will_send_request": {
            "name": "will_send_request",
            "location": 43,
            "return": [
                "dict[, ]",
                "list[]",
                "str",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[, ]",
                    "list[]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "cannula-master/examples/cloud/resolvers/__init__.py": {},
    "cannula-master/examples/cloud/resolvers/application/actions.py": {
        "Action.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "typing.Mapping",
                    "dict[str, typing.Any]"
                ],
                "info": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "Action.get_form_url": {
            "name": "get_form_url",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "info": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "Action.is_enabled": {
            "name": "is_enabled",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "None"
                ]
            }
        },
        "Action.action_is_allowed": {
            "name": "action_is_allowed",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.tooltip_message": {
            "name": "tooltip_message",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict[, ]",
                    "str",
                    "typing.Sequence[str]"
                ],
                "state": [
                    "None",
                    "list[T]",
                    "dict[str, list[str]]",
                    "int"
                ]
            }
        }
    },
    "cannula-master/examples/cloud/resolvers/application/navigation.py": {
        "Item.is_enabled": {
            "name": "is_enabled",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "None"
                ]
            }
        },
        "Section.is_enabled": {
            "name": "is_enabled",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "cannula-master/examples/cloud/resolvers/application/resolver.py": {},
    "cannula-master/examples/cloud/resolvers/application/status.py": {},
    "cannula-master/examples/cloud/resolvers/application/__init__.py": {},
    "cannula-master/examples/cloud/resolvers/compute/flavors.py": {},
    "cannula-master/examples/cloud/resolvers/compute/images.py": {},
    "cannula-master/examples/cloud/resolvers/compute/resolver.py": {},
    "cannula-master/examples/cloud/resolvers/compute/servers.py": {},
    "cannula-master/examples/cloud/resolvers/compute/__init__.py": {},
    "cannula-master/examples/cloud/resolvers/dashboard/resolver.py": {
        "Dataset.data": {
            "name": "data",
            "location": 26,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.backgroundColor": {
            "name": "backgroundColor",
            "location": 31,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuotaData.datasets": {
            "name": "datasets",
            "location": 43,
            "return": [
                "list[Dataset]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuotaData.labels": {
            "name": "labels",
            "location": 54,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cannula-master/examples/cloud/resolvers/dashboard/__init__.py": {},
    "cannula-master/examples/cloud/resolvers/identity/resolver.py": {},
    "cannula-master/examples/cloud/resolvers/identity/__init__.py": {},
    "cannula-master/examples/cloud/resolvers/network/forms.py": {},
    "cannula-master/examples/cloud/resolvers/network/resolver.py": {},
    "cannula-master/examples/cloud/resolvers/network/__init__.py": {
        "RenameNetworkAction.get_form_url": {
            "name": "get_form_url",
            "location": 101,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "dict[, ]",
                    "bytes"
                ],
                "info": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        }
    },
    "cannula-master/examples/cloud/resolvers/volume/__init__.py": {}
}
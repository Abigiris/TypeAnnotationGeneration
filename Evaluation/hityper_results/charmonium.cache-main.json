{
    "charmonium.cache-main/script.py": {
        "coroutine_to_function": {
            "name": "coroutine_to_function",
            "location": 42,
            "return": [],
            "arguments": {
                "coroutine": [
                    "typing.Type"
                ]
            }
        },
        "default_checker": {
            "name": "default_checker",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "proc": [
                    "typing.Callable[typing.Mapping, T]",
                    "int",
                    "float"
                ]
            }
        },
        "most_recent_common_ancestor": {
            "name": "most_recent_common_ancestor",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "packages": [
                    "str"
                ]
            }
        },
        "get_package_path": {
            "name": "get_package_path",
            "location": 105,
            "return": [],
            "arguments": {
                "package": [
                    "str"
                ]
            }
        },
        "autoimport_and_isort": {
            "name": "autoimport_and_isort",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "flatten1": {
            "name": "flatten1",
            "location": 328,
            "return": [
                "typing.Generator[typing.Union[typing.Text,typing.Text]]"
            ],
            "arguments": {
                "seq": [
                    "dict[, ]",
                    "dict[str, O]",
                    "dict[str, set[str]]",
                    "dict[typing.Hashable, typing.Any]"
                ]
            }
        },
        "dct_to_args": {
            "name": "dct_to_args",
            "location": 332,
            "return": [
                "list[]"
            ],
            "arguments": {
                "dct": [
                    "str",
                    "bool",
                    "dict[str, int]"
                ]
            }
        },
        "publish": {
            "name": "publish",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "version_part": [
                    "str",
                    "list[str]"
                ],
                "verify": [
                    "bool"
                ],
                "docs": [
                    "bool"
                ],
                "bump": [
                    "bool"
                ]
            }
        },
        "coroutine_to_function.wrapper": {
            "name": "wrapper",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "dct_to_args.inner": {
            "name": "inner",
            "location": 333,
            "return": [
                "typing.Generator[list[typing.Text]]",
                "typing.Generator[list[typing.Union[typing.Text,str]]]"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/benchmark/script.py": {
        "coroutine_to_function": {
            "name": "coroutine_to_function",
            "location": 42,
            "return": [],
            "arguments": {
                "coroutine": [
                    "typing.Type"
                ]
            }
        },
        "default_checker": {
            "name": "default_checker",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "proc": [
                    "typing.Callable[typing.Mapping, T]",
                    "int",
                    "float"
                ]
            }
        },
        "most_recent_common_ancestor": {
            "name": "most_recent_common_ancestor",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "packages": [
                    "str"
                ]
            }
        },
        "get_package_path": {
            "name": "get_package_path",
            "location": 105,
            "return": [],
            "arguments": {
                "package": [
                    "str"
                ]
            }
        },
        "autoimport_and_isort": {
            "name": "autoimport_and_isort",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "flatten1": {
            "name": "flatten1",
            "location": 322,
            "return": [
                "typing.Generator[typing.Union[typing.Text,typing.Text]]"
            ],
            "arguments": {
                "seq": [
                    "dict[, ]",
                    "dict[str, O]",
                    "dict[str, set[str]]",
                    "dict[typing.Hashable, typing.Any]"
                ]
            }
        },
        "dct_to_args": {
            "name": "dct_to_args",
            "location": 326,
            "return": [
                "list[]"
            ],
            "arguments": {
                "dct": [
                    "str",
                    "bool",
                    "dict[str, int]"
                ]
            }
        },
        "publish": {
            "name": "publish",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "version_part": [
                    "str",
                    "list[str]"
                ],
                "verify": [
                    "bool"
                ],
                "docs": [
                    "bool"
                ],
                "bump": [
                    "bool"
                ]
            }
        },
        "coroutine_to_function.wrapper": {
            "name": "wrapper",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "dct_to_args.inner": {
            "name": "inner",
            "location": 327,
            "return": [
                "typing.Generator[list[typing.Text]]",
                "typing.Generator[list[typing.Union[typing.Text,str]]]"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/benchmark/test_testmon.py": {
        "test_testmon": {
            "name": "test_testmon",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "f": {
            "name": "f",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "int"
                ]
            }
        },
        "h": {
            "name": "h",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "list[T]",
                    "int",
                    "list[int]"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "list[T]",
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "charmonium.cache-main/benchmark/that_conftest.py": {
        "pytest_itemcollected": {
            "name": "pytest_itemcollected",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "item": [
                    "int",
                    "list[set[str]]"
                ]
            }
        }
    },
    "charmonium.cache-main/benchmark/trace_imports.py": {
        "trace_imports": {
            "name": "trace_imports",
            "location": 16,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "script": [
                    "str",
                    "typing.IO"
                ],
                "trace_log": []
            }
        },
        "trace_imports.hook": {
            "name": "hook",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "args": []
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/add_memoization.py": {
        "add_memoization": {
            "name": "add_memoization",
            "location": 7,
            "return": [],
            "arguments": {
                "code": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/annotate_funcs.py": {
        "annotate_funcs_in_stmt": {
            "name": "annotate_funcs_in_stmt",
            "location": 35,
            "return": [],
            "arguments": {
                "stmt": [],
                "decorator": [
                    "typing.Callable[..., bool]",
                    "str"
                ],
                "copy": [
                    "bool"
                ]
            }
        },
        "annotate_funcs_in_module": {
            "name": "annotate_funcs_in_module",
            "location": 69,
            "return": [
                "dict[str, typing.Any]",
                "str",
                "dict[str, list[str]]",
                "tuple[]"
            ],
            "arguments": {
                "module": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "decorator": [
                    "list[]",
                    "bytes",
                    "typing.IO",
                    "typing.Type"
                ],
                "copy": [
                    "bool"
                ]
            }
        },
        "annotate_funcs_in_file": {
            "name": "annotate_funcs_in_file",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "decorator": [
                    "str"
                ]
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/data2.py": {
        "get_data": {
            "name": "get_data",
            "location": 23,
            "return": [
                "list[tuple[typing.Union[GitHubRepo,RecentCommitChooser,SmartEnvironmentChooser,list[typing.Text]]]]"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/benchmark/benchmark/data3.py": {
        "get_data": {
            "name": "get_data",
            "location": 20,
            "return": [
                "list[tuple[typing.Union[GitHubRepo,RecentCommitChooser,StaticEnvironmentChooser,dict[typing.Text, int]]]]"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/benchmark/benchmark/environment.py": {
        "Environment.setup": {
            "name": "setup",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Environment.install": {
            "name": "install",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_list": [
                    "str",
                    "typing.Sequence[str]",
                    "list[tuple[typing.Union[bytes,bytes]]]"
                ]
            }
        },
        "Environment.run": {
            "name": "run",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "dict[str, str]",
                    "bool"
                ],
                "env": [
                    "dict[str, str]",
                    "bool"
                ],
                "cwd": [
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "Environment.has_package": {
            "name": "has_package",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CondaEnvironment.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "environment": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "CondaEnvironment._conda": {
            "name": "_conda",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "CondaEnvironment.setup": {
            "name": "setup",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CondaEnvironment.install": {
            "name": "install",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packages": [
                    "str",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "CondaEnvironment.run": {
            "name": "run",
            "location": 137,
            "return": [
                "tuple[typing.Union[list[typing.Union[typing.Text,list[str],bool]],list[str],bool]]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "list[str]",
                    "bool"
                ],
                "env": [
                    "list[str]",
                    "bool"
                ],
                "cwd": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "PipenvEnvironment.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pipfile": [
                    "int",
                    "typing.Iterable[T]"
                ]
            }
        },
        "PipenvEnvironment._pipenv": {
            "name": "_pipenv",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PipenvEnvironment.setup": {
            "name": "setup",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PipenvEnvironment.install": {
            "name": "install",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packages": [
                    "str",
                    "int"
                ]
            }
        },
        "PipenvEnvironment.run": {
            "name": "run",
            "location": 183,
            "return": [
                "tuple[typing.Union[list[typing.Union[typing.Text,bool]],bool]]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "bool"
                ],
                "env": [
                    "bool"
                ],
                "cwd": [
                    "bool"
                ]
            }
        },
        "PoetryEnvironment.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pyproject": [
                    "int",
                    "float"
                ]
            }
        },
        "PoetryEnvironment.has_poetry_pyproject": {
            "name": "has_poetry_pyproject",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        },
        "PoetryEnvironment._poetry": {
            "name": "_poetry",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PoetryEnvironment.setup": {
            "name": "setup",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoetryEnvironment.install": {
            "name": "install",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packages": [
                    "bytes",
                    "str"
                ]
            }
        },
        "PoetryEnvironment.run": {
            "name": "run",
            "location": 246,
            "return": [
                "tuple[typing.Union[list[typing.Union[typing.Text,list[str],bool]],list[str],bool,str]]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "list[str]",
                    "bool",
                    "str"
                ],
                "env": [
                    "list[str]",
                    "bool",
                    "str"
                ],
                "cwd": [
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "VirtualEnv.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env_dir": [],
                "requirements": [
                    "tuple[]"
                ],
                "requirements_files": [
                    "tuple[]"
                ],
                "requirements_cwd": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "VirtualEnv.from_pipfile_lock": {
            "name": "from_pipfile_lock",
            "location": 282,
            "return": [
                "VirtualEnv"
            ],
            "arguments": {
                "env_dir": [
                    "str",
                    "None"
                ],
                "pipenv_lock": []
            }
        },
        "VirtualEnv.setup": {
            "name": "setup",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualEnv._run_in_venv": {
            "name": "_run_in_venv",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VirtualEnv.install": {
            "name": "install",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packages": [
                    "str"
                ],
                "cwd": [
                    "None",
                    "str"
                ]
            }
        },
        "VirtualEnv.run": {
            "name": "run",
            "location": 335,
            "return": [
                "tuple[typing.Union[list[str],dict[, ],str]]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "dict[typing.Union[str,str,str,str,str,str,str,str], ]",
                    "str"
                ],
                "env": [
                    "dict[, ]",
                    "str"
                ],
                "cwd": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "EnvironmentChooser.choose": {
            "name": "choose",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "str",
                    "None"
                ]
            }
        },
        "StaticEnvironmentChooser.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "int",
                    "float"
                ]
            }
        },
        "StaticEnvironmentChooser.choose": {
            "name": "choose",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "repo": [
                    "str",
                    "None"
                ]
            }
        },
        "SmartEnvironmentChooser.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "venv_location": [
                    "list[dict[str, typing.Any]]",
                    "bytes",
                    "str",
                    "list[]",
                    "dict[, ]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "SmartEnvironmentChooser.choose": {
            "name": "choose",
            "location": 365,
            "return": [
                "VirtualEnv",
                "CondaEnvironment",
                "PoetryEnvironment",
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "str"
                ]
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/get_repos.py": {
        "parse_github_url": {
            "name": "parse_github_url",
            "location": 39,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "github_url": [
                    "str"
                ]
            }
        },
        "_": {
            "name": "_",
            "location": 64,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "tabu": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "level": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "get_repos": {
            "name": "get_repos",
            "location": 69,
            "return": [
                "list[tuple[typing.Optional[int]]]"
            ],
            "arguments": {
                "record": [
                    "int",
                    "None"
                ]
            }
        },
        "get_results": {
            "name": "get_results",
            "location": 98,
            "return": [
                "list[]"
            ],
            "arguments": {
                "n": [
                    "None",
                    "int",
                    "list[str]"
                ]
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/html.py": {
        "Tag.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "attrib": [
                    "dict[, ]",
                    "dict[str, typing.Callable[, ]]"
                ]
            }
        },
        "Tag.to_xml": {
            "name": "to_xml",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagBuilder.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "TagBuilder.__call__": {
            "name": "__call__",
            "location": 51,
            "return": [
                "Tag"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/html_helpers.py": {
        "html_table": {
            "name": "html_table",
            "location": 8,
            "return": [],
            "arguments": {
                "elems": [],
                "headers": [
                    "None"
                ]
            }
        },
        "html_list": {
            "name": "html_list",
            "location": 22,
            "return": [],
            "arguments": {
                "elements": [],
                "ordered": [
                    "bool"
                ]
            }
        },
        "html_fs_link": {
            "name": "html_fs_link",
            "location": 27,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "highlighted_head": {
            "name": "highlighted_head",
            "location": 31,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "languages": []
            }
        },
        "css_string": {
            "name": "css_string",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "highlighted_code": {
            "name": "highlighted_code",
            "location": 60,
            "return": [],
            "arguments": {
                "lang": [],
                "code": [],
                "width": [
                    "int"
                ]
            }
        },
        "collapsed": {
            "name": "collapsed",
            "location": 76,
            "return": [],
            "arguments": {
                "summary": []
            }
        },
        "disp_bool": {
            "name": "disp_bool",
            "location": 83,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "br_join": {
            "name": "br_join",
            "location": 92,
            "return": [],
            "arguments": {
                "lines": []
            }
        },
        "small": {
            "name": "small",
            "location": 101,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/ipynb_to_script.py": {
        "cells_to_stmts": {
            "name": "cells_to_stmts",
            "location": 12,
            "return": [],
            "arguments": {
                "cells": []
            }
        },
        "sanitize_lines": {
            "name": "sanitize_lines",
            "location": 78,
            "return": [],
            "arguments": {
                "lines": []
            }
        },
        "ipynb_to_cells": {
            "name": "ipynb_to_cells",
            "location": 82,
            "return": [],
            "arguments": {
                "ipynb_src": []
            }
        },
        "cells_to_stmts.line_to_cell": {
            "name": "line_to_cell",
            "location": 20,
            "return": [],
            "arguments": {
                "lineno": []
            }
        },
        "main": {
            "name": "main",
            "location": 96,
            "return": [],
            "arguments": {
                "in_file": [],
                "out_file": []
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/main.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/benchmark/benchmark/pandas_storage.py": {},
    "charmonium.cache-main/benchmark/benchmark/ratelimit_check.py": {
        "hit_limit": {
            "name": "hit_limit",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "github_client": []
            }
        },
        "get_next_waittime": {
            "name": "get_next_waittime",
            "location": 17,
            "return": [],
            "arguments": {
                "github_client": []
            }
        },
        "wait_for_limit": {
            "name": "wait_for_limit",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "github_client": [],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/repo.py": {
        "Repo.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "url": [],
                "dir": [],
                "display_url": [],
                "patch": [],
                "patch_cmds": [],
                "setup_func": [],
                "patch_func": []
            }
        },
        "Repo.clean": {
            "name": "clean",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo._clean": {
            "name": "_clean",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo._setup": {
            "name": "_setup",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.apply_patch": {
            "name": "apply_patch",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.setup": {
            "name": "setup",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "parent": []
            }
        },
        "Repo._checkout": {
            "name": "_checkout",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "Repo.checkout": {
            "name": "checkout",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "Repo.info": {
            "name": "info",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "Repo.top_commit": {
            "name": "top_commit",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo.commit": {
            "name": "commit",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo.top_commit": {
            "name": "top_commit",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo._setup": {
            "name": "_setup",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo._clean": {
            "name": "_clean",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepo.interesting_commits": {
            "name": "interesting_commits",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "min_diff": []
            }
        },
        "GitRepo._checkout": {
            "name": "_checkout",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "GitRepo.info": {
            "name": "info",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "commit": []
            }
        },
        "GitHubRepo.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "CommitChooser.choose": {
            "name": "choose",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "repo": [],
                "relevant_files": []
            }
        },
        "RecentCommitChooser.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "seed": [],
                "n": [],
                "path": []
            }
        },
        "RecentCommitChooser.choose": {
            "name": "choose",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "repo": [],
                "relevant_files": []
            }
        },
        "GitRepo.interesting_commits.filter_pred": {
            "name": "filter_pred",
            "location": 204,
            "return": [],
            "arguments": {
                "commit": []
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/run_experiment.py": {
        "parse_memoized_log": {
            "name": "parse_memoized_log",
            "location": 73,
            "return": [],
            "arguments": {
                "log_path": []
            }
        },
        "run_exec_cmd": {
            "name": "run_exec_cmd",
            "location": 139,
            "return": [],
            "arguments": {
                "environment": [],
                "cmd": [],
                "env": [],
                "cwd": [],
                "dir_modes": [],
                "tmp_dir": [],
                "time_limit": [],
                "mem_limit": []
            }
        },
        "run_once2": {
            "name": "run_once2",
            "location": 187,
            "return": [],
            "arguments": {
                "repo": [],
                "environment": [],
                "env_vars": [],
                "script": [],
                "limits": [],
                "memoize": [],
                "trace": [],
                "trace_imports": [],
                "tmp_dir": []
            }
        },
        "run_once": {
            "name": "run_once",
            "location": 290,
            "return": [],
            "arguments": {
                "repo": [],
                "environment": [],
                "key": [],
                "env_vars": [],
                "script": [],
                "limits": [],
                "memoize": [],
                "trace": [],
                "trace_imports": [],
                "tmp_dir": []
            }
        },
        "run_many": {
            "name": "run_many",
            "location": 328,
            "return": [],
            "arguments": {
                "repo": [],
                "environment": [],
                "commits": [],
                "env_vars": [],
                "script": [],
                "limits": [],
                "memoize": [],
                "trace": []
            }
        },
        "unpyc": {
            "name": "unpyc",
            "location": 349,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "get_repo_result2": {
            "name": "get_repo_result2",
            "location": 359,
            "return": [],
            "arguments": {
                "repo": [],
                "commit_chooser": [],
                "environment_chooser": [],
                "env_vars": [],
                "script": [],
                "limits": []
            }
        },
        "get_repo_result": {
            "name": "get_repo_result",
            "location": 456,
            "return": [],
            "arguments": {
                "repo": [],
                "commit_chooser": [],
                "environment_chooser": [],
                "env_vars": [],
                "script": [],
                "limits": []
            }
        },
        "run_experiment": {
            "name": "run_experiment",
            "location": 488,
            "return": [],
            "arguments": {
                "repos": []
            }
        },
        "FuncCallProfile.empty": {
            "name": "empty",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "FuncCallProfile.total_overhead": {
            "name": "total_overhead",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RunexecStats.create": {
            "name": "create",
            "location": 115,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "CommitInfo.from_commit": {
            "name": "from_commit",
            "location": 319,
            "return": [],
            "arguments": {
                "repo": [],
                "commit": []
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/test.py": {
        "g": {
            "name": "g",
            "location": 1,
            "return": [
                "int",
                "dict[str, str]",
                "dict[str, int]",
                "dict[str, typing.Union[int,str]]",
                "dict[str, float]",
                "list[int]",
                "dict[str, typing.Union[int,None]]",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "float",
                    "int"
                ],
                "b": [
                    "float",
                    "int"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 9,
            "return": [
                "int",
                "list[int]",
                "float"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/benchmark/benchmark/util.py": {
        "merge": {
            "name": "merge",
            "location": 47,
            "return": [],
            "arguments": {
                "dcts": []
            }
        },
        "raise_": {
            "name": "raise_",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [
                    "typing.Type",
                    "Exception",
                    "None",
                    "bool"
                ]
            }
        },
        "relative_to": {
            "name": "relative_to",
            "location": 59,
            "return": [
                "int",
                "list[]"
            ],
            "arguments": {
                "dest": [],
                "source": []
            }
        },
        "timed_subprocess_run": {
            "name": "timed_subprocess_run",
            "location": 103,
            "return": [
                "TimedCompletedProcess"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "list[str]",
                    "dict[str, str]",
                    "list[]"
                ],
                "env": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, str]",
                    "list[]"
                ],
                "cwd": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, str]",
                    "list[]"
                ],
                "check": [
                    "bool"
                ]
            }
        },
        "which": {
            "name": "which",
            "location": 144,
            "return": [
                "Path"
            ],
            "arguments": {
                "binary": [
                    "bytes",
                    "int",
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "format_command": {
            "name": "format_command",
            "location": 176,
            "return": [],
            "arguments": {
                "cmd": [
                    "bool",
                    "str",
                    "None"
                ],
                "cwd": [
                    "None",
                    "dict[, ]",
                    "list[]",
                    "dict[str, str]",
                    "list[str]",
                    "typing.Callable[, ]"
                ],
                "env_override": [
                    "None",
                    "int",
                    "dict[, ]"
                ],
                "env": [
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "merge_envs": {
            "name": "merge_envs",
            "location": 207,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "project": {
            "name": "project",
            "location": 219,
            "return": [
                "dict[tuple[typing.Union[str,typing.Any]], tuple[typing.Union[str,typing.Any]]]"
            ],
            "arguments": {
                "dct": [
                    "dict[str, typing.Any]"
                ],
                "keys": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "combine_cmd": {
            "name": "combine_cmd",
            "location": 223,
            "return": [
                "tuple[typing.Union[typing.Text,list[],dict[str, typing.Any],dict[typing.Hashable, typing.Any],dict[, ]]]"
            ],
            "arguments": {
                "cmd": [
                    "dict[str, typing.Any]",
                    "dict[typing.Hashable, typing.Any]",
                    "dict[, ]"
                ],
                "env": [
                    "dict[str, typing.Any]",
                    "dict[typing.Hashable, typing.Any]",
                    "dict[, ]"
                ],
                "cwd": [
                    "dict[str, typing.Any]",
                    "dict[typing.Hashable, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "catch_signals": {
            "name": "catch_signals",
            "location": 240,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "signal_catchers": [
                    "dict[, ]",
                    "dict[tuple[typing.Union[int,...]], float]"
                ]
            }
        },
        "runexec_catch_signals": {
            "name": "runexec_catch_signals",
            "location": 255,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "run_executor": [
                    "bool",
                    "typing.Iterator",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "capture_logs": {
            "name": "capture_logs",
            "location": 283,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "logger": [],
                "level": [
                    "int",
                    "BaseException",
                    "None",
                    "Exception"
                ]
            }
        },
        "first_sentinel": {
            "name": "first_sentinel",
            "location": 293,
            "return": [
                "typing.Generator[tuple[bool]]"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "last_sentinel": {
            "name": "last_sentinel",
            "location": 299,
            "return": [
                "typing.Generator[tuple[bool]]"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "int"
                ]
            }
        },
        "count": {
            "name": "count",
            "location": 312,
            "return": [
                "int"
            ],
            "arguments": {
                "it": [
                    "str"
                ]
            }
        },
        "unwrap": {
            "name": "unwrap",
            "location": 318,
            "return": [
                "int",
                "None",
                "list[typing.Callable[, ]]",
                "str"
            ],
            "arguments": {
                "val": [
                    "int",
                    "None",
                    "list[typing.Callable[, ]]",
                    "str"
                ]
            }
        },
        "CalledProcessError.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str"
                ],
                "env": [
                    "str"
                ],
                "cwd": [
                    "str"
                ],
                "returncode": [
                    "str"
                ],
                "stdout": [
                    "str"
                ],
                "stderr": [
                    "str"
                ]
            }
        },
        "CalledProcessError.__str__": {
            "name": "__str__",
            "location": 99,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimedCompletedProcess.cpu_time": {
            "name": "cpu_time",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "runexec_catch_signals.run_executor_stop": {
            "name": "run_executor_stop",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "signal_number": [],
                "_": []
            }
        },
        "CaptureHandler.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "CaptureHandler.emit": {
            "name": "emit",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/write_summary.py": {
        "disp_date": {
            "name": "disp_date",
            "location": 47,
            "return": [],
            "arguments": {
                "date": []
            }
        },
        "disp_hash": {
            "name": "disp_hash",
            "location": 51,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "disp_sec": {
            "name": "disp_sec",
            "location": 55,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "disp_mem": {
            "name": "disp_mem",
            "location": 59,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "summarize_func_calls": {
            "name": "summarize_func_calls",
            "location": 64,
            "return": [],
            "arguments": {
                "func_calls": []
            }
        },
        "count": {
            "name": "count",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {
                "it": []
            }
        },
        "summarize_commit_str": {
            "name": "summarize_commit_str",
            "location": 117,
            "return": [],
            "arguments": {
                "repo": [],
                "commit": []
            }
        },
        "color_cell": {
            "name": "color_cell",
            "location": 140,
            "return": [],
            "arguments": {
                "elem": [],
                "color_class": []
            }
        },
        "get_process_overhead": {
            "name": "get_process_overhead",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "prof": []
            }
        },
        "summarize_commit_result": {
            "name": "summarize_commit_result",
            "location": 157,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "repo": [],
                "commit": [],
                "exes": []
            }
        },
        "summarize_environment": {
            "name": "summarize_environment",
            "location": 264,
            "return": [],
            "arguments": {
                "environment": []
            }
        },
        "get_nonzero_executions": {
            "name": "get_nonzero_executions",
            "location": 304,
            "return": [
                "list[dict[, ]]"
            ],
            "arguments": {
                "repo_result": []
            }
        },
        "speedup_ratio": {
            "name": "speedup_ratio",
            "location": 318,
            "return": [],
            "arguments": {
                "repo_result": []
            }
        },
        "original_time": {
            "name": "original_time",
            "location": 341,
            "return": [],
            "arguments": {
                "repo_result": []
            }
        },
        "total_speedup": {
            "name": "total_speedup",
            "location": 362,
            "return": [
                "None",
                "tuple[]"
            ],
            "arguments": {
                "repo_results": []
            }
        },
        "result_mismatch": {
            "name": "result_mismatch",
            "location": 405,
            "return": [
                "bool"
            ],
            "arguments": {
                "executions": []
            }
        },
        "get_command": {
            "name": "get_command",
            "location": 413,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "repo_result": []
            }
        },
        "summarize_repo_result": {
            "name": "summarize_repo_result",
            "location": 417,
            "return": [
                "list[]"
            ],
            "arguments": {
                "result": []
            }
        },
        "sort_key": {
            "name": "sort_key",
            "location": 496,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "repo_result": []
            }
        },
        "summarize_repo_results": {
            "name": "summarize_repo_results",
            "location": 523,
            "return": [],
            "arguments": {
                "repo_results": []
            }
        },
        "write_summary": {
            "name": "write_summary",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_results": []
            }
        }
    },
    "charmonium.cache-main/benchmark/benchmark/__init__.py": {},
    "charmonium.cache-main/benchmark/resources/astropy/UVES.py": {
        "cell1": {
            "name": "cell1",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "cell2": {
            "name": "cell2",
            "location": 42,
            "return": [
                "list[]"
            ],
            "arguments": {
                "working_dir_path": []
            }
        },
        "cell3": {
            "name": "cell3",
            "location": 52,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "filelist": [
                    "str"
                ]
            }
        },
        "read_spec": {
            "name": "read_spec",
            "location": 62,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "read_setup": {
            "name": "read_setup",
            "location": 89,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "cell8": {
            "name": "cell8",
            "location": 108,
            "return": [
                "list[]"
            ],
            "arguments": {
                "filelist": [
                    "str"
                ]
            }
        },
        "cell9": {
            "name": "cell9",
            "location": 116,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "len_wavelength": [
                    "list[int]",
                    "list[str]",
                    "list[]",
                    "int",
                    "typing.Sequence[T]"
                ],
                "filelist": []
            }
        },
        "cell10": {
            "name": "cell10",
            "location": 127,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "wavelength": [
                    "str"
                ]
            }
        },
        "cell11": {
            "name": "cell11",
            "location": 139,
            "return": [
                "float"
            ],
            "arguments": {
                "M_MN_Lup": [
                    "bool"
                ],
                "R_MN_Lup": [
                    "bool"
                ]
            }
        },
        "cell12": {
            "name": "cell12",
            "location": 143,
            "return": [
                "int"
            ],
            "arguments": {
                "incl": [
                    "int",
                    "str",
                    "typing.Sequence[T]",
                    "list[list[int]]",
                    "list[]"
                ],
                "vsini": [
                    "int",
                    "str",
                    "typing.Sequence[T]",
                    "list[list[int]]",
                    "list[]"
                ],
                "v_accr": [
                    "int"
                ]
            }
        },
        "cell13": {
            "name": "cell13",
            "location": 149,
            "return": [],
            "arguments": {
                "v_accr": [
                    "float",
                    "int"
                ],
                "v_rot": [
                    "float",
                    "int"
                ]
            }
        },
        "cell14": {
            "name": "cell14",
            "location": 153,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "heliocentric": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "wavelength": [
                    "int",
                    "str"
                ]
            }
        },
        "cell15": {
            "name": "cell15",
            "location": 158,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "heliocentric": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "wavelength": [
                    "int",
                    "str"
                ]
            }
        },
        "cell16": {
            "name": "cell16",
            "location": 163,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "wavelength": [
                    "int",
                    "typing.Sequence['cirq.Qid']"
                ]
            }
        },
        "cell17": {
            "name": "cell17",
            "location": 169,
            "return": [],
            "arguments": {
                "M_MN_Lup": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "R_MN_Lup": []
            }
        },
        "cell18": {
            "name": "cell18",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "wave2doppler": {
            "name": "wave2doppler",
            "location": 177,
            "return": [],
            "arguments": {
                "w": [
                    "int",
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "w0": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "cell19": {
            "name": "cell19",
            "location": 183,
            "return": [],
            "arguments": {
                "waveclosetoHa": [
                    "float"
                ]
            }
        },
        "w2vsini": {
            "name": "w2vsini",
            "location": 186,
            "return": [
                "float"
            ],
            "arguments": {
                "w": [],
                "w0": [],
                "vsini": [
                    "int"
                ]
            }
        },
        "cell22": {
            "name": "cell22",
            "location": 190,
            "return": [
                "tuple[Time]"
            ],
            "arguments": {
                "header": []
            }
        },
        "cell25": {
            "name": "cell25",
            "location": 196,
            "return": [
                "dict[int, tuple[typing.Union[int,str]]]"
            ],
            "arguments": {
                "date": []
            }
        },
        "cell26": {
            "name": "cell26",
            "location": 202,
            "return": [
                "float"
            ],
            "arguments": {
                "period": [
                    "int",
                    "float",
                    "str"
                ],
                "delta_t": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "region_around_line": {
            "name": "region_around_line",
            "location": 207,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "w": [],
                "flux": [
                    "str"
                ],
                "cont": [
                    "str"
                ]
            }
        },
        "cell27": {
            "name": "cell27",
            "location": 229,
            "return": [
                "tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str]]"
            ],
            "arguments": {
                "flux": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "wavelength": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "cell28": {
            "name": "cell28",
            "location": 234,
            "return": [],
            "arguments": {
                "fcaII": [
                    "str"
                ],
                "wcaII": [
                    "list['cirq.Qid']",
                    "int",
                    "list[]"
                ]
            }
        },
        "cell29": {
            "name": "cell29",
            "location": 240,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "fcaII": [
                    "int"
                ],
                "wcaII": [
                    "list['cirq.Qid']",
                    "int",
                    "list[]"
                ]
            }
        },
        "cell30": {
            "name": "cell30",
            "location": 246,
            "return": [
                "str"
            ],
            "arguments": {
                "delta_p": [
                    "int",
                    "str",
                    "None"
                ],
                "date": [
                    "str",
                    "None",
                    "typing.Any"
                ],
                "working_dir_path": [
                    "str",
                    "bool"
                ],
                "ew": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "cell31": {
            "name": "cell31",
            "location": 254,
            "return": [
                "int",
                "str",
                "list[]"
            ],
            "arguments": {
                "wcaII": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "vsini": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "serialize_fig": {
            "name": "serialize_fig",
            "location": 259,
            "return": [],
            "arguments": {}
        },
        "cell32": {
            "name": "cell32",
            "location": 264,
            "return": [],
            "arguments": {
                "fcaII": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "cell33": {
            "name": "cell33",
            "location": 274,
            "return": [],
            "arguments": {
                "fcaII": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "cell34": {
            "name": "cell34",
            "location": 291,
            "return": [
                "int"
            ],
            "arguments": {
                "fcaII": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "cell35": {
            "name": "cell35",
            "location": 296,
            "return": [],
            "arguments": {
                "fdiff": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "cell36": {
            "name": "cell36",
            "location": 302,
            "return": [
                "tuple[tuple[bool]]"
            ],
            "arguments": {
                "fdiff": [],
                "delta_p": [
                    "str"
                ],
                "x": [
                    "int"
                ]
            }
        },
        "cell37": {
            "name": "cell37",
            "location": 314,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "typing.Sequence[int]",
                    "typing.Sequence[float]"
                ],
                "ind1": [
                    "int",
                    "float",
                    "str"
                ],
                "fdiff": [
                    "int"
                ],
                "delta_p": [
                    "int",
                    "bytes"
                ],
                "ind2": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "make_graphs": {
            "name": "make_graphs",
            "location": 335,
            "return": [
                "list[typing.Union[float,int,dict[, ],list[int],list[list[int]],str,list[]]]"
            ],
            "arguments": {
                "fcaII": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "fdiff": [
                    "int",
                    "float"
                ],
                "delta_p": [
                    "float",
                    "int",
                    "None",
                    "str"
                ],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/benchmark/resources/eht-imaging/example.py": {
        "get_data": {
            "name": "get_data",
            "location": 41,
            "return": [
                "tuple[typing.Union[str,list[],dict[, ],float,list[int],list[list[int]]]]"
            ],
            "arguments": {}
        },
        "get_obs": {
            "name": "get_obs",
            "location": 48,
            "return": [],
            "arguments": {
                "im": [],
                "eht": [
                    "str",
                    "None",
                    "bool",
                    "float"
                ]
            }
        },
        "deblur": {
            "name": "deblur",
            "location": 64,
            "return": [],
            "arguments": {
                "obs": []
            }
        },
        "plot_stuff": {
            "name": "plot_stuff",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_params": {
            "name": "get_params",
            "location": 86,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "obs": []
            }
        },
        "save_data": {
            "name": "save_data",
            "location": 92,
            "return": [
                "tuple[FileContents]"
            ],
            "arguments": {
                "obs": []
            }
        },
        "get_prior": {
            "name": "get_prior",
            "location": 99,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "im": [],
                "obs": [
                    "str",
                    "float",
                    "bytearray"
                ]
            }
        },
        "fit": {
            "name": "fit",
            "location": 111,
            "return": [],
            "arguments": {
                "obs": [
                    "int",
                    "tuple[]",
                    "None"
                ],
                "flux": [
                    "int",
                    "tuple[]",
                    "None"
                ],
                "gaussprior": [
                    "int",
                    "tuple[]",
                    "None"
                ],
                "res": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/benchmark/tests/test_main.py": {},
    "charmonium.cache-main/charmonium/cache/helpers.py": {
        "FileContents.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "comparison": [
                    "typing.Text"
                ]
            }
        },
        "FileContents.__add__": {
            "name": "__add__",
            "location": 51,
            "return": [
                "FileContents"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "FileContents.__radd__": {
            "name": "__radd__",
            "location": 55,
            "return": [
                "FileContents"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "FileContents.__fspath__": {
            "name": "__fspath__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileContents.__cache_key__": {
            "name": "__cache_key__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileContents.__cache_ver__": {
            "name": "__cache_ver__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileContents.__getstate__": {
            "name": "__getstate__",
            "location": 73,
            "return": [
                "tuple[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileContents.__setstate__": {
            "name": "__setstate__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "bytes",
                    "list[bytes]",
                    "str"
                ]
            }
        },
        "TTLInterval.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "int"
                ]
            }
        },
        "TTLInterval.__call__": {
            "name": "__call__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "charmonium.cache-main/charmonium/cache/index.py": {
        "Index.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "float"
                ],
                "deleter": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "Index.__getstate__": {
            "name": "__getstate__",
            "location": 26,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.__setstate__": {
            "name": "__setstate__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "list[bytes]",
                    "bytes"
                ]
            }
        },
        "Index._items": {
            "name": "_items",
            "location": 37,
            "return": [
                "typing.Generator[tuple[]]",
                "typing.Generator[]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "keys": [],
                "max_depth": [
                    "dict[, ]",
                    "bool",
                    "str"
                ]
            }
        },
        "Index.items": {
            "name": "items",
            "location": 49,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index._delete": {
            "name": "_delete",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "keys": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "Index._get_last_level": {
            "name": "_get_last_level",
            "location": 58,
            "return": [
                "None",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "Index._get_or_create_last_level": {
            "name": "_get_or_create_last_level",
            "location": 72,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "Index.get_or": {
            "name": "get_or",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "list[int]",
                    "bytes"
                ],
                "thunk": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Index.__setitem__": {
            "name": "__setitem__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str"
                ],
                "val": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Index.__delitem__": {
            "name": "__delitem__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "bytes",
                    "int"
                ]
            }
        },
        "Index.__getitem__": {
            "name": "__getitem__",
            "location": 116,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        },
        "Index.__contains__": {
            "name": "__contains__",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "keys": []
            }
        },
        "Index.update": {
            "name": "update",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "charmonium.cache-main/charmonium/cache/memoize.py": {
        "memoize": {
            "name": "memoize",
            "location": 55,
            "return": [
                "typing.Callable[, ]"
            ],
            "arguments": {}
        },
        "perf_ctx": {
            "name": "perf_ctx",
            "location": 103,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "event": [
                    "int",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "MemoizedGroup.__getstate__": {
            "name": "__getstate__",
            "location": 142,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoizedGroup.__setstate__": {
            "name": "__setstate__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MemoizedGroup.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoizedGroup._deleter": {
            "name": "_deleter",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[, ]"
                ]
            }
        },
        "MemoizedGroup._index_read": {
            "name": "_index_read",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoizedGroup._index_read_nolock": {
            "name": "_index_read_nolock",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoizedGroup._index_write": {
            "name": "_index_write",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoizedGroup._system_state": {
            "name": "_system_state",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemoizedGroup._evict": {
            "name": "_evict",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoizedGroup.remove_orphans": {
            "name": "remove_orphans",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memoized.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "str",
                    "bool",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "Memoized.log_usage_report": {
            "name": "log_usage_report",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memoized._pickler": {
            "name": "_pickler",
            "location": 477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Memoized._func_state": {
            "name": "_func_state",
            "location": 486,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Memoized._combine_args": {
            "name": "_combine_args",
            "location": 511,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "Memoized._args2key": {
            "name": "_args2key",
            "location": 519,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memoized._args2ver": {
            "name": "_args2ver",
            "location": 527,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memoized.__str__": {
            "name": "__str__",
            "location": 535,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memoized._recompute": {
            "name": "_recompute",
            "location": 538,
            "return": [
                "tuple[Entry]"
            ],
            "arguments": {
                "self": [],
                "call_id": [
                    "str",
                    "typing.Sequence[str]",
                    "None",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "obj_key": [
                    "str",
                    "set[]",
                    "None"
                ]
            }
        },
        "Memoized.__getfrozenstate__": {
            "name": "__getfrozenstate__",
            "location": 602,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Memoized.__call__": {
            "name": "__call__",
            "location": 605,
            "return": [
                "list[typing.Any]",
                "str",
                "tuple[typing.Union[list[typing.Any],list[typing.Any],list[typing.Any],list[typing.Any],list[typing.Any],list[typing.Any],float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Memoized._compress": {
            "name": "_compress",
            "location": 708,
            "return": [
                "int",
                "typing.Callable[, ]",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Memoized.would_hit": {
            "name": "would_hit",
            "location": 714,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Memoized._would_hit": {
            "name": "_would_hit",
            "location": 719,
            "return": [
                "tuple[typing.Union[bool,tuple[],dict[, ],typing.Type,str]]"
            ],
            "arguments": {
                "self": [],
                "call_id": [
                    "int",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "Memoized.__get__": {
            "name": "__get__",
            "location": 747,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool"
                ],
                "instancetype": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "BoundMemoized.__init__": {
            "name": "__init__",
            "location": 759,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memoized": [
                    "int",
                    "float"
                ],
                "instance": [
                    "int",
                    "float"
                ]
            }
        },
        "BoundMemoized.__call__": {
            "name": "__call__",
            "location": 763,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoundMemoized.__getattr__": {
            "name": "__getattr__",
            "location": 766,
            "return": [],
            "arguments": {
                "self": [],
                "attribute": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "memoize.actual_memoize": {
            "name": "actual_memoize",
            "location": 72,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "charmonium.cache-main/charmonium/cache/obj_store.py": {
        "ObjStore.__setitem__": {
            "name": "__setitem__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ],
                "val": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "ObjStore.__getitem__": {
            "name": "__getitem__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "ObjStore.__delitem__": {
            "name": "__delitem__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "ObjStore.__contains__": {
            "name": "__contains__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "ObjStore.__iter__": {
            "name": "__iter__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjStore.clear": {
            "name": "clear",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirObjStore.__determ_hash__": {
            "name": "__determ_hash__",
            "location": 58,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirObjStore.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None",
                    "dict[str, bytes]",
                    "dict[str, D]"
                ],
                "key_bytes": [
                    "int"
                ]
            }
        },
        "DirObjStore._int2str": {
            "name": "_int2str",
            "location": 79,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "DirObjStore._is_key": {
            "name": "_is_key",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "DirObjStore.__setitem__": {
            "name": "__setitem__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "bytes"
                ],
                "val": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "DirObjStore.__getitem__": {
            "name": "__getitem__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DirObjStore.__delitem__": {
            "name": "__delitem__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "DirObjStore.__contains__": {
            "name": "__contains__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "DirObjStore.__iter__": {
            "name": "__iter__",
            "location": 106,
            "return": [
                "typing.Generator[typing.Generator[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirObjStore.clear": {
            "name": "clear",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "charmonium.cache-main/charmonium/cache/pathlike.py": {
        "pathlike_from": {
            "name": "pathlike_from",
            "location": 61,
            "return": [
                "Path"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "PathLike.__truediv__": {
            "name": "__truediv__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "PathLike.read_bytes": {
            "name": "read_bytes",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathLike.write_bytes": {
            "name": "write_bytes",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "dict[, ]",
                    "list[]",
                    "memoryview"
                ]
            }
        },
        "PathLike.mkdir": {
            "name": "mkdir",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathLike.unlink": {
            "name": "unlink",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "missing_ok": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "PathLike.iterdir": {
            "name": "iterdir",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathLike.stat": {
            "name": "stat",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathLike.parent": {
            "name": "parent",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathLike.exists": {
            "name": "exists",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathLike.resolve": {
            "name": "resolve",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PathLike.__fspath__": {
            "name": "__fspath__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "charmonium.cache-main/charmonium/cache/pickler.py": {
        "Pickler.loads": {
            "name": "loads",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.IO"
                ]
            }
        },
        "Pickler.dumps": {
            "name": "dumps",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "charmonium.cache-main/charmonium/cache/replacement_policies.py": {
        "ReplacementPolicy.add": {
            "name": "add",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "entry": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "ReplacementPolicy.access": {
            "name": "access",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ],
                "entry": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "ReplacementPolicy.invalidate": {
            "name": "invalidate",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ],
                "entry": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "ReplacementPolicy.evict": {
            "name": "evict",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplacementPolicy.update": {
            "name": "update",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool"
                ]
            }
        },
        "GDSize.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GDSize.add": {
            "name": "add",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "tuple[]"
                ],
                "entry": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "tuple[]"
                ]
            }
        },
        "GDSize.access": {
            "name": "access",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "entry": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "GDSize.invalidate": {
            "name": "invalidate",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "tuple[typing.Union[str,str]]"
                ],
                "entry": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "GDSize.evict": {
            "name": "evict",
            "location": 81,
            "return": [
                "tuple[typing.Union[str,list[int],int,tuple[str],dict[str, bool],dict[, ],typing.DefaultDict,typing.Type,dict[typing.Union[str,None], typing.Any]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GDSize.update": {
            "name": "update",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Any",
                    "None",
                    "str",
                    "set[]"
                ]
            }
        }
    },
    "charmonium.cache-main/charmonium/cache/rw_lock.py": {
        "Lock.__enter__": {
            "name": "__enter__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lock.__exit__": {
            "name": "__exit__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "None",
                    "typing.Type",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "RWLock.reader": {
            "name": "reader",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLock.writer": {
            "name": "writer",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaiveRWLock.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock": [
                    "int",
                    "float"
                ]
            }
        },
        "NaiveRWLock.reader": {
            "name": "reader",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NaiveRWLock.writer": {
            "name": "writer",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileRWLock.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "FileRWLock.writer": {
            "name": "writer",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileRWLock.reader": {
            "name": "reader",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "charmonium.cache-main/charmonium/cache/util.py": {
        "identity": {
            "name": "identity",
            "location": 90,
            "return": [
                "int",
                "str",
                "typing.Iterable[C]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "none_tuple": {
            "name": "none_tuple",
            "location": 94,
            "return": [
                "tuple[typing.Union[int,list[str],list[typing.Callable[, ]]]]",
                "tuple[]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "None",
                    "list[str]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "with_attr": {
            "name": "with_attr",
            "location": 120,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "None"
                ],
                "attr_name": [
                    "str",
                    "None"
                ],
                "attr_val": [
                    "str",
                    "None"
                ]
            }
        },
        "temp_path": {
            "name": "temp_path",
            "location": 125,
            "return": [
                "Path"
            ],
            "arguments": {
                "suffix": [
                    "None",
                    "str",
                    "tuple[str]"
                ],
                "prefix": [
                    "None",
                    "str",
                    "tuple[str]"
                ],
                "directory": [
                    "None",
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "ellipsize": {
            "name": "ellipsize",
            "location": 137,
            "return": [],
            "arguments": {
                "string": [],
                "size": [
                    "int"
                ],
                "ellipsis": []
            }
        },
        "Constant.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "float"
                ]
            }
        },
        "Constant.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Constant.__call__": {
            "name": "__call__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Future.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "thunk": [
                    "int",
                    "float"
                ]
            }
        },
        "Future.unwrap": {
            "name": "unwrap",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Future.__getattr__": {
            "name": "__getattr__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "this_attr": [
                    "str",
                    "bool"
                ]
            }
        },
        "Future.create": {
            "name": "create",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "thunk": [
                    "typing.Type",
                    "None",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "GetAttr.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetAttr.__call__": {
            "name": "__call__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "None"
                ],
                "attr_name": [
                    "str"
                ],
                "default": [],
                "check_callable": [
                    "bool"
                ]
            }
        }
    },
    "charmonium.cache-main/charmonium/cache/__init__.py": {},
    "charmonium.cache-main/docsrc/conf.py": {},
    "charmonium.cache-main/tests/test_code_change.py": {
        "run_script": {
            "name": "run_script",
            "location": 26,
            "return": [],
            "arguments": {
                "directory": [],
                "name": [
                    "typing.Text"
                ],
                "source_var": [
                    "int"
                ],
                "closure_var": [
                    "int"
                ],
                "closure_func_source_var": [
                    "int"
                ],
                "other_var": [
                    "int"
                ],
                "as_main": [
                    "bool"
                ],
                "inputs": [
                    "tuple[int]"
                ]
            }
        },
        "test_code_change": {
            "name": "test_code_change",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "serializer": [
                    "str",
                    "bool",
                    "None"
                ],
                "change": [
                    "str"
                ],
                "as_main": [
                    "str"
                ]
            }
        }
    },
    "charmonium.cache-main/tests/test_helpers.py": {
        "double": {
            "name": "double",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "infilename": [
                    "str"
                ]
            }
        },
        "test_filecontents": {
            "name": "test_filecontents",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filecontents_empty": {
            "name": "test_filecontents_empty",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filecontents_add": {
            "name": "test_filecontents_add",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_now": {
            "name": "get_now",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_ttl": {
            "name": "test_ttl",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/tests/test_index.py": {
        "test_index": {
            "name": "test_index",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_del": {
            "name": "test_index_del",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_thunk": {
            "name": "test_thunk",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contains": {
            "name": "test_contains",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raises_wrong_schema": {
            "name": "test_raises_wrong_schema",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/tests/test_memoize.py": {
        "test_memoize": {
            "name": "test_memoize",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "kwargs": [],
                "group_kwargs": []
            }
        },
        "test_memoize_impure_closure": {
            "name": "test_memoize_impure_closure",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eviction": {
            "name": "test_eviction",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "use_obj_store": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[str,str]]]",
                    "None"
                ]
            }
        },
        "test_verbose": {
            "name": "test_verbose",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_composition": {
            "name": "test_composition",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_read_write_cycle": {
            "name": "test_read_write_cycle",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memoize.square": {
            "name": "square",
            "location": 49,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_memoize_impure_closure.square": {
            "name": "square",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_eviction.big_fn": {
            "name": "big_fn",
            "location": 85,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_verbose.square_loud": {
            "name": "square_loud",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_composition.double": {
            "name": "double",
            "location": 123,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_composition.double_square": {
            "name": "double_square",
            "location": 129,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "test_read_write_cycle.double": {
            "name": "double",
            "location": 140,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_verbose.foo": {
            "name": "foo",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/tests/test_memoize_parallel.py": {
        "cyclic_permutation": {
            "name": "cyclic_permutation",
            "location": 54,
            "return": [
                "typing.Generator[typing.Union[str,list[int],list[str]]]",
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "iterable": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ],
                "offset": [
                    "list[]",
                    "str",
                    "set[str]"
                ]
            }
        },
        "make_overlapping_calls": {
            "name": "make_overlapping_calls",
            "location": 61,
            "return": [
                "tuple[typing.Union[tuple[],set[]]]"
            ],
            "arguments": {
                "n_workers": [
                    "int"
                ],
                "n_overlap": [
                    "int",
                    "list[list[]]"
                ]
            }
        },
        "square": {
            "name": "square",
            "location": 76,
            "return": [
                "int"
            ],
            "arguments": {
                "x": []
            }
        },
        "square_all": {
            "name": "square_all",
            "location": 81,
            "return": [
                "list[]"
            ],
            "arguments": {
                "lst": [
                    "int",
                    "str",
                    "set[str]"
                ]
            }
        },
        "test_parallelism": {
            "name": "test_parallelism",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "ParallelType": [
                    "typing.Type"
                ]
            }
        },
        "test_cloudpickle": {
            "name": "test_cloudpickle",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dask_bag": {
            "name": "test_dask_bag",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dask_delayed": {
            "name": "test_dask_delayed",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Parallel.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "args": [
                    "tuple[]"
                ]
            }
        },
        "Parallel.start": {
            "name": "start",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parallel.join": {
            "name": "join",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "charmonium.cache-main/tests/test_method_decorator.py": {
        "test_instancemethod": {
            "name": "test_instancemethod",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_classmethod": {
            "name": "test_classmethod",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_staticemethod": {
            "name": "test_staticemethod",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_instancemethod.Class.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "test_instancemethod.Class.method": {
            "name": "method",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "z": []
            }
        },
        "test_classmethod.Class.method": {
            "name": "method",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [],
                "z": []
            }
        },
        "test_staticemethod.Class.method": {
            "name": "method",
            "location": 43,
            "return": [],
            "arguments": {
                "z": []
            }
        }
    },
    "charmonium.cache-main/tests/test_obj_store.py": {
        "test_obj_store": {
            "name": "test_obj_store",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/tests/test_timed_block.py": {
        "test": {
            "name": "test",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test.foo": {
            "name": "foo",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "charmonium.cache-main/tests/test_util.py": {
        "test_pathlike": {
            "name": "test_pathlike",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_future": {
            "name": "test_future",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_getattr": {
            "name": "test_getattr",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_constant": {
            "name": "test_constant",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ellipsize": {
            "name": "test_ellipsize",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_future.Struct.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "test_getattr.Class.method1": {
            "name": "method1",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "charmonium.cache-main/typings/bitmath.py": {
        "MiB": {
            "name": "MiB",
            "location": 17,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "KiB": {
            "name": "KiB",
            "location": 18,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Byte": {
            "name": "Byte",
            "location": 19,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "parse_string": {
            "name": "parse_string",
            "location": 20,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Bitmath.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Bitmath.to_MiB": {
            "name": "to_MiB",
            "location": 4,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bitmath.to_KiB": {
            "name": "to_KiB",
            "location": 5,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bitmath.to_Byte": {
            "name": "to_Byte",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bitmath.__add__": {
            "name": "__add__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Bitmath.__sub__": {
            "name": "__sub__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Bitmath.__lt__": {
            "name": "__lt__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Bitmath.__le__": {
            "name": "__le__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Bitmath.__gt__": {
            "name": "__gt__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Bitmath.__ge__": {
            "name": "__ge__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Bitmath.__eq__": {
            "name": "__eq__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Bitmath.__ne__": {
            "name": "__ne__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Bitmath.format": {
            "name": "format",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "fmt_string": []
            }
        }
    },
    "charmonium.cache-main/typings/cloudpickle.py": {
        "loads": {
            "name": "loads",
            "location": 3,
            "return": [],
            "arguments": {
                "buffer": []
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 4,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "charmonium.cache-main/typings/dill.py": {
        "loads": {
            "name": "loads",
            "location": 3,
            "return": [],
            "arguments": {
                "buffer": []
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 4,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "charmonium.cache-main/typings/fasteners.py": {
        "Lock.__enter__": {
            "name": "__enter__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lock.__exit__": {
            "name": "__exit__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "InterProcessReaderWriterLock.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "InterProcessReaderWriterLock.read_lock": {
            "name": "read_lock",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterProcessReaderWriterLock.write_lock": {
            "name": "write_lock",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InterProcessLock.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "charmonium.cache-main/typings/pytest.py": {
        "raises": {
            "name": "raises",
            "location": 3,
            "return": [],
            "arguments": {
                "exc": []
            }
        },
        "warns": {
            "name": "warns",
            "location": 4,
            "return": [],
            "arguments": {
                "exc": []
            }
        },
        "_Mark.parametrize": {
            "name": "parametrize",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "vals": []
            }
        },
        "_Mark.xfail": {
            "name": "xfail",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        }
    }
}
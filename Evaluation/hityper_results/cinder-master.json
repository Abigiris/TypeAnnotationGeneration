{
    "cinder-master/setup.py": {},
    "cinder-master/benchmarks/bm_richards.py": {
        "trace": {
            "name": "trace",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "None",
                    "typing.Type",
                    "float"
                ]
            }
        },
        "schedule": {
            "name": "schedule",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Packet.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "l": [
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "str",
                    "None"
                ],
                "i": [
                    "int",
                    "str"
                ],
                "k": [
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Packet.append_to": {
            "name": "append_to",
            "location": 45,
            "return": [
                "Packet",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "lst": [
                    "str",
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "DeviceTaskRec.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IdleTaskRec.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandlerTaskRec.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HandlerTaskRec.workInAdd": {
            "name": "workInAdd",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "HandlerTaskRec.deviceInAdd": {
            "name": "deviceInAdd",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "WorkerTaskRec.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskState.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskState.packetPending": {
            "name": "packetPending",
            "location": 108,
            "return": [
                "TaskState"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskState.waiting": {
            "name": "waiting",
            "location": 114,
            "return": [
                "TaskState"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskState.running": {
            "name": "running",
            "location": 120,
            "return": [
                "TaskState"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskState.waitingWithPacket": {
            "name": "waitingWithPacket",
            "location": 126,
            "return": [
                "TaskState"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskState.isPacketPending": {
            "name": "isPacketPending",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskState.isTaskWaiting": {
            "name": "isTaskWaiting",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskState.isTaskHolding": {
            "name": "isTaskHolding",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskState.isTaskHoldingOrWaiting": {
            "name": "isTaskHoldingOrWaiting",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskState.isWaitingWithPacket": {
            "name": "isWaitingWithPacket",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskWorkArea.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ],
                "p": [
                    "int",
                    "bytes"
                ],
                "w": [
                    "int",
                    "bytes"
                ],
                "initialState": [],
                "r": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Task.fn": {
            "name": "fn",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pkt": [
                    "bool",
                    "float",
                    "list[]",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "r": [
                    "bool",
                    "float",
                    "list[]",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "Task.addPacket": {
            "name": "addPacket",
            "location": 198,
            "return": [
                "Task",
                "str",
                "typing.Callable[T, T]",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "old": [
                    "str",
                    "typing.Callable[T, T]",
                    "typing.Type"
                ]
            }
        },
        "Task.runTask": {
            "name": "runTask",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.waitTask": {
            "name": "waitTask",
            "location": 221,
            "return": [
                "Task"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.hold": {
            "name": "hold",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Task.release": {
            "name": "release",
            "location": 230,
            "return": [
                "float",
                "int",
                "typing.Type",
                "str",
                "Task"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str"
                ]
            }
        },
        "Task.qpkt": {
            "name": "qpkt",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "pkt": [
                    "bytes",
                    "bool"
                ]
            }
        },
        "Task.findtcb": {
            "name": "findtcb",
            "location": 245,
            "return": [
                "str",
                "list[]",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "int",
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "DeviceTask.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ],
                "p": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ],
                "w": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ],
                "s": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ],
                "r": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ]
            }
        },
        "DeviceTask.fn": {
            "name": "fn",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "pkt": [
                    "dict[, ]",
                    "None",
                    "list[list[typing.Callable[, ]]]",
                    "float",
                    "bool"
                ],
                "r": [
                    "int",
                    "float",
                    "typing.Mapping",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "HandlerTask.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ],
                "p": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ],
                "w": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ],
                "s": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ],
                "r": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ]
            }
        },
        "HandlerTask.fn": {
            "name": "fn",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "pkt": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]"
                ],
                "r": []
            }
        },
        "IdleTask.__init__": {
            "name": "__init__",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "None",
                    "tuple[typing.Union[str,int]]",
                    "str"
                ],
                "p": [
                    "bool",
                    "list[str]",
                    "None"
                ],
                "w": [
                    "bool",
                    "list[str]",
                    "None"
                ],
                "s": [
                    "int",
                    "None",
                    "tuple[typing.Union[str,int]]",
                    "str"
                ],
                "r": [
                    "int",
                    "None",
                    "tuple[typing.Union[str,int]]",
                    "str"
                ]
            }
        },
        "IdleTask.fn": {
            "name": "fn",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "pkt": [
                    "bool",
                    "float",
                    "list[]",
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "r": [
                    "int",
                    "float",
                    "typing.Mapping",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "WorkTask.__init__": {
            "name": "__init__",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ],
                "p": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ],
                "w": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ],
                "s": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ],
                "r": [
                    "bool",
                    "dict[str, list[float]]",
                    "list[float]"
                ]
            }
        },
        "WorkTask.fn": {
            "name": "fn",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "pkt": [
                    "int",
                    "None"
                ],
                "r": [
                    "typing.Callable[..., bool]",
                    "float"
                ]
            }
        },
        "Richards.run": {
            "name": "run",
            "location": 381,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "iterations": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        }
    },
    "cinder-master/benchmarks/microbench.py": {
        "identity": {
            "name": "identity",
            "location": 11,
            "return": [
                "bool",
                "float",
                "typing.Iterable[typing.Iterable[float]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "cinder-master/cinder/bytecode.py": {
        "compute_block_boundaries": {
            "name": "compute_block_boundaries",
            "location": 221,
            "return": [
                "list[]",
                "list[tuple[]]"
            ],
            "arguments": {
                "code": []
            }
        },
        "is_block_setup": {
            "name": "is_block_setup",
            "location": 366,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "bytes"
                ],
                "start": [
                    "int",
                    "float"
                ],
                "end": [
                    "int",
                    "bytes",
                    "float",
                    "None"
                ]
            }
        },
        "disassemble": {
            "name": "disassemble",
            "location": 371,
            "return": [],
            "arguments": {
                "code": [
                    "str"
                ]
            }
        },
        "BytecodeIterator.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [],
                "start": [
                    "None",
                    "int",
                    "float",
                    "str"
                ],
                "end": [
                    "None",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "BytecodeIterator.__iter__": {
            "name": "__iter__",
            "location": 201,
            "return": [
                "BytecodeIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "BytecodeIterator.__next__": {
            "name": "__next__",
            "location": 204,
            "return": [
                "tuple[typing.Union[int,Instruction]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstructionDecoder.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "str",
                    "bool",
                    "list[list[typing.Any]]",
                    "None"
                ]
            }
        },
        "InstructionDecoder.decode": {
            "name": "decode",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "instr": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "InstructionDecoder.decode_return": {
            "name": "decode_return",
            "location": 273,
            "return": [
                "ReturnValue"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "str",
                    "bool"
                ],
                "instr": [
                    "str",
                    "bool"
                ]
            }
        },
        "InstructionDecoder.decode_load": {
            "name": "decode_load",
            "location": 281,
            "return": [
                "Load"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "typing.Type"
                ],
                "instr": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "InstructionDecoder.decode_cond_branch": {
            "name": "decode_cond_branch",
            "location": 284,
            "return": [
                "ConditionalBranch"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "tuple[]",
                    "int"
                ],
                "instr": [
                    "float",
                    "str"
                ]
            }
        },
        "InstructionDecoder.decode_load_attr": {
            "name": "decode_load_attr",
            "location": 296,
            "return": [
                "LoadAttr"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "dict[, ]",
                    "int",
                    "float"
                ],
                "instr": [
                    "str",
                    "int"
                ]
            }
        },
        "InstructionDecoder.decode_unary_operation": {
            "name": "decode_unary_operation",
            "location": 299,
            "return": [
                "UnaryOperation"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "instr": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "InstructionDecoder.decode_store": {
            "name": "decode_store",
            "location": 302,
            "return": [
                "Store"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "str",
                    "bool",
                    "BaseException",
                    "None",
                    "list[str]",
                    "dict[, ]"
                ],
                "instr": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "InstructionDecoder.decode_branch": {
            "name": "decode_branch",
            "location": 305,
            "return": [
                "Branch"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "instr": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "InstructionDecoder.decode_jump_forward": {
            "name": "decode_jump_forward",
            "location": 308,
            "return": [
                "Branch"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "list[str]"
                ],
                "instr": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "InstructionDecoder.decode_pop_top": {
            "name": "decode_pop_top",
            "location": 311,
            "return": [
                "PopTop"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "instr": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "InstructionDecoder.decode_store_attr": {
            "name": "decode_store_attr",
            "location": 314,
            "return": [
                "StoreAttr"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "bool",
                    "typing.Sequence[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "list[typing.Callable[, ]]"
                ],
                "instr": [
                    "bool"
                ]
            }
        },
        "InstructionDecoder.decode_load_global": {
            "name": "decode_load_global",
            "location": 317,
            "return": [
                "LoadGlobal"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "typing.Type"
                ],
                "instr": [
                    "bool",
                    "str"
                ]
            }
        },
        "InstructionDecoder.decode_call": {
            "name": "decode_call",
            "location": 320,
            "return": [
                "Call"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "bool",
                    "Exception",
                    "typing.Callable[, ]",
                    "None"
                ],
                "instr": [
                    "int",
                    "str"
                ]
            }
        },
        "InstructionDecoder.decode_compare": {
            "name": "decode_compare",
            "location": 328,
            "return": [
                "Compare"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "instr": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "InstructionDecoder.decode_binary_op": {
            "name": "decode_binary_op",
            "location": 339,
            "return": [
                "BinaryOperation"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "Exception"
                ],
                "instr": [
                    "str"
                ]
            }
        }
    },
    "cinder-master/cinder/ir.py": {
        "build_initial_cfg": {
            "name": "build_initial_cfg",
            "location": 264,
            "return": [
                "ControlFlowGraph"
            ],
            "arguments": {
                "blocks": []
            }
        },
        "ReturnValue.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Load.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float"
                ],
                "pool": [
                    "int",
                    "float"
                ]
            }
        },
        "Load.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float"
                ]
            }
        },
        "Store.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalBranch.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "true_branch": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "false_branch": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "pop_before_eval": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "jump_when_true": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "ConditionalBranch.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryOperation.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "int",
                    "float"
                ]
            }
        },
        "BinaryOperation.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Branch.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "float"
                ]
            }
        },
        "Branch.__str__": {
            "name": "__str__",
            "location": 90,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadAttr.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float"
                ]
            }
        },
        "LoadAttr.__str__": {
            "name": "__str__",
            "location": 98,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadGlobal.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float"
                ]
            }
        },
        "LoadGlobal.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoreAttr.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float"
                ]
            }
        },
        "StoreAttr.__str__": {
            "name": "__str__",
            "location": 114,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryOperation.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "int",
                    "float"
                ]
            }
        },
        "UnaryOperation.__str__": {
            "name": "__str__",
            "location": 126,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Call.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_args": [
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "Call.__str__": {
            "name": "__str__",
            "location": 138,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compare.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "int",
                    "float"
                ]
            }
        },
        "Compare.__str__": {
            "name": "__str__",
            "location": 151,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicBlock.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "int"
                ],
                "instructions": [],
                "is_loop_header": [
                    "bool"
                ],
                "is_loop_footer": [
                    "bool"
                ]
            }
        },
        "BasicBlock.__str__": {
            "name": "__str__",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CFGIterator.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": [
                    "str",
                    "list[str]",
                    "set[A]"
                ]
            }
        },
        "CFGIterator.__iter__": {
            "name": "__iter__",
            "location": 202,
            "return": [
                "CFGIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "CFGIterator.__next__": {
            "name": "__next__",
            "location": 205,
            "return": [
                "str",
                "dict[str, int]",
                "int",
                "typing.Type",
                "BasicBlock"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlFlowGraph.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlFlowGraph.add_block": {
            "name": "add_block",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "ControlFlowGraph.add_edge": {
            "name": "add_edge",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "list[str]"
                ],
                "dst": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "ControlFlowGraph.get_successors": {
            "name": "get_successors",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "ControlFlowGraph.__iter__": {
            "name": "__iter__",
            "location": 252,
            "return": [
                "CFGIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlFlowGraph.__str__": {
            "name": "__str__",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "cinder-master/cinder/__init__.py": {},
    "cinder-master/cinder/codegen/bytecode.py": {
        "assemble": {
            "name": "assemble",
            "location": 94,
            "return": [
                "bytes"
            ],
            "arguments": {
                "cfg": []
            }
        },
        "InstructionEncoder.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "offsets": [
                    "int",
                    "float"
                ]
            }
        },
        "InstructionEncoder.encode": {
            "name": "encode",
            "location": 21,
            "return": [
                "Instruction"
            ],
            "arguments": {
                "self": [],
                "instr": [
                    "str",
                    "float",
                    "bool",
                    "None"
                ],
                "offset": [
                    "typing.Callable[, ]",
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any,typing.Any]]"
                ]
            }
        },
        "InstructionEncoder.encode_return": {
            "name": "encode_return",
            "location": 54,
            "return": [
                "Instruction"
            ],
            "arguments": {
                "self": [],
                "instr": [
                    "str",
                    "bool"
                ]
            }
        },
        "InstructionEncoder.encode_load": {
            "name": "encode_load",
            "location": 62,
            "return": [
                "Instruction"
            ],
            "arguments": {
                "self": [],
                "instr": [
                    "bool",
                    "str"
                ]
            }
        },
        "InstructionEncoder.encode_cond_branch": {
            "name": "encode_cond_branch",
            "location": 74,
            "return": [
                "Instruction"
            ],
            "arguments": {
                "self": [],
                "instr": [
                    "str",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "InstructionEncoder.encode_binary_operation": {
            "name": "encode_binary_operation",
            "location": 87,
            "return": [
                "Instruction"
            ],
            "arguments": {
                "self": [],
                "instr": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]",
                    "bytes"
                ]
            }
        }
    },
    "cinder-master/cinder/codegen/x64.py": {
        "pysym": {
            "name": "pysym",
            "location": 25,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "prologue": {
            "name": "prologue",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "num_locals": [
                    "int",
                    "list[int]",
                    "list[str]"
                ]
            }
        },
        "epilogue": {
            "name": "epilogue",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "push_blockstack_entry": {
            "name": "push_blockstack_entry",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pop_blockstack_entry": {
            "name": "pop_blockstack_entry",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "reg": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "pop_stack_until": {
            "name": "pop_stack_until",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "incref": {
            "name": "incref",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "pyobj": [
                    "int",
                    "float",
                    "str",
                    "typing.Iterable[list[str]]"
                ],
                "temp": [
                    "float",
                    "int"
                ],
                "amount": [
                    "int"
                ]
            }
        },
        "decref": {
            "name": "decref",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "pyobj": [
                    "int",
                    "float",
                    "str",
                    "typing.Iterable[list[str]]"
                ],
                "temp": [
                    "float",
                    "int"
                ],
                "amount": [
                    "int"
                ]
            }
        },
        "duplicate_and_reverse": {
            "name": "duplicate_and_reverse",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "num_items": [
                    "int"
                ]
            }
        },
        "call_function": {
            "name": "call_function",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "num_args": [
                    "int"
                ]
            }
        },
        "load_const": {
            "name": "load_const",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "str",
                    "typing.IO",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "index": [
                    "str",
                    "typing.IO",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "load_arg": {
            "name": "load_arg",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "str",
                    "bool",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "store_arg": {
            "name": "store_arg",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "int",
                    "list[list[int]]"
                ]
            }
        },
        "load_local": {
            "name": "load_local",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "bool"
                ]
            }
        },
        "store_local": {
            "name": "store_local",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "int"
                ]
            }
        },
        "pop_top": {
            "name": "pop_top",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_attr": {
            "name": "load_attr",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "store_attr": {
            "name": "store_attr",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "load_global": {
            "name": "load_global",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "globals": [
                    "bool",
                    "dict[, ]",
                    "None",
                    "str",
                    "list[]",
                    "typing.Type"
                ],
                "builtins": [
                    "bool",
                    "dict[, ]",
                    "None",
                    "str",
                    "list[]",
                    "typing.Type"
                ],
                "name": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "unary_not": {
            "name": "unary_not",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "conditional_branch": {
            "name": "conditional_branch",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "instr": [
                    "bool",
                    "str"
                ],
                "labels": [
                    "float",
                    "bytes"
                ]
            }
        },
        "compare_is": {
            "name": "compare_is",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "compare_is_not": {
            "name": "compare_is_not",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pop_block": {
            "name": "pop_block",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "return_value": {
            "name": "return_value",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "compile": {
            "name": "compile",
            "location": 483,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "list[]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "cinder-master/cinder/codegen/__init__.py": {},
    "cinder-master/tests/test_interpreter.py": {
        "identity": {
            "name": "identity",
            "location": 3,
            "return": [
                "bool",
                "float",
                "typing.Iterable[typing.Iterable[float]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_interpreter": {
            "name": "test_interpreter",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cinder-master/tests/test_ir.py": {
        "single_block": {
            "name": "single_block",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "cond_jump": {
            "name": "cond_jump",
            "location": 11,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "nested_cond_jump": {
            "name": "nested_cond_jump",
            "location": 17,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "load_attr": {
            "name": "load_attr",
            "location": 27,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "unary_not": {
            "name": "unary_not",
            "location": 31,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "two_way_cond": {
            "name": "two_way_cond",
            "location": 35,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "store_local": {
            "name": "store_local",
            "location": 39,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "while_loop": {
            "name": "while_loop",
            "location": 44,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "store_attr": {
            "name": "store_attr",
            "location": 50,
            "return": [],
            "arguments": {
                "x": [],
                "v": []
            }
        },
        "load_global": {
            "name": "load_global",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "do_call": {
            "name": "do_call",
            "location": 59,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "jump_forward": {
            "name": "jump_forward",
            "location": 63,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": []
            }
        },
        "cmp_is": {
            "name": "cmp_is",
            "location": 71,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "cmp_is_not": {
            "name": "cmp_is_not",
            "location": 75,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "loop_with_setup": {
            "name": "loop_with_setup",
            "location": 79,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "binary_and": {
            "name": "binary_and",
            "location": 86,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_disassemble": {
            "name": "test_disassemble",
            "location": 244,
            "return": [],
            "arguments": {
                "function": [],
                "expected_ir": []
            }
        },
        "test_reassemble": {
            "name": "test_reassemble",
            "location": 267,
            "return": [],
            "arguments": {
                "function": []
            }
        }
    },
    "cinder-master/tests/test_x64_codegen.py": {
        "identity": {
            "name": "identity",
            "location": 4,
            "return": [
                "bool",
                "float",
                "typing.Iterable[typing.Iterable[float]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "get_bar": {
            "name": "get_bar",
            "location": 13,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "set_bar": {
            "name": "set_bar",
            "location": 17,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "v": [
                    "int"
                ]
            }
        },
        "invert": {
            "name": "invert",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "pop_jump": {
            "name": "pop_jump",
            "location": 26,
            "return": [
                "bool",
                "float",
                "typing.Iterable[typing.Iterable[float]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "z": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "jump_if_true": {
            "name": "jump_if_true",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "jump_if_false": {
            "name": "jump_if_false",
            "location": 36,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ],
                "y": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "load_const": {
            "name": "load_const",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "load_global": {
            "name": "load_global",
            "location": 47,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "call0": {
            "name": "call0",
            "location": 51,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Callable[, ]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "call1": {
            "name": "call1",
            "location": 55,
            "return": [],
            "arguments": {
                "f": [
                    "typing.TextIO",
                    "bool"
                ],
                "arg": [
                    "typing.TextIO",
                    "bool"
                ]
            }
        },
        "call3": {
            "name": "call3",
            "location": 59,
            "return": [],
            "arguments": {
                "f": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "arg": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "arg1": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "arg2": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "get_third": {
            "name": "get_third",
            "location": 63,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ],
                "z": [
                    "float"
                ]
            }
        },
        "store_local": {
            "name": "store_local",
            "location": 67,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "while_loop": {
            "name": "while_loop",
            "location": 73,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ],
                "y": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "jump_forward": {
            "name": "jump_forward",
            "location": 79,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ],
                "z": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "cmp_is": {
            "name": "cmp_is",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "test_load_fast_and_return_value": {
            "name": "test_load_fast_and_return_value",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_attr": {
            "name": "test_load_attr",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invert": {
            "name": "test_invert",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pop_jump": {
            "name": "test_pop_jump",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jump_if_true": {
            "name": "test_jump_if_true",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jump_if_false": {
            "name": "test_jump_if_false",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_const": {
            "name": "test_load_const",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_store_attr": {
            "name": "test_store_attr",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_global": {
            "name": "test_load_global",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_call": {
            "name": "test_call",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_store": {
            "name": "test_store",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_while_loop": {
            "name": "test_while_loop",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jump_forward": {
            "name": "test_jump_forward",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is": {
            "name": "test_is",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_not": {
            "name": "test_is_not",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Foo.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bar": [
                    "int",
                    "float"
                ]
            }
        },
        "test_is_not.f": {
            "name": "f",
            "location": 185,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    }
}
{
    "citus-k8s-membership-manager-master/manager/config_monitor.py": {
        "ConfigMonitor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_handler": [
                    "dict[, ]",
                    "str"
                ],
                "master_config": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ],
                "worker_config": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "int"
                ]
            }
        },
        "ConfigMonitor.load_config_map": {
            "name": "load_config_map",
            "location": 38,
            "return": [],
            "arguments": {
                "config_path": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "ConfigMonitor.update_masters": {
            "name": "update_masters",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigMonitor.update_workers": {
            "name": "update_workers",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigMonitor.provision_master": {
            "name": "provision_master",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pod_name": [
                    "set[str]",
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, D]",
                    "list[str]"
                ]
            }
        },
        "ConfigMonitor.provision_worker": {
            "name": "provision_worker",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pod_name": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "ConfigMonitor.provision_all_nodes": {
            "name": "provision_all_nodes",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigMonitor.provision_node": {
            "name": "provision_node",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queries": [
                    "list[str]",
                    "str"
                ],
                "pod_name": [
                    "str"
                ],
                "service_name": [
                    "str",
                    "None"
                ]
            }
        },
        "ConfigMonitor.start_watchers": {
            "name": "start_watchers",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWatcher.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "updater": [
                    "bool",
                    "dict[, ]"
                ],
                "file_path": [
                    "str",
                    "int"
                ]
            }
        },
        "FileWatcher.start": {
            "name": "start",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWatcher.compare_hashs_for_update": {
            "name": "compare_hashs_for_update",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_hash": [
                    "bool",
                    "typing.Mapping",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FileWatcher.get_file_hash": {
            "name": "get_file_hash",
            "location": 108,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ConfigMonitor.load_config_map.read_config": {
            "name": "read_config",
            "location": 39,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "FileWatcher.start.run": {
            "name": "run",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "citus-k8s-membership-manager-master/manager/db.py": {
        "DBHandler.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "str"
                ]
            }
        },
        "DBHandler.get_pg_connection_parameters": {
            "name": "get_pg_connection_parameters",
            "location": 19,
            "return": [],
            "arguments": {
                "conf": [
                    "bool",
                    "None"
                ]
            }
        },
        "DBHandler._connect_to_db": {
            "name": "_connect_to_db",
            "location": 34,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ]
            }
        },
        "DBHandler.get_host_name": {
            "name": "get_host_name",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pod_name": [
                    "str",
                    "int"
                ],
                "service_name": [
                    "str",
                    "int"
                ]
            }
        },
        "DBHandler.execute_query": {
            "name": "execute_query",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pod_name": [
                    "str",
                    "list[str]"
                ],
                "service_name": [
                    "str",
                    "list[str]"
                ],
                "query": [
                    "str",
                    "int"
                ],
                "query_params": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "DBHandler._connect_to_db.connector": {
            "name": "connector",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "citus-k8s-membership-manager-master/manager/env_conf.py": {
        "parse_env_vars": {
            "name": "parse_env_vars",
            "location": 25,
            "return": [
                "EnvConf"
            ],
            "arguments": {}
        }
    },
    "citus-k8s-membership-manager-master/manager/manager.py": {
        "Manager.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.create_provision_monitor": {
            "name": "create_provision_monitor",
            "location": 56,
            "return": [
                "ConfigMonitor"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.get_citus_type": {
            "name": "get_citus_type",
            "location": 70,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "pod": [
                    "int",
                    "str"
                ]
            }
        },
        "Manager.run": {
            "name": "run",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.parse_event": {
            "name": "parse_event",
            "location": 95,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Manager.check_pod_readiness": {
            "name": "check_pod_readiness",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pod_name": [
                    "str"
                ]
            }
        },
        "Manager.start_web_server": {
            "name": "start_web_server",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Manager.add_master": {
            "name": "add_master",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pod_name": [
                    "str"
                ]
            }
        },
        "Manager.remove_master": {
            "name": "remove_master",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pod_name": [
                    "str"
                ]
            }
        },
        "Manager.add_worker": {
            "name": "add_worker",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pod_name": [
                    "str"
                ]
            }
        },
        "Manager.remove_worker": {
            "name": "remove_worker",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "worker_name": [
                    "str",
                    "None"
                ]
            }
        },
        "Manager.exec_on_masters": {
            "name": "exec_on_masters",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "typing.Type"
                ],
                "worker_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "Manager.check_pod_readiness.request_pod_readiness": {
            "name": "request_pod_readiness",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Manager.start_web_server.registered_workers": {
            "name": "registered_workers",
            "location": 133,
            "return": [],
            "arguments": {}
        }
    },
    "citus-k8s-membership-manager-master/tests/config.py": {},
    "citus-k8s-membership-manager-master/tests/conftest.py": {
        "namespace": {
            "name": "namespace",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "config_map": {
            "name": "config_map",
            "location": 45,
            "return": [],
            "arguments": {
                "namespace": []
            }
        },
        "manager_service_account": {
            "name": "manager_service_account",
            "location": 59,
            "return": [],
            "arguments": {
                "kubernetes_client": [],
                "namespace": []
            }
        },
        "kubernetes_client": {
            "name": "kubernetes_client",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "setup_cluster": {
            "name": "setup_cluster",
            "location": 84,
            "return": [],
            "arguments": {
                "kubernetes_client": [],
                "manager_service_account": [],
                "config_map": []
            }
        },
        "_configure_manager_pod_template": {
            "name": "_configure_manager_pod_template",
            "location": 101,
            "return": [],
            "arguments": {
                "manager_conf": []
            }
        },
        "_create_deployments": {
            "name": "_create_deployments",
            "location": 120,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "_capture_manager_output": {
            "name": "_capture_manager_output",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "_set_context_namespace": {
            "name": "_set_context_namespace",
            "location": 140,
            "return": [],
            "arguments": {
                "namespace": []
            }
        },
        "_cleanup": {
            "name": "_cleanup",
            "location": 145,
            "return": [],
            "arguments": {
                "k_client": []
            }
        },
        "_capture_manager_output.run": {
            "name": "run",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "manager_service_account.create_role_binding": {
            "name": "create_role_binding",
            "location": 63,
            "return": [],
            "arguments": {}
        }
    },
    "citus-k8s-membership-manager-master/tests/test_sanity.py": {
        "stop_provisioning": {
            "name": "stop_provisioning",
            "location": 27,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "kubernetes_client": [
                    "bool",
                    "str"
                ]
            }
        },
        "replace_citus_nodes": {
            "name": "replace_citus_nodes",
            "location": 35,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "kubernetes_client": []
            }
        },
        "test_wait_for_workers_before_provisioning": {
            "name": "test_wait_for_workers_before_provisioning",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "stop_provisioning": []
            }
        },
        "test_wait_for_worker_readiness": {
            "name": "test_wait_for_worker_readiness",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "replace_citus_nodes": [
                    "str"
                ]
            }
        },
        "test_node_provisioning_with_configmap": {
            "name": "test_node_provisioning_with_configmap",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initial_registration": {
            "name": "test_initial_registration",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_distributed_table_exists_on_all_workers": {
            "name": "test_distributed_table_exists_on_all_workers",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_db_master_knows_workers": {
            "name": "test_db_master_knows_workers",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_node_provisioning_with_config_update": {
            "name": "test_node_provisioning_with_config_update",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unregister_worker": {
            "name": "test_unregister_worker",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "kubernetes_client": [
                    "bool"
                ]
            }
        },
        "_scale_pod": {
            "name": "_scale_pod",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "pod_name": [
                    "str",
                    "None"
                ],
                "count": [
                    "str",
                    "int",
                    "None"
                ],
                "kubernetes_client": [
                    "str"
                ]
            }
        },
        "_get_workers_within_cluster": {
            "name": "_get_workers_within_cluster",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "_get_masters_within_cluster": {
            "name": "_get_masters_within_cluster",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "_request_registered_pods": {
            "name": "_request_registered_pods",
            "location": 189,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {}
        },
        "_get_registered_workers": {
            "name": "_get_registered_workers",
            "location": 197,
            "return": [
                "str",
                "dict[str, str]",
                "bool",
                "typing.Type",
                "dict[str, int]",
                "frozenset"
            ],
            "arguments": {}
        },
        "_get_tables_in_schema": {
            "name": "_get_tables_in_schema",
            "location": 204,
            "return": [
                "dict[, ]",
                "list[tuple[typing.Union[typing.Any,typing.Any,typing.Any]]]",
                "typing.Pattern",
                "dict[str, typing.Union[str,None]]",
                "dict[str, str]",
                "list[str]"
            ],
            "arguments": {
                "pod_name": [
                    "str"
                ],
                "schema": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "test_wait_for_workers_before_provisioning.check_provisioning": {
            "name": "check_provisioning",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "pod_name": []
            }
        },
        "test_node_provisioning_with_configmap.check_query_result": {
            "name": "check_query_result",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "pod_name": [],
                "query": [],
                "result": []
            }
        },
        "test_node_provisioning_with_configmap.check_provisioning": {
            "name": "check_provisioning",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_initial_registration.registered_workers": {
            "name": "registered_workers",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_distributed_table_exists_on_all_workers.match_tables": {
            "name": "match_tables",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "tables": []
            }
        },
        "test_db_master_knows_workers.registered_on_master": {
            "name": "registered_on_master",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_node_provisioning_with_config_update.check_query_result": {
            "name": "check_query_result",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "pod_name": [],
                "test_query": [],
                "test_result": []
            }
        },
        "test_node_provisioning_with_config_update.check_provisioning": {
            "name": "check_provisioning",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unregister_worker.check_state_after_scaling": {
            "name": "check_state_after_scaling",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "citus-k8s-membership-manager-master/tests/util.py": {
        "run_local_query": {
            "name": "run_local_query",
            "location": 16,
            "return": [],
            "arguments": {
                "query": [
                    "str",
                    "list[]",
                    "bytes"
                ],
                "port": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "db_connector": {
            "name": "db_connector",
            "location": 24,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "port": [
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "run_kubectl_command": {
            "name": "run_kubectl_command",
            "location": 65,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "command": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "parse_single_kubernetes_yaml": {
            "name": "parse_single_kubernetes_yaml",
            "location": 81,
            "return": [],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "PortForwarder.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pod_name": [
                    "str"
                ],
                "port_mapping": [
                    "str"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "PortForwarder.__enter__": {
            "name": "__enter__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PortForwarder.__exit__": {
            "name": "__exit__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "run_kubectl_command.parse_output": {
            "name": "parse_output",
            "location": 70,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "output": []
            }
        }
    }
}
{
    "clockrange-master/clockrange.py": {
        "_rendered_from_counter": {
            "name": "_rendered_from_counter",
            "location": 116,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "spec": [
                    "typing.Callable[..., bool]",
                    "list[str]",
                    "None"
                ],
                "counter": [
                    "int"
                ]
            }
        },
        "_limits_from_specs": {
            "name": "_limits_from_specs",
            "location": 126,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "specs": [
                    "str"
                ]
            }
        },
        "_limit_from_spec": {
            "name": "_limit_from_spec",
            "location": 130,
            "return": [
                "int"
            ],
            "arguments": {
                "spec": [
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "_countstate_from_ticks": {
            "name": "_countstate_from_ticks",
            "location": 140,
            "return": [
                "CountState"
            ],
            "arguments": {
                "limits": [
                    "list[str]"
                ],
                "ticks": [
                    "int"
                ]
            }
        },
        "_ticks_from_countstate": {
            "name": "_ticks_from_countstate",
            "location": 153,
            "return": [
                "int"
            ],
            "arguments": {
                "limits": [
                    "tuple[int]"
                ],
                "state": [
                    "str",
                    "typing.Iterable[T]"
                ]
            }
        },
        "_multiply": {
            "name": "_multiply",
            "location": 164,
            "return": [],
            "arguments": {
                "integers": [
                    "typing.Iterable[int]",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "ClockState.from_countstate": {
            "name": "from_countstate",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "list[]"
                ],
                "specs": [
                    "typing.Sequence[]",
                    "str",
                    "dict[, ]",
                    "int",
                    "float"
                ],
                "state": [
                    "str",
                    "float",
                    "tuple['cirq.Qid']",
                    "int",
                    "dict[, ]",
                    "typing.Sequence[T]"
                ]
            }
        },
        "ClockRange.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "specs": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "ClockRange.__getitem__": {
            "name": "__getitem__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ClockRange.__len__": {
            "name": "__len__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClockRange.__iter__": {
            "name": "__iter__",
            "location": 94,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClockRange.ticks": {
            "name": "ticks",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        }
    },
    "clockrange-master/setup.py": {},
    "clockrange-master/tests.py": {
        "test_clockrange_random_access": {
            "name": "test_clockrange_random_access",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "specs": [
                    "int"
                ],
                "ticks": [
                    "int"
                ],
                "counters": [
                    "int"
                ],
                "cycles": [
                    "int"
                ],
                "rendered": [
                    "int"
                ]
            }
        },
        "test_clockrange_random_access_with_negative_value_should_raise": {
            "name": "test_clockrange_random_access_with_negative_value_should_raise",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clockrange_iterable": {
            "name": "test_clockrange_iterable",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clockrange_len": {
            "name": "test_clockrange_len",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clockrange_state_ticks": {
            "name": "test_clockrange_state_ticks",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rendered_from_counter_spec_type_error": {
            "name": "test_rendered_from_counter_spec_type_error",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_limit_from_spec_spec_type_error": {
            "name": "test_limit_from_spec_spec_type_error",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
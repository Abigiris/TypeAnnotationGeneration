{
    "cloudflare-updater-master/update.py": {
        "main": {
            "name": "main",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FrozenSetImpl.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "dict[str, str]",
                    "dict[str, int]",
                    "dict[str, dict[str, str]]",
                    "dict[, ]"
                ]
            }
        },
        "FrozenSetImpl.__len__": {
            "name": "__len__",
            "location": 64,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenSetImpl.__iter__": {
            "name": "__iter__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrozenSetImpl.__contains__": {
            "name": "__contains__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "dict[str, set[str]]",
                    "dict[, ]",
                    "typing.Mapping",
                    "bool"
                ]
            }
        },
        "DomainCollection.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "ApiZone.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "ApiZone.__hash__": {
            "name": "__hash__",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiZone.__eq__": {
            "name": "__eq__",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ApiZone.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "list[]"
                ]
            }
        },
        "Record.__str__": {
            "name": "__str__",
            "location": 131,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record._members": {
            "name": "_members",
            "location": 134,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__eq__": {
            "name": "__eq__",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ConfigRecord.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "None"
                ]
            }
        },
        "ConfigRecord.__hash__": {
            "name": "__hash__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigRecord.get_content_for_zone": {
            "name": "get_content_for_zone",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "zone": [
                    "str"
                ]
            }
        },
        "ConfigRecord.get_name_for_zone": {
            "name": "get_name_for_zone",
            "location": 162,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "str",
                    "None"
                ]
            }
        },
        "ConfigRecord.get_api_data": {
            "name": "get_api_data",
            "location": 170,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "dict[, ]",
                    "None",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "ApiRecord.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ],
                "zone": [
                    "str",
                    "bool",
                    "list[]"
                ]
            }
        },
        "ApiRecord.__hash__": {
            "name": "__hash__",
            "location": 215,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiRecord._members": {
            "name": "_members",
            "location": 218,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiRecord.__str__": {
            "name": "__str__",
            "location": 221,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiRecord.get_generic_content": {
            "name": "get_generic_content",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiRecord.get_generic_name": {
            "name": "get_generic_name",
            "location": 230,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiRecord.satisfies": {
            "name": "satisfies",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "typing.Type",
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "RecordCollection.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "list[int]",
                    "list[str]"
                ]
            }
        },
        "RecordCollection._generate_matcher_pairs": {
            "name": "_generate_matcher_pairs",
            "location": 267,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordCollection.match": {
            "name": "match",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "typing.Type",
                    "int",
                    "dict[str, tuple[typing.Union[int,int]]]",
                    "str",
                    "None"
                ]
            }
        },
        "Group.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        },
        "GroupCollection.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "None",
                    "str",
                    "typing.IO"
                ]
            }
        },
        "ApiZoneCollection.__init__": {
            "name": "__init__",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ApiZoneCollection.by_name": {
            "name": "by_name",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "ApiRecordCollection.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "zone": [
                    "int"
                ]
            }
        },
        "Updater.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [
                    "None",
                    "bool",
                    "str"
                ],
                "dry_run": [
                    "bool"
                ],
                "debug": [
                    "bool"
                ],
                "verbosity": [
                    "int"
                ]
            }
        },
        "Updater.get_all": {
            "name": "get_all",
            "location": 355,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "Updater.get_zones": {
            "name": "get_zones",
            "location": 375,
            "return": [
                "ApiZoneCollection"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater.get_records": {
            "name": "get_records",
            "location": 378,
            "return": [
                "ApiRecordCollection"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "str",
                    "bool"
                ]
            }
        },
        "Updater.invalidate_cache": {
            "name": "invalidate_cache",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ]
            }
        },
        "Updater.get_action": {
            "name": "get_action",
            "location": 395,
            "return": [
                "bool",
                "float",
                "str",
                "typing.Callable[[], None]",
                "None"
            ],
            "arguments": {
                "self": [],
                "not_dry_run": [
                    "str",
                    "bool",
                    "typing.Callable[[], None]",
                    "None"
                ],
                "dry_run": [
                    "bool",
                    "float"
                ]
            }
        },
        "Updater.update_record": {
            "name": "update_record",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "old_record": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "new_record": []
            }
        },
        "Updater.delete_record": {
            "name": "delete_record",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "bool",
                    "typing.Sequence[]",
                    "typing.Mapping",
                    "str",
                    "set[str]",
                    "dict[, ]"
                ],
                "record": [
                    "str",
                    "typing.Sequence[]",
                    "typing.Mapping",
                    "set[str]",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "Updater.create_record": {
            "name": "create_record",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zone": [
                    "str",
                    "int"
                ],
                "record": []
            }
        },
        "Updater.load_cache": {
            "name": "load_cache",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater.save_cache": {
            "name": "save_cache",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater.log": {
            "name": "log",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbosity": [
                    "str",
                    "list[bytes]",
                    "int",
                    "float"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "Updater.run": {
            "name": "run",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "code-master/lec02/first.py": {
        "ft_to_in": {
            "name": "ft_to_in",
            "location": 5,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "ft": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "code-master/lec02/geometry.py": {
        "sqr": {
            "name": "sqr",
            "location": 11,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "distance": {
            "name": "distance",
            "location": 28,
            "return": [],
            "arguments": {
                "p": [
                    "str",
                    "int",
                    "float",
                    "typing.Iterable[]"
                ],
                "q": [
                    "str",
                    "int",
                    "float",
                    "typing.Iterable[]"
                ]
            }
        },
        "manhattan_distance": {
            "name": "manhattan_distance",
            "location": 43,
            "return": [],
            "arguments": {
                "p": [
                    "str",
                    "int",
                    "float",
                    "typing.Iterable[]"
                ],
                "q": [
                    "str",
                    "int",
                    "float",
                    "typing.Iterable[]"
                ]
            }
        },
        "Circle.area": {
            "name": "area",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Circle.circumference": {
            "name": "circumference",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "code-master/lec02/test_geometry.py": {
        "test_distance": {
            "name": "test_distance",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_manhattan_distance": {
            "name": "test_manhattan_distance",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_area": {
            "name": "test_area",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_circumference": {
            "name": "test_circumference",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "code-master/lec03/collisions.py": {
        "input_position": {
            "name": "input_position",
            "location": 11,
            "return": [
                "Position"
            ],
            "arguments": {
                "prompt": [
                    "str"
                ]
            }
        },
        "input_circle": {
            "name": "input_circle",
            "location": 20,
            "return": [
                "Circle"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "code-master/lec03/geometry.py": {
        "sqr": {
            "name": "sqr",
            "location": 11,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "distance": {
            "name": "distance",
            "location": 28,
            "return": [],
            "arguments": {
                "p": [
                    "str",
                    "int",
                    "float",
                    "typing.Iterable[]"
                ],
                "q": [
                    "str",
                    "int",
                    "float",
                    "typing.Iterable[]"
                ]
            }
        },
        "manhattan_distance": {
            "name": "manhattan_distance",
            "location": 43,
            "return": [],
            "arguments": {
                "p": [
                    "str",
                    "int",
                    "float",
                    "typing.Iterable[]"
                ],
                "q": [
                    "str",
                    "int",
                    "float",
                    "typing.Iterable[]"
                ]
            }
        },
        "Circle.area": {
            "name": "area",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Circle.circumference": {
            "name": "circumference",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Circle.contains": {
            "name": "contains",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "code-master/lec03/more_data.py": {},
    "code-master/lec03/test_geometry.py": {
        "test_distance": {
            "name": "test_distance",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_manhattan_distance": {
            "name": "test_manhattan_distance",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_area": {
            "name": "test_area",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_circumference": {
            "name": "test_circumference",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contains": {
            "name": "test_contains",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "code-master/lec04/aquarium.py": {
        "Fish.increment_age": {
            "name": "increment_age",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aquarium2.increment_all_ages": {
            "name": "increment_all_ages",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aquarium2.heaviest_fish": {
            "name": "heaviest_fish",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aquarium2.average_weight": {
            "name": "average_weight",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aquarium3.increment_all_ages": {
            "name": "increment_all_ages",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aquarium3.heaviest_fish": {
            "name": "heaviest_fish",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Aquarium3.average_weight": {
            "name": "average_weight",
            "location": 128,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aquarium.append": {
            "name": "append",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fish": [
                    "int",
                    "str"
                ]
            }
        },
        "Aquarium.increment_all_ages": {
            "name": "increment_all_ages",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aquarium.heaviest_fish": {
            "name": "heaviest_fish",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aquarium3.heaviest_fish.max_fish": {
            "name": "max_fish",
            "location": 124,
            "return": [],
            "arguments": {
                "f1": [],
                "f2": []
            }
        }
    },
    "code-master/lec04/data_definitions.py": {},
    "code-master/lec04/iteration.py": {
        "_matches_at": {
            "name": "_matches_at",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "needle": [],
                "haystack": [],
                "base": [
                    "int"
                ]
            }
        },
        "str_index": {
            "name": "str_index",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "needle": [
                    "str",
                    "typing.Callable[int, None]",
                    "typing.Sequence[T]",
                    "float"
                ],
                "haystack": []
            }
        },
        "find_satisfies": {
            "name": "find_satisfies",
            "location": 48,
            "return": [
                "str",
                "object",
                "None"
            ],
            "arguments": {
                "haystack": [
                    "list[str]",
                    "list[object]",
                    "list[]",
                    "str"
                ],
                "needle": [
                    "typing.Callable[T, bool]",
                    "int",
                    "float",
                    "str",
                    "typing.Iterator"
                ]
            }
        },
        "str_index2": {
            "name": "str_index2",
            "location": 70,
            "return": [],
            "arguments": {
                "needle": [
                    "str",
                    "bool"
                ],
                "haystack": []
            }
        }
    },
    "code-master/lec04/lib230.py": {
        "record": {
            "name": "record",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-master/lec04/test_iteration.py": {
        "test__matches_at": {
            "name": "test__matches_at",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_index": {
            "name": "test_str_index",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_str_index2": {
            "name": "test_str_index2",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "code-master/lec05/bigram_iterable.py": {
        "_bigrams_in": {
            "name": "_bigrams_in",
            "location": 13,
            "return": [
                "typing.Generator[tuple[typing.Union[str,None,frozenset,ImportError,str,str,typing.Text]]]"
            ],
            "arguments": {
                "corpus": [
                    "dict[str, dict[, ]]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "BigramModel.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigramModel.__len__": {
            "name": "__len__",
            "location": 51,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigramModel.train_one": {
            "name": "train_one",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fst": [
                    "int",
                    "str"
                ],
                "snd": [
                    "int",
                    "str"
                ]
            }
        },
        "BigramModel.train": {
            "name": "train",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "BigramModel.check_one": {
            "name": "check_one",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fst": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "snd": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "BigramModel.check": {
            "name": "check",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BigramModel.next": {
            "name": "next",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "fst": [
                    "str",
                    "bool",
                    "typing.Callable[..., bool]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "BigramModel.babble": {
            "name": "babble",
            "location": 138,
            "return": [
                "typing.Generator[typing.Text]",
                "typing.Generator[typing.Union[float,str,int]]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "start": [
                    "typing.Text"
                ],
                "stop": [
                    "typing.Text"
                ]
            }
        }
    },
    "code-master/lec05/bigram_list.py": {
        "_bigrams_in": {
            "name": "_bigrams_in",
            "location": 13,
            "return": [
                "list[tuple[typing.Union[str,list[str],None,dict[str, int],dict[str, str]]]]"
            ],
            "arguments": {
                "corpus": [
                    "dict[str, dict[, ]]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "BigramModel.__len__": {
            "name": "__len__",
            "location": 36,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigramModel.train_one": {
            "name": "train_one",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fst": [
                    "int",
                    "str"
                ],
                "snd": [
                    "int",
                    "str"
                ]
            }
        },
        "BigramModel.train": {
            "name": "train",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "list[str]",
                    "list[]",
                    "str",
                    "None"
                ]
            }
        },
        "BigramModel.check_one": {
            "name": "check_one",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fst": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "snd": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "BigramModel.check": {
            "name": "check",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BigramModel.next": {
            "name": "next",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "fst": [
                    "str",
                    "bool",
                    "typing.Callable[..., bool]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "BigramModel.babble": {
            "name": "babble",
            "location": 122,
            "return": [
                "list[typing.Union[typing.Text,dict[str, typing.Any],list[],None]]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "start": [
                    "typing.Text"
                ],
                "stop": [
                    "typing.Text"
                ]
            }
        }
    },
    "code-master/lec05/is_vs_equals.py": {},
    "code-master/lec05/lib230.py": {
        "record": {
            "name": "record",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-master/lec05/pp.py": {
        "extract_ints": {
            "name": "extract_ints",
            "location": 5,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "lines": [
                    "list[typing.AnyStr]",
                    "list[str]"
                ]
            }
        },
        "wrap_text": {
            "name": "wrap_text",
            "location": 67,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tokens": [
                    "bool",
                    "bytes"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "print_text": {
            "name": "print_text",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "words": [
                    "int",
                    "str"
                ],
                "width": [
                    "int"
                ]
            }
        },
        "tokenize_text": {
            "name": "tokenize_text",
            "location": 116,
            "return": [
                "list[]"
            ],
            "arguments": {
                "lines": [
                    "typing.Iterable[str]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "code-master/lec06/bigram_iterable.py": {
        "_bigrams_in": {
            "name": "_bigrams_in",
            "location": 12,
            "return": [
                "typing.Generator[tuple[typing.Union[str,None,frozenset,ImportError,str,str,typing.Text]]]"
            ],
            "arguments": {
                "corpus": [
                    "dict[str, dict[, ]]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "BigramModel.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigramModel.__len__": {
            "name": "__len__",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BigramModel.train_one": {
            "name": "train_one",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fst": [
                    "int",
                    "str"
                ],
                "snd": [
                    "int",
                    "str"
                ]
            }
        },
        "BigramModel.train": {
            "name": "train",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "BigramModel.check_one": {
            "name": "check_one",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fst": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "snd": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "BigramModel.check": {
            "name": "check",
            "location": 104,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "BigramModel.next": {
            "name": "next",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "fst": [
                    "list[]",
                    "list[T]",
                    "list[float]",
                    "str",
                    "float"
                ]
            }
        },
        "BigramModel._possibilities": {
            "name": "_possibilities",
            "location": 136,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "BigramModel.babble": {
            "name": "babble",
            "location": 149,
            "return": [
                "typing.Generator[typing.Text]",
                "typing.Generator[typing.Union[float,str,int]]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "start": [
                    "typing.Text"
                ],
                "stop": [
                    "typing.Text"
                ]
            }
        }
    },
    "code-master/lec06/lib230.py": {
        "record": {
            "name": "record",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-master/lec06/list_practice.py": {
        "Employee.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmployeeRoll.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmployeeRoll.__iter__": {
            "name": "__iter__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmployeeRoll.append": {
            "name": "append",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "employee": [
                    "int",
                    "str"
                ]
            }
        },
        "EmployeeRoll.find_by_id": {
            "name": "find_by_id",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "EmployeeRoll.find_by_mgr_id": {
            "name": "find_by_mgr_id",
            "location": 73,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "mgr_id": [
                    "str",
                    "int"
                ]
            }
        },
        "EmployeeRoll.all_names": {
            "name": "all_names",
            "location": 89,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmployeeRoll.all_mgr_ids": {
            "name": "all_mgr_ids",
            "location": 101,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmployeeRoll.total_payroll": {
            "name": "total_payroll",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmployeeRoll.raise_all": {
            "name": "raise_all",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "factor": [
                    "float"
                ]
            }
        },
        "EmployeeRoll.raise_by_mgr_id": {
            "name": "raise_by_mgr_id",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mgr_id": [
                    "str",
                    "int"
                ],
                "factor": [
                    "float",
                    "int",
                    "set[str]"
                ]
            }
        },
        "EmployeeRoll.raise_if": {
            "name": "raise_if",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pred": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "factor": [
                    "float",
                    "list[int]",
                    "str",
                    "int"
                ]
            }
        },
        "EmployeeRoll.find_root_mgr": {
            "name": "find_root_mgr",
            "location": 188,
            "return": [
                "int",
                "tuple[int]",
                "dict[str, typing.Union[int,str]]",
                "str",
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        }
    },
    "code-master/lec07/lib230.py": {
        "record": {
            "name": "record",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "code-master/lec07/village_problem.py": {
        "Child.random": {
            "name": "random",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Child.is_final": {
            "name": "is_final",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Child.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Family.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pfirst": [
                    "int",
                    "float"
                ],
                "pmore": [
                    "int",
                    "float"
                ]
            }
        },
        "Family._pwants_child": {
            "name": "_pwants_child",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Family._more_allowed": {
            "name": "_more_allowed",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Family.__len__": {
            "name": "__len__",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Family.__iter__": {
            "name": "__iter__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Family.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Village.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "pfirst": [
                    "float"
                ],
                "pmore": [
                    "float"
                ]
            }
        },
        "Village.__len__": {
            "name": "__len__",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Village.__iter__": {
            "name": "__iter__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Village.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "code-master/lec08/bst.py": {
        "_Node.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "typing.Any",
                    "int"
                ],
                "value": [
                    "str",
                    "None"
                ]
            }
        },
        "_NodeRef.get_optional": {
            "name": "get_optional",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NodeRef.set": {
            "name": "set",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replacement": [
                    "int",
                    "str"
                ]
            }
        },
        "_NodeRef.__bool__": {
            "name": "__bool__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NodeRef.get": {
            "name": "get",
            "location": 49,
            "return": [
                "list[]",
                "list[tuple[typing.Union[float,float]]]",
                "str",
                "list[str]",
                "list[list[str]]",
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NodeRef.key": {
            "name": "key",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NodeRef.value": {
            "name": "value",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_NodeRef.set_value": {
            "name": "set_value",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "str",
                    "list[]",
                    "typing.Collection"
                ]
            }
        },
        "_NodeRef.left": {
            "name": "left",
            "location": 68,
            "return": [
                "_LeftRef"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NodeRef.right": {
            "name": "right",
            "location": 72,
            "return": [
                "_RightRef"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NodeRefBase.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "int",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "_LeftRef.get_optional": {
            "name": "get_optional",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_LeftRef.set": {
            "name": "set",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replacement": [
                    "bool",
                    "float"
                ]
            }
        },
        "_RightRef.get_optional": {
            "name": "get_optional",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_RightRef.set": {
            "name": "set",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replacement": [
                    "bool",
                    "float"
                ]
            }
        },
        "Bst.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bst.__len__": {
            "name": "__len__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bst.__bool__": {
            "name": "__bool__",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bst.insert_rec": {
            "name": "insert_rec",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "Bst.__contains__": {
            "name": "__contains__",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Bst.__getitem__": {
            "name": "__getitem__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Bst.__setitem__": {
            "name": "__setitem__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[typing.Optional[typing.Any]]",
                    "list[str]",
                    "None",
                    "int",
                    "dict[, ]"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "Bst.insert_alt2": {
            "name": "insert_alt2",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Bst.insert_ref": {
            "name": "insert_ref",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "set[]"
                ],
                "value": [
                    "str",
                    "None",
                    "typing.Callable[dict[, ], typing.Hashable]",
                    "typing.Hashable",
                    "int"
                ]
            }
        },
        "Bst.__delitem__": {
            "name": "__delitem__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Bst.__iter__": {
            "name": "__iter__",
            "location": 273,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bst.insert_rec.helper": {
            "name": "helper",
            "location": 143,
            "return": [
                "_Node",
                "None"
            ],
            "arguments": {
                "curr": []
            }
        },
        "Bst._RootRef.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bst": []
            }
        },
        "Bst._RootRef.get_optional": {
            "name": "get_optional",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Bst._RootRef.set": {
            "name": "set",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "replacement": []
            }
        },
        "Bst.__iter__.helper": {
            "name": "helper",
            "location": 274,
            "return": [
                "_Node",
                "None"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "code-master/lec08/lib230.py": {
        "record": {
            "name": "record",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    }
}
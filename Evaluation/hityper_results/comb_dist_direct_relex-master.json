{
    "comb_dist_direct_relex-master/relex/comb_dist_direct_relex.py": {
        "CombDistDirectRelex.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [
                    "typing.Callable[str, None]",
                    "str",
                    "None",
                    "int"
                ],
                "text_field_embedder": [
                    "bool",
                    "None"
                ],
                "cnn_size": [
                    "int"
                ],
                "dropout_weight": [
                    "float"
                ],
                "with_entity_embeddings": [
                    "bool"
                ],
                "sent_loss_weight": [
                    "int"
                ],
                "attention_weight_fn": [
                    "typing.Text"
                ],
                "attention_aggregation_fn": [
                    "typing.Text"
                ]
            }
        },
        "CombDistDirectRelex.forward": {
            "name": "forward",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "mentions": [
                    "str"
                ],
                "positions1": [
                    "int",
                    "str",
                    "None"
                ],
                "positions2": [
                    "int",
                    "str",
                    "None"
                ],
                "is_direct_supervision_bag": [
                    "list[bool]",
                    "str"
                ],
                "sent_labels": [],
                "labels": [
                    "float",
                    "list[]",
                    "None"
                ]
            }
        },
        "CombDistDirectRelex.decode": {
            "name": "decode",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "output_dict": []
            }
        },
        "CombDistDirectRelex.get_metrics": {
            "name": "get_metrics",
            "location": 242,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        }
    },
    "comb_dist_direct_relex-master/relex/multilabel_average_precision_metric.py": {
        "MultilabelAveragePrecision.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bins": [
                    "int"
                ],
                "recall_thr": [
                    "float"
                ]
            }
        },
        "MultilabelAveragePrecision.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predictions": [],
                "gold_labels": [
                    "None"
                ]
            }
        },
        "MultilabelAveragePrecision._thresholded_average_precision_score": {
            "name": "_thresholded_average_precision_score",
            "location": 86,
            "return": [
                "tuple[int]",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "precision": [],
                "recall": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MultilabelAveragePrecision.get_metric": {
            "name": "get_metric",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "reset": [
                    "bool"
                ]
            }
        },
        "MultilabelAveragePrecision.reset": {
            "name": "reset",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "comb_dist_direct_relex-master/relex/relation_extraction_predictor.py": {
        "RelationExtractionPredictor._json_to_instance": {
            "name": "_json_to_instance",
            "location": 15,
            "return": [
                "tuple[typing.Union[int,list[int],tuple[typing.Union[int,int]],float,dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "json_dict": []
            }
        }
    },
    "comb_dist_direct_relex-master/relex/relation_instances_reader.py": {
        "RelationInstancesReader.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lazy": [
                    "bool"
                ],
                "max_bag_size": [
                    "int"
                ],
                "negative_exampels_percentage": [
                    "int"
                ],
                "with_direct_supervision": [
                    "bool"
                ]
            }
        },
        "RelationInstancesReader._read": {
            "name": "_read",
            "location": 77,
            "return": [
                "typing.Generator[]",
                "typing.Generator[typing.Union[dict[, ],str]]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        },
        "RelationInstancesReader.text_to_instance": {
            "name": "text_to_instance",
            "location": 142,
            "return": [
                "None",
                "Instance"
            ],
            "arguments": {
                "self": [],
                "e1": [
                    "bool",
                    "None"
                ],
                "e2": [
                    "bool",
                    "None"
                ],
                "rels": [],
                "mentions": [
                    "list[str]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "list[]",
                    "list[tuple[typing.Union[typing.Any,...]]]"
                ],
                "is_predict": [
                    "list[str]",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "supervision_type": [
                    "list[str]",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RelationInstancesReader._tokens_distances_fields": {
            "name": "_tokens_distances_fields",
            "location": 219,
            "return": [
                "tuple[typing.Union[TextField,SequenceLabelField]]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "int"
                ]
            }
        },
        "RelationInstancesReader._tokens_distances": {
            "name": "_tokens_distances",
            "location": 227,
            "return": [
                "tuple[typing.Union[int,str,dict[str, typing.Union[typing.Any,typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "RelationInstancesReader._positions": {
            "name": "_positions",
            "location": 253,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "tokens_count": [
                    "bool",
                    "str",
                    "typing.Sequence[]"
                ],
                "e_loc": []
            }
        }
    },
    "comb_dist_direct_relex-master/relex/__init__.py": {},
    "comb_dist_direct_relex-master/scripts/plot_pr_curves.py": {},
    "comb_dist_direct_relex-master/tests/test_multilabel_average_precision_metric.py": {
        "TestUtil.test_get_metrics": {
            "name": "test_get_metrics",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "list[]",
                    "bool",
                    "str"
                ]
            }
        }
    }
}
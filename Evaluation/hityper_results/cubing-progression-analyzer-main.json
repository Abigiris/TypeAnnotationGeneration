{
    "cubing-progression-analyzer-main/cubingpa/data_filter.py": {
        "filter": {
            "name": "filter",
            "location": 9,
            "return": [],
            "arguments": {
                "raw_data": [
                    "list[dict[str, typing.Any]]",
                    "dict[, ]",
                    "int",
                    "dict[str, dict[str, typing.Any]]",
                    "str",
                    "dict[int, set[int]]"
                ],
                "event_id": [
                    "int",
                    "str",
                    "typing.Sequence[int]"
                ]
            }
        },
        "_filter_on_event": {
            "name": "_filter_on_event",
            "location": 46,
            "return": [],
            "arguments": {
                "results": [],
                "event_id": [
                    "str",
                    "dict[, ]",
                    "typing.Type",
                    "list[typing.Any]",
                    "None"
                ]
            }
        },
        "_remove_invalid_results": {
            "name": "_remove_invalid_results",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "results": [
                    "str"
                ]
            }
        },
        "_convert_results_to_seconds": {
            "name": "_convert_results_to_seconds",
            "location": 60,
            "return": [],
            "arguments": {
                "results": []
            }
        },
        "_remove_persons_with_insufficient_results": {
            "name": "_remove_persons_with_insufficient_results",
            "location": 68,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "results": [
                    "list[int]",
                    "list[str]"
                ],
                "minimum_results_per_person": [
                    "typing.Iterable[dict[, ]]",
                    "typing.Iterable[int]"
                ]
            }
        },
        "_join_results_on_competitions": {
            "name": "_join_results_on_competitions",
            "location": 81,
            "return": [],
            "arguments": {
                "results": [
                    "bool"
                ],
                "competitions": []
            }
        },
        "_sort_results": {
            "name": "_sort_results",
            "location": 95,
            "return": [],
            "arguments": {
                "results": []
            }
        },
        "_convert_year_month_day_to_date": {
            "name": "_convert_year_month_day_to_date",
            "location": 99,
            "return": [],
            "arguments": {
                "results": []
            }
        }
    },
    "cubing-progression-analyzer-main/cubingpa/db_data_loader.py": {
        "load": {
            "name": "load",
            "location": 10,
            "return": [
                "RawData"
            ],
            "arguments": {}
        },
        "_get_db_engine": {
            "name": "_get_db_engine",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "_get_raw_results": {
            "name": "_get_raw_results",
            "location": 28,
            "return": [],
            "arguments": {
                "db_engine": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_get_raw_competitions": {
            "name": "_get_raw_competitions",
            "location": 36,
            "return": [],
            "arguments": {
                "db_engine": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "cubing-progression-analyzer-main/cubingpa/events.py": {},
    "cubing-progression-analyzer-main/cubingpa/raw_data.py": {
        "RawData.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "typing.Counter",
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[]"
                ],
                "competitions": [
                    "int",
                    "str",
                    "float",
                    "tuple[]"
                ]
            }
        },
        "RawData.results": {
            "name": "results",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawData.competitions": {
            "name": "competitions",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "cubing-progression-analyzer-main/cubingpa/reference_processor.py": {
        "ReferenceProcessor.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filtered_results": []
            }
        },
        "ReferenceProcessor.process": {
            "name": "process",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "log_progression": [
                    "bool"
                ],
                "log_debug": [
                    "bool"
                ]
            }
        },
        "ReferenceProcessor._init_reference": {
            "name": "_init_reference",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceProcessor._init_processed_results": {
            "name": "_init_processed_results",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReferenceProcessor._update_processed_results": {
            "name": "_update_processed_results",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_processed_results": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "ReferenceProcessor._launch_main_process": {
            "name": "_launch_main_process",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_progression": [
                    "bool"
                ],
                "log_debug": [
                    "bool"
                ]
            }
        },
        "ReferenceProcessor._create_person_dataframe": {
            "name": "_create_person_dataframe",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "person_id": [
                    "int",
                    "str",
                    "list[str]",
                    "bytes",
                    "None"
                ]
            }
        },
        "ReferenceProcessor._remove_duplicate_dates": {
            "name": "_remove_duplicate_dates",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "person_dataframe": [
                    "typing.IO"
                ]
            }
        },
        "ReferenceProcessor._set_reference_values": {
            "name": "_set_reference_values",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "str",
                    "int",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "ReferenceProcessor._find_date_for_value": {
            "name": "_find_date_for_value",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "dataframe": [
                    "str"
                ],
                "column_id": [
                    "int"
                ],
                "time": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "ReferenceProcessor._get_date_for_new_time": {
            "name": "_get_date_for_new_time",
            "location": 221,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "str",
                    "list[str]",
                    "None",
                    "int"
                ],
                "column_id": [
                    "int",
                    "str"
                ],
                "time": [
                    "float",
                    "dict[str, typing.Any]",
                    "int",
                    "tuple[typing.Union[int,...]]"
                ]
            }
        },
        "ReferenceProcessor._interpolate_column": {
            "name": "_interpolate_column",
            "location": 247,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "dataframe": [
                    "str",
                    "list[]"
                ],
                "column_id": [
                    "int"
                ],
                "time": [
                    "str",
                    "int"
                ]
            }
        },
        "ReferenceProcessor._get_reference_min_time": {
            "name": "_get_reference_min_time",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReferenceProcessor._update_reference": {
            "name": "_update_reference",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None"
                ],
                "log_debug": [
                    "bool"
                ]
            }
        },
        "ReferenceProcessor._find_closest_date": {
            "name": "_find_closest_date",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "time": [
                    "int",
                    "str",
                    "list[dict[, ]]",
                    "tuple[typing.Union[list[typing.Any],list[typing.Any]]]",
                    "typing.Callable[, ]",
                    "typing.Sequence[str]"
                ],
                "log_debug": [
                    "bool"
                ]
            }
        },
        "ReferenceProcessor._shift_date": {
            "name": "_shift_date",
            "location": 395,
            "return": [],
            "arguments": {
                "self": [],
                "dataframe": [],
                "delta": [
                    "list[int]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "cubing-progression-analyzer-main/cubingpa/utils.py": {
        "remove_not_progressing_solves": {
            "name": "remove_not_progressing_solves",
            "location": 7,
            "return": [],
            "arguments": {
                "dataframe": [],
                "column_number": [
                    "int"
                ]
            }
        },
        "interpolate_dates": {
            "name": "interpolate_dates",
            "location": 40,
            "return": [],
            "arguments": {
                "dataframe": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "convert_date_index_to_timedelta": {
            "name": "convert_date_index_to_timedelta",
            "location": 64,
            "return": [],
            "arguments": {
                "dataframe": []
            }
        }
    },
    "cubing-progression-analyzer-main/cubingpa/__init__.py": {},
    "cubing-progression-analyzer-main/cubingpa/config/__init__.py": {},
    "cubing-progression-analyzer-main/cubingpa/tests/test_data_filter.py": {
        "debug_print": {
            "name": "debug_print",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "df_before": [],
                "df_after": [],
                "df_expected": []
            }
        },
        "debug_print_results_competitions": {
            "name": "debug_print_results_competitions",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "df_results": [],
                "df_competitions": [],
                "df_after": [],
                "df_expected": []
            }
        },
        "test_filter_on_event_existing": {
            "name": "test_filter_on_event_existing",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter_on_event_no_removal": {
            "name": "test_filter_on_event_no_removal",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter_on_event_remove_all": {
            "name": "test_filter_on_event_remove_all",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_invalid_results_some_removal": {
            "name": "test_remove_invalid_results_some_removal",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_invalid_results_no_removal": {
            "name": "test_remove_invalid_results_no_removal",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_invalid_results_remove_all": {
            "name": "test_remove_invalid_results_remove_all",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_results_to_seconds_some_results": {
            "name": "test_convert_results_to_seconds_some_results",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_results_to_seconds_no_results": {
            "name": "test_convert_results_to_seconds_no_results",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_persons_with_insufficient_results_two_middle": {
            "name": "test_remove_persons_with_insufficient_results_two_middle",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_persons_with_insufficient_results_two_first": {
            "name": "test_remove_persons_with_insufficient_results_two_first",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_persons_with_insufficient_results_two_last": {
            "name": "test_remove_persons_with_insufficient_results_two_last",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_persons_with_insufficient_results_two_multiple": {
            "name": "test_remove_persons_with_insufficient_results_two_multiple",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_persons_with_insufficient_results_two_all": {
            "name": "test_remove_persons_with_insufficient_results_two_all",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_persons_with_insufficient_results_two_none": {
            "name": "test_remove_persons_with_insufficient_results_two_none",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_persons_with_insufficient_results_one_none": {
            "name": "test_remove_persons_with_insufficient_results_one_none",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_persons_with_insufficient_results_zero_none": {
            "name": "test_remove_persons_with_insufficient_results_zero_none",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_persons_with_insufficient_results_minus_one_none": {
            "name": "test_remove_persons_with_insufficient_results_minus_one_none",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_persons_with_insufficient_results_three_middle": {
            "name": "test_remove_persons_with_insufficient_results_three_middle",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_join_results_on_competitions_nominal": {
            "name": "test_join_results_on_competitions_nominal",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_join_results_on_competitions_no_competition": {
            "name": "test_join_results_on_competitions_no_competition",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_results_nominal": {
            "name": "test_sort_results_nominal",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_year_month_day_to_date_nominal": {
            "name": "test_convert_year_month_day_to_date_nominal",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubing-progression-analyzer-main/cubingpa/tests/test_utils.py": {
        "test_remove_not_progressing_solves_superior_in_the_middle": {
            "name": "test_remove_not_progressing_solves_superior_in_the_middle",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_not_progressing_solves_equal_in_the_middle": {
            "name": "test_remove_not_progressing_solves_equal_in_the_middle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_not_progressing_solves_superior_starting": {
            "name": "test_remove_not_progressing_solves_superior_starting",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_not_progressing_solves_equals_starting": {
            "name": "test_remove_not_progressing_solves_equals_starting",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_not_progressing_solves_superior_ending": {
            "name": "test_remove_not_progressing_solves_superior_ending",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_not_progressing_solves_equals_ending": {
            "name": "test_remove_not_progressing_solves_equals_ending",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_not_progressing_solves_mixed": {
            "name": "test_remove_not_progressing_solves_mixed",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_not_progressing_solves_nothing_to_remove": {
            "name": "test_remove_not_progressing_solves_nothing_to_remove",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_not_progressing_solves_not_default_column": {
            "name": "test_remove_not_progressing_solves_not_default_column",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interpolate_dates_interpolate_once": {
            "name": "test_interpolate_dates_interpolate_once",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interpolate_dates_interpolate_multiple": {
            "name": "test_interpolate_dates_interpolate_multiple",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_interpolate_dates_interpolate_nothing": {
            "name": "test_interpolate_dates_interpolate_nothing",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_date_index_to_timedelta_multiple_days": {
            "name": "test_convert_date_index_to_timedelta_multiple_days",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_convert_date_index_to_timedelta_one_day": {
            "name": "test_convert_date_index_to_timedelta_one_day",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "cubing-progression-analyzer-main/cubingpa/tests/__init__.py": {}
}
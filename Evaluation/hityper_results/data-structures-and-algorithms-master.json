{
    "data-structures-and-algorithms-master/python/algorithms/bubble_sort/bubble_sort.py": {
        "bubble_sort": {
            "name": "bubble_sort",
            "location": 3,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/algorithms/bubble_sort/test_bubble_sort.py": {
        "test_func_exists": {
            "name": "test_func_exists",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort": {
            "name": "test_sort",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_same": {
            "name": "test_all_same",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_zero": {
            "name": "test_sort_zero",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_lots": {
            "name": "test_sort_lots",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/algorithms/insertion_sort/insertion_sort.py": {
        "insertion_sort": {
            "name": "insertion_sort",
            "location": 2,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/algorithms/insertion_sort/test_insertion_sort.py": {
        "test_func_exists": {
            "name": "test_func_exists",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort": {
            "name": "test_sort",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_same": {
            "name": "test_all_same",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_zero": {
            "name": "test_sort_zero",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_lots": {
            "name": "test_sort_lots",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/algorithms/merge_sort/merge_sort.py": {
        "merge_array": {
            "name": "merge_array",
            "location": 2,
            "return": [],
            "arguments": {
                "arr": [],
                "left": [],
                "right": []
            }
        },
        "merge_split": {
            "name": "merge_split",
            "location": 40,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "merge_sort": {
            "name": "merge_sort",
            "location": 64,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/algorithms/merge_sort/test_merge_sort.py": {
        "test_func_exists": {
            "name": "test_func_exists",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort": {
            "name": "test_sort",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_same": {
            "name": "test_all_same",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_zero": {
            "name": "test_sort_zero",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_lots": {
            "name": "test_sort_lots",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/algorithms/quick_sort/quick_sort.py": {
        "_partition": {
            "name": "_partition",
            "location": 3,
            "return": [
                "int"
            ],
            "arguments": {
                "arr": [],
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "_quick_sort": {
            "name": "_quick_sort",
            "location": 34,
            "return": [
                "float"
            ],
            "arguments": {
                "arr": [
                    "float"
                ],
                "start": [
                    "str"
                ],
                "end": [
                    "str"
                ]
            }
        },
        "quick_sort": {
            "name": "quick_sort",
            "location": 52,
            "return": [],
            "arguments": {
                "arr": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/algorithms/quick_sort/test_quick_sort.py": {
        "test_func_exists": {
            "name": "test_func_exists",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort": {
            "name": "test_sort",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_all_same": {
            "name": "test_all_same",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_zero": {
            "name": "test_sort_zero",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_lots": {
            "name": "test_sort_lots",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/challenges/array_binary_search/array_binary_search.py": {
        "array_binary_search": {
            "name": "array_binary_search",
            "location": 1,
            "return": [
                "int"
            ],
            "arguments": {
                "arr": [],
                "val": [
                    "int"
                ]
            }
        }
    },
    "data-structures-and-algorithms-master/python/challenges/array_binary_search/test_array_binary_search.py": {
        "test_function_exists": {
            "name": "test_function_exists",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_search_exists_firstidx": {
            "name": "test_search_exists_firstidx",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_search_exists2": {
            "name": "test_search_exists2",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_search_exists_lastidx": {
            "name": "test_search_exists_lastidx",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_search_noexists": {
            "name": "test_search_noexists",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_assignment_test1": {
            "name": "test_assignment_test1",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_assignment_test2": {
            "name": "test_assignment_test2",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/challenges/array_reverse/array_reverse.py": {
        "reverse_array": {
            "name": "reverse_array",
            "location": 1,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "orig": []
            }
        },
        "reverse_array2": {
            "name": "reverse_array2",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "orig": [
                    "str"
                ]
            }
        }
    },
    "data-structures-and-algorithms-master/python/challenges/array_shift/array_shift.py": {
        "insert_shift_array_sorted": {
            "name": "insert_shift_array_sorted",
            "location": 1,
            "return": [
                "bytearray",
                "list[]"
            ],
            "arguments": {
                "arr": [
                    "bytearray"
                ],
                "val": []
            }
        },
        "insert_shift_array": {
            "name": "insert_shift_array",
            "location": 32,
            "return": [
                "list[typing.Union[int,str]]"
            ],
            "arguments": {
                "arr": [],
                "val": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "data-structures-and-algorithms-master/python/challenges/array_shift/test_array_shift.py": {
        "test_function_exists": {
            "name": "test_function_exists",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_to_middle": {
            "name": "test_insert_to_middle",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_small_array": {
            "name": "test_insert_small_array",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/challenges/breadth_first/breadth_first.py": {
        "breadth_first": {
            "name": "breadth_first",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "None",
                    "list[str]",
                    "dict[str, str]",
                    "tuple[typing.Union[str,None,str,None]]"
                ],
                "action_func": [
                    "str"
                ]
            }
        }
    },
    "data-structures-and-algorithms-master/python/challenges/breadth_first/test_breadth_first.py": {
        "test_func_exists": {
            "name": "test_func_exists",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "action_func": {
            "name": "action_func",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "val": [
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "test_breadth_first": {
            "name": "test_breadth_first",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_breadth_empty": {
            "name": "test_breadth_empty",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/challenges/fifo_animal_shelter/fifo_animal_shelter.py": {
        "Animal.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "animaltype": [
                    "int",
                    "float"
                ]
            }
        },
        "Animal.serialize": {
            "name": "serialize",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Animal.Factory": {
            "name": "Factory",
            "location": 32,
            "return": [
                "None",
                "Animal"
            ],
            "arguments": {
                "jsonstr": [
                    "str",
                    "int"
                ]
            }
        },
        "Cat.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dog.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnimalShelter.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnimalShelter.enqueue": {
            "name": "enqueue",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "animal": []
            }
        },
        "AnimalShelter.dequeue": {
            "name": "dequeue",
            "location": 73,
            "return": [
                "None",
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "pref": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "data-structures-and-algorithms-master/python/challenges/fifo_animal_shelter/test_fifo_animal_shelter.py": {
        "test_class_exists": {
            "name": "test_class_exists",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_animal_serialize": {
            "name": "test_animal_serialize",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_animal_factory": {
            "name": "test_animal_factory",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shelter_create": {
            "name": "test_shelter_create",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shelter_enq_deq": {
            "name": "test_shelter_enq_deq",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "helper_shelter_enq10": {
            "name": "helper_shelter_enq10",
            "location": 42,
            "return": [
                "AnimalShelter"
            ],
            "arguments": {}
        },
        "test_shelter_enq_lots": {
            "name": "test_shelter_enq_lots",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shelter_deq_empty": {
            "name": "test_shelter_deq_empty",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shelter_deq_pref_found": {
            "name": "test_shelter_deq_pref_found",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shelter_deq_pref_notfound": {
            "name": "test_shelter_deq_pref_notfound",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/challenges/find_maximum_binary_tree/find_maximum_binary_tree.py": {},
    "data-structures-and-algorithms-master/python/challenges/find_maximum_binary_tree/test_find_maximum_binary_tree.py": {
        "test_tree_find_max": {
            "name": "test_tree_find_max",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty": {
            "name": "test_empty",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/challenges/fizz_buzz_tree/fizz_buzz_tree.py": {
        "fizz_buzz_valueswitch": {
            "name": "fizz_buzz_valueswitch",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "node": [
                    "list[str]"
                ]
            }
        },
        "fizz_buzz_tree": {
            "name": "fizz_buzz_tree",
            "location": 23,
            "return": [
                "list[typing.Any]",
                "None",
                "dict[str, typing.Any]",
                "tuple[typing.Union[list[str],str,None]]",
                "list[str]"
            ],
            "arguments": {
                "tree": [
                    "list[typing.Any]",
                    "None",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[list[str],str,None]]",
                    "list[str]"
                ]
            }
        }
    },
    "data-structures-and-algorithms-master/python/challenges/fizz_buzz_tree/test_fizz_buzz_tree.py": {
        "test_func_exists": {
            "name": "test_func_exists",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fizz_buzz_tree_all": {
            "name": "test_fizz_buzz_tree_all",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fizz_buzz_empty": {
            "name": "test_fizz_buzz_empty",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fizz_buzz_tree_none": {
            "name": "test_fizz_buzz_tree_none",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/challenges/get_edges/get_edges.py": {
        "get_edges": {
            "name": "get_edges",
            "location": 7,
            "return": [
                "list[typing.Union[bool,float]]"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "path_ro": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/challenges/get_edges/test_get_edges.py": {
        "test_invalid_input": {
            "name": "test_invalid_input",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid": {
            "name": "test_valid",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid": {
            "name": "test_invalid",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/challenges/left_join/left_join.py": {
        "left_join": {
            "name": "left_join",
            "location": 9,
            "return": [
                "list[]",
                "list[dict[typing.Text, typing.Union[dict[typing.Any, list[]],dict[str, str],dict[, ]]]]"
            ],
            "arguments": {
                "h1": [
                    "list[int]",
                    "int"
                ],
                "h2": [
                    "str",
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        }
    },
    "data-structures-and-algorithms-master/python/challenges/left_join/test_left_join.py": {
        "test_func_exists": {
            "name": "test_func_exists",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_func_secondhashisnone": {
            "name": "test_func_secondhashisnone",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_func_onematch_onedoesnt": {
            "name": "test_func_onematch_onedoesnt",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_func_fullsample": {
            "name": "test_func_fullsample",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/challenges/multi_bracket_validation/multi_bracket_validation.py": {
        "getIndex": {
            "name": "getIndex",
            "location": 2,
            "return": [
                "int"
            ],
            "arguments": {
                "data": [
                    "list[]",
                    "str",
                    "bytes"
                ],
                "ch": []
            }
        },
        "multi_bracket_validation": {
            "name": "multi_bracket_validation",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "bytearray",
                    "str"
                ]
            }
        }
    },
    "data-structures-and-algorithms-master/python/challenges/multi_bracket_validation/test_multi_bracket_validation.py": {
        "test_func_exists": {
            "name": "test_func_exists",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_balanced": {
            "name": "test_balanced",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_balanced_big": {
            "name": "test_balanced_big",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_balanced_xtrachars": {
            "name": "test_balanced_xtrachars",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_balanced_nested": {
            "name": "test_balanced_nested",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_balanced_nested_text": {
            "name": "test_balanced_nested_text",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unbalanced": {
            "name": "test_unbalanced",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unbalanced_short1": {
            "name": "test_unbalanced_short1",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unbalanced_short2": {
            "name": "test_unbalanced_short2",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty": {
            "name": "test_empty",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/challenges/queue_with_stacks/queue_with_stacks.py": {
        "PseudoQueue.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PseudoQueue.count": {
            "name": "count",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PseudoQueue.enqueue": {
            "name": "enqueue",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str"
                ]
            }
        },
        "PseudoQueue.dequeue": {
            "name": "dequeue",
            "location": 35,
            "return": [
                "tuple[typing.Union[typing.Text,bool]]",
                "tuple[typing.Union[str,bool]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/challenges/queue_with_stacks/test_queue_with_stacks.py": {
        "test_class_exists": {
            "name": "test_class_exists",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_enqueue": {
            "name": "test_enqueue",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dequeue": {
            "name": "test_dequeue",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/challenges/repeated_word/repeated_word.py": {
        "repeated_word": {
            "name": "repeated_word",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "longstr": [
                    "str"
                ]
            }
        }
    },
    "data-structures-and-algorithms-master/python/challenges/repeated_word/test_repeated_word.py": {
        "test_sample1": {
            "name": "test_sample1",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sample2": {
            "name": "test_sample2",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sample3": {
            "name": "test_sample3",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/challenges/tree_intersection/test_tree_intersection.py": {
        "tree": {
            "name": "tree",
            "location": 9,
            "return": [
                "BinaryTree"
            ],
            "arguments": {}
        },
        "test_fixture": {
            "name": "test_fixture",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "test_func_emptytree": {
            "name": "test_func_emptytree",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_func_invalidparams": {
            "name": "test_func_invalidparams",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_func_matches_allofit": {
            "name": "test_func_matches_allofit",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_func_match_none": {
            "name": "test_func_match_none",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "test_func_match_some": {
            "name": "test_func_match_some",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "data-structures-and-algorithms-master/python/challenges/tree_intersection/tree_intersection.py": {
        "tree_intersection": {
            "name": "tree_intersection",
            "location": 10,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tree1": [
                    "bool"
                ],
                "tree2": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "tree_intersection._add": {
            "name": "_add",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        },
        "tree_intersection._add_isdup": {
            "name": "_add_isdup",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/src/graph.py": {
        "Vertex.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Vertex.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Edge.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertex": [
                    "int",
                    "float"
                ],
                "weight": [
                    "int"
                ]
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.__len__": {
            "name": "__len__",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.add_vertex": {
            "name": "add_vertex",
            "location": 39,
            "return": [
                "Vertex"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vert1": [
                    "str",
                    "list[typing.Mapping]",
                    "dict[int, dict[int, typing.Any]]",
                    "float",
                    "dict[str, typing.Any]"
                ],
                "vert2": [
                    "str",
                    "list[typing.Mapping]",
                    "dict[int, dict[int, typing.Any]]",
                    "float",
                    "dict[str, typing.Any]"
                ],
                "weight": [
                    "float"
                ]
            }
        },
        "Graph.get_neighbors": {
            "name": "get_neighbors",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "vertex": [
                    "str",
                    "bool"
                ]
            }
        },
        "Graph.get_vertexes": {
            "name": "get_vertexes",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.breadth_first": {
            "name": "breadth_first",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "action_func": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "Graph.depth_first_recursive": {
            "name": "depth_first_recursive",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "action_func": [
                    "dict[str, typing.Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "Graph.depth_first": {
            "name": "depth_first",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "typing.Any",
                    "None"
                ],
                "action_func": [
                    "float",
                    "typing.Type"
                ]
            }
        },
        "Graph.depth_first_recursive._visit": {
            "name": "_visit",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "vertex": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/src/hashtable.py": {
        "HashTable.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashtableSize": [
                    "int"
                ]
            }
        },
        "HashTable._makePayload": {
            "name": "_makePayload",
            "location": 18,
            "return": [
                "dict[typing.Text, typing.Union[str,float,list[typing.Optional[str]],int]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "list[typing.Optional[str]]",
                    "int"
                ],
                "value": [
                    "str",
                    "float",
                    "list[typing.Optional[str]]",
                    "int"
                ]
            }
        },
        "HashTable._makeHash": {
            "name": "_makeHash",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "HashTable._getHashIndex": {
            "name": "_getHashIndex",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "int"
                ]
            }
        },
        "HashTable._hashtable_compare_func": {
            "name": "_hashtable_compare_func",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "payload1": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, dict[str, str]]"
                ],
                "payload2": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "HashTable.add": {
            "name": "add",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Iterable[tuple[typing.Union[int,int]]]",
                    "typing.Callable[str, str]"
                ],
                "value": [
                    "str",
                    "typing.Callable[Any,Any, None]",
                    "None"
                ]
            }
        },
        "HashTable.get": {
            "name": "get",
            "location": 75,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[, ]",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "HashTable.delete": {
            "name": "delete",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "HashTable.update": {
            "name": "update",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "HashTable.contains": {
            "name": "contains",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "HashTable.export_keys": {
            "name": "export_keys",
            "location": 129,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashTable.export_keys.touch_node": {
            "name": "touch_node",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/src/link_list.py": {
        "LinkNode.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ],
                "next": [
                    "None",
                    "int",
                    "list[tuple[typing.Union[int,float]]]",
                    "tuple[str]",
                    "str",
                    "float"
                ],
                "prev": [
                    "None",
                    "int",
                    "list[tuple[typing.Union[int,float]]]",
                    "tuple[str]",
                    "str",
                    "float"
                ]
            }
        },
        "LinkList.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comparison_func": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "LinkList.toJSON": {
            "name": "toJSON",
            "location": 32,
            "return": [
                "str",
                "dict[str, str]",
                "dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkList.toStr": {
            "name": "toStr",
            "location": 38,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkList.insert": {
            "name": "insert",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "LinkList.get": {
            "name": "get",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "typing.Iterable[object]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "LinkList.includes": {
            "name": "includes",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "LinkList.count": {
            "name": "count",
            "location": 98,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkList.append": {
            "name": "append",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "typing.Iterable[typing.Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "LinkList.peekHead": {
            "name": "peekHead",
            "location": 126,
            "return": [
                "list[typing.Union[bool,typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkList.remove": {
            "name": "remove",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ]
            }
        },
        "LinkList.insertBefore": {
            "name": "insertBefore",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "targetVal": [
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "newVal": [
                    "dict[str, dict[str, int]]",
                    "float"
                ],
                "afterInstead": [
                    "bool"
                ]
            }
        },
        "LinkList.insertAfter": {
            "name": "insertAfter",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "targetVal": [
                    "bytes",
                    "dict[, ]",
                    "list[str]"
                ],
                "newVal": [
                    "bytes",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "LinkList.traverse": {
            "name": "traverse",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_func": [
                    "typing.Callable[, ]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "LinkList.kthFromEnd": {
            "name": "kthFromEnd",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "float"
                ]
            }
        },
        "LinkList.mergeList": {
            "name": "mergeList",
            "location": 243,
            "return": [
                "typing.Iterable[str]",
                "int",
                "typing.Sequence[T]"
            ],
            "arguments": {
                "self": [],
                "listA": [
                    "typing.Iterable[str]",
                    "int",
                    "typing.Sequence[T]"
                ],
                "listB": [
                    "int"
                ]
            }
        }
    },
    "data-structures-and-algorithms-master/python/src/stacks_and_queues.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.count": {
            "name": "count",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str"
                ]
            }
        },
        "Stack.peek": {
            "name": "peek",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.count": {
            "name": "count",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.toStr": {
            "name": "toStr",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Queue.enqueue": {
            "name": "enqueue",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "str"
                ]
            }
        },
        "Queue.dequeue": {
            "name": "dequeue",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "val": [
                    "str"
                ]
            }
        },
        "Queue.peek": {
            "name": "peek",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/src/test_graph.py": {
        "test_exists": {
            "name": "test_exists",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_single": {
            "name": "test_add_single",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_multiple": {
            "name": "test_add_multiple",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_single": {
            "name": "test_get_single",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_multiple": {
            "name": "test_get_multiple",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_length": {
            "name": "test_length",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_empty": {
            "name": "test_empty",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_edge": {
            "name": "test_add_edge",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_neighbors": {
            "name": "test_get_neighbors",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_self_loop": {
            "name": "test_self_loop",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_breadth_first": {
            "name": "test_breadth_first",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_depth_first": {
            "name": "test_depth_first",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_breadth_first.visit": {
            "name": "visit",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "vertex": []
            }
        },
        "test_depth_first._visit": {
            "name": "_visit",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/src/test_hashtable.py": {
        "test_exists": {
            "name": "test_exists",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hash_makeHash_deterministic": {
            "name": "test_hash_makeHash_deterministic",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hash_makeHash_deterministic_diff": {
            "name": "test_hash_makeHash_deterministic_diff",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hash_delete": {
            "name": "test_hash_delete",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hash_update": {
            "name": "test_hash_update",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hash_add": {
            "name": "test_hash_add",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hash_add_alreadyexists": {
            "name": "test_hash_add_alreadyexists",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_missing": {
            "name": "test_get_missing",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contains": {
            "name": "test_contains",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not_contains": {
            "name": "test_not_contains",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hashIdx_in_range": {
            "name": "test_hashIdx_in_range",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_collision": {
            "name": "test_collision",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_export_keys": {
            "name": "test_export_keys",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/src/test_link_list.py": {
        "helper_insert_many": {
            "name": "helper_insert_many",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "ll": []
            }
        },
        "test_class_exists": {
            "name": "test_class_exists",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_count": {
            "name": "test_count",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert": {
            "name": "test_insert",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert_many": {
            "name": "test_insert_many",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_includes": {
            "name": "test_includes",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_includes_notfound": {
            "name": "test_includes_notfound",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_toJSON": {
            "name": "test_toJSON",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_append": {
            "name": "test_append",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove": {
            "name": "test_remove",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peekHead": {
            "name": "test_peekHead",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peekHead_empty": {
            "name": "test_peekHead_empty",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "helper_insertBefore": {
            "name": "helper_insertBefore",
            "location": 118,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "test_insertBefore": {
            "name": "test_insertBefore",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insertAfter": {
            "name": "test_insertAfter",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_traverse": {
            "name": "test_traverse",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "helper_kthFromEnd": {
            "name": "helper_kthFromEnd",
            "location": 187,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "test_kthFromEnd": {
            "name": "test_kthFromEnd",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kthFromEnd_OneLinkList": {
            "name": "test_kthFromEnd_OneLinkList",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kthFromEnd_Exception": {
            "name": "test_kthFromEnd_Exception",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ll_merge": {
            "name": "test_ll_merge",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_traverse.visit": {
            "name": "visit",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "value": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/src/test_stacks_and_queues.py": {
        "helper_stack_addlots": {
            "name": "helper_stack_addlots",
            "location": 6,
            "return": [
                "Stack"
            ],
            "arguments": {}
        },
        "test_stack_cancreate": {
            "name": "test_stack_cancreate",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stack_classexists": {
            "name": "test_stack_classexists",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stack_push": {
            "name": "test_stack_push",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stack_push_lots": {
            "name": "test_stack_push_lots",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stack_pop": {
            "name": "test_stack_pop",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stack_empty_after_pops": {
            "name": "test_stack_empty_after_pops",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_stack_peek": {
            "name": "test_stack_peek",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queue_classexists": {
            "name": "test_queue_classexists",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queue_cancreate": {
            "name": "test_queue_cancreate",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "helper_queue_enqueue_lots": {
            "name": "helper_queue_enqueue_lots",
            "location": 89,
            "return": [
                "Queue"
            ],
            "arguments": {}
        },
        "test_queue_enqueue": {
            "name": "test_queue_enqueue",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queue_enqueue_lots": {
            "name": "test_queue_enqueue_lots",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queue_dequeue_success": {
            "name": "test_queue_dequeue_success",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queue_dequeue_error": {
            "name": "test_queue_dequeue_error",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queue_peek": {
            "name": "test_queue_peek",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queue_peek_empty": {
            "name": "test_queue_peek_empty",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_queue_dequeue_untilempty": {
            "name": "test_queue_dequeue_untilempty",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-structures-and-algorithms-master/python/src/test_tree.py": {
        "test_exists": {
            "name": "test_exists",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tree": {
            "name": "tree",
            "location": 11,
            "return": [
                "BinaryTree"
            ],
            "arguments": {}
        },
        "test_fixture": {
            "name": "test_fixture",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "test_pre_order": {
            "name": "test_pre_order",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "dict[, ]"
                ]
            }
        },
        "test_in_order": {
            "name": "test_in_order",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "dict[, ]"
                ]
            }
        },
        "test_post_order": {
            "name": "test_post_order",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "str"
                ]
            }
        },
        "test_contains": {
            "name": "test_contains",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contains_empty": {
            "name": "test_contains_empty",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_empty": {
            "name": "test_add_empty",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_smaller": {
            "name": "test_add_smaller",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_larger": {
            "name": "test_add_larger",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not_contains": {
            "name": "test_not_contains",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_comparison_func_default": {
            "name": "test_comparison_func_default",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_comparison_func_userdef": {
            "name": "test_comparison_func_userdef",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_X_random": {
            "name": "test_add_X_random",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_comparison_func_userdef.comparison_func": {
            "name": "comparison_func",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "val1": [],
                "val2": [],
                "CS": []
            }
        }
    },
    "data-structures-and-algorithms-master/python/src/tree.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "BinaryTree.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTree.traverse": {
            "name": "traverse",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "typing.Callable[, ]",
                    "list[]",
                    "list[str]",
                    "str"
                ],
                "action_func": [
                    "typing.Callable[, ]",
                    "list[]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "BinaryTree.returnAsArr": {
            "name": "returnAsArr",
            "location": 55,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ]
            }
        },
        "BinaryTree.find_max": {
            "name": "find_max",
            "location": 68,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "tree": [
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BinarySearchTree.comparison_func_default": {
            "name": "comparison_func_default",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "val1": [
                    "int",
                    "str",
                    "collections.abc.AsyncIterator"
                ],
                "val2": [
                    "int",
                    "str",
                    "collections.abc.AsyncIterator"
                ],
                "CS": [
                    "int",
                    "collections.abc.AsyncGenerator",
                    "collections.abc.Coroutine"
                ]
            }
        },
        "BinarySearchTree.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comparison_func": [
                    "None",
                    "float",
                    "list[int]"
                ]
            }
        },
        "BinarySearchTree.add": {
            "name": "add",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "int",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "BinarySearchTree.contains": {
            "name": "contains",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "target_value": [
                    "BaseException",
                    "None",
                    "typing.Callable[str,object, None]",
                    "typing.Iterable[float]",
                    "bool"
                ]
            }
        },
        "BinaryTree.traverse._visit": {
            "name": "_visit",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": []
            }
        },
        "BinaryTree.returnAsArr.action_func": {
            "name": "action_func",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        },
        "BinaryTree.find_max.action_func": {
            "name": "action_func",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        },
        "BinarySearchTree.add._find_and_insert": {
            "name": "_find_and_insert",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "node": []
            }
        },
        "BinarySearchTree.contains._visit": {
            "name": "_visit",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": []
            }
        }
    }
}
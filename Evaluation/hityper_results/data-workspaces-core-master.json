{
    "data-workspaces-core-master/setup.py": {},
    "data-workspaces-core-master/dataworkspaces/api.py": {
        "get_version": {
            "name": "get_version",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "get_api_version": {
            "name": "get_api_version",
            "location": 30,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "get_resource_info": {
            "name": "get_resource_info",
            "location": 48,
            "return": [
                "list[ResourceInfo]"
            ],
            "arguments": {
                "workspace_uri_or_path": [
                    "None",
                    "bool",
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "get_local_path_for_resource": {
            "name": "get_local_path_for_resource",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "list[str]",
                    "int",
                    "tuple[str]"
                ],
                "workspace_uri_or_path": [
                    "None",
                    "bool",
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "get_filesystem_for_resource": {
            "name": "get_filesystem_for_resource",
            "location": 101,
            "return": [
                "ResourceFileSystem",
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "workspace_uri_or_path": [
                    "None",
                    "bool",
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "take_snapshot": {
            "name": "take_snapshot",
            "location": 129,
            "return": [],
            "arguments": {
                "workspace_uri_or_path": [
                    "None",
                    "bool",
                    "str"
                ],
                "tag": [
                    "None",
                    "str",
                    "bool"
                ],
                "message": [
                    "typing.Text"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "get_snapshot_history": {
            "name": "get_snapshot_history",
            "location": 143,
            "return": [
                "list[SnapshotInfo]"
            ],
            "arguments": {
                "workspace_uri_or_path": [
                    "None",
                    "bool",
                    "str"
                ],
                "reverse": [
                    "bool"
                ],
                "max_count": [
                    "None",
                    "bool",
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "restore": {
            "name": "restore",
            "location": 175,
            "return": [],
            "arguments": {
                "tag_or_hash": [
                    "list[str]",
                    "None",
                    "str",
                    "int"
                ],
                "workspace_uri_or_path": [
                    "None",
                    "bool",
                    "str",
                    "dict[str, str]"
                ],
                "only": [
                    "None",
                    "list[str]",
                    "str",
                    "int"
                ],
                "leave": [
                    "None",
                    "list[str]",
                    "str",
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "make_lineage_table": {
            "name": "make_lineage_table",
            "location": 196,
            "return": [],
            "arguments": {
                "workspace_uri_or_path": [
                    "None",
                    "bool",
                    "str"
                ],
                "tag_or_hash": [
                    "None",
                    "str",
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "make_lineage_graph": {
            "name": "make_lineage_graph",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file": [
                    "int",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "workspace_uri_or_path": [
                    "None",
                    "bool",
                    "str"
                ],
                "resource_name": [
                    "None",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "tag_or_hash": [
                    "None",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "get_results": {
            "name": "get_results",
            "location": 240,
            "return": [],
            "arguments": {
                "workspace_uri_or_path": [
                    "None",
                    "str",
                    "bool"
                ],
                "tag_or_hash": [
                    "None",
                    "str"
                ],
                "resource_name": [
                    "None",
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "ResourceFileSystem.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "float"
                ]
            }
        },
        "ResourceFileSystem.open": {
            "name": "open",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str",
                    "None"
                ],
                "mode": [
                    "str",
                    "None"
                ]
            }
        },
        "ResourceFileSystem.ls": {
            "name": "ls",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str"
                ]
            }
        },
        "ResourceFileSystem.exists": {
            "name": "exists",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str"
                ]
            }
        },
        "ResourceFileSystem.isfile": {
            "name": "isfile",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "rel_path": [
                    "bool",
                    "str"
                ]
            }
        },
        "ResourceFileSystem.isdir": {
            "name": "isdir",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/dws.py": {
        "is_verbose_mode": {
            "name": "is_verbose_mode",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "cli": {
            "name": "cli",
            "location": 156,
            "return": [],
            "arguments": {
                "ctx": [],
                "batch": [],
                "verbose": []
            }
        },
        "init": {
            "name": "init",
            "location": 281,
            "return": [],
            "arguments": {
                "ctx": [],
                "hostname": [],
                "name": [],
                "create_resources": [],
                "scratch_directory": [],
                "git_fat_remote": [],
                "git_fat_user": [],
                "git_fat_port": [],
                "git_fat_attributes": [],
                "git_lfs_attributes": []
            }
        },
        "add": {
            "name": "add",
            "location": 335,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": []
            }
        },
        "local_files": {
            "name": "local_files",
            "location": 378,
            "return": [],
            "arguments": {
                "ctx": [],
                "role": [],
                "name": [],
                "compute_hash": [],
                "export": [],
                "imported": [],
                "path": []
            }
        },
        "rclone": {
            "name": "rclone",
            "location": 462,
            "return": [],
            "arguments": {
                "ctx": [],
                "role": [],
                "name": [],
                "config": [],
                "compute_hash": [],
                "export": [],
                "imported": [],
                "master": [],
                "sync_mode": [],
                "size_only": [],
                "remote": [],
                "local_path": []
            }
        },
        "git": {
            "name": "git",
            "location": 562,
            "return": [],
            "arguments": {
                "ctx": [],
                "role": [],
                "name": [],
                "branch": [],
                "read_only": [],
                "export": [],
                "imported": [],
                "path": []
            }
        },
        "api_resource": {
            "name": "api_resource",
            "location": 609,
            "return": [],
            "arguments": {
                "ctx": [],
                "role": [],
                "name": []
            }
        },
        "s3": {
            "name": "s3",
            "location": 635,
            "return": [],
            "arguments": {
                "ctx": [],
                "role": [],
                "name": [],
                "bucket_name": []
            }
        },
        "snapshot": {
            "name": "snapshot",
            "location": 658,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": [],
                "message": [],
                "tag": []
            }
        },
        "delete_snapshot": {
            "name": "delete_snapshot",
            "location": 685,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": [],
                "no_include_resources": [],
                "tag_or_hash": []
            }
        },
        "restore": {
            "name": "restore",
            "location": 730,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": [],
                "only": [],
                "leave": [],
                "strict": [],
                "tag_or_hash": []
            }
        },
        "publish": {
            "name": "publish",
            "location": 773,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": [],
                "skip": [],
                "remote_repository": []
            }
        },
        "push": {
            "name": "push",
            "location": 816,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": [],
                "only": [],
                "skip": [],
                "only_workspace": []
            }
        },
        "pull": {
            "name": "pull",
            "location": 868,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": [],
                "only": [],
                "skip": [],
                "only_workspace": []
            }
        },
        "clone": {
            "name": "clone",
            "location": 909,
            "return": [],
            "arguments": {
                "ctx": [],
                "hostname": [],
                "repository": [],
                "directory": []
            }
        },
        "report": {
            "name": "report",
            "location": 933,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": []
            }
        },
        "report_status": {
            "name": "report_status",
            "location": 952,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "report_history": {
            "name": "report_history",
            "location": 970,
            "return": [],
            "arguments": {
                "ctx": [],
                "limit": []
            }
        },
        "report_lineage": {
            "name": "report_lineage",
            "location": 988,
            "return": [],
            "arguments": {
                "ctx": [],
                "snapshot": []
            }
        },
        "report_results": {
            "name": "report_results",
            "location": 1013,
            "return": [],
            "arguments": {
                "ctx": [],
                "snapshot": [],
                "resource": []
            }
        },
        "status": {
            "name": "status",
            "location": 1033,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": [],
                "history": [],
                "limit": []
            }
        },
        "version": {
            "name": "version",
            "location": 1051,
            "return": [],
            "arguments": {}
        },
        "diff": {
            "name": "diff",
            "location": 1091,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": [],
                "snapshot_or_tag1": [],
                "snapshot_or_tag2": []
            }
        },
        "lineage": {
            "name": "lineage",
            "location": 1124,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": []
            }
        },
        "graph": {
            "name": "graph",
            "location": 1174,
            "return": [],
            "arguments": {
                "ctx": [],
                "resource": [],
                "snapshot": [],
                "format": [],
                "width": [],
                "height": [],
                "output_file": []
            }
        },
        "deploy": {
            "name": "deploy",
            "location": 1196,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": []
            }
        },
        "deploy_build": {
            "name": "deploy_build",
            "location": 1239,
            "return": [],
            "arguments": {
                "ctx": [],
                "image_name": [],
                "force_rebuild": [],
                "git_user_email": [],
                "git_user_name": []
            }
        },
        "deploy_run": {
            "name": "deploy_run",
            "location": 1270,
            "return": [],
            "arguments": {
                "ctx": [],
                "image_name": [],
                "no_mount_ssh_keys": []
            }
        },
        "config": {
            "name": "config",
            "location": 1292,
            "return": [],
            "arguments": {
                "ctx": [],
                "workspace_dir": [],
                "resource": [],
                "param_name": [],
                "param_value": []
            }
        },
        "WorkspaceDirParamType.convert": {
            "name": "convert",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "DirectoryParamType.convert": {
            "name": "convert",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "RoleParamType.convert": {
            "name": "convert",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "DataRoleParamType.convert": {
            "name": "convert",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "HostParamType.convert": {
            "name": "convert",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "SnapshotParamType.convert": {
            "name": "convert",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        },
        "ResourceParamType.convert": {
            "name": "convert",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/errors.py": {},
    "data-workspaces-core-master/dataworkspaces/lineage.py": {
        "add_lineage_parameters_to_arg_parser": {
            "name": "add_lineage_parameters_to_arg_parser",
            "location": 656,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "bool"
                ],
                "params": [
                    "set[str]"
                ]
            }
        },
        "get_lineage_parameter_values": {
            "name": "get_lineage_parameter_values",
            "location": 663,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "params": [
                    "dict[, ]"
                ],
                "parsed_args": [
                    "dict[, ]",
                    "typing.MutableMapping"
                ]
            }
        },
        "Lineage.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step_name": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "start_time": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "parameters": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "inputs": [
                    "list[typing.Union[str,dataworkspaces.utils.lineage_utils.ResourceRef]]",
                    "str"
                ],
                "code": [
                    "list[typing.Union[str,dataworkspaces.utils.lineage_utils.ResourceRef]]",
                    "str"
                ],
                "workspace": [],
                "command_line": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "current_directory": [
                    "None",
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Lineage.add_input_path": {
            "name": "add_input_path",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Lineage.add_input_ref": {
            "name": "add_input_ref",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "Lineage.add_output_path": {
            "name": "add_output_path",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[]"
                ]
            }
        },
        "Lineage.add_output_ref": {
            "name": "add_output_ref",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "dict[, ]",
                    "typing.Mapping",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Lineage.add_param": {
            "name": "add_param",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Lineage.abort": {
            "name": "abort",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lineage._set_execution_time": {
            "name": "_set_execution_time",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lineage.complete": {
            "name": "complete",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lineage.__exit__": {
            "name": "__exit__",
            "location": 295,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "str",
                    "typing.Type"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        },
        "ResultsLineage.__init__": {
            "name": "__init__",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step_name": [
                    "list[typing.Union[str,dataworkspaces.utils.lineage_utils.ResourceRef]]",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "start_time": [
                    "list[typing.Union[str,dataworkspaces.utils.lineage_utils.ResourceRef]]",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "parameters": [
                    "list[typing.Union[str,dataworkspaces.utils.lineage_utils.ResourceRef]]",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "inputs": [
                    "list[typing.Union[str,dataworkspaces.utils.lineage_utils.ResourceRef]]",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "code": [
                    "list[typing.Union[str,dataworkspaces.utils.lineage_utils.ResourceRef]]",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "results_dir_or_ref": [
                    "str",
                    "bool",
                    "typing.TextIO",
                    "None",
                    "bytes"
                ],
                "workspace": [
                    "list[typing.Union[str,dataworkspaces.utils.lineage_utils.ResourceRef]]",
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "run_description": [
                    "None",
                    "str"
                ],
                "command_line": [
                    "None",
                    "list[typing.Union[str,dataworkspaces.utils.lineage_utils.ResourceRef]]",
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "current_directory": [
                    "None",
                    "list[typing.Union[str,dataworkspaces.utils.lineage_utils.ResourceRef]]",
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "ResultsLineage.write_results": {
            "name": "write_results",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "int",
                    "str"
                ]
            }
        },
        "LineageBuilder.__init__": {
            "name": "__init__",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineageBuilder.as_script_step": {
            "name": "as_script_step",
            "location": 452,
            "return": [
                "LineageBuilder"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineageBuilder.with_step_name": {
            "name": "with_step_name",
            "location": 460,
            "return": [
                "LineageBuilder"
            ],
            "arguments": {
                "self": [],
                "step_name": [
                    "str",
                    "None"
                ]
            }
        },
        "LineageBuilder.with_parameters": {
            "name": "with_parameters",
            "location": 465,
            "return": [
                "LineageBuilder"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "LineageBuilder.with_input_path": {
            "name": "with_input_path",
            "location": 470,
            "return": [
                "LineageBuilder"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[]"
                ]
            }
        },
        "LineageBuilder.with_input_paths": {
            "name": "with_input_paths",
            "location": 478,
            "return": [
                "LineageBuilder"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "str",
                    "list[int]",
                    "int",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "LineageBuilder.with_input_ref": {
            "name": "with_input_ref",
            "location": 486,
            "return": [
                "LineageBuilder"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "int",
                    "list[]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "LineageBuilder.with_no_inputs": {
            "name": "with_no_inputs",
            "location": 494,
            "return": [
                "LineageBuilder"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineageBuilder.with_code_path": {
            "name": "with_code_path",
            "location": 499,
            "return": [
                "LineageBuilder"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Sequence[str]",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "LineageBuilder.with_code_ref": {
            "name": "with_code_ref",
            "location": 503,
            "return": [
                "LineageBuilder"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "list[str]",
                    "typing.Callable[[], T]",
                    "int"
                ]
            }
        },
        "LineageBuilder.with_workspace_directory": {
            "name": "with_workspace_directory",
            "location": 507,
            "return": [
                "LineageBuilder"
            ],
            "arguments": {
                "self": [],
                "workspace_dir": [
                    "str"
                ]
            }
        },
        "LineageBuilder.as_results_step": {
            "name": "as_results_step",
            "location": 512,
            "return": [
                "LineageBuilder"
            ],
            "arguments": {
                "self": [],
                "results_dir": [
                    "str",
                    "None",
                    "typing.Sequence[str]"
                ],
                "run_description": [
                    "None",
                    "str"
                ]
            }
        },
        "LineageBuilder.eval": {
            "name": "eval",
            "location": 520,
            "return": [
                "ResultsLineage",
                "Lineage"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineageParameter.__init__": {
            "name": "__init__",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "default": [
                    "bool",
                    "str"
                ]
            }
        },
        "LineageParameter.get_value": {
            "name": "get_value",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parsed_args": [
                    "list[str]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "LineageParameter.add_to_arg_parser": {
            "name": "add_to_arg_parser",
            "location": 589,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_parser": [
                    "typing.Callable[str, T]",
                    "bool",
                    "typing.Sequence[int]",
                    "str"
                ]
            }
        },
        "CmdLineParameter.__init__": {
            "name": "__init__",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "default": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "type": [
                    "list[str]",
                    "None",
                    "int"
                ],
                "help": [
                    "list[str]",
                    "None",
                    "int"
                ]
            }
        },
        "CmdLineParameter.get_arg_name": {
            "name": "get_arg_name",
            "location": 599,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CmdLineParameter.add_to_arg_parser": {
            "name": "add_to_arg_parser",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_parser": [
                    "typing.Callable[dict[str, typing.Union[Any],Callable[...,typing.Any]], typing.Iterable[bytes]]",
                    "bool"
                ]
            }
        },
        "CmdLineParameter.get_value": {
            "name": "get_value",
            "location": 607,
            "return": [],
            "arguments": {
                "self": [],
                "parsed_args": [
                    "str",
                    "list[]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "BooleanParameter.__init__": {
            "name": "__init__",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ],
                "default": [
                    "str",
                    "None"
                ],
                "help": [
                    "str",
                    "None"
                ]
            }
        },
        "BooleanParameter.get_arg_name": {
            "name": "get_arg_name",
            "location": 619,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BooleanParameter.add_to_arg_parser": {
            "name": "add_to_arg_parser",
            "location": 625,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_parser": []
            }
        },
        "ChoiceParameter.__init__": {
            "name": "__init__",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Type",
                    "bool"
                ],
                "choices": [
                    "bool",
                    "typing.Iterable[typing.Any]",
                    "typing.Iterable[str]"
                ],
                "default": [
                    "str",
                    "typing.Iterable[str]",
                    "float",
                    "None"
                ],
                "type": [
                    "str",
                    "typing.Type",
                    "bool"
                ],
                "help": [
                    "str",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "ChoiceParameter.add_to_arg_parser": {
            "name": "add_to_arg_parser",
            "location": 641,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_parser": []
            }
        },
        "ConstantParameter.get_value": {
            "name": "get_value",
            "location": 652,
            "return": [],
            "arguments": {
                "self": [],
                "parsed_args": [
                    "list[str]",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/workspace.py": {
        "_get_factory": {
            "name": "_get_factory",
            "location": 536,
            "return": [],
            "arguments": {
                "backend_mod_name": [
                    "str"
                ]
            }
        },
        "load_workspace": {
            "name": "load_workspace",
            "location": 554,
            "return": [],
            "arguments": {
                "uri": [
                    "str",
                    "bool"
                ],
                "batch": [
                    "bool",
                    "str",
                    "list[typing.Any]",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "list[typing.Any]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_find_containing_workspace": {
            "name": "_find_containing_workspace",
            "location": 569,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "start_dir": [
                    "None",
                    "str"
                ]
            }
        },
        "find_and_load_workspace": {
            "name": "find_and_load_workspace",
            "location": 588,
            "return": [],
            "arguments": {
                "batch": [
                    "bool",
                    "str",
                    "None",
                    "list[]"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "None",
                    "list[]"
                ],
                "uri_or_local_path": [
                    "str",
                    "None"
                ]
            }
        },
        "init_workspace": {
            "name": "init_workspace",
            "location": 619,
            "return": [],
            "arguments": {
                "backend_name": [
                    "str",
                    "bool",
                    "list[]",
                    "dict[, ]"
                ],
                "workspace_name": [
                    "str",
                    "bool",
                    "list[]",
                    "dict[, ]"
                ],
                "hostname": [
                    "str",
                    "bool",
                    "list[]",
                    "dict[, ]"
                ],
                "batch": [
                    "str",
                    "bool",
                    "list[]",
                    "dict[, ]"
                ],
                "verbose": [
                    "str",
                    "bool",
                    "list[]",
                    "dict[, ]"
                ],
                "scratch_dir": [
                    "str",
                    "bool",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "clone_workspace": {
            "name": "clone_workspace",
            "location": 654,
            "return": [],
            "arguments": {
                "backend_name": [
                    "str",
                    "None",
                    "float",
                    "typing.Iterable[str]"
                ],
                "hostname": [
                    "str",
                    "None",
                    "float",
                    "typing.Iterable[str]"
                ],
                "batch": [
                    "str",
                    "None",
                    "float",
                    "typing.Iterable[str]"
                ],
                "verbose": [
                    "str",
                    "None",
                    "float",
                    "typing.Iterable[str]"
                ]
            }
        },
        "_get_resource_factory_by_resource_type": {
            "name": "_get_resource_factory_by_resource_type",
            "location": 939,
            "return": [
                "list[]",
                "dict[, ]"
            ],
            "arguments": {
                "resource_type": [
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes",
                    "None",
                    "list[str]"
                ]
            }
        },
        "Workspace.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.Sequence[typing.Any]"
                ],
                "dws_version": [
                    "str",
                    "int",
                    "None",
                    "typing.Sequence[]",
                    "typing.Callable[, ]"
                ],
                "batch": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "Workspace.get_instance": {
            "name": "get_instance",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace._get_global_params": {
            "name": "_get_global_params",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_global_param": {
            "name": "get_global_param",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "param_name": []
            }
        },
        "Workspace._get_local_params": {
            "name": "_get_local_params",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_local_param": {
            "name": "get_local_param",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "param_name": [
                    "int"
                ]
            }
        },
        "Workspace._set_global_param": {
            "name": "_set_global_param",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Workspace.set_global_param": {
            "name": "set_global_param",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "dict[str, L]",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "Workspace._set_local_param": {
            "name": "_set_local_param",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Workspace.set_local_param": {
            "name": "set_local_param",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "Workspace.get_scratch_directory": {
            "name": "get_scratch_directory",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_resource_names": {
            "name": "get_resource_names",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace._get_resource_params": {
            "name": "_get_resource_params",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Workspace.get_resource_role": {
            "name": "get_resource_role",
            "location": 219,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ]
            }
        },
        "Workspace.get_resource_type": {
            "name": "get_resource_type",
            "location": 225,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ]
            }
        },
        "Workspace._get_resource_local_params": {
            "name": "_get_resource_local_params",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Workspace._add_params_for_resource": {
            "name": "_add_params_for_resource",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ],
                "params": [
                    "str"
                ]
            }
        },
        "Workspace._add_local_params_for_resource": {
            "name": "_add_local_params_for_resource",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "list[str]"
                ],
                "local_params": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Workspace._set_global_param_for_resource": {
            "name": "_set_global_param_for_resource",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "Workspace._set_local_param_for_resource": {
            "name": "_set_local_param_for_resource",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "Workspace.get_resource": {
            "name": "get_resource",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Workspace.get_resources": {
            "name": "get_resources",
            "location": 277,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.add_resource": {
            "name": "add_resource",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ],
                "resource_type": [
                    "str",
                    "bool",
                    "list[str]",
                    "None",
                    "typing.Type"
                ],
                "role": [
                    "str",
                    "None"
                ]
            }
        },
        "Workspace.clone_resource": {
            "name": "clone_resource",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Workspace.get_names_of_resources_with_local_state": {
            "name": "get_names_of_resources_with_local_state",
            "location": 314,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_names_for_resources_that_need_to_be_cloned": {
            "name": "get_names_for_resources_that_need_to_be_cloned",
            "location": 324,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.validate_resource_name": {
            "name": "validate_resource_name",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "int"
                ],
                "subpath": [
                    "None",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "expected_role": [
                    "None",
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Workspace.validate_local_path_for_resource": {
            "name": "validate_local_path_for_resource",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "proposed_resource_name": [
                    "str"
                ],
                "proposed_local_path": [
                    "str"
                ]
            }
        },
        "Workspace.map_local_path_to_resource": {
            "name": "map_local_path_to_resource",
            "location": 392,
            "return": [
                "ResourceRef"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "expecting_a_code_resource": [
                    "bool"
                ]
            }
        },
        "Workspace.suggest_resource_name": {
            "name": "suggest_resource_name",
            "location": 425,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resource_type": [
                    "str",
                    "typing.Type"
                ],
                "role": [
                    "str"
                ]
            }
        },
        "Workspace.get_workspace_local_path_if_any": {
            "name": "get_workspace_local_path_if_any",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace._get_local_scratch_space_for_resource": {
            "name": "_get_local_scratch_space_for_resource",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "bool",
                    "str",
                    "typing.Iterable[str]",
                    "None"
                ],
                "create_if_not_present": [
                    "bool"
                ]
            }
        },
        "Workspace.save": {
            "name": "save",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        },
        "Workspace.as_snapshot_ws": {
            "name": "as_snapshot_ws",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.as_lineage_ws": {
            "name": "as_lineage_ws",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkspaceFactory.load_workspace": {
            "name": "load_workspace",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "batch": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.IO"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.IO"
                ],
                "parsed_uri": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.IO"
                ]
            }
        },
        "WorkspaceFactory.init_workspace": {
            "name": "init_workspace",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace_name": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "dws_version": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "global_params": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "local_params": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "batch": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        },
        "WorkspaceFactory.clone_workspace": {
            "name": "clone_workspace",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "local_params": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "batch": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "verbose": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Resource.__init__": {
            "name": "__init__",
            "location": 694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_type": [
                    "str",
                    "typing.Any"
                ],
                "name": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "role": [
                    "str"
                ],
                "workspace": [
                    "str"
                ]
            }
        },
        "Resource.has_results_role": {
            "name": "has_results_role",
            "location": 706,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.get_params": {
            "name": "get_params",
            "location": 709,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Resource.validate_subpath_exists": {
            "name": "validate_subpath_exists",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Resource.is_exported": {
            "name": "is_exported",
            "location": 721,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.is_imported": {
            "name": "is_imported",
            "location": 727,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileResourceMixin.results_move_current_files": {
            "name": "results_move_current_files",
            "location": 743,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_dest_root": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ],
                "exclude_files": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ],
                "exclude_dirs_re": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ]
            }
        },
        "FileResourceMixin.results_copy_current_files": {
            "name": "results_copy_current_files",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_dest_root": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ],
                "exclude_files": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ],
                "exclude_dirs_re": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ]
            }
        },
        "FileResourceMixin.add_results_file": {
            "name": "add_results_file",
            "location": 770,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[int,str]]]",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ],
                "rel_dest_path": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[int,str]]]",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ]
            }
        },
        "FileResourceMixin.upload_file": {
            "name": "upload_file",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src_local_path": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "rel_dest_path": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "FileResourceMixin.read_results_file": {
            "name": "read_results_file",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "str",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "FileResourceMixin.does_subpath_exist": {
            "name": "does_subpath_exist",
            "location": 798,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "must_be_file": [
                    "bool"
                ],
                "must_be_directory": [
                    "bool"
                ]
            }
        },
        "FileResourceMixin.delete_file": {
            "name": "delete_file",
            "location": 810,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileResourceMixin.open": {
            "name": "open",
            "location": 817,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "bool",
                    "str",
                    "list[]",
                    "None"
                ],
                "mode": [
                    "bool",
                    "str",
                    "list[]",
                    "None"
                ]
            }
        },
        "FileResourceMixin.ls": {
            "name": "ls",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "bool",
                    "str",
                    "tuple[typing.Union[str,...]]",
                    "None"
                ]
            }
        },
        "LocalStateResourceMixin.get_local_params": {
            "name": "get_local_params",
            "location": 833,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalStateResourceMixin.get_local_path_if_any": {
            "name": "get_local_path_if_any",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStateResourceMixin.validate_subpath_exists": {
            "name": "validate_subpath_exists",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "LocalStateResourceMixin.pull_precheck": {
            "name": "pull_precheck",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStateResourceMixin.pull": {
            "name": "pull",
            "location": 874,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStateResourceMixin.push_precheck": {
            "name": "push_precheck",
            "location": 881,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalStateResourceMixin.push": {
            "name": "push",
            "location": 888,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceFactory.from_command_line": {
            "name": "from_command_line",
            "location": 900,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str",
                    "list[str]",
                    "bool",
                    "tuple[typing.Union[str,str]]"
                ],
                "name": [
                    "str",
                    "list[str]",
                    "bool",
                    "tuple[typing.Union[str,str]]"
                ],
                "workspace": [
                    "str",
                    "list[str]",
                    "bool",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "ResourceFactory.from_json": {
            "name": "from_json",
            "location": 908,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "bool",
                    "str"
                ],
                "local_params": [
                    "bool",
                    "str"
                ],
                "workspace": [
                    "bool",
                    "str"
                ]
            }
        },
        "ResourceFactory.has_local_state": {
            "name": "has_local_state",
            "location": 913,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceFactory.clone": {
            "name": "clone",
            "location": 920,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "workspace": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "ResourceFactory.suggest_name": {
            "name": "suggest_name",
            "location": 930,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "typing.Iterable[tuple[typing.Union[int,typing.Any]]]",
                    "str",
                    "bool"
                ],
                "role": [
                    "typing.Iterable[tuple[typing.Union[int,typing.Any]]]",
                    "str",
                    "bool"
                ]
            }
        },
        "SyncedWorkspaceMixin._pull_resources_precheck": {
            "name": "_pull_resources_precheck",
            "location": 961,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_list": [
                    "list[]",
                    "list[list[str]]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "SyncedWorkspaceMixin.pull_workspace": {
            "name": "pull_workspace",
            "location": 968,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncedWorkspaceMixin.pull_resources": {
            "name": "pull_resources",
            "location": 974,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_list": [
                    "tuple[typing.Union[str,bool]]"
                ]
            }
        },
        "SyncedWorkspaceMixin._push_precheck": {
            "name": "_push_precheck",
            "location": 1006,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_list": [
                    "list[tuple[typing.Union[str,str]]]",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "SyncedWorkspaceMixin.push": {
            "name": "push",
            "location": 1012,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_list": [
                    "list[int]",
                    "list[tuple[typing.Union[bool,str]]]",
                    "dict[, ]"
                ]
            }
        },
        "SyncedWorkspaceMixin.publish": {
            "name": "publish",
            "location": 1028,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CentralWorkspaceMixin._pull_resources_precheck": {
            "name": "_pull_resources_precheck",
            "location": 1041,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_list": [
                    "list[]",
                    "list[list[str]]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "CentralWorkspaceMixin.pull_resources": {
            "name": "pull_resources",
            "location": 1047,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_list": [
                    "tuple[typing.Union[str,bool]]"
                ]
            }
        },
        "CentralWorkspaceMixin.get_resources_that_need_to_be_cloned": {
            "name": "get_resources_that_need_to_be_cloned",
            "location": 1059,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CentralWorkspaceMixin._push_resources_precheck": {
            "name": "_push_resources_precheck",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_list": [
                    "list[tuple[typing.Union[str,str]]]",
                    "list[]",
                    "list[str]"
                ]
            }
        },
        "CentralWorkspaceMixin.push_resources": {
            "name": "push_resources",
            "location": 1071,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_list": [
                    "tuple[typing.Union[str,bool]]"
                ]
            }
        },
        "SnapshotMetadata.__init__": {
            "name": "__init__",
            "location": 1091,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashval": [
                    "str"
                ],
                "tags": [
                    "str",
                    "bool",
                    "None",
                    "typing.Callable[, ]",
                    "tuple[int]"
                ],
                "message": [
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "hostname": [
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "timestamp": [
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "relative_destination_path": [
                    "str",
                    "None",
                    "int",
                    "list[str]"
                ],
                "restore_hashes": [
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "metrics": [
                    "None",
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "updated_timestamp": [
                    "None",
                    "set[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "SnapshotMetadata.has_tag": {
            "name": "has_tag",
            "location": 1113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "SnapshotMetadata.matches_partial_hash": {
            "name": "matches_partial_hash",
            "location": 1116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "partial_hash": [
                    "str"
                ]
            }
        },
        "SnapshotMetadata.to_json": {
            "name": "to_json",
            "location": 1122,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotMetadata.from_json": {
            "name": "from_json",
            "location": 1138,
            "return": [
                "SnapshotMetadata"
            ],
            "arguments": {
                "data": []
            }
        },
        "SnapshotMetadata.__str__": {
            "name": "__str__",
            "location": 1151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SnapshotWorkspaceMixin.get_next_snapshot_number": {
            "name": "get_next_snapshot_number",
            "location": 1160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotWorkspaceMixin._snapshot_precheck": {
            "name": "_snapshot_precheck",
            "location": 1168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_resources": [
                    "str"
                ]
            }
        },
        "SnapshotWorkspaceMixin.save_snapshot_metadata_and_manifest": {
            "name": "save_snapshot_metadata_and_manifest",
            "location": 1180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "tuple[tuple[typing.Union[str,...]]]"
                ],
                "manifest": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        },
        "SnapshotWorkspaceMixin.snapshot": {
            "name": "snapshot",
            "location": 1188,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [
                    "None",
                    "str"
                ],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "SnapshotWorkspaceMixin._restore_precheck": {
            "name": "_restore_precheck",
            "location": 1313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restore_hashes": [
                    "str",
                    "int"
                ],
                "restore_resources": []
            }
        },
        "SnapshotWorkspaceMixin.restore": {
            "name": "restore",
            "location": 1331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot_hash": [
                    "int",
                    "typing.Callable[, ]",
                    "dict[str, float]"
                ],
                "restore_hashes": [
                    "int",
                    "float"
                ],
                "restore_resources": [
                    "str"
                ]
            }
        },
        "SnapshotWorkspaceMixin.get_snapshot_metadata": {
            "name": "get_snapshot_metadata",
            "location": 1358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_val": [
                    "str",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "SnapshotWorkspaceMixin.get_snapshot_by_tag": {
            "name": "get_snapshot_by_tag",
            "location": 1365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ]
            }
        },
        "SnapshotWorkspaceMixin.get_snapshot_by_partial_hash": {
            "name": "get_snapshot_by_partial_hash",
            "location": 1371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partial_hash": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "SnapshotWorkspaceMixin.get_snapshot_by_tag_or_hash": {
            "name": "get_snapshot_by_tag_or_hash",
            "location": 1378,
            "return": [],
            "arguments": {
                "self": [],
                "tag_or_hash": [
                    "str",
                    "bytes",
                    "None",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "SnapshotWorkspaceMixin._get_snapshot_manifest_as_bytes": {
            "name": "_get_snapshot_manifest_as_bytes",
            "location": 1391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_val": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "collections.abc.Awaitable[]",
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "SnapshotWorkspaceMixin.get_snapshot_manifest": {
            "name": "get_snapshot_manifest",
            "location": 1400,
            "return": [],
            "arguments": {
                "self": [],
                "hash_val": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "SnapshotWorkspaceMixin.list_snapshots": {
            "name": "list_snapshots",
            "location": 1409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reverse": [
                    "bool"
                ],
                "max_count": [
                    "None",
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "SnapshotWorkspaceMixin.get_most_recent_snapshot": {
            "name": "get_most_recent_snapshot",
            "location": 1418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotWorkspaceMixin.remove_tag_from_snapshot": {
            "name": "remove_tag_from_snapshot",
            "location": 1431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_val": [
                    "str",
                    "list[]",
                    "set[str]"
                ],
                "tag": [
                    "str",
                    "list[]",
                    "set[str]"
                ]
            }
        },
        "SnapshotWorkspaceMixin._delete_snapshot_metadata_and_manifest": {
            "name": "_delete_snapshot_metadata_and_manifest",
            "location": 1438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_val": [
                    "str",
                    "typing.Callable[, ]",
                    "float",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "SnapshotWorkspaceMixin.delete_snapshot": {
            "name": "delete_snapshot",
            "location": 1443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_val": [
                    "str"
                ],
                "include_resources": [
                    "bool"
                ]
            }
        },
        "SnapshotWorkspaceMixin.supports_lineage": {
            "name": "supports_lineage",
            "location": 1469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotWorkspaceMixin.get_lineage_store": {
            "name": "get_lineage_store",
            "location": 1476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotWorkspaceMixin.write_result_lineage_for_snapshot": {
            "name": "write_result_lineage_for_snapshot",
            "location": 1483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_resources": [
                    "str"
                ],
                "rel_dest_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "SnapshotWorkspaceMixin.write_export_lineage_for_snapshot": {
            "name": "write_export_lineage_for_snapshot",
            "location": 1510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_resources": []
            }
        },
        "SnapshotResourceMixin.snapshot_precheck": {
            "name": "snapshot_precheck",
            "location": 1544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotResourceMixin.snapshot": {
            "name": "snapshot",
            "location": 1551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotResourceMixin.restore_precheck": {
            "name": "restore_precheck",
            "location": 1563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restore_hashval": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "SnapshotResourceMixin.restore": {
            "name": "restore",
            "location": 1571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restore_hashval": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "SnapshotResourceMixin.delete_snapshot": {
            "name": "delete_snapshot",
            "location": 1575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace_snapshot_hash": [
                    "str"
                ],
                "resource_restore_hash": [
                    "str"
                ],
                "relative_path": [
                    "str"
                ]
            }
        },
        "SnapshotResourceMixin.copy_imported_lineage": {
            "name": "copy_imported_lineage",
            "location": 1583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lineage_store": [
                    "str",
                    "typing.Type",
                    "typing.Sequence[typing.Sequence[T]]"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/__init__.py": {},
    "data-workspaces-core-master/dataworkspaces/__main__.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "data-workspaces-core-master/dataworkspaces/backends/git.py": {
        "GitFileLineageStore.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "str",
                    "None",
                    "typing.Iterable[str]"
                ]
            }
        },
        "GitFileLineageStore._add_to_git": {
            "name": "_add_to_git",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "GitFileLineageStore._save_rfile_to_snapshot": {
            "name": "_save_rfile_to_snapshot",
            "location": 113,
            "return": [
                "dict[str, str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "lineage_map": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "snapshot_hash": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "GitFileLineageStore._copy_rfile_to_snapshot": {
            "name": "_copy_rfile_to_snapshot",
            "location": 123,
            "return": [
                "tuple[typing.Union[typing.Literal,tuple[typing.Union[str,str,str,str,str,str,str,str,str]],dict[, ],dict[str, list[str]],typing.OrderedDict]]"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "typing.Mapping"
                ],
                "snapshot_hash": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "GitFileLineageStore._write_placeholder_to_snapshot": {
            "name": "_write_placeholder_to_snapshot",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "snapshot_hash": [
                    "dict[, ]",
                    "str",
                    "typing.Type"
                ],
                "filename": [
                    "dict[, ]",
                    "str",
                    "typing.Type"
                ],
                "content": [
                    "dict[, ]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "GitFileLineageStore.delete_snapshot_lineage": {
            "name": "delete_snapshot_lineage",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "snapshot_hash": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "Workspace.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace_dir": [
                    "str",
                    "bool"
                ],
                "batch": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "Workspace.get_instance": {
            "name": "get_instance",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace.supports_lineage": {
            "name": "supports_lineage",
            "location": 171,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_lineage_store": {
            "name": "get_lineage_store",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_scratch_directory": {
            "name": "get_scratch_directory",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace._load_json_file": {
            "name": "_load_json_file",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "relative_path": [
                    "str"
                ]
            }
        },
        "Workspace._save_json_to_file": {
            "name": "_save_json_to_file",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, dict[str, str]]",
                    "dict[int, dict[int, typing.Any]]",
                    "list[]"
                ],
                "relative_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "Workspace._get_global_params": {
            "name": "_get_global_params",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace._get_local_params": {
            "name": "_get_local_params",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace._set_global_param": {
            "name": "_set_global_param",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": [
                    "str"
                ]
            }
        },
        "Workspace._set_local_param": {
            "name": "_set_local_param",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": [
                    "str"
                ]
            }
        },
        "Workspace.get_resource_names": {
            "name": "get_resource_names",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace._get_resource_params": {
            "name": "_get_resource_params",
            "location": 227,
            "return": [],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ]
            }
        },
        "Workspace._get_resource_local_params": {
            "name": "_get_resource_local_params",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ]
            }
        },
        "Workspace._add_params_for_resource": {
            "name": "_add_params_for_resource",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "tuple[str]"
                ],
                "params": [
                    "str",
                    "list[tuple[typing.Union[str,int]]]",
                    "list[]"
                ]
            }
        },
        "Workspace._add_local_params_for_resource": {
            "name": "_add_local_params_for_resource",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ],
                "local_params": [
                    "str"
                ]
            }
        },
        "Workspace._set_global_param_for_resource": {
            "name": "_set_global_param_for_resource",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "typing.Callable[str, str]",
                    "bool",
                    "dict[str, L]",
                    "typing.Type"
                ],
                "value": [
                    "str",
                    "typing.Callable[str, str]",
                    "bool",
                    "dict[str, L]",
                    "typing.Type"
                ]
            }
        },
        "Workspace._set_local_param_for_resource": {
            "name": "_set_local_param_for_resource",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "dict[str, str]"
                ],
                "name": [
                    "str",
                    "list[]"
                ],
                "value": [
                    "str",
                    "list[]"
                ]
            }
        },
        "Workspace.get_workspace_local_path_if_any": {
            "name": "get_workspace_local_path_if_any",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace._add_local_dir_to_gitignore_if_needed": {
            "name": "_add_local_dir_to_gitignore_if_needed",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": []
            }
        },
        "Workspace.add_resource": {
            "name": "add_resource",
            "location": 319,
            "return": [
                "str",
                "dict[str, str]",
                "dict[str, typing.Union[dict[, ],int]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "resource_type": [
                    "str",
                    "bool"
                ],
                "role": [
                    "str",
                    "bool"
                ]
            }
        },
        "Workspace.clone_resource": {
            "name": "clone_resource",
            "location": 326,
            "return": [
                "str",
                "None",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[float]",
                    "dict[, ]"
                ]
            }
        },
        "Workspace._get_local_scratch_space_for_resource": {
            "name": "_get_local_scratch_space_for_resource",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "None"
                ],
                "create_if_not_present": [
                    "bool"
                ]
            }
        },
        "Workspace.save": {
            "name": "save",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Workspace.pull_workspace": {
            "name": "pull_workspace",
            "location": 355,
            "return": [
                "Workspace"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace._push_precheck": {
            "name": "_push_precheck",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_list": [
                    "tuple[typing.Union[str,bool]]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Workspace.push": {
            "name": "push",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_list": [
                    "str",
                    "list[int]",
                    "list[tuple[typing.Union[bool,str]]]",
                    "typing.Type",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Workspace.publish": {
            "name": "publish",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_next_snapshot_number": {
            "name": "get_next_snapshot_number",
            "location": 409,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_snapshot_metadata": {
            "name": "get_snapshot_metadata",
            "location": 433,
            "return": [
                "dict[str, typing.Any]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "hash_val": [
                    "str"
                ]
            }
        },
        "Workspace.get_snapshot_by_tag": {
            "name": "get_snapshot_by_tag",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "Workspace.get_snapshot_by_partial_hash": {
            "name": "get_snapshot_by_partial_hash",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "partial_hash": [
                    "str"
                ]
            }
        },
        "Workspace._get_snapshot_manifest_as_bytes": {
            "name": "_get_snapshot_manifest_as_bytes",
            "location": 481,
            "return": [],
            "arguments": {
                "self": [],
                "hash_val": [
                    "str"
                ]
            }
        },
        "Workspace.list_snapshots": {
            "name": "list_snapshots",
            "location": 489,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "reverse": [
                    "bool"
                ],
                "max_count": [
                    "None",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Workspace._delete_snapshot_metadata_and_manifest": {
            "name": "_delete_snapshot_metadata_and_manifest",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_val": [
                    "str"
                ]
            }
        },
        "Workspace._snapshot_precheck": {
            "name": "_snapshot_precheck",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_resources": [
                    "int",
                    "float",
                    "str",
                    "None"
                ]
            }
        },
        "Workspace._restore_precheck": {
            "name": "_restore_precheck",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restore_hashes": [
                    "str",
                    "list[]",
                    "list[dict[, ]]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "restore_resources": [
                    "str",
                    "list[]",
                    "list[dict[, ]]",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Workspace.restore": {
            "name": "restore",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot_hash": [
                    "str",
                    "list[]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "restore_hashes": [
                    "str",
                    "list[]",
                    "int",
                    "typing.Callable[, ]"
                ],
                "restore_resources": [
                    "str",
                    "list[]",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Workspace.remove_tag_from_snapshot": {
            "name": "remove_tag_from_snapshot",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_val": [
                    "str"
                ],
                "tag": [
                    "str",
                    "list[str]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "Workspace.save_snapshot_metadata_and_manifest": {
            "name": "save_snapshot_metadata_and_manifest",
            "location": 565,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata": [],
                "manifest": [
                    "str",
                    "bytes",
                    "typing.IO"
                ]
            }
        },
        "Workspace.as_snapshot_ws": {
            "name": "as_snapshot_ws",
            "location": 581,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace.as_lineage_ws": {
            "name": "as_lineage_ws",
            "location": 588,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Workspace.get_dws_git_branch": {
            "name": "get_dws_git_branch",
            "location": 595,
            "return": [
                "bool",
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkspaceFactory.load_workspace": {
            "name": "load_workspace",
            "location": 612,
            "return": [
                "Workspace"
            ],
            "arguments": {
                "batch": [
                    "str"
                ],
                "verbose": [
                    "str"
                ],
                "parsed_uri": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "WorkspaceFactory.init_workspace": {
            "name": "init_workspace",
            "location": 627,
            "return": [],
            "arguments": {
                "workspace_name": [
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "Exception",
                    "float"
                ],
                "dws_version": [
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "Exception",
                    "float"
                ],
                "global_params": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "local_params": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "batch": [
                    "bool",
                    "str"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "float"
                ],
                "scratch_dir": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "workspace_dir": [
                    "str",
                    "None",
                    "float"
                ],
                "git_fat_remote": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "list[str]",
                    "typing.Any",
                    "dict[str, typing.Any]"
                ],
                "git_fat_user": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "git_fat_port": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "git_fat_attributes": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "git_lfs_attributes": [
                    "None",
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "WorkspaceFactory.clone_workspace": {
            "name": "clone_workspace",
            "location": 741,
            "return": [],
            "arguments": {
                "local_params": [
                    "typing.Callable[, ]",
                    "str",
                    "bool"
                ],
                "batch": [
                    "bool",
                    "str",
                    "None"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "Workspace.get_next_snapshot_number.process_dir": {
            "name": "process_dir",
            "location": 421,
            "return": [
                "int"
            ],
            "arguments": {
                "dirpath": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/backends/__init__.py": {},
    "data-workspaces-core-master/dataworkspaces/commands/add.py": {
        "add_command": {
            "name": "add_command",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "scheme": [
                    "str",
                    "float"
                ],
                "role": [
                    "str",
                    "float"
                ],
                "name": [
                    "str",
                    "list[\"Source\"]"
                ],
                "workspace": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/clone.py": {
        "clone_command": {
            "name": "clone_command",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "int"
                ],
                "hostname": [
                    "str",
                    "int"
                ],
                "batch": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/config.py": {
        "config_command": {
            "name": "config_command",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [],
                "param_name": [
                    "str",
                    "None",
                    "dict[, ]",
                    "int"
                ],
                "param_value": [
                    "str",
                    "None",
                    "dict[str, L]"
                ],
                "resource": [
                    "str",
                    "None",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "ParamConfigHandler.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "float"
                ],
                "defs": [
                    "int",
                    "float"
                ]
            }
        },
        "ParamConfigHandler.get_value": {
            "name": "get_value",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "ParamConfigHandler.is_default": {
            "name": "is_default",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "ParamConfigHandler.get_scope": {
            "name": "get_scope",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamConfigHandler.get_what_for": {
            "name": "get_what_for",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParamConfigHandler.set_value": {
            "name": "set_value",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "None"
                ],
                "value": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "GlobalWorkspaceHandler.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace": []
            }
        },
        "GlobalWorkspaceHandler.get_scope": {
            "name": "get_scope",
            "location": 67,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalWorkspaceHandler.set_value": {
            "name": "set_value",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "GlobalWorkspaceHandler.get_what_for": {
            "name": "get_what_for",
            "location": 73,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWorkspaceHandler.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace": []
            }
        },
        "LocalWorkspaceHandler.get_scope": {
            "name": "get_scope",
            "location": 82,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalWorkspaceHandler.set_value": {
            "name": "set_value",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "LocalWorkspaceHandler.get_what_for": {
            "name": "get_what_for",
            "location": 88,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalResourceHandler.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [],
                "workspace": [
                    "int",
                    "float"
                ]
            }
        },
        "GlobalResourceHandler.get_scope": {
            "name": "get_scope",
            "location": 98,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalResourceHandler.set_value": {
            "name": "set_value",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "float",
                    "None"
                ],
                "value": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "GlobalResourceHandler.get_what_for": {
            "name": "get_what_for",
            "location": 104,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalResourceHandler.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [],
                "workspace": [
                    "int",
                    "float"
                ]
            }
        },
        "LocalResourceHandler.get_scope": {
            "name": "get_scope",
            "location": 115,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalResourceHandler.set_value": {
            "name": "set_value",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "float",
                    "None"
                ],
                "value": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "LocalResourceHandler.get_what_for": {
            "name": "get_what_for",
            "location": 121,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/delete_snapshot.py": {
        "delete_snapshot_command": {
            "name": "delete_snapshot_command",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [],
                "tag_or_hash": [
                    "str"
                ],
                "no_include_resources": [
                    "bool"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/deploy.py": {
        "deploy_build_command": {
            "name": "deploy_build_command",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "list[str]",
                    "None",
                    "tuple[typing.Union[str,int]]",
                    "dict[str, typing.Any]"
                ],
                "image_name": [
                    "str",
                    "None",
                    "list[typing.Any]",
                    "dict[str, str]",
                    "bool",
                    "list[str]",
                    "typing.Any"
                ],
                "force_rebuild": [
                    "bool",
                    "list[typing.Any]",
                    "None"
                ],
                "git_user_email": [
                    "str",
                    "int",
                    "None",
                    "float"
                ],
                "git_user_name": [
                    "str",
                    "None"
                ]
            }
        },
        "deploy_run_command": {
            "name": "deploy_run_command",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "None",
                    "dict[, ]",
                    "list[str]",
                    "bool"
                ],
                "image_name": [
                    "str",
                    "None",
                    "list[typing.Any]",
                    "typing.Any",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "no_mount_ssh_keys": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[..., str]"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/diff.py": {
        "diff_command": {
            "name": "diff_command",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [],
                "snapshot_or_tag1": [
                    "str",
                    "typing.Callable[typing.Any, bool]",
                    "None",
                    "bytes"
                ],
                "snapshot_or_tag2": [
                    "str",
                    "typing.Callable[typing.Any, bool]",
                    "None",
                    "bytes"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/init.py": {
        "init_command": {
            "name": "init_command",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "hostname": [
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "create_resources": [],
                "scratch_dir": [
                    "None",
                    "str"
                ],
                "git_fat_remote": [
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "git_fat_user": [
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "git_fat_port": [
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "git_fat_attributes": [
                    "None",
                    "str",
                    "int",
                    "float"
                ],
                "git_lfs_attributes": [
                    "None",
                    "str",
                    "int",
                    "float"
                ],
                "batch": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/lineage.py": {
        "lineage_graph_command": {
            "name": "lineage_graph_command",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [],
                "output_file": [
                    "int",
                    "str",
                    "None",
                    "set[str]"
                ],
                "resource_name": [
                    "str",
                    "None",
                    "list[typing.Any]",
                    "bool",
                    "typing.Any"
                ],
                "snapshot": [
                    "str",
                    "None",
                    "bool",
                    "list[typing.Any]",
                    "list[str]"
                ],
                "format": [
                    "typing.Text"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/publish.py": {
        "publish_command": {
            "name": "publish_command",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [
                    "bytes",
                    "bytearray",
                    "str",
                    "int",
                    "None"
                ],
                "remote_repository": [
                    "str",
                    "float",
                    "typing.Generator[]",
                    "list[int]",
                    "None"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/pull.py": {
        "_pull_and_clone_resources": {
            "name": "_pull_and_clone_resources",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "workspace": [],
                "only": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[]"
                ],
                "skip": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[]"
                ]
            }
        },
        "pull_command": {
            "name": "pull_command",
            "location": 30,
            "return": [
                "int",
                "float",
                "dict[, ]",
                "dict[str, str]",
                "list[]"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "float"
                ],
                "only": [
                    "None",
                    "list[str]",
                    "str",
                    "bytes",
                    "bool",
                    "float"
                ],
                "skip": [
                    "None",
                    "list[str]",
                    "str",
                    "bytes",
                    "bool",
                    "float"
                ],
                "only_workspace": [
                    "bool"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/push.py": {
        "build_resource_list": {
            "name": "build_resource_list",
            "location": 16,
            "return": [
                "list[typing.Union[str,typing.Any]]",
                "list[]"
            ],
            "arguments": {
                "workspace": [],
                "only": [
                    "list[str]",
                    "None",
                    "dict[str, str]",
                    "tuple[typing.Union[typing.Any,typing.Any]]"
                ],
                "skip": [
                    "list[str]",
                    "None",
                    "tuple[typing.Union[typing.Any,typing.Any,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                    "str"
                ]
            }
        },
        "push_command": {
            "name": "push_command",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "workspace": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "int"
                ],
                "only": [
                    "None",
                    "str"
                ],
                "skip": [
                    "None",
                    "str"
                ],
                "only_workspace": [
                    "bool"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/report.py": {
        "print_snapshot_history": {
            "name": "print_snapshot_history",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [],
                "reverse": [
                    "bool"
                ],
                "max_count": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "print_resource_status": {
            "name": "print_resource_status",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": []
            }
        },
        "report_history_command": {
            "name": "report_history_command",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [
                    "int",
                    "str"
                ],
                "limit": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "report_status_command": {
            "name": "report_status_command",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [
                    "int"
                ]
            }
        },
        "report_lineage_command": {
            "name": "report_lineage_command",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [],
                "tag_or_hash": [
                    "None",
                    "str",
                    "typing.Sequence[str]",
                    "int"
                ]
            }
        },
        "_find_results_file_if_present": {
            "name": "_find_results_file_if_present",
            "location": 156,
            "return": [
                "tuple[typing.Text]",
                "None"
            ],
            "arguments": {
                "workspace": [],
                "subpath": [
                    "str"
                ],
                "resource_name": [
                    "None",
                    "str"
                ]
            }
        },
        "_get_results": {
            "name": "_get_results",
            "location": 177,
            "return": [
                "str",
                "list[str]",
                "dict[, ]",
                "dict[str, typing.Any]",
                "tuple[typing.Literal]",
                "None"
            ],
            "arguments": {
                "workspace": [],
                "tag_or_hash": [
                    "None",
                    "str",
                    "typing.Sequence[str]",
                    "typing.Any",
                    "list[str]"
                ],
                "resource_name": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "report_results_command": {
            "name": "report_results_command",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "tag_or_hash": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "resource_name": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "report_results_command.print_dict_as_table": {
            "name": "print_dict_as_table",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [],
                "name": [],
                "serialize_dicts": [
                    "bool"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/restore.py": {
        "restore_command": {
            "name": "restore_command",
            "location": 14,
            "return": [
                "int"
            ],
            "arguments": {
                "workspace": [],
                "tag_or_hash": [
                    "list[str]",
                    "None",
                    "str",
                    "bool",
                    "list[int]"
                ],
                "only": [
                    "list[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                    "None",
                    "str",
                    "list[int]"
                ],
                "leave": [
                    "list[str]",
                    "None",
                    "str",
                    "list[int]"
                ],
                "strict": [
                    "bool"
                ]
            }
        },
        "restore_command.fmt_rlist": {
            "name": "fmt_rlist",
            "location": 118,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "rnames": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/run.py": {
        "run_command": {
            "name": "run_command",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "bool",
                    "list[typing.Union[int,typing.Any]]"
                ],
                "step_name": [
                    "str",
                    "bool",
                    "list[typing.Union[int,typing.Any]]"
                ],
                "cwd": [
                    "str",
                    "bool",
                    "list[typing.Union[int,typing.Any]]"
                ],
                "command": [
                    "str",
                    "bool",
                    "list[typing.Union[int,typing.Any]]"
                ],
                "args": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/snapshot.py": {
        "merge_snapshot_metadata": {
            "name": "merge_snapshot_metadata",
            "location": 18,
            "return": [
                "SnapshotMetadata"
            ],
            "arguments": {
                "old": [
                    "typing.Type"
                ],
                "new": [
                    "typing.Type"
                ],
                "batch": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "snapshot_command": {
            "name": "snapshot_command",
            "location": 56,
            "return": [],
            "arguments": {
                "workspace": [],
                "tag": [
                    "None",
                    "str",
                    "bytes"
                ],
                "message": [
                    "typing.Text"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/status.py": {
        "print_snapshot_history": {
            "name": "print_snapshot_history",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [],
                "reverse": [
                    "bool"
                ],
                "max_count": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "print_resource_status": {
            "name": "print_resource_status",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": []
            }
        },
        "status_command": {
            "name": "status_command",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace": [
                    "str",
                    "None",
                    "int",
                    "list[dict[str, typing.Any]]"
                ],
                "history": [
                    "bool",
                    "BaseException",
                    "typing.IO",
                    "list[str]",
                    "list[dict[, ]]"
                ],
                "limit": [
                    "None",
                    "int",
                    "str"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/commands/__init__.py": {},
    "data-workspaces-core-master/dataworkspaces/kits/jupyter.py": {
        "_get_notebook_name": {
            "name": "_get_notebook_name",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose": [
                    "bool"
                ]
            }
        },
        "_remove_notebook_extn": {
            "name": "_remove_notebook_extn",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "notebook_name": [
                    "str"
                ]
            }
        },
        "get_step_name_for_notebook": {
            "name": "get_step_name_for_notebook",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "is_notebook": {
            "name": "is_notebook",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_notebook_directory": {
            "name": "get_notebook_directory",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "_fmt_scalar": {
            "name": "_fmt_scalar",
            "location": 258,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "s": [
                    "int"
                ]
            }
        },
        "_metric_col_to_colormap": {
            "name": "_metric_col_to_colormap",
            "location": 278,
            "return": [],
            "arguments": {
                "col": []
            }
        },
        "load_ipython_extension": {
            "name": "load_ipython_extension",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "ipython": []
            }
        },
        "NotebookLineageBuilder.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results_dir": [
                    "str",
                    "list[str]"
                ],
                "step_name": [
                    "None",
                    "str"
                ],
                "run_description": [
                    "None",
                    "str",
                    "typing.Callable[str, str]",
                    "bool"
                ]
            }
        },
        "DwsMagicParseArgs.parse_magic_line": {
            "name": "parse_magic_line",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "DwsMagicParseArgs.error": {
            "name": "error",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "DwsMagicParseArgs.exit": {
            "name": "exit",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int"
                ],
                "message": [
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "DwsMagics.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shell": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "DwsMagics.dws_info": {
            "name": "dws_info",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DwsMagics.dws_snapshot": {
            "name": "dws_snapshot",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "list[str]",
                    "None"
                ]
            }
        },
        "DwsMagics.dws_history": {
            "name": "dws_history",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "list[typing.AnyStr]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "DwsMagics.dws_lineage_table": {
            "name": "dws_lineage_table",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "list[str]",
                    "None"
                ]
            }
        },
        "DwsMagics.dws_lineage_graph": {
            "name": "dws_lineage_graph",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "list[str]",
                    "None"
                ]
            }
        },
        "DwsMagics.dws_results": {
            "name": "dws_results",
            "location": 622,
            "return": [
                "None",
                "HTML"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "tuple[]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "DwsMagics.__init__.target_func": {
            "name": "target_func",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "comm": [],
                "open_msg": []
            }
        },
        "DwsMagics.dws_history.truncate": {
            "name": "truncate",
            "location": 518,
            "return": [
                "str"
            ],
            "arguments": {
                "v": [],
                "l": [
                    "int"
                ]
            }
        },
        "DwsMagics.dws_history.cleanup_dict_or_string_metric": {
            "name": "cleanup_dict_or_string_metric",
            "location": 521,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "DwsMagics.dws_history.get_style": {
            "name": "get_style",
            "location": 573,
            "return": [],
            "arguments": {
                "df_or_style": []
            }
        },
        "DwsMagics.dws_results.truncate_dict": {
            "name": "truncate_dict",
            "location": 645,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [],
                "maxlen": [
                    "int"
                ],
                "roundme": [
                    "bool"
                ]
            }
        },
        "DwsMagics.dws_results.subdict_to_df": {
            "name": "subdict_to_df",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [],
                "parent_name": [],
                "name": [],
                "roundme": [
                    "bool"
                ]
            }
        },
        "DwsMagics.dws_results.dict_to_df": {
            "name": "dict_to_df",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [],
                "name": [],
                "roundme": [
                    "bool"
                ]
            }
        },
        "DwsMagics.__init__.target_func._recv": {
            "name": "_recv",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": []
            }
        },
        "DwsMagics.dws_history.color_max_metric_col": {
            "name": "color_max_metric_col",
            "location": 532,
            "return": [],
            "arguments": {
                "col": []
            }
        },
        "DwsMagics.dws_history.color_min_metric_col": {
            "name": "color_min_metric_col",
            "location": 536,
            "return": [],
            "arguments": {
                "col": []
            }
        },
        "DwsMagics.dws_history.BaselineElementStyle.__init__": {
            "name": "__init__",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [],
                "baseline": [],
                "maximize": []
            }
        },
        "DwsMagics.dws_history.BaselineElementStyle.__call__": {
            "name": "__call__",
            "location": 546,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "val": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/kits/scikit_learn.py": {
        "_load_dataset_file": {
            "name": "_load_dataset_file",
            "location": 46,
            "return": [],
            "arguments": {
                "dataset_path": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "load_dataset_from_resource": {
            "name": "load_dataset_from_resource",
            "location": 67,
            "return": [],
            "arguments": {
                "resource_name": [
                    "str"
                ],
                "subpath": [
                    "str",
                    "None"
                ],
                "workspace_dir": [
                    "None",
                    "bool",
                    "str",
                    "list[C]"
                ]
            }
        },
        "train_and_predict_with_cv": {
            "name": "train_and_predict_with_cv",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "classifier_class": [
                    "bool",
                    "dict[str, dict[, ]]",
                    "str",
                    "None",
                    "list[bytes]"
                ],
                "param_grid": [
                    "bool",
                    "dict[str, dict[, ]]",
                    "str",
                    "None",
                    "list[bytes]"
                ],
                "dataset": [
                    "list[str]",
                    "tuple[int]",
                    "None",
                    "str"
                ],
                "results_dir": [],
                "test_size": [
                    "float"
                ],
                "folds": [
                    "int"
                ],
                "cv_scoring": [
                    "typing.Text"
                ],
                "model_name": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "random_state": [
                    "None",
                    "list[str]",
                    "tuple[int]",
                    "str"
                ],
                "run_description": [
                    "None",
                    "str"
                ]
            }
        },
        "Metrics.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "bool",
                    "None"
                ],
                "predicted": [
                    "str",
                    "bool",
                    "None"
                ],
                "sample_weight": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Metrics.to_dict": {
            "name": "to_dict",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metrics.score": {
            "name": "score",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metrics.print_metrics": {
            "name": "print_metrics",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "BinaryClassificationMetrics.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "predicted": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "sample_weight": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BinaryClassificationMetrics.to_dict": {
            "name": "to_dict",
            "location": 236,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryClassificationMetrics.score": {
            "name": "score",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinaryClassificationMetrics.print_metrics": {
            "name": "print_metrics",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "MulticlassClassificationMetrics.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "bool",
                    "dict[, ]"
                ],
                "predicted": [
                    "bool",
                    "dict[, ]"
                ],
                "sample_weight": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "MulticlassClassificationMetrics.score": {
            "name": "score",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MulticlassClassificationMetrics.to_dict": {
            "name": "to_dict",
            "location": 275,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MulticlassClassificationMetrics.print_metrics": {
            "name": "print_metrics",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "RegressionMetrics.__init__": {
            "name": "__init__",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "bool"
                ],
                "predicted": [
                    "str",
                    "bool"
                ],
                "sample_weight": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "RegressionMetrics.score": {
            "name": "score",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegressionMetrics.to_dict": {
            "name": "to_dict",
            "location": 301,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegressionMetrics.print_metrics": {
            "name": "print_metrics",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "LineagePredictor.__init__": {
            "name": "__init__",
            "location": 390,
            "return": [
                "str",
                "int",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "predictor": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "metrics": [
                    "dict[str, float]",
                    "tuple[bool]",
                    "dict[str, str]",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "input_resource": [
                    "bool",
                    "None",
                    "typing.Iterable[str]",
                    "str"
                ],
                "results_resource": [
                    "None",
                    "bool",
                    "typing.Iterable[str]",
                    "str"
                ],
                "model_save_file": [
                    "None",
                    "str",
                    "bool",
                    "tuple[typing.Union[str,str]]",
                    "float"
                ],
                "workspace_dir": [
                    "None",
                    "list[str]",
                    "typing.Container",
                    "str",
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "LineagePredictor._init_dws_state": {
            "name": "_init_dws_state",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineagePredictor._save_model": {
            "name": "_save_model",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineagePredictor.__getstate__": {
            "name": "__getstate__",
            "location": 451,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineagePredictor.__setstate__": {
            "name": "__setstate__",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "LineagePredictor.set_params": {
            "name": "set_params",
            "location": 461,
            "return": [
                "LineagePredictor"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineagePredictor.fit": {
            "name": "fit",
            "location": 467,
            "return": [
                "dict[str, typing.Any]",
                "list[object]",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "LineagePredictor.score": {
            "name": "score",
            "location": 486,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "dict[str, typing.Any]",
                    "float"
                ],
                "y": [
                    "dict[str, typing.Any]",
                    "float"
                ],
                "sample_weight": [
                    "None",
                    "float",
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "LineagePredictor.predict": {
            "name": "predict",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/kits/tensorflow.py": {
        "_verify_eager_if_dataset": {
            "name": "_verify_eager_if_dataset",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "api_resource": [
                    "str",
                    "tuple[]",
                    "list[]",
                    "int"
                ]
            }
        },
        "_wrap_generator": {
            "name": "_wrap_generator",
            "location": 187,
            "return": [],
            "arguments": {
                "wrapped": [
                    "dict[str, O]",
                    "BaseException"
                ],
                "hash_state": [
                    "dict[str, O]",
                    "BaseException"
                ]
            }
        },
        "add_lineage_to_keras_model_class": {
            "name": "add_lineage_to_keras_model_class",
            "location": 406,
            "return": [
                "typing.Type",
                "dict[str, typing.Any]",
                "dict[, ]",
                "None",
                "str",
                "typing.Sequence[str]",
                "list[C]",
                "WrappedModel"
            ],
            "arguments": {
                "Cls": [
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None",
                    "str",
                    "typing.Sequence[str]",
                    "list[C]"
                ],
                "input_resource": [
                    "None",
                    "str",
                    "bool"
                ],
                "results_resource": [
                    "None",
                    "str",
                    "bool"
                ],
                "workspace_dir": [
                    "None",
                    "str",
                    "bool"
                ],
                "checkpoint_config": [
                    "None",
                    "str",
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "_wrap_generator.wrapper": {
            "name": "wrapper",
            "location": 192,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_TfKerasSequenceWrapper.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrapped": [
                    "list[]",
                    "typing.Hashable",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "hash_state": [
                    "dict[, ]",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "_TfKerasSequenceWrapper.__getitem__": {
            "name": "__getitem__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [
                    "float",
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "_TfKerasSequenceWrapper.__len__": {
            "name": "__len__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TfKerasSequenceWrapper.__iter__": {
            "name": "__iter__",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TfKerasSequenceWrapper.on_epoch_end": {
            "name": "on_epoch_end",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DwsModelCheckpoint.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str",
                    "list[str]"
                ],
                "monitor": [
                    "typing.Text"
                ],
                "save_best_only": [
                    "bool"
                ],
                "mode": [
                    "typing.Text"
                ],
                "save_freq": [
                    "typing.Text"
                ],
                "results_resource": [
                    "None",
                    "str",
                    "dict[str, int]",
                    "bool"
                ],
                "workspace_dir": [
                    "None",
                    "str",
                    "bool"
                ],
                "verbose": [
                    "int"
                ]
            }
        },
        "DwsModelCheckpoint.on_train_begin": {
            "name": "on_train_begin",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "logs": [
                    "None",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DwsModelCheckpoint.on_train_end": {
            "name": "on_train_end",
            "location": 329,
            "return": [],
            "arguments": {
                "self": [],
                "logs": [
                    "None",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "add_lineage_to_keras_model_class.WrappedModel.__init__": {
            "name": "__init__",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "add_lineage_to_keras_model_class.WrappedModel.compile": {
            "name": "compile",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "optimizer": [],
                "loss": [
                    "None"
                ],
                "metrics": [
                    "None"
                ],
                "loss_weights": [
                    "None"
                ],
                "sample_weight_mode": [
                    "None"
                ],
                "weighted_metrics": [
                    "None"
                ],
                "target_tensors": [
                    "None"
                ],
                "distribute": [
                    "None"
                ]
            }
        },
        "add_lineage_to_keras_model_class.WrappedModel.fit": {
            "name": "fit",
            "location": 518,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [
                    "None"
                ]
            }
        },
        "add_lineage_to_keras_model_class.WrappedModel.fit_generator": {
            "name": "fit_generator",
            "location": 560,
            "return": [],
            "arguments": {
                "self": [],
                "generator": [],
                "steps_per_epoch": [
                    "None"
                ],
                "epochs": [
                    "int"
                ],
                "verbose": [
                    "int"
                ],
                "callbacks": [
                    "None"
                ],
                "validation_data": [
                    "None"
                ],
                "validation_steps": [
                    "None"
                ],
                "validation_freq": [
                    "int"
                ],
                "class_weight": [
                    "None"
                ],
                "max_queue_size": [
                    "int"
                ],
                "workers": [
                    "int"
                ],
                "use_multiprocessing": [
                    "bool"
                ],
                "shuffle": [
                    "bool"
                ],
                "initial_epoch": [
                    "int"
                ]
            }
        },
        "add_lineage_to_keras_model_class.WrappedModel.evaluate": {
            "name": "evaluate",
            "location": 615,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [
                    "None"
                ]
            }
        },
        "add_lineage_to_keras_model_class.WrappedModel.evaluate_generator": {
            "name": "evaluate_generator",
            "location": 651,
            "return": [],
            "arguments": {
                "self": [],
                "generator": [],
                "steps": [
                    "None"
                ],
                "callbacks": [
                    "None"
                ],
                "max_queue_size": [
                    "int"
                ],
                "workers": [
                    "int"
                ],
                "use_multiprocessing": [
                    "bool"
                ],
                "verbose": [
                    "int"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/kits/wrapper_utils.py": {
        "_infer_step_name": {
            "name": "_infer_step_name",
            "location": 35,
            "return": [
                "frozenset",
                "list[str]",
                "set[]",
                "set[str]",
                "tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]"
            ],
            "arguments": {}
        },
        "_metric_scalar_to_json": {
            "name": "_metric_scalar_to_json",
            "location": 48,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "v": []
            }
        },
        "_metric_obj_to_json": {
            "name": "_metric_obj_to_json",
            "location": 61,
            "return": [
                "dict[, ]",
                "list[]"
            ],
            "arguments": {
                "v": [
                    "int",
                    "list[list[str]]",
                    "list[dict[str, typing.Any]]",
                    "float",
                    "list[]"
                ]
            }
        },
        "_add_to_hash": {
            "name": "_add_to_hash",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "array_data": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ],
                "hash_state": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_find_resource": {
            "name": "_find_resource",
            "location": 113,
            "return": [
                "ResourceRef",
                "int",
                "str",
                "list[int]"
            ],
            "arguments": {
                "workspace": [],
                "role": [
                    "str"
                ],
                "name_or_ref": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "_DwsModelState.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "float",
                    "str",
                    "tuple[typing.Union[int,...]]",
                    "None"
                ],
                "input_resource": [
                    "None",
                    "float",
                    "list[typing.Any]",
                    "bytes",
                    "bool"
                ],
                "results_resource": [
                    "None",
                    "int",
                    "typing.Iterable[list[str]]",
                    "Exception",
                    "str"
                ]
            }
        },
        "_DwsModelState.find_input_resources_and_return_if_api": {
            "name": "find_input_resources_and_return_if_api",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.MutableMapping",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]"
                ],
                "target_data": [
                    "None",
                    "str",
                    "bool",
                    "tuple[typing.Union[str,int]]"
                ]
            }
        },
        "_DwsModelState.write_metrics_and_complete": {
            "name": "write_metrics_and_complete",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "bytes"
                ]
            }
        },
        "_DwsModelState.reset_lineage": {
            "name": "reset_lineage",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/kits/__init__.py": {},
    "data-workspaces-core-master/dataworkspaces/resources/api_resource.py": {
        "ApiResource.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "role": [
                    "str",
                    "bool"
                ],
                "workspace": [
                    "str",
                    "bool"
                ]
            }
        },
        "ApiResource.validate_subpath_exists": {
            "name": "validate_subpath_exists",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "ApiResource.get_local_path_if_any": {
            "name": "get_local_path_if_any",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResource.pull_precheck": {
            "name": "pull_precheck",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResource.pull": {
            "name": "pull",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResource.push_precheck": {
            "name": "push_precheck",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResource.push": {
            "name": "push",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResource.snapshot_precheck": {
            "name": "snapshot_precheck",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResource.snapshot": {
            "name": "snapshot",
            "location": 67,
            "return": [
                "tuple[typing.Union[list[],list[int],list[None],bool,list[tuple[typing.Union[int,int]]],list[list[int]],list[tuple[typing.Union[typing.Any,typing.Any,typing.Any]]],None]]",
                "tuple[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResource.restore_precheck": {
            "name": "restore_precheck",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restore_hashval": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "ApiResource.restore": {
            "name": "restore",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restore_hashval": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "ApiResource.delete_snapshot": {
            "name": "delete_snapshot",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace_snapshot_hash": [
                    "str"
                ],
                "resource_restore_hash": [
                    "str"
                ],
                "relative_path": [
                    "str"
                ]
            }
        },
        "ApiResource.init_hash_state": {
            "name": "init_hash_state",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResource.dup_hash_state": {
            "name": "dup_hash_state",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResource.pop_hash_state": {
            "name": "pop_hash_state",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResource.get_hash_state": {
            "name": "get_hash_state",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ApiResource.save_current_hash": {
            "name": "save_current_hash",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "str",
                    "None"
                ]
            }
        },
        "ApiResourceFactory.from_command_line": {
            "name": "from_command_line",
            "location": 133,
            "return": [
                "ApiResource"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str"
                ],
                "name": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "float"
                ],
                "workspace": []
            }
        },
        "ApiResourceFactory.from_json": {
            "name": "from_json",
            "location": 146,
            "return": [
                "ApiResource"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "bytes",
                    "str"
                ],
                "local_params": [
                    "bool",
                    "str"
                ],
                "workspace": [
                    "bytes",
                    "str"
                ]
            }
        },
        "ApiResourceFactory.has_local_state": {
            "name": "has_local_state",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResourceFactory.clone": {
            "name": "clone",
            "location": 159,
            "return": [
                "ApiResource"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "bytes"
                ],
                "workspace": []
            }
        },
        "ApiResourceFactory.suggest_name": {
            "name": "suggest_name",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "typing.Iterable[tuple[typing.Union[int,typing.Any]]]",
                    "str",
                    "bool"
                ],
                "role": [
                    "str"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/resources/git_resource.py": {
        "git_move_and_add": {
            "name": "git_move_and_add",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "srcabspath": [
                    "str"
                ],
                "destabspath": [
                    "bytes",
                    "str"
                ],
                "git_root": [],
                "verbose": [
                    "bool",
                    "typing.IO",
                    "typing.Collection",
                    "typing.Container"
                ]
            }
        },
        "git_copy_and_add": {
            "name": "git_copy_and_add",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "srcabspath": [
                    "str",
                    "bytes"
                ],
                "destabspath": [
                    "str",
                    "bytes"
                ],
                "git_root": [],
                "verbose": [
                    "str",
                    "int"
                ]
            }
        },
        "get_workspace_dir": {
            "name": "get_workspace_dir",
            "location": 270,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "workspace": []
            }
        },
        "get_remote_origin": {
            "name": "get_remote_origin",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "local_path": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "_get_workspace_dir_for_git_backend": {
            "name": "_get_workspace_dir_for_git_backend",
            "location": 790,
            "return": [],
            "arguments": {
                "workspace": []
            }
        },
        "create_results_subdir": {
            "name": "create_results_subdir",
            "location": 1139,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace_dir": [
                    "str",
                    "bool"
                ],
                "full_path": [
                    "str"
                ],
                "relative_path": [
                    "str",
                    "bool"
                ],
                "role": [
                    "str",
                    "bool",
                    "None",
                    "list[]",
                    "list[str]"
                ],
                "verbose": [
                    "str",
                    "bool"
                ]
            }
        },
        "GitResourceBase.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_type": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "role": [
                    "str"
                ],
                "workspace": [
                    "str"
                ],
                "local_path": [
                    "str",
                    "bool",
                    "None"
                ],
                "export": [
                    "bool",
                    "dict[str, str]",
                    "str",
                    "typing.Callable[dict[, ], bool]",
                    "None",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "repo_dir": [
                    "str",
                    "None",
                    "bool",
                    "list[str]",
                    "dict[cmk.utils.type_defs.HostName, str]"
                ]
            }
        },
        "GitResourceBase.get_local_path_if_any": {
            "name": "get_local_path_if_any",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitResourceBase.validate_subpath_exists": {
            "name": "validate_subpath_exists",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "str",
                    "int"
                ]
            }
        },
        "GitResourceBase.delete_snapshot": {
            "name": "delete_snapshot",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace_snapshot_hash": [
                    "str"
                ],
                "resource_restore_hash": [
                    "str"
                ],
                "relative_path": [
                    "str",
                    "None"
                ]
            }
        },
        "GitResourceBase.does_subpath_exist": {
            "name": "does_subpath_exist",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "subpath": [
                    "str",
                    "bool"
                ],
                "must_be_file": [
                    "bool"
                ],
                "must_be_directory": [
                    "bool"
                ]
            }
        },
        "GitResourceBase.upload_file": {
            "name": "upload_file",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src_local_path": [
                    "str"
                ],
                "rel_dest_path": [
                    "str",
                    "int"
                ]
            }
        },
        "GitResourceBase.read_results_file": {
            "name": "read_results_file",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "subpath": [
                    "str",
                    "int"
                ]
            }
        },
        "GitResourceBase.delete_file": {
            "name": "delete_file",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "GitResourceBase.ls": {
            "name": "ls",
            "location": 247,
            "return": [
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str"
                ]
            }
        },
        "GitResourceBase.open": {
            "name": "open",
            "location": 263,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str",
                    "None"
                ],
                "mode": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "GitRepoResource.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "None",
                    "list[]"
                ],
                "role": [
                    "str",
                    "bool",
                    "None",
                    "list[]"
                ],
                "workspace": [
                    "str",
                    "bool",
                    "None",
                    "list[]"
                ],
                "remote_origin_url": [
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]",
                    "typing.Any",
                    "int",
                    "dict[str, str]"
                ],
                "relative_local_path": [
                    "str",
                    "dict[, ]",
                    "None",
                    "dict[str, str]",
                    "typing.IO"
                ],
                "local_path": [
                    "str",
                    "bool",
                    "None",
                    "list[]"
                ],
                "branch": [
                    "bool",
                    "dict[str, str]",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "read_only": [
                    "bool",
                    "dict[str, str]",
                    "typing.Callable[typing.Any, None]",
                    "None",
                    "str"
                ],
                "export": [
                    "str",
                    "bool",
                    "None",
                    "list[]"
                ],
                "imported": [
                    "bool",
                    "dict[str, str]",
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "GitRepoResource.get_local_params": {
            "name": "get_local_params",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResource.results_move_current_files": {
            "name": "results_move_current_files",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_dest_root": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ],
                "exclude_files": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ],
                "exclude_dirs_re": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "GitRepoResource.results_copy_current_files": {
            "name": "results_copy_current_files",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_dest_root": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ],
                "exclude_files": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ],
                "exclude_dirs_re": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "GitRepoResource.add_results_file": {
            "name": "add_results_file",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "typing.Mapping"
                ],
                "rel_dest_path": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "GitRepoResource.snapshot_precheck": {
            "name": "snapshot_precheck",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResource.snapshot": {
            "name": "snapshot",
            "location": 431,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResource.restore_precheck": {
            "name": "restore_precheck",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashval": [
                    "str"
                ]
            }
        },
        "GitRepoResource.restore": {
            "name": "restore",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashval": [
                    "bool",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "GitRepoResource.push_precheck": {
            "name": "push_precheck",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResource.push": {
            "name": "push",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResource.pull_precheck": {
            "name": "pull_precheck",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResource.pull": {
            "name": "pull",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResource.__str__": {
            "name": "__str__",
            "location": 539,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitLocalPathType.__init__": {
            "name": "__init__",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote_url": [
                    "str",
                    "bool"
                ],
                "verbose": [
                    "str",
                    "bool"
                ]
            }
        },
        "GitRepoFactory.from_command_line": {
            "name": "from_command_line",
            "location": 584,
            "return": [],
            "arguments": {
                "self": [],
                "role": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "workspace": [],
                "local_path": [
                    "str"
                ],
                "branch": [
                    "typing.TextIO",
                    "None",
                    "str"
                ],
                "read_only": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "set[str]",
                    "list[str]"
                ],
                "export": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "imported": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "set[str]",
                    "list[str]"
                ]
            }
        },
        "GitRepoFactory.from_json": {
            "name": "from_json",
            "location": 697,
            "return": [
                "GitRepoResource"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "local_params": [
                    "str"
                ],
                "workspace": [
                    "str"
                ]
            }
        },
        "GitRepoFactory.has_local_state": {
            "name": "has_local_state",
            "location": 716,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoFactory.clone": {
            "name": "clone",
            "location": 719,
            "return": [
                "GitRepoResource"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "workspace": [
                    "bool"
                ]
            }
        },
        "GitRepoFactory.suggest_name": {
            "name": "suggest_name",
            "location": 786,
            "return": [],
            "arguments": {
                "self": [],
                "workspace": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "role": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "local_path": [
                    "str",
                    "bool",
                    "list[str]",
                    "dict[str, typing.Union[int,str]]"
                ],
                "branch": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "read_only": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "export": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "imported": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "GitRepoResultsSubdirResource.__init__": {
            "name": "__init__",
            "location": 808,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "workspace": [
                    "str",
                    "list[str]"
                ],
                "relative_path": [
                    "str",
                    "bool"
                ],
                "export": [
                    "str",
                    "bool"
                ]
            }
        },
        "GitRepoResultsSubdirResource.results_move_current_files": {
            "name": "results_move_current_files",
            "location": 831,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_dest_root": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ],
                "exclude_files": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ],
                "exclude_dirs_re": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "GitRepoResultsSubdirResource.results_copy_current_files": {
            "name": "results_copy_current_files",
            "location": 862,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_dest_root": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ],
                "exclude_files": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ],
                "exclude_dirs_re": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "GitRepoResultsSubdirResource.snapshot_precheck": {
            "name": "snapshot_precheck",
            "location": 893,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResultsSubdirResource.snapshot": {
            "name": "snapshot",
            "location": 896,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResultsSubdirResource.restore_precheck": {
            "name": "restore_precheck",
            "location": 906,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashval": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "GitRepoResultsSubdirResource.restore": {
            "name": "restore",
            "location": 911,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashval": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "GitRepoResultsSubdirResource.get_branch": {
            "name": "get_branch",
            "location": 916,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResultsSubdirResource.add_results_file": {
            "name": "add_results_file",
            "location": 921,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "typing.Mapping"
                ],
                "rel_dest_path": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "GitRepoResultsSubdirResource.push_precheck": {
            "name": "push_precheck",
            "location": 942,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResultsSubdirResource.push": {
            "name": "push",
            "location": 961,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResultsSubdirResource.pull_precheck": {
            "name": "pull_precheck",
            "location": 965,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResultsSubdirResource.pull": {
            "name": "pull",
            "location": 972,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoResultsSubdirResource.__str__": {
            "name": "__str__",
            "location": 976,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoSubdirResource.__init__": {
            "name": "__init__",
            "location": 985,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "role": [
                    "str",
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "dict[, ]"
                ],
                "workspace": [
                    "str",
                    "list[str]",
                    "list[]"
                ],
                "relative_path": [
                    "str",
                    "bool"
                ],
                "export": [
                    "str",
                    "bool"
                ]
            }
        },
        "GitRepoSubdirResource.results_move_current_files": {
            "name": "results_move_current_files",
            "location": 1010,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_dest_root": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ],
                "exclude_files": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ],
                "exclude_dirs_re": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ]
            }
        },
        "GitRepoSubdirResource.results_copy_current_files": {
            "name": "results_copy_current_files",
            "location": 1017,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_dest_root": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ],
                "exclude_files": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ],
                "exclude_dirs_re": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ]
            }
        },
        "GitRepoSubdirResource.add_results_file": {
            "name": "add_results_file",
            "location": 1024,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "typing.Mapping"
                ],
                "rel_dest_path": [
                    "str",
                    "list[str]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "GitRepoSubdirResource.snapshot_precheck": {
            "name": "snapshot_precheck",
            "location": 1045,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoSubdirResource.snapshot": {
            "name": "snapshot",
            "location": 1048,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoSubdirResource.restore_precheck": {
            "name": "restore_precheck",
            "location": 1065,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashval": [
                    "str"
                ]
            }
        },
        "GitRepoSubdirResource.restore": {
            "name": "restore",
            "location": 1075,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashval": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "GitRepoSubdirResource.get_branch": {
            "name": "get_branch",
            "location": 1086,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GitRepoSubdirResource.push_precheck": {
            "name": "push_precheck",
            "location": 1091,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoSubdirResource.push": {
            "name": "push",
            "location": 1110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoSubdirResource.pull_precheck": {
            "name": "pull_precheck",
            "location": 1116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoSubdirResource.pull": {
            "name": "pull",
            "location": 1123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoSubdirResource.__str__": {
            "name": "__str__",
            "location": 1129,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoSubdirFactory.from_command_line": {
            "name": "from_command_line",
            "location": 1162,
            "return": [
                "GitRepoResultsSubdirResource",
                "GitRepoSubdirResource"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "bool",
                    "str",
                    "list[]",
                    "tuple[]"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "workspace": [
                    "str",
                    "int",
                    "None"
                ],
                "local_path": [
                    "bool",
                    "str",
                    "None"
                ],
                "confirm_subdir_create": [
                    "bool"
                ],
                "export": [
                    "bool"
                ]
            }
        },
        "GitRepoSubdirFactory.from_json": {
            "name": "from_json",
            "location": 1202,
            "return": [
                "GitRepoResultsSubdirResource",
                "GitRepoSubdirResource"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "local_params": [
                    "bool",
                    "str"
                ],
                "workspace": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GitRepoSubdirFactory.clone": {
            "name": "clone",
            "location": 1218,
            "return": [
                "GitRepoResultsSubdirResource",
                "GitRepoSubdirResource"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "workspace": []
            }
        },
        "GitRepoSubdirFactory.has_local_state": {
            "name": "has_local_state",
            "location": 1246,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitRepoSubdirFactory.suggest_name": {
            "name": "suggest_name",
            "location": 1249,
            "return": [],
            "arguments": {
                "self": [],
                "local_path": [
                    "str",
                    "list[]"
                ]
            }
        },
        "GitLocalPathType.__init__.convert": {
            "name": "convert",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "param": [],
                "ctx": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/resources/hashtree.py": {
        "compute_hash": {
            "name": "compute_hash",
            "location": 17,
            "return": [],
            "arguments": {
                "tmpname": [
                    "str"
                ]
            }
        },
        "compute_size": {
            "name": "compute_size",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        },
        "generate_hashes": {
            "name": "generate_hashes",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "path_where_hashes_are_stored": [
                    "bool",
                    "set[str]",
                    "str",
                    "typing.Sequence[str]",
                    "list[str]"
                ],
                "local_dir": [
                    "bool"
                ],
                "ignore": [
                    "list[]"
                ],
                "hash_fun": [],
                "add_to_git": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "_get_next_element": {
            "name": "_get_next_element",
            "location": 202,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "tuple[typing.Optional[int]]"
            ],
            "arguments": {
                "dl": [
                    "list[str]",
                    "str"
                ],
                "startindex": [
                    "int"
                ],
                "ignore": [
                    "list[str]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "check_hashes": {
            "name": "check_hashes",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "roothash": [
                    "str",
                    "None",
                    "typing.Callable[str, str]",
                    "bool"
                ],
                "basedir_where_hashes_are_stored": [
                    "str",
                    "None",
                    "int"
                ],
                "local_dir": [
                    "str",
                    "typing.Mapping",
                    "None"
                ],
                "ignore": [
                    "list[]"
                ],
                "hash_fun": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "generate_sha_signature": {
            "name": "generate_sha_signature",
            "location": 307,
            "return": [],
            "arguments": {
                "rsrcdir": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "localpath": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "ignore": [
                    "list[]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "check_sha_signature": {
            "name": "check_sha_signature",
            "location": 315,
            "return": [],
            "arguments": {
                "hashval": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "rsrdir": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "localpath": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "ignore": [
                    "list[]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "generate_size_signature": {
            "name": "generate_size_signature",
            "location": 323,
            "return": [],
            "arguments": {
                "rsrcdir": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "localpath": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "ignore": [
                    "list[]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "check_size_signature": {
            "name": "check_size_signature",
            "location": 331,
            "return": [],
            "arguments": {
                "hashval": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "rsrdir": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "localpath": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "ignore": [
                    "list[]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "HashEntry.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "sha": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "HashBlob.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "sha": [
                    "str",
                    "float"
                ]
            }
        },
        "HashTree.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rootdir": [
                    "str",
                    "dict[H, str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "add_to_git": [
                    "bool"
                ]
            }
        },
        "HashTree._index_by_name": {
            "name": "_index_by_name",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "HashTree._iter_convert_to_object": {
            "name": "_iter_convert_to_object",
            "location": 73,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "iterable": []
            }
        },
        "HashTree.trees": {
            "name": "trees",
            "location": 80,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashTree.blobs": {
            "name": "blobs",
            "location": 84,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashTree.add": {
            "name": "add",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "mode": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "sha": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "HashTree.sort": {
            "name": "sort",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashTree.write": {
            "name": "write",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HashTree.__getslice__": {
            "name": "__getslice__",
            "location": 134,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "bool",
                    "typing.Deque",
                    "list[]"
                ],
                "j": [
                    "bool",
                    "typing.Deque",
                    "list[]"
                ]
            }
        },
        "HashTree.__iter__": {
            "name": "__iter__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HashTree.__len__": {
            "name": "__len__",
            "location": 140,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashTree.__getitem__": {
            "name": "__getitem__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "HashTree.__contains__": {
            "name": "__contains__",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict[, ]",
                    "tuple[typing.Union[str,str]]",
                    "int"
                ]
            }
        },
        "HashTree.__reversed__": {
            "name": "__reversed__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/resources/local_file_resource.py": {
        "_relative_rsrc_dir_for_git_workspace": {
            "name": "_relative_rsrc_dir_for_git_workspace",
            "location": 41,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "role": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "setup_path_for_hashes": {
            "name": "setup_path_for_hashes",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "role": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "bool"
                ],
                "name": [
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "bool"
                ],
                "workspace": [],
                "local_path": [
                    "str"
                ]
            }
        },
        "LocalFileResource.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_type": [
                    "str"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "role": [
                    "str",
                    "int"
                ],
                "workspace": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "global_local_path": [
                    "str",
                    "None",
                    "set[int]",
                    "dict[, ]"
                ],
                "my_local_path": [
                    "set[int]",
                    "None"
                ],
                "compute_hash": [
                    "None",
                    "bool",
                    "dict[str, str]",
                    "dict[, ]",
                    "str"
                ],
                "export": [
                    "None",
                    "bool",
                    "dict[str, str]",
                    "str",
                    "dict[, ]",
                    "typing.Callable[dict[, ], bool]"
                ],
                "imported": [
                    "None",
                    "bool",
                    "dict[str, str]",
                    "str",
                    "dict[, ]",
                    "typing.Callable[dict[, ], bool]"
                ],
                "ignore": [
                    "None",
                    "float",
                    "str",
                    "dict[, ]",
                    "typing.Any"
                ]
            }
        },
        "LocalFileResource.get_local_path_if_any": {
            "name": "get_local_path_if_any",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalFileResource.results_move_current_files": {
            "name": "results_move_current_files",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_dest_root": [
                    "int",
                    "list[typing.Optional[str]]",
                    "str"
                ],
                "exclude_files": [
                    "int",
                    "list[typing.Optional[str]]",
                    "str"
                ],
                "exclude_dirs_re": [
                    "int",
                    "list[typing.Optional[str]]",
                    "str"
                ]
            }
        },
        "LocalFileResource.results_copy_current_files": {
            "name": "results_copy_current_files",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_dest_root": [
                    "int",
                    "list[typing.Optional[str]]",
                    "str"
                ],
                "exclude_files": [
                    "int",
                    "list[typing.Optional[str]]",
                    "str"
                ],
                "exclude_dirs_re": [
                    "int",
                    "list[typing.Optional[str]]",
                    "str"
                ]
            }
        },
        "LocalFileResource.add_results_file": {
            "name": "add_results_file",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "typing.Mapping"
                ],
                "rel_dest_path": [
                    "str",
                    "None"
                ]
            }
        },
        "LocalFileResource.upload_file": {
            "name": "upload_file",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_path": [
                    "str"
                ],
                "rel_dest_path": [
                    "str",
                    "None"
                ]
            }
        },
        "LocalFileResource.does_subpath_exist": {
            "name": "does_subpath_exist",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "subpath": [
                    "str",
                    "bool"
                ],
                "must_be_file": [
                    "bool"
                ],
                "must_be_directory": [
                    "bool"
                ]
            }
        },
        "LocalFileResource.delete_file": {
            "name": "delete_file",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str"
                ]
            }
        },
        "LocalFileResource.read_results_file": {
            "name": "read_results_file",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "subpath": [
                    "str"
                ]
            }
        },
        "LocalFileResource.ls": {
            "name": "ls",
            "location": 215,
            "return": [
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str"
                ]
            }
        },
        "LocalFileResource.open": {
            "name": "open",
            "location": 231,
            "return": [
                "typing.IO"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str"
                ],
                "mode": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "LocalFileResource.get_local_params": {
            "name": "get_local_params",
            "location": 237,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileResource.pull_precheck": {
            "name": "pull_precheck",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileResource.pull": {
            "name": "pull",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileResource.push_precheck": {
            "name": "push_precheck",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileResource.push": {
            "name": "push",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileResource.snapshot_precheck": {
            "name": "snapshot_precheck",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileResource.snapshot": {
            "name": "snapshot",
            "location": 263,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileResource.restore_precheck": {
            "name": "restore_precheck",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashval": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "LocalFileResource.restore": {
            "name": "restore",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashval": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "LocalFileResource.delete_snapshot": {
            "name": "delete_snapshot",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace_snapshot_hash": [
                    "str"
                ],
                "resource_restore_hash": [
                    "str"
                ],
                "relative_path": [
                    "str",
                    "None"
                ]
            }
        },
        "LocalFileResource.validate_subpath_exists": {
            "name": "validate_subpath_exists",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "str",
                    "int"
                ]
            }
        },
        "LocalFileResource.__str__": {
            "name": "__str__",
            "location": 331,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileFactory.from_command_line": {
            "name": "from_command_line",
            "location": 370,
            "return": [
                "LocalFileResource"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str",
                    "bool",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "workspace": [],
                "local_path": [
                    "str"
                ],
                "compute_hash": [
                    "str",
                    "None",
                    "typing.TextIO"
                ],
                "export": [
                    "str",
                    "None",
                    "typing.TextIO"
                ],
                "imported": [
                    "str",
                    "None",
                    "typing.TextIO"
                ]
            }
        },
        "LocalFileFactory.from_json": {
            "name": "from_json",
            "location": 413,
            "return": [
                "LocalFileResource"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "local_params": [
                    "str"
                ],
                "workspace": [
                    "int",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "LocalFileFactory.has_local_state": {
            "name": "has_local_state",
            "location": 434,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileFactory.clone": {
            "name": "clone",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "bytes"
                ],
                "workspace": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "None",
                    "set[str]",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "LocalFileFactory.suggest_name": {
            "name": "suggest_name",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "workspace": [
                    "bool",
                    "typing.Callable[[], None]",
                    "str"
                ],
                "role": [
                    "bool",
                    "typing.Callable[[], None]",
                    "str"
                ],
                "local_path": [
                    "str",
                    "bool"
                ],
                "compute_hash": [
                    "bool",
                    "typing.Callable[[], None]",
                    "str"
                ],
                "export": [
                    "bool",
                    "typing.Callable[[], None]",
                    "str"
                ],
                "imported": [
                    "bool",
                    "typing.Callable[[], None]",
                    "str"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/resources/rclone_resource.py": {
        "RemoteOriginType.validate": {
            "name": "validate",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "RemoteOriginType.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcloneResource.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "role": [
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "workspace": [
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "remote_origin": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "global_local_path": [
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "my_local_path": [
                    "bool",
                    "None",
                    "str",
                    "list[str]"
                ],
                "config": [
                    "None",
                    "dict[str, typing.Any]",
                    "bool",
                    "str",
                    "dict[str, str]"
                ],
                "compute_hash": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ],
                "export": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ],
                "imported": [
                    "None",
                    "bool",
                    "str",
                    "list[str]"
                ],
                "master": [
                    "None",
                    "bool",
                    "dict[str, str]",
                    "str",
                    "dict[, ]",
                    "dict[int, dict[str, str]]"
                ],
                "sync_mode": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "size_only": [
                    "None",
                    "bool",
                    "dict[str, str]",
                    "str",
                    "dict[, ]",
                    "dict[int, dict[str, str]]"
                ],
                "ignore": [
                    "list[]"
                ]
            }
        },
        "RcloneResource.pull_precheck": {
            "name": "pull_precheck",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcloneResource.pull": {
            "name": "pull",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcloneResource.push_precheck": {
            "name": "push_precheck",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcloneResource.push": {
            "name": "push",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcloneResource.__str__": {
            "name": "__str__",
            "location": 203,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcloneFactory._add_prechecks": {
            "name": "_add_prechecks",
            "location": 212,
            "return": [
                "RClone"
            ],
            "arguments": {
                "self": [],
                "local_path": [
                    "str"
                ],
                "remote_origin": [
                    "str"
                ],
                "config": [
                    "bool",
                    "typing.MutableMapping",
                    "list[dict[, ]]",
                    "str"
                ]
            }
        },
        "RcloneFactory._copy_from_remote": {
            "name": "_copy_from_remote",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "local_path": [
                    "str"
                ],
                "remote_origin": [
                    "str",
                    "None",
                    "int"
                ],
                "rclone": [],
                "master": [
                    "typing.Text"
                ],
                "sync_mode": [
                    "typing.Text"
                ],
                "size_only": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "RcloneFactory.from_command_line": {
            "name": "from_command_line",
            "location": 278,
            "return": [
                "RcloneResource"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str",
                    "dict[, ]"
                ],
                "name": [
                    "str",
                    "bool",
                    "None"
                ],
                "workspace": [],
                "remote_origin": [
                    "str",
                    "None",
                    "bool",
                    "dict[, ]"
                ],
                "local_path": [
                    "str",
                    "None",
                    "bool",
                    "dict[, ]"
                ],
                "config": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "typing.Mapping",
                    "bool"
                ],
                "compute_hash": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "export": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "imported": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "master": [
                    "str",
                    "bool",
                    "None"
                ],
                "sync_mode": [
                    "str",
                    "bool",
                    "None"
                ],
                "size_only": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "RcloneFactory.from_json": {
            "name": "from_json",
            "location": 338,
            "return": [
                "RcloneResource"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "local_params": [],
                "workspace": [
                    "Exception",
                    "None"
                ]
            }
        },
        "RcloneFactory.has_local_state": {
            "name": "has_local_state",
            "location": 364,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RcloneFactory.clone": {
            "name": "clone",
            "location": 367,
            "return": [
                "RcloneResource"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "workspace": [
                    "str"
                ]
            }
        },
        "RcloneFactory.suggest_name": {
            "name": "suggest_name",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "workspace": [
                    "bool",
                    "str"
                ],
                "role": [
                    "bool",
                    "str"
                ],
                "remote_origin": [
                    "bool",
                    "str"
                ],
                "local_path": [
                    "str",
                    "int"
                ],
                "config": [
                    "bool",
                    "str"
                ],
                "compute_hash": [
                    "bool",
                    "str"
                ],
                "export": [
                    "bool",
                    "str"
                ],
                "imported": [
                    "bool",
                    "str"
                ],
                "master": [
                    "bool",
                    "str"
                ],
                "sync_mode": [
                    "bool",
                    "str"
                ],
                "size_only": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/resources/resource_types.py": {
        "register_resource_type": {
            "name": "register_resource_type",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "scheme": [],
                "factory": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/resources/__init__.py": {},
    "data-workspaces-core-master/dataworkspaces/resources/s3/s3_resource.py": {
        "S3Resource.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_type": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "role": [
                    "str",
                    "None"
                ],
                "workspace": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "bucket_name": [
                    "str",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "S3Resource._load_snapshot": {
            "name": "_load_snapshot",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "snapshot_hash": [
                    "str"
                ]
            }
        },
        "S3Resource.__repr__": {
            "name": "__repr__",
            "location": 100,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Resource.get_local_path_if_any": {
            "name": "get_local_path_if_any",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Resource.results_move_current_files": {
            "name": "results_move_current_files",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_dest_root": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ],
                "exclude_files": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ],
                "exclude_dirs_re": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ]
            }
        },
        "S3Resource.results_copy_current_files": {
            "name": "results_copy_current_files",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_dest_root": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ],
                "exclude_files": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ],
                "exclude_dirs_re": [
                    "set[str]",
                    "typing.Pattern",
                    "str"
                ]
            }
        },
        "S3Resource.add_results_file": {
            "name": "add_results_file",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[int,str]]]",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ],
                "rel_dest_path": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[int,str]]]",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ]
            }
        },
        "S3Resource._verify_no_snapshot": {
            "name": "_verify_no_snapshot",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Resource.upload_file": {
            "name": "upload_file",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_path": [
                    "str",
                    "bool",
                    "None"
                ],
                "rel_dest_path": [
                    "bool",
                    "str"
                ]
            }
        },
        "S3Resource.does_subpath_exist": {
            "name": "does_subpath_exist",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "str"
                ],
                "must_be_file": [
                    "bool"
                ],
                "must_be_directory": [
                    "bool"
                ]
            }
        },
        "S3Resource.open": {
            "name": "open",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str",
                    "None"
                ],
                "mode": [
                    "str",
                    "list[]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "S3Resource.ls": {
            "name": "ls",
            "location": 175,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str"
                ]
            }
        },
        "S3Resource.delete_file": {
            "name": "delete_file",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str"
                ]
            }
        },
        "S3Resource.read_results_file": {
            "name": "read_results_file",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "str",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "S3Resource.get_local_params": {
            "name": "get_local_params",
            "location": 205,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Resource.pull_precheck": {
            "name": "pull_precheck",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Resource.pull": {
            "name": "pull",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Resource.push_precheck": {
            "name": "push_precheck",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Resource.push": {
            "name": "push",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Resource.snapshot_precheck": {
            "name": "snapshot_precheck",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Resource._ensure_fs_version_enabled": {
            "name": "_ensure_fs_version_enabled",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Resource.snapshot": {
            "name": "snapshot",
            "location": 235,
            "return": [
                "tuple[typing.Union[str,int]]",
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Resource.restore_precheck": {
            "name": "restore_precheck",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashval": [
                    "str"
                ]
            }
        },
        "S3Resource.restore": {
            "name": "restore",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hashval": [
                    "str",
                    "typing.IO",
                    "typing.Callable[, ]"
                ]
            }
        },
        "S3Resource.delete_snapshot": {
            "name": "delete_snapshot",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workspace_snapshot_hash": [
                    "str"
                ],
                "resource_restore_hash": [
                    "str"
                ],
                "relative_path": [
                    "str"
                ]
            }
        },
        "S3Resource.validate_subpath_exists": {
            "name": "validate_subpath_exists",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subpath": [
                    "str"
                ]
            }
        },
        "S3ResourceFactory.from_command_line": {
            "name": "from_command_line",
            "location": 289,
            "return": [
                "S3Resource"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "workspace": [
                    "str"
                ],
                "bucket_name": [
                    "str"
                ]
            }
        },
        "S3ResourceFactory.from_json": {
            "name": "from_json",
            "location": 299,
            "return": [
                "S3Resource"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str"
                ],
                "local_params": [
                    "bool",
                    "str"
                ],
                "workspace": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "S3ResourceFactory.has_local_state": {
            "name": "has_local_state",
            "location": 310,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3ResourceFactory.clone": {
            "name": "clone",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "workspace": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "S3ResourceFactory.suggest_name": {
            "name": "suggest_name",
            "location": 319,
            "return": [
                "str",
                "list[tuple[typing.Union[str,str]]]",
                "list[str]",
                "None",
                "dict[str, tuple[typing.Union[str,str]]]"
            ],
            "arguments": {
                "self": [],
                "workspace": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[str]",
                    "None",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ],
                "role": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[str]",
                    "None",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ],
                "bucket_name": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[str]",
                    "None",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/resources/s3/snapfs.py": {
        "build_file_tree": {
            "name": "build_file_tree",
            "location": 94,
            "return": [
                "Directory"
            ],
            "arguments": {
                "snapshot": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "read_snapshot": {
            "name": "read_snapshot",
            "location": 105,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 139,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        },
        "Directory.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "Directory.ensure_subdir": {
            "name": "ensure_subdir",
            "location": 20,
            "return": [
                "Directory"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes",
                    "None",
                    "bool"
                ]
            }
        },
        "Directory.add_file": {
            "name": "add_file",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[]"
                ]
            }
        },
        "Directory.ls": {
            "name": "ls",
            "location": 35,
            "return": [
                "list[]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Directory.exists": {
            "name": "exists",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Directory.isfile": {
            "name": "isfile",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Directory.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Directory.validate": {
            "name": "validate",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Snapshot.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "None"
                ]
            }
        },
        "S3Snapshot.version_id": {
            "name": "version_id",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "S3Snapshot.ls": {
            "name": "ls",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "S3Snapshot.isfile": {
            "name": "isfile",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "S3Snapshot.exists": {
            "name": "exists",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "S3Snapshot.__repr__": {
            "name": "__repr__",
            "location": 131,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3Snapshot.read_snapshot_from_file": {
            "name": "read_snapshot_from_file",
            "location": 135,
            "return": [
                "S3Snapshot"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "Directory.ls.join": {
            "name": "join",
            "location": 45,
            "return": [],
            "arguments": {
                "p": [],
                "name": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/resources/s3/snapshot.py": {
        "snapshot_multiprocess": {
            "name": "snapshot_multiprocess",
            "location": 86,
            "return": [
                "tuple[typing.Union[str,list[]]]"
            ],
            "arguments": {
                "bucket": [
                    "int",
                    "str"
                ],
                "snapshot_dir": [
                    "str",
                    "None"
                ],
                "max_keys": [
                    "int"
                ],
                "num_workers": [],
                "max_depth": [
                    "int"
                ],
                "dry_run": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 127,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        },
        "VersionWorker.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "work_q": [
                    "int",
                    "tuple[]"
                ],
                "result_q": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "None",
                    "list[typing.Any]",
                    "float"
                ],
                "bucket": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "None",
                    "list[typing.Any]",
                    "float"
                ],
                "max_keys": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ],
                "max_depth": [
                    "int",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "VersionWorker.get_at_prefix": {
            "name": "get_at_prefix",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "None",
                    "int"
                ],
                "depth": [
                    "bool"
                ]
            }
        },
        "VersionWorker.run": {
            "name": "run",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/resources/s3/__init__.py": {},
    "data-workspaces-core-master/dataworkspaces/third_party/git_fat.py": {
        "_is_python2": {
            "name": "_is_python2",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "exe_path": [
                    "str",
                    "list[str]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "find_python2_exe": {
            "name": "find_python2_exe",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "run_git_fat": {
            "name": "run_git_fat",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "python2_exe": [
                    "int"
                ],
                "args": [],
                "cwd": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/third_party/rclone.py": {
        "with_config": {
            "name": "with_config",
            "location": 210,
            "return": [
                "RClone"
            ],
            "arguments": {
                "cfgstring": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RClone.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfgfile": [
                    "None",
                    "str",
                    "int"
                ],
                "cfgstring": [
                    "str"
                ]
            }
        },
        "RClone._ensure_rclone_exists": {
            "name": "_ensure_rclone_exists",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RClone._execute": {
            "name": "_execute",
            "location": 73,
            "return": [
                "dict[typing.Text, ]",
                "dict[typing.Text, typing.Union[int,Exception]]"
            ],
            "arguments": {
                "self": [],
                "command_with_args": [
                    "bytes",
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "RClone.run_cmd": {
            "name": "run_cmd",
            "location": 114,
            "return": [
                "float",
                "dict[typing.Any, set[]]",
                "set[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "list[str]",
                    "dict[str, str]",
                    "None"
                ],
                "extra_args": [
                    "list[]"
                ]
            }
        },
        "RClone.copy": {
            "name": "copy",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "dest": [
                    "str"
                ],
                "flags": [
                    "list[]"
                ]
            }
        },
        "RClone.sync": {
            "name": "sync",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "dest": [
                    "str"
                ],
                "flags": [
                    "list[]"
                ]
            }
        },
        "RClone.listremotes": {
            "name": "listremotes",
            "location": 162,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "flags": [
                    "list[]"
                ]
            }
        },
        "RClone.ls": {
            "name": "ls",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "dest": [
                    "Exception",
                    "typing.Mapping",
                    "typing.MutableMapping",
                    "str"
                ],
                "flags": [
                    "list[]"
                ]
            }
        },
        "RClone.lsjson": {
            "name": "lsjson",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "dest": [
                    "str",
                    "Exception",
                    "typing.MutableMapping"
                ],
                "flags": [
                    "list[]"
                ]
            }
        },
        "RClone.delete": {
            "name": "delete",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "dest": [
                    "str",
                    "dict[, ]",
                    "list[str]"
                ],
                "flags": [
                    "list[]"
                ]
            }
        },
        "RClone.check": {
            "name": "check",
            "location": 200,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ],
                "dest": [
                    "str"
                ],
                "flags": [
                    "list[]"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/third_party/__init__.py": {},
    "data-workspaces-core-master/dataworkspaces/utils/file_utils.py": {
        "remove_dir_if_empty": {
            "name": "remove_dir_if_empty",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "base_dir": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "safe_rename": {
            "name": "safe_rename",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str",
                    "list[str]"
                ],
                "dest": [
                    "str"
                ]
            }
        },
        "get_subpath_from_absolute": {
            "name": "get_subpath_from_absolute",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "absolute_parent_path": [],
                "absolute_child_path": []
            }
        },
        "does_subpath_exist": {
            "name": "does_subpath_exist",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "base_dir": [
                    "typing.TextIO",
                    "int",
                    "None",
                    "list[str]",
                    "str"
                ],
                "subpath": [
                    "typing.TextIO",
                    "int",
                    "None",
                    "list[str]",
                    "str"
                ],
                "must_be_file": [
                    "bool"
                ],
                "must_be_directory": [
                    "bool"
                ]
            }
        },
        "parent_path": {
            "name": "parent_path",
            "location": 81,
            "return": [],
            "arguments": {
                "path": [
                    "typing.Sequence[str]",
                    "str",
                    "None"
                ]
            }
        },
        "LocalPathType.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exists": [
                    "bool"
                ],
                "must_be_outside_of_workspace": [
                    "None",
                    "int",
                    "Exception",
                    "typing.Iterable['adi.Instance']",
                    "typing.Mapping"
                ],
                "allow_multiple_levels_of_missing_dirs": [
                    "bool"
                ]
            }
        },
        "LocalPathType.convert": {
            "name": "convert",
            "location": 117,
            "return": [
                "str",
                "float",
                "bool",
                "dict[str, str]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ],
                "param": [
                    "str"
                ],
                "ctx": [
                    "str"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/utils/git_fat_utils.py": {
        "get_dot_gitfat_file_path": {
            "name": "get_dot_gitfat_file_path",
            "location": 13,
            "return": [],
            "arguments": {
                "workspace_dir": [
                    "str",
                    "list[]",
                    "bool"
                ]
            }
        },
        "is_a_git_fat_repo": {
            "name": "is_a_git_fat_repo",
            "location": 17,
            "return": [],
            "arguments": {
                "repo_dir": [
                    "str"
                ]
            }
        },
        "has_git_fat_been_initialized": {
            "name": "has_git_fat_been_initialized",
            "location": 22,
            "return": [],
            "arguments": {
                "repo_dir": [
                    "str"
                ]
            }
        },
        "validate_git_fat_in_path": {
            "name": "validate_git_fat_in_path",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "validate_git_fat_in_path_if_needed": {
            "name": "validate_git_fat_in_path_if_needed",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_dir": [
                    "str"
                ]
            }
        },
        "run_git_fat_pull_if_needed": {
            "name": "run_git_fat_pull_if_needed",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "bytes"
                ],
                "verbose": [
                    "bool",
                    "str"
                ]
            }
        },
        "run_git_fat_push_if_needed": {
            "name": "run_git_fat_push_if_needed",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "bytes"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "setup_git_fat_for_repo": {
            "name": "setup_git_fat_for_repo",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "None",
                    "bool"
                ],
                "git_fat_remote": [
                    "str",
                    "None",
                    "int"
                ],
                "git_fat_user": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[bytes, int]"
                ],
                "git_fat_port": [
                    "None",
                    "int",
                    "str"
                ],
                "git_fat_attributes": [
                    "str",
                    "None"
                ],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/utils/git_lfs_utils.py": {
        "_does_attributes_file_reference_lfs": {
            "name": "_does_attributes_file_reference_lfs",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "fpath": [
                    "str"
                ]
            }
        },
        "is_a_git_lfs_repo": {
            "name": "is_a_git_lfs_repo",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "None"
                ],
                "recursive": [
                    "bool"
                ]
            }
        },
        "is_git_lfs_installed_for_user": {
            "name": "is_git_lfs_installed_for_user",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "home_dir": [
                    "str"
                ]
            }
        },
        "find_git_lfs_in_path": {
            "name": "find_git_lfs_in_path",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "ensure_git_lfs_installed_for_user": {
            "name": "ensure_git_lfs_installed_for_user",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "lfs_exe": [
                    "bool",
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "init_git_lfs": {
            "name": "init_git_lfs",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "workspace_dir": [
                    "str",
                    "bool",
                    "None",
                    "typing.BinaryIO"
                ],
                "git_lfs_attributes": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "ensure_git_lfs_configured_if_needed": {
            "name": "ensure_git_lfs_configured_if_needed",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/utils/git_utils.py": {
        "is_git_repo": {
            "name": "is_git_repo",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "dirpath": [
                    "str",
                    "list[list[str]]",
                    "list[str]",
                    "tuple[float]",
                    "int",
                    "None"
                ]
            }
        },
        "is_git_dirty": {
            "name": "is_git_dirty",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "cwd": [
                    "str"
                ]
            }
        },
        "is_git_subdir_dirty": {
            "name": "is_git_subdir_dirty",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "cwd": [
                    "str"
                ],
                "subdir": [
                    "typing.Type"
                ]
            }
        },
        "is_git_staging_dirty": {
            "name": "is_git_staging_dirty",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "cwd": [
                    "str"
                ],
                "subdir": [
                    "None",
                    "bool",
                    "typing.Type",
                    "typing.Match"
                ]
            }
        },
        "echo_git_status_for_user": {
            "name": "echo_git_status_for_user",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "cwd": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "is_pull_needed_from_remote": {
            "name": "is_pull_needed_from_remote",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "cwd": [
                    "str",
                    "int"
                ],
                "branch": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "verbose": [
                    "str",
                    "int"
                ]
            }
        },
        "git_init": {
            "name": "git_init",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_dir": [
                    "bool",
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "git_add": {
            "name": "git_add",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_dir": [
                    "str"
                ],
                "relative_paths": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "git_commit": {
            "name": "git_commit",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_dir": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "get_branch_info": {
            "name": "get_branch_info",
            "location": 128,
            "return": [
                "tuple[typing.Union[tuple[typing.Type],str,None,list[None],dict[str, typing.Any],int,list[]]]"
            ],
            "arguments": {
                "local_path": [
                    "str",
                    "list[slice]",
                    "list[int]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "switch_git_branch": {
            "name": "switch_git_branch",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "local_path": [
                    "str",
                    "list[slice]",
                    "list[int]"
                ],
                "branch": [
                    "str",
                    "list[slice]",
                    "list[int]"
                ],
                "verbose": [
                    "str",
                    "list[slice]",
                    "list[int]"
                ]
            }
        },
        "switch_git_branch_if_needed": {
            "name": "switch_git_branch_if_needed",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "local_path": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "branch": [
                    "str"
                ],
                "verbose": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "ok_if_not_present": [
                    "bool"
                ]
            }
        },
        "git_remove_subtree": {
            "name": "git_remove_subtree",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_dir": [
                    "str"
                ],
                "relative_path": [
                    "str",
                    "bool"
                ],
                "remove_history": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "git_remove_file": {
            "name": "git_remove_file",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_dir": [
                    "str"
                ],
                "relative_path": [
                    "str"
                ],
                "remove_history": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "commit_changes_in_repo": {
            "name": "commit_changes_in_repo",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "local_path": [
                    "str",
                    "list[slice]",
                    "list[int]"
                ],
                "message": [
                    "str"
                ],
                "remove_empty_dirs": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "checkout_and_apply_commit": {
            "name": "checkout_and_apply_commit",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "local_path": [
                    "bool",
                    "str",
                    "None",
                    "typing.TextIO"
                ],
                "commit_hash": [
                    "bool",
                    "str",
                    "None",
                    "typing.TextIO"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "commit_changes_in_repo_subdir": {
            "name": "commit_changes_in_repo_subdir",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "local_path": [
                    "str",
                    "None"
                ],
                "subdir": [
                    "str"
                ],
                "message": [
                    "str",
                    "bool"
                ],
                "remove_empty_dirs": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "checkout_subdir_and_apply_commit": {
            "name": "checkout_subdir_and_apply_commit",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "local_path": [
                    "bool",
                    "str",
                    "typing.Pattern",
                    "float"
                ],
                "subdir": [
                    "bool",
                    "str",
                    "typing.Pattern",
                    "float"
                ],
                "commit_hash": [
                    "bool",
                    "str",
                    "typing.Pattern",
                    "float"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "is_file_tracked_by_git": {
            "name": "is_file_tracked_by_git",
            "location": 409,
            "return": [
                "bool"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "list[int]"
                ],
                "cwd": [
                    "str",
                    "bool"
                ],
                "verbose": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_local_head_hash": {
            "name": "get_local_head_hash",
            "location": 415,
            "return": [
                "str"
            ],
            "arguments": {
                "git_root": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "get_remote_head_hash": {
            "name": "get_remote_head_hash",
            "location": 420,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "cwd": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "branch": [
                    "str"
                ],
                "verbose": [
                    "str",
                    "int"
                ]
            }
        },
        "get_subdirectory_hash": {
            "name": "get_subdirectory_hash",
            "location": 438,
            "return": [],
            "arguments": {
                "repo_dir": [
                    "str"
                ],
                "relpath": [
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "get_remote_origin_url": {
            "name": "get_remote_origin_url",
            "location": 460,
            "return": [
                "str"
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "verbose": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "get_json_file_from_remote": {
            "name": "get_json_file_from_remote",
            "location": 473,
            "return": [],
            "arguments": {
                "relpath": [
                    "str"
                ],
                "repo_dir": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "verbose": [
                    "str"
                ]
            }
        },
        "set_remote_origin": {
            "name": "set_remote_origin",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "None"
                ],
                "remote_url": [
                    "str",
                    "None"
                ],
                "verbose": [
                    "str",
                    "None"
                ]
            }
        },
        "get_git_config_param": {
            "name": "get_git_config_param",
            "location": 500,
            "return": [
                "str"
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "None"
                ],
                "param_name": [
                    "str",
                    "None"
                ],
                "verbose": [
                    "str",
                    "None"
                ]
            }
        },
        "ensure_entry_in_gitignore": {
            "name": "ensure_entry_in_gitignore",
            "location": 505,
            "return": [
                "bool"
            ],
            "arguments": {
                "repo_dir": [
                    "str",
                    "None",
                    "bool"
                ],
                "gitignore_rel_path": [
                    "str",
                    "None",
                    "bool"
                ],
                "entry": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ],
                "match_independent_of_slashes": [
                    "bool"
                ],
                "commit": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "verify_git_config_initialized": {
            "name": "verify_git_config_initialized",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "cwd": [
                    "float",
                    "str",
                    "int"
                ],
                "batch": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "ensure_entry_in_gitignore.strip_slashes": {
            "name": "strip_slashes",
            "location": 527,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "e": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/utils/hash_utils.py": {
        "is_a_git_hash": {
            "name": "is_a_git_hash",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "is_a_shortened_git_hash": {
            "name": "is_a_shortened_git_hash",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "hash_file": {
            "name": "hash_file",
            "location": 28,
            "return": [],
            "arguments": {
                "fpath": [
                    "str"
                ]
            }
        },
        "hash_bytes": {
            "name": "hash_bytes",
            "location": 44,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_test": {
            "name": "_test",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "typing.Mapping"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/utils/lineage_utils.py": {
        "validate_json_keys": {
            "name": "validate_json_keys",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "bytes",
                    "dict[, ]",
                    "list[str]",
                    "str"
                ],
                "classobj": [
                    "str",
                    "bool",
                    "bytes",
                    "dict[, ]"
                ],
                "keys": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "filename": [
                    "None",
                    "str",
                    "bool",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "_check_for_step_dependency_conflicts": {
            "name": "_check_for_step_dependency_conflicts",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "step_name": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]"
                ],
                "refs": [
                    "str",
                    "tuple[]"
                ]
            }
        },
        "_check_for_step_transitive_consistency": {
            "name": "_check_for_step_transitive_consistency",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "bool"
                ],
                "step_name": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "None"
                ],
                "refs": [
                    "str",
                    "dict[str, str]",
                    "bytes"
                ],
                "store": []
            }
        },
        "make_lineage_table": {
            "name": "make_lineage_table",
            "location": 1764,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "set[int]",
                    "bool",
                    "None",
                    "dict[str, str]"
                ],
                "store": [],
                "snapshot_hash": [
                    "None",
                    "str",
                    "set[int]",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "make_lineage_graph_for_visualization": {
            "name": "make_lineage_graph_for_visualization",
            "location": 1822,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type"
                ],
                "store": [],
                "output_file": [],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "make_simplified_lineage_graph_for_resource": {
            "name": "make_simplified_lineage_graph_for_resource",
            "location": 1918,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "set[int]",
                    "None",
                    "int"
                ],
                "store": [],
                "resource_name": [
                    "str",
                    "set[int]",
                    "None",
                    "int"
                ],
                "output_file": [
                    "str"
                ],
                "snapshot_hash": [
                    "str",
                    "None"
                ],
                "format": [
                    "typing.Text"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "infer_step_name": {
            "name": "infer_step_name",
            "location": 2071,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "infer_script_path": {
            "name": "infer_script_path",
            "location": 2082,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "JsonKeyError.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classobj": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "key": [
                    "str",
                    "list[str]",
                    "bool"
                ],
                "filename": [
                    "None",
                    "bool",
                    "list[dict[, ]]",
                    "list[str]",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "JsonTypeError.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classobj": [
                    "str"
                ],
                "exptype": [
                    "str"
                ],
                "actualtype": [
                    "str"
                ],
                "filename": [
                    "None",
                    "set[int]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "JsonValueError.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "classobj": [
                    "str",
                    "None"
                ],
                "key": [
                    "str",
                    "None"
                ],
                "expected_vals": [
                    "str"
                ],
                "actualval": [
                    "str",
                    "None"
                ],
                "filename": [
                    "None",
                    "set[int]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ResourceRef.covers": {
            "name": "covers",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "Certificate.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "typing.Callable[, ]",
                    "str",
                    "typing.Type",
                    "typing.Sequence[]"
                ],
                "comment": [
                    "typing.Callable[, ]",
                    "str",
                    "typing.Type",
                    "typing.Sequence[]"
                ]
            }
        },
        "Certificate.pp": {
            "name": "pp",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "Certificate.from_json": {
            "name": "from_json",
            "location": 167,
            "return": [
                "HashCertificate",
                "OutputPlaceholderCert",
                "InputPlaceholderCert"
            ],
            "arguments": {
                "obj": [],
                "filename": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Certificate.to_json": {
            "name": "to_json",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashCertificate.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "None"
                ],
                "hashval": [
                    "typing.Callable[, ]",
                    "str",
                    "typing.Type",
                    "typing.Sequence[]"
                ],
                "comment": [
                    "str",
                    "None"
                ]
            }
        },
        "HashCertificate.__hash__": {
            "name": "__hash__",
            "location": 199,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashCertificate.__str__": {
            "name": "__str__",
            "location": 202,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashCertificate.__repr__": {
            "name": "__repr__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HashCertificate.__eq__": {
            "name": "__eq__",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "dict[, ]",
                    "bytes",
                    "str",
                    "typing.IO"
                ]
            }
        },
        "HashCertificate.__ne__": {
            "name": "__ne__",
            "location": 219,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "dict[, ]",
                    "bytes",
                    "str",
                    "typing.IO"
                ]
            }
        },
        "HashCertificate.to_json": {
            "name": "to_json",
            "location": 226,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashCertificate.pp": {
            "name": "pp",
            "location": 233,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "PlaceholderCertificate.__init__": {
            "name": "__init__",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ],
                "version": [
                    "int",
                    "str",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "None"
                ],
                "comment": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "PlaceholderCertificate.pp": {
            "name": "pp",
            "location": 251,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "PlaceholderCertificate.create_hash_cert": {
            "name": "create_hash_cert",
            "location": 261,
            "return": [
                "HashCertificate"
            ],
            "arguments": {
                "self": [],
                "hashval": [
                    "bool",
                    "str"
                ]
            }
        },
        "InputPlaceholderCert.__str__": {
            "name": "__str__",
            "location": 273,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputPlaceholderCert.pp": {
            "name": "pp",
            "location": 280,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "InputPlaceholderCert.__repr__": {
            "name": "__repr__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InputPlaceholderCert.__hash__": {
            "name": "__hash__",
            "location": 293,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputPlaceholderCert.__eq__": {
            "name": "__eq__",
            "location": 296,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InputPlaceholderCert.__ne__": {
            "name": "__ne__",
            "location": 303,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "InputPlaceholderCert.to_json": {
            "name": "to_json",
            "location": 310,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,bool]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputPlaceholderCert.__str__": {
            "name": "__str__",
            "location": 330,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputPlaceholderCert.pp": {
            "name": "pp",
            "location": 337,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "OutputPlaceholderCert.__repr__": {
            "name": "__repr__",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutputPlaceholderCert.__hash__": {
            "name": "__hash__",
            "location": 350,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputPlaceholderCert.__eq__": {
            "name": "__eq__",
            "location": 353,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "OutputPlaceholderCert.__ne__": {
            "name": "__ne__",
            "location": 360,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "OutputPlaceholderCert.to_json": {
            "name": "to_json",
            "location": 367,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,bool]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceLineage.from_json": {
            "name": "from_json",
            "location": 388,
            "return": [],
            "arguments": {
                "obj": [
                    "str"
                ],
                "filename": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "ResourceLineage.to_json": {
            "name": "to_json",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceLineage.pp": {
            "name": "pp",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "ResourceLineage.get_cert_for_ref": {
            "name": "get_cert_for_ref",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "typing.Iterable[typing.Any]",
                    "typing.Callable[, ]",
                    "BaseException"
                ]
            }
        },
        "ResourceLineage.get_certs": {
            "name": "get_certs",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceLineage.get_input_certs": {
            "name": "get_input_certs",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceLineage.get_code_certs": {
            "name": "get_code_certs",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceLineage.replace_placeholders": {
            "name": "replace_placeholders",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_mapping": [
                    "int",
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "typing.Type"
                ]
            }
        },
        "StepLineage.__init__": {
            "name": "__init__",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step_name": [
                    "str",
                    "bool",
                    "None"
                ],
                "start_time": [
                    "float",
                    "int",
                    "None",
                    "str"
                ],
                "parameters": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "input_resources": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "code_resources": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "output_resources": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "dict[str, typing.Any]"
                ],
                "execution_time_seconds": [
                    "None",
                    "str",
                    "bool"
                ],
                "command_line": [
                    "None",
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "run_from_directory": [
                    "None",
                    "str"
                ]
            }
        },
        "StepLineage.__str__": {
            "name": "__str__",
            "location": 583,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "StepLineage.__repr__": {
            "name": "__repr__",
            "location": 591,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StepLineage.pp": {
            "name": "pp",
            "location": 594,
            "return": [],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "StepLineage.add_input": {
            "name": "add_input",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "list[str]",
                    "list[]",
                    "bool"
                ],
                "store": [],
                "ref": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "StepLineage.make_step_lineage": {
            "name": "make_step_lineage",
            "location": 630,
            "return": [
                "StepLineage"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "int",
                    "float"
                ],
                "step_name": [
                    "str",
                    "list[str]",
                    "None",
                    "dict[str, str]"
                ],
                "start_time": [
                    "str",
                    "None",
                    "bool"
                ],
                "parameters": [
                    "str",
                    "bool",
                    "None"
                ],
                "input_resource_refs": [
                    "str",
                    "list[str]",
                    "dict[str, str]"
                ],
                "code_resource_refs": [
                    "str"
                ],
                "lineage_store": [],
                "command_line": [
                    "None",
                    "str",
                    "bool"
                ],
                "run_from_directory": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "StepLineage.get_cert_for_ref": {
            "name": "get_cert_for_ref",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "StepLineage.get_certs": {
            "name": "get_certs",
            "location": 691,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StepLineage.get_input_certs": {
            "name": "get_input_certs",
            "location": 695,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StepLineage.get_code_certs": {
            "name": "get_code_certs",
            "location": 698,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StepLineage.replace_placeholders": {
            "name": "replace_placeholders",
            "location": 701,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "hash_mapping": [
                    "str",
                    "Exception",
                    "list[str]",
                    "int"
                ]
            }
        },
        "StepLineage.add_output": {
            "name": "add_output",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bytes",
                    "Exception",
                    "dict[, ]",
                    "typing.Sequence[int]"
                ],
                "store": [],
                "ref": [
                    "typing.Type",
                    "list[str]",
                    "set[str]",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "StepLineage.to_json": {
            "name": "to_json",
            "location": 788,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StepLineage.from_json": {
            "name": "from_json",
            "location": 806,
            "return": [
                "StepLineage"
            ],
            "arguments": {
                "obj": [],
                "filename": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "SourceDataLineage.__init__": {
            "name": "__init__",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "int",
                    "float"
                ]
            }
        },
        "SourceDataLineage.to_json": {
            "name": "to_json",
            "location": 836,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceDataLineage.from_json": {
            "name": "from_json",
            "location": 842,
            "return": [
                "SourceDataLineage"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "filename": [
                    "None",
                    "str"
                ]
            }
        },
        "SourceDataLineage.__str__": {
            "name": "__str__",
            "location": 846,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceDataLineage.__repr__": {
            "name": "__repr__",
            "location": 849,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SourceDataLineage.pp": {
            "name": "pp",
            "location": 852,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "SourceDataLineage.get_cert_for_ref": {
            "name": "get_cert_for_ref",
            "location": 855,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "list[]",
                    "typing.Container",
                    "typing.Type"
                ]
            }
        },
        "SourceDataLineage.get_certs": {
            "name": "get_certs",
            "location": 861,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceDataLineage.get_input_certs": {
            "name": "get_input_certs",
            "location": 864,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceDataLineage.get_code_certs": {
            "name": "get_code_certs",
            "location": 867,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SourceDataLineage.replace_placeholders": {
            "name": "replace_placeholders",
            "location": 870,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "hash_mapping": [
                    "bytes",
                    "typing.IO",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "CodeLineage.__init__": {
            "name": "__init__",
            "location": 886,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "int",
                    "float"
                ]
            }
        },
        "CodeLineage.to_json": {
            "name": "to_json",
            "location": 889,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CodeLineage.from_json": {
            "name": "from_json",
            "location": 895,
            "return": [
                "CodeLineage"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int"
                ],
                "filename": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "CodeLineage.__str__": {
            "name": "__str__",
            "location": 899,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeLineage.__repr__": {
            "name": "__repr__",
            "location": 902,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CodeLineage.pp": {
            "name": "pp",
            "location": 905,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "CodeLineage.get_cert_for_ref": {
            "name": "get_cert_for_ref",
            "location": 908,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "list[]",
                    "typing.Container",
                    "typing.Type"
                ]
            }
        },
        "CodeLineage.get_certs": {
            "name": "get_certs",
            "location": 914,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeLineage.get_input_certs": {
            "name": "get_input_certs",
            "location": 917,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeLineage.get_code_certs": {
            "name": "get_code_certs",
            "location": 920,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeLineage.replace_placeholders": {
            "name": "replace_placeholders",
            "location": 923,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "hash_mapping": [
                    "bytes",
                    "typing.IO",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ImportedLineage.__init__": {
            "name": "__init__",
            "location": 945,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "int"
                ],
                "nested_lineage": []
            }
        },
        "ImportedLineage.get_certs": {
            "name": "get_certs",
            "location": 959,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImportedLineage.get_cert_for_ref": {
            "name": "get_cert_for_ref",
            "location": 962,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "dict[, ]",
                    "typing.Type",
                    "bool",
                    "str",
                    "Exception",
                    "typing.Callable[..., T]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "ImportedLineage.has_lineage_for_cert": {
            "name": "has_lineage_for_cert",
            "location": 972,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "str",
                    "int"
                ]
            }
        },
        "ImportedLineage.get_cert_and_lineage_for_ref": {
            "name": "get_cert_and_lineage_for_ref",
            "location": 979,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "ImportedLineage.replace_placeholders": {
            "name": "replace_placeholders",
            "location": 990,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "hash_mapping": [
                    "int",
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "typing.Type"
                ]
            }
        },
        "ImportedLineage.iterate": {
            "name": "iterate",
            "location": 993,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportedLineage.to_json": {
            "name": "to_json",
            "location": 999,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportedLineage.from_json": {
            "name": "from_json",
            "location": 1007,
            "return": [
                "ImportedLineage"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "filename": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "ImportedLineage.__str__": {
            "name": "__str__",
            "location": 1014,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImportedLineage.pp": {
            "name": "pp",
            "location": 1017,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "ImportedLineage.__repr__": {
            "name": "__repr__",
            "location": 1026,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LineageStore.store_entry": {
            "name": "store_entry",
            "location": 1061,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "typing.Mapping",
                    "list[]",
                    "str"
                ],
                "lineage": [
                    "bool",
                    "typing.Mapping",
                    "list[]",
                    "str"
                ]
            }
        },
        "LineageStore.retrieve_entry": {
            "name": "retrieve_entry",
            "location": 1072,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "float",
                    "int"
                ],
                "ref": [
                    "float",
                    "int"
                ]
            }
        },
        "LineageStore.has_entry": {
            "name": "has_entry",
            "location": 1080,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "bool",
                    "None"
                ],
                "ref": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "bool",
                    "None"
                ],
                "include_covers": [
                    "bool"
                ]
            }
        },
        "LineageStore.get_refs_for_resource": {
            "name": "get_refs_for_resource",
            "location": 1088,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "typing.Type",
                    "typing.Iterable[str]"
                ],
                "resource_name": [
                    "str",
                    "typing.Type",
                    "typing.Iterable[str]"
                ]
            }
        },
        "LineageStore.clear_entry": {
            "name": "clear_entry",
            "location": 1097,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "bool",
                    "None"
                ],
                "ref": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "bool",
                    "None"
                ]
            }
        },
        "LineageStore.replace_placeholders": {
            "name": "replace_placeholders",
            "location": 1104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool"
                ],
                "hash_mapping": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "LineageStore.snapshot_lineage": {
            "name": "snapshot_lineage",
            "location": 1120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "typing.Iterable[bytes]",
                    "typing.Sequence[str]",
                    "None"
                ],
                "snapshot_hash": [
                    "str",
                    "bool",
                    "typing.Iterable[bytes]",
                    "typing.Sequence[str]",
                    "None"
                ],
                "resource_names": [
                    "str",
                    "bool",
                    "typing.Iterable[bytes]",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "LineageStore.restore_lineage": {
            "name": "restore_lineage",
            "location": 1131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "snapshot_hash": [
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "resources_to_restore": [
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "LineageStore.delete_snapshot_lineage": {
            "name": "delete_snapshot_lineage",
            "location": 1147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "snapshot_hash": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "LineageStore.iterate_all": {
            "name": "iterate_all",
            "location": 1153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Sequence[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "LineageStore.iterate_all_as_of_snapshot": {
            "name": "iterate_all_as_of_snapshot",
            "location": 1159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "typing.Any",
                    "None",
                    "bool",
                    "list[dict[str, int]]"
                ],
                "snapshot_hash": [
                    "str",
                    "typing.Any",
                    "None",
                    "bool",
                    "list[dict[str, int]]"
                ]
            }
        },
        "LineageStore.dump": {
            "name": "dump",
            "location": 1167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "LineageStore.retrieve_entry_as_of_snapshot": {
            "name": "retrieve_entry_as_of_snapshot",
            "location": 1173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Callable[, ]",
                    "bool",
                    "list[typing.Any]",
                    "None",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "ref": [
                    "typing.Callable[, ]",
                    "bool",
                    "list[typing.Any]",
                    "None",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "snapshot_hash": [
                    "typing.Callable[, ]",
                    "bool",
                    "list[typing.Any]",
                    "None",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "LineageStore.has_entry_as_of_snapshot": {
            "name": "has_entry_as_of_snapshot",
            "location": 1183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "Exception",
                    "typing.Callable[..., bool]",
                    "list[]",
                    "bytes",
                    "float"
                ],
                "ref": [
                    "bool",
                    "Exception",
                    "typing.Callable[..., bool]",
                    "list[]",
                    "bytes",
                    "float"
                ],
                "snapshot_hash": [
                    "bool",
                    "Exception",
                    "typing.Callable[..., bool]",
                    "list[]",
                    "bytes",
                    "float"
                ],
                "include_covers": [
                    "bool"
                ]
            }
        },
        "LineageStore.get_refs_for_resource_as_of_snapshot": {
            "name": "get_refs_for_resource_as_of_snapshot",
            "location": 1193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "resource_name": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "snapshot_hash": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "LineageStore.import_lineage_file": {
            "name": "import_lineage_file",
            "location": 1204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ],
                "lineages_as_json": [
                    "bool",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "LineageStore.get_or_create_cert": {
            "name": "get_or_create_cert",
            "location": 1209,
            "return": [
                "InputPlaceholderCert"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "str",
                    "None"
                ],
                "ref": [
                    "bool",
                    "str",
                    "None"
                ],
                "comment": [
                    "bool",
                    "float"
                ],
                "for_code": [
                    "bool"
                ]
            }
        },
        "LineageStore.get_placeholder_cert_for_output": {
            "name": "get_placeholder_cert_for_output",
            "location": 1227,
            "return": [
                "OutputPlaceholderCert"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "typing.IO",
                    "dict[, ]",
                    "tuple[typing.Union[int,int]]"
                ],
                "ref": [
                    "str"
                ],
                "comment": [
                    "typing.Mapping"
                ]
            }
        },
        "LineageStore.get_lineage_for_resource": {
            "name": "get_lineage_for_resource",
            "location": 1243,
            "return": [
                "tuple[typing.Union[list[],int]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool"
                ],
                "resource_name": [
                    "str"
                ]
            }
        },
        "FileLineageStore.__init__": {
            "name": "__init__",
            "location": 1345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "None",
                    "list[typing.Any]"
                ],
                "current_lineage_path": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ],
                "snapshot_lineage_path": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "FileLineageStore._rfile_exists": {
            "name": "_rfile_exists",
            "location": 1365,
            "return": [],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ]
            }
        },
        "FileLineageStore._parse_rfile": {
            "name": "_parse_rfile",
            "location": 1368,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "FileLineageStore._load_resource_cache": {
            "name": "_load_resource_cache",
            "location": 1390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileLineageStore._save_rfile_to_curr": {
            "name": "_save_rfile_to_curr",
            "location": 1401,
            "return": [],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ],
                "lineage_map": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "FileLineageStore._get_snapshot_path": {
            "name": "_get_snapshot_path",
            "location": 1420,
            "return": [],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ],
                "snapshot_hash": [
                    "str"
                ]
            }
        },
        "FileLineageStore._snapshot_rfile_exists": {
            "name": "_snapshot_rfile_exists",
            "location": 1423,
            "return": [],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ],
                "snapshot_hash": [
                    "str"
                ]
            }
        },
        "FileLineageStore._ensure_snapshot_dir_exists": {
            "name": "_ensure_snapshot_dir_exists",
            "location": 1426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot_hash": [
                    "str",
                    "typing.IO",
                    "None"
                ]
            }
        },
        "FileLineageStore._get_resources_in_snapshot": {
            "name": "_get_resources_in_snapshot",
            "location": 1431,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "snapshot_hash": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "FileLineageStore._parse_snapshot_rfile": {
            "name": "_parse_snapshot_rfile",
            "location": 1439,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "bool",
                    "list[]"
                ],
                "snapshot_hash": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileLineageStore._save_rfile_to_snapshot": {
            "name": "_save_rfile_to_snapshot",
            "location": 1459,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ],
                "lineage_map": [
                    "dict[str, str]"
                ],
                "snapshot_hash": [
                    "str",
                    "list[str]",
                    "int",
                    "set[str]"
                ]
            }
        },
        "FileLineageStore._copy_rfile_to_snapshot": {
            "name": "_copy_rfile_to_snapshot",
            "location": 1481,
            "return": [
                "tuple[typing.Union[int,str,dict[, ],tuple[typing.Literal]]]"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "list[]",
                    "list[str]"
                ],
                "snapshot_hash": [
                    "str"
                ]
            }
        },
        "FileLineageStore._copy_snapshot_rfile_to_current": {
            "name": "_copy_snapshot_rfile_to_current",
            "location": 1487,
            "return": [
                "tuple[typing.Union[str,list[],typing.Pattern]]"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "list[str]"
                ],
                "snapshot_hash": [
                    "str"
                ]
            }
        },
        "FileLineageStore._write_placeholder_to_snapshot": {
            "name": "_write_placeholder_to_snapshot",
            "location": 1495,
            "return": [],
            "arguments": {
                "self": [],
                "snapshot_hash": [
                    "str",
                    "bytes",
                    "tuple[typing.Union[datetime.datetime,datetime.datetime]]",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bytes",
                    "tuple[typing.Union[datetime.datetime,datetime.datetime]]",
                    "bool"
                ],
                "content": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.IO"
                ]
            }
        },
        "FileLineageStore._delete_from_current": {
            "name": "_delete_from_current",
            "location": 1503,
            "return": [],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ]
            }
        },
        "FileLineageStore.store_entry": {
            "name": "store_entry",
            "location": 1508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "str",
                    "None",
                    "tuple[typing.Union[str,int]]",
                    "bytearray"
                ],
                "lineage": []
            }
        },
        "FileLineageStore.retrieve_entry": {
            "name": "retrieve_entry",
            "location": 1535,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "typing.Iterable[str]",
                    "collections.abc.AsyncIterator",
                    "typing.Collection"
                ],
                "ref": [
                    "str",
                    "typing.Callable[, ]",
                    "Exception"
                ]
            }
        },
        "FileLineageStore.has_entry": {
            "name": "has_entry",
            "location": 1545,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Iterable[str]"
                ],
                "ref": [
                    "str",
                    "list[str]",
                    "typing.Callable[str, None]"
                ],
                "include_covers": [
                    "bool"
                ]
            }
        },
        "FileLineageStore.clear_entry": {
            "name": "clear_entry",
            "location": 1555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Iterable[str]"
                ],
                "ref": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "Exception"
                ]
            }
        },
        "FileLineageStore.get_refs_for_resource": {
            "name": "get_refs_for_resource",
            "location": 1574,
            "return": [
                "list[]",
                "set[list[str]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "typing.Callable[..., T]"
                ],
                "resource_name": [
                    "str"
                ]
            }
        },
        "FileLineageStore.replace_placeholders": {
            "name": "replace_placeholders",
            "location": 1586,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict[str, typing.Any]",
                    "int",
                    "None"
                ],
                "hash_mapping": [
                    "bytes",
                    "list[]",
                    "typing.Callable[bytes, bytes]",
                    "typing.Pattern",
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "FileLineageStore.snapshot_lineage": {
            "name": "snapshot_lineage",
            "location": 1608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "str"
                ],
                "snapshot_hash": [
                    "str"
                ],
                "resource_names": []
            }
        },
        "FileLineageStore.restore_lineage": {
            "name": "restore_lineage",
            "location": 1626,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int"
                ],
                "snapshot_hash": [
                    "str",
                    "None",
                    "bool",
                    "float"
                ],
                "resources_to_restore": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "FileLineageStore.delete_snapshot_lineage": {
            "name": "delete_snapshot_lineage",
            "location": 1654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "None"
                ],
                "snapshot_hash": [
                    "str",
                    "float"
                ]
            }
        },
        "FileLineageStore.iterate_all": {
            "name": "iterate_all",
            "location": 1661,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Sequence[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "FileLineageStore.iterate_all_as_of_snapshot": {
            "name": "iterate_all_as_of_snapshot",
            "location": 1677,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str"
                ],
                "snapshot_hash": [
                    "str"
                ]
            }
        },
        "FileLineageStore.dump": {
            "name": "dump",
            "location": 1692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "FileLineageStore.retrieve_entry_as_of_snapshot": {
            "name": "retrieve_entry_as_of_snapshot",
            "location": 1710,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Callable[, ]",
                    "bool",
                    "list[typing.Any]",
                    "None",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "ref": [
                    "str"
                ],
                "snapshot_hash": [
                    "str"
                ]
            }
        },
        "FileLineageStore.has_entry_as_of_snapshot": {
            "name": "has_entry_as_of_snapshot",
            "location": 1725,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "Exception",
                    "typing.Callable[..., bool]",
                    "list[]",
                    "bytes",
                    "float"
                ],
                "ref": [
                    "int",
                    "typing.Callable[[], None]"
                ],
                "snapshot_hash": [
                    "int",
                    "typing.Callable[[], None]"
                ],
                "include_covers": [
                    "bool"
                ]
            }
        },
        "FileLineageStore.get_refs_for_resource_as_of_snapshot": {
            "name": "get_refs_for_resource_as_of_snapshot",
            "location": 1740,
            "return": [
                "list[]",
                "set[list[str]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "resource_name": [
                    "str",
                    "list[str]",
                    "typing.Type",
                    "None"
                ],
                "snapshot_hash": [
                    "str",
                    "list[str]",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "FileLineageStore.import_lineage_file": {
            "name": "import_lineage_file",
            "location": 1753,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ],
                "lineages_as_json": [
                    "str"
                ]
            }
        },
        "make_lineage_table.ref_name": {
            "name": "ref_name",
            "location": 1771,
            "return": [],
            "arguments": {
                "ref": []
            }
        },
        "make_lineage_table.cert_name": {
            "name": "cert_name",
            "location": 1774,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cert": []
            }
        },
        "make_lineage_table.input_to_str": {
            "name": "input_to_str",
            "location": 1784,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cert": []
            }
        },
        "make_lineage_table.lineage_to_cols": {
            "name": "lineage_to_cols",
            "location": 1798,
            "return": [
                "tuple[typing.Union[typing.Text,list[]]]",
                "tuple[typing.Optional[typing.Text]]"
            ],
            "arguments": {
                "lineage": []
            }
        },
        "make_lineage_graph_for_visualization.ref_name": {
            "name": "ref_name",
            "location": 1837,
            "return": [],
            "arguments": {
                "ref": []
            }
        },
        "make_lineage_graph_for_visualization.cert_name": {
            "name": "cert_name",
            "location": 1840,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cert": []
            }
        },
        "make_lineage_graph_for_visualization.lineage_to_names": {
            "name": "lineage_to_names",
            "location": 1851,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "lineage": []
            }
        },
        "make_simplified_lineage_graph_for_resource.ref_name": {
            "name": "ref_name",
            "location": 1933,
            "return": [],
            "arguments": {
                "ref": []
            }
        },
        "make_simplified_lineage_graph_for_resource.cert_short_name": {
            "name": "cert_short_name",
            "location": 1936,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cert": []
            }
        },
        "make_simplified_lineage_graph_for_resource.step_lineage_to_name": {
            "name": "step_lineage_to_name",
            "location": 1943,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "lineage": []
            }
        },
        "make_simplified_lineage_graph_for_resource.get_cert_and_lineage": {
            "name": "get_cert_and_lineage",
            "location": 1964,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "ref": []
            }
        },
        "make_simplified_lineage_graph_for_resource.cert_in_lineage": {
            "name": "cert_in_lineage",
            "location": 1973,
            "return": [
                "bool"
            ],
            "arguments": {
                "cert": []
            }
        },
        "make_simplified_lineage_graph_for_resource.process_imported_subgraph": {
            "name": "process_imported_subgraph",
            "location": 1990,
            "return": [
                "None"
            ],
            "arguments": {
                "entry_cert": [],
                "imported_lineage": []
            }
        },
        "infer_script_path.expand": {
            "name": "expand",
            "location": 2086,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "StepLineage.pp.pp_certs": {
            "name": "pp_certs",
            "location": 598,
            "return": [],
            "arguments": {
                "name": [],
                "lst": [],
                "indent": []
            }
        },
        "FileLineageStore.dump._indent": {
            "name": "_indent",
            "location": 1695,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "level": [],
                "underline": [
                    "None"
                ]
            }
        },
        "make_simplified_lineage_graph_for_resource.CertNodes.__init__": {
            "name": "__init__",
            "location": 1948,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_simplified_lineage_graph_for_resource.CertNodes.get_cert_node": {
            "name": "get_cert_node",
            "location": 1952,
            "return": [
                "tuple[bool]"
            ],
            "arguments": {
                "self": [],
                "cert": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/utils/param_utils.py": {
        "define_param": {
            "name": "define_param",
            "location": 269,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "default_value": [
                    "str",
                    "bool",
                    "typing.Any",
                    "None"
                ],
                "optional": [
                    "str",
                    "bool",
                    "typing.Any",
                    "None"
                ],
                "help": [
                    "str",
                    "bool",
                    "typing.Any",
                    "None"
                ],
                "ptype": [
                    "str",
                    "bool",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "get_global_param_defaults": {
            "name": "get_global_param_defaults",
            "location": 337,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "define_local_param": {
            "name": "define_local_param",
            "location": 351,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "default_value": [
                    "bool",
                    "str",
                    "typing.Any",
                    "None",
                    "typing.Mapping"
                ],
                "optional": [
                    "bool",
                    "str",
                    "typing.Any",
                    "None",
                    "typing.Mapping"
                ],
                "help": [
                    "bool",
                    "str",
                    "typing.Any",
                    "None",
                    "typing.Mapping"
                ],
                "ptype": [
                    "bool",
                    "str",
                    "typing.Any",
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "get_local_param_defaults": {
            "name": "get_local_param_defaults",
            "location": 361,
            "return": [
                "dict[, typing.Union[str,typing.Sequence[typing.Any],bool,dict[str, typing.Any]]]"
            ],
            "arguments": {
                "hostname": [
                    "None",
                    "str",
                    "typing.Sequence[typing.Any]",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "init_scratch_directory": {
            "name": "init_scratch_directory",
            "location": 395,
            "return": [
                "tuple[typing.Optional[str]]"
            ],
            "arguments": {
                "scratch_dir": [
                    "str",
                    "None"
                ],
                "workspace_dir": [
                    "str"
                ],
                "global_params": [
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "None",
                    "list[int]"
                ],
                "local_params": [
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "None"
                ]
            }
        },
        "clone_scratch_directory": {
            "name": "clone_scratch_directory",
            "location": 427,
            "return": [],
            "arguments": {
                "workspace_dir": [
                    "str",
                    "typing.Sequence[str]",
                    "typing.Callable[None, None]",
                    "None"
                ],
                "global_params": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "typing.Callable[, ]"
                ],
                "local_params": [
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "None"
                ],
                "batch": [
                    "bool"
                ]
            }
        },
        "get_scratch_directory": {
            "name": "get_scratch_directory",
            "location": 457,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "workspace_dir": [
                    "str",
                    "bool"
                ],
                "global_params": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "local_params": [
                    "dict[str, typing.Any]",
                    "bool",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "ParamType.parse": {
            "name": "parse",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "str_value": [
                    "str"
                ]
            }
        },
        "ParamType.validate": {
            "name": "validate",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "tuple[typing.Union[str,int]]",
                    "complex",
                    "list[]"
                ]
            }
        },
        "ParamType.to_json": {
            "name": "to_json",
            "location": 57,
            "return": [
                "bytes",
                "str",
                "int",
                "list[]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "str",
                    "int",
                    "list[]",
                    "float"
                ]
            }
        },
        "ParamType.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParamType.__str__": {
            "name": "__str__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BoolType.parse": {
            "name": "parse",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "str_value": [
                    "str"
                ]
            }
        },
        "BoolType.validate": {
            "name": "validate",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "BoolType.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringType.validate": {
            "name": "validate",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None"
                ]
            }
        },
        "StringType.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbspathType.validate": {
            "name": "validate",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "None",
                    "bool"
                ]
            }
        },
        "AbspathType.__str__": {
            "name": "__str__",
            "location": 109,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelpathType.validate": {
            "name": "validate",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "None",
                    "bool"
                ]
            }
        },
        "RelpathType.__str__": {
            "name": "__str__",
            "location": 124,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "HostnameType.validate": {
            "name": "validate",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "HostnameType.__str__": {
            "name": "__str__",
            "location": 136,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumType.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumType.parse": {
            "name": "parse",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "str_value": [
                    "str"
                ]
            }
        },
        "EnumType.validate": {
            "name": "validate",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "EnumType.__repr__": {
            "name": "__repr__",
            "location": 163,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumType.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParamDef.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Callable[float, bool]"
                ],
                "default_value": [
                    "str",
                    "None",
                    "typing.Sequence[typing.Any]"
                ],
                "optional": [
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ],
                "help": [
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ],
                "ptype": [],
                "allow_missing": [
                    "bool"
                ]
            }
        },
        "ParamDef.parse": {
            "name": "parse",
            "location": 205,
            "return": [
                "typing.IO",
                "bool"
            ],
            "arguments": {
                "self": [],
                "raw_value": [
                    "str",
                    "typing.IO",
                    "bool"
                ]
            }
        },
        "ParamDef.validate": {
            "name": "validate",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None",
                    "dict[, ]",
                    "typing.Any",
                    "int",
                    "float",
                    "bytes"
                ]
            }
        },
        "ParamDef.to_json": {
            "name": "to_json",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list[]",
                    "dict[, ]"
                ]
            }
        },
        "ParamDef.__repr__": {
            "name": "__repr__",
            "location": 247,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemplateType.validate": {
            "name": "validate",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "TemplateType.__str__": {
            "name": "__str__",
            "location": 281,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileListType.parse": {
            "name": "parse",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "str_value": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "FileListType.validate": {
            "name": "validate",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict[, ]",
                    "str",
                    "dict[H, list[cmk.utils.type_defs.HostName]]",
                    "list[str]"
                ]
            }
        },
        "FileListType.__str__": {
            "name": "__str__",
            "location": 305,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceParams.__init__": {
            "name": "__init__",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceParams.define": {
            "name": "define",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, str]",
                    "bool"
                ],
                "default_value": [
                    "dict[, ]",
                    "str",
                    "int"
                ],
                "optional": [
                    "dict[, ]",
                    "str",
                    "int"
                ],
                "help": [
                    "dict[, ]",
                    "str",
                    "int"
                ],
                "is_global": [
                    "bool",
                    "str"
                ],
                "ptype": [
                    "dict[, ]",
                    "str",
                    "int"
                ],
                "allow_missing": [
                    "bool"
                ]
            }
        },
        "ResourceParams.get": {
            "name": "get",
            "location": 533,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "supplied_value": [
                    "str"
                ]
            }
        },
        "ResourceParams.get_params": {
            "name": "get_params",
            "location": 549,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "dict[, ]",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "ResourceParams.get_local_params": {
            "name": "get_local_params",
            "location": 558,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "dict[, ]",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, str]"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/utils/print_utils.py": {
        "_truncate": {
            "name": "_truncate",
            "location": 17,
            "return": [],
            "arguments": {
                "s": [],
                "width": [
                    "int",
                    "float"
                ]
            }
        },
        "pad_left": {
            "name": "pad_left",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [],
                "width": [
                    "int"
                ],
                "truncate": [
                    "bool"
                ]
            }
        },
        "pad_right": {
            "name": "pad_right",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [],
                "width": [
                    "int"
                ],
                "truncate": [
                    "bool"
                ]
            }
        },
        "format_columns": {
            "name": "format_columns",
            "location": 75,
            "return": [],
            "arguments": {
                "columns": [
                    "dict[str, typing.Any]"
                ],
                "precision": [
                    "int"
                ],
                "null_value": [
                    "typing.Text"
                ],
                "spec": [
                    "dict[, ]"
                ]
            }
        },
        "format_row": {
            "name": "format_row",
            "location": 156,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "columns": [
                    "list[str]",
                    "tuple[]",
                    "str"
                ],
                "widths": [
                    "list[int]",
                    "int",
                    "frozenset",
                    "str"
                ]
            }
        },
        "row_generator": {
            "name": "row_generator",
            "location": 178,
            "return": [
                "typing.Generator[str]",
                "typing.Generator[]",
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "cols": [
                    "str",
                    "int"
                ],
                "title": [
                    "str",
                    "None"
                ],
                "nl": [
                    "bool"
                ]
            }
        },
        "print_columns": {
            "name": "print_columns",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "columns": [
                    "int",
                    "float"
                ],
                "precision": [
                    "int"
                ],
                "null_value": [
                    "typing.Text"
                ],
                "spec": [
                    "dict[, ]"
                ],
                "paginate": [
                    "bool"
                ],
                "title": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/utils/regexp_utils.py": {
        "isots_to_dt": {
            "name": "isots_to_dt",
            "location": 33,
            "return": [],
            "arguments": {
                "iso_ts": [
                    "str"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/utils/snapshot_utils.py": {
        "validate_template": {
            "name": "validate_template",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "template": [
                    "str"
                ]
            }
        },
        "make_re_pattern_for_dir_template": {
            "name": "make_re_pattern_for_dir_template",
            "location": 72,
            "return": [],
            "arguments": {
                "template": [
                    "str",
                    "int"
                ]
            }
        },
        "expand_dir_template": {
            "name": "expand_dir_template",
            "location": 89,
            "return": [],
            "arguments": {
                "template": [
                    "typing.AbstractSet",
                    "str",
                    "typing.Sequence[str]",
                    "int",
                    "typing.Iterable[typing.Any]",
                    "None"
                ],
                "username": [
                    "bool",
                    "str",
                    "typing.Type"
                ],
                "hostname": [
                    "bool",
                    "str",
                    "typing.Type"
                ],
                "timestamp": [],
                "snapshot_no": [
                    "bool",
                    "str",
                    "typing.Type"
                ],
                "snapshot_tag": [
                    "None",
                    "bool",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "move_file_and_set_readonly": {
            "name": "move_file_and_set_readonly",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str"
                ],
                "dest": [
                    "str",
                    "int"
                ]
            }
        },
        "copy_file_and_set_readonly": {
            "name": "copy_file_and_set_readonly",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str",
                    "list[]"
                ],
                "dest": [
                    "str",
                    "int"
                ]
            }
        },
        "move_current_files_local_fs": {
            "name": "move_current_files_local_fs",
            "location": 138,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "resource_name": [
                    "str",
                    "None"
                ],
                "base_dir": [],
                "rel_dest_root": [
                    "str",
                    "bool",
                    "None"
                ],
                "exclude_files": [
                    "set[str]",
                    "str"
                ],
                "exclude_dirs_res": [
                    "bool",
                    "str"
                ],
                "move_fn": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "copy_current_files_local_fs": {
            "name": "copy_current_files_local_fs",
            "location": 223,
            "return": [
                "list[]"
            ],
            "arguments": {
                "resource_name": [
                    "str",
                    "None"
                ],
                "base_dir": [],
                "rel_dest_root": [
                    "str",
                    "bool",
                    "None"
                ],
                "exclude_files": [
                    "set[str]",
                    "str"
                ],
                "exclude_dirs_res": [
                    "bool",
                    "str"
                ],
                "copy_fn": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "write_and_hash_file": {
            "name": "write_and_hash_file",
            "location": 301,
            "return": [
                "tuple[typing.Union[str,bool]]"
            ],
            "arguments": {
                "write_fn": [
                    "int",
                    "str",
                    "Exception"
                ],
                "filename_template": [
                    "str",
                    "typing.Mapping",
                    "typing.Callable[, ]"
                ],
                "verbose": [
                    "bool",
                    "str"
                ]
            }
        },
        "make_re_pattern_for_dir_template.repl": {
            "name": "repl",
            "location": 77,
            "return": [],
            "arguments": {
                "tvar_mo": []
            }
        },
        "expand_dir_template.repl": {
            "name": "repl",
            "location": 115,
            "return": [],
            "arguments": {
                "tvar_mo": []
            }
        },
        "move_current_files_local_fs.join_to_rel_dirpath": {
            "name": "join_to_rel_dirpath",
            "location": 171,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "copy_current_files_local_fs.join_to_rel_dirpath": {
            "name": "join_to_rel_dirpath",
            "location": 255,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/utils/subprocess_utils.py": {
        "call_subprocess": {
            "name": "call_subprocess",
            "location": 12,
            "return": [],
            "arguments": {
                "args": [],
                "cwd": [
                    "typing.Callable[, ]",
                    "bool",
                    "str",
                    "tuple[]",
                    "list[str]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "call_subprocess_for_rc": {
            "name": "call_subprocess_for_rc",
            "location": 30,
            "return": [],
            "arguments": {
                "args": [],
                "cwd": [
                    "typing.Callable[, ]",
                    "str"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "find_exe": {
            "name": "find_exe",
            "location": 46,
            "return": [],
            "arguments": {
                "exe_name": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "recommended_action_on_error": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "additional_search_locations": [
                    "list[typing.Text]"
                ]
            }
        }
    },
    "data-workspaces-core-master/dataworkspaces/utils/__init__.py": {},
    "data-workspaces-core-master/docs/conf.py": {},
    "data-workspaces-core-master/tests/lineage_params_step.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "data-workspaces-core-master/tests/lineage_step1.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "data-workspaces-core-master/tests/lineage_step2.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_alternative_branch.py": {
        "TestAlternativeBranchCases.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAlternativeBranchCases.tearDown": {
            "name": "tearDown",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAlternativeBranchCases._create_repo_with_branch": {
            "name": "_create_repo_with_branch",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "branch": [
                    "str",
                    "dict[, ]",
                    "typing.TextIO",
                    "bool"
                ]
            }
        },
        "TestAlternativeBranchCases._setup_initial_repo": {
            "name": "_setup_initial_repo",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_resources": [
                    "None",
                    "list[str]",
                    "bool"
                ],
                "scratch_dir": [
                    "None",
                    "list[str]",
                    "bool"
                ],
                "hostname": [
                    "None",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestAlternativeBranchCases._setup_git_resource": {
            "name": "_setup_git_resource",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAlternativeBranchCases._clone_second_repo": {
            "name": "_clone_second_repo",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAlternativeBranchCases.test_branch_for_dws_repo": {
            "name": "test_branch_for_dws_repo",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_api.py": {
        "makefile": {
            "name": "makefile",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "relpath": [
                    "str",
                    "typing.Mapping",
                    "bool"
                ],
                "contents": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestApi.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.tearDown": {
            "name": "tearDown",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi._run_dws": {
            "name": "_run_dws",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argstr": [
                    "str"
                ],
                "cwd": []
            }
        },
        "TestApi._run_git": {
            "name": "_run_git",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "git_args": [],
                "cwd": []
            }
        },
        "TestApi._assert_contents": {
            "name": "_assert_contents",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relpath": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.IO",
                    "str"
                ],
                "contents": [
                    "bytes",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "TestApi._write_metrics": {
            "name": "_write_metrics",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "dict[, ]",
                    "tuple[int]",
                    "list[bytes]",
                    "int"
                ]
            }
        },
        "TestApi.test_get_resource_info": {
            "name": "test_get_resource_info",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_snapshots": {
            "name": "test_snapshots",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_export.py": {
        "TestExport.tearDown": {
            "name": "tearDown",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExport._assert_exists": {
            "name": "_assert_exists",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws_relpath": [
                    "str"
                ]
            }
        },
        "TestExport.test_export_of_results": {
            "name": "test_export_of_results",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExport.test_export_of_intermediate_data": {
            "name": "test_export_of_intermediate_data",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExport.test_export_of_local_file_results": {
            "name": "test_export_of_local_file_results",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExport.test_export_of_local_file_intermediate_data": {
            "name": "test_export_of_local_file_intermediate_data",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_file_utils.py": {
        "TestFileUtils.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileUtils.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileUtils.test_safe_rename": {
            "name": "test_safe_rename",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_git_fat_integration.py": {
        "make_compressed_file": {
            "name": "make_compressed_file",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "extra": [
                    "str"
                ]
            }
        },
        "BaseCase.setUp": {
            "name": "setUp",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.tearDown": {
            "name": "tearDown",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase._run_dws": {
            "name": "_run_dws",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dws_args": [
                    "str",
                    "list[str]"
                ],
                "cwd": [],
                "env": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "BaseCase._run_git": {
            "name": "_run_git",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "git_args": [],
                "cwd": []
            }
        },
        "BaseCase._assert_fat_file_exists": {
            "name": "_assert_fat_file_exists",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filehash": [
                    "str",
                    "None"
                ],
                "base_name": [
                    "str",
                    "Exception",
                    "None"
                ]
            }
        },
        "BaseCase._assert_files_same": {
            "name": "_assert_files_same",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [
                    "str",
                    "typing.IO"
                ],
                "f2": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "TestGitFatInWorkspace.test_git_fat_in_workspace": {
            "name": "test_git_fat_in_workspace",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFatInResource.setUp": {
            "name": "setUp",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFatInResource.test_git_fat_in_workspace": {
            "name": "test_git_fat_in_workspace",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFatExeMissing.setUp": {
            "name": "setUp",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFatExeMissing._run_dws_for_git_fat": {
            "name": "_run_dws_for_git_fat",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dws_args": [
                    "str",
                    "dict[str, str]"
                ],
                "cwd": []
            }
        },
        "TestGitFatExeMissing.test_init": {
            "name": "test_init",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFatExeMissing._setup_ws_with_git_fat": {
            "name": "_setup_ws_with_git_fat",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "relpath": [
                    "str"
                ]
            }
        },
        "TestGitFatExeMissing.test_snapshot_with_gitsub_resource": {
            "name": "test_snapshot_with_gitsub_resource",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFatExeMissing.test_snapshot_with_main_repo": {
            "name": "test_snapshot_with_main_repo",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitFatExeMissing.tearDown": {
            "name": "tearDown",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_git_lfs.py": {
        "make_compressed_file": {
            "name": "make_compressed_file",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "extra": [
                    "str"
                ]
            }
        },
        "TestGitAttributes.setUp": {
            "name": "setUp",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitAttributes.tearDown": {
            "name": "tearDown",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitAttributes._write_attributes_file": {
            "name": "_write_attributes_file",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestGitAttributes.test_git_attributes_check": {
            "name": "test_git_attributes_check",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGitAttributes.test_negative_git_attributes_check": {
            "name": "test_negative_git_attributes_check",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsAnLfsRepo.setUp": {
            "name": "setUp",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsAnLfsRepo.tearDown": {
            "name": "tearDown",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsAnLfsRepo._write_attributes_file": {
            "name": "_write_attributes_file",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "bytes"
                ],
                "subdir": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "TestIsAnLfsRepo.test_root_attributes": {
            "name": "test_root_attributes",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsAnLfsRepo.test_subdir_attributes": {
            "name": "test_subdir_attributes",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsAnLfsRepo.test_no_attributes": {
            "name": "test_no_attributes",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckInstalledInUser.setUp": {
            "name": "setUp",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckInstalledInUser.tearDown": {
            "name": "tearDown",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckInstalledInUser._write_config_file": {
            "name": "_write_config_file",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestCheckInstalledInUser.test_git_lfs_installed": {
            "name": "test_git_lfs_installed",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckInstalledInUser.test_git_lfs_not_installed": {
            "name": "test_git_lfs_not_installed",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckInstalledInUser.test_real_homedir": {
            "name": "test_real_homedir",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_git_utils.py": {
        "makefile": {
            "name": "makefile",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "relpath": [
                    "str",
                    "typing.Mapping",
                    "bool"
                ],
                "contents": [
                    "str",
                    "bytes"
                ]
            }
        },
        "BaseCase.setUp": {
            "name": "setUp",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.tearDown": {
            "name": "tearDown",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase._run": {
            "name": "_run",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "git_args": [],
                "cwd": []
            }
        },
        "BaseCase._git_add": {
            "name": "_git_add",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "files": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "BaseCase.assert_file_exists": {
            "name": "assert_file_exists",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relpath": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BaseCase.assert_file_not_exists": {
            "name": "assert_file_not_exists",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relpath": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "BaseCase.assert_file_contents_equal": {
            "name": "assert_file_contents_equal",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relpath": [
                    "dict[, ]",
                    "str",
                    "typing.Sequence[str]",
                    "int",
                    "bytes"
                ],
                "contents": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestIsDirty.setUp": {
            "name": "setUp",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_is_dirty_clean": {
            "name": "test_git_is_dirty_clean",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_is_dirty_untracked": {
            "name": "test_git_is_dirty_untracked",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_is_dirty_added": {
            "name": "test_git_is_dirty_added",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_is_dirty_modified": {
            "name": "test_git_is_dirty_modified",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_is_dirty_modified_and_added": {
            "name": "test_git_is_dirty_modified_and_added",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_is_dirty_deleted": {
            "name": "test_git_is_dirty_deleted",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_is_dirty_deleted_in_staging": {
            "name": "test_git_is_dirty_deleted_in_staging",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_subdir_is_dirty_untracked_outside": {
            "name": "test_git_subdir_is_dirty_untracked_outside",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_subdir_is_dirty_added_outside": {
            "name": "test_git_subdir_is_dirty_added_outside",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_subdir_is_dirty_modified_outside": {
            "name": "test_git_subdir_is_dirty_modified_outside",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_subdir_is_dirty_modified_and_added_outside": {
            "name": "test_git_subdir_is_dirty_modified_and_added_outside",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_subdir_is_dirty_deleted_outside": {
            "name": "test_git_subdir_is_dirty_deleted_outside",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsDirty.test_git_subdir_is_dirty_deleted_in_staging_outside": {
            "name": "test_git_subdir_is_dirty_deleted_in_staging_outside",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommit.test_commit": {
            "name": "test_commit",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommit.test_commit_filename_with_spaces": {
            "name": "test_commit_filename_with_spaces",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckoutAndApplyCommit.test_checkout_and_apply_commit": {
            "name": "test_checkout_and_apply_commit",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubdirCommit.test_commit": {
            "name": "test_commit",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubdirCommit.test_commit_filename_with_spaces": {
            "name": "test_commit_filename_with_spaces",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCheckoutSubdirAndApplyCommit.test_checkout_and_apply_commit": {
            "name": "test_checkout_and_apply_commit",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetSubdirectoryHash.test_subdir_hash": {
            "name": "test_subdir_hash",
            "location": 453,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMisc.test_get_json_file_from_remote": {
            "name": "test_get_json_file_from_remote",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemove._add_file": {
            "name": "_add_file",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dirpath": [
                    "str",
                    "typing.IO"
                ],
                "filename": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "TestRemove.setUp": {
            "name": "setUp",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemove.test_delete_tree": {
            "name": "test_delete_tree",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRemove.test_delete_files": {
            "name": "test_delete_files",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_hashtree.py": {
        "TestHashTree.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHashTree.tearDown": {
            "name": "tearDown",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHashTree._run_hash_and_check": {
            "name": "_run_hash_and_check",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_fun": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "TestHashTree.test_hashing": {
            "name": "test_hashing",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHashTree.test_size_based_hashing": {
            "name": "test_size_based_hashing",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_import.py": {
        "TestImportGitRepo.tearDown": {
            "name": "tearDown",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportGitRepo._assert_exists": {
            "name": "_assert_exists",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws_relpath": [
                    "str",
                    "typing.Sequence[str]",
                    "list[str]"
                ],
                "base_path": []
            }
        },
        "TestImportGitRepo._setup_exported_resource": {
            "name": "_setup_exported_resource",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportGitRepo._update_exported_resource": {
            "name": "_update_exported_resource",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportGitRepo.test_import": {
            "name": "test_import",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportLocalFiles.tearDown": {
            "name": "tearDown",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportLocalFiles._assert_exists": {
            "name": "_assert_exists",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relpath": [
                    "str"
                ],
                "base_path": []
            }
        },
        "TestImportLocalFiles._setup_exported_resource": {
            "name": "_setup_exported_resource",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportLocalFiles.test_import": {
            "name": "test_import",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportRclone.tearDown": {
            "name": "tearDown",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportRclone._assert_exists": {
            "name": "_assert_exists",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relpath": [
                    "str"
                ],
                "base_path": []
            }
        },
        "TestImportRclone._setup_exported_resource": {
            "name": "_setup_exported_resource",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImportRclone.test_import": {
            "name": "test_import",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_jupyter_kit.py": {
        "TestJupyterKit.setUp": {
            "name": "setUp",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJupyterKit.tearDown": {
            "name": "tearDown",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJupyterKit._run_dws": {
            "name": "_run_dws",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dws_args": [
                    "str",
                    "list[str]",
                    "bytes"
                ],
                "cwd": [],
                "env": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "TestJupyterKit.test_jupyter": {
            "name": "test_jupyter",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeatmapBinning.test_no_unique": {
            "name": "test_no_unique",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeatmapBinning.test_one_unique": {
            "name": "test_one_unique",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeatmapBinning.test_two_unique": {
            "name": "test_two_unique",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeatmapBinning.test_three_unique": {
            "name": "test_three_unique",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeatmapBinning.test_four_unique": {
            "name": "test_four_unique",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeatmapBinning.test_five_unique": {
            "name": "test_five_unique",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeatmapBinning.test_six_unique": {
            "name": "test_six_unique",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeatmapBinning.test_seven_unique": {
            "name": "test_seven_unique",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeatmapBinning.test_eight_unique": {
            "name": "test_eight_unique",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeatmapBinning.test_random": {
            "name": "test_random",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeatmapBinning.test_combined_bins": {
            "name": "test_combined_bins",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_lineage.py": {
        "TestLineage.setUp": {
            "name": "setUp",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineage._run_dws": {
            "name": "_run_dws",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dws_args": [
                    "str",
                    "list[str]",
                    "bytes"
                ],
                "cwd": [],
                "env": [
                    "None",
                    "str",
                    "list[str]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "TestLineage._run_step": {
            "name": "_run_step",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_name": [
                    "str",
                    "list[str]"
                ],
                "args": []
            }
        },
        "TestLineage.tearDown": {
            "name": "tearDown",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineage._validate_test_case_file": {
            "name": "_validate_test_case_file",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_contents": [
                    "str"
                ],
                "resource_dir": [
                    "str"
                ]
            }
        },
        "TestLineage._run_git": {
            "name": "_run_git",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "git_args": [],
                "cwd": []
            }
        },
        "TestLineage._check_lineage_files": {
            "name": "_check_lineage_files",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "should_be_present": [],
                "should_not_be_present": []
            }
        },
        "TestLineage._check_results_lineage": {
            "name": "_check_results_lineage",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot_tag": [
                    "str",
                    "None"
                ],
                "expected_num_lineages": [
                    "int",
                    "set[tuple[typing.Union[str,str]]]",
                    "str",
                    "list[str]",
                    "tuple[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestLineage.test_lineage": {
            "name": "test_lineage",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineage.test_pull": {
            "name": "test_pull",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineage.test_params": {
            "name": "test_params",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLineage.test_lineage_graph_command": {
            "name": "test_lineage_graph_command",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_lineage_utils.py": {
        "TestResourceRef.test_covers": {
            "name": "test_covers",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResourceCert.test_cert_equality": {
            "name": "test_cert_equality",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin._get_store": {
            "name": "_get_store",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin._get_instance": {
            "name": "_get_instance",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin._make_another_store_instance": {
            "name": "_make_another_store_instance",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin._assert_datasource_hash": {
            "name": "_assert_datasource_hash",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "list[]",
                    "dict[, ]",
                    "None",
                    "dict[str, str]",
                    "typing.Callable[, ]"
                ],
                "expected_hash": [
                    "list[bytes]",
                    "str"
                ]
            }
        },
        "TstStoreMixin._assert_step_hash": {
            "name": "_assert_step_hash",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "step_name": [
                    "str"
                ],
                "expected_hash": [
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "TstStoreMixin._run_step": {
            "name": "_run_step",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "inputs": [
                    "str",
                    "int"
                ],
                "outputs": [
                    "str"
                ],
                "params": [
                    "dict[, ]"
                ]
            }
        },
        "TstStoreMixin._run_initial_workflow": {
            "name": "_run_initial_workflow",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s3_outputs": [
                    "list[ResourceRef]"
                ],
                "snapshot_hash_overrides": [
                    "dict[, ]"
                ]
            }
        },
        "TstStoreMixin.test_basic_scenaio": {
            "name": "test_basic_scenaio",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin.test_inconsistency": {
            "name": "test_inconsistency",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin.test_placeholder_substitution": {
            "name": "test_placeholder_substitution",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin.test_inconsistent_writes": {
            "name": "test_inconsistent_writes",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin.test_invalidation": {
            "name": "test_invalidation",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin.test_invalidation_in_step": {
            "name": "test_invalidation_in_step",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin.test_unreplaced_placeholders": {
            "name": "test_unreplaced_placeholders",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin._get_ref_to_hash": {
            "name": "_get_ref_to_hash",
            "location": 279,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin.test_snapshot_and_restore": {
            "name": "test_snapshot_and_restore",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin.test_loading": {
            "name": "test_loading",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin.test_get_lineage_for_resource": {
            "name": "test_get_lineage_for_resource",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileLineageStore.setUp": {
            "name": "setUp",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileLineageStore._get_store": {
            "name": "_get_store",
            "location": 392,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFileLineageStore._make_another_store_instance": {
            "name": "_make_another_store_instance",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileLineageStore._get_instance": {
            "name": "_get_instance",
            "location": 398,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileLineageStore.tearDown": {
            "name": "tearDown",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TstStoreMixin.test_get_lineage_for_resource.check_for_cert": {
            "name": "check_for_cert",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "ref": [],
                "hashval": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_local_files_resource.py": {
        "TestLocalFiles.test_local_files_resource": {
            "name": "test_local_files_resource",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalFiles.test_local_path_override": {
            "name": "test_local_path_override",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileSystemAPIs.test_filesystem_apis": {
            "name": "test_filesystem_apis",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_move_results.py": {
        "makefile": {
            "name": "makefile",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestDirTemplateRe._test_pat": {
            "name": "_test_pat",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str"
                ],
                "expected": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "TestDirTemplateRe.test1": {
            "name": "test1",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirTemplateRe.test2": {
            "name": "test2",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirTemplateRe.test3": {
            "name": "test3",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpandDirTemplate._test_template": {
            "name": "_test_template",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str"
                ],
                "username": [
                    "str",
                    "bool"
                ],
                "hostname": [
                    "str",
                    "bool"
                ],
                "timestamp": [],
                "snapshot_no": [
                    "str",
                    "bool"
                ],
                "snapshot_tag": [
                    "str",
                    "bool"
                ],
                "expected": [
                    "str",
                    "bytes",
                    "set[]",
                    "int"
                ]
            }
        },
        "TestExpandDirTemplate.test1": {
            "name": "test1",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpandDirTemplate.test2": {
            "name": "test2",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpandDirTemplate.test3": {
            "name": "test3",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveResults.setUp": {
            "name": "setUp",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveResults.tearDown": {
            "name": "tearDown",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveResults._assert_exists": {
            "name": "_assert_exists",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relpath": [
                    "str",
                    "int"
                ]
            }
        },
        "TestMoveResults.test_move": {
            "name": "test_move",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveResultsGit.setUp": {
            "name": "setUp",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveResultsGit.tearDown": {
            "name": "tearDown",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMoveResultsGit._assert_exists": {
            "name": "_assert_exists",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relpath": [
                    "float",
                    "str",
                    "int",
                    "None"
                ],
                "should_be_in_git": [
                    "bool"
                ]
            }
        },
        "TestMoveResultsGit.test_move": {
            "name": "test_move",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_push_pull.py": {
        "TestPushPull.test_adding_git_subdirectory": {
            "name": "test_adding_git_subdirectory",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_rclone.py": {
        "rclone_found": {
            "name": "rclone_found",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "remote_exists": {
            "name": "remote_exists",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "remote_name": [
                    "str"
                ]
            }
        },
        "TestRclone.tearDown": {
            "name": "tearDown",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRclone._get_rclone": {
            "name": "_get_rclone",
            "location": 42,
            "return": [
                "RClone"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRclone._assert_file": {
            "name": "_assert_file",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_path": [
                    "str"
                ],
                "rel_path": [
                    "str",
                    "set[str]",
                    "bool",
                    "bytes"
                ],
                "filesize": [
                    "str",
                    "None",
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "TestRclone._assert_file_removed": {
            "name": "_assert_file_removed",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_path": [
                    "str"
                ],
                "rel_path": [
                    "str"
                ]
            }
        },
        "TestRclone._assert_initial_state": {
            "name": "_assert_initial_state",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basedir": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "TestRclone._assert_final_state_copy": {
            "name": "_assert_final_state_copy",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basedir": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "TestRclone._assert_final_state_sync": {
            "name": "_assert_final_state_sync",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basedir": [
                    "str",
                    "typing.IO",
                    "list[str]"
                ]
            }
        },
        "TestRclone._touch_file": {
            "name": "_touch_file",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "cwd": []
            }
        },
        "TestRclone._init_files": {
            "name": "_init_files",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basedir": []
            }
        },
        "TestRclone._update_files": {
            "name": "_update_files",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basedir": []
            }
        },
        "TestRclone.test_copy_remote_is_master": {
            "name": "test_copy_remote_is_master",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRclone.test_sync_remote_is_master": {
            "name": "test_sync_remote_is_master",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRclone.test_copy_local_is_master": {
            "name": "test_copy_local_is_master",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRclone.test_sync_local_is_master": {
            "name": "test_sync_local_is_master",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRclone.test_no_master_initial_copy": {
            "name": "test_no_master_initial_copy",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRclone.test_real_remote": {
            "name": "test_real_remote",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRclone.test_size_only": {
            "name": "test_size_only",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_s3_resource.py": {
        "TestS3SnapFs.setUp": {
            "name": "setUp",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestS3SnapFs.tearDown": {
            "name": "tearDown",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestS3SnapFs.test_deep_path": {
            "name": "test_deep_path",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestS3SnapFs.test_with_snapshot_data": {
            "name": "test_with_snapshot_data",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestS3Resource._count_bytes_for_files": {
            "name": "_count_bytes_for_files",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "fs": [],
                "filepath": [],
                "mapping": []
            }
        },
        "TestS3Resource.test_s3_resource": {
            "name": "test_s3_resource",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_scratch_dir.py": {
        "TestScratchDir.test_default_scratch": {
            "name": "test_default_scratch",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScratchDir.test_scratch_files_not_in_snapshot": {
            "name": "test_scratch_files_not_in_snapshot",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScratchDir.test_scratch_in_subdirectory": {
            "name": "test_scratch_in_subdirectory",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestScratchDir.test_scratch_outside_of_workspace": {
            "name": "test_scratch_outside_of_workspace",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_sklearn_kit.py": {
        "TestSklearnKit._add_digits_dataset": {
            "name": "_add_digits_dataset",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSklearnKit.wrapper_tc": {
            "name": "wrapper_tc",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_save_file": [
                    "str",
                    "set[str]",
                    "bool"
                ]
            }
        },
        "TestSklearnKit.test_wrapper": {
            "name": "test_wrapper",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_snapshots.py": {
        "BaseCase.setUp": {
            "name": "setUp",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.tearDown": {
            "name": "tearDown",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase._run_dws": {
            "name": "_run_dws",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dws_args": [
                    "str",
                    "list[str]"
                ],
                "cwd": [],
                "env": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "BaseCase._run_git": {
            "name": "_run_git",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "git_args": [],
                "cwd": []
            }
        },
        "BaseCase._assert_files_same": {
            "name": "_assert_files_same",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [
                    "str",
                    "typing.IO"
                ],
                "f2": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "BaseCase._assert_file_contents": {
            "name": "_assert_file_contents",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "expected_contents": [
                    "str",
                    "bytes",
                    "typing.IO",
                    "int"
                ]
            }
        },
        "BaseCase._write_results": {
            "name": "_write_results",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "list[]",
                    "bool",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "BaseCase._assert_results": {
            "name": "_assert_results",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot_reldir": [
                    "str"
                ],
                "metrics": [
                    "bytes",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestSnapshots.test_snapshot_no_tag": {
            "name": "test_snapshot_no_tag",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSnapshots.test_restore_short_hash": {
            "name": "test_restore_short_hash",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSnapshots.test_snapshot_with_duplicate_tag": {
            "name": "test_snapshot_with_duplicate_tag",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteSnapshot.test_delete_snapshot": {
            "name": "test_delete_snapshot",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_tensorflow.py": {
        "generator_from_arrays": {
            "name": "generator_from_arrays",
            "location": 35,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "x": [
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "y": []
            }
        },
        "TestTensorflowKit.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorflowKit.tearDown": {
            "name": "tearDown",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorflowKit._take_snapshot": {
            "name": "_take_snapshot",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_numpy": {
            "name": "test_wrapper_for_numpy",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_dataset": {
            "name": "test_wrapper_for_dataset",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_generators": {
            "name": "test_wrapper_for_generators",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_keras_sequence": {
            "name": "test_wrapper_for_keras_sequence",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_dataset.get_dataset": {
            "name": "get_dataset",
            "location": 114,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_dataset.pack": {
            "name": "pack",
            "location": 132,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "features": [],
                "label": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_dataset.normalize_numeric_data": {
            "name": "normalize_numeric_data",
            "location": 157,
            "return": [],
            "arguments": {
                "data": [],
                "mean": [],
                "std": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_dataset.PackNumericFeatures.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_dataset.PackNumericFeatures.__call__": {
            "name": "__call__",
            "location": 140,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "features": [],
                "labels": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_keras_sequence.KSequence.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_keras_sequence.KSequence.__iter__": {
            "name": "__iter__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_keras_sequence.KSequence.__getitem__": {
            "name": "__getitem__",
            "location": 278,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "TestTensorflowKit.test_wrapper_for_keras_sequence.KSequence.__len__": {
            "name": "__len__",
            "location": 281,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/test_wrapper_utils.py": {
        "TestAddToHash.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddToHash.test_pandas_df": {
            "name": "test_pandas_df",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddToHash.test_pandas_series": {
            "name": "test_pandas_series",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddToHash.test_numpy": {
            "name": "test_numpy",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddToHash.test_tensorflow_tensor": {
            "name": "test_tensorflow_tensor",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "data-workspaces-core-master/tests/tf_subclassing.py": {
        "MyModel.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyModel.call": {
            "name": "call",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [
                    "int"
                ]
            }
        }
    },
    "data-workspaces-core-master/tests/transform_data1.py": {
        "transform": {
            "name": "transform",
            "location": 9,
            "return": [],
            "arguments": {
                "in_df": [
                    "list[bool]",
                    "str"
                ],
                "add_value": [
                    "bool",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "data-workspaces-core-master/tests/transform_data2.py": {
        "transform": {
            "name": "transform",
            "location": 9,
            "return": [],
            "arguments": {
                "in_df": [
                    "list[]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "data-workspaces-core-master/tests/utils_for_tests.py": {
        "write_gzipped_json": {
            "name": "write_gzipped_json",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "json_data": [
                    "int",
                    "bytes",
                    "typing.MutableMapping",
                    "list[int]",
                    "tuple[typing.Union[str,list[str]]]"
                ],
                "filepath": [
                    "str"
                ]
            }
        },
        "get_configuration_for_test": {
            "name": "get_configuration_for_test",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "test_section_name": [
                    "str",
                    "bool",
                    "None"
                ],
                "required_properties": [
                    "set[int]",
                    "None",
                    "str"
                ]
            }
        },
        "HelperMethods._run_dws": {
            "name": "_run_dws",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dws_args": [
                    "str",
                    "list[str]"
                ],
                "cwd": [],
                "env": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "HelperMethods._run_dws_with_input": {
            "name": "_run_dws_with_input",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dws_args": [
                    "str",
                    "set[str]"
                ],
                "dws_input": [
                    "str",
                    "int",
                    "set[str]",
                    "None"
                ],
                "cwd": [],
                "env": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "HelperMethods._run_git": {
            "name": "_run_git",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "git_args": [],
                "cwd": []
            }
        },
        "HelperMethods._add_api_resource": {
            "name": "_add_api_resource",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "role": [
                    "typing.Text"
                ],
                "cwd": []
            }
        },
        "HelperMethods._assert_files_same": {
            "name": "_assert_files_same",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f1": [
                    "str",
                    "typing.IO"
                ],
                "f2": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "HelperMethods._assert_file_contents": {
            "name": "_assert_file_contents",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "expected_contents": [
                    "str",
                    "bytes",
                    "typing.IO",
                    "int"
                ]
            }
        },
        "HelperMethods._assert_file_git_tracked": {
            "name": "_assert_file_git_tracked",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "repo_dir": []
            }
        },
        "HelperMethods._assert_file_not_git_tracked": {
            "name": "_assert_file_not_git_tracked",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "repo_dir": []
            }
        },
        "HelperMethods._get_resource_set": {
            "name": "_get_resource_set",
            "location": 81,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": [],
                "workspace_dir": [
                    "str"
                ]
            }
        },
        "BaseCase.setUp": {
            "name": "setUp",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase.tearDown": {
            "name": "tearDown",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseCase._setup_initial_repo": {
            "name": "_setup_initial_repo",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "create_resources": [
                    "str",
                    "None"
                ],
                "scratch_dir": [
                    "str",
                    "None"
                ],
                "hostname": [
                    "str",
                    "None"
                ]
            }
        },
        "BaseCase._clone_second_repo": {
            "name": "_clone_second_repo",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleCase.setUp": {
            "name": "setUp",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleCase.tearDown": {
            "name": "tearDown",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleCase._setup_initial_repo": {
            "name": "_setup_initial_repo",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "git_resources": [
                    "str",
                    "None"
                ],
                "api_resources": [
                    "None",
                    "str"
                ],
                "hostname": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        }
    }
}
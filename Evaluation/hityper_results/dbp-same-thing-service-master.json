{
    "dbp-same-thing-service-master/download_rocksdb.py": {},
    "dbp-same-thing-service-master/gunicorn_config.py": {
        "on_starting": {
            "name": "on_starting",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        }
    },
    "dbp-same-thing-service-master/same_thing/app.py": {
        "log_ready_message": {
            "name": "log_ready_message",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lookup": {
            "name": "lookup",
            "location": 30,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "request": []
            }
        },
        "single_uri_not_found": {
            "name": "single_uri_not_found",
            "location": 81,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "list[str]",
                    "list[]",
                    "int"
                ]
            }
        },
        "multiple_uris_not_found": {
            "name": "multiple_uris_not_found",
            "location": 87,
            "return": [
                "JSONResponse"
            ],
            "arguments": {
                "uris": [
                    "str",
                    "list[str]",
                    "list[]",
                    "int"
                ]
            }
        }
    },
    "dbp-same-thing-service-master/same_thing/db.py": {
        "get_db_path": {
            "name": "get_db_path",
            "location": 19,
            "return": [
                "str",
                "list[str]",
                "dict[str, str]"
            ],
            "arguments": {
                "db_name": [
                    "str"
                ]
            }
        },
        "get_data_db_name": {
            "name": "get_data_db_name",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "snapshot_name": [
                    "str"
                ]
            }
        },
        "get_connection": {
            "name": "get_connection",
            "location": 32,
            "return": [],
            "arguments": {
                "db_name": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "db_options": [
                    "None",
                    "str",
                    "list[str]",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "read_only": [
                    "bool"
                ]
            }
        },
        "get_connection_to_latest": {
            "name": "get_connection_to_latest",
            "location": 41,
            "return": [],
            "arguments": {
                "max_retries": [
                    "int"
                ],
                "retry": [
                    "int"
                ]
            }
        },
        "db_exists": {
            "name": "db_exists",
            "location": 56,
            "return": [],
            "arguments": {
                "db_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "looks_like_datadb": {
            "name": "looks_like_datadb",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "dir_name": [
                    "str"
                ]
            }
        },
        "get_data_dbs": {
            "name": "get_data_dbs",
            "location": 68,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "purge_data_dbs": {
            "name": "purge_data_dbs",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "keep_n_latest": [
                    "int"
                ]
            }
        },
        "split_values": {
            "name": "split_values",
            "location": 88,
            "return": [
                "list[]"
            ],
            "arguments": {
                "value_bytes": [
                    "str"
                ]
            }
        },
        "is_cluster_membership": {
            "name": "is_cluster_membership",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "value_bytes": [
                    "str"
                ]
            }
        },
        "sorted_cluster": {
            "name": "sorted_cluster",
            "location": 100,
            "return": [
                "tuple[typing.Union[str,int,list[str],dict[str, typing.Any],list[],set[str]]]"
            ],
            "arguments": {
                "value_bytes": [
                    "str",
                    "int"
                ]
            }
        },
        "get_rocksdb_options": {
            "name": "get_rocksdb_options",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "replace_db": {
            "name": "replace_db",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "db_name": [
                    "str",
                    "None"
                ],
                "temporary_name": [
                    "str",
                    "None"
                ]
            }
        },
        "StringAddOperator.merge": {
            "name": "merge",
            "location": 111,
            "return": [
                "tuple[typing.Union[bool,str,float,list[str],None,dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "str",
                    "typing.Mapping",
                    "None",
                    "typing.Callable[, ]"
                ],
                "existing_value": [
                    "list[str]"
                ],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "list[str]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "StringAddOperator.name": {
            "name": "name",
            "location": 118,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dbp-same-thing-service-master/same_thing/exceptions.py": {},
    "dbp-same-thing-service-master/same_thing/loader.py": {},
    "dbp-same-thing-service-master/same_thing/parser.py": {
        "parse_triple": {
            "name": "parse_triple",
            "location": 19,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "ntriple_line": [
                    "str"
                ]
            }
        }
    },
    "dbp-same-thing-service-master/same_thing/query.py": {
        "get_cluster": {
            "name": "get_cluster",
            "location": 19,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "uri": [
                    "typing.IO",
                    "str"
                ]
            }
        }
    },
    "dbp-same-thing-service-master/same_thing/restore.py": {
        "get_backup_key": {
            "name": "get_backup_key",
            "location": 16,
            "return": [],
            "arguments": {
                "backup_id": []
            }
        },
        "create_backup": {
            "name": "create_backup",
            "location": 20,
            "return": [],
            "arguments": {
                "data_db": [],
                "snapshot_name": [],
                "admin_connection": []
            }
        },
        "restore_backup": {
            "name": "restore_backup",
            "location": 33,
            "return": [],
            "arguments": {
                "backup_id": [],
                "db_name": []
            }
        },
        "get_available_snapshots": {
            "name": "get_available_snapshots",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "restore_latest_with_name": {
            "name": "restore_latest_with_name",
            "location": 61,
            "return": [],
            "arguments": {
                "snapshot_name": []
            }
        },
        "restore_interactively": {
            "name": "restore_interactively",
            "location": 74,
            "return": [],
            "arguments": {}
        }
    },
    "dbp-same-thing-service-master/same_thing/sink.py": {
        "get_snapshot_key": {
            "name": "get_snapshot_key",
            "location": 30,
            "return": [
                "bytes"
            ],
            "arguments": {
                "snapshot_name": [
                    "str"
                ]
            }
        },
        "StreamingBZ2File.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "bool"
                ],
                "chunk_size": [
                    "int"
                ]
            }
        }
    },
    "dbp-same-thing-service-master/same_thing/source.py": {
        "get_snapshot_path": {
            "name": "get_snapshot_path",
            "location": 65,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "snapshot_name": [
                    "str"
                ]
            }
        },
        "get_timestamp": {
            "name": "get_timestamp",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "print_with_timestamp": {
            "name": "print_with_timestamp",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "dbp-same-thing-service-master/same_thing/sparql_queries.py": {},
    "dbp-same-thing-service-master/same_thing/__init__.py": {}
}
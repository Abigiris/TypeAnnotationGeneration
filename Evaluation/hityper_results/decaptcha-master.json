{
    "decaptcha-master/setup.py": {},
    "decaptcha-master/decaptcha/base.py": {
        "GroundState.find_button": {
            "name": "find_button",
            "location": 23,
            "return": [
                "locateOnScreen"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "list[typing.Text]"
                ]
            }
        },
        "GroundState.find_mrblue": {
            "name": "find_mrblue",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundState.refresh_puzzle": {
            "name": "refresh_puzzle",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "button": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "GroundState.extract_puzzle": {
            "name": "extract_puzzle",
            "location": 55,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str"
                ],
                "wordpuzzle": [
                    "bool"
                ],
                "puzzle": [
                    "bool"
                ]
            }
        },
        "GroundState.extract_word": {
            "name": "extract_word",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "wordpuzzle_img": [
                    "str"
                ]
            }
        },
        "GroundState.attack": {
            "name": "attack",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "button": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "GroundState.find_grid": {
            "name": "find_grid",
            "location": 107,
            "return": [
                "tuple[typing.Union[typing.Text,int]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "button": [
                    "None",
                    "int",
                    "list[]"
                ]
            }
        },
        "GroundState.select_things": {
            "name": "select_things",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "things": [
                    "str"
                ],
                "grid": [
                    "str"
                ]
            }
        },
        "GroundState.set_model": {
            "name": "set_model",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "model_path": [
                    "str"
                ]
            }
        },
        "GroundState.is_classifiable": {
            "name": "is_classifiable",
            "location": 283,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "typing.Type",
                    "list[str]"
                ],
                "word": [
                    "str",
                    "int",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "GroundState.extract_things": {
            "name": "extract_things",
            "location": 290,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "None",
                    "typing.Type",
                    "complex",
                    "bytes"
                ],
                "word": [
                    "str",
                    "int",
                    "None",
                    "typing.Type",
                    "complex",
                    "bytes"
                ],
                "puzzle_img": []
            }
        },
        "GroundState.invert_img": {
            "name": "invert_img",
            "location": 317,
            "return": [
                "str",
                "list[str]",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "dict[str, str]"
            ],
            "arguments": {
                "img": [
                    "str",
                    "bytes"
                ]
            }
        },
        "GroundState.is_collision": {
            "name": "is_collision",
            "location": 330,
            "return": [
                "bool"
            ],
            "arguments": {
                "edge1": [
                    "str"
                ],
                "edge2": [
                    "str"
                ]
            }
        },
        "GroundState.nxm": {
            "name": "nxm",
            "location": 347,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "m": [
                    "int"
                ],
                "cell": [
                    "int"
                ]
            }
        },
        "GroundState.grid_margins": {
            "name": "grid_margins",
            "location": 365,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "m": [
                    "int"
                ]
            }
        },
        "GroundState.cell_dimensions": {
            "name": "cell_dimensions",
            "location": 373,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "grid_width": [
                    "int"
                ],
                "grid_height": [
                    "int"
                ],
                "grid_margin_x": [
                    "int",
                    "str"
                ],
                "grid_margin_y": [
                    "int",
                    "str"
                ],
                "n": [
                    "int"
                ],
                "m": [
                    "int"
                ]
            }
        },
        "GroundState.rms_diff": {
            "name": "rms_diff",
            "location": 401,
            "return": [],
            "arguments": {
                "img1": [],
                "img2": []
            }
        }
    },
    "decaptcha-master/decaptcha/fsm.py": {
        "State.run": {
            "name": "run",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.next": {
            "name": "next",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initialstate": [
                    "int",
                    "float"
                ]
            }
        },
        "StateMachine.run": {
            "name": "run",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decaptcha-master/decaptcha/humanclick.py": {
        "human_click": {
            "name": "human_click",
            "location": 10,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "left": [
                    "int",
                    "typing.Sequence[int]"
                ],
                "top": [
                    "int",
                    "tuple[]",
                    "str"
                ],
                "right": [
                    "int",
                    "typing.Sequence[int]"
                ],
                "bottom": [
                    "int",
                    "tuple[]",
                    "str"
                ]
            }
        }
    },
    "decaptcha-master/decaptcha/imgai.py": {
        "ImgAI.set_model": {
            "name": "set_model",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str"
                ]
            }
        },
        "ImgAI.object_lib": {
            "name": "object_lib",
            "location": 16,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImgAI.object_detector": {
            "name": "object_detector",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "int",
                    "typing.Mapping"
                ],
                "filename": [],
                "minprobability": []
            }
        }
    },
    "decaptcha-master/decaptcha/notarobot.py": {
        "OpenGround.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "killswitch": [
                    "bool"
                ]
            }
        },
        "OpenGround.run": {
            "name": "run",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenGround.next": {
            "name": "next",
            "location": 48,
            "return": [
                "DispersiveGround",
                "FacileGround"
            ],
            "arguments": {
                "self": []
            }
        },
        "FacileGround.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "float"
                ],
                "cached_puzzle_img": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "FacileGround.run": {
            "name": "run",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FacileGround.next": {
            "name": "next",
            "location": 104,
            "return": [
                "DifficultGround",
                "ContentiousGround"
            ],
            "arguments": {
                "self": []
            }
        },
        "DifficultGround.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "list[typing.Text]"
                ]
            }
        },
        "DifficultGround.run": {
            "name": "run",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DifficultGround.next": {
            "name": "next",
            "location": 154,
            "return": [
                "FacileGround",
                "OpenGround"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentiousGround.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "float"
                ]
            }
        },
        "ContentiousGround.run": {
            "name": "run",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentiousGround.next": {
            "name": "next",
            "location": 215,
            "return": [
                "GroundOfIntersectingHighways",
                "DifficultGround",
                "OpenGround"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundOfIntersectingHighways.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "float"
                ],
                "word": [
                    "int",
                    "float"
                ],
                "puzzle_img": [
                    "int",
                    "float"
                ]
            }
        },
        "GroundOfIntersectingHighways.run": {
            "name": "run",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroundOfIntersectingHighways.next": {
            "name": "next",
            "location": 251,
            "return": [
                "SeriousGround",
                "HemmedInGround"
            ],
            "arguments": {
                "self": []
            }
        },
        "HemmedInGround.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "float"
                ],
                "word": [
                    "int",
                    "float"
                ],
                "puzzle_img": [
                    "int",
                    "float"
                ]
            }
        },
        "HemmedInGround.run": {
            "name": "run",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HemmedInGround.next": {
            "name": "next",
            "location": 301,
            "return": [
                "DesperateGround",
                "SeriousGround"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriousGround.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "float"
                ],
                "word": [
                    "int",
                    "float"
                ],
                "puzzle_img": [
                    "int",
                    "float"
                ]
            }
        },
        "SeriousGround.run": {
            "name": "run",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeriousGround.next": {
            "name": "next",
            "location": 366,
            "return": [
                "DesperateGround",
                "SeriousGround"
            ],
            "arguments": {
                "self": []
            }
        },
        "DesperateGround.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "puzzle_img": [
                    "None",
                    "int",
                    "float"
                ],
                "order": [
                    "list[typing.Text]"
                ]
            }
        },
        "DesperateGround.run": {
            "name": "run",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DesperateGround.next": {
            "name": "next",
            "location": 402,
            "return": [
                "DispersiveGround",
                "FacileGround",
                "OpenGround"
            ],
            "arguments": {
                "self": []
            }
        },
        "DispersiveGround.__init__": {
            "name": "__init__",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "victory": [
                    "bool"
                ],
                "killswitch": [
                    "bool"
                ]
            }
        },
        "DispersiveGround.run": {
            "name": "run",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DispersiveGround.next": {
            "name": "next",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotARobot.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_state": [
                    "OpenGround"
                ]
            }
        },
        "NotARobot.run": {
            "name": "run",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotARobot.set_model": {
            "name": "set_model",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_path": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "NotARobot.reset": {
            "name": "reset",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decaptcha-master/decaptcha/ocr.py": {
        "ocr": {
            "name": "ocr",
            "location": 11,
            "return": [],
            "arguments": {
                "img": [],
                "left": [
                    "int"
                ],
                "upper": [
                    "int"
                ],
                "right": [
                    "None"
                ],
                "lower": [
                    "None"
                ]
            }
        }
    },
    "decaptcha-master/decaptcha/version.py": {},
    "decaptcha-master/decaptcha/__init__.py": {},
    "decaptcha-master/tests/test_janet.py": {
        "TestJanet.test_browser_setup": {
            "name": "test_browser_setup",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJanet.janet": {
            "name": "janet",
            "location": 16,
            "return": [
                "NotARobot"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJanet.test_janet": {
            "name": "test_janet",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "janet": []
            }
        },
        "TestJanet.test_janet_reset": {
            "name": "test_janet_reset",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "janet": []
            }
        }
    },
    "decaptcha-master/tests/test_unittests.py": {
        "test_version": {
            "name": "test_version",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "bot": {
            "name": "bot",
            "location": 14,
            "return": [
                "DispersiveGround"
            ],
            "arguments": {}
        },
        "test_is_collision": {
            "name": "test_is_collision",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "typing.Callable[..., collections.abc.Awaitable[typing.Any]]",
                    "typing.Iterator",
                    "list[]",
                    "typing.Sequence[typing.Sequence[str]]"
                ]
            }
        },
        "test_nxm": {
            "name": "test_nxm",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str",
                    "float"
                ]
            }
        },
        "test_grid_margins": {
            "name": "test_grid_margins",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int"
                ]
            }
        },
        "test_cell_dimensions": {
            "name": "test_cell_dimensions",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "decaptcha-master/tests/__init__.py": {}
}
{
    "decompose-master/setup.py": {},
    "decompose-master/decompose/sklearn.py": {
        "DECOMPOSE.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "modelDirectory": [
                    "bool"
                ],
                "priors": [
                    "tuple[CenNormal]"
                ],
                "n_components": [
                    "int"
                ],
                "isFullyObserved": [
                    "bool"
                ],
                "dtype": [],
                "maxIterations": [
                    "int"
                ],
                "cv": [
                    "None",
                    "int",
                    "float"
                ],
                "noiseUniformity": [],
                "stopCriterionInit": [
                    "LlhStall"
                ],
                "stopCriterionEM": [
                    "LlhStall"
                ],
                "stopCriterionBCD": [
                    "LlhImprovementThreshold"
                ],
                "device": [
                    "typing.Text"
                ]
            }
        },
        "DECOMPOSE.noiseUniformity": {
            "name": "noiseUniformity",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.cv": {
            "name": "cv",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.n_components": {
            "name": "n_components",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.components_": {
            "name": "components_",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.variance_ratio_": {
            "name": "variance_ratio_",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.trainMask": {
            "name": "trainMask",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.testMask": {
            "name": "testMask",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.observedMask": {
            "name": "observedMask",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DECOMPOSE.__calc_variance_ratio": {
            "name": "__calc_variance_ratio",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "list[str]",
                    "int",
                    "str"
                ],
                "U": []
            }
        },
        "DECOMPOSE.fit": {
            "name": "fit",
            "location": 112,
            "return": [
                "DECOMPOSE"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "typing.Sequence[int]",
                    "typing.Sequence[float]"
                ]
            }
        },
        "DECOMPOSE.fit_transform": {
            "name": "fit_transform",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "DECOMPOSE.transform": {
            "name": "transform",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "typing.Sequence[int]",
                    "typing.Sequence[float]",
                    "tuple[typing.Union[float,float]]"
                ],
                "transformModelDirectory": [
                    "bool",
                    "float",
                    "bytearray"
                ]
            }
        }
    },
    "decompose-master/decompose/version.py": {},
    "decompose-master/decompose/__init__.py": {},
    "decompose-master/decompose/cv/cv.py": {
        "CV.isLowrank": {
            "name": "isLowrank",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CV.lowrankMask": {
            "name": "lowrankMask",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "CV.mask": {
            "name": "mask",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "Block.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nFolds": [
                    "int"
                ],
                "foldNumber": [
                    "int"
                ]
            }
        },
        "Block.nFolds": {
            "name": "nFolds",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Block.foldNumber": {
            "name": "foldNumber",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Block.isLowrank": {
            "name": "isLowrank",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Block.lowrankMask": {
            "name": "lowrankMask",
            "location": 40,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "str"
                ]
            }
        },
        "Block.mask": {
            "name": "mask",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Block.testMask": {
            "name": "testMask",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "Mf": [
                    "int",
                    "float"
                ],
                "foldNumber": [
                    "int",
                    "float"
                ],
                "nFolds": [
                    "int",
                    "float"
                ],
                "nValues": [
                    "str",
                    "float",
                    "int",
                    "list[float]"
                ]
            }
        }
    },
    "decompose-master/decompose/cv/__init__.py": {},
    "decompose-master/decompose/data/lowRank.py": {
        "LowRank.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "int"
                ],
                "M_train": [
                    "tuple[int]"
                ],
                "M_test": [
                    "tuple[int]"
                ],
                "dtype": []
            }
        },
        "LowRank.tensorReconstruction": {
            "name": "tensorReconstruction",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "U": []
            }
        },
        "LowRank.training": {
            "name": "training",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LowRank.test": {
            "name": "test",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LowRank.training_input_fn": {
            "name": "training_input_fn",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LowRank.test_input_fn": {
            "name": "test_input_fn",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LowRank.__var_training": {
            "name": "__var_training",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LowRank.__var_test": {
            "name": "__var_test",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LowRank.residuals_training": {
            "name": "residuals_training",
            "location": 128,
            "return": [
                "int",
                "str",
                "list[]",
                "set[]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "float",
                    "int",
                    "list[float]"
                ]
            }
        },
        "LowRank.var_expl_training": {
            "name": "var_expl_training",
            "location": 144,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "LowRank.residuals_test": {
            "name": "residuals_test",
            "location": 158,
            "return": [
                "int",
                "str",
                "list[]",
                "set[]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "typing.Callable[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "LowRank.var_expl_test": {
            "name": "var_expl_test",
            "location": 174,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "typing.Type",
                    "str"
                ]
            }
        }
    },
    "decompose-master/decompose/data/random.py": {
        "Random.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [
                    "tuple[int]"
                ],
                "dtype": []
            }
        },
        "Random.input_fn": {
            "name": "input_fn",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Random.M": {
            "name": "M",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Random.input_fn.f": {
            "name": "f",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "decompose-master/decompose/data/__init__.py": {},
    "decompose-master/decompose/distributions/algorithms.py": {
        "Algorithms.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "nSamples": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ]
            }
        },
        "Algorithms.mode": {
            "name": "mode",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "Algorithms.pdf": {
            "name": "pdf",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "Algorithms.fit": {
            "name": "fit",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "Algorithms.llh": {
            "name": "llh",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "Algorithms.fitLatents": {
            "name": "fitLatents",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/cenDoubleLomax.py": {
        "CenDoubleLomax.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "alpha": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Any"
                ],
                "beta": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Any"
                ],
                "tau": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Any"
                ],
                "properties": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "CenDoubleLomax.parameterInfo": {
            "name": "parameterInfo",
            "location": 28,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "CenDoubleLomax.mu": {
            "name": "mu",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenDoubleLomax.alpha": {
            "name": "alpha",
            "location": 48,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "alpha": []
            }
        },
        "CenDoubleLomax.beta": {
            "name": "beta",
            "location": 56,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "CenDoubleLomax.tau": {
            "name": "tau",
            "location": 64,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "CenDoubleLomax.nonNegative": {
            "name": "nonNegative",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenDoubleLomax.homogenous": {
            "name": "homogenous",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenDoubleLomax.cond": {
            "name": "cond",
            "location": 75,
            "return": [
                "CenLaplace"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenDoubleLomax.shape": {
            "name": "shape",
            "location": 87,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenDoubleLomax.latentShape": {
            "name": "latentShape",
            "location": 91,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenDoubleLomaxAlgorithms.py": {
        "CenDoubleLomaxAlgorithms.sample": {
            "name": "sample",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [],
                "nSamples": [
                    "int",
                    "str",
                    "typing.Container",
                    "list[]"
                ]
            }
        },
        "CenDoubleLomaxAlgorithms.mode": {
            "name": "mode",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "CenDoubleLomaxAlgorithms.pdf": {
            "name": "pdf",
            "location": 28,
            "return": [
                "float"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "bool"
                ],
                "data": [
                    "bool"
                ]
            }
        },
        "CenDoubleLomaxAlgorithms.llh": {
            "name": "llh",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": []
            }
        },
        "CenDoubleLomaxAlgorithms.fit": {
            "name": "fit",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, typing.Any]",
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, typing.Any]",
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "CenDoubleLomaxAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "str"
                ],
                "data": [
                    "str"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/cenLaplace.py": {
        "CenLaplace.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "beta": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ],
                "properties": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "CenLaplace.parameterInfo": {
            "name": "parameterInfo",
            "location": 25,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "CenLaplace.mu": {
            "name": "mu",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenLaplaceAlgorithms.py": {
        "CenLaplaceAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [
                    "tuple[object]"
                ],
                "nSamples": [
                    "int",
                    "str",
                    "dict[, ]",
                    "dict[str, object]"
                ]
            }
        },
        "CenLaplaceAlgorithms.mode": {
            "name": "mode",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "CenLaplaceAlgorithms.pdf": {
            "name": "pdf",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "CenLaplaceAlgorithms.fit": {
            "name": "fit",
            "location": 34,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "CenLaplaceAlgorithms.llh": {
            "name": "llh",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "dict[str, tensorflow.Tensor]",
                    "dict[, ]"
                ]
            }
        },
        "CenLaplaceAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 49,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnElasticNetAlgorithms.py": {
        "CenNnElasticNetAlgorithms.mode": {
            "name": "mode",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "CenNnElasticNetAlgorithms.fit": {
            "name": "fit",
            "location": 16,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]",
                    "int",
                    "None"
                ],
                "data": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnFullyElasticNet.py": {
        "CenNnFullyElasticNet.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "b": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ],
                "mu": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ],
                "betaExponential": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ],
                "tau": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ],
                "alpha": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ],
                "beta": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ],
                "tauLomax": [
                    "None",
                    "str",
                    "bytes",
                    "int"
                ],
                "properties": [
                    "None",
                    "float",
                    "str"
                ]
            }
        },
        "CenNnFullyElasticNet.parameterInfo": {
            "name": "parameterInfo",
            "location": 34,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "CenNnFullyElasticNet.b": {
            "name": "b",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "b": []
            }
        },
        "CenNnFullyElasticNet.mu": {
            "name": "mu",
            "location": 62,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "CenNnFullyElasticNet.tau": {
            "name": "tau",
            "location": 107,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "CenNnFullyElasticNet.betaExponential": {
            "name": "betaExponential",
            "location": 78,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "betaExponential": []
            }
        },
        "CenNnFullyElasticNet.muLomax": {
            "name": "muLomax",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNet.alpha": {
            "name": "alpha",
            "location": 91,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "alpha": []
            }
        },
        "CenNnFullyElasticNet.beta": {
            "name": "beta",
            "location": 99,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "CenNnFullyElasticNet.nonNegative": {
            "name": "nonNegative",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNet.homogenous": {
            "name": "homogenous",
            "location": 115,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNet.cond": {
            "name": "cond",
            "location": 118,
            "return": [
                "CenNnFullyElasticNetCond"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNet.shape": {
            "name": "shape",
            "location": 140,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNet.latentShape": {
            "name": "latentShape",
            "location": 144,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnFullyElasticNetAlgorithms.py": {
        "CenNnFullyElasticNetAlgorithms.getParameters": {
            "name": "getParameters",
            "location": 15,
            "return": [
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "bool",
                    "typing.Callable[, ]",
                    "list[dict[str, typing.Any]]"
                ],
                "parameters": []
            }
        },
        "CenNnFullyElasticNetAlgorithms.sample": {
            "name": "sample",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [],
                "parameters": [
                    "int",
                    "typing.Type",
                    "None"
                ],
                "nSamples": [
                    "int",
                    "str",
                    "typing.Container",
                    "list[]"
                ]
            }
        },
        "CenNnFullyElasticNetAlgorithms.mode": {
            "name": "mode",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "CenNnFullyElasticNetAlgorithms.pdf": {
            "name": "pdf",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": [],
                "parameters": [
                    "Exception",
                    "bytes"
                ],
                "data": []
            }
        },
        "CenNnFullyElasticNetAlgorithms.fit": {
            "name": "fit",
            "location": 64,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [
                    "Exception",
                    "bytes"
                ],
                "data": [
                    "float",
                    "bytes"
                ]
            }
        },
        "CenNnFullyElasticNetAlgorithms.llh": {
            "name": "llh",
            "location": 102,
            "return": [],
            "arguments": {
                "cls": [],
                "parameters": [
                    "Exception",
                    "bytes"
                ],
                "data": [
                    "None",
                    "bytes"
                ]
            }
        },
        "CenNnFullyElasticNetAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 116,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [],
                "parameters": [
                    "Exception",
                    "bytes"
                ],
                "data": [
                    "typing.Sequence[str]",
                    "bytes"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnFullyElasticNetCond.py": {
        "CenNnFullyElasticNetCond.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "b": [
                    "None",
                    "str",
                    "bool",
                    "bytes"
                ],
                "mu": [
                    "None",
                    "str",
                    "bool",
                    "bytes"
                ],
                "tau": [
                    "None",
                    "str",
                    "bool",
                    "bytes"
                ],
                "betaExponential": [
                    "None",
                    "str",
                    "bool",
                    "bytes"
                ],
                "beta": [
                    "None",
                    "str",
                    "bool",
                    "bytes"
                ],
                "properties": [
                    "None",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "CenNnFullyElasticNetCond.parameterInfo": {
            "name": "parameterInfo",
            "location": 31,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "CenNnFullyElasticNetCond.b": {
            "name": "b",
            "location": 48,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "b": []
            }
        },
        "CenNnFullyElasticNetCond.mu": {
            "name": "mu",
            "location": 56,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "CenNnFullyElasticNetCond.tau": {
            "name": "tau",
            "location": 64,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "CenNnFullyElasticNetCond.betaExponential": {
            "name": "betaExponential",
            "location": 72,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "betaExponential": []
            }
        },
        "CenNnFullyElasticNetCond.beta": {
            "name": "beta",
            "location": 80,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "CenNnFullyElasticNetCond.nonNegative": {
            "name": "nonNegative",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNetCond.homogenous": {
            "name": "homogenous",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNetCond.cond": {
            "name": "cond",
            "location": 91,
            "return": [
                "CenNnFullyElasticNetCond"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNetCond.shape": {
            "name": "shape",
            "location": 95,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnFullyElasticNetCond.latentShape": {
            "name": "latentShape",
            "location": 99,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnNormal.py": {
        "CenNnNormal.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "tau": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ],
                "properties": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "CenNnNormal.parameterInfo": {
            "name": "parameterInfo",
            "location": 24,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "CenNnNormal.mu": {
            "name": "mu",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnNormalAlgorithms.py": {
        "CenNnNormalAlgorithms.sample": {
            "name": "sample",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [
                    "tuple[object]"
                ],
                "nSamples": [
                    "float",
                    "None",
                    "frozenset",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "CenNnNormalAlgorithms.mode": {
            "name": "mode",
            "location": 19,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "CenNnNormalAlgorithms.pdf": {
            "name": "pdf",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "bytes"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "CenNnNormalAlgorithms.fit": {
            "name": "fit",
            "location": 33,
            "return": [
                "dict[typing.Text, float]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": []
            }
        },
        "CenNnNormalAlgorithms.llh": {
            "name": "llh",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "typing.Mapping",
                    "typing.Any",
                    "None",
                    "dict[, ]",
                    "set[str]"
                ]
            }
        },
        "CenNnNormalAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 49,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnT.py": {
        "CenNnT.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "Psi": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Any"
                ],
                "nu": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Any"
                ],
                "tau": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Any"
                ],
                "properties": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "CenNnT.parameterInfo": {
            "name": "parameterInfo",
            "location": 28,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "CenNnT.mu": {
            "name": "mu",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CenNnT.Psi": {
            "name": "Psi",
            "location": 48,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "Psi": []
            }
        },
        "CenNnT.nu": {
            "name": "nu",
            "location": 56,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "nu": []
            }
        },
        "CenNnT.tau": {
            "name": "tau",
            "location": 64,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "CenNnT.nonNegative": {
            "name": "nonNegative",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnT.homogenous": {
            "name": "homogenous",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnT.cond": {
            "name": "cond",
            "location": 75,
            "return": [
                "NnNormal"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnT.shape": {
            "name": "shape",
            "location": 92,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNnT.latentShape": {
            "name": "latentShape",
            "location": 96,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNnTAlgorithms.py": {
        "CenNnTAlgorithms.sample": {
            "name": "sample",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [],
                "nSamples": [
                    "tuple[tensorflow.Tensor]",
                    "int"
                ]
            }
        },
        "CenNnTAlgorithms.mode": {
            "name": "mode",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "CenNnTAlgorithms.pdf": {
            "name": "pdf",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "str",
                    "int"
                ]
            }
        },
        "CenNnTAlgorithms.llh": {
            "name": "llh",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "int"
                ]
            }
        },
        "CenNnTAlgorithms.fit": {
            "name": "fit",
            "location": 44,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]",
                    "typing.Type",
                    "float"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]",
                    "typing.Type",
                    "float"
                ]
            }
        },
        "CenNnTAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]",
                    "int",
                    "str"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/cenNormal.py": {
        "CenNormal.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "tau": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ],
                "properties": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "CenNormal.parameterInfo": {
            "name": "parameterInfo",
            "location": 24,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "CenNormal.mu": {
            "name": "mu",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNormalAlgorithms.py": {
        "CenNormalAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [
                    "tuple[object]"
                ],
                "nSamples": [
                    "int",
                    "str",
                    "dict[, ]",
                    "dict[str, object]"
                ]
            }
        },
        "CenNormalAlgorithms.mode": {
            "name": "mode",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "CenNormalAlgorithms.pdf": {
            "name": "pdf",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "CenNormalAlgorithms.fit": {
            "name": "fit",
            "location": 34,
            "return": [
                "dict[typing.Text, float]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": []
            }
        },
        "CenNormalAlgorithms.llh": {
            "name": "llh",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "dict[str, tensorflow.Tensor]",
                    "dict[, ]"
                ]
            }
        },
        "CenNormalAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 50,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/cenNormalRankOne.py": {
        "CenNormalRankOne.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "tau0": [
                    "None",
                    "bool",
                    "float",
                    "str",
                    "typing.Callable[str, bool]",
                    "typing.Any"
                ],
                "tau1": [
                    "None",
                    "bool",
                    "float",
                    "str",
                    "typing.Callable[str, bool]",
                    "typing.Any"
                ],
                "properties": [
                    "None",
                    "bool",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "CenNormalRankOne.parameterInfo": {
            "name": "parameterInfo",
            "location": 26,
            "return": [
                "dict[typing.Text, tuple[int]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "CenNormalRankOne.mu": {
            "name": "mu",
            "location": 36,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNormalRankOne.tau0": {
            "name": "tau0",
            "location": 46,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tau0": []
            }
        },
        "CenNormalRankOne.tau1": {
            "name": "tau1",
            "location": 54,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tau1": []
            }
        },
        "CenNormalRankOne.nonNegative": {
            "name": "nonNegative",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNormalRankOne.homogenous": {
            "name": "homogenous",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNormalRankOne.cond": {
            "name": "cond",
            "location": 65,
            "return": [
                "CenNormalRankOne"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNormalRankOne.shape": {
            "name": "shape",
            "location": 69,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenNormalRankOne.latentShape": {
            "name": "latentShape",
            "location": 74,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenNormalRankOneAlgorithms.py": {
        "CenNormalRankOneAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [],
                "nSamples": [
                    "int",
                    "float"
                ]
            }
        },
        "CenNormalRankOneAlgorithms.mode": {
            "name": "mode",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": []
            }
        },
        "CenNormalRankOneAlgorithms.pdf": {
            "name": "pdf",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "dict[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "CenNormalRankOneAlgorithms.fitGamma": {
            "name": "fitGamma",
            "location": 38,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "tau": [
                    "None",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "CenNormalRankOneAlgorithms.fit": {
            "name": "fit",
            "location": 56,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict[str, tensorflow.Tensor]",
                    "None"
                ],
                "parameters": [],
                "data": []
            }
        },
        "CenNormalRankOneAlgorithms.llh": {
            "name": "llh",
            "location": 92,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "float",
                    "typing.Type",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "CenNormalRankOneAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 101,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/cenNormalRankOneHeuristicAlgorithms.py": {
        "CenNormalRankOneHeuristicAlgorithms.fit": {
            "name": "fit",
            "location": 12,
            "return": [
                "dict[typing.Text, float]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "int"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/cenT.py": {
        "CenT.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "Psi": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Any"
                ],
                "nu": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Any"
                ],
                "tau": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Any"
                ],
                "properties": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "CenT.parameterInfo": {
            "name": "parameterInfo",
            "location": 28,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "CenT.mu": {
            "name": "mu",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/cenTAlgorithms.py": {
        "CenTAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [
                    "str"
                ],
                "nSamples": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "CenTAlgorithms.mode": {
            "name": "mode",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "CenTAlgorithms.pdf": {
            "name": "pdf",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "typing.Mapping",
                    "typing.Any",
                    "None",
                    "set[str]",
                    "dict[, ]"
                ]
            }
        },
        "CenTAlgorithms.llh": {
            "name": "llh",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "dict[str, tensorflow.Tensor]",
                    "typing.Mapping",
                    "typing.Any",
                    "None",
                    "set[str]"
                ]
            }
        },
        "CenTAlgorithms.fit": {
            "name": "fit",
            "location": 43,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "int"
                ],
                "parameters": [],
                "data": []
            }
        },
        "CenTAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 71,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "int"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/chopin2011.py": {
        "updateTensor": {
            "name": "updateTensor",
            "location": 11,
            "return": [],
            "arguments": {
                "x": [
                    "str"
                ],
                "mask": [
                    "str",
                    "int",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "newValues": [
                    "int",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "randint": {
            "name": "randint",
            "location": 23,
            "return": [],
            "arguments": {
                "low": [
                    "int"
                ],
                "high": [
                    "int"
                ]
            }
        },
        "gather": {
            "name": "gather",
            "location": 30,
            "return": [],
            "arguments": {
                "data": [
                    "bool",
                    "bytes"
                ],
                "indexes": [
                    "dict[, ]"
                ]
            }
        },
        "gather_nd": {
            "name": "gather_nd",
            "location": 38,
            "return": [],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "bytes"
                ],
                "indexes": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "count_nonzero": {
            "name": "count_nonzero",
            "location": 46,
            "return": [],
            "arguments": {
                "data": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "axis": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "keep_dims": [
                    "bool"
                ],
                "dtype": []
            }
        },
        "rejectionSamplingExp": {
            "name": "rejectionSamplingExp",
            "location": 53,
            "return": [],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "rejectionSamplingNorm": {
            "name": "rejectionSamplingNorm",
            "location": 88,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "typing.Mapping",
                    "list[str]"
                ],
                "b": [
                    "int",
                    "typing.Mapping",
                    "list[str]"
                ]
            }
        },
        "ppf": {
            "name": "ppf",
            "location": 111,
            "return": [],
            "arguments": {
                "a": [
                    "list[int]",
                    "float"
                ],
                "b": [
                    "int",
                    "float",
                    "list[int]"
                ]
            }
        },
        "rightTail": {
            "name": "rightTail",
            "location": 121,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "a": [
                    "list[int]",
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "getConsts": {
            "name": "getConsts",
            "location": 132,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "dtype": [
                    "int",
                    "float"
                ]
            }
        },
        "twoRegions": {
            "name": "twoRegions",
            "location": 147,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "list[int]",
                    "float"
                ],
                "b": [
                    "int",
                    "str"
                ],
                "k": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "allOther": {
            "name": "allOther",
            "location": 203,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "list[]"
                ],
                "b": [
                    "str",
                    "None",
                    "bool",
                    "list[list[float]]",
                    "float"
                ],
                "k": [
                    "int",
                    "float"
                ]
            }
        },
        "chopin": {
            "name": "chopin",
            "location": 273,
            "return": [],
            "arguments": {
                "aAll": [
                    "int",
                    "list[typing.Any]",
                    "None",
                    "list[list[str]]"
                ],
                "bAll": [
                    "int",
                    "list[typing.Any]",
                    "None",
                    "list[list[str]]"
                ]
            }
        },
        "rtstdnorm": {
            "name": "rtstdnorm",
            "location": 394,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "aAll": [
                    "int"
                ],
                "bAll": [
                    "int",
                    "float"
                ]
            }
        },
        "rtnorm2": {
            "name": "rtnorm2",
            "location": 431,
            "return": [],
            "arguments": {
                "a": [
                    "float"
                ],
                "b": [
                    "float"
                ],
                "mu": [],
                "sigma": [],
                "size": [
                    "int"
                ]
            }
        },
        "rtnormFlipped": {
            "name": "rtnormFlipped",
            "location": 488,
            "return": [],
            "arguments": {
                "a": [
                    "float"
                ],
                "b": [
                    "float"
                ],
                "mu": [],
                "sigma": []
            }
        },
        "rtnorm": {
            "name": "rtnorm",
            "location": 507,
            "return": [],
            "arguments": {
                "a": [
                    "float"
                ],
                "b": [
                    "float"
                ],
                "mu": [],
                "sigma": [],
                "nSamples": [
                    "int"
                ]
            }
        },
        "rejectionSamplingExp.notStop": {
            "name": "notStop",
            "location": 62,
            "return": [],
            "arguments": {
                "z": [],
                "e": []
            }
        },
        "rejectionSamplingExp.body": {
            "name": "body",
            "location": 67,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "z": [],
                "e": []
            }
        },
        "rejectionSamplingNorm.notStop": {
            "name": "notStop",
            "location": 93,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "rejectionSamplingNorm.body": {
            "name": "body",
            "location": 98,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "r": []
            }
        },
        "chopin.notAccepted": {
            "name": "notAccepted",
            "location": 328,
            "return": [],
            "arguments": {
                "rAll": [],
                "acceptedAll": [],
                "kAll": []
            }
        },
        "chopin.body": {
            "name": "body",
            "location": 331,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "rAll": [],
                "acceptedAll": [],
                "kAll": []
            }
        }
    },
    "decompose-master/decompose/distributions/distribution.py": {
        "Properties.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "dtype": [],
                "drawType": [],
                "updateType": [],
                "persistent": [
                    "bool"
                ]
            }
        },
        "Properties.name": {
            "name": "name",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.dtype": {
            "name": "dtype",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.drawType": {
            "name": "drawType",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.updateType": {
            "name": "updateType",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Properties.persistent": {
            "name": "persistent",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "None",
                    "float"
                ],
                "parameters": [
                    "bool",
                    "typing.Type",
                    "str",
                    "tuple[int]"
                ],
                "properties": [
                    "typing.Type",
                    "dict[, ]",
                    "str",
                    "None"
                ],
                "hyperParameters": [
                    "tuple[]"
                ]
            }
        },
        "Distribution.__init": {
            "name": "__init",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Distribution.get_parameters": {
            "name": "get_parameters",
            "location": 137,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.set_parameters": {
            "name": "set_parameters",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parameters": []
            }
        },
        "Distribution.random": {
            "name": "random",
            "location": 149,
            "return": [
                "str",
                "list[str]",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ],
                "name": [
                    "typing.Text"
                ],
                "dtype": [],
                "drawType": [],
                "updateType": [],
                "persistent": [
                    "bool"
                ]
            }
        },
        "Distribution.__mul__": {
            "name": "__mul__",
            "location": 196,
            "return": [
                "dict[str, str]",
                "set[str]",
                "dict[, ]",
                "typing.DefaultDict",
                "list[int]",
                "str",
                "typing.Counter"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "dict[, ]",
                    "dict[str, list[str]]",
                    "typing.Mapping"
                ]
            }
        },
        "Distribution.__rmul__": {
            "name": "__rmul__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Distribution.__getitem__": {
            "name": "__getitem__",
            "location": 236,
            "return": [
                "int",
                "typing.DefaultDict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "list[str]",
                    "str",
                    "None"
                ]
            }
        },
        "Distribution.parameterInfo": {
            "name": "parameterInfo",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "Distribution.vars": {
            "name": "vars",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "parameterName": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Distribution.persistent": {
            "name": "persistent",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.algorithms": {
            "name": "algorithms",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.parameterNames": {
            "name": "parameterNames",
            "location": 327,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.shape": {
            "name": "shape",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.latentShape": {
            "name": "latentShape",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.dtype": {
            "name": "dtype",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.name": {
            "name": "name",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.nonNegative": {
            "name": "nonNegative",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.drawType": {
            "name": "drawType",
            "location": 380,
            "return": [
                "str",
                "dict[str, dict[str, typing.Any]]",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "drawType": []
            }
        },
        "Distribution.updateType": {
            "name": "updateType",
            "location": 384,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "updateType": []
            }
        },
        "Distribution.homogenous": {
            "name": "homogenous",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.draw": {
            "name": "draw",
            "location": 400,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Distribution.update": {
            "name": "update",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "dict[str, int]",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "Distribution.cond": {
            "name": "cond",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.sample": {
            "name": "sample",
            "location": 447,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "nSamples": [
                    "int",
                    "None",
                    "typing.OrderedDict"
                ]
            }
        },
        "Distribution.mode": {
            "name": "mode",
            "location": 465,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Distribution.fit": {
            "name": "fit",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "Distribution.fitLatents": {
            "name": "fitLatents",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "dict[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "Distribution.pdf": {
            "name": "pdf",
            "location": 509,
            "return": [
                "str",
                "dict[, ]",
                "float",
                "list[dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "Distribution.llh": {
            "name": "llh",
            "location": 525,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Distribution.getEstimator": {
            "name": "getEstimator",
            "location": 542,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "bool",
                    "typing.Any",
                    "list[str]",
                    "typing.Type"
                ],
                "distType": [
                    "str",
                    "None",
                    "bool",
                    "typing.Any",
                    "list[str]",
                    "typing.Type"
                ],
                "path": [
                    "typing.Text"
                ]
            }
        },
        "parameterProperty.__init__": {
            "name": "__init__",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fget": [
                    "None",
                    "typing.Sequence[typing.Callable[, ]]",
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "str"
                ],
                "fset": [
                    "None",
                    "str",
                    "int",
                    "float",
                    "typing.Callable[typing.Any, None]"
                ],
                "fdel": [
                    "None",
                    "str",
                    "int",
                    "float",
                    "typing.Callable[typing.Any, None]"
                ],
                "doc": [
                    "None",
                    "tuple[typing.Union[float,float]]",
                    "list[\"Issue\"]",
                    "str",
                    "bool"
                ],
                "name": [
                    "None",
                    "str",
                    "list[]",
                    "bool"
                ]
            }
        },
        "parameterProperty.__set__": {
            "name": "__set__",
            "location": 620,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bytes",
                    "int"
                ],
                "value": [
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "float"
                ]
            }
        },
        "parameterProperty.__get__": {
            "name": "__get__",
            "location": 627,
            "return": [
                "parameterProperty"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "None",
                    "int",
                    "float"
                ],
                "objtype": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "parameterProperty.__delete__": {
            "name": "__delete__",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "parameterProperty.getter": {
            "name": "getter",
            "location": 639,
            "return": [],
            "arguments": {
                "self": [],
                "fget": [
                    "str",
                    "Exception"
                ]
            }
        },
        "parameterProperty.setter": {
            "name": "setter",
            "location": 642,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "parameterProperty.deleter": {
            "name": "deleter",
            "location": 652,
            "return": [],
            "arguments": {
                "self": [],
                "fdel": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Distribution.getEstimator.model_fn": {
            "name": "model_fn",
            "location": 559,
            "return": [],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": []
            }
        },
        "parameterProperty.setter.noop": {
            "name": "noop",
            "location": 648,
            "return": [],
            "arguments": {
                "fset": []
            }
        }
    },
    "decompose-master/decompose/distributions/exponential.py": {
        "Exponential.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "beta": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ],
                "properties": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Exponential.parameterInfo": {
            "name": "parameterInfo",
            "location": 25,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "Exponential.beta": {
            "name": "beta",
            "location": 38,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "Exponential.nonNegative": {
            "name": "nonNegative",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exponential.homogenous": {
            "name": "homogenous",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exponential.cond": {
            "name": "cond",
            "location": 49,
            "return": [
                "Exponential"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exponential.shape": {
            "name": "shape",
            "location": 53,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exponential.latentShape": {
            "name": "latentShape",
            "location": 57,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/exponentialAlgorithms.py": {
        "ExponentialAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [
                    "str",
                    "list[]"
                ],
                "nSamples": [
                    "int",
                    "float"
                ]
            }
        },
        "ExponentialAlgorithms.mode": {
            "name": "mode",
            "location": 19,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "ExponentialAlgorithms.pdf": {
            "name": "pdf",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "int"
                ]
            }
        },
        "ExponentialAlgorithms.fit": {
            "name": "fit",
            "location": 35,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "ExponentialAlgorithms.llh": {
            "name": "llh",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "int"
                ]
            }
        },
        "ExponentialAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 53,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/jumpNormal.py": {
        "JumpNormal.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "mu": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "tau": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "nu": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "beta": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "properties": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "JumpNormal.parameterInfo": {
            "name": "parameterInfo",
            "location": 28,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "JumpNormal.mu": {
            "name": "mu",
            "location": 44,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "JumpNormal.tau": {
            "name": "tau",
            "location": 52,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "JumpNormal.nu": {
            "name": "nu",
            "location": 60,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "nu": []
            }
        },
        "JumpNormal.beta": {
            "name": "beta",
            "location": 68,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "JumpNormal.nonNegative": {
            "name": "nonNegative",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JumpNormal.homogenous": {
            "name": "homogenous",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JumpNormal.cond": {
            "name": "cond",
            "location": 79,
            "return": [
                "JumpNormal"
            ],
            "arguments": {
                "self": []
            }
        },
        "JumpNormal.shape": {
            "name": "shape",
            "location": 83,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JumpNormal.latentShape": {
            "name": "latentShape",
            "location": 87,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/jumpNormalAlgorithms.py": {
        "JumpNormalAlgorithms.alpha": {
            "name": "alpha",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "str",
                    "bool"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "JumpNormalAlgorithms.mode": {
            "name": "mode",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": []
            }
        },
        "JumpNormalAlgorithms.sample": {
            "name": "sample",
            "location": 64,
            "return": [],
            "arguments": {
                "cls": [],
                "parameters": [
                    "str"
                ],
                "nSamples": [
                    "int",
                    "str",
                    "typing.Container",
                    "list[]"
                ]
            }
        },
        "JumpNormalAlgorithms.logConstant": {
            "name": "logConstant",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "dict[, ]",
                    "str",
                    "typing.Callable[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "JumpNormalAlgorithms.pdf": {
            "name": "pdf",
            "location": 121,
            "return": [],
            "arguments": {
                "cls": [],
                "parameters": [
                    "dict[str, tensorflow.Tensor]",
                    "dict[, ]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]",
                    "dict[, ]"
                ]
            }
        },
        "JumpNormalAlgorithms.llh": {
            "name": "llh",
            "location": 127,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]"
                ],
                "parameters": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "JumpNormalAlgorithms.fit": {
            "name": "fit",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "JumpNormalAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 147,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/laplace.py": {
        "Laplace.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "mu": [
                    "None",
                    "bool",
                    "float",
                    "str",
                    "typing.Callable[str, bool]",
                    "typing.Any"
                ],
                "beta": [
                    "None",
                    "bool",
                    "float",
                    "str",
                    "typing.Callable[str, bool]",
                    "typing.Any"
                ],
                "properties": [
                    "None",
                    "bool",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "Laplace.parameterInfo": {
            "name": "parameterInfo",
            "location": 26,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "Laplace.mu": {
            "name": "mu",
            "location": 40,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "Laplace.beta": {
            "name": "beta",
            "location": 48,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "Laplace.nonNegative": {
            "name": "nonNegative",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Laplace.homogenous": {
            "name": "homogenous",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Laplace.cond": {
            "name": "cond",
            "location": 59,
            "return": [
                "Laplace"
            ],
            "arguments": {
                "self": []
            }
        },
        "Laplace.shape": {
            "name": "shape",
            "location": 63,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Laplace.latentShape": {
            "name": "latentShape",
            "location": 67,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/laplaceAlgorithms.py": {
        "LaplaceAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [],
                "nSamples": [
                    "int",
                    "float"
                ]
            }
        },
        "LaplaceAlgorithms.mode": {
            "name": "mode",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "LaplaceAlgorithms.pdf": {
            "name": "pdf",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "dict[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "LaplaceAlgorithms.fit": {
            "name": "fit",
            "location": 32,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": []
            }
        },
        "LaplaceAlgorithms.llh": {
            "name": "llh",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "float",
                    "typing.Type",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "LaplaceAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 48,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/lomax.py": {
        "Lomax.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "alpha": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Any"
                ],
                "beta": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Any"
                ],
                "tau": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "typing.Any"
                ],
                "properties": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "Lomax.parameterInfo": {
            "name": "parameterInfo",
            "location": 28,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "Lomax.mu": {
            "name": "mu",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lomax.alpha": {
            "name": "alpha",
            "location": 48,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "alpha": []
            }
        },
        "Lomax.beta": {
            "name": "beta",
            "location": 56,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "beta": []
            }
        },
        "Lomax.tau": {
            "name": "tau",
            "location": 64,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "Lomax.nonNegative": {
            "name": "nonNegative",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lomax.homogenous": {
            "name": "homogenous",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lomax.cond": {
            "name": "cond",
            "location": 75,
            "return": [
                "Exponential"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lomax.shape": {
            "name": "shape",
            "location": 87,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lomax.latentShape": {
            "name": "latentShape",
            "location": 91,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/lomaxAlgorithms.py": {
        "LomaxAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [],
                "nSamples": [
                    "int",
                    "str",
                    "typing.Container",
                    "list[]"
                ]
            }
        },
        "LomaxAlgorithms.mode": {
            "name": "mode",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "LomaxAlgorithms.pdf": {
            "name": "pdf",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [],
                "parameters": [
                    "dict[str, tensorflow.Tensor]",
                    "typing.Mapping",
                    "typing.Any",
                    "None",
                    "dict[, ]",
                    "typing.MutableMapping"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]",
                    "typing.Mapping",
                    "typing.Any",
                    "None",
                    "dict[, ]",
                    "typing.MutableMapping"
                ]
            }
        },
        "LomaxAlgorithms.llh": {
            "name": "llh",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": []
            }
        },
        "LomaxAlgorithms.f": {
            "name": "f",
            "location": 37,
            "return": [
                "float"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "y": [
                    "float",
                    "int"
                ],
                "beta": [
                    "bool"
                ],
                "tn": [
                    "bool"
                ]
            }
        },
        "LomaxAlgorithms.fit": {
            "name": "fit",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": []
            }
        },
        "LomaxAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 96,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "complex"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/nnNormal.py": {
        "NnNormal.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "mu": [
                    "None",
                    "bool",
                    "float",
                    "str",
                    "typing.Callable[str, bool]",
                    "typing.Any"
                ],
                "tau": [
                    "None",
                    "bool",
                    "float",
                    "str",
                    "typing.Callable[str, bool]",
                    "typing.Any"
                ],
                "properties": [
                    "None",
                    "bool",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "NnNormal.parameterInfo": {
            "name": "parameterInfo",
            "location": 26,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "NnNormal.mu": {
            "name": "mu",
            "location": 40,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "NnNormal.tau": {
            "name": "tau",
            "location": 48,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "NnNormal.nonNegative": {
            "name": "nonNegative",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NnNormal.homogenous": {
            "name": "homogenous",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NnNormal.cond": {
            "name": "cond",
            "location": 59,
            "return": [
                "NnNormal"
            ],
            "arguments": {
                "self": []
            }
        },
        "NnNormal.shape": {
            "name": "shape",
            "location": 63,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NnNormal.latentShape": {
            "name": "latentShape",
            "location": 67,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/nnNormalAlgorithms.py": {
        "NnNormalAlgorithms.sample": {
            "name": "sample",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [],
                "nSamples": [
                    "int",
                    "float"
                ]
            }
        },
        "NnNormalAlgorithms.mode": {
            "name": "mode",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "NnNormalAlgorithms.pdf": {
            "name": "pdf",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "NnNormalAlgorithms.llh": {
            "name": "llh",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "int"
                ]
            }
        },
        "NnNormalAlgorithms.gradStep": {
            "name": "gradStep",
            "location": 57,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "cls": [],
                "data": [],
                "mu": [
                    "int"
                ],
                "tau": [
                    "bool"
                ],
                "v": [
                    "float",
                    "int"
                ],
                "e": [
                    "float",
                    "int"
                ]
            }
        },
        "NnNormalAlgorithms.fit": {
            "name": "fit",
            "location": 85,
            "return": [],
            "arguments": {
                "cls": [],
                "parameters": [],
                "data": [
                    "dict[str, T]",
                    "None",
                    "bool"
                ]
            }
        },
        "NnNormalAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 118,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/nnUniform.py": {
        "NnUniform.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "dummy": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ],
                "properties": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "NnUniform.parameterInfo": {
            "name": "parameterInfo",
            "location": 25,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "NnUniform.shape": {
            "name": "shape",
            "location": 34,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NnUniform.latentShape": {
            "name": "latentShape",
            "location": 38,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NnUniform.dummy": {
            "name": "dummy",
            "location": 46,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dummy": []
            }
        },
        "NnUniform.nonNegative": {
            "name": "nonNegative",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NnUniform.homogenous": {
            "name": "homogenous",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NnUniform.cond": {
            "name": "cond",
            "location": 57,
            "return": [
                "NnUniform"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/nnUniformAlgorithms.py": {
        "NnUniformAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "nSamples": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ]
            }
        },
        "NnUniformAlgorithms.mode": {
            "name": "mode",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "NnUniformAlgorithms.pdf": {
            "name": "pdf",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "NnUniformAlgorithms.fit": {
            "name": "fit",
            "location": 24,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "NnUniformAlgorithms.llh": {
            "name": "llh",
            "location": 30,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, T]",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "NnUniformAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 37,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/normal.py": {
        "Normal.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "mu": [
                    "None",
                    "bool",
                    "float",
                    "str",
                    "typing.Callable[str, bool]",
                    "typing.Any"
                ],
                "tau": [
                    "None",
                    "bool",
                    "float",
                    "str",
                    "typing.Callable[str, bool]",
                    "typing.Any"
                ],
                "properties": [
                    "None",
                    "bool",
                    "dict[, ]",
                    "float"
                ]
            }
        },
        "Normal.parameterInfo": {
            "name": "parameterInfo",
            "location": 25,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "Normal.mu": {
            "name": "mu",
            "location": 39,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "Normal.tau": {
            "name": "tau",
            "location": 47,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "Normal.nonNegative": {
            "name": "nonNegative",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Normal.homogenous": {
            "name": "homogenous",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Normal.cond": {
            "name": "cond",
            "location": 58,
            "return": [
                "Normal"
            ],
            "arguments": {
                "self": []
            }
        },
        "Normal.shape": {
            "name": "shape",
            "location": 62,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Normal.latentShape": {
            "name": "latentShape",
            "location": 66,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/normalAlgorithms.py": {
        "NormalAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [],
                "nSamples": [
                    "int",
                    "float"
                ]
            }
        },
        "NormalAlgorithms.mode": {
            "name": "mode",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "NormalAlgorithms.pdf": {
            "name": "pdf",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "dict[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "NormalAlgorithms.fit": {
            "name": "fit",
            "location": 31,
            "return": [
                "dict[typing.Text, float]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "list[float]",
                    "bytes"
                ]
            }
        },
        "NormalAlgorithms.llh": {
            "name": "llh",
            "location": 40,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "float",
                    "typing.Type",
                    "tuple[typing.Union[int,int]]",
                    "int"
                ]
            }
        },
        "NormalAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 47,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/normalCenNnFullyElasticNetCond.py": {
        "NormalCenNnFullyElasticNetCond.fromUnordered": {
            "name": "fromUnordered",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "d0": [
                    "typing.AbstractSet",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "d1": [
                    "typing.AbstractSet",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "NormalCenNnFullyElasticNetCond.product": {
            "name": "product",
            "location": 23,
            "return": [
                "NnNormal"
            ],
            "arguments": {
                "self": [],
                "n0": [
                    "int",
                    "float"
                ],
                "n1": [
                    "int"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/normalExponential.py": {
        "NormalExponential.fromUnordered": {
            "name": "fromUnordered",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "d0": [
                    "dict[, ]",
                    "int"
                ],
                "d1": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "NormalExponential.product": {
            "name": "product",
            "location": 23,
            "return": [
                "NnNormal"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str"
                ],
                "e": [
                    "int",
                    "str"
                ]
            }
        },
        "NormalExponential.mu": {
            "name": "mu",
            "location": 29,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "list[int]",
                    "list[]"
                ],
                "e": [
                    "int",
                    "list[int]",
                    "list[]"
                ]
            }
        },
        "NormalExponential.tau": {
            "name": "tau",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "float",
                    "str"
                ],
                "e": [
                    "int",
                    "float",
                    "str"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/normalLaplace.py": {
        "NormalLaplace.fromUnordered": {
            "name": "fromUnordered",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "d0": [
                    "dict[, ]",
                    "int"
                ],
                "d1": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "NormalLaplace.product": {
            "name": "product",
            "location": 24,
            "return": [
                "JumpNormal"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "list[]"
                ],
                "l": [
                    "int",
                    "list[]"
                ]
            }
        },
        "NormalLaplace.mu": {
            "name": "mu",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "l": [
                    "int"
                ]
            }
        },
        "NormalLaplace.tau": {
            "name": "tau",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "l": [
                    "int"
                ]
            }
        },
        "NormalLaplace.nu": {
            "name": "nu",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "l": [
                    "int"
                ]
            }
        },
        "NormalLaplace.beta": {
            "name": "beta",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "l": [
                    "int"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/normalNnNormal.py": {
        "NormalNnNormal.fromUnordered": {
            "name": "fromUnordered",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "d0": [
                    "typing.Sequence[typing.Mapping]"
                ],
                "d1": [
                    "typing.Sequence[typing.Mapping]"
                ]
            }
        },
        "NormalNnNormal.product": {
            "name": "product",
            "location": 21,
            "return": [
                "NnNormal"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str"
                ],
                "nnn": [
                    "int",
                    "str"
                ]
            }
        },
        "NormalNnNormal.mu": {
            "name": "mu",
            "location": 27,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str"
                ],
                "nnn": [
                    "int"
                ]
            }
        },
        "NormalNnNormal.tau": {
            "name": "tau",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "nnn": [
                    "int"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/normalNnUniform.py": {
        "NormalNnUniform.fromUnordered": {
            "name": "fromUnordered",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "d0": [
                    "typing.Sequence[typing.Mapping]"
                ],
                "d1": [
                    "typing.Sequence[typing.Mapping]"
                ]
            }
        },
        "NormalNnUniform.product": {
            "name": "product",
            "location": 24,
            "return": [
                "NnNormal"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str"
                ],
                "u": [
                    "int",
                    "str"
                ]
            }
        },
        "NormalNnUniform.mu": {
            "name": "mu",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "list[int]",
                    "str"
                ],
                "u": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "NormalNnUniform.tau": {
            "name": "tau",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "list[int]",
                    "str"
                ],
                "u": [
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/normalNormal.py": {
        "NormalNormal.fromUnordered": {
            "name": "fromUnordered",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "d0": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "int",
                    "typing.Mapping"
                ],
                "d1": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "NormalNormal.product": {
            "name": "product",
            "location": 20,
            "return": [
                "Normal"
            ],
            "arguments": {
                "self": [],
                "n0": [
                    "int",
                    "str"
                ],
                "n1": [
                    "int",
                    "str"
                ]
            }
        },
        "NormalNormal.mu": {
            "name": "mu",
            "location": 27,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "n0": [
                    "int",
                    "list[]"
                ],
                "n1": [
                    "int",
                    "list[]"
                ]
            }
        },
        "NormalNormal.tau": {
            "name": "tau",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "n0": [
                    "int"
                ],
                "n1": [
                    "int"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/normalUniform.py": {
        "NormalUniform.fromUnordered": {
            "name": "fromUnordered",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "d0": [
                    "dict[, ]",
                    "int"
                ],
                "d1": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "NormalUniform.product": {
            "name": "product",
            "location": 23,
            "return": [
                "Normal"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str"
                ],
                "u": [
                    "int",
                    "str"
                ]
            }
        },
        "NormalUniform.mu": {
            "name": "mu",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "list[int]",
                    "str"
                ],
                "u": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "NormalUniform.tau": {
            "name": "tau",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "list[int]",
                    "str"
                ],
                "u": [
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/product.py": {
        "Product.fromUnordered": {
            "name": "fromUnordered",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d0": [
                    "dict[, ]",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ],
                "d1": [
                    "dict[, ]",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Product.productParams": {
            "name": "productParams",
            "location": 17,
            "return": [
                "dict[typing.Text, Properties]"
            ],
            "arguments": {
                "self": [],
                "d0": [
                    "list[str]",
                    "tuple[typing.Union[float,float,float]]"
                ],
                "d1": [
                    "list[str]",
                    "tuple[typing.Union[float,float,float]]"
                ]
            }
        },
        "Product.name": {
            "name": "name",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "d0": [
                    "str",
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ],
                "d1": [
                    "str",
                    "int",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Product.homogenous": {
            "name": "homogenous",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "d0": [
                    "str",
                    "typing.Any",
                    "None",
                    "int"
                ],
                "d1": [
                    "str",
                    "typing.Any",
                    "None",
                    "int"
                ]
            }
        },
        "Product.drawType": {
            "name": "drawType",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "d0": [
                    "bool",
                    "typing.Type",
                    "typing.Iterable[typing.Any]"
                ],
                "d1": [
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "Product.updateType": {
            "name": "updateType",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "d0": [
                    "typing.BinaryIO"
                ],
                "d1": [
                    "set[str]",
                    "str"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/productDistLookup.py": {
        "ProductDict.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDict.__getattr__": {
            "name": "__getattr__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ProductDict.__ProductDict.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductDict.__ProductDict.lookup": {
            "name": "lookup",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "d0": [],
                "d1": []
            }
        }
    },
    "decompose-master/decompose/distributions/properties.py": {},
    "decompose-master/decompose/distributions/t.py": {
        "T.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "mu": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "Psi": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "nu": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "tau": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ],
                "properties": [
                    "None",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "T.parameterInfo": {
            "name": "parameterInfo",
            "location": 29,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "T.mu": {
            "name": "mu",
            "location": 45,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "mu": []
            }
        },
        "T.Psi": {
            "name": "Psi",
            "location": 53,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "Psi": []
            }
        },
        "T.nu": {
            "name": "nu",
            "location": 61,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "nu": []
            }
        },
        "T.tau": {
            "name": "tau",
            "location": 69,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tau": []
            }
        },
        "T.nonNegative": {
            "name": "nonNegative",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "T.homogenous": {
            "name": "homogenous",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "T.cond": {
            "name": "cond",
            "location": 80,
            "return": [
                "Normal"
            ],
            "arguments": {
                "self": []
            }
        },
        "T.shape": {
            "name": "shape",
            "location": 97,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "T.latentShape": {
            "name": "latentShape",
            "location": 101,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/tAlgorithms.py": {
        "TAlgorithms.sample": {
            "name": "sample",
            "location": 12,
            "return": [],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [],
                "nSamples": [
                    "tuple[tensorflow.Tensor]",
                    "int"
                ]
            }
        },
        "TAlgorithms.mode": {
            "name": "mode",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "str"
                ]
            }
        },
        "TAlgorithms.pdf": {
            "name": "pdf",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "str",
                    "Exception"
                ]
            }
        },
        "TAlgorithms.llh": {
            "name": "llh",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "int",
                    "bytes",
                    "float",
                    "list[str]",
                    "str"
                ]
            }
        },
        "TAlgorithms.nuStep": {
            "name": "nuStep",
            "location": 38,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type",
                    "typing.Sequence[]"
                ],
                "nu": [],
                "n": [
                    "float",
                    "int"
                ],
                "delta": [],
                "p": [
                    "float"
                ]
            }
        },
        "TAlgorithms.fit": {
            "name": "fit",
            "location": 55,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "int"
                ],
                "parameters": [],
                "data": []
            }
        },
        "TAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 84,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [],
                "data": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/tfppf.py": {
        "tfppf": {
            "name": "tfppf",
            "location": 76,
            "return": [],
            "arguments": {
                "y0": [
                    "list[]"
                ]
            }
        },
        "polevl": {
            "name": "polevl",
            "location": 123,
            "return": [
                "int"
            ],
            "arguments": {
                "x": [
                    "bool"
                ],
                "coef": [
                    "bytes"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/trnorm.py": {
        "updateTensor": {
            "name": "updateTensor",
            "location": 11,
            "return": [],
            "arguments": {
                "x": [
                    "str"
                ],
                "mask": [
                    "str",
                    "int",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "newValues": [
                    "int",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "randint": {
            "name": "randint",
            "location": 23,
            "return": [],
            "arguments": {
                "low": [
                    "int"
                ],
                "high": [
                    "int"
                ]
            }
        },
        "gather": {
            "name": "gather",
            "location": 30,
            "return": [],
            "arguments": {
                "data": [
                    "bool",
                    "bytes"
                ],
                "indexes": [
                    "dict[, ]"
                ]
            }
        },
        "gather_nd": {
            "name": "gather_nd",
            "location": 38,
            "return": [],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "bytes"
                ],
                "indexes": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "count_nonzero": {
            "name": "count_nonzero",
            "location": 46,
            "return": [],
            "arguments": {
                "data": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "axis": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "keep_dims": [
                    "bool"
                ],
                "dtype": []
            }
        },
        "rejectionSamplingExp": {
            "name": "rejectionSamplingExp",
            "location": 53,
            "return": [],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "rejectionSamplingNorm": {
            "name": "rejectionSamplingNorm",
            "location": 88,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "typing.Mapping",
                    "list[str]"
                ],
                "b": [
                    "int",
                    "typing.Mapping",
                    "list[str]"
                ]
            }
        },
        "ppf": {
            "name": "ppf",
            "location": 111,
            "return": [],
            "arguments": {
                "a": [
                    "list[int]",
                    "float"
                ],
                "b": [
                    "int",
                    "float",
                    "list[int]"
                ]
            }
        },
        "rightTail": {
            "name": "rightTail",
            "location": 121,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "a": [
                    "list[int]",
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "getConsts": {
            "name": "getConsts",
            "location": 132,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "dtype": [
                    "int",
                    "float"
                ]
            }
        },
        "twoRegions": {
            "name": "twoRegions",
            "location": 147,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "list[int]",
                    "float"
                ],
                "b": [
                    "int",
                    "str"
                ],
                "k": [
                    "int",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "allOther": {
            "name": "allOther",
            "location": 203,
            "return": [],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "list[]"
                ],
                "b": [
                    "str",
                    "None",
                    "bool",
                    "list[list[float]]",
                    "float"
                ],
                "k": [
                    "int",
                    "float"
                ]
            }
        },
        "chopin": {
            "name": "chopin",
            "location": 273,
            "return": [],
            "arguments": {
                "aAll": [
                    "int",
                    "list[typing.Any]",
                    "None",
                    "list[list[str]]"
                ],
                "bAll": [
                    "int",
                    "list[typing.Any]",
                    "None",
                    "list[list[str]]"
                ]
            }
        },
        "rtstdnorm": {
            "name": "rtstdnorm",
            "location": 394,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "aAll": [
                    "int"
                ],
                "bAll": [
                    "int",
                    "float"
                ]
            }
        },
        "rtnorm2": {
            "name": "rtnorm2",
            "location": 431,
            "return": [],
            "arguments": {
                "a": [
                    "float"
                ],
                "b": [
                    "float"
                ],
                "mu": [],
                "sigma": [],
                "size": [
                    "int"
                ]
            }
        },
        "rtnormFlipped": {
            "name": "rtnormFlipped",
            "location": 488,
            "return": [],
            "arguments": {
                "a": [
                    "float"
                ],
                "b": [
                    "float"
                ],
                "mu": [],
                "sigma": [],
                "size": [
                    "int"
                ]
            }
        },
        "rtnorm": {
            "name": "rtnorm",
            "location": 507,
            "return": [],
            "arguments": {
                "a": [
                    "float"
                ],
                "b": [
                    "float"
                ],
                "mu": [],
                "sigma": [],
                "size": [
                    "int"
                ]
            }
        },
        "rejectionSamplingExp.notStop": {
            "name": "notStop",
            "location": 62,
            "return": [],
            "arguments": {
                "z": [],
                "e": []
            }
        },
        "rejectionSamplingExp.body": {
            "name": "body",
            "location": 67,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "z": [],
                "e": []
            }
        },
        "rejectionSamplingNorm.notStop": {
            "name": "notStop",
            "location": 93,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "rejectionSamplingNorm.body": {
            "name": "body",
            "location": 98,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "r": []
            }
        },
        "chopin.notAccepted": {
            "name": "notAccepted",
            "location": 328,
            "return": [],
            "arguments": {
                "rAll": [],
                "acceptedAll": [],
                "kAll": []
            }
        },
        "chopin.body": {
            "name": "body",
            "location": 331,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "rAll": [],
                "acceptedAll": [],
                "kAll": []
            }
        }
    },
    "decompose-master/decompose/distributions/uniform.py": {
        "Uniform.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "algorithms": [],
                "dummy": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[str]"
                ],
                "properties": [
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Uniform.parameterInfo": {
            "name": "parameterInfo",
            "location": 25,
            "return": [
                "dict[typing.Text, tuple[typing.Union[tuple[int],bool]]]"
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "tuple[int]"
                ],
                "latentShape": [
                    "tuple[]"
                ]
            }
        },
        "Uniform.shape": {
            "name": "shape",
            "location": 34,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Uniform.latentShape": {
            "name": "latentShape",
            "location": 38,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Uniform.dummy": {
            "name": "dummy",
            "location": 46,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "dummy": []
            }
        },
        "Uniform.nonNegative": {
            "name": "nonNegative",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Uniform.homogenous": {
            "name": "homogenous",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Uniform.cond": {
            "name": "cond",
            "location": 57,
            "return": [
                "Uniform"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/distributions/uniformAlgorithms.py": {
        "UniformAlgorithms.sample": {
            "name": "sample",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "parameters": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ],
                "nSamples": [
                    "list[str]",
                    "Exception",
                    "None",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[int]"
                ]
            }
        },
        "UniformAlgorithms.mode": {
            "name": "mode",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ],
                "parameters": [
                    "typing.Callable[, ]",
                    "typing.Type",
                    "dict[, ]"
                ]
            }
        },
        "UniformAlgorithms.pdf": {
            "name": "pdf",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "UniformAlgorithms.fit": {
            "name": "fit",
            "location": 23,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        },
        "UniformAlgorithms.llh": {
            "name": "llh",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "complex"
                ]
            }
        },
        "UniformAlgorithms.fitLatents": {
            "name": "fitLatents",
            "location": 33,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "parameters": [
                    "dict[str, tensorflow.Tensor]"
                ],
                "data": [
                    "dict[str, tensorflow.Tensor]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/__init__.py": {},
    "decompose-master/decompose/distributions/tests/test_cenDoubleLomaxAlgorithms.py": {
        "test_cenDoubleLomax_sample": {
            "name": "test_cenDoubleLomax_sample",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cenDoubleLomax_mode": {
            "name": "test_cenDoubleLomax_mode",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cenDoubleLomax_pdf": {
            "name": "test_cenDoubleLomax_pdf",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cenDoubleLomax_llh": {
            "name": "test_cenDoubleLomax_llh",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cenDoubleLomax_fit": {
            "name": "test_cenDoubleLomax_fit",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_cenLaplaceAlgorithms.py": {
        "test_cenLaplace_fit": {
            "name": "test_cenLaplace_fit",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_cenNnFullyElasticNetAlgorithms.py": {
        "test_cenNnFullyElasticNet_sample": {
            "name": "test_cenNnFullyElasticNet_sample",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_cenNnNormalAlgorithms.py": {
        "test_cenNnNormal_fit": {
            "name": "test_cenNnNormal_fit",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_cenNnTAlgorithms.py": {
        "test_t_sample": {
            "name": "test_t_sample",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_mode": {
            "name": "test_t_mode",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_pdf": {
            "name": "test_t_pdf",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_llh": {
            "name": "test_t_llh",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_fit": {
            "name": "test_t_fit",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_cenNormalAlgorithms.py": {
        "test_cenNormal_fit": {
            "name": "test_cenNormal_fit",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_cenTAlgorithms.py": {
        "test_t_fit": {
            "name": "test_t_fit",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_exponentialAlgorithms.py": {
        "test_exponential_sample": {
            "name": "test_exponential_sample",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_mode": {
            "name": "test_exponential_mode",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_pdf": {
            "name": "test_exponential_pdf",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_llh": {
            "name": "test_exponential_llh",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exponential_fit": {
            "name": "test_exponential_fit",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_laplaceAlgorithms.py": {
        "test_laplace_sample": {
            "name": "test_laplace_sample",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_laplace_mode": {
            "name": "test_laplace_mode",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_laplace_pdf": {
            "name": "test_laplace_pdf",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_laplace_llh": {
            "name": "test_laplace_llh",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_laplace_fit": {
            "name": "test_laplace_fit",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_lomaxAlgorithms.py": {
        "test_lomax_sample": {
            "name": "test_lomax_sample",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lomax_mode": {
            "name": "test_lomax_mode",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lomax_pdf": {
            "name": "test_lomax_pdf",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lomax_llh": {
            "name": "test_lomax_llh",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lomax_fit": {
            "name": "test_lomax_fit",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/test_nnNormalAlgorithms.py": {
        "test_nnNormal_fit": {
            "name": "test_nnNormal_fit",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "dtype": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/tests/test_normalAlgorithms.py": {
        "test_normal_sample": {
            "name": "test_normal_sample",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "str",
                    "typing.Mapping"
                ],
                "dtype": []
            }
        },
        "test_normal_mode": {
            "name": "test_normal_mode",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [],
                "dtype": [
                    "list[dict[str, typing.Any]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_normal_pdf": {
            "name": "test_normal_pdf",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "str",
                    "typing.Mapping"
                ],
                "dtype": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_normal_llh": {
            "name": "test_normal_llh",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "str",
                    "typing.Mapping"
                ],
                "dtype": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_normal_fit": {
            "name": "test_normal_fit",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "str",
                    "typing.Mapping"
                ],
                "dtype": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "decompose-master/decompose/distributions/tests/test_tAlgorithms.py": {
        "test_t_sample": {
            "name": "test_t_sample",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_mode": {
            "name": "test_t_mode",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_pdf": {
            "name": "test_t_pdf",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_llh": {
            "name": "test_t_llh",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_t_fit": {
            "name": "test_t_fit",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "decompose-master/decompose/distributions/tests/__init__.py": {},
    "decompose-master/decompose/likelihoods/allSpecificNormal2dLikelihood.py": {
        "AllSpecificNormal2dLikelihood.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [
                    "bool",
                    "str"
                ],
                "K": [
                    "int"
                ],
                "tau": [
                    "float"
                ],
                "drawType": [],
                "updateType": [],
                "dtype": []
            }
        },
        "AllSpecificNormal2dLikelihood.init": {
            "name": "init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "typing.Iterable[]",
                    "str"
                ]
            }
        },
        "AllSpecificNormal2dLikelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AllSpecificNormal2dLikelihood.residuals": {
            "name": "residuals",
            "location": 41,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[U, bool]",
                    "typing.Container",
                    "int"
                ],
                "X": [
                    "bool"
                ]
            }
        },
        "AllSpecificNormal2dLikelihood.llh": {
            "name": "llh",
            "location": 48,
            "return": [
                "list[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "int"
                ],
                "X": [
                    "int"
                ]
            }
        },
        "AllSpecificNormal2dLikelihood.loss": {
            "name": "loss",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "U": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[U, bool]",
                    "typing.Container",
                    "int"
                ],
                "X": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[..., bool]",
                    "typing.Container",
                    "int"
                ]
            }
        },
        "AllSpecificNormal2dLikelihood.update": {
            "name": "update",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "X": [
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "AllSpecificNormal2dLikelihood.prepVars": {
            "name": "prepVars",
            "location": 62,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "int",
                    "list[tensorflow.Tensor]",
                    "typing.Callable[, ]",
                    "typing.Sequence[typing.Sequence[str]]"
                ],
                "U": [
                    "list[tensorflow.Tensor]"
                ],
                "X": [
                    "typing.Sequence[typing.Any]",
                    "dict[str, str]",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        }
    },
    "decompose-master/decompose/likelihoods/cvNormal2dLikelihood.py": {
        "CVNormal2dLikelihood.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [
                    "int",
                    "float",
                    "str"
                ],
                "K": [
                    "int"
                ],
                "tau": [
                    "float"
                ],
                "cv": [
                    "None",
                    "float",
                    "typing.Sequence[typing.Sequence[float]]",
                    "typing.Hashable",
                    "bool",
                    "str"
                ],
                "drawType": [],
                "updateType": [],
                "dtype": []
            }
        },
        "CVNormal2dLikelihood.init": {
            "name": "init",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int"
                ]
            }
        },
        "CVNormal2dLikelihood.cv": {
            "name": "cv",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormal2dLikelihood.observedMask": {
            "name": "observedMask",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormal2dLikelihood.trainMask": {
            "name": "trainMask",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormal2dLikelihood.testMask": {
            "name": "testMask",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormal2dLikelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormal2dLikelihood.residuals": {
            "name": "residuals",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "U": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[U, bool]",
                    "typing.Container",
                    "int"
                ],
                "X": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[..., bool]",
                    "typing.Container",
                    "int"
                ]
            }
        },
        "CVNormal2dLikelihood.testResiduals": {
            "name": "testResiduals",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "U": [
                    "str",
                    "bool",
                    "float",
                    "list[str]"
                ],
                "X": [
                    "int",
                    "float",
                    "list[float]"
                ]
            }
        },
        "CVNormal2dLikelihood.trainResiduals": {
            "name": "trainResiduals",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "U": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[U, bool]",
                    "typing.Container",
                    "int"
                ],
                "X": [
                    "float",
                    "int",
                    "list[T]"
                ]
            }
        },
        "CVNormal2dLikelihood.llh": {
            "name": "llh",
            "location": 91,
            "return": [
                "list[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]"
                ],
                "X": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "CVNormal2dLikelihood.loss": {
            "name": "loss",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "U": [
                    "typing.Callable[numpy.ndarray, numpy.ndarray]"
                ],
                "X": [
                    "typing.Callable[numpy.ndarray, numpy.ndarray]"
                ]
            }
        },
        "CVNormal2dLikelihood.update": {
            "name": "update",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "X": [
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "CVNormal2dLikelihood.prepVars": {
            "name": "prepVars",
            "location": 106,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "int",
                    "list[tensorflow.Tensor]",
                    "typing.Callable[, ]",
                    "typing.Sequence[typing.Sequence[str]]"
                ],
                "U": [
                    "list[tensorflow.Tensor]"
                ],
                "X": [
                    "typing.Sequence[typing.Any]"
                ]
            }
        }
    },
    "decompose-master/decompose/likelihoods/cvNormalNdLikelihood.py": {
        "CVNormalNdLikelihood.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [
                    "int",
                    "float",
                    "str"
                ],
                "K": [
                    "int"
                ],
                "tau": [
                    "float"
                ],
                "cv": [
                    "None",
                    "float",
                    "typing.Sequence[typing.Sequence[float]]",
                    "typing.Hashable",
                    "bool",
                    "str"
                ],
                "drawType": [],
                "updateType": [],
                "dtype": []
            }
        },
        "CVNormalNdLikelihood.init": {
            "name": "init",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int"
                ]
            }
        },
        "CVNormalNdLikelihood.cv": {
            "name": "cv",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormalNdLikelihood.observedMask": {
            "name": "observedMask",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormalNdLikelihood.trainMask": {
            "name": "trainMask",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormalNdLikelihood.testMask": {
            "name": "testMask",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormalNdLikelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVNormalNdLikelihood.residuals": {
            "name": "residuals",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "U": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[U, bool]",
                    "typing.Container",
                    "int"
                ],
                "X": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[..., bool]",
                    "typing.Container",
                    "int"
                ]
            }
        },
        "CVNormalNdLikelihood.testResiduals": {
            "name": "testResiduals",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "U": [],
                "X": [
                    "int",
                    "float",
                    "list[float]"
                ]
            }
        },
        "CVNormalNdLikelihood.trainResiduals": {
            "name": "trainResiduals",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "U": [],
                "X": [
                    "float",
                    "int",
                    "list[T]"
                ]
            }
        },
        "CVNormalNdLikelihood.llh": {
            "name": "llh",
            "location": 94,
            "return": [
                "list[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]"
                ],
                "X": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "CVNormalNdLikelihood.loss": {
            "name": "loss",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "U": [
                    "typing.Callable[numpy.ndarray, numpy.ndarray]"
                ],
                "X": [
                    "typing.Callable[numpy.ndarray, numpy.ndarray]"
                ]
            }
        },
        "CVNormalNdLikelihood.update": {
            "name": "update",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "X": [
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "CVNormalNdLikelihood.outterTensorProduct": {
            "name": "outterTensorProduct",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "Us": []
            }
        },
        "CVNormalNdLikelihood.calcB": {
            "name": "calcB",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "mask": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "UmfOutter": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "f": [
                    "typing.Callable[typing.Any, bool]",
                    "dict[, ]",
                    "str",
                    "list[dict[str, typing.Any]]",
                    "BaseException"
                ],
                "F": [
                    "bool"
                ]
            }
        },
        "CVNormalNdLikelihood.prepVars": {
            "name": "prepVars",
            "location": 129,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.Callable[[], T]"
                ],
                "U": [],
                "X": [
                    "typing.AbstractSet",
                    "typing.Callable[numpy.ndarray, numpy.ndarray]"
                ]
            }
        }
    },
    "decompose-master/decompose/likelihoods/likelihood.py": {
        "Likelihood.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [],
                "K": [
                    "int"
                ]
            }
        },
        "Likelihood.prepVars": {
            "name": "prepVars",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "int",
                    "list[tensorflow.Tensor]",
                    "typing.Callable[, ]",
                    "typing.Sequence[typing.Sequence[str]]"
                ],
                "U": [
                    "int",
                    "list[tensorflow.Tensor]",
                    "typing.Callable[, ]",
                    "typing.Sequence[typing.Sequence[str]]"
                ],
                "X": [
                    "int",
                    "list[tensorflow.Tensor]",
                    "typing.Callable[, ]",
                    "typing.Sequence[typing.Sequence[str]]"
                ]
            }
        },
        "Likelihood.lhUfk": {
            "name": "lhUfk",
            "location": 22,
            "return": [
                "Normal"
            ],
            "arguments": {
                "self": [],
                "Uf": [],
                "prepVars": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "None",
                    "bool",
                    "float",
                    "typing.AbstractSet"
                ],
                "f": [
                    "typing.Type",
                    "typing.Callable[, ]",
                    "str"
                ],
                "k": [
                    "str",
                    "int"
                ]
            }
        },
        "Likelihood.update": {
            "name": "update",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "bool",
                    "tuple[tensorflow.Tensor]",
                    "str"
                ],
                "X": [
                    "bool",
                    "tuple[tensorflow.Tensor]",
                    "str"
                ]
            }
        },
        "Likelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Likelihood.init": {
            "name": "init",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict[, ]",
                    "typing.AnyStr",
                    "bool"
                ]
            }
        },
        "Likelihood.llh": {
            "name": "llh",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "tuple[tensorflow.Tensor]",
                    "bool",
                    "str"
                ],
                "X": [
                    "tuple[tensorflow.Tensor]",
                    "bool",
                    "str"
                ]
            }
        },
        "Likelihood.loss": {
            "name": "loss",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "tuple[tensorflow.Tensor]",
                    "bool",
                    "str"
                ],
                "X": [
                    "tuple[tensorflow.Tensor]",
                    "bool",
                    "str"
                ]
            }
        },
        "Likelihood.M": {
            "name": "M",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Likelihood.F": {
            "name": "F",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Likelihood.K": {
            "name": "K",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Likelihood.id": {
            "name": "id",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/likelihoods/normal2dLikelihood.py": {
        "Normal2dLikelihood.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [
                    "bool",
                    "str"
                ],
                "K": [
                    "int"
                ],
                "tau": [
                    "float"
                ],
                "drawType": [],
                "updateType": [],
                "dtype": []
            }
        },
        "Normal2dLikelihood.init": {
            "name": "init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict[, ]",
                    "typing.AnyStr",
                    "bool"
                ]
            }
        },
        "Normal2dLikelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Normal2dLikelihood.residuals": {
            "name": "residuals",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "U": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[U, bool]",
                    "typing.Container",
                    "int"
                ],
                "X": [
                    "float",
                    "int",
                    "list[T]"
                ]
            }
        },
        "Normal2dLikelihood.llh": {
            "name": "llh",
            "location": 45,
            "return": [
                "list[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "int"
                ],
                "X": [
                    "int"
                ]
            }
        },
        "Normal2dLikelihood.loss": {
            "name": "loss",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "U": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[U, bool]",
                    "typing.Container",
                    "int"
                ],
                "X": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[..., bool]",
                    "typing.Container",
                    "int"
                ]
            }
        },
        "Normal2dLikelihood.update": {
            "name": "update",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "X": [
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "Normal2dLikelihood.prepVars": {
            "name": "prepVars",
            "location": 60,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "int",
                    "list[tensorflow.Tensor]",
                    "typing.Callable[, ]",
                    "typing.Sequence[typing.Sequence[str]]"
                ],
                "U": [
                    "list[tensorflow.Tensor]"
                ],
                "X": [
                    "typing.Sequence[typing.Any]"
                ]
            }
        }
    },
    "decompose-master/decompose/likelihoods/normalNdLikelihood.py": {
        "NormalNdLikelihood.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [
                    "bool",
                    "str"
                ],
                "K": [
                    "int"
                ],
                "tau": [
                    "float"
                ],
                "drawType": [],
                "updateType": [],
                "dtype": []
            }
        },
        "NormalNdLikelihood.init": {
            "name": "init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict[, ]",
                    "typing.AnyStr",
                    "bool"
                ]
            }
        },
        "NormalNdLikelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NormalNdLikelihood.residuals": {
            "name": "residuals",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "U": [],
                "X": [
                    "bool"
                ]
            }
        },
        "NormalNdLikelihood.llh": {
            "name": "llh",
            "location": 47,
            "return": [
                "list[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "int"
                ],
                "X": [
                    "int"
                ]
            }
        },
        "NormalNdLikelihood.loss": {
            "name": "loss",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "U": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[U, bool]",
                    "typing.Container",
                    "int"
                ],
                "X": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[..., bool]",
                    "typing.Container",
                    "int"
                ]
            }
        },
        "NormalNdLikelihood.update": {
            "name": "update",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "X": [
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "NormalNdLikelihood.outterTensorProduct": {
            "name": "outterTensorProduct",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "Us": []
            }
        },
        "NormalNdLikelihood.prepVars": {
            "name": "prepVars",
            "location": 69,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "typing.AbstractSet",
                    "typing.Callable[[], T]"
                ],
                "U": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ],
                "X": [
                    "typing.AbstractSet"
                ]
            }
        }
    },
    "decompose-master/decompose/likelihoods/specificNormal2dLikelihood.py": {
        "SpecificNormal2dLikelihood.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "M": [
                    "bool",
                    "str"
                ],
                "K": [
                    "int"
                ],
                "tau": [
                    "float"
                ],
                "drawType": [],
                "updateType": [],
                "dtype": []
            }
        },
        "SpecificNormal2dLikelihood.init": {
            "name": "init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ]
            }
        },
        "SpecificNormal2dLikelihood.noiseDistribution": {
            "name": "noiseDistribution",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpecificNormal2dLikelihood.residuals": {
            "name": "residuals",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[U, bool]",
                    "typing.Container",
                    "int"
                ],
                "X": [
                    "bool"
                ]
            }
        },
        "SpecificNormal2dLikelihood.llh": {
            "name": "llh",
            "location": 46,
            "return": [
                "list[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "int"
                ],
                "X": [
                    "int"
                ]
            }
        },
        "SpecificNormal2dLikelihood.loss": {
            "name": "loss",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "U": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[U, bool]",
                    "typing.Container",
                    "int"
                ],
                "X": [
                    "tuple[tensorflow.Tensor]",
                    "str",
                    "typing.Callable[..., bool]",
                    "typing.Container",
                    "int"
                ]
            }
        },
        "SpecificNormal2dLikelihood.update": {
            "name": "update",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "X": [
                    "float",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "SpecificNormal2dLikelihood.prepVars": {
            "name": "prepVars",
            "location": 60,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "int",
                    "list[tensorflow.Tensor]",
                    "typing.Callable[, ]",
                    "typing.Sequence[typing.Sequence[str]]"
                ],
                "U": [
                    "list[tensorflow.Tensor]"
                ],
                "X": []
            }
        }
    },
    "decompose-master/decompose/likelihoods/__init__.py": {},
    "decompose-master/decompose/likelihoods/tests/test_normal2dLikelihood.py": {
        "f": {
            "name": "f",
            "location": 15,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "updateType": {
            "name": "updateType",
            "location": 22,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_residuals": {
            "name": "test_residuals",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "str",
                    "typing.Mapping"
                ],
                "dtype": [
                    "typing.Sequence[numpy.ndarray]"
                ]
            }
        },
        "test_loss": {
            "name": "test_loss",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "str",
                    "typing.Mapping"
                ],
                "dtype": [
                    "typing.Callable[, ]",
                    "typing.Sequence[numpy.ndarray]"
                ]
            }
        },
        "test_llh": {
            "name": "test_llh",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "str",
                    "typing.Mapping"
                ],
                "dtype": [
                    "typing.Callable[, ]",
                    "typing.Sequence[numpy.ndarray]"
                ]
            }
        },
        "test_prepVars": {
            "name": "test_prepVars",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "str",
                    "bool",
                    "None",
                    "typing.Callable[..., str]",
                    "list[int]"
                ],
                "f": [
                    "str",
                    "int",
                    "bytes"
                ],
                "dtype": [
                    "str",
                    "int"
                ]
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "typing.Type",
                    "Exception",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "f": [
                    "typing.Type",
                    "Exception",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "updateType": [
                    "int",
                    "tuple[typing.Union[str,typing.Any]]",
                    "typing.Callable[, ]",
                    "typing.Sequence[]",
                    "list[str]",
                    "list[list[str]]"
                ],
                "dtype": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "decompose-master/decompose/likelihoods/tests/__init__.py": {},
    "decompose-master/decompose/models/tensorFactorisation.py": {
        "parameterProperty.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fget": [
                    "None",
                    "typing.Sequence[typing.Callable[, ]]",
                    "int",
                    "tuple[typing.Union[float,float]]",
                    "str"
                ],
                "fset": [
                    "None",
                    "str",
                    "int",
                    "float",
                    "typing.Callable[typing.Any, None]"
                ],
                "fdel": [
                    "None",
                    "str",
                    "int",
                    "float",
                    "typing.Callable[typing.Any, None]"
                ],
                "doc": [
                    "None",
                    "tuple[typing.Union[float,float]]",
                    "list[\"Issue\"]",
                    "str",
                    "bool"
                ],
                "name": [
                    "None",
                    "str",
                    "list[]",
                    "bool"
                ]
            }
        },
        "parameterProperty.__set__": {
            "name": "__set__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[, ]"
                ],
                "values": [
                    "str"
                ]
            }
        },
        "parameterProperty.__get__": {
            "name": "__get__",
            "location": 73,
            "return": [
                "parameterProperty"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "None",
                    "int",
                    "float"
                ],
                "objtype": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "parameterProperty.__delete__": {
            "name": "__delete__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "parameterProperty.getter": {
            "name": "getter",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "fget": [
                    "str",
                    "Exception"
                ]
            }
        },
        "parameterProperty.setter": {
            "name": "setter",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "parameterProperty.deleter": {
            "name": "deleter",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "fdel": [
                    "str",
                    "Exception"
                ]
            }
        },
        "TensorFactorisation.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "U": [
                    "str",
                    "dict[str, typing.Callable[, ]]",
                    "list[typing.Union[tensorflow.Tensor,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes,bytes]]",
                    "bytes"
                ],
                "priorU": [],
                "likelihood": [
                    "str",
                    "dict[str, str]",
                    "int",
                    "None"
                ],
                "dtype": [
                    "str",
                    "None"
                ],
                "stopCriterion": [
                    "int",
                    "float"
                ],
                "phase": [
                    "typing.Callable[, ]",
                    "typing.Any",
                    "None",
                    "bytes"
                ],
                "noiseUniformity": [
                    "int",
                    "float"
                ],
                "transform": [
                    "bool"
                ]
            }
        },
        "TensorFactorisation.random": {
            "name": "random",
            "location": 151,
            "return": [
                "TensorFactorisation"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "float"
                ],
                "priorU": [
                    "bool"
                ],
                "likelihood": [
                    "bool",
                    "None",
                    "str"
                ],
                "M": [],
                "K": [
                    "float",
                    "int",
                    "tuple[int]",
                    "None"
                ],
                "dtype": [
                    "bool",
                    "None",
                    "str"
                ],
                "phase": [
                    "bool",
                    "None",
                    "str"
                ],
                "stopCriterion": [
                    "bool",
                    "None",
                    "str"
                ],
                "noiseUniformity": [],
                "transform": [
                    "bool"
                ]
            }
        },
        "TensorFactorisation.transform": {
            "name": "transform",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TensorFactorisation.noiseUniformity": {
            "name": "noiseUniformity",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TensorFactorisation.U": {
            "name": "U",
            "location": 200,
            "return": [
                "str",
                "dict[str, typing.Any]",
                "dict[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "U": []
            }
        },
        "TensorFactorisation.update": {
            "name": "update",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "dict[, ]",
                    "list[list[str]]",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "TensorFactorisation.updateTrain": {
            "name": "updateTrain",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "TensorFactorisation.updateTransform": {
            "name": "updateTransform",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "TensorFactorisation.rescale": {
            "name": "rescale",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "U": [],
                "fNonUnit": [
                    "int",
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "TensorFactorisation.__setEm": {
            "name": "__setEm",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorFactorisation.__setBcd": {
            "name": "__setBcd",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorFactorisation.loss": {
            "name": "loss",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "TensorFactorisation.llh": {
            "name": "llh",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "TensorFactorisation.llhIndividual": {
            "name": "llhIndividual",
            "location": 308,
            "return": [
                "tuple[typing.Union[typing.Pattern,list[],list[float],dict[int, str]]]"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "TensorFactorisation.type": {
            "name": "type",
            "location": 330,
            "return": [
                "TensorFactorisation"
            ],
            "arguments": {}
        },
        "TensorFactorisation.id": {
            "name": "id",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TensorFactorisation.__model": {
            "name": "__model",
            "location": 342,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "None"
                ],
                "data": [
                    "str",
                    "None",
                    "bool",
                    "dict[, ]"
                ],
                "priorTypes": [],
                "M": [
                    "int",
                    "tuple[int]",
                    "dict[, ]",
                    "str"
                ],
                "K": [
                    "int",
                    "tuple[int]",
                    "dict[, ]",
                    "str"
                ],
                "stopCriterion": [
                    "None",
                    "typing.Type",
                    "dict[, ]",
                    "dict[tuple[typing.Union[str,str]], Exception]",
                    "bool"
                ],
                "phase": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "list[str]"
                ],
                "dtype": [
                    "int",
                    "tuple[int]",
                    "dict[, ]",
                    "str"
                ],
                "reuse": [
                    "bool"
                ],
                "isFullyObserved": [
                    "bool"
                ],
                "cv": [
                    "None",
                    "float",
                    "int",
                    "typing.Mapping",
                    "bytes"
                ],
                "transform": [
                    "bool"
                ],
                "noiseUniformity": [],
                "suffix": [
                    "typing.Text"
                ]
            }
        },
        "TensorFactorisation.__estimatorSpec": {
            "name": "__estimatorSpec",
            "location": 429,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "dict[str, str]",
                    "None",
                    "str"
                ],
                "mode": [
                    "str",
                    "int"
                ],
                "features": [],
                "device": [
                    "str",
                    "typing.Sequence[typing.Sequence[float]]",
                    "bool",
                    "float",
                    "typing.Any",
                    "None"
                ],
                "isFullyObserved": [
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "dict[str, str]",
                    "None",
                    "str"
                ],
                "priors": [
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "K": [
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "dict[str, str]",
                    "None",
                    "str"
                ],
                "stopCriterionInit": [
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "dict[str, str]",
                    "None",
                    "str"
                ],
                "stopCriterionEM": [
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "stopCriterionBCD": [
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "None",
                    "str",
                    "dict[, ]"
                ],
                "cv": [
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "dict[str, str]",
                    "None",
                    "str"
                ],
                "path": [
                    "str",
                    "None",
                    "bool",
                    "dict[str, tuple[typing.Union[str,str,typing.Any]]]",
                    "float"
                ],
                "noiseUniformity": [
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "dict[str, str]",
                    "None",
                    "str"
                ],
                "transform": [
                    "int",
                    "list[tuple[typing.Union[int,int]]]",
                    "dict[str, str]",
                    "None",
                    "str"
                ],
                "dtype": [
                    "None",
                    "float",
                    "list[str]"
                ]
            }
        },
        "TensorFactorisation.getEstimator": {
            "name": "getEstimator",
            "location": 564,
            "return": [
                "str",
                "list[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "float",
                    "set[]"
                ],
                "priors": [
                    "bool",
                    "str",
                    "float",
                    "set[]"
                ],
                "K": [
                    "bool",
                    "str",
                    "float",
                    "set[]"
                ],
                "dtype": [],
                "isFullyObserved": [
                    "bool"
                ],
                "noiseUniformity": [],
                "stopCriterionInit": [
                    "LlhStall"
                ],
                "stopCriterionEM": [
                    "LlhStall"
                ],
                "stopCriterionBCD": [
                    "LlhImprovementThreshold"
                ],
                "path": [
                    "typing.Text"
                ],
                "device": [
                    "typing.Text"
                ],
                "cv": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "set[]"
                ]
            }
        },
        "TensorFactorisation.getTransformEstimator": {
            "name": "getTransformEstimator",
            "location": 591,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ],
                "priors": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ],
                "K": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ],
                "chptFile": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ],
                "dtype": [],
                "noiseUniformity": [],
                "stopCriterionInit": [
                    "LlhStall"
                ],
                "stopCriterionEM": [
                    "LlhStall"
                ],
                "stopCriterionBCD": [
                    "LlhImprovementThreshold"
                ],
                "path": [
                    "typing.Text"
                ],
                "device": [
                    "typing.Text"
                ]
            }
        },
        "parameterProperty.setter.noop": {
            "name": "noop",
            "location": 94,
            "return": [],
            "arguments": {
                "fset": []
            }
        },
        "TensorFactorisation.getEstimator.model_fn": {
            "name": "model_fn",
            "location": 574,
            "return": [],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": []
            }
        },
        "TensorFactorisation.getTransformEstimator.model_fn": {
            "name": "model_fn",
            "location": 611,
            "return": [],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": []
            }
        }
    },
    "decompose-master/decompose/models/__init__.py": {},
    "decompose-master/decompose/models/tests/__init__.py": {},
    "decompose-master/decompose/postU/postU.py": {
        "PostU.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "likelihood": [
                    "int",
                    "list[]",
                    "dict[, ]",
                    "float",
                    "list[str]",
                    "typing.Sequence[typing.Sequence[typing.Any]]"
                ],
                "prior": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "f": [
                    "int",
                    "str"
                ]
            }
        },
        "PostU.f": {
            "name": "f",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostU.prior": {
            "name": "prior",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostU.updateUf": {
            "name": "updateUf",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "Uf": [
                    "str"
                ],
                "Ufk": [
                    "str",
                    "int"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "PostU.update": {
            "name": "update",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "U": [
                    "list[tensorflow.Tensor]",
                    "str"
                ],
                "X": [
                    "bool",
                    "tuple[tensorflow.Tensor]",
                    "str"
                ],
                "transform": [
                    "bool",
                    "tuple[tensorflow.Tensor]",
                    "str"
                ]
            }
        },
        "PostU.updateK": {
            "name": "updateK",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "prepVars": [
                    "bool"
                ],
                "U": [
                    "bool",
                    "typing.Mapping",
                    "list[typing.Union[P,str]]"
                ]
            }
        },
        "PostU.update.cond": {
            "name": "cond",
            "location": 45,
            "return": [],
            "arguments": {
                "k": [],
                "U": []
            }
        },
        "PostU.update.body": {
            "name": "body",
            "location": 48,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "k": [],
                "U": []
            }
        }
    },
    "decompose-master/decompose/postU/__init__.py": {},
    "decompose-master/decompose/postU/tests/test_postU.py": {
        "f": {
            "name": "f",
            "location": 17,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "updateType": {
            "name": "updateType",
            "location": 24,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_update": {
            "name": "test_update",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "str",
                    "None",
                    "typing.Callable[..., str]",
                    "list[int]",
                    "list[str]",
                    "bool"
                ],
                "f": [
                    "bytearray",
                    "str"
                ],
                "dtype": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "decompose-master/decompose/postU/tests/__init__.py": {},
    "decompose-master/decompose/stopCriterions/llhImprovementThreshold.py": {
        "LlhImprovementThreshold.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhImprovementThreshold": [
                    "float"
                ]
            }
        },
        "LlhImprovementThreshold.init": {
            "name": "init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "typing.Text"
                ]
            }
        },
        "LlhImprovementThreshold.update": {
            "name": "update",
            "location": 25,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "X": [
                    "list[T]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LlhImprovementThreshold.stopVar": {
            "name": "stopVar",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LlhImprovementThreshold.llhImprovementThreshold": {
            "name": "llhImprovementThreshold",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/stopCriterions/llhStall.py": {
        "LlhStall.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nStalledIterationsThreshold": [
                    "int"
                ]
            }
        },
        "LlhStall.init": {
            "name": "init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "typing.Text"
                ]
            }
        },
        "LlhStall.update": {
            "name": "update",
            "location": 26,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "X": [
                    "list[T]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LlhStall.stopVar": {
            "name": "stopVar",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/stopCriterions/nIterations.py": {
        "NIterations.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nIterations": [
                    "int"
                ]
            }
        },
        "NIterations.init": {
            "name": "init",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "typing.Text"
                ]
            }
        },
        "NIterations.update": {
            "name": "update",
            "location": 23,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "tuple[tensorflow.Tensor]",
                    "typing.Deque",
                    "typing.Callable[, ]"
                ],
                "X": [
                    "bool",
                    "tuple[tensorflow.Tensor]",
                    "typing.Deque",
                    "typing.Callable[, ]"
                ]
            }
        },
        "NIterations.stopVar": {
            "name": "stopVar",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "decompose-master/decompose/stopCriterions/stopCriterion.py": {
        "StopCriterion.init": {
            "name": "init",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "str",
                    "int"
                ]
            }
        },
        "NoStop.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoStop.init": {
            "name": "init",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "typing.Text"
                ]
            }
        },
        "NoStop.update": {
            "name": "update",
            "location": 25,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "tuple[tensorflow.Tensor]",
                    "typing.Deque",
                    "typing.Callable[, ]"
                ],
                "X": [
                    "bool",
                    "tuple[tensorflow.Tensor]",
                    "typing.Deque",
                    "typing.Callable[, ]"
                ]
            }
        },
        "NoStop.stopVar": {
            "name": "stopVar",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StopHook.after_run": {
            "name": "after_run",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run_context": [],
                "run_values": [
                    "bool"
                ]
            }
        }
    },
    "decompose-master/decompose/stopCriterions/__init__.py": {},
    "decompose-master/decompose/tests/fixtures.py": {
        "device": {
            "name": "device",
            "location": 7,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": []
            }
        },
        "dtype": {
            "name": "dtype",
            "location": 15,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "decompose-master/decompose/tests/test_all_priors.py": {
        "PriorDistribution": {
            "name": "PriorDistribution",
            "location": 34,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_all_priors": {
            "name": "test_all_priors",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "PriorDistribution": [
                    "dict[, ]",
                    "bool"
                ]
            }
        }
    },
    "decompose-master/decompose/tests/test_sklearn.py": {
        "test_sklearn": {
            "name": "test_sklearn",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "decompose-master/decompose/tests/test_sklearn_all_het_noise.py": {
        "test_sklearn": {
            "name": "test_sklearn",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "decompose-master/decompose/tests/test_sklearn_cv.py": {
        "test_sklearn_cv": {
            "name": "test_sklearn_cv",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "decompose-master/decompose/tests/test_sklearn_cv_tensor.py": {
        "test_sklearn_cv": {
            "name": "test_sklearn_cv",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "decompose-master/decompose/tests/test_sklearn_het_noise.py": {
        "test_sklearn": {
            "name": "test_sklearn",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "decompose-master/decompose/tests/test_sklearn_tensor.py": {
        "test_sklearn_tensor": {
            "name": "test_sklearn_tensor",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "decompose-master/decompose/tests/__init__.py": {},
    "decompose-master/docs/source/conf.py": {}
}
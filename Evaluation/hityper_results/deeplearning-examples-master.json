{
    "deeplearning-examples-master/setup.py": {},
    "deeplearning-examples-master/deeplearning_examples/cli.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "None"
                ]
            }
        }
    },
    "deeplearning-examples-master/deeplearning_examples/deeplearning_examples.py": {},
    "deeplearning-examples-master/deeplearning_examples/__init__.py": {},
    "deeplearning-examples-master/deeplearning_examples/classification/__init__.py": {},
    "deeplearning-examples-master/deeplearning_examples/classification/churn/churn_pytorch.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_inputs": [
                    "int"
                ],
                "n_outputs": [
                    "int"
                ]
            }
        },
        "Classifier.forward": {
            "name": "forward",
            "location": 45,
            "return": [
                "int",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "ChurnTrainer.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_features": [
                    "int",
                    "bytes",
                    "str",
                    "float",
                    "None"
                ],
                "train_labels": [
                    "int",
                    "typing.Sequence[int]",
                    "typing.Sequence[str]",
                    "None"
                ],
                "test_features": [
                    "int",
                    "list[str]",
                    "None",
                    "str"
                ],
                "test_labels": [
                    "int",
                    "list[str]",
                    "None",
                    "str"
                ]
            }
        },
        "ChurnTrainer._tofeat": {
            "name": "_tofeat",
            "location": 84,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "ChurnTrainer._tolabel": {
            "name": "_tolabel",
            "location": 88,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "ChurnTrainer.train": {
            "name": "train",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epochs": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "deeplearning-examples-master/deeplearning_examples/classification/churn/__init__.py": {},
    "deeplearning-examples-master/deeplearning_examples/loaders/Churn.py": {
        "Churn.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features": []
            }
        },
        "Churn.__call__": {
            "name": "__call__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Churn.all_features": {
            "name": "all_features",
            "location": 58,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Churn._validate_features": {
            "name": "_validate_features",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "Churn._get_feat_meta": {
            "name": "_get_feat_meta",
            "location": 86,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Churn.encode_features": {
            "name": "encode_features",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "str"
                ]
            }
        },
        "Churn.split_data": {
            "name": "split_data",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "typing.Iterable[str]",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "deeplearning-examples-master/deeplearning_examples/loaders/__init__.py": {
        "datapath": {
            "name": "datapath",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "deeplearning-examples-master/deeplearning_examples/preprocessing/encoder.py": {
        "Encoder.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "Encoder._encode_x": {
            "name": "_encode_x",
            "location": 37,
            "return": [
                "tuple[typing.Union[int,str,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "int",
                    "None",
                    "tuple[]",
                    "typing.Generator[]",
                    "str"
                ],
                "test": [
                    "float",
                    "int"
                ]
            }
        },
        "Encoder._encode_y": {
            "name": "_encode_y",
            "location": 59,
            "return": [
                "tuple[typing.Union[int,dict[str, typing.Union[float,str]],str,tuple[],list[float],list[],typing.NamedTuple]]"
            ],
            "arguments": {
                "self": [],
                "train": [
                    "int",
                    "list[str]",
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "list[tuple[typing.Union[int,int]]]",
                    "str",
                    "float"
                ],
                "test": [
                    "str",
                    "bool"
                ]
            }
        },
        "Encoder.encode": {
            "name": "encode",
            "location": 80,
            "return": [
                "tuple[typing.Union[int,str,float,dict[str, typing.Callable[..., typing.Any]],dict[str, bool],typing.Callable[..., None],list[int],list[str],typing.Type]]"
            ],
            "arguments": {
                "self": [],
                "train_data": [
                    "list[str]"
                ],
                "test_data": [
                    "list[str]"
                ],
                "target_label": [
                    "float",
                    "list[]",
                    "int",
                    "typing.Callable[str,str, float]",
                    "str"
                ]
            }
        }
    },
    "deeplearning-examples-master/deeplearning_examples/preprocessing/__init__.py": {},
    "deeplearning-examples-master/deeplearning_examples/sampling/Sampling.py": {
        "hold_out": {
            "name": "hold_out",
            "location": 12,
            "return": [],
            "arguments": {
                "data_set": [
                    "bool",
                    "float",
                    "typing.Iterable[]",
                    "None"
                ],
                "frac": [
                    "float"
                ],
                "shuffle": [
                    "bool"
                ],
                "stratify": [
                    "None",
                    "bool",
                    "float",
                    "typing.Iterable[]"
                ]
            }
        }
    },
    "deeplearning-examples-master/deeplearning_examples/sampling/__init__.py": {},
    "deeplearning-examples-master/docs/conf.py": {},
    "deeplearning-examples-master/tests/test_deeplearning_examples.py": {
        "response": {
            "name": "response",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_content": {
            "name": "test_content",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "test_command_line_interface": {
            "name": "test_command_line_interface",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "deeplearning-examples-master/tests/__init__.py": {}
}
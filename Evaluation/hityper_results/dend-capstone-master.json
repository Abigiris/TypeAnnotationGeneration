{
    "dend-capstone-master/dags/br_exports.py": {
        "begin": {
            "name": "begin",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "download_exports": {
            "name": "download_exports",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "download_imports": {
            "name": "download_imports",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "abstract_download": {
            "name": "abstract_download",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "direction": [
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "root_path": [
                    "str",
                    "typing.Deque"
                ],
                "context": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "download_url": {
            "name": "download_url",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "list[int]"
                ],
                "root_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "aux_downloads": {
            "name": "aux_downloads",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "truck_downloads": {
            "name": "truck_downloads",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "download_json": {
            "name": "download_json",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "url": [
                    "str",
                    "bool"
                ],
                "root_path": [
                    "str"
                ]
            }
        },
        "init_db": {
            "name": "init_db",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stg_imports_to_db": {
            "name": "stg_imports_to_db",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stg_exports_to_db": {
            "name": "stg_exports_to_db",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stg_ncm_to_db": {
            "name": "stg_ncm_to_db",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stg_ncm_sh_to_db": {
            "name": "stg_ncm_sh_to_db",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stg_trucks_to_db": {
            "name": "stg_trucks_to_db",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stg_pais_to_db": {
            "name": "stg_pais_to_db",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stg_pais_bloco_to_db": {
            "name": "stg_pais_bloco_to_db",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stg_urf_to_db": {
            "name": "stg_urf_to_db",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stg_via_to_db": {
            "name": "stg_via_to_db",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "insert_into_db": {
            "name": "insert_into_db",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None",
                    "typing.Iterable[str]",
                    "typing.Sequence[str]"
                ],
                "table": [
                    "list[str]",
                    "list[typing.Callable[, ]]"
                ],
                "prep": [
                    "str",
                    "None",
                    "typing.Iterable[str]",
                    "typing.Sequence[str]"
                ],
                "row_getter": [
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "typing.Sequence[str]"
                ],
                "truncate": [
                    "bool"
                ]
            }
        },
        "prep_trucks": {
            "name": "prep_trucks",
            "location": 203,
            "return": [
                "list[]"
            ],
            "arguments": {
                "filepath": [],
                "row_getter": [
                    "None",
                    "dict[str, str]",
                    "typing.Iterator",
                    "dict[, ]"
                ]
            }
        },
        "prep_imp_exp": {
            "name": "prep_imp_exp",
            "location": 216,
            "return": [
                "list[typing.Union[dict[str, str],tuple[tuple[typing.Union[str,typing.Any]]],list[],typing.KeysView]]"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "row_func": [
                    "int"
                ]
            }
        },
        "prep_table": {
            "name": "prep_table",
            "location": 229,
            "return": [
                "list[typing.Union[dict[str, str],tuple[tuple[typing.Union[str,typing.Any]]],list[],typing.KeysView]]"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "row_func": [
                    "int",
                    "list[str]",
                    "typing.Type",
                    "str"
                ]
            }
        },
        "get_imp_exp_row": {
            "name": "get_imp_exp_row",
            "location": 242,
            "return": [
                "None",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "fields": []
            }
        },
        "get_ncm_row": {
            "name": "get_ncm_row",
            "location": 259,
            "return": [
                "None",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "fields": []
            }
        },
        "get_ncm_sh_row": {
            "name": "get_ncm_sh_row",
            "location": 279,
            "return": [
                "None",
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "list[]"
                ]
            }
        },
        "get_pais_row": {
            "name": "get_pais_row",
            "location": 303,
            "return": [
                "None",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "fields": []
            }
        },
        "get_pais_bloco_row": {
            "name": "get_pais_bloco_row",
            "location": 318,
            "return": [
                "None",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "fields": []
            }
        },
        "get_urf_row": {
            "name": "get_urf_row",
            "location": 332,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "fields": [
                    "list[]",
                    "str"
                ]
            }
        },
        "get_via_row": {
            "name": "get_via_row",
            "location": 340,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "load_date": {
            "name": "load_date",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_mode": {
            "name": "load_mode",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_port": {
            "name": "load_port",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_region": {
            "name": "load_region",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_country": {
            "name": "load_country",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_product": {
            "name": "load_product",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_truck": {
            "name": "load_truck",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_trading": {
            "name": "load_trading",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_trading": {
            "name": "check_trading",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_trucks": {
            "name": "check_trucks",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "end_etl": {
            "name": "end_etl",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dend-capstone-master/dags/__init__.py": {},
    "dend-capstone-master/dags/functions/create_tables.py": {
        "DataAccessLayer.db_init": {
            "name": "db_init",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn_string": [
                    "str",
                    "bool",
                    "None",
                    "float"
                ]
            }
        }
    },
    "dend-capstone-master/dags/functions/etl_queries.py": {
        "execute": {
            "name": "execute",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "dal": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "query": [
                    "str"
                ],
                "trg": [
                    "dict[str, typing.Any]",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "load_dim_date": {
            "name": "load_dim_date",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "dal": [
                    "str"
                ]
            }
        },
        "load_dim_mode": {
            "name": "load_dim_mode",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "dal": [
                    "str",
                    "int"
                ]
            }
        },
        "load_dim_port": {
            "name": "load_dim_port",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "dal": []
            }
        },
        "load_dim_region": {
            "name": "load_dim_region",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "dal": [
                    "int",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "load_dim_country": {
            "name": "load_dim_country",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "dal": [
                    "int",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "load_dim_product": {
            "name": "load_dim_product",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "dal": []
            }
        },
        "load_fact_truck": {
            "name": "load_fact_truck",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "dal": [
                    "int"
                ]
            }
        },
        "load_fact_trading": {
            "name": "load_fact_trading",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "dal": [
                    "int"
                ],
                "year": [
                    "bool",
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "typing.Type"
                ]
            }
        },
        "trading_query": {
            "name": "trading_query",
            "location": 124,
            "return": [
                "float",
                "typing.Generator[typing.Union[typing.Any,None,None]]"
            ],
            "arguments": {
                "cnt": [
                    "list[str]",
                    "int"
                ],
                "dat": [
                    "list[str]",
                    "int"
                ],
                "trd": [
                    "list[str]",
                    "int"
                ],
                "mod": [
                    "list[str]",
                    "int"
                ],
                "por": [
                    "list[str]",
                    "int"
                ],
                "prd": [
                    "list[str]",
                    "int"
                ],
                "reg": [
                    "list[str]",
                    "int"
                ],
                "trg": [
                    "list[str]",
                    "int"
                ],
                "year": [
                    "list[str]",
                    "int"
                ]
            }
        },
        "check_table_rows": {
            "name": "check_table_rows",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "dal": [
                    "str",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "tuple[typing.Type]",
                    "dict[str, typing.Any]"
                ],
                "table": []
            }
        }
    },
    "dend-capstone-master/dags/functions/__init__.py": {}
}
{
    "dfb_predict-master/src/cli.py": {
        "cli": {
            "name": "cli",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ui": {
            "name": "ui",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "currentmatches": {
            "name": "currentmatches",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "db": {
            "name": "db",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "drop": {
            "name": "drop",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "yes": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "download": {
            "name": "download",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "years": [
                    "float",
                    "list[]",
                    "dict[str, typing.Any]"
                ],
                "drop": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "host": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "guest": [
                    "str",
                    "None",
                    "bool"
                ],
                "model": [
                    "str",
                    "None",
                    "list[str]",
                    "list[int]",
                    "int"
                ],
                "start": [
                    "int",
                    "float",
                    "str",
                    "None"
                ],
                "end": [
                    "int",
                    "float",
                    "str",
                    "None"
                ]
            }
        },
        "handle_selector": {
            "name": "handle_selector",
            "location": 130,
            "return": [
                "tuple[typing.Union[RangeSelector,list[typing.Text]]]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "None"
                ],
                "end": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int,int]]"
                ],
                "session": [
                    "int",
                    "None"
                ]
            }
        },
        "query": {
            "name": "query",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "seasons": {
            "name": "seasons",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "matches": {
            "name": "matches",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "teams": {
            "name": "teams",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ],
                "end": [
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "dfb_predict-master/src/__init__.py": {},
    "dfb_predict-master/src/__main__.py": {},
    "dfb_predict-master/src/acquisition/core.py": {
        "_CONCAT": {
            "name": "_CONCAT",
            "location": 138,
            "return": [
                "list[]",
                "frozenset",
                "tuple[]",
                "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                "dict[, ]",
                "typing.Callable[T, bool]",
                "str"
            ],
            "arguments": {
                "pipeline": [
                    "list[list[]]"
                ],
                "data": [
                    "dict[, ]",
                    "typing.Callable[T, bool]",
                    "str"
                ],
                "session": [
                    "list[list[]]"
                ]
            }
        },
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transformations": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "Pipeline.add_transformation": {
            "name": "add_transformation",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int"
                ],
                "transformations": [
                    "int"
                ]
            }
        },
        "Pipeline.create": {
            "name": "create",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "float",
                    "typing.Iterable[bytes]"
                ],
                "data": [
                    "float",
                    "typing.Iterable[bytes]"
                ],
                "session": [
                    "float",
                    "typing.Iterable[bytes]"
                ]
            }
        },
        "Pipeline.generate_kwargs": {
            "name": "generate_kwargs",
            "location": 43,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "session": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Pipeline.generate_kwarg": {
            "name": "generate_kwarg",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "dict[, ]"
                ],
                "key": [
                    "str",
                    "dict[, ]"
                ],
                "data": [
                    "str",
                    "dict[, ]"
                ],
                "session": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Pipeline.create_multiple": {
            "name": "create_multiple",
            "location": 69,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "typing.Sequence[object]"
                ],
                "data": [
                    "str"
                ],
                "session": [
                    "str",
                    "typing.Sequence[object]"
                ]
            }
        },
        "Transformation.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transformation.__call__": {
            "name": "__call__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "pipeline": [
                    "typing.Callable[, ]"
                ],
                "data": [
                    "typing.Callable[, ]"
                ],
                "session": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "Transformation.__or__": {
            "name": "__or__",
            "location": 97,
            "return": [
                "Transformation"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Transformation.apply": {
            "name": "apply",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "pipeline": [],
                "data": [],
                "session": []
            }
        },
        "Transformation.from_func": {
            "name": "from_func",
            "location": 121,
            "return": [
                "typing.Type"
            ],
            "arguments": {
                "func": [
                    "list[]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "dfb_predict-master/src/acquisition/pipeline.py": {
        "clean_download_list": {
            "name": "clean_download_list",
            "location": 63,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "session": [
                    "float"
                ],
                "years": []
            }
        },
        "_download_matches": {
            "name": "_download_matches",
            "location": 81,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "years": [],
                "league": [
                    "None",
                    "str",
                    "typing.Iterable[T]"
                ]
            }
        },
        "download_matches": {
            "name": "download_matches",
            "location": 104,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "years": [
                    "str",
                    "None",
                    "list[int]",
                    "int"
                ],
                "league": [
                    "None",
                    "str",
                    "list[int]",
                    "int"
                ]
            }
        },
        "get_current_groups_matches": {
            "name": "get_current_groups_matches",
            "location": 128,
            "return": [
                "tuple[list[tuple[]]]"
            ],
            "arguments": {}
        },
        "_download_matches.download_job": {
            "name": "download_job",
            "location": 92,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "year": []
            }
        }
    },
    "dfb_predict-master/src/acquisition/transformations.py": {
        "Get": {
            "name": "Get",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "pipeline": [
                    "typing.Sequence[T]",
                    "int",
                    "str",
                    "None"
                ],
                "data": [
                    "dict[, ]",
                    "str",
                    "typing.Mapping"
                ],
                "session": [
                    "typing.Sequence[T]",
                    "int",
                    "str",
                    "None"
                ],
                "key": [
                    "dict[, ]",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "Custom": {
            "name": "Custom",
            "location": 48,
            "return": [],
            "arguments": {
                "pipeline": [],
                "data": [
                    "typing.Callable[T, bool]",
                    "typing.Sequence[typing.Sequence[]]",
                    "dict[, ]"
                ],
                "session": [],
                "func": [
                    "typing.Callable[T, bool]",
                    "typing.Sequence[typing.Sequence[]]",
                    "dict[, ]"
                ]
            }
        },
        "Constant": {
            "name": "Constant",
            "location": 58,
            "return": [],
            "arguments": {
                "pipeline": [],
                "data": [],
                "session": [],
                "constant": []
            }
        },
        "Attr": {
            "name": "Attr",
            "location": 68,
            "return": [],
            "arguments": {
                "pipeline": [
                    "typing.Sequence[T]",
                    "int",
                    "str",
                    "None"
                ],
                "data": [
                    "str",
                    "dict[, ]",
                    "typing.Collection",
                    "typing.Type",
                    "typing.Callable[[], None]"
                ],
                "session": [
                    "typing.Sequence[T]",
                    "int",
                    "str",
                    "None"
                ],
                "key": [
                    "str",
                    "dict[, ]",
                    "typing.Collection",
                    "typing.Type",
                    "typing.Callable[[], None]"
                ]
            }
        },
        "Filter": {
            "name": "Filter",
            "location": 78,
            "return": [
                "list[]"
            ],
            "arguments": {
                "pipeline": [
                    "bool",
                    "None",
                    "typing.Sequence[typing.Any]",
                    "str"
                ],
                "data": [
                    "typing.Iterable[T]",
                    "typing.Callable[T, bool]"
                ],
                "session": [
                    "bool",
                    "None",
                    "typing.Sequence[typing.Any]",
                    "str"
                ],
                "pred": [
                    "typing.Iterable[T]",
                    "typing.Callable[T, bool]"
                ]
            }
        },
        "Map": {
            "name": "Map",
            "location": 88,
            "return": [
                "list[]"
            ],
            "arguments": {
                "pipeline": [],
                "data": [
                    "typing.Iterable[T]"
                ],
                "session": [],
                "func": [
                    "typing.Iterable[T]"
                ]
            }
        },
        "Gather": {
            "name": "Gather",
            "location": 98,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "pipeline": [
                    "bool"
                ],
                "data": [
                    "str"
                ],
                "session": [
                    "bool"
                ]
            }
        },
        "If": {
            "name": "If",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "pipeline": [],
                "data": [],
                "session": [],
                "cond": [
                    "typing.Callable[T, bool]",
                    "typing.Sequence[typing.Sequence[]]",
                    "dict[, ]"
                ],
                "then": [
                    "dict[str, typing.Any]"
                ],
                "else_": [
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Sequence[typing.Hashable]"
                ]
            }
        },
        "GetOrCreate": {
            "name": "GetOrCreate",
            "location": 125,
            "return": [
                "dict[str, str]",
                "dict[, ]"
            ],
            "arguments": {
                "pipeline": [],
                "data": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ],
                "session": [],
                "model": [
                    "dict[str, typing.Any]"
                ],
                "match_targets": [
                    "None",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "Create": {
            "name": "Create",
            "location": 151,
            "return": [],
            "arguments": {
                "pipeline": [],
                "data": [
                    "str"
                ],
                "session": [
                    "int"
                ],
                "model": [
                    "str"
                ]
            }
        },
        "CreateMultiple": {
            "name": "CreateMultiple",
            "location": 164,
            "return": [
                "list[]"
            ],
            "arguments": {
                "pipeline": [],
                "data": [
                    "str",
                    "list[]",
                    "dict[, ]"
                ],
                "session": [],
                "model": [
                    "dict[, ]",
                    "list[T]",
                    "None"
                ]
            }
        }
    },
    "dfb_predict-master/src/acquisition/__init__.py": {},
    "dfb_predict-master/src/db/core.py": {
        "_DB_Meta.__call__": {
            "name": "__call__",
            "location": 27,
            "return": [
                "int",
                "tuple[str]"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Iterable[str]"
                ],
                "engine_descriptor": [
                    "None",
                    "dict[str, typing.Any]",
                    "float",
                    "int"
                ]
            }
        },
        "_DB.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine_descriptor": [
                    "int",
                    "float"
                ]
            }
        },
        "_DB.configure": {
            "name": "configure",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine_descriptor": [
                    "int",
                    "dict[, ]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "_DB.create_tables": {
            "name": "create_tables",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DB.drop_tables": {
            "name": "drop_tables",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_DB.get_session": {
            "name": "get_session",
            "location": 55,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/db/selectors.py": {
        "RangePoint.parse_from_string": {
            "name": "parse_from_string",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Callable[[], None]",
                    "str"
                ],
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "RangePoint.is_null": {
            "name": "is_null",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangePoint.is_partial": {
            "name": "is_partial",
            "location": 42,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangePoint.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangePoint.build_filter": {
            "name": "build_filter",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "compare_op": [
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "RangeSelector.__eq__": {
            "name": "__eq__",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Generic",
                    "int",
                    "float"
                ]
            }
        },
        "RangeSelector.__neq__": {
            "name": "__neq__",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Generic",
                    "int",
                    "float"
                ]
            }
        },
        "RangeSelector.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "None",
                    "str",
                    "int",
                    "float"
                ],
                "end": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "RangeSelector.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSelector.start": {
            "name": "start",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSelector.end": {
            "name": "end",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSelector.is_valid": {
            "name": "is_valid",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSelector._null_checked_lte": {
            "name": "_null_checked_lte",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "start": [
                    "int"
                ],
                "end": [
                    "int"
                ]
            }
        },
        "RangeSelector.copy": {
            "name": "copy",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "RangeSelector.build_filters": {
            "name": "build_filters",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSelector.build_team_query": {
            "name": "build_team_query",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangeSelector.build_match_query": {
            "name": "build_match_query",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/db/__init__.py": {},
    "dfb_predict-master/src/db/models/association_tables.py": {},
    "dfb_predict-master/src/db/models/group.py": {
        "Group.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/db/models/match.py": {
        "Match.host": {
            "name": "host",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match.guest": {
            "name": "guest",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Match.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/db/models/season.py": {
        "Season.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Season.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/db/models/team.py": {
        "Team.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Team.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/db/models/__init__.py": {},
    "dfb_predict-master/src/prediction/base.py": {
        "PredictionResult.host_win": {
            "name": "host_win",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionResult.draw": {
            "name": "draw",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionResult.guest_win": {
            "name": "guest_win",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionResult.reliability": {
            "name": "reliability",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionResult.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "verbose_name": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.__post_init__": {
            "name": "__post_init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "bool",
                    "tuple[typing.Union[float,float]]",
                    "str"
                ]
            }
        },
        "Model.calculate_model": {
            "name": "calculate_model",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "selector": [
                    "bool",
                    "None"
                ],
                "session": [
                    "bool",
                    "None"
                ]
            }
        },
        "Model.make_prediction": {
            "name": "make_prediction",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host_name": [
                    "str",
                    "list[str]"
                ],
                "guest_name": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "dfb_predict-master/src/prediction/dixoncoles.py": {
        "apply_score_correction": {
            "name": "apply_score_correction",
            "location": 117,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "host_goals": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "guest_goals": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "host_bias": [
                    "int"
                ],
                "guest_bias": [
                    "int"
                ],
                "score_correction": [
                    "int"
                ]
            }
        },
        "log_likelyhood": {
            "name": "log_likelyhood",
            "location": 133,
            "return": [],
            "arguments": {
                "host_goals": [
                    "str",
                    "int"
                ],
                "guest_goals": [
                    "str",
                    "int"
                ],
                "host_bias": [
                    "str",
                    "int"
                ],
                "guest_bias": [
                    "str",
                    "int"
                ],
                "score_correction": [
                    "str",
                    "int"
                ]
            }
        },
        "DixonColesModel.calculate_model": {
            "name": "calculate_model",
            "location": 24,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "selector": [
                    "bool",
                    "None"
                ],
                "session": [
                    "bool",
                    "None"
                ]
            }
        },
        "DixonColesModel.make_prediction": {
            "name": "make_prediction",
            "location": 84,
            "return": [
                "PoissonResult"
            ],
            "arguments": {
                "self": [],
                "host_name": [
                    "str"
                ],
                "guest_name": [
                    "str"
                ],
                "max_goals": [
                    "int"
                ]
            }
        },
        "DixonColesModel.calculate_model.estimate_params": {
            "name": "estimate_params",
            "location": 44,
            "return": [],
            "arguments": {
                "params": []
            }
        }
    },
    "dfb_predict-master/src/prediction/poisson.py": {
        "PoissonResult.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PoissonModel.calculate_model": {
            "name": "calculate_model",
            "location": 72,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "selector": [
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]",
                    "dict[str, int]"
                ],
                "session": [
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]",
                    "dict[str, int]"
                ]
            }
        },
        "PoissonModel.make_prediction": {
            "name": "make_prediction",
            "location": 121,
            "return": [
                "PoissonResult"
            ],
            "arguments": {
                "self": [],
                "host_name": [
                    "str"
                ],
                "guest_name": [
                    "str"
                ],
                "max_goals": [
                    "int"
                ]
            }
        }
    },
    "dfb_predict-master/src/prediction/__init__.py": {},
    "dfb_predict-master/src/tests/test_acquisition.py": {
        "TestAcquisition.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAcquisition.download": {
            "name": "download",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "years": []
            }
        },
        "TestAcquisition._test_match": {
            "name": "_test_match",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "int",
                    "float"
                ],
                "year": [
                    "None",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "TestAcquisition._test_group": {
            "name": "_test_group",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "group": [],
                "year": [
                    "None",
                    "int",
                    "float",
                    "list[str]",
                    "typing.Type",
                    "bytes"
                ]
            }
        },
        "TestAcquisition._test_team": {
            "name": "_test_team",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "team": [
                    "str"
                ],
                "year": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "TestAcquisition.test_aqcuisition": {
            "name": "test_aqcuisition",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAcquisition.test_aqcuisition_multiple": {
            "name": "test_aqcuisition_multiple",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAcquisition.test_aqcuisition_with_collision": {
            "name": "test_aqcuisition_with_collision",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/tests/test_db.py": {
        "TestDB.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDB.test_get_session": {
            "name": "test_get_session",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/tests/test_prediction.py": {
        "TestPrediction.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrediction.test_poisson": {
            "name": "test_poisson",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPrediction.test_dixoncoles": {
            "name": "test_dixoncoles",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/tests/__init__.py": {},
    "dfb_predict-master/src/ui/app.py": {
        "App.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": []
            }
        },
        "App._generate_events": {
            "name": "_generate_events",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.run_app": {
            "name": "run_app",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "typing.IO"
                ]
            }
        }
    },
    "dfb_predict-master/src/ui/data.py": {
        "_AppDataField.changed": {
            "name": "changed",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AppData.gather_events": {
            "name": "gather_events",
            "location": 44,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/ui/jobs.py": {
        "ThreadJob.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadJob._target_wrapper": {
            "name": "_target_wrapper",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessJob.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessJob._target_wrapper": {
            "name": "_target_wrapper",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessFuture.__post_init__": {
            "name": "__post_init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "args": [],
                "kwargs": []
            }
        },
        "ProcessFuture._worker": {
            "name": "_worker",
            "location": 59,
            "return": [],
            "arguments": {
                "target": [],
                "pipe": [],
                "args": [],
                "kwargs": []
            }
        },
        "ProcessFuture.start": {
            "name": "start",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessFuture.join": {
            "name": "join",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessFuture.done": {
            "name": "done",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProcessFuture.result": {
            "name": "result",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/ui/__init__.py": {},
    "dfb_predict-master/src/ui/tabs/base.py": {
        "Tab.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.MutableMapping"
                ],
                "verbose_name": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "Tab.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tab.create_widgets": {
            "name": "create_widgets",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tabs.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/ui/tabs/data_tab.py": {
        "DataTab.create_widgets": {
            "name": "create_widgets",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadFrame.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadFrame._update_years": {
            "name": "_update_years",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]",
                    "list[]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "DownloadFrame._poll_list": {
            "name": "_poll_list",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadFrame._download_job": {
            "name": "_download_job",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCreateFrame.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCreateFrame._update_range": {
            "name": "_update_range",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "ModelCreateFrame._training_job": {
            "name": "_training_job",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelManageFrame.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelManageFrame._models_updated": {
            "name": "_models_updated",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelManageFrame._delete_models": {
            "name": "_delete_models",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelManageFrame._load_models": {
            "name": "_load_models",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelManageFrame._save_models": {
            "name": "_save_models",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelCreateFrame._training_job.process_job": {
            "name": "process_job",
            "location": 120,
            "return": [],
            "arguments": {
                "model_class": [],
                "selector": []
            }
        }
    },
    "dfb_predict-master/src/ui/tabs/prediction_tab.py": {
        "PredictionTab.create_widgets": {
            "name": "create_widgets",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionTab._update_models": {
            "name": "_update_models",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "PredictionTab._model_tracer": {
            "name": "_model_tracer",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionQueueFrame.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionQueueFrame._update_jobs": {
            "name": "_update_jobs",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[, ]",
                    "list[]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PredictionQueueFrame._clean_jobs": {
            "name": "_clean_jobs",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "PredictionQueueFrame._prediction_job": {
            "name": "_prediction_job",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionConfigFrame.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionConfigFrame._model_updated": {
            "name": "_model_updated",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionConfigFrame._prediction_config_job": {
            "name": "_prediction_config_job",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueuePopulateFrame.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueuePopulateFrame._current_group_job": {
            "name": "_current_group_job",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueuePopulateFrame._model_updated": {
            "name": "_model_updated",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueuePopulateFrame._direct_selection_job": {
            "name": "_direct_selection_job",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictionQueueFrame._prediction_job.process_job": {
            "name": "process_job",
            "location": 75,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "models": [],
                "jobs": []
            }
        }
    },
    "dfb_predict-master/src/ui/tabs/results_tab.py": {
        "ResultsTab.create_widgets": {
            "name": "create_widgets",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputFrame.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputFrame._poll_list": {
            "name": "_poll_list",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputFrame._update_results": {
            "name": "_update_results",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/ui/tabs/__init__.py": {},
    "dfb_predict-master/src/ui/widgets/labeled_progressbar.py": {
        "LabeledProgressbar.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabeledProgressbar.set_label": {
            "name": "set_label",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LabeledProgressbar.set_value": {
            "name": "set_value",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "dict[str, typing.Any]",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "LabeledProgressbar.start": {
            "name": "start",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabeledProgressbar.stop": {
            "name": "stop",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabeledProgressbar.step": {
            "name": "step",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/ui/widgets/query_list.py": {
        "QueryList.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryList.fill": {
            "name": "fill",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryList.get_cur": {
            "name": "get_cur",
            "location": 31,
            "return": [
                "None",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/ui/widgets/range_point_selector.py": {
        "RangePointSelectorWidget.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangePointSelectorWidget.add_tracer": {
            "name": "add_tracer",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [
                    "typing.Callable[, ]",
                    "typing.IO",
                    "dict[, ]"
                ]
            }
        },
        "RangePointSelectorWidget.year_selection": {
            "name": "year_selection",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangePointSelectorWidget.group_selection": {
            "name": "group_selection",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RangePointSelectorWidget._clean_selection": {
            "name": "_clean_selection",
            "location": 44,
            "return": [
                "int",
                "None"
            ],
            "arguments": {
                "selection": []
            }
        },
        "RangePointSelectorWidget._tracer": {
            "name": "_tracer",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangePointSelectorWidget.populate_years": {
            "name": "populate_years",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangePointSelectorWidget.populate_groups": {
            "name": "populate_groups",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangePointSelectorWidget.set_years": {
            "name": "set_years",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "years": []
            }
        },
        "RangePointSelectorWidget.selection": {
            "name": "selection",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/ui/widgets/range_selector.py": {
        "RangeSelectorWidget.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSelectorWidget.add_tracer": {
            "name": "add_tracer",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracer": [
                    "int"
                ]
            }
        },
        "RangeSelectorWidget._tracer": {
            "name": "_tracer",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSelectorWidget.populate_years": {
            "name": "populate_years",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSelectorWidget.populate_groups": {
            "name": "populate_groups",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeSelectorWidget.selection": {
            "name": "selection",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/ui/widgets/scrollable_list.py": {
        "ScrollableList.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableList.pack": {
            "name": "pack",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableList.set_values": {
            "name": "set_values",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "list[]"
                ]
            }
        },
        "ScrollableList.extend": {
            "name": "extend",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableList.append": {
            "name": "append",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "element": [
                    "int",
                    "str"
                ]
            }
        },
        "ScrollableList.clear": {
            "name": "clear",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableList.insert": {
            "name": "insert",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "typing.Callable[, ]",
                    "list[str]",
                    "int",
                    "list[]"
                ]
            }
        },
        "ScrollableList.delete": {
            "name": "delete",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str",
                    "list[]"
                ],
                "end": [
                    "int",
                    "str",
                    "list[]"
                ]
            }
        },
        "ScrollableList.get": {
            "name": "get",
            "location": 43,
            "return": [
                "None",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableList.curselection": {
            "name": "curselection",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScrollableList.get_cur": {
            "name": "get_cur",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/ui/widgets/scrollable_text.py": {
        "ScrollableText.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableText.pack": {
            "name": "pack",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableText.lock_text": {
            "name": "lock_text",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableText.unlock_text": {
            "name": "unlock_text",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableText.clear_text": {
            "name": "clear_text",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScrollableText.add_text": {
            "name": "add_text",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "ScrollableText.set_text": {
            "name": "set_text",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "dfb_predict-master/src/ui/widgets/select_box.py": {
        "SelectBox.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectBox.add_option": {
            "name": "add_option",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option": [
                    "str",
                    "dict[str, str]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "SelectBox.set_options": {
            "name": "set_options",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "list[str]",
                    "str"
                ],
                "set_val": [
                    "None",
                    "str",
                    "list[\"DeliveryItem\"]",
                    "list[list[str]]",
                    "bool",
                    "list[]",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ]
            }
        },
        "SelectBox._trace_value": {
            "name": "_trace_value",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectBox.add_tracer": {
            "name": "add_tracer",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "typing.Callable[[], None]",
                    "str",
                    "list[]",
                    "tuple[]"
                ]
            }
        },
        "SelectBox.selection": {
            "name": "selection",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dfb_predict-master/src/ui/widgets/__init__.py": {}
}
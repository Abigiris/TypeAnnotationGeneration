{
    "dgm-final-project-master/setup.py": {},
    "dgm-final-project-master/squawkbox/data.py": {
        "pad_and_combine_instances": {
            "name": "pad_and_combine_instances",
            "location": 18,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "batch": []
            }
        },
        "MidiDataset.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "transforms": [
                    "None",
                    "str",
                    "bool",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "embedding_type": [
                    "typing.Text"
                ]
            }
        },
        "MidiDataset.__getitem__": {
            "name": "__getitem__",
            "location": 68,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "typing.Any"
                ]
            }
        },
        "MidiDataset.__len__": {
            "name": "__len__",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MidiDataset.read_instances": {
            "name": "read_instances",
            "location": 103,
            "return": [
                "list[typing.Union[str,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "dgm-final-project-master/squawkbox/midi.py": {
        "_parse_variable_length_quantity": {
            "name": "_parse_variable_length_quantity",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "byte_queue": []
            }
        },
        "_as_variable_length_quantity": {
            "name": "_as_variable_length_quantity",
            "location": 33,
            "return": [
                "bytes"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "_pop_bytes": {
            "name": "_pop_bytes",
            "location": 52,
            "return": [
                "bytes"
            ],
            "arguments": {
                "byte_queue": [],
                "n": [
                    "int",
                    "typing.Deque",
                    "bytearray",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Midi.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [
                    "typing.MutableMapping"
                ],
                "tracks": [
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        },
        "Midi.load": {
            "name": "load",
            "location": 70,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "tuple[int]",
                    "bool"
                ],
                "f": []
            }
        },
        "Midi.dump": {
            "name": "dump",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "str",
                    "typing.IO",
                    "bool",
                    "None"
                ]
            }
        },
        "MidiHeader.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format_type": [
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "list[str]",
                    "None"
                ],
                "ntracks": [
                    "set[str]",
                    "bool",
                    "float",
                    "str"
                ],
                "pulses_per_quarter_note": [
                    "set[str]",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "MidiHeader.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MidiHeader.from_bytes": {
            "name": "from_bytes",
            "location": 128,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "chunk": []
            }
        },
        "MidiHeader.to_bytes": {
            "name": "to_bytes",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MidiTrack.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MidiTrack.from_bytes": {
            "name": "from_bytes",
            "location": 158,
            "return": [],
            "arguments": {
                "cls": [
                    "float",
                    "None",
                    "str",
                    "typing.Sequence[str]"
                ],
                "chunk": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "dict[, ]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MidiTrack._parse_event": {
            "name": "_parse_event",
            "location": 172,
            "return": [],
            "arguments": {
                "byte_queue": [],
                "prev_event": [
                    "None",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "MidiTrack.to_bytes": {
            "name": "to_bytes",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": 197,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.from_byte_queue": {
            "name": "from_byte_queue",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Deque"
                ],
                "byte_queue": [
                    "int",
                    "typing.Deque"
                ],
                "prefix": [
                    "int",
                    "typing.Deque"
                ]
            }
        },
        "SysexEvent.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "float"
                ],
                "metadata": [
                    "int",
                    "float"
                ]
            }
        },
        "SysexEvent.from_byte_queue": {
            "name": "from_byte_queue",
            "location": 220,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "byte_queue": [],
                "prefix": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "SysexEvent.to_bytes": {
            "name": "to_bytes",
            "location": 227,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaEvent.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "list[]",
                    "None",
                    "list[str]",
                    "bool",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ],
                "event_type": [
                    "typing.Callable[, ]",
                    "list[dict[, ]]",
                    "Exception",
                    "str",
                    "int"
                ],
                "metadata": [
                    "str",
                    "list[]",
                    "None",
                    "list[str]",
                    "bool",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "MetaEvent.from_byte_queue": {
            "name": "from_byte_queue",
            "location": 267,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "complex",
                    "bytes",
                    "typing.Type"
                ],
                "byte_queue": [],
                "prefix": [
                    "int",
                    "str",
                    "complex",
                    "bytes",
                    "typing.Type"
                ]
            }
        },
        "MetaEvent.to_bytes": {
            "name": "to_bytes",
            "location": 301,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MidiEvent.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "tuple[typing.Union[str,str,str]]",
                    "str",
                    "None",
                    "bytes"
                ],
                "event_type": [
                    "int"
                ],
                "channel": [
                    "int",
                    "tuple[typing.Union[str,str,str]]",
                    "str",
                    "None",
                    "bytes"
                ],
                "metadata": [
                    "int",
                    "tuple[typing.Union[str,str,str]]",
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "MidiEvent.from_byte_queue": {
            "name": "from_byte_queue",
            "location": 341,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "complex",
                    "bytes",
                    "typing.Type"
                ],
                "byte_queue": [],
                "prefix": [
                    "int"
                ]
            }
        },
        "MidiEvent.to_bytes": {
            "name": "to_bytes",
            "location": 355,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dgm-final-project-master/squawkbox/optim.py": {},
    "dgm-final-project-master/squawkbox/tokenizer.py": {
        "split_waits": {
            "name": "split_waits",
            "location": 14,
            "return": [
                "float",
                "list[typing.Text]"
            ],
            "arguments": {
                "delta_time": [
                    "float",
                    "int"
                ]
            }
        },
        "Tokenizer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "int"
                ],
                "max_tokens": [
                    "None",
                    "int"
                ],
                "max_wait_time": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Tokenizer.tokenize": {
            "name": "tokenize",
            "location": 31,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "self": [],
                "midi": [
                    "bytes",
                    "str",
                    "None",
                    "typing.Any",
                    "typing.Sequence[int]"
                ]
            }
        },
        "Tokenizer.detokenize": {
            "name": "detokenize",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": [
                    "str"
                ]
            }
        }
    },
    "dgm-final-project-master/squawkbox/transform.py": {
        "TimeStretch.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min": [
                    "int",
                    "float"
                ],
                "max": [
                    "int",
                    "float"
                ]
            }
        },
        "TimeStretch.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str"
                ]
            }
        },
        "VolumeShift.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min": [
                    "int",
                    "float"
                ],
                "max": [
                    "int",
                    "float"
                ]
            }
        },
        "VolumeShift.__call__": {
            "name": "__call__",
            "location": 39,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str"
                ]
            }
        },
        "PitchShift.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "min": [
                    "int",
                    "float"
                ],
                "max": [
                    "int",
                    "float"
                ]
            }
        },
        "PitchShift.__call__": {
            "name": "__call__",
            "location": 63,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str"
                ]
            }
        }
    },
    "dgm-final-project-master/squawkbox/utils.py": {
        "Registrable.register": {
            "name": "register",
            "location": 8,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "bool"
                ],
                "name": [
                    "str",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "Registrable.get": {
            "name": "get",
            "location": 18,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Registrable.from_config": {
            "name": "from_config",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "config": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "Registrable.register.add_subclass_to_registry": {
            "name": "add_subclass_to_registry",
            "location": 10,
            "return": [],
            "arguments": {
                "subclass": []
            }
        }
    },
    "dgm-final-project-master/squawkbox/__init__.py": {},
    "dgm-final-project-master/squawkbox/commands/evaluate.py": {
        "_evaluate": {
            "name": "_evaluate",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "dgm-final-project-master/squawkbox/commands/process_midi.py": {
        "_tokenize": {
            "name": "_tokenize",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_process_maestro": {
            "name": "_process_maestro",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "_detokenize": {
            "name": "_detokenize",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "dgm-final-project-master/squawkbox/commands/sample.py": {
        "_sample": {
            "name": "_sample",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "dgm-final-project-master/squawkbox/commands/train.py": {
        "_train": {
            "name": "_train",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "dgm-final-project-master/squawkbox/commands/__init__.py": {},
    "dgm-final-project-master/squawkbox/models/baseline.py": {
        "Baseline.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ],
                "embedding_dim": [
                    "int",
                    "float"
                ],
                "num_lstm_units": [
                    "int",
                    "None",
                    "str"
                ],
                "num_lstm_layers": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "None"
                ],
                "padding": [
                    "int"
                ]
            }
        },
        "Baseline.forward": {
            "name": "forward",
            "location": 29,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "bytes"
                ],
                "tgt": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "bool"
                ],
                "hidden": [
                    "None",
                    "str",
                    "list[str]",
                    "int",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        }
    },
    "dgm-final-project-master/squawkbox/models/gpt2.py": {
        "GPT2_Standard.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [
                    "bool",
                    "str"
                ],
                "n_positions": [
                    "bool",
                    "str"
                ],
                "n_ctx": [
                    "bool",
                    "str"
                ],
                "n_embd": [
                    "bool",
                    "str"
                ],
                "n_layers": [
                    "bool",
                    "str"
                ],
                "n_head": [
                    "bool",
                    "str"
                ],
                "layer_norm_epsilon": [
                    "bool",
                    "str"
                ],
                "initializer_range": [
                    "bool",
                    "str"
                ],
                "padding": [
                    "int"
                ]
            }
        },
        "GPT2_Standard.forward": {
            "name": "forward",
            "location": 53,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "int",
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "tgt": [
                    "None"
                ],
                "timestamps": [
                    "None",
                    "int",
                    "str",
                    "dict[, ]"
                ],
                "hidden": [
                    "None",
                    "typing.Iterator",
                    "list[int]",
                    "str"
                ]
            }
        }
    },
    "dgm-final-project-master/squawkbox/models/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dgm-final-project-master/squawkbox/models/__init__.py": {},
    "dgm-final-project-master/squawkbox/modules/attention.py": {
        "Attention.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nx": [
                    "int"
                ],
                "n_ctx": [
                    "None",
                    "float",
                    "bool"
                ],
                "config": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Hashable"
                ],
                "scale": [
                    "bool"
                ]
            }
        },
        "Attention._attn": {
            "name": "_attn",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "q": [
                    "int",
                    "None",
                    "str"
                ],
                "k": [
                    "int",
                    "None",
                    "str"
                ],
                "v": []
            }
        },
        "Attention.merge_heads": {
            "name": "merge_heads",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "Attention.split_heads": {
            "name": "split_heads",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "k": [
                    "bool"
                ]
            }
        },
        "Attention.forward": {
            "name": "forward",
            "location": 45,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "layer_past": [
                    "None",
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "dgm-final-project-master/squawkbox/modules/gpt2_modules.py": {
        "GPT2Config.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size_or_config_json_file": [
                    "str",
                    "bytes"
                ],
                "n_positions": [
                    "int"
                ],
                "n_ctx": [
                    "int"
                ],
                "n_embd": [
                    "int"
                ],
                "n_layer": [
                    "int"
                ],
                "n_head": [
                    "int"
                ],
                "layer_norm_epsilon": [
                    "float"
                ],
                "initializer_range": [
                    "float"
                ]
            }
        },
        "GPT2Config.from_dict": {
            "name": "from_dict",
            "location": 74,
            "return": [
                "GPT2Config"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "str",
                    "bool",
                    "None"
                ],
                "json_object": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "GPT2Config.from_json_file": {
            "name": "from_json_file",
            "location": 82,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "json_file": [
                    "str"
                ]
            }
        },
        "GPT2Config.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPT2Config.to_dict": {
            "name": "to_dict",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPT2Config.to_json_string": {
            "name": "to_json_string",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GPT2Config.to_json_file": {
            "name": "to_json_file",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_file_path": [
                    "str"
                ]
            }
        },
        "MLP.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_state": [
                    "int"
                ],
                "config": [
                    "dict[, ]",
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "MLP.forward": {
            "name": "forward",
            "location": 114,
            "return": [
                "int",
                "list[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "Block.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_ctx": [
                    "dict[str, typing.Any]",
                    "None"
                ],
                "config": [
                    "bool",
                    "dict[, ]"
                ],
                "scale": [
                    "bool"
                ]
            }
        },
        "Block.forward": {
            "name": "forward",
            "location": 129,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "layer_past": [
                    "None",
                    "int"
                ]
            }
        },
        "GPT2LMHead.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_embeddings_weights": [
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "config": [
                    "typing.Sequence[]",
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GPT2LMHead.set_embeddings_weights": {
            "name": "set_embeddings_weights",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_embeddings_weights": [
                    "str"
                ]
            }
        },
        "GPT2LMHead.forward": {
            "name": "forward",
            "location": 150,
            "return": [
                "dict[str, str]",
                "list[tuple[typing.Union[str,str,typing.Any]]]",
                "str",
                "dict[str, typing.Union[dict[, ],typing.Any]]",
                "int",
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "hidden_state": [
                    "int"
                ]
            }
        },
        "GPT2MultipleChoiceHead.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]"
                ]
            }
        },
        "GPT2MultipleChoiceHead.forward": {
            "name": "forward",
            "location": 168,
            "return": [
                "typing.Pattern",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "hidden_states": [],
                "mc_token_ids": []
            }
        },
        "GPT2PreTrainedModel.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "typing.Sequence[]"
                ]
            }
        },
        "GPT2PreTrainedModel.set_tied": {
            "name": "set_tied",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPT2PreTrainedModel.init_weights": {
            "name": "init_weights",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "str",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "GPT2PreTrainedModel.from_pretrained": {
            "name": "from_pretrained",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "pretrained_model_name_or_path": [
                    "str",
                    "bool"
                ],
                "state_dict": [],
                "cache_dir": [
                    "None",
                    "str",
                    "bool"
                ],
                "from_tf": [
                    "bool"
                ]
            }
        },
        "GPT2Model.__init__": {
            "name": "__init__",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]"
                ]
            }
        },
        "GPT2Model.forward": {
            "name": "forward",
            "location": 374,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "input_ids": [],
                "position_ids": [
                    "None",
                    "int",
                    "str",
                    "list[]"
                ],
                "token_type_ids": [
                    "None",
                    "int"
                ],
                "past": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "GPT2LMHeadModel.__init__": {
            "name": "__init__",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]"
                ]
            }
        },
        "GPT2LMHeadModel.set_tied": {
            "name": "set_tied",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPT2LMHeadModel.forward": {
            "name": "forward",
            "location": 454,
            "return": [
                "tuple[typing.Union[dict[str, typing.Any],dict[int, set[typing.Any]],int,str,list[]]]"
            ],
            "arguments": {
                "self": [],
                "input_ids": [
                    "str",
                    "None",
                    "int"
                ],
                "position_ids": [
                    "None",
                    "str",
                    "int"
                ],
                "token_type_ids": [
                    "None",
                    "str",
                    "int"
                ],
                "lm_labels": [
                    "None",
                    "str",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "past": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "GPT2PreTrainedModel.from_pretrained.load": {
            "name": "load",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [],
                "prefix": [
                    "typing.Text"
                ]
            }
        }
    },
    "dgm-final-project-master/squawkbox/modules/positional_embedding.py": {
        "PositionalEmbedding.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int",
                    "float"
                ]
            }
        },
        "PositionalEmbedding.forward": {
            "name": "forward",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "timestamp": [
                    "typing.Sequence[float]",
                    "int",
                    "float",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "dgm-final-project-master/squawkbox/modules/sampler.py": {
        "Sampler.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decoder": [
                    "int",
                    "float"
                ],
                "embedding_type": [
                    "str",
                    "bool"
                ],
                "temp": [
                    "None",
                    "int",
                    "float"
                ],
                "top_k": [
                    "None",
                    "int",
                    "float"
                ],
                "top_p": [
                    "None",
                    "str",
                    "bool"
                ],
                "max_length": [
                    "int"
                ]
            }
        },
        "Sampler._delta_time": {
            "name": "_delta_time",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "sample": [
                    "str",
                    "float"
                ],
                "dev": [
                    "int",
                    "list[int]",
                    "list[str]"
                ]
            }
        },
        "Sampler._temper": {
            "name": "_temper",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "logits": [
                    "int"
                ]
            }
        },
        "Sampler._sample": {
            "name": "_sample",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "probs": []
            }
        },
        "Sampler._sample_top_k": {
            "name": "_sample_top_k",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "probs": []
            }
        },
        "Sampler._sample_top_p": {
            "name": "_sample_top_p",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "probs": []
            }
        },
        "Sampler._to_tokens": {
            "name": "_to_tokens",
            "location": 73,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "list[int]"
                ]
            }
        },
        "Sampler.forward": {
            "name": "forward",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "None",
                    "list[dict[str, int]]",
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "list[set[int]]"
                ],
                "timestamps": [
                    "str"
                ],
                "batch_size": [
                    "None",
                    "int",
                    "list[str]"
                ],
                "dev": [
                    "None",
                    "int"
                ]
            }
        }
    },
    "dgm-final-project-master/squawkbox/modules/utils.py": {
        "gelu": {
            "name": "gelu",
            "location": 6,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [
                    "int"
                ]
            }
        },
        "Conv1D.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nf": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "nx": [
                    "int",
                    "float"
                ]
            }
        },
        "Conv1D.forward": {
            "name": "forward",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "dgm-final-project-master/squawkbox/modules/__init__.py": {},
    "dgm-final-project-master/tests/test_baseline.py": {
        "test_baseline": {
            "name": "test_baseline",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dgm-final-project-master/tests/test_commands.py": {
        "NullModel.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullModel.forward": {
            "name": "forward",
            "location": 19,
            "return": [
                "dict[typing.Text, None]"
            ],
            "arguments": {}
        },
        "TestTrainCommand.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainCommand.test_runs": {
            "name": "test_runs",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrainCommand.tearDown": {
            "name": "tearDown",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dgm-final-project-master/tests/test_data.py": {
        "test_read_instance": {
            "name": "test_read_instance",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pad_and_combine_instances": {
            "name": "test_pad_and_combine_instances",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dgm-final-project-master/tests/test_midi.py": {
        "test_parse_variable_length_quantity": {
            "name": "test_parse_variable_length_quantity",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_as_variable_length_quantity": {
            "name": "test_as_variable_length_quantity",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestMidiHeader.setUp": {
            "name": "setUp",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMidiHeader.test_from_bytes": {
            "name": "test_from_bytes",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMidiHeader.test_unsupported": {
            "name": "test_unsupported",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMidiTrack.test_from_bytes": {
            "name": "test_from_bytes",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMidiFile.test_loads": {
            "name": "test_loads",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dgm-final-project-master/tests/test_positional_embeddings.py": {
        "test_positional_embedding": {
            "name": "test_positional_embedding",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dgm-final-project-master/tests/test_tokenizer.py": {
        "test_tokenize_and_detokenize": {
            "name": "test_tokenize_and_detokenize",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dgm-final-project-master/tests/test_transform.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dgm-final-project-master/tests/test_utils.py": {
        "OneArg.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "float"
                ]
            }
        },
        "TestRegistrable.test_get": {
            "name": "test_get",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegistrable.test_from_config": {
            "name": "test_from_config",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dgm-final-project-master/tests/__init__.py": {}
}
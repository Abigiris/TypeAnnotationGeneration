{
    "dmltests-master/dev.py": {
        "_intp": {
            "name": "_intp",
            "location": 87,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "mode": [
                    "str",
                    "None",
                    "list[int]"
                ],
                "hex": [
                    "str",
                    "None",
                    "list[int]"
                ],
                "st": [
                    "str",
                    "None",
                    "list[int]"
                ],
                "path": [
                    "str",
                    "None",
                    "list[int]"
                ]
            }
        },
        "fintp": {
            "name": "fintp",
            "location": 92,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "mode": [
                    "str",
                    "None",
                    "list[int]"
                ],
                "hex": [
                    "str",
                    "None",
                    "list[int]"
                ],
                "st": [
                    "str",
                    "None",
                    "list[int]"
                ],
                "path": [
                    "str",
                    "None",
                    "list[int]"
                ]
            }
        }
    },
    "dmltests-master/__init__.py": {},
    "dmltests-master/bf/bf_tk.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        },
        "Application.create_widgets": {
            "name": "create_widgets",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.bf_command": {
            "name": "bf_command",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.bf_src": {
            "name": "bf_src",
            "location": 43,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.say_hi": {
            "name": "say_hi",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/bf/brainfuck.py": {
        "bf": {
            "name": "bf",
            "location": 4,
            "return": [],
            "arguments": {
                "src": [],
                "data": [],
                "left": [],
                "right": [],
                "idx": [],
                "strict": []
            }
        }
    },
    "dmltests-master/BSL/github_scrape.py": {},
    "dmltests-master/BSL/github_scrape0.py": {},
    "dmltests-master/BSL/scraper.py": {},
    "dmltests-master/C/cffiimp.py": {},
    "dmltests-master/C/wrap_cython/main.py": {},
    "dmltests-master/C/wrap_cython/setup.py": {},
    "dmltests-master/Cython/main.py": {},
    "dmltests-master/Cython/__init__.py": {},
    "dmltests-master/Cython/dml/fib_my.py": {
        "fib": {
            "name": "fib",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "rep_fib": {
            "name": "rep_fib",
            "location": 19,
            "return": [
                "list[]",
                "int",
                "str"
            ],
            "arguments": {
                "repnum": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "fibnum": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ]
            }
        }
    },
    "dmltests-master/Cython/dml/fib_py.py": {
        "fib": {
            "name": "fib",
            "location": 2,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "rep_fib": {
            "name": "rep_fib",
            "location": 12,
            "return": [
                "int",
                "list[int]"
            ],
            "arguments": {
                "repnum": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "fibnum": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ]
            }
        }
    },
    "dmltests-master/Cython/dml/setup.py": {},
    "dmltests-master/Cython/dml/test.py": {
        "fib": {
            "name": "fib",
            "location": 2,
            "return": [
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "rep_fib": {
            "name": "rep_fib",
            "location": 12,
            "return": [
                "int",
                "list[int]"
            ],
            "arguments": {
                "repnum": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "fibnum": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ]
            }
        }
    },
    "dmltests-master/Cython/dml/__init__.py": {},
    "dmltests-master/dmlnotebook/dev.py": {},
    "dmltests-master/dmlnotebook/__init__.py": {},
    "dmltests-master/dmlnotebook/src/images_jup.py": {},
    "dmltests-master/flask/src/config.py": {},
    "dmltests-master/flask/src/conftest.py": {},
    "dmltests-master/flask/src/dmlmicro.py": {
        "make_shell_context": {
            "name": "make_shell_context",
            "location": 10,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flask/src/tests.py": {
        "app": {
            "name": "app",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "UserModelCase.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModelCase.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModelCase.test_password_hashing": {
            "name": "test_password_hashing",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModelCase.test_avatar": {
            "name": "test_avatar",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModelCase.test_follow": {
            "name": "test_follow",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserModelCase.test_follow_posts": {
            "name": "test_follow_posts",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApp.test_home_page": {
            "name": "test_home_page",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestApp.test_index_page": {
            "name": "test_index_page",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "dmltests-master/flask/src/app/celeryjobs.py": {
        "make_celery": {
            "name": "make_celery",
            "location": 7,
            "return": [
                "Celery"
            ],
            "arguments": {
                "app": []
            }
        },
        "make_celery.ContextTask.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/flask/src/app/cli.py": {
        "register": {
            "name": "register",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "register.translate": {
            "name": "translate",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "register.init": {
            "name": "init",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "lang": []
            }
        },
        "register.update": {
            "name": "update",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "register.compile": {
            "name": "compile",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "register.search": {
            "name": "search",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "register.reindex": {
            "name": "reindex",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flask/src/app/email.py": {
        "send_async_email": {
            "name": "send_async_email",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "msg": [
                    "dict[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "send_email": {
            "name": "send_email",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "subject": [
                    "str"
                ],
                "sender": [
                    "str"
                ],
                "recipients": [
                    "str"
                ],
                "text_body": [
                    "str",
                    "dict[, ]",
                    "bytes"
                ],
                "html_body": [
                    "str",
                    "list[str]"
                ],
                "attachments": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "sync": [
                    "bool"
                ]
            }
        }
    },
    "dmltests-master/flask/src/app/models.py": {
        "load_user": {
            "name": "load_user",
            "location": 26,
            "return": [
                "str",
                "typing.Pattern",
                "int"
            ],
            "arguments": {
                "id": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.get_rq_job": {
            "name": "get_rq_job",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Task.get_progress": {
            "name": "get_progress",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchableMixin.search": {
            "name": "search",
            "location": 79,
            "return": [
                "tuple[int]",
                "tuple[typing.Union[list[tuple[typing.Union[int,int]]],list[tuple[typing.Union[int,str]]],tuple[int]]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "TypeError",
                    "bool"
                ],
                "expression": [],
                "page": [],
                "per_page": []
            }
        },
        "SearchableMixin.before_commit": {
            "name": "before_commit",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ],
                "session": [
                    "dict[str, typing.Any]",
                    "list[list[typing.Any]]"
                ]
            }
        },
        "SearchableMixin.after_commit": {
            "name": "after_commit",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "bool",
                    "str"
                ],
                "session": [
                    "typing.Mapping",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "SearchableMixin.reindex": {
            "name": "reindex",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "None",
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "SearchableMixin.deleteindex": {
            "name": "deleteindex",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "int",
                    "complex",
                    "bytes"
                ]
            }
        },
        "Notification.get_data": {
            "name": "get_data",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.avatar": {
            "name": "avatar",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "tuple[]",
                    "float",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "User.set_password": {
            "name": "set_password",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "list[str]",
                    "bool",
                    "tuple[str]"
                ]
            }
        },
        "User.check_password": {
            "name": "check_password",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "User.follow": {
            "name": "follow",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "int"
                ]
            }
        },
        "User.unfollow": {
            "name": "unfollow",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "User.is_following": {
            "name": "is_following",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bool"
                ]
            }
        },
        "User.followed_posts": {
            "name": "followed_posts",
            "location": 190,
            "return": [
                "list[]",
                "list[float]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.new_messages": {
            "name": "new_messages",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.add_notification": {
            "name": "add_notification",
            "location": 206,
            "return": [
                "Notification"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "dict[typing.Any, list[]]",
                    "bytes",
                    "bool",
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, str]",
                    "None"
                ],
                "data": [
                    "str",
                    "dict[str, L]",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "User.get_reset_password_token": {
            "name": "get_reset_password_token",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "expires_in": [
                    "int"
                ]
            }
        },
        "User.verify_reset_password_token": {
            "name": "verify_reset_password_token",
            "location": 218,
            "return": [
                "None",
                "str",
                "dict[, ]",
                "dict[str, str]",
                "dict[str, int]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Callable[str, typing.Any]"
                ]
            }
        },
        "User.launch_task": {
            "name": "launch_task",
            "location": 229,
            "return": [
                "Task"
            ],
            "arguments": {
                "self": [],
                "taskname": [],
                "description": [
                    "int"
                ]
            }
        },
        "User.get_tasks_in_progress": {
            "name": "get_tasks_in_progress",
            "location": 237,
            "return": [
                "dict[, ]",
                "list[typing.Any]",
                "None",
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_task_in_progress": {
            "name": "get_task_in_progress",
            "location": 241,
            "return": [
                "dict[str, typing.Any]",
                "None",
                "dict[, ]",
                "dict[str, int]",
                "bool",
                "dict[str, str]",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "taskname": []
            }
        },
        "Post.__repr__": {
            "name": "__repr__",
            "location": 257,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/flask/src/app/search.py": {
        "add_to_index": {
            "name": "add_to_index",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "str",
                    "int"
                ],
                "model": [
                    "typing.Type"
                ]
            }
        },
        "remove_from_index": {
            "name": "remove_from_index",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "str"
                ],
                "model": [
                    "str"
                ]
            }
        },
        "query_index": {
            "name": "query_index",
            "location": 22,
            "return": [
                "tuple[typing.Union[list[],int]]",
                "tuple[typing.Union[list[int],str]]"
            ],
            "arguments": {
                "index": [
                    "bool",
                    "str",
                    "bytes",
                    "typing.Type",
                    "dict[, ]"
                ],
                "query": [
                    "bool",
                    "str",
                    "bytes",
                    "typing.Type",
                    "dict[, ]"
                ],
                "page": [
                    "bool"
                ],
                "per_page": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "delete_index": {
            "name": "delete_index",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "dmltests-master/flask/src/app/tasks.py": {
        "_set_task_progress": {
            "name": "_set_task_progress",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "progress": [
                    "int"
                ]
            }
        },
        "export_posts": {
            "name": "export_posts",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "user_id": []
            }
        }
    },
    "dmltests-master/flask/src/app/translate.py": {
        "translate": {
            "name": "translate",
            "location": 7,
            "return": [
                "_",
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "source_language": [
                    "str"
                ],
                "dest_language": [
                    "str"
                ]
            }
        }
    },
    "dmltests-master/flask/src/app/types.py": {},
    "dmltests-master/flask/src/app/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 31,
            "return": [
                "Flask"
            ],
            "arguments": {
                "config_class": []
            }
        },
        "get_locale": {
            "name": "get_locale",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flask/src/app/auth/email.py": {
        "send_password_reset_email": {
            "name": "send_password_reset_email",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "user": []
            }
        }
    },
    "dmltests-master/flask/src/app/auth/forms.py": {
        "RegistrationForm.validate_username": {
            "name": "validate_username",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "str",
                    "set[]"
                ]
            }
        },
        "RegistrationForm.validate_email": {
            "name": "validate_email",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "dmltests-master/flask/src/app/auth/routes.py": {
        "login": {
            "name": "login",
            "location": 18,
            "return": [
                "dict[str, typing.Any]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 44,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "bool"
            ],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 51,
            "return": [
                "dict[str, typing.Any]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "reset_password_request": {
            "name": "reset_password_request",
            "location": 72,
            "return": [
                "dict[str, typing.Any]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "reset_password": {
            "name": "reset_password",
            "location": 93,
            "return": [
                "dict[str, typing.Any]",
                "dict[, ]",
                "typing.MutableMapping",
                "tuple[typing.Union[dict[, ],dict[, ]]]"
            ],
            "arguments": {
                "token": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "dmltests-master/flask/src/app/auth/__init__.py": {},
    "dmltests-master/flask/src/app/errors/handlers.py": {
        "not_found_error": {
            "name": "not_found_error",
            "location": 11,
            "return": [
                "tuple[typing.Union[dict[, ],typing.MutableMapping,tuple[typing.Union[dict[, ],dict[, ]]],int]]"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "tuple[]",
                    "list[errors.Error]",
                    "bool",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "internal_error": {
            "name": "internal_error",
            "location": 17,
            "return": [
                "tuple[typing.Union[dict[, ],typing.MutableMapping,tuple[typing.Union[dict[, ],dict[, ]]],int]]"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "tuple[]",
                    "list[errors.Error]",
                    "str"
                ]
            }
        }
    },
    "dmltests-master/flask/src/app/errors/__init__.py": {},
    "dmltests-master/flask/src/app/main/forms.py": {
        "SearchForm.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EditProfileForm.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "original_username": [
                    "int",
                    "float"
                ]
            }
        },
        "EditProfileForm.validate_username": {
            "name": "validate_username",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "float"
                ]
            }
        }
    },
    "dmltests-master/flask/src/app/main/routes.py": {
        "before_request": {
            "name": "before_request",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "user_popup": {
            "name": "user_popup",
            "location": 28,
            "return": [
                "dict[, ]",
                "typing.MutableMapping",
                "tuple[typing.Union[dict[, ],dict[, ]]]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int"
                ]
            }
        },
        "export_posts": {
            "name": "export_posts",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "send_message": {
            "name": "send_message",
            "location": 49,
            "return": [
                "dict[str, typing.Any]",
                "int",
                "str"
            ],
            "arguments": {
                "recipient": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "messages": {
            "name": "messages",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "notifications": {
            "name": "notifications",
            "location": 90,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "bool",
                "typing.Mapping"
            ],
            "arguments": {}
        },
        "search": {
            "name": "search",
            "location": 104,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "bool"
            ],
            "arguments": {}
        },
        "home": {
            "name": "home",
            "location": 122,
            "return": [
                "typing.Iterable[E]"
            ],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 129,
            "return": [
                "dict[typing.Any, str]",
                "dict[str, str]",
                "typing.OrderedDict",
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {}
        },
        "user": {
            "name": "user",
            "location": 156,
            "return": [],
            "arguments": {
                "username": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "edit_profile": {
            "name": "edit_profile",
            "location": 172,
            "return": [
                "dict[, ]",
                "dict[str, typing.Any]",
                "bool",
                "str",
                "bytes",
                "typing.Iterable[typing.Union[typing.Any,int]]",
                "float"
            ],
            "arguments": {}
        },
        "follow": {
            "name": "follow",
            "location": 191,
            "return": [
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "username": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "unfollow": {
            "name": "unfollow",
            "location": 210,
            "return": [
                "dict[str, typing.Any]"
            ],
            "arguments": {
                "username": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "explore": {
            "name": "explore",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "translate_text": {
            "name": "translate_text",
            "location": 242,
            "return": [
                "dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flask/src/app/main/__init__.py": {},
    "dmltests-master/flask/src/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "revision": [],
                "directives": []
            }
        }
    },
    "dmltests-master/flask/src/migrations/versions/0d8849f0b9b9_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flask/src/migrations/versions/217a438e61a2_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flask/src/migrations/versions/2a2410393c47_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flask/src/migrations/versions/8344ef18e623_add_language_to_posts.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flask/src/migrations/versions/858bdef5033e_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flask/src/migrations/versions/89bbb6d3d5b1_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flask/src/migrations/versions/b15a0b8a1936_msges.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flask/src/migrations/versions/e8391355387e_notifications.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flaskUI/src/backend/app/config.py": {},
    "dmltests-master/flaskUI/src/backend/app/mytypes.py": {},
    "dmltests-master/flaskUI/src/backend/app/routes.py": {
        "index": {
            "name": "index",
            "location": 6,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flaskUI/src/backend/app/webui.py": {
        "index": {
            "name": "index",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/flaskUI/src/backend/app/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 31,
            "return": [
                "Flask"
            ],
            "arguments": {
                "config_class": []
            }
        },
        "get_locale": {
            "name": "get_locale",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/jinja/__init__.py": {},
    "dmltests-master/jinja/djjn/manage.py": {},
    "dmltests-master/jinja/djjn/djjn/jinja2.py": {
        "environment": {
            "name": "environment",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "dmltests-master/jinja/djjn/djjn/settings.py": {},
    "dmltests-master/jinja/djjn/djjn/urls.py": {},
    "dmltests-master/jinja/djjn/djjn/wsgi.py": {},
    "dmltests-master/jinja/djjn/djjn/__init__.py": {},
    "dmltests-master/jinja/djjn/main/admin.py": {},
    "dmltests-master/jinja/djjn/main/apps.py": {},
    "dmltests-master/jinja/djjn/main/models.py": {},
    "dmltests-master/jinja/djjn/main/tests.py": {},
    "dmltests-master/jinja/djjn/main/urls.py": {},
    "dmltests-master/jinja/djjn/main/views.py": {
        "home": {
            "name": "home",
            "location": 5,
            "return": [
                "HttpResponse"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "compress_html": {
            "name": "compress_html",
            "location": 9,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "pipeline_html": {
            "name": "pipeline_html",
            "location": 13,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "compress_jinja": {
            "name": "compress_jinja",
            "location": 17,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "pipeline_jinja": {
            "name": "pipeline_jinja",
            "location": 21,
            "return": [],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "dmltests-master/jinja/djjn/main/__init__.py": {},
    "dmltests-master/jinja/djjn/main/migrations/__init__.py": {},
    "dmltests-master/LineOfCodeCount/LOC_count.py": {
        "countlines": {
            "name": "countlines",
            "location": 6,
            "return": [],
            "arguments": {
                "start": [],
                "lines": [],
                "header": [],
                "begin_start": []
            }
        },
        "pyLines": {
            "name": "pyLines",
            "location": 42,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "jsLines": {
            "name": "jsLines",
            "location": 58,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "cLines": {
            "name": "cLines",
            "location": 74,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "ext_tuple": {
            "name": "ext_tuple",
            "location": 93,
            "return": [],
            "arguments": {
                "file_type": []
            }
        },
        "exclude_list": {
            "name": "exclude_list",
            "location": 126,
            "return": [],
            "arguments": {
                "black_list": []
            }
        },
        "typeLines": {
            "name": "typeLines",
            "location": 138,
            "return": [],
            "arguments": {
                "fold_dir": [],
                "file_type": [],
                "black_list": []
            }
        },
        "typeLines_print": {
            "name": "typeLines_print",
            "location": 163,
            "return": [],
            "arguments": {
                "fold_dir": [],
                "black_list": []
            }
        },
        "countlines.print_header": {
            "name": "print_header",
            "location": 12,
            "return": [],
            "arguments": {
                "header": []
            }
        }
    },
    "dmltests-master/LineOfCodeCount/LOC_count_V4.py": {
        "countlines": {
            "name": "countlines",
            "location": 5,
            "return": [],
            "arguments": {
                "start": [],
                "lines": [],
                "header": [],
                "begin_start": []
            }
        },
        "pyLines": {
            "name": "pyLines",
            "location": 36,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "jsLines": {
            "name": "jsLines",
            "location": 52,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "cLines": {
            "name": "cLines",
            "location": 68,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "typeLines_print": {
            "name": "typeLines_print",
            "location": 154,
            "return": [],
            "arguments": {
                "fold_dir": []
            }
        },
        "countlines.print_header": {
            "name": "print_header",
            "location": 6,
            "return": [],
            "arguments": {
                "header": []
            }
        },
        "TypeLines.ext_tuple": {
            "name": "ext_tuple",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "file_type": []
            }
        },
        "TypeLines.exclude_list": {
            "name": "exclude_list",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "black_list": []
            }
        },
        "TypeLines.typeLines": {
            "name": "typeLines",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "fold_dir": [],
                "file_type": [],
                "black_list": []
            }
        }
    },
    "dmltests-master/LineOfCodeCount/run.py": {},
    "dmltests-master/LineOfCodeCount/setup.py": {},
    "dmltests-master/LineOfCodeCount/__init__.py": {},
    "dmltests-master/LineOfCodeCount/tests/LOC_count_test.py": {
        "Test_Countlines.test_input": {
            "name": "test_input",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_Countlines.test_bad_input": {
            "name": "test_bad_input",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_Countlines.test_output_type": {
            "name": "test_output_type",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyJsCLines.test_py_output_type": {
            "name": "test_py_output_type",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyJsCLines.test_js_output_type": {
            "name": "test_js_output_type",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyJsCLines.test_c_output_type": {
            "name": "test_c_output_type",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypeLines.test_typeLines_print_output": {
            "name": "test_typeLines_print_output",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypeLines.test_bad_input": {
            "name": "test_bad_input",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypeLines.test_ext_tuple_input_type": {
            "name": "test_ext_tuple_input_type",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypeLines.test_ext_tuple_input_tup": {
            "name": "test_ext_tuple_input_tup",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypeLines.test_exclude_list": {
            "name": "test_exclude_list",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypeLines.test_typeLines_output": {
            "name": "test_typeLines_output",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypeLines.test_typeLines_input": {
            "name": "test_typeLines_input",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/LineOfCodeCount/tests/__init__.py": {},
    "dmltests-master/ML/cam1.py": {
        "set_res": {
            "name": "set_res",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "cap": [
                    "list[str]",
                    "int",
                    "None",
                    "set[str]",
                    "typing.AbstractSet"
                ],
                "resolution": [
                    "int",
                    "str"
                ]
            }
        },
        "save_image_groups": {
            "name": "save_image_groups",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "frames_list": [
                    "list[mytypes.imageType]"
                ]
            }
        }
    },
    "dmltests-master/ML/cam2.py": {},
    "dmltests-master/ML/cam3.py": {
        "grey_image": {
            "name": "grey_image",
            "location": 17,
            "return": [],
            "arguments": {
                "color_img": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "squash_image": {
            "name": "squash_image",
            "location": 23,
            "return": [],
            "arguments": {
                "origin_img": [
                    "int",
                    "float",
                    "str",
                    "typing.Iterable[int]"
                ],
                "WIDTH": [
                    "int"
                ],
                "HEIGHT": [
                    "int"
                ]
            }
        },
        "crop_center": {
            "name": "crop_center",
            "location": 30,
            "return": [
                "tuple[typing.Union[int,int,str]]"
            ],
            "arguments": {
                "origin_img": [
                    "list[tuple[typing.Union[int,int,str]]]"
                ],
                "cropx": [
                    "int"
                ],
                "cropy": [
                    "int"
                ]
            }
        },
        "scale_image": {
            "name": "scale_image",
            "location": 38,
            "return": [],
            "arguments": {
                "origin_img": [
                    "int",
                    "float",
                    "str",
                    "list[float]"
                ],
                "WIDTH": [
                    "int"
                ],
                "HEIGHT": [
                    "int"
                ]
            }
        },
        "add_image_text": {
            "name": "add_image_text",
            "location": 58,
            "return": [],
            "arguments": {
                "image": [
                    "bool",
                    "str",
                    "bytes",
                    "None",
                    "typing.TextIO",
                    "float"
                ],
                "text": [
                    "str",
                    "bytes",
                    "typing.TextIO"
                ]
            }
        }
    },
    "dmltests-master/ML/cam4.py": {},
    "dmltests-master/ML/cam5.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/ML/dmlutils.py": {
        "set_res": {
            "name": "set_res",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "cap": [
                    "list[str]",
                    "int",
                    "None",
                    "set[str]",
                    "typing.AbstractSet"
                ],
                "resolution": [
                    "int",
                    "str"
                ]
            }
        },
        "get_outlined_image": {
            "name": "get_outlined_image",
            "location": 35,
            "return": [],
            "arguments": {
                "frame": [
                    "list[int]",
                    "str"
                ]
            }
        },
        "get_largest_contour": {
            "name": "get_largest_contour",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "frame": []
            }
        },
        "get_contour_lims": {
            "name": "get_contour_lims",
            "location": 66,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "frame": [
                    "dict[str, set[str]]",
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "calc_contact_angle": {
            "name": "calc_contact_angle",
            "location": 73,
            "return": [
                "int"
            ],
            "arguments": {
                "w": [
                    "float",
                    "int"
                ],
                "h": [
                    "float",
                    "int"
                ]
            }
        },
        "drop_params": {
            "name": "drop_params",
            "location": 84,
            "return": [],
            "arguments": {
                "w": [
                    "int"
                ],
                "h": [
                    "int"
                ]
            }
        },
        "get_image_skew": {
            "name": "get_image_skew",
            "location": 93,
            "return": [
                "float"
            ],
            "arguments": {
                "frame": [
                    "dict[, ]",
                    "str",
                    "dict[str, set[str]]",
                    "None"
                ]
            }
        },
        "crop_outlined_image": {
            "name": "crop_outlined_image",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "frame": [
                    "str"
                ]
            }
        },
        "save_image_groups": {
            "name": "save_image_groups",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "frames_list": [
                    "list[mytypes.imageType]",
                    "list[list[int]]"
                ],
                "save_folder": [
                    "typing.Text"
                ],
                "raw": [
                    "bool"
                ],
                "edged": [
                    "bool"
                ],
                "masked": [
                    "bool"
                ]
            }
        },
        "add_image_text": {
            "name": "add_image_text",
            "location": 175,
            "return": [],
            "arguments": {
                "image": [
                    "set[T]"
                ],
                "text": [
                    "str",
                    "bytes"
                ],
                "underline": [
                    "bool"
                ]
            }
        }
    },
    "dmltests-master/ML/dropI.py": {},
    "dmltests-master/ML/dropL.py": {},
    "dmltests-master/ML/dropV.py": {},
    "dmltests-master/ML/LOC.py": {
        "countlines": {
            "name": "countlines",
            "location": 5,
            "return": [],
            "arguments": {
                "start": [],
                "lines": [],
                "header": [],
                "begin_start": []
            }
        },
        "pyLines": {
            "name": "pyLines",
            "location": 36,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "jsLines": {
            "name": "jsLines",
            "location": 52,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "cLines": {
            "name": "cLines",
            "location": 68,
            "return": [],
            "arguments": {
                "directory": []
            }
        },
        "typeLines_print": {
            "name": "typeLines_print",
            "location": 154,
            "return": [],
            "arguments": {
                "fold_dir": []
            }
        },
        "countlines.print_header": {
            "name": "print_header",
            "location": 6,
            "return": [],
            "arguments": {
                "header": []
            }
        },
        "TypeLines.ext_tuple": {
            "name": "ext_tuple",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "file_type": []
            }
        },
        "TypeLines.exclude_list": {
            "name": "exclude_list",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "black_list": []
            }
        },
        "TypeLines.typeLines": {
            "name": "typeLines",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "fold_dir": [],
                "file_type": [],
                "black_list": []
            }
        }
    },
    "dmltests-master/ML/ML1.py": {
        "rgb2hex": {
            "name": "rgb2hex",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "rgb": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "set[int]",
                    "str"
                ],
                "use_opacity": [
                    "bool"
                ]
            }
        },
        "plot_image_info": {
            "name": "plot_image_info",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "bytes",
                    "str",
                    "typing.IO",
                    "typing.TextIO",
                    "int",
                    "None"
                ],
                "k": [
                    "int"
                ]
            }
        }
    },
    "dmltests-master/ML/ML2.py": {},
    "dmltests-master/ML/ML3.py": {},
    "dmltests-master/ML/ML4.py": {
        "load_images": {
            "name": "load_images",
            "location": 110,
            "return": [
                "list[typing.Optional[int]]"
            ],
            "arguments": {
                "base_path": [
                    "str"
                ]
            }
        },
        "check_images": {
            "name": "check_images",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "image_set": [
                    "int"
                ]
            }
        },
        "image_list_to_array": {
            "name": "image_list_to_array",
            "location": 139,
            "return": [],
            "arguments": {
                "image_set": [
                    "int",
                    "typing.Counter",
                    "dict[str, list[str]]",
                    "float",
                    "str",
                    "list[str]"
                ]
            }
        },
        "build_model": {
            "name": "build_model",
            "location": 184,
            "return": [],
            "arguments": {
                "conv_1_drop": [
                    "float",
                    "tuple[int]"
                ],
                "conv_2_drop": [
                    "float",
                    "tuple[int]"
                ],
                "dense_1_n": [
                    "float",
                    "tuple[int]"
                ],
                "dense_1_drop": [
                    "float",
                    "tuple[int]"
                ],
                "dense_2_n": [
                    "float",
                    "tuple[int]"
                ],
                "dense_2_drop": [
                    "float",
                    "tuple[int]"
                ],
                "lr": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "dmltests-master/ML/s.py": {},
    "dmltests-master/ML/t.py": {},
    "dmltests-master/ML/tests.py": {
        "test1": {
            "name": "test1",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test2": {
            "name": "test2",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "function_with_exception": {
            "name": "function_with_exception",
            "location": 20,
            "return": [],
            "arguments": {
                "inputt": []
            }
        },
        "test3": {
            "name": "test3",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_image_list": {
            "name": "test_image_list",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/ML/__init__.py": {},
    "dmltests-master/ML/mytypes/__init__.py": {},
    "dmltests-master/ML/tests/__init__.py": {},
    "dmltests-master/pyside/__init__.py": {},
    "dmltests-master/pyside/calc/color.py": {
        "run": {
            "name": "run",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Window.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window._setup": {
            "name": "_setup",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window._resize_checkbox": {
            "name": "_resize_checkbox",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window._progressbar_button": {
            "name": "_progressbar_button",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window._style_selector": {
            "name": "_style_selector",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window._calender": {
            "name": "_calender",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window._quit_button": {
            "name": "_quit_button",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window._font_choice": {
            "name": "_font_choice",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window._font_color": {
            "name": "_font_color",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window._calculator": {
            "name": "_calculator",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.color_picker": {
            "name": "color_picker",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.font_choice": {
            "name": "font_choice",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.style_choice": {
            "name": "style_choice",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Window.download": {
            "name": "download",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.enlarge_window_with_check": {
            "name": "enlarge_window_with_check",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.enlarge_window_from_state": {
            "name": "enlarge_window_from_state",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Window.close_application": {
            "name": "close_application",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/pyside/calc/main.py": {
        "start_profiling": {
            "name": "start_profiling",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "set_up_logger": {
            "name": "set_up_logger",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "prof_to_stats": {
            "name": "prof_to_stats",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "profile": []
            }
        },
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/pyside/calc/pycalc.py": {
        "main": {
            "name": "main",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "idealGas.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PyCalcFrame.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win_title": [
                    "typing.Text"
                ],
                "win_size": [
                    "tuple[int]"
                ],
                "icon_path": [
                    "Path"
                ]
            }
        },
        "PyCalcUi.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PyCalcUi._createDisplay": {
            "name": "_createDisplay",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi._createButtons": {
            "name": "_createButtons",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi.setDisplayText": {
            "name": "setDisplayText",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "None"
                ]
            }
        },
        "PyCalcUi.displayText": {
            "name": "displayText",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi.clearDisplay": {
            "name": "clearDisplay",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi._calculateResult": {
            "name": "_calculateResult",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi._buildExpression": {
            "name": "_buildExpression",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sub_exp": [
                    "str"
                ]
            }
        },
        "PyCalcUi._connectSignals": {
            "name": "_connectSignals",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi._evaluateExpression": {
            "name": "_evaluateExpression",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "str",
                    "None",
                    "int"
                ]
            }
        }
    },
    "dmltests-master/pyside/calc/pycalc0.py": {
        "evaluateExpression": {
            "name": "evaluateExpression",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "expression": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EvalExpressionCallable.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "str",
                    "list[]",
                    "int",
                    "None"
                ]
            }
        },
        "idealGas.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PyCalcFrame.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win_title": [
                    "typing.Text"
                ],
                "win_size": [
                    "tuple[int]"
                ],
                "icon_path": [
                    "Path"
                ]
            }
        },
        "PyCalcFrame._open_calc": {
            "name": "_open_calc",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win_title": [
                    "typing.Text"
                ],
                "win_size": [
                    "tuple[int]"
                ],
                "icon_path": [
                    "Path"
                ]
            }
        },
        "PyCalcUi._createDisplay": {
            "name": "_createDisplay",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi._createButtons": {
            "name": "_createButtons",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi.setDisplayText": {
            "name": "setDisplayText",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "None"
                ]
            }
        },
        "PyCalcUi.displayText": {
            "name": "displayText",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi.clearDisplay": {
            "name": "clearDisplay",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcCtrl.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "bool",
                    "None"
                ],
                "model": [
                    "bool",
                    "None"
                ]
            }
        },
        "PyCalcCtrl._calculateResult": {
            "name": "_calculateResult",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcCtrl._buildExpression": {
            "name": "_buildExpression",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sub_exp": [
                    "bool"
                ]
            }
        },
        "PyCalcCtrl._connectSignals": {
            "name": "_connectSignals",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/pyside/calc/pycalc1.py": {
        "main": {
            "name": "main",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "idealGas.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PyCalcFrame.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "win_title": [
                    "typing.Text"
                ],
                "win_size": [
                    "tuple[int]"
                ],
                "icon_path": [
                    "Path"
                ]
            }
        },
        "PyCalcUi.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PyCalcUi._createDisplay": {
            "name": "_createDisplay",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi._createButtons": {
            "name": "_createButtons",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi.setDisplayText": {
            "name": "setDisplayText",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "None"
                ]
            }
        },
        "PyCalcUi.displayText": {
            "name": "displayText",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi.clearDisplay": {
            "name": "clearDisplay",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi._calculateResult": {
            "name": "_calculateResult",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi._buildExpression": {
            "name": "_buildExpression",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sub_exp": [
                    "str"
                ]
            }
        },
        "PyCalcUi._connectSignals": {
            "name": "_connectSignals",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyCalcUi._evaluateExpression": {
            "name": "_evaluateExpression",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "str",
                    "None",
                    "int"
                ]
            }
        }
    },
    "dmltests-master/pyside/calc/t.py": {},
    "dmltests-master/pyside/calc/tempdial.py": {
        "main": {
            "name": "main",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_Bar.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "_Bar.paintEvent": {
            "name": "paintEvent",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_Bar.sizeHint": {
            "name": "sizeHint",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Bar._trigger_refresh": {
            "name": "_trigger_refresh",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Bar._calculate_clicked_value": {
            "name": "_calculate_clicked_value",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "_Bar.mouseMoveEvent": {
            "name": "mouseMoveEvent",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "bytes"
                ]
            }
        },
        "_Bar.mousePressEvent": {
            "name": "mousePressEvent",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "bytes"
                ]
            }
        },
        "PowerBar.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "int"
                ]
            }
        },
        "PowerBar.__getattr__": {
            "name": "__getattr__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "PowerBar.setColor": {
            "name": "setColor",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "str",
                    "int"
                ]
            }
        },
        "PowerBar.setColors": {
            "name": "setColors",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "colors": []
            }
        },
        "PowerBar.setBarPadding": {
            "name": "setBarPadding",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "PowerBar.setBarSolidPercent": {
            "name": "setBarSolidPercent",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "int"
                ]
            }
        },
        "PowerBar.setBackgroundColor": {
            "name": "setBackgroundColor",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "dmltests-master/pyside/calc/__init__.py": {},
    "dmltests-master/pyside/form/main.py": {
        "Form.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "dict[, ]",
                    "str",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "Form.save_entries": {
            "name": "save_entries",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.save_as_json": {
            "name": "save_as_json",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry_dict": [
                    "str"
                ]
            }
        },
        "Form.save_to_db": {
            "name": "save_to_db",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry_dict": [
                    "dict[str, typing.Union[str,int]]",
                    "dict[, ]",
                    "int",
                    "str"
                ]
            }
        },
        "Form.create_connection": {
            "name": "create_connection",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_file": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "Form.create_table": {
            "name": "create_table",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": []
            }
        }
    },
    "dmltests-master/pyside/form/__init__.py": {},
    "dmltests-master/pyside/mplayer/mplay.py": {
        "Form.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Form._init_ui": {
            "name": "_init_ui",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form._menubar": {
            "name": "_menubar",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form._statusbar": {
            "name": "_statusbar",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form._create_rightframe": {
            "name": "_create_rightframe",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form._create_leftframe": {
            "name": "_create_leftframe",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form._create_middleframe": {
            "name": "_create_middleframe",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form._create_bottomframe": {
            "name": "_create_bottomframe",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.set_vol": {
            "name": "set_vol",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.mute_music": {
            "name": "mute_music",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.greetings": {
            "name": "greetings",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.about_us": {
            "name": "about_us",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.browse_file": {
            "name": "browse_file",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.add_to_playlist": {
            "name": "add_to_playlist",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "list[dict[str, typing.Any]]",
                    "float"
                ]
            }
        },
        "Form.del_song": {
            "name": "del_song",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.get_selected_song_num": {
            "name": "get_selected_song_num",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.stop_music": {
            "name": "stop_music",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.pause_music": {
            "name": "pause_music",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.rewind_music": {
            "name": "rewind_music",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.reset_song": {
            "name": "reset_song",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.show_details": {
            "name": "show_details",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "play_song": [
                    "str"
                ]
            }
        },
        "Form.start_count": {
            "name": "start_count",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "total_time": [
                    "int",
                    "float"
                ]
            }
        },
        "Form.play_music": {
            "name": "play_music",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.close": {
            "name": "close",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/pyside/mplayer/t.py": {
        "Form.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Form._init_ui": {
            "name": "_init_ui",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form._menubar": {
            "name": "_menubar",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form._statusbar": {
            "name": "_statusbar",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form._create_rightframe": {
            "name": "_create_rightframe",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form._create_leftframe": {
            "name": "_create_leftframe",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form._create_middleframe": {
            "name": "_create_middleframe",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form._create_bottomframe": {
            "name": "_create_bottomframe",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.set_vol": {
            "name": "set_vol",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.mute_music": {
            "name": "mute_music",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.greetings": {
            "name": "greetings",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.about_us": {
            "name": "about_us",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.browse_file": {
            "name": "browse_file",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.add_to_playlist": {
            "name": "add_to_playlist",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "list[dict[str, typing.Any]]",
                    "float"
                ]
            }
        },
        "Form.del_song": {
            "name": "del_song",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.get_selected_song_num": {
            "name": "get_selected_song_num",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.stop_music": {
            "name": "stop_music",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.pause_music": {
            "name": "pause_music",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.rewind_music": {
            "name": "rewind_music",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.reset_song": {
            "name": "reset_song",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.show_details": {
            "name": "show_details",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "play_song": [
                    "str"
                ]
            }
        },
        "Form.start_count": {
            "name": "start_count",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "total_time": [
                    "int",
                    "float"
                ]
            }
        },
        "Form.play_music": {
            "name": "play_music",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.close": {
            "name": "close",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/pyside/mplayer/tests.py": {
        "TestMplayer.test1": {
            "name": "test1",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMplayer.test_init_values": {
            "name": "test_init_values",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/pyside/mplayer/types.py": {},
    "dmltests-master/pyside/mplayer/__init__.py": {},
    "dmltests-master/QCM/chimes loglog.py": {
        "plot_LSfit": {
            "name": "plot_LSfit",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "meas_x": [
                    "int",
                    "float"
                ],
                "meas_y": [
                    "float",
                    "int"
                ]
            }
        },
        "plot_WLSfit": {
            "name": "plot_WLSfit",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "meas_x": [],
                "meas_y": [],
                "err_y": [
                    "None",
                    "bool"
                ]
            }
        }
    },
    "dmltests-master/QCM/chimes.py": {
        "get_file_list": {
            "name": "get_file_list",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "get_data_list": {
            "name": "get_data_list",
            "location": 23,
            "return": [],
            "arguments": {
                "file_list": [
                    "list[str]",
                    "str",
                    "list[]"
                ]
            }
        },
        "get_fixed_list": {
            "name": "get_fixed_list",
            "location": 31,
            "return": [
                "list[]"
            ],
            "arguments": {
                "data_list": [
                    "list[]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "get_combined_data": {
            "name": "get_combined_data",
            "location": 71,
            "return": [],
            "arguments": {
                "fixed_list": []
            }
        },
        "get_combined_data_columns": {
            "name": "get_combined_data_columns",
            "location": 81,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "file_list": [
                    "list[str]"
                ]
            }
        },
        "print_combined_data": {
            "name": "print_combined_data",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "combined_data": [],
                "combined_data_columns": [
                    "list[str]",
                    "list[float]",
                    "bytes"
                ]
            }
        },
        "mung": {
            "name": "mung",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/QCM/data.py": {},
    "dmltests-master/QCM/QCM2.py": {
        "wlinear_fit": {
            "name": "wlinear_fit",
            "location": 6,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "typing.Sequence[int]",
                    "typing.Sequence[float]"
                ],
                "y": [
                    "int"
                ],
                "w": [
                    "bool"
                ]
            }
        }
    },
    "dmltests-master/QCM/QCM_errors.py": {
        "calc_BET_y": {
            "name": "calc_BET_y",
            "location": 20,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "vol_water": [
                    "int",
                    "None"
                ]
            }
        },
        "calc_BET_x": {
            "name": "calc_BET_x",
            "location": 26,
            "return": [],
            "arguments": {
                "vol_water": [
                    "bool",
                    "list[typing.Any]",
                    "None",
                    "list[str]"
                ],
                "V": [
                    "bool",
                    "list[typing.Any]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "plot_BET": {
            "name": "plot_BET",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "BET_x": [
                    "int",
                    "tuple[]",
                    "float",
                    "str"
                ],
                "BET_y": [
                    "float",
                    "int",
                    "list[float]"
                ],
                "err_x": [
                    "None",
                    "bool",
                    "list[str]"
                ],
                "err_y": [
                    "None",
                    "bool",
                    "list[str]"
                ]
            }
        }
    },
    "dmltests-master/redis/tryredis.py": {
        "getter": {
            "name": "getter",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "rkey": [
                    "str",
                    "dict[, ]",
                    "bytes"
                ]
            }
        }
    },
    "dmltests-master/sudoku/sudoku_py/libplay.py": {
        "compose_two": {
            "name": "compose_two",
            "location": 36,
            "return": [],
            "arguments": {
                "func1": [],
                "func2": []
            }
        },
        "calc_BMI": {
            "name": "calc_BMI",
            "location": 42,
            "return": [
                "float"
            ],
            "arguments": {
                "weight": [
                    "int"
                ],
                "height": []
            }
        },
        "evaluate_BMI": {
            "name": "evaluate_BMI",
            "location": 46,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "bmi": [
                    "int"
                ]
            }
        },
        "BMI_judge_toolz": {
            "name": "BMI_judge_toolz",
            "location": 68,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "weight": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "height": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "receives_OrderedSet_int": {
            "name": "receives_OrderedSet_int",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "ordered_set": [
                    "str",
                    "list[]"
                ]
            }
        },
        "takes_short_int": {
            "name": "takes_short_int",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "long_function": {
            "name": "long_function",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "inp": [
                    "int"
                ]
            }
        },
        "compose_two.curried": {
            "name": "curried",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "InventoryItem.total_cost": {
            "name": "total_cost",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/sudoku/sudoku_py/mmm.py": {
        "GreaterThan.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "GreaterThan.__match__": {
            "name": "__match__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "cnt": [],
                "to_match": []
            }
        }
    },
    "dmltests-master/sudoku/sudoku_py/solver.py": {
        "print_sudoku": {
            "name": "print_sudoku",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "sudoku_matrix": [
                    "str"
                ]
            }
        },
        "number_unassigned": {
            "name": "number_unassigned",
            "location": 66,
            "return": [
                "tuple[bool]",
                "tuple[int]"
            ],
            "arguments": {
                "sudoku_matrix": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "is_safe": {
            "name": "is_safe",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "sudoku_matrix": [],
                "n": [
                    "int",
                    "typing.Mapping",
                    "float"
                ],
                "r": [
                    "bool",
                    "float"
                ],
                "c": [
                    "int",
                    "float"
                ]
            }
        },
        "solve_sudoku": {
            "name": "solve_sudoku",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "sudoku_matrix": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "solve_sudoku.time_it": {
            "name": "time_it",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "solve_sudoku.backtrack": {
            "name": "backtrack",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "sudoku_matrix": []
            }
        }
    },
    "dmltests-master/sudoku/sudoku_py/solver1.py": {
        "print_sudoku": {
            "name": "print_sudoku",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "number_unassigned": {
            "name": "number_unassigned",
            "location": 27,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "row": [
                    "int",
                    "bytes"
                ],
                "col": [
                    "int",
                    "float"
                ]
            }
        },
        "is_safe": {
            "name": "is_safe",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "list[list[str]]"
                ],
                "r": [
                    "int"
                ],
                "c": [
                    "int"
                ]
            }
        },
        "solve_sudoku": {
            "name": "solve_sudoku",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/tkinter/countdown/main.py": {
        "Countdown.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "int",
                    "float"
                ]
            }
        },
        "Countdown._setupUI": {
            "name": "_setupUI",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Countdown.set_timer": {
            "name": "set_timer",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Countdown.add_timer": {
            "name": "add_timer",
            "location": 46,
            "return": [
                "str",
                "list[str]",
                "typing.Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "Countdown.clear_timer": {
            "name": "clear_timer",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Countdown.countdown": {
            "name": "countdown",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/tkinter/countdown/__init__.py": {},
    "dmltests-master/tkinter/mplayer/main.py": {
        "browse_file": {
            "name": "browse_file",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "add_to_playlist": {
            "name": "add_to_playlist",
            "location": 49,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "about_us": {
            "name": "about_us",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "del_song": {
            "name": "del_song",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "show_details": {
            "name": "show_details",
            "location": 112,
            "return": [],
            "arguments": {
                "play_song": []
            }
        },
        "start_count": {
            "name": "start_count",
            "location": 133,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "play_music": {
            "name": "play_music",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "stop_music": {
            "name": "stop_music",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "pause_music": {
            "name": "pause_music",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "rewind_music": {
            "name": "rewind_music",
            "location": 188,
            "return": [],
            "arguments": {}
        },
        "set_vol": {
            "name": "set_vol",
            "location": 193,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "mute_music": {
            "name": "mute_music",
            "location": 202,
            "return": [],
            "arguments": {}
        },
        "on_closing": {
            "name": "on_closing",
            "location": 251,
            "return": [],
            "arguments": {}
        }
    },
    "dmltests-master/tkinter/mplayer/mplay.py": {
        "Mplay.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "dict[str, str]"
                ]
            }
        },
        "Mplay._init_ui": {
            "name": "_init_ui",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay.about_us": {
            "name": "about_us",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay.browse_file": {
            "name": "browse_file",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay.add_to_playlist": {
            "name": "add_to_playlist",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "list[dict[str, typing.Any]]",
                    "float"
                ]
            }
        },
        "Mplay._create_leftframe": {
            "name": "_create_leftframe",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay._statusbar": {
            "name": "_statusbar",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay._menubar": {
            "name": "_menubar",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay.del_song": {
            "name": "del_song",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay._create_rightframe": {
            "name": "_create_rightframe",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay.start_count": {
            "name": "start_count",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "total_time": [
                    "int",
                    "float"
                ]
            }
        },
        "Mplay.reset_song": {
            "name": "reset_song",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay.show_details": {
            "name": "show_details",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "play_song": [
                    "str",
                    "bool"
                ]
            }
        },
        "Mplay.pause_music": {
            "name": "pause_music",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay.get_selected_song_num": {
            "name": "get_selected_song_num",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay.play_music": {
            "name": "play_music",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay.stop_music": {
            "name": "stop_music",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay.rewind_music": {
            "name": "rewind_music",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay.set_vol": {
            "name": "set_vol",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str",
                    "int"
                ]
            }
        },
        "Mplay.mute_music": {
            "name": "mute_music",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay._create_middleframe": {
            "name": "_create_middleframe",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay._create_bottomframe": {
            "name": "_create_bottomframe",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mplay.on_closing": {
            "name": "on_closing",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/tkinter/mplayer/types.py": {},
    "dmltests-master/tkinter/mplayer/__init__.py": {},
    "dmltests-master/tkinter/things/1_GUI.py": {
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Example.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "Example.initui": {
            "name": "initui",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/tkinter/things/2_GUI.py": {
        "Q_datapath": {
            "name": "Q_datapath",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Q_savepath": {
            "name": "Q_savepath",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "close_all": {
            "name": "close_all",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "go": {
            "name": "go",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Q_datapath.close_help": {
            "name": "close_help",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Q_savepath.close_help": {
            "name": "close_help",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/tkinter/things/3_GUI.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Example.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "Example.initUI": {
            "name": "initUI",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.initUI.Q_datapath": {
            "name": "Q_datapath",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Example.initUI.Q_savepath": {
            "name": "Q_savepath",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Example.initUI.close_all": {
            "name": "close_all",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Example.initUI.go": {
            "name": "go",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Example.initUI.Q_datapath.close_help": {
            "name": "close_help",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Example.initUI.Q_savepath.close_help": {
            "name": "close_help",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/tkinter/things/4_GUI.py": {
        "main": {
            "name": "main",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "Example.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "Example.create_row0": {
            "name": "create_row0",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.create_row1": {
            "name": "create_row1",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.create_row2": {
            "name": "create_row2",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.create_row3": {
            "name": "create_row3",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.create_row4": {
            "name": "create_row4",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.get_datapath": {
            "name": "get_datapath",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.get_datafile": {
            "name": "get_datafile",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.Q_datapath": {
            "name": "Q_datapath",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.Q_savepath": {
            "name": "Q_savepath",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.close_all": {
            "name": "close_all",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.go": {
            "name": "go",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dmltests-master/tkinter/things/5_GUI.py": {
        "main": {
            "name": "main",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Example.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "Example.initUI": {
            "name": "initUI",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.greet_bttn": {
            "name": "greet_bttn",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.help_bttn": {
            "name": "help_bttn",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.go_bttn": {
            "name": "go_bttn",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Example.close_all": {
            "name": "close_all",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HelpWindow.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "Example.help_bttn.close_help": {
            "name": "close_help",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dmltests-master/tkinter/things/__init__.py": {},
    "dmltests-master/tkinter/tictactoe/main.py": {
        "check_win": {
            "name": "check_win",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "player": []
            }
        },
        "TTT.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "master": []
            }
        },
        "TTT._setupUI": {
            "name": "_setupUI",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TTT.clear_game": {
            "name": "clear_game",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TTT.define_sign": {
            "name": "define_sign",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "number": []
            }
        }
    },
    "dmltests-master/tkinter/tictactoe/__init__.py": {}
}
{
    "docker-push-latest-if-changed-master/docker_push_latest_if_changed.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "argv": [
                    "None",
                    "str",
                    "list[str]"
                ]
            }
        },
        "_get_image": {
            "name": "_get_image",
            "location": 65,
            "return": [
                "Image"
            ],
            "arguments": {
                "uri": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "_validate_source": {
            "name": "_validate_source",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "source_image": [
                    "str"
                ]
            }
        },
        "_get_sanitized_target": {
            "name": "_get_sanitized_target",
            "location": 93,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "target": [
                    "str",
                    "bool",
                    "list[int]"
                ],
                "source_image": [
                    "str"
                ]
            }
        },
        "_docker_push_latest_if_changed": {
            "name": "_docker_push_latest_if_changed",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "bool",
                    "None",
                    "dict[str, float]"
                ],
                "target": [
                    "str",
                    "None",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "_pull_image": {
            "name": "_pull_image",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "image_uri": [
                    "str",
                    "float",
                    "int",
                    "typing.IO",
                    "typing.Iterable[str]"
                ]
            }
        },
        "_tag_image": {
            "name": "_tag_image",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "target": [
                    "str",
                    "typing.Iterable[str]",
                    "typing.Callable[, ]",
                    "bool"
                ]
            }
        },
        "_push_image": {
            "name": "_push_image",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "image_uri": [
                    "str",
                    "bool",
                    "tuple[typing.Union[str,None,str,None]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "None"
                ]
            }
        },
        "_has_image_changed": {
            "name": "_has_image_changed",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "source": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "target": [
                    "str",
                    "None",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "_get_image_key": {
            "name": "_get_image_key",
            "location": 173,
            "return": [
                "ImageKey"
            ],
            "arguments": {
                "image_uri": [
                    "str"
                ]
            }
        },
        "_get_commands_hash": {
            "name": "_get_commands_hash",
            "location": 180,
            "return": [],
            "arguments": {
                "image_uri": [
                    "int",
                    "str",
                    "memoryview",
                    "bytes"
                ]
            }
        },
        "_get_packages_hash": {
            "name": "_get_packages_hash",
            "location": 193,
            "return": [],
            "arguments": {
                "image_uri": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "_get_digest": {
            "name": "_get_digest",
            "location": 199,
            "return": [],
            "arguments": {
                "blob": [
                    "str",
                    "bool"
                ]
            }
        },
        "_run_in_image": {
            "name": "_run_in_image",
            "location": 203,
            "return": [],
            "arguments": {
                "image_uri": [
                    "str",
                    "tuple[str]",
                    "typing.Callable[str, float]",
                    "int"
                ],
                "command": [
                    "str",
                    "tuple[str]",
                    "typing.Callable[str, float]",
                    "int"
                ]
            }
        },
        "_check_output_and_print": {
            "name": "_check_output_and_print",
            "location": 216,
            "return": [],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        }
    },
    "docker-push-latest-if-changed-master/setup.py": {},
    "docker-push-latest-if-changed-master/testing/helpers.py": {
        "is_image_on_registry": {
            "name": "is_image_on_registry",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "image": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "are_two_images_on_registry_the_same": {
            "name": "are_two_images_on_registry_the_same",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "source_image": [
                    "str",
                    "None",
                    "typing.TextIO",
                    "typing.Callable[, ]"
                ],
                "target_image": [
                    "typing.TextIO",
                    "bool"
                ]
            }
        },
        "is_local_image_the_same_on_registry": {
            "name": "is_local_image_the_same_on_registry",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "local_image": [
                    "typing.Type",
                    "list[str]"
                ],
                "registry_image": [
                    "bool",
                    "float"
                ]
            }
        },
        "inspect_image": {
            "name": "inspect_image",
            "location": 48,
            "return": [],
            "arguments": {
                "image_uri": [
                    "str",
                    "list[str]",
                    "int",
                    "typing.Sequence[str]",
                    "tuple[typing.Union[str,int,str]]"
                ]
            }
        },
        "get_manifest": {
            "name": "get_manifest",
            "location": 53,
            "return": [],
            "arguments": {
                "image": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "docker-push-latest-if-changed-master/tests/conftest.py": {
        "fake_docker_registry": {
            "name": "fake_docker_registry",
            "location": 22,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "fake_image_foo_name": {
            "name": "fake_image_foo_name",
            "location": 44,
            "return": [
                "typing.Generator[typing.Union[str,list[str]]]"
            ],
            "arguments": {}
        },
        "fake_image_bar_name": {
            "name": "fake_image_bar_name",
            "location": 51,
            "return": [
                "typing.Generator[typing.Union[str,list[str]]]"
            ],
            "arguments": {}
        },
        "dummy_deb_nginx": {
            "name": "dummy_deb_nginx",
            "location": 58,
            "return": [
                "typing.Generator[tuple[typing.Union[str,tuple[typing.Union[str,str]],None]]]"
            ],
            "arguments": {}
        },
        "fake_baz_dummy_deb_images": {
            "name": "fake_baz_dummy_deb_images",
            "location": 81,
            "return": [
                "typing.Generator[tuple[typing.Union[str,str,None,dict[int, tuple[typing.Union[typing.Any,typing.Any]]]]]]"
            ],
            "arguments": {
                "dummy_deb_nginx": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_name_with_random_suffix": {
            "name": "_get_name_with_random_suffix",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "_wait_for_registry": {
            "name": "_wait_for_registry",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "registry_uri": [
                    "int",
                    "float"
                ]
            }
        },
        "_build_testing_image": {
            "name": "_build_testing_image",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "image_name": [
                    "str"
                ],
                "build_arguments": [],
                "with_no_cache": [
                    "bool"
                ]
            }
        },
        "_delete_image": {
            "name": "_delete_image",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "image_tag": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "docker-push-latest-if-changed-master/tests/docker_push_latest_if_changed_test.py": {
        "test_push_new_image": {
            "name": "test_push_new_image",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "fake_docker_registry": [
                    "str",
                    "bool",
                    "list[str]"
                ],
                "fake_image_foo_name": [
                    "str",
                    "list[str]",
                    "tuple[str]",
                    "list[]"
                ],
                "fake_image_bar_name": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "test_push_new_image_dry_run": {
            "name": "test_push_new_image_dry_run",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "fake_docker_registry": [
                    "str",
                    "bool"
                ],
                "fake_image_foo_name": [
                    "str",
                    "tuple[str]",
                    "list[str]",
                    "list[]"
                ],
                "fake_image_bar_name": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_two_same_images": {
            "name": "test_two_same_images",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "fake_docker_registry": [
                    "str",
                    "list[str]"
                ],
                "fake_image_foo_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_two_same_images_with_different_packages": {
            "name": "test_two_same_images_with_different_packages",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [],
                "fake_docker_registry": [
                    "str"
                ],
                "fake_baz_dummy_deb_images": [
                    "int"
                ]
            }
        },
        "test_no_target": {
            "name": "test_no_target",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_docker_registry": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "fake_image_foo_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_no_previous_image": {
            "name": "test_no_previous_image",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_docker_registry": [
                    "str",
                    "None",
                    "bool"
                ],
                "fake_image_foo_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_omit_target_tag": {
            "name": "test_omit_target_tag",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_docker_registry": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "fake_image_foo_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_source_has_no_tag": {
            "name": "test_source_has_no_tag",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_docker_registry": [
                    "str",
                    "tuple[str]"
                ],
                "fake_image_foo_name": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_source_and_target_have_the_same_tag": {
            "name": "test_source_and_target_have_the_same_tag",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_docker_registry": [
                    "str",
                    "list[str]",
                    "None",
                    "tuple[typing.Union[str,int]]",
                    "dict[str, typing.Any]",
                    "set[str]"
                ],
                "fake_image_foo_name": [
                    "list[str]",
                    "None",
                    "dict[str, dict[str, typing.Any]]",
                    "str"
                ],
                "fake_image_bar_name": [
                    "bool",
                    "typing.Sequence[str]"
                ]
            }
        },
        "test_image_doesnt_exist": {
            "name": "test_image_doesnt_exist",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_image_name": {
            "name": "test_invalid_image_name",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "docker-push-latest-if-changed-master/tests/__init__.py": {}
}
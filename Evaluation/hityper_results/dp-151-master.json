{
    "dp-151-master/oct/browsers.py": {
        "Chrome.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "Chrome.__getattr__": {
            "name": "__getattr__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "Chrome.__init__.con": {
            "name": "con",
            "location": 24,
            "return": [
                "Remote"
            ],
            "arguments": {}
        },
        "Chrome.__init__.close": {
            "name": "close",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cache": []
            }
        }
    },
    "dp-151-master/oct/testbed_rules.py": {
        "TestbedRule.results": {
            "name": "results",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testbed": [
                    "str",
                    "typing.Sequence[str]",
                    "typing.Iterator"
                ]
            }
        },
        "TestbedRule.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "int",
                    "float"
                ],
                "passed": [
                    "int",
                    "float"
                ],
                "target": [
                    "int",
                    "float"
                ]
            }
        },
        "Result.__str__": {
            "name": "__str__",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DevicesConnectivity.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_name": [
                    "str"
                ]
            }
        },
        "DevicesConnectivity.results": {
            "name": "results",
            "location": 34,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "testbed": [
                    "str",
                    "float"
                ]
            }
        },
        "DevicesConnectivity.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SeleniumGridUrlCorrectness.results": {
            "name": "results",
            "location": 53,
            "return": [
                "list[Result]"
            ],
            "arguments": {
                "self": [],
                "testbed": [
                    "str",
                    "int"
                ]
            }
        },
        "SeleniumGridUrlCorrectness.__str__": {
            "name": "__str__",
            "location": 61,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestbedRules.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "tuple[typing.Union[DevicesConnectivity,SeleniumGridUrlCorrectness]]"
                ]
            }
        },
        "TestbedRules.apply": {
            "name": "apply",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testbed": [
                    "bool",
                    "str",
                    "typing.Callable[..., bool]"
                ]
            }
        },
        "DevicesConnectivity.results.inspect": {
            "name": "inspect",
            "location": 35,
            "return": [
                "Result"
            ],
            "arguments": {
                "device": []
            }
        }
    },
    "dp-151-master/oct/__init__.py": {},
    "dp-151-master/oct/__main__.py": {
        "tests_runner": {
            "name": "tests_runner",
            "location": 71,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "test_suite": [
                    "str",
                    "list[int]",
                    "dict[str, typing.Any]"
                ],
                "instance": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "runtime": [
                    "bool"
                ]
            }
        }
    },
    "dp-151-master/oct/pages/account.py": {
        "AccountPage.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "AccountPage.load": {
            "name": "load",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "AccountPage.available": {
            "name": "available",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/affiliate_register.py": {
        "AffiliateInformation.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "AffiliateInformation.type_company": {
            "name": "type_company",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "company": [
                    "str"
                ]
            }
        },
        "AffiliateInformation.type_website": {
            "name": "type_website",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "website": [
                    "str"
                ]
            }
        },
        "AffiliateInformation.type_tax": {
            "name": "type_tax",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tax": [
                    "str",
                    "None"
                ]
            }
        },
        "AffiliateInformation.type_paypal": {
            "name": "type_paypal",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paypal": [
                    "str"
                ]
            }
        },
        "RegisterAffiliatePage.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "float"
                ]
            }
        },
        "RegisterAffiliatePage.load": {
            "name": "load",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RegisterAffiliatePage.available": {
            "name": "available",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterAffiliatePage.fill_personal_details": {
            "name": "fill_personal_details",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str"
                ],
                "last_name": [
                    "str"
                ],
                "email": [
                    "str",
                    "int"
                ],
                "telephone": [
                    "str",
                    "int"
                ]
            }
        },
        "RegisterAffiliatePage.press_pay_method": {
            "name": "press_pay_method",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterAffiliatePage.fill_information": {
            "name": "fill_information",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "company": [
                    "int",
                    "float"
                ],
                "website": [
                    "int",
                    "float"
                ],
                "tax": [
                    "int",
                    "float"
                ],
                "paypal": [
                    "int",
                    "float"
                ]
            }
        },
        "RegisterAffiliatePage.fill_password": {
            "name": "fill_password",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "passwords": [
                    "str",
                    "int"
                ]
            }
        },
        "RegisterAffiliatePage.press_continue": {
            "name": "press_continue",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegAffiliateSuccessPage.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "RegAffiliateSuccessPage.load": {
            "name": "load",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.IO"
                ]
            }
        },
        "RegAffiliateSuccessPage.available": {
            "name": "available",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/base.py": {
        "Page.load": {
            "name": "load",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.IO"
                ]
            }
        },
        "Page.available": {
            "name": "available",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/brand.py": {
        "BrandPage.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "str",
                    "bool"
                ],
                "brand_id": [
                    "str",
                    "int"
                ],
                "brand_name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "BrandPage.load": {
            "name": "load",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BrandPage.available": {
            "name": "available",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/brands.py": {
        "BrandsPage.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "BrandsPage.load": {
            "name": "load",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BrandsPage.available": {
            "name": "available",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrandsPage.click_brand_name": {
            "name": "click_brand_name",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "brand": [
                    "dict[, ]",
                    "dict[str, str]",
                    "None",
                    "typing.Type",
                    "bool"
                ]
            }
        }
    },
    "dp-151-master/oct/pages/contact_us.py": {
        "ContactDetails.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "ContactDetails.type_your_name": {
            "name": "type_your_name",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "your_name": [
                    "str"
                ]
            }
        },
        "ContactDetails.type_enquiry": {
            "name": "type_enquiry",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enquiry": [
                    "str"
                ]
            }
        },
        "ContactUsPage.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "str"
                ]
            }
        },
        "ContactUsPage.load": {
            "name": "load",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ContactUsPage.available": {
            "name": "available",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactUsPage.fill_contact_details": {
            "name": "fill_contact_details",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "your_name": [
                    "str",
                    "int"
                ],
                "email": [
                    "int",
                    "float",
                    "str",
                    "list[str]"
                ],
                "enquiry": [
                    "int",
                    "float",
                    "str",
                    "list[str]"
                ]
            }
        },
        "ContactUsPage.press_submit": {
            "name": "press_submit",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContactUsSuccessPage.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "ContactUsSuccessPage.load": {
            "name": "load",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.IO"
                ]
            }
        },
        "ContactUsSuccessPage.available": {
            "name": "available",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/forgot_password.py": {
        "ForgotPasswordPage.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "list[]"
                ]
            }
        },
        "ForgotPasswordPage.load": {
            "name": "load",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ForgotPasswordPage.available": {
            "name": "available",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForgotPasswordPage.fill_email": {
            "name": "fill_email",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "ForgotPasswordPage.press_continue_button": {
            "name": "press_continue_button",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfirmationMessage.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "ConfirmationMessage.load": {
            "name": "load",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ConfirmationMessage.available": {
            "name": "available",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/gift_certificate.py": {
        "GiftCertificate.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "GiftCertificate.load": {
            "name": "load",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GiftCertificate.available": {
            "name": "available",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GiftCertificate.fill_certificate_data": {
            "name": "fill_certificate_data",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "recipient_name": [
                    "str",
                    "bool"
                ],
                "recipient_email": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "gifter_name": [
                    "str",
                    "bool"
                ],
                "gifter_email": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ]
            }
        },
        "GiftCertificate.chose_certificate_theme": {
            "name": "chose_certificate_theme",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GiftCertificate.click_gift_checkbox": {
            "name": "click_gift_checkbox",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GiftCertificate.click_continue": {
            "name": "click_continue",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PurchaseSuccessful.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "PurchaseSuccessful.load": {
            "name": "load",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.IO"
                ]
            }
        },
        "PurchaseSuccessful.available": {
            "name": "available",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/login.py": {
        "LoginPage.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "LoginPage.load": {
            "name": "load",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LoginPage.available": {
            "name": "available",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginPage.fill_credentials": {
            "name": "fill_credentials",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email_address": [
                    "str",
                    "int",
                    "float"
                ],
                "password": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "LoginPage.press_login_button": {
            "name": "press_login_button",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/product_page.py": {
        "InformationBlock.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "InformationBlock.open_brand_page": {
            "name": "open_brand_page",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InformationBlock.open_share_link": {
            "name": "open_share_link",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InformationBlock.add_to_wish_list": {
            "name": "add_to_wish_list",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InformationBlock.add_to_cart": {
            "name": "add_to_cart",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBlock.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "MessageBlock.has_wish_list_message": {
            "name": "has_wish_list_message",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBlock.has_cart_message": {
            "name": "has_cart_message",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductPage.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "bool",
                    "typing.Hashable"
                ],
                "product_id": [
                    "str",
                    "list[int]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "product_name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "ProductPage.load": {
            "name": "load",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "ProductPage.available": {
            "name": "available",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductPage.open_product_image": {
            "name": "open_product_image",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductPage.is_open_image": {
            "name": "is_open_image",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductPage.open_review_link": {
            "name": "open_review_link",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductPage.information_block": {
            "name": "information_block",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProductPage.messages": {
            "name": "messages",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/registration.py": {
        "PersonalDetails.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "PersonalDetails.type_first_name": {
            "name": "type_first_name",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str"
                ]
            }
        },
        "PersonalDetails.type_last_name": {
            "name": "type_last_name",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_name": [
                    "str"
                ]
            }
        },
        "PersonalDetails.type_email": {
            "name": "type_email",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ]
            }
        },
        "PersonalDetails.type_telephone": {
            "name": "type_telephone",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "telephone": [
                    "str"
                ]
            }
        },
        "Password.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "Password.type_password": {
            "name": "type_password",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "Password.confirm_password": {
            "name": "confirm_password",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bool"
                ]
            }
        },
        "RegisterAccountPage.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "RegisterAccountPage.load": {
            "name": "load",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RegisterAccountPage.available": {
            "name": "available",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterAccountPage.fill_personal_details": {
            "name": "fill_personal_details",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str",
                    "None"
                ],
                "last_name": [
                    "str"
                ],
                "email": [
                    "int",
                    "str"
                ],
                "telephone": [
                    "int",
                    "str"
                ]
            }
        },
        "RegisterAccountPage.fill_password": {
            "name": "fill_password",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "RegisterAccountPage.press_continue": {
            "name": "press_continue",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegistrationSuccessPage.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "RegistrationSuccessPage.load": {
            "name": "load",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.IO"
                ]
            }
        },
        "RegistrationSuccessPage.available": {
            "name": "available",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/returns.py": {
        "OrderDetails.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "OrderDetails.type_order_id": {
            "name": "type_order_id",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "str",
                    "int",
                    "dict[int, str]"
                ]
            }
        },
        "OrderDetails.type_order_date": {
            "name": "type_order_date",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_date": [
                    "str",
                    "None"
                ]
            }
        },
        "ProductDetails.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "ProductDetails.type_product_name": {
            "name": "type_product_name",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product_name": [
                    "str",
                    "list[str]",
                    "typing.Type",
                    "None"
                ]
            }
        },
        "ProductDetails.type_product_code": {
            "name": "type_product_code",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product_code": [
                    "str"
                ]
            }
        },
        "ProductDetails.type_quantity": {
            "name": "type_quantity",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "str"
                ]
            }
        },
        "ProductDetails.type_faulty": {
            "name": "type_faulty",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "faulty": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "ReturnsPage.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "str",
                    "bool"
                ]
            }
        },
        "ReturnsPage.load": {
            "name": "load",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "None",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ReturnsPage.available": {
            "name": "available",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnsPage.fill_personal_details": {
            "name": "fill_personal_details",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str"
                ],
                "last_name": [
                    "str"
                ],
                "email": [
                    "str",
                    "int"
                ],
                "telephone": [
                    "str",
                    "int"
                ]
            }
        },
        "ReturnsPage.fill_order_details": {
            "name": "fill_order_details",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order_id": [
                    "int",
                    "str",
                    "bytes"
                ],
                "order_date": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        },
        "ReturnsPage.fill_product_details": {
            "name": "fill_product_details",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "product_name": [
                    "str",
                    "None"
                ],
                "product_code": [
                    "int",
                    "str",
                    "None"
                ],
                "quantity": [
                    "list[str]",
                    "tuple[str]",
                    "None",
                    "list[tuple[]]",
                    "dict[str, T]",
                    "int",
                    "str"
                ],
                "faulty": [
                    "list[str]",
                    "tuple[str]",
                    "None",
                    "list[tuple[]]",
                    "dict[str, T]",
                    "int",
                    "str"
                ]
            }
        },
        "ReturnsPage.choose_reason_and_condition": {
            "name": "choose_reason_and_condition",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "dict[, ]"
                ],
                "product_condition": [
                    "int",
                    "dict[, ]",
                    "typing.Sequence[typing.Sequence[typing.Any]]"
                ]
            }
        },
        "ReturnsPage.press_submit": {
            "name": "press_submit",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnsSuccessPage.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "ReturnsSuccessPage.load": {
            "name": "load",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "str",
                    "list[]",
                    "typing.IO"
                ]
            }
        },
        "ReturnsSuccessPage.available": {
            "name": "available",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/review.py": {
        "Review.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "Review.type_name": {
            "name": "type_name",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "Review.type_review": {
            "name": "type_review",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "review": [
                    "str"
                ]
            }
        },
        "Review.choose_rating": {
            "name": "choose_rating",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rating": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "Review.press_continue": {
            "name": "press_continue",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Review.successfully_added": {
            "name": "successfully_added",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/share.py": {
        "ShareWindow.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "browser": [
                    "int",
                    "float"
                ]
            }
        },
        "ShareWindow.is_open_popup_share": {
            "name": "is_open_popup_share",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/oct/pages/__init__.py": {
        "not_implemented": {
            "name": "not_implemented",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/__init__.py": {
        "mandatory_aetest_arguments": {
            "name": "mandatory_aetest_arguments",
            "location": 10,
            "return": [
                "dict[typing.Text, typing.Union[str,list[]]]"
            ],
            "arguments": {
                "testbed": [
                    "str",
                    "list[]"
                ],
                "device_name": [
                    "str",
                    "list[]"
                ]
            }
        },
        "run_testcase": {
            "name": "run_testcase",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "testbed_file": [
                    "typing.Text"
                ],
                "device_name": [
                    "typing.Text"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/api/affiliate_register.py": {
        "assert_if_request_contains_success_response_url": {
            "name": "assert_if_request_contains_success_response_url",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "post": [
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "Post.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "list[]",
                    "list[int]",
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "data": [
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Post.response": {
            "name": "response",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AffiliateReg.test_affiliate_reg": {
            "name": "test_affiliate_reg",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        }
    },
    "dp-151-master/oct/tests/api/contact_us.py": {
        "ContactUs.test_contact_us": {
            "name": "test_contact_us",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        }
    },
    "dp-151-master/oct/tests/api/forgot_passwrd.py": {
        "ForgotPassword.creating_account": {
            "name": "creating_account",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "dict[, ]"
                ]
            }
        },
        "ForgotPassword.test_forgot_password_for_known_user": {
            "name": "test_forgot_password_for_known_user",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str"
                ]
            }
        },
        "ForgotPassword.test_forgot_password_for_unknown_user": {
            "name": "test_forgot_password_for_unknown_user",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/api/gift_certificate.py": {
        "GiftCertificate.test_gift_certificate": {
            "name": "test_gift_certificate",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        }
    },
    "dp-151-master/oct/tests/api/login.py": {
        "Login.create_account": {
            "name": "create_account",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "Login.login_exists_credentials": {
            "name": "login_exists_credentials",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "typing.Callable[..., None]"
                ]
            }
        },
        "Login.login_empty_email_parameter": {
            "name": "login_empty_email_parameter",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "bool"
                ]
            }
        },
        "Login.login_empty_password_parameter": {
            "name": "login_empty_password_parameter",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/api/registration.py": {
        "Registration.registration_positive_test": {
            "name": "registration_positive_test",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "bytes"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/api/registration_pattern.py": {
        "Identity.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str",
                    "None"
                ],
                "last_name": [
                    "str",
                    "None"
                ],
                "telephone": [
                    "str",
                    "int"
                ]
            }
        },
        "Identity.get_first_name": {
            "name": "get_first_name",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Identity.get_last_name": {
            "name": "get_last_name",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Identity.get_telephone": {
            "name": "get_telephone",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Credentials.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "news_letter": [
                    "str"
                ]
            }
        },
        "Credentials.get_email": {
            "name": "get_email",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Credentials.get_password": {
            "name": "get_password",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Credentials.get_newsletter": {
            "name": "get_newsletter",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserRegistration.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "identity": [
                    "int",
                    "float"
                ],
                "credentials": [
                    "int",
                    "float"
                ]
            }
        },
        "UserRegistration.registration_response": {
            "name": "registration_response",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "device": [
                    "dict[str, typing.Any]",
                    "str",
                    "bool",
                    "dict[str, str]"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/api/returns.py": {
        "assert_if_request_contains_success_response_text": {
            "name": "assert_if_request_contains_success_response_text",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "post": [
                    "str",
                    "None"
                ],
                "text": [
                    "str",
                    "None"
                ]
            }
        },
        "Returns.test_returns": {
            "name": "test_returns",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "list[list[int]]"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/api/review.py": {
        "Review.test_review": {
            "name": "test_review",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        }
    },
    "dp-151-master/oct/tests/api/__init__.py": {},
    "dp-151-master/oct/tests/deployment/deploy_app.py": {
        "copy_file_to_server": {
            "name": "copy_file_to_server",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "str",
                    "bytes",
                    "int",
                    "list[typing.Any]"
                ]
            }
        },
        "is_deploy_app": {
            "name": "is_deploy_app",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "device": [],
                "is_run": [
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "DeployApp.deploy_app": {
            "name": "deploy_app",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        }
    },
    "dp-151-master/oct/tests/deployment/destroy_app.py": {
        "DestroyApp.destroy_app": {
            "name": "destroy_app",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server": []
            }
        }
    },
    "dp-151-master/oct/tests/deployment/__init__.py": {},
    "dp-151-master/oct/tests/web/adding_to_cart.py": {
        "AddingProductToCart.test_adding_to_cart": {
            "name": "test_adding_to_cart",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "bool",
                    "dict[str, float]"
                ],
                "device": []
            }
        }
    },
    "dp-151-master/oct/tests/web/adding_to_wish_list.py": {
        "AddingProductToWishList.test_adding_to_wish_list": {
            "name": "test_adding_to_wish_list",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "bool",
                    "dict[str, float]"
                ],
                "device": []
            }
        }
    },
    "dp-151-master/oct/tests/web/affiliate_register.py": {
        "RegistrationAffiliate.test": {
            "name": "test",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "float"
                ],
                "device": [
                    "typing.Sequence[typing.Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/web/all_brands.py": {
        "AllBrands.test": {
            "name": "test",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "float"
                ],
                "device": [
                    "str"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/web/brand.py": {
        "OpenBrand.test": {
            "name": "test",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "float"
                ],
                "device": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/web/contact_us.py": {
        "ContactUs.test": {
            "name": "test",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "float"
                ],
                "device": [
                    "str"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/web/forgot_password_test.py": {
        "ForgotPassword.create_account": {
            "name": "create_account",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "dict[, ]"
                ]
            }
        },
        "ForgotPassword.test_forgot_password": {
            "name": "test_forgot_password",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "int",
                    "typing.Type"
                ],
                "device": [
                    "str"
                ]
            }
        },
        "ForgotPassword.test_forgot_password_with_not_existing_email": {
            "name": "test_forgot_password_with_not_existing_email",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "typing.Type"
                ],
                "device": [
                    "str"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/web/gift_certificate.py": {
        "GiftCertificateTest.purchase_gift_certificate": {
            "name": "purchase_gift_certificate",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "device": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/web/login.py": {
        "Login.create_account": {
            "name": "create_account",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "dict[, ]"
                ]
            }
        },
        "Login.login_exists_credentials": {
            "name": "login_exists_credentials",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "device": [
                    "str",
                    "bool"
                ]
            }
        },
        "Login.login_nonexistent_email": {
            "name": "login_nonexistent_email",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "bool",
                    "typing.Deque",
                    "dict[str, int]"
                ],
                "device": [
                    "str",
                    "typing.IO",
                    "bool"
                ]
            }
        },
        "Login.login_nonexistent_password": {
            "name": "login_nonexistent_password",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "int",
                    "str"
                ],
                "device": [
                    "str",
                    "typing.IO",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/web/open_prod_img.py": {
        "OpeningProdImg.test": {
            "name": "test",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "float"
                ],
                "device": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/web/registration.py": {
        "Registration.test": {
            "name": "test",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "float"
                ],
                "device": [
                    "typing.Sequence[typing.Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/web/returns.py": {
        "Returns.test": {
            "name": "test",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "float"
                ],
                "device": [
                    "typing.Sequence[typing.Any]",
                    "typing.Iterable[typing.Any]"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/web/review.py": {
        "UsersReview.test": {
            "name": "test",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "float"
                ],
                "device": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/web/share.py": {
        "SharePopup.test": {
            "name": "test",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid": [
                    "str",
                    "float"
                ],
                "device": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "dp-151-master/oct/tests/web/__init__.py": {},
    "dp-151-master/tests/test_email_generation.py": {
        "TestEmailsGeneration.setup": {
            "name": "setup",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailsGeneration.test_length_more_then_17": {
            "name": "test_length_more_then_17",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailsGeneration.test_length_less_then_254": {
            "name": "test_length_less_then_254",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailsGeneration.test_absence_dot_dog": {
            "name": "test_absence_dot_dog",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailsGeneration.test_one_at_character": {
            "name": "test_one_at_character",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailsGeneration.test_absence_com_dot": {
            "name": "test_absence_com_dot",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailsGeneration.test_first_symbol_isalpha": {
            "name": "test_first_symbol_isalpha",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailsGeneration.test_creating_emails_is_string": {
            "name": "test_creating_emails_is_string",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailsGeneration.test_email_contains_dog": {
            "name": "test_email_contains_dog",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailsGeneration.test_length_first_part_of_email": {
            "name": "test_length_first_part_of_email",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailsGeneration.test_second_part_of_email": {
            "name": "test_second_part_of_email",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailsGeneration.test_special_symbols_are_absent": {
            "name": "test_special_symbols_are_absent",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dp-151-master/tests/__init__.py": {}
}
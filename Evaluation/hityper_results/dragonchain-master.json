{
    "dragonchain-master/docs/conf.py": {
        "get_version": {
            "name": "get_version",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "dragonchain-master/dragonchain/exceptions.py": {},
    "dragonchain-master/dragonchain/logger.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 25,
            "return": [],
            "arguments": {
                "log_name": [
                    "typing.Text"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/test_env.py": {},
    "dragonchain-master/dragonchain/__init__.py": {},
    "dragonchain-master/dragonchain/broadcast_processor/broadcast_functions.py": {
        "state_key": {
            "name": "state_key",
            "location": 40,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "None"
                ]
            }
        },
        "verifications_key": {
            "name": "verifications_key",
            "location": 50,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "int"
                ],
                "level": [
                    "str",
                    "int"
                ]
            }
        },
        "storage_error_key": {
            "name": "storage_error_key",
            "location": 61,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "None"
                ]
            }
        },
        "increment_storage_error_sync": {
            "name": "increment_storage_error_sync",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "int"
                ],
                "current_level": [
                    "int"
                ]
            }
        },
        "get_current_block_level_sync": {
            "name": "get_current_block_level_sync",
            "location": 145,
            "return": [
                "int"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "int"
                ]
            }
        },
        "is_block_accepting_verifications_from_level": {
            "name": "is_block_accepting_verifications_from_level",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "block_id": [
                    "int",
                    "str"
                ],
                "level": [
                    "int",
                    "str"
                ]
            }
        },
        "set_current_block_level_sync": {
            "name": "set_current_block_level_sync",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "int",
                    "None"
                ],
                "level": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "schedule_block_for_broadcast_sync": {
            "name": "schedule_block_for_broadcast_sync",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "int",
                    "None"
                ],
                "time": [
                    "int"
                ]
            }
        },
        "schedule_notification_for_broadcast_sync": {
            "name": "schedule_notification_for_broadcast_sync",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "notification_location": [
                    "str",
                    "typing.MutableMapping"
                ]
            }
        },
        "verification_storage_location": {
            "name": "verification_storage_location",
            "location": 210,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "l1_block_id": [
                    "str",
                    "int",
                    "None"
                ],
                "level_received_from": [
                    "str",
                    "int",
                    "None"
                ],
                "chain_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "set_receieved_verification_for_block_from_chain_sync": {
            "name": "set_receieved_verification_for_block_from_chain_sync",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "None",
                    "int"
                ],
                "level": [],
                "chain_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_all_verifications_for_block_sync": {
            "name": "get_all_verifications_for_block_sync",
            "location": 259,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "set[str]",
                    "int"
                ]
            }
        },
        "get_receieved_verifications_for_block_and_level_sync": {
            "name": "get_receieved_verifications_for_block_and_level_sync",
            "location": 281,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "int",
                    "None"
                ],
                "level": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "remove_block_from_broadcast_system_sync": {
            "name": "remove_block_from_broadcast_system_sync",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/broadcast_processor/broadcast_functions_utest.py": {
        "BroadcastFunctionTests.test_state_key_returns_correct_key": {
            "name": "test_state_key_returns_correct_key",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastFunctionTests.test_verifications_key_returns_correct_key": {
            "name": "test_verifications_key_returns_correct_key",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastFunctionTests.test_error_key_returns_correct_key": {
            "name": "test_error_key_returns_correct_key",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastFunctionTests.test_storage_error_no_op_when_low_level": {
            "name": "test_storage_error_no_op_when_low_level",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_error_key": []
            }
        },
        "BroadcastFunctionTests.test_storage_error_increments_redis_value_correctly": {
            "name": "test_storage_error_increments_redis_value_correctly",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "set_sync": [],
                "get_sync": [],
                "patch_error_key": [
                    "int",
                    "str"
                ]
            }
        },
        "BroadcastFunctionTests.test_storage_error_rolls_back_state_correctly_when_needed": {
            "name": "test_storage_error_rolls_back_state_correctly_when_needed",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "list_objects": [
                    "bool",
                    "list[int]",
                    "list[dict[, ]]",
                    "list[]",
                    "str",
                    "None"
                ],
                "smembers_sync": [
                    "bool",
                    "list[int]",
                    "list[dict[, ]]",
                    "list[]",
                    "str",
                    "None"
                ],
                "get_sync": [
                    "bool",
                    "list[int]",
                    "list[dict[, ]]",
                    "list[]",
                    "str",
                    "None"
                ],
                "state_key": [
                    "bool",
                    "list[int]",
                    "list[dict[, ]]",
                    "list[]",
                    "str",
                    "None"
                ],
                "verifications_key": [
                    "bool",
                    "list[int]",
                    "list[dict[, ]]",
                    "list[]",
                    "str",
                    "None"
                ],
                "error_key": [
                    "bool",
                    "list[int]",
                    "list[dict[, ]]",
                    "list[]",
                    "str",
                    "None"
                ],
                "mock_pipeline": []
            }
        },
        "BroadcastFunctionTests.test_get_block_level_sync": {
            "name": "test_get_block_level_sync",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_key": [],
                "mock_get": []
            }
        },
        "BroadcastFunctionTests.test_block_accepting_from_level": {
            "name": "test_block_accepting_from_level",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_block_level": []
            }
        },
        "BroadcastFunctionTests.test_set_block_level_sync_calls_redis_with_correct_params": {
            "name": "test_set_block_level_sync_calls_redis_with_correct_params",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_key": [],
                "mock_set": []
            }
        },
        "BroadcastFunctionTests.test_schedule_block_sync_calls_redis_with_correct_params": {
            "name": "test_schedule_block_sync_calls_redis_with_correct_params",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_zadd": []
            }
        },
        "BroadcastFunctionTests.test_get_all_verifications_sync": {
            "name": "test_get_all_verifications_sync",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_verification_key": [],
                "mock_pipeline": []
            }
        },
        "BroadcastFunctionTests.test_get_verifications_sync": {
            "name": "test_get_verifications_sync",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_key": [
                    "list[T]"
                ],
                "mock_smembers": []
            }
        },
        "BroadcastFunctionTests.test_remove_block_sync_calls_redis_with_correct_deletes": {
            "name": "test_remove_block_sync_calls_redis_with_correct_deletes",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_error_key": [
                    "str",
                    "tuple[str]"
                ],
                "mock_verification_key": [],
                "mock_state_key": [],
                "mock_pipeline": []
            }
        },
        "BroadcastFunctionTests.test_set_record_for_block_sync_raises_when_not_accepting_level": {
            "name": "test_set_record_for_block_sync_raises_when_not_accepting_level",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_block_level": []
            }
        },
        "BroadcastFunctionTests.test_set_record_for_block_sync_calls_redis_with_correct_params": {
            "name": "test_set_record_for_block_sync_calls_redis_with_correct_params",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_block_level": [],
                "mock_key": [],
                "mock_sadd": [],
                "mock_pipeline": []
            }
        },
        "BroadcastFunctionTests.test_set_record_for_block_sync_promotes_when_needed_met": {
            "name": "test_set_record_for_block_sync_promotes_when_needed_met",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_delete_sync": [
                    "bool"
                ],
                "mock_get_block_level": [
                    "bool"
                ],
                "mock_key": [
                    "bool"
                ],
                "mock_schedule": [],
                "mock_set_block": [],
                "mock_sadd": [
                    "bool"
                ],
                "mock_pipeline": []
            }
        },
        "BroadcastFunctionTests.test_set_record_for_block_sync_calls_remove_when_required_met_and_level_5": {
            "name": "test_set_record_for_block_sync_calls_remove_when_required_met_and_level_5",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_block_level": [],
                "mock_key": [],
                "mock_remove": [],
                "mock_sadd": [],
                "mock_pipeline": []
            }
        },
        "BroadcastFunctionTests.test_schedule_notification_for_broadcast_sync": {
            "name": "test_schedule_notification_for_broadcast_sync",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sadd": []
            }
        },
        "BroadcastFunctionTests.test_verification_storage_location": {
            "name": "test_verification_storage_location",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/broadcast_processor/broadcast_processor.py": {
        "setup": {
            "name": "setup",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "needed_verifications": {
            "name": "needed_verifications",
            "location": 73,
            "return": [],
            "arguments": {
                "level": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "chain_id_set_from_matchmaking_claim": {
            "name": "chain_id_set_from_matchmaking_claim",
            "location": 83,
            "return": [
                "set[]"
            ],
            "arguments": {
                "claim": [
                    "str"
                ],
                "level": [
                    "dict[, ]",
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_l5_wait_time": {
            "name": "get_l5_wait_time",
            "location": 94,
            "return": [],
            "arguments": {
                "chain_id": [
                    "str",
                    "int"
                ]
            }
        },
        "set_l5_wait_time": {
            "name": "set_l5_wait_time",
            "location": 101,
            "return": [
                "int"
            ],
            "arguments": {
                "chain_id": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "make_broadcast_futures": {
            "name": "make_broadcast_futures",
            "location": 117,
            "return": [
                "None",
                "set[]"
            ],
            "arguments": {
                "session": [
                    "dict[, ]",
                    "None",
                    "str",
                    "dict[str, str]",
                    "int",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "block_id": [
                    "int",
                    "str"
                ],
                "level": [
                    "int",
                    "dict[int, dict[str, float]]",
                    "str",
                    "float",
                    "None"
                ],
                "chain_ids": [
                    "set[]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "get_level_from_storage_location": {
            "name": "get_level_from_storage_location",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "storage_location": [
                    "str"
                ]
            }
        },
        "get_notification_urls": {
            "name": "get_notification_urls",
            "location": 159,
            "return": [
                "set[]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "typing.Callable[T, T]",
                    "int"
                ]
            }
        },
        "sign": {
            "name": "sign",
            "location": 167,
            "return": [],
            "arguments": {
                "message": [
                    "bytes",
                    "str"
                ]
            }
        },
        "get_all_notification_endpoints": {
            "name": "get_all_notification_endpoints",
            "location": 171,
            "return": [],
            "arguments": {
                "level": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "None"
                ]
            }
        },
        "error_handler": {
            "name": "error_handler",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [],
                "context": []
            }
        }
    },
    "dragonchain-master/dragonchain/broadcast_processor/broadcast_processor_utest.py": {
        "BroadcastProcessorTests.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastProcessorTests.test_setup_raises_error_when_not_level_1": {
            "name": "test_setup_raises_error_when_not_level_1",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastProcessorTests.test_setup_raises_error_when_not_broadcasting": {
            "name": "test_setup_raises_error_when_not_broadcasting",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastProcessorTests.test_setup_sets_module_vars_correctly": {
            "name": "test_setup_sets_module_vars_correctly",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastProcessorTests.test_needed_verifications_returns_correct_value_from_requirements": {
            "name": "test_needed_verifications_returns_correct_value_from_requirements",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastProcessorTests.test_chain_id_from_matchmaking_claim_returns_correct": {
            "name": "test_chain_id_from_matchmaking_claim_returns_correct",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastProcessorTests.test_get_level_from_storage_location_returns_level_string": {
            "name": "test_get_level_from_storage_location_returns_level_string",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastProcessorTests.test_get_level_from_storage_location_returns_none_when_fails": {
            "name": "test_get_level_from_storage_location_returns_none_when_fails",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastProcessorTests.test_notification_urls_returns_set": {
            "name": "test_notification_urls_returns_set",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastProcessorTests.test_notification_urls_returns_values_from_env": {
            "name": "test_notification_urls_returns_values_from_env",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BroadcastProcessorTests.test_set_l5_wait_time_success": {
            "name": "test_set_l5_wait_time_success",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_rego": []
            }
        },
        "BroadcastProcessorTests.test_set_l5_wait_time_throws_exception": {
            "name": "test_set_l5_wait_time_throws_exception",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_rego": []
            }
        },
        "BroadcastProcessorTests.test_get_l5_wait_time_is_cached": {
            "name": "test_get_l5_wait_time_is_cached",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_rego": []
            }
        },
        "BroadcastProcessorTests.test_get_l5_wait_time_not_cached": {
            "name": "test_get_l5_wait_time_not_cached",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_rego": []
            }
        },
        "BroadcastProcessorTests.test_broadcast_futures_gets_broadcast_dto_for_block_id": {
            "name": "test_broadcast_futures_gets_broadcast_dto_for_block_id",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_get_broadcast": []
            }
        },
        "BroadcastProcessorTests.test_broadcast_futures_returns_set_of_futures_from_session_posts": {
            "name": "test_broadcast_futures_returns_set_of_futures_from_session_posts",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_gen_request": [],
                "mock_get_address": [],
                "mock_create_task": [],
                "patch_get_broadcast": []
            }
        },
        "BroadcastProcessorTests.test_broadcast_futures_sets_deadline_header_for_l5": {
            "name": "test_broadcast_futures_sets_deadline_header_for_l5",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_rego": [],
                "mock_gen_request": [],
                "mock_get_address": [],
                "mock_create_task": [],
                "mock_dto": []
            }
        },
        "BroadcastProcessorTests.test_broadcast_futures_doesnt_return_future_for_exception_with_a_chain": {
            "name": "test_broadcast_futures_doesnt_return_future_for_exception_with_a_chain",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_gen_req": [
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "mock_get_address": [
                    "bool",
                    "typing.Callable[[], int]"
                ],
                "patch_get_broadcast": [
                    "bool",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "BroadcastProcessorTests.test_broadcast_futures_returns_none_on_get_broadcast_dto_failure": {
            "name": "test_broadcast_futures_returns_none_on_get_broadcast_dto_failure",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_increment_error": [],
                "patch_get_broadcast": []
            }
        }
    },
    "dragonchain-master/dragonchain/broadcast_processor/__init__.py": {},
    "dragonchain-master/dragonchain/contract_invoker/contract_invoker.py": {
        "setup": {
            "name": "setup",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "restart_serial_worker": {
            "name": "restart_serial_worker",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "contract_id": [
                    "str",
                    "None"
                ]
            }
        },
        "restart_dead_workers": {
            "name": "restart_dead_workers",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "error_handler": {
            "name": "error_handler",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [],
                "context": []
            }
        }
    },
    "dragonchain-master/dragonchain/contract_invoker/contract_invoker_service.py": {
        "output_to_heap": {
            "name": "output_to_heap",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "contract_response": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "contract_id": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes",
                    "int"
                ]
            }
        },
        "create_output_transaction": {
            "name": "create_output_transaction",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "transaction": [
                    "str",
                    "bytes",
                    "typing.Sequence[str]"
                ],
                "smart_contract_output": [
                    "str",
                    "bytes"
                ]
            }
        },
        "output_transaction": {
            "name": "output_transaction",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "transaction": []
            }
        }
    },
    "dragonchain-master/dragonchain/contract_invoker/__init__.py": {},
    "dragonchain-master/dragonchain/job_processor/contract_job.py": {
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                "ContractJob",
                "dict[, ]"
            ],
            "arguments": {}
        },
        "change_to_read_user": {
            "name": "change_to_read_user",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ContractJob.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task_definition": []
            }
        },
        "ContractJob.populate_api_keys": {
            "name": "populate_api_keys",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.populate_env": {
            "name": "populate_env",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.create_dockerfile": {
            "name": "create_dockerfile",
            "location": 134,
            "return": [
                "str",
                "tuple[typing.Union[str,str,str,str,str,str]]",
                "list[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.docker_login_if_necessary": {
            "name": "docker_login_if_necessary",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.get_openfaas_spec": {
            "name": "get_openfaas_spec",
            "location": 193,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text],list[typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.pull_image": {
            "name": "pull_image",
            "location": 221,
            "return": [
                "list[str]",
                "list[int]",
                "set[bytes]",
                "tuple[None]",
                "list[]",
                "str",
                "list[list[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "image_name": [
                    "str",
                    "None"
                ]
            }
        },
        "ContractJob.delete_contract_image": {
            "name": "delete_contract_image",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_digest": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "ContractJob.build_contract_image": {
            "name": "build_contract_image",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.create_openfaas_secrets": {
            "name": "create_openfaas_secrets",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.delete_openfaas_secrets": {
            "name": "delete_openfaas_secrets",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.deploy_to_openfaas": {
            "name": "deploy_to_openfaas",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.delete_openfaas_function": {
            "name": "delete_openfaas_function",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.delete_contract_data": {
            "name": "delete_contract_data",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.schedule_contract": {
            "name": "schedule_contract",
            "location": 388,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "ContractJob.unschedule_contract": {
            "name": "unschedule_contract",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.ledger": {
            "name": "ledger",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.migrate_env": {
            "name": "migrate_env",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.create": {
            "name": "create",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.update": {
            "name": "update",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJob.delete": {
            "name": "delete",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/job_processor/contract_job_utest.py": {
        "ContractJobTest.setUp": {
            "name": "setUp",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_login": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "mock_new_build_task": [
                    "str",
                    "bool",
                    "list[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "ContractJobTest.test_init_job_update": {
            "name": "test_init_job_update",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_new_build_task": []
            }
        },
        "ContractJobTest.test_init_job_create": {
            "name": "test_init_job_create",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_login": [],
                "mock_new_build_task": []
            }
        },
        "ContractJobTest.test_init_job_delete": {
            "name": "test_init_job_delete",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_login": [],
                "mock_new_build_task": []
            }
        },
        "ContractJobTest.test_populate_api_keys": {
            "name": "test_populate_api_keys",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_save_key": [
                    "str"
                ],
                "mock_new_key": []
            }
        },
        "ContractJobTest.test_populate_env": {
            "name": "test_populate_env",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_id": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "ContractJobTest.test_create_dockerfile": {
            "name": "test_create_dockerfile",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_dirname": [],
                "mock_abspath": [],
                "mock_open": []
            }
        },
        "ContractJobTest.test_docker_login_if_necessary_update_model": {
            "name": "test_docker_login_if_necessary_update_model",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJobTest.test_docker_login_if_necessary_no_update_model": {
            "name": "test_docker_login_if_necessary_no_update_model",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJobTest.test_docker_login_if_necessary_attempt_login": {
            "name": "test_docker_login_if_necessary_attempt_login",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJobTest.test_docker_login_bad_auth": {
            "name": "test_docker_login_bad_auth",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJobTest.test_get_openfaas_spec": {
            "name": "test_get_openfaas_spec",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_id": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "ContractJobTest.test_check_image_size": {
            "name": "test_check_image_size",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJobTest.test_check_image_size_too_large": {
            "name": "test_check_image_size_too_large",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJobTest.test_delete_contract_image": {
            "name": "test_delete_contract_image",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ecr": []
            }
        },
        "ContractJobTest.test_delete_contract_image_failure": {
            "name": "test_delete_contract_image_failure",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ecr": []
            }
        },
        "ContractJobTest.test_build_contract_image": {
            "name": "test_build_contract_image",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_docker": [],
                "mock_ecr": []
            }
        },
        "ContractJobTest.test_create_openfaas_secrets": {
            "name": "test_create_openfaas_secrets",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_faas_auth": [],
                "mock_requests": []
            }
        },
        "ContractJobTest.test_create_openfaas_secrets_throws": {
            "name": "test_create_openfaas_secrets_throws",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_faas_auth": [],
                "mock_requests": []
            }
        },
        "ContractJobTest.test_delete_openfaas_secrets": {
            "name": "test_delete_openfaas_secrets",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_faas_auth": [],
                "mock_requests": []
            }
        },
        "ContractJobTest.test_delete_openfaas_secrets_throws": {
            "name": "test_delete_openfaas_secrets_throws",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_faas_auth": [],
                "mock_requests": []
            }
        },
        "ContractJobTest.test_deploy_to_openfaas": {
            "name": "test_deploy_to_openfaas",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_faas_auth": [],
                "mock_requests": [],
                "mock_storage": []
            }
        },
        "ContractJobTest.test_deploy_to_openfaas_throws": {
            "name": "test_deploy_to_openfaas_throws",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_faas_auth": [],
                "mock_requests": []
            }
        },
        "ContractJobTest.test_delete_openfaas_function": {
            "name": "test_delete_openfaas_function",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_faas_auth": [],
                "mock_requests": []
            }
        },
        "ContractJobTest.test_delete_openfaas_function_throws": {
            "name": "test_delete_openfaas_function_throws",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_faas_auth": [],
                "mock_requests": []
            }
        },
        "ContractJobTest.test_delete_contract_data": {
            "name": "test_delete_contract_data",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_delete": [],
                "mock_delete_directory": [],
                "mock_delete_txn_type": [],
                "mock_remove_tx_type": []
            }
        },
        "ContractJobTest.test_schedule_contract": {
            "name": "test_schedule_contract",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_schedule": []
            }
        },
        "ContractJobTest.test_unschedule_contract": {
            "name": "test_unschedule_contract",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_schedule": []
            }
        },
        "ContractJobTest.test_ledger": {
            "name": "test_ledger",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ledger": []
            }
        },
        "ContractJobTest.test_ledger_throws": {
            "name": "test_ledger_throws",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ledger": []
            }
        },
        "ContractJobTest.test_migrate_env": {
            "name": "test_migrate_env",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_id": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "ContractJobTest.test_main_create": {
            "name": "test_main_create",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJobTest.test_run_delete": {
            "name": "test_run_delete",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delete_mock": []
            }
        },
        "ContractJobTest.test_create": {
            "name": "test_create",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ContractJobTest.test_update": {
            "name": "test_update",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_model": [
                    "str"
                ],
                "mock_get_id": [
                    "str"
                ]
            }
        },
        "ContractJobTest.test_main_pass_does_update_model": {
            "name": "test_main_pass_does_update_model",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_docker": [
                    "dict[str, typing.Any]"
                ],
                "mock_login": [],
                "mock_ecr": [],
                "mock_secrets": []
            }
        },
        "ContractJobTest.test_delete": {
            "name": "test_delete",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractJobTest.BuildTaskResult.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "txn_type": [],
                "task_type": [],
                "state": [],
                "cmd": [],
                "args": [],
                "secrets": [
                    "None"
                ],
                "image": [
                    "None"
                ],
                "auth": [
                    "None"
                ]
            }
        },
        "ContractJobTest.BuildTaskResultWithHelpers.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "txn_type": [],
                "task_type": [],
                "state": [],
                "cmd": [],
                "args": [],
                "secrets": [
                    "None"
                ],
                "image": [
                    "None"
                ],
                "auth": [
                    "None"
                ]
            }
        },
        "ContractJobTest.BuildTaskResultWithHelpers.update_faas_helper": {
            "name": "update_faas_helper",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update_model": []
            }
        },
        "ContractJobTest.BuildTaskResultWithHelpers.set_state_helper": {
            "name": "set_state_helper",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "msg": []
            }
        }
    },
    "dragonchain-master/dragonchain/job_processor/job_processor.py": {
        "start": {
            "name": "start",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_job_name": {
            "name": "get_job_name",
            "location": 73,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "contract_id": [
                    "str"
                ]
            }
        },
        "get_job_labels": {
            "name": "get_job_labels",
            "location": 83,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        },
        "start_task": {
            "name": "start_task",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_next_task": {
            "name": "get_next_task",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_existing_job_status": {
            "name": "get_existing_job_status",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "task": [
                    "str"
                ]
            }
        },
        "delete_existing_job": {
            "name": "delete_existing_job",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "task": []
            }
        },
        "attempt_job_launch": {
            "name": "attempt_job_launch",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str"
                ],
                "retry": [
                    "int"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/job_processor/job_processor_utest.py": {
        "TestJobPoller.test_get_job_name": {
            "name": "test_get_job_name",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobPoller.test_get_job_labels": {
            "name": "test_get_job_labels",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobPoller.test_restores_from_pending_queue": {
            "name": "test_restores_from_pending_queue",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_pipeline": [],
                "mock_lrange": [],
                "mock_redis_llen": [],
                "mock_kube_config": [],
                "mock_kube_client": [],
                "mock_start_task": []
            }
        },
        "TestJobPoller.test_can_get_next_task": {
            "name": "test_can_get_next_task",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_brpoplpush": []
            }
        },
        "TestJobPoller.test_get_next_task_returns_none_on_invalid_json_schema": {
            "name": "test_get_next_task_returns_none_on_invalid_json_schema",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_brpoplpush": [],
                "mock_lpop": []
            }
        },
        "TestJobPoller.test_get_next_task_returns_none_on_invalid_json": {
            "name": "test_get_next_task_returns_none_on_invalid_json",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_brpoplpush": [],
                "mock_lpop": []
            }
        },
        "TestJobPoller.test_get_existing_job_status": {
            "name": "test_get_existing_job_status",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_kube": []
            }
        },
        "TestJobPoller.test_get_existing_job_status_returns_none_on_not_found": {
            "name": "test_get_existing_job_status_returns_none_on_not_found",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_kube": []
            }
        },
        "TestJobPoller.test_get_existing_job_status_raises_on_error": {
            "name": "test_get_existing_job_status_raises_on_error",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_kube": []
            }
        },
        "TestJobPoller.test_delete_existing_job": {
            "name": "test_delete_existing_job",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_kube": []
            }
        },
        "TestJobPoller.test_delete_existing_job_returns_none_on_not_found": {
            "name": "test_delete_existing_job_returns_none_on_not_found",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_kube": []
            }
        },
        "TestJobPoller.test_delete_existing_job_raises_on_error": {
            "name": "test_delete_existing_job_raises_on_error",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_kube": []
            }
        },
        "TestJobPoller.test_start_task_launches_job_when_no_existing_job": {
            "name": "test_start_task_launches_job_when_no_existing_job",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_job_launch": [],
                "mock_delete_job": [],
                "mock_get_job": [],
                "mock_get_task": [],
                "mock_lpopsync": []
            }
        },
        "TestJobPoller.test_start_task_deletes_and_launches_job_when_finished_existing_job": {
            "name": "test_start_task_deletes_and_launches_job_when_finished_existing_job",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_job_launch": [],
                "mock_delete_job": [],
                "mock_get_job": [],
                "mock_get_task": [],
                "mock_lpopsync": []
            }
        },
        "TestJobPoller.test_start_task_no_ops_when_running_job": {
            "name": "test_start_task_no_ops_when_running_job",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_job_launch": [],
                "mock_delete_job": [],
                "mock_get_job": [],
                "mock_get_task": [],
                "mock_lpop": []
            }
        },
        "TestJobPoller.test_attempt_job_launch_raises_on_too_many_retries": {
            "name": "test_attempt_job_launch_raises_on_too_many_retries",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobPoller.test_attempt_job_launch_raises_on_error": {
            "name": "test_attempt_job_launch_raises_on_error",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_kube": []
            }
        },
        "TestJobPoller.test_attempt_job_launch_retry_logic": {
            "name": "test_attempt_job_launch_retry_logic",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sleep_patch": [],
                "mock_kube": []
            }
        },
        "TestJobPoller.test_attempt_job_launch_launches_job_correctly": {
            "name": "test_attempt_job_launch_launches_job_correctly",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_kube": []
            }
        }
    },
    "dragonchain-master/dragonchain/job_processor/__init__.py": {
        "begin_task": {
            "name": "begin_task",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "sc_model": [],
                "task_type": [
                    "bool",
                    "typing.Any",
                    "None",
                    "list[dict[str, typing.Any]]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/authorization.py": {
        "get_now_datetime": {
            "name": "get_now_datetime",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "get_supported_hmac_hash": {
            "name": "get_supported_hmac_hash",
            "location": 54,
            "return": [],
            "arguments": {
                "hash_type_str": [
                    "str",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "get_hmac_message_string": {
            "name": "get_hmac_message_string",
            "location": 73,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "http_verb": [
                    "str"
                ],
                "full_path": [
                    "str"
                ],
                "dcid": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "content": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "hash_type": [
                    "int",
                    "list[int]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "get_authorization": {
            "name": "get_authorization",
            "location": 93,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "auth_key_id": [
                    "str",
                    "int",
                    "None"
                ],
                "auth_key": [
                    "str"
                ],
                "http_verb": [
                    "str",
                    "None",
                    "int"
                ],
                "full_path": [
                    "str",
                    "None",
                    "int"
                ],
                "dcid": [
                    "str",
                    "None",
                    "int"
                ],
                "timestamp": [
                    "str",
                    "None",
                    "int"
                ],
                "content_type": [
                    "str",
                    "None",
                    "int"
                ],
                "content": [
                    "str",
                    "None",
                    "int"
                ],
                "hmac_hash_type": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "save_matchmaking_auth_key": {
            "name": "save_matchmaking_auth_key",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "auth_key": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "get_matchmaking_key": {
            "name": "get_matchmaking_key",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "register_new_interchain_key_with_remote": {
            "name": "register_new_interchain_key_with_remote",
            "location": 139,
            "return": [],
            "arguments": {
                "interchain_dcid": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bytes",
                    "str"
                ]
            }
        },
        "register_new_key_with_matchmaking": {
            "name": "register_new_key_with_matchmaking",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "generate_authenticated_request": {
            "name": "generate_authenticated_request",
            "location": 183,
            "return": [
                "tuple[typing.Union[dict[typing.Text, typing.Union[str,dict[str, str],dict[str, list[typing.Any]],tuple[typing.Union[typing.Any,typing.Any]]]],bytes,str,list[tuple[typing.Union[typing.Any,typing.Any,None]]],dict[, ],None]]"
            ],
            "arguments": {
                "http_verb": [
                    "str"
                ],
                "dcid": [
                    "str",
                    "typing.Iterable[]"
                ],
                "full_path": [
                    "str",
                    "dict[, ]"
                ],
                "json_content": [
                    "None",
                    "set[int]"
                ],
                "hmac_hash_type": [
                    "typing.Text"
                ]
            }
        },
        "signature_is_replay": {
            "name": "signature_is_replay",
            "location": 234,
            "return": [
                "bool"
            ],
            "arguments": {
                "request_signature": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "should_rate_limit": {
            "name": "should_rate_limit",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "key_id": [
                    "str"
                ]
            }
        },
        "verify_request_authorization": {
            "name": "verify_request_authorization",
            "location": 278,
            "return": [],
            "arguments": {
                "authorization": [
                    "str"
                ],
                "http_verb": [
                    "str",
                    "bool",
                    "list[]",
                    "typing.Callable[, ]"
                ],
                "full_path": [
                    "str",
                    "bool",
                    "list[]",
                    "typing.Callable[, ]"
                ],
                "dcid": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "timestamp": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ],
                "content_type": [
                    "str",
                    "bool",
                    "list[]",
                    "typing.Callable[, ]"
                ],
                "content": [
                    "str",
                    "bool",
                    "list[]",
                    "typing.Callable[, ]"
                ],
                "interchain": [
                    "str",
                    "bytearray",
                    "bytes",
                    "bool"
                ],
                "api_resource": [
                    "str",
                    "None",
                    "bool"
                ],
                "api_operation": [
                    "str",
                    "None",
                    "bool"
                ],
                "api_name": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/authorization_utest.py": {
        "TestAuthorization.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "bool",
                    "tuple[typing.Union[float,float]]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "msg": [
                    "str",
                    "float",
                    "typing.Type"
                ],
                "func": [
                    "typing.Callable[, ]",
                    "set[str]"
                ]
            }
        },
        "TestAuthorization.test_datetime": {
            "name": "test_datetime",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorization.test_save_matchmaking_auth_key_calls_redis": {
            "name": "test_save_matchmaking_auth_key_calls_redis",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis_set": []
            }
        },
        "TestAuthorization.test_save_matchmaking_auth_returns_false_on_redis_error": {
            "name": "test_save_matchmaking_auth_returns_false_on_redis_error",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis_set": []
            }
        },
        "TestAuthorization.test_get_matchmaking_key_returns_from_redis": {
            "name": "test_get_matchmaking_key_returns_from_redis",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis_get": []
            }
        },
        "TestAuthorization.test_get_hmac_string": {
            "name": "test_get_hmac_string",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorization.test_get_authorization": {
            "name": "test_get_authorization",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_hmac_string": [
                    "dict[str, typing.Sequence[str]]",
                    "list[T]"
                ]
            }
        },
        "TestAuthorization.test_register_interchain_key_with_remote_returns_valid": {
            "name": "test_register_interchain_key_with_remote_returns_valid",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_address": [],
                "mock_post": [],
                "mock_keys": [],
                "mock_dcid": [],
                "mock_new_key": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "mock_save": []
            }
        },
        "TestAuthorization.test_register_interchain_key_raises_with_bad_status_code": {
            "name": "test_register_interchain_key_raises_with_bad_status_code",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_address": [
                    "str",
                    "None",
                    "int",
                    "typing.Callable[[], list[str]]"
                ],
                "mock_post": [
                    "str",
                    "None",
                    "int",
                    "typing.Callable[[], list[str]]"
                ],
                "mock_keys": [
                    "str",
                    "None",
                    "int",
                    "typing.Callable[[], list[str]]"
                ],
                "mock_get_id": [
                    "str",
                    "None",
                    "int",
                    "typing.Callable[[], list[str]]"
                ],
                "mock_new_key": [
                    "str",
                    "None",
                    "int",
                    "typing.Callable[[], list[str]]"
                ]
            }
        },
        "TestAuthorization.test_register_interchain_key_raises_with_bad_request_exception": {
            "name": "test_register_interchain_key_raises_with_bad_request_exception",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_address": [
                    "str",
                    "bool"
                ],
                "mock_post": [
                    "str",
                    "bool"
                ],
                "mock_keys": [
                    "str",
                    "bool"
                ],
                "mock_get_id": [
                    "str",
                    "bool"
                ],
                "mock_new_key": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestAuthorization.test_register_with_matchmaking_returns_valid": {
            "name": "test_register_with_matchmaking_returns_valid",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_save_key": [
                    "str",
                    "int"
                ],
                "mock_post": [
                    "str",
                    "int"
                ],
                "mock_get_keys": [
                    "str",
                    "int"
                ],
                "mock_get_id": [
                    "str",
                    "int"
                ],
                "mock_gen_key": [
                    "str",
                    "int"
                ]
            }
        },
        "TestAuthorization.test_register_with_matchmaking_raises_with_bad_status_code": {
            "name": "test_register_with_matchmaking_raises_with_bad_status_code",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_save_key": [
                    "str",
                    "bool",
                    "bytearray"
                ],
                "mock_post": [
                    "str",
                    "bool",
                    "bytearray"
                ],
                "mock_get_keys": [
                    "str",
                    "bool",
                    "bytearray"
                ],
                "mock_get_id": [
                    "str",
                    "bool",
                    "bytearray"
                ],
                "mock_gen_key": [
                    "str",
                    "bool",
                    "bytearray"
                ]
            }
        },
        "TestAuthorization.test_register_with_matchmaking_raises_with_request_exception": {
            "name": "test_register_with_matchmaking_raises_with_request_exception",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_save_key": [
                    "str",
                    "bool"
                ],
                "mock_post": [
                    "str",
                    "bool"
                ],
                "mock_get_keys": [
                    "str",
                    "bool"
                ],
                "mock_get_id": [
                    "str",
                    "bool"
                ],
                "mock_gen_key": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestAuthorization.test_register_with_matchmaking_raises_with_bad_key_save": {
            "name": "test_register_with_matchmaking_raises_with_bad_key_save",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_save_key": [
                    "str",
                    "int"
                ],
                "mock_post": [
                    "str",
                    "int"
                ],
                "mock_get_keys": [
                    "str",
                    "int"
                ],
                "mock_get_id": [
                    "str",
                    "int"
                ],
                "mock_gen_key": [
                    "str",
                    "int"
                ]
            }
        },
        "TestAuthorization.test_gen_interchain_request_dcid": {
            "name": "test_gen_interchain_request_dcid",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [],
                "date_mock": [],
                "mock_register": [],
                "mock_dcid": []
            }
        },
        "TestAuthorization.test_gen_interchain_request_matchmaking": {
            "name": "test_gen_interchain_request_matchmaking",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date_mock": [],
                "mock_register": [],
                "mock_get": [],
                "mock_dcid": []
            }
        },
        "TestAuthorization.test_sig_replay_returns_true_with_existing_replay": {
            "name": "test_sig_replay_returns_true_with_existing_replay",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_sync": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestAuthorization.test_sig_replay_returns_false_when_valid": {
            "name": "test_sig_replay_returns_false_when_valid",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_set": [],
                "mock_get": []
            }
        },
        "TestAuthorization.test_verify_req_auth_raises_with_wrong_dc_id": {
            "name": "test_verify_req_auth_raises_with_wrong_dc_id",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [
                    "list[int]",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "mock_date": [
                    "list[int]",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "mock_is_replay": [
                    "list[int]",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "mock_dcid": [
                    "list[int]",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestAuthorization.test_verify_req_auth_raises_with_unsupported_auth_version": {
            "name": "test_verify_req_auth_raises_with_unsupported_auth_version",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [],
                "mock_date": [],
                "mock_is_replay": [],
                "mock_dcid": []
            }
        },
        "TestAuthorization.test_verify_req_auth_raises_with_unsupported_hmac_hash": {
            "name": "test_verify_req_auth_raises_with_unsupported_hmac_hash",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [
                    "bool"
                ],
                "mock_date": [
                    "bool"
                ],
                "mock_is_replay": [
                    "bool"
                ],
                "mock_dcid": [
                    "bool"
                ]
            }
        },
        "TestAuthorization.test_verify_req_auth_raises_with_old_timestamp": {
            "name": "test_verify_req_auth_raises_with_old_timestamp",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [],
                "mock_date": [],
                "mock_is_replay": [],
                "mock_dcid": []
            }
        },
        "TestAuthorization.test_verify_req_auth_raises_with_malformed_authorization": {
            "name": "test_verify_req_auth_raises_with_malformed_authorization",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [],
                "mock_date": [],
                "mock_is_replay": [],
                "mock_dcid": []
            }
        },
        "TestAuthorization.test_verify_req_auth_raises_with_invalid_hmac": {
            "name": "test_verify_req_auth_raises_with_invalid_hmac",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [],
                "mock_date": [],
                "mock_is_replay": [],
                "mock_dcid": []
            }
        },
        "TestAuthorization.test_verify_req_auth_passes_when_valid": {
            "name": "test_verify_req_auth_passes_when_valid",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [
                    "bool"
                ],
                "mock_date": [
                    "bool"
                ],
                "mock_is_replay": [
                    "bool"
                ],
                "mock_dcid": [
                    "bool"
                ]
            }
        },
        "TestAuthorization.test_verify_req_auth_raises_on_replay": {
            "name": "test_verify_req_auth_raises_on_replay",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [],
                "mock_date": [],
                "mock_is_replay": [],
                "mock_dcid": []
            }
        },
        "TestAuthorization.test_verify_req_auth_raises_on_key_not_allowed": {
            "name": "test_verify_req_auth_raises_on_key_not_allowed",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [
                    "str",
                    "bool"
                ],
                "mock_date": [
                    "str",
                    "bool"
                ],
                "mock_is_replay": [
                    "str",
                    "bool"
                ],
                "mock_dcid": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestAuthorization.test_verify_req_auth_raises_on_key_allowed_exception": {
            "name": "test_verify_req_auth_raises_on_key_allowed_exception",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [
                    "bool"
                ],
                "mock_date": [
                    "bool"
                ],
                "mock_is_replay": [
                    "bool"
                ],
                "mock_dcid": [
                    "bool"
                ]
            }
        },
        "TestAuthorization.test_verify_req_auth_raises_with_rate_limit": {
            "name": "test_verify_req_auth_raises_with_rate_limit",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [],
                "mock_date": [],
                "mock_should_limit": [],
                "mock_is_replay": [],
                "mock_dcid": []
            }
        },
        "TestAuthorization.test_verify_req_auth_raises_with_no_key": {
            "name": "test_verify_req_auth_raises_with_no_key",
            "location": 539,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [
                    "bool",
                    "str"
                ],
                "mock_date": [
                    "bool",
                    "str"
                ],
                "mock_is_replay": [
                    "bool",
                    "str"
                ],
                "mock_dcid": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestAuthorization.test_verify_req_auth_raises_on_get_key_error": {
            "name": "test_verify_req_auth_raises_on_get_key_error",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [
                    "str",
                    "bool"
                ],
                "mock_date": [
                    "str",
                    "bool"
                ],
                "mock_is_replay": [
                    "str",
                    "bool"
                ],
                "mock_dcid": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestAuthorization.test_generated_authenticated_request_with_verifier": {
            "name": "test_generated_authenticated_request_with_verifier",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth_key": [],
                "mock_date": [],
                "mock_is_replay": [],
                "mock_get_id": []
            }
        },
        "TestAuthorization.test_should_rate_limit_disabled_on_0": {
            "name": "test_should_rate_limit_disabled_on_0",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_lindex": []
            }
        },
        "TestAuthorization.test_should_rate_limit_calls_lpush_when_returning_false": {
            "name": "test_should_rate_limit_calls_lpush_when_returning_false",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": [],
                "mock_lpush": [],
                "mock_ltrim": [],
                "mock_lindex": []
            }
        },
        "TestAuthorization.test_should_rate_limit_calls_ltrim": {
            "name": "test_should_rate_limit_calls_ltrim",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ltrim": [],
                "mock_rand": [],
                "mock_lpush": [],
                "mock_lindex": []
            }
        },
        "TestAuthorization.test_should_rate_limit_calls_lindex": {
            "name": "test_should_rate_limit_calls_lindex",
            "location": 654,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_lindex": [],
                "mock_ltrim": [],
                "mock_lpush": []
            }
        },
        "TestAuthorization.test_should_rate_limit_returns_true_when_limited": {
            "name": "test_should_rate_limit_returns_true_when_limited",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": [],
                "mock_ltrim": [],
                "mock_lindex": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/broadcast.py": {
        "dispatch": {
            "name": "dispatch",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "block": []
            }
        },
        "send_receipt": {
            "name": "send_receipt",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "block": []
            }
        },
        "send_receipts": {
            "name": "send_receipts",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "l5_block": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/callback.py": {
        "register_callback": {
            "name": "register_callback",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "txn_id": [
                    "str",
                    "int"
                ],
                "callback_url": [
                    "str",
                    "int"
                ]
            }
        },
        "fire_if_exists": {
            "name": "fire_if_exists",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "txn_id": [
                    "str",
                    "None",
                    "bytes",
                    "dict[, ]"
                ],
                "transaction_model": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/callback_utest.py": {
        "TestCallback.test_register_if_callback_url_is_not_none": {
            "name": "test_register_if_callback_url_is_not_none",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_hset": []
            }
        },
        "TestCallback.test_fire_if_exists_no_op_when_no_trigger_exists": {
            "name": "test_fire_if_exists_no_op_when_no_trigger_exists",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_hdel": [],
                "mock_hget": []
            }
        },
        "TestCallback.test_fire_if_exists_when_trigger_exists": {
            "name": "test_fire_if_exists_when_trigger_exists",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "whatev": [],
                "mock_hget": [],
                "mock_hdel": []
            }
        },
        "TestCallback.test_fire_if_exists_when_exception_is_thrown": {
            "name": "test_fire_if_exists_when_exception_is_thrown",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "whatev": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ],
                "mock_hget": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ],
                "mock_hdel": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ]
            }
        },
        "TestCallback.test_fire_if_exists_calls_hdel_no_matter_what": {
            "name": "test_fire_if_exists_calls_hdel_no_matter_what",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "whatev": [],
                "mock_get": [],
                "mock_hdel": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/crypto.py": {
        "int_to_unsigned_bytes": {
            "name": "int_to_unsigned_bytes",
            "location": 56,
            "return": [
                "bytes"
            ],
            "arguments": {
                "num": [
                    "int"
                ]
            }
        },
        "get_hash_obj": {
            "name": "get_hash_obj",
            "location": 66,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "get_hash_method": {
            "name": "get_hash_method",
            "location": 85,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str"
                ]
            }
        },
        "hash_bytes": {
            "name": "hash_bytes",
            "location": 104,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "bytes",
                    "None"
                ],
                "bytes_param": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "create_hmac": {
            "name": "create_hmac",
            "location": 117,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "None"
                ],
                "secret": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "compare_hmac": {
            "name": "compare_hmac",
            "location": 131,
            "return": [],
            "arguments": {
                "hash_type": [
                    "int",
                    "str",
                    "None"
                ],
                "original_hmac": [
                    "int",
                    "str",
                    "None"
                ],
                "secret": [
                    "int",
                    "str",
                    "None"
                ],
                "message": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "calculate_public_id": {
            "name": "calculate_public_id",
            "location": 144,
            "return": [],
            "arguments": {
                "public_key": [
                    "str",
                    "bytes",
                    "typing.AnyStr"
                ]
            }
        },
        "validate_public_id": {
            "name": "validate_public_id",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "public_key": [
                    "str",
                    "int",
                    "None"
                ],
                "public_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "hash_full_transaction": {
            "name": "hash_full_transaction",
            "location": 166,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "int",
                    "None"
                ],
                "transaction": [
                    "str",
                    "bytes",
                    "float",
                    "set[str]"
                ]
            }
        },
        "hash_stripped_transaction": {
            "name": "hash_stripped_transaction",
            "location": 184,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "bool",
                    "None"
                ],
                "full_hash_bytes": [
                    "dict[, ]",
                    "dict[P, int]"
                ],
                "transaction": [
                    "dict[, ]",
                    "dict[str, str]",
                    "str",
                    "typing.Type",
                    "typing.Mapping"
                ]
            }
        },
        "hash_l1_block": {
            "name": "hash_l1_block",
            "location": 203,
            "return": [],
            "arguments": {
                "hash_type": [
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "block": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int",
                    "typing.Any",
                    "None"
                ],
                "nonce": [
                    "int"
                ]
            }
        },
        "hash_l2_block": {
            "name": "hash_l2_block",
            "location": 224,
            "return": [],
            "arguments": {
                "hash_type": [
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "block": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Mapping"
                ],
                "nonce": [
                    "int"
                ]
            }
        },
        "hash_l3_block": {
            "name": "hash_l3_block",
            "location": 244,
            "return": [],
            "arguments": {
                "hash_type": [
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "block": [
                    "typing.IO"
                ],
                "nonce": [
                    "int"
                ]
            }
        },
        "hash_l4_block": {
            "name": "hash_l4_block",
            "location": 272,
            "return": [],
            "arguments": {
                "hash_type": [
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "block": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int",
                    "typing.Any",
                    "None"
                ],
                "nonce": [
                    "int"
                ]
            }
        },
        "hash_l5_block": {
            "name": "hash_l5_block",
            "location": 299,
            "return": [],
            "arguments": {
                "hash_type": [
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "block": [
                    "dict[, ]",
                    "str",
                    "int"
                ],
                "nonce": [
                    "int"
                ]
            }
        },
        "make_generic_signature": {
            "name": "make_generic_signature",
            "location": 320,
            "return": [],
            "arguments": {
                "encryption_type": [
                    "str",
                    "int",
                    "None",
                    "typing.Callable[str, str]",
                    "dict[str, str]",
                    "typing.Hashable"
                ],
                "hash_type": [
                    "bool",
                    "str",
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "priv_key": [
                    "str",
                    "int",
                    "None",
                    "typing.Callable[str, str]",
                    "dict[str, str]",
                    "typing.Hashable"
                ],
                "content_bytes": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "check_generic_signature": {
            "name": "check_generic_signature",
            "location": 340,
            "return": [],
            "arguments": {
                "encryption_type": [
                    "int"
                ],
                "hash_type": [
                    "str",
                    "None"
                ],
                "pub_key": [
                    "int"
                ],
                "content_bytes": [
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "signature_bytes": [
                    "int"
                ]
            }
        },
        "encrypt_message": {
            "name": "encrypt_message",
            "location": 361,
            "return": [],
            "arguments": {
                "encryption_type": [
                    "str",
                    "bool"
                ],
                "priv_key": [],
                "message_bytes": [
                    "bytes",
                    "None"
                ]
            }
        },
        "encrypt_secp256k1_message_compact": {
            "name": "encrypt_secp256k1_message_compact",
            "location": 380,
            "return": [],
            "arguments": {
                "priv_key": [],
                "message_bytes": [
                    "bytes",
                    "str"
                ]
            }
        },
        "verify_signature": {
            "name": "verify_signature",
            "location": 392,
            "return": [],
            "arguments": {
                "encryption_type": [
                    "str",
                    "int"
                ],
                "pub_key": [],
                "message_bytes": [
                    "bytes",
                    "None"
                ],
                "signature_bytes": [
                    "bytes",
                    "None"
                ]
            }
        },
        "pow_item": {
            "name": "pow_item",
            "location": 410,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "hash_type": [
                    "str",
                    "None",
                    "list[str]",
                    "typing.Sequence[str]",
                    "list[]",
                    "bool"
                ],
                "item": [
                    "str",
                    "None",
                    "list[str]",
                    "typing.Sequence[str]",
                    "list[]",
                    "bool"
                ],
                "hash_method": [
                    "str",
                    "None",
                    "list[str]",
                    "typing.Sequence[str]",
                    "list[]",
                    "bool"
                ],
                "complexity": [
                    "str"
                ]
            }
        },
        "sign_transaction": {
            "name": "sign_transaction",
            "location": 431,
            "return": [
                "tuple[typing.Union[str,dict[, ],typing.Counter]]"
            ],
            "arguments": {
                "hash_type": [
                    "str",
                    "bytes",
                    "int"
                ],
                "encryption_type": [
                    "str"
                ],
                "priv_key": [
                    "str"
                ],
                "transaction": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "verify_stripped_transaction": {
            "name": "verify_stripped_transaction",
            "location": 460,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ],
                "encryption_type": [
                    "int"
                ],
                "pub_key": [
                    "int"
                ],
                "stripped_transaction": [
                    "str",
                    "typing.Mapping",
                    "bytes",
                    "bool"
                ]
            }
        },
        "verify_full_transaction": {
            "name": "verify_full_transaction",
            "location": 481,
            "return": [
                "bool"
            ],
            "arguments": {
                "hash_type": [
                    "int",
                    "str",
                    "None"
                ],
                "encryption_type": [
                    "bool",
                    "tuple[str]",
                    "None",
                    "list[int]",
                    "str",
                    "list[str]",
                    "list[tuple[]]"
                ],
                "pub_key": [
                    "bool",
                    "tuple[str]",
                    "None",
                    "list[int]",
                    "str",
                    "list[str]",
                    "list[tuple[]]"
                ],
                "full_transaction": [
                    "int",
                    "str"
                ]
            }
        },
        "check_complexity": {
            "name": "check_complexity",
            "location": 505,
            "return": [
                "bool"
            ],
            "arguments": {
                "check_bytes": [
                    "bytes"
                ],
                "complexity": [
                    "int"
                ]
            }
        },
        "pow_l1_block": {
            "name": "pow_l1_block",
            "location": 525,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "typing.Mapping"
                ],
                "block": [
                    "str",
                    "typing.Mapping"
                ],
                "complexity": [
                    "int"
                ]
            }
        },
        "sign_l1_block": {
            "name": "sign_l1_block",
            "location": 537,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "encryption_type": [
                    "str"
                ],
                "priv_key": [
                    "str"
                ],
                "block": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "pow_l2_block": {
            "name": "pow_l2_block",
            "location": 555,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "typing.Mapping"
                ],
                "block": [
                    "str",
                    "typing.Mapping"
                ],
                "complexity": [
                    "int"
                ]
            }
        },
        "sign_l2_block": {
            "name": "sign_l2_block",
            "location": 567,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "encryption_type": [
                    "str"
                ],
                "priv_key": [
                    "str"
                ],
                "block": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "pow_l3_block": {
            "name": "pow_l3_block",
            "location": 585,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "typing.Mapping"
                ],
                "block": [
                    "str",
                    "typing.Mapping"
                ],
                "complexity": [
                    "int"
                ]
            }
        },
        "sign_l3_block": {
            "name": "sign_l3_block",
            "location": 597,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "encryption_type": [
                    "str"
                ],
                "priv_key": [
                    "str"
                ],
                "block": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "pow_l4_block": {
            "name": "pow_l4_block",
            "location": 615,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "typing.Mapping"
                ],
                "block": [
                    "str",
                    "typing.Mapping"
                ],
                "complexity": [
                    "int"
                ]
            }
        },
        "sign_l4_block": {
            "name": "sign_l4_block",
            "location": 627,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "encryption_type": [
                    "str"
                ],
                "priv_key": [
                    "str"
                ],
                "block": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "sign_l5_block": {
            "name": "sign_l5_block",
            "location": 645,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "encryption_type": [
                    "str"
                ],
                "priv_key": [
                    "str"
                ],
                "block": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "verify_l1_block_trust": {
            "name": "verify_l1_block_trust",
            "location": 663,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "encryption_type": [
                    "int",
                    "str"
                ],
                "pub_key": [
                    "int",
                    "str"
                ],
                "block": [
                    "typing.Type"
                ]
            }
        },
        "verify_l2_block_trust": {
            "name": "verify_l2_block_trust",
            "location": 681,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "encryption_type": [
                    "int",
                    "str"
                ],
                "pub_key": [
                    "int",
                    "str"
                ],
                "block": [
                    "typing.Type"
                ]
            }
        },
        "verify_l3_block_trust": {
            "name": "verify_l3_block_trust",
            "location": 699,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "encryption_type": [
                    "int",
                    "str"
                ],
                "pub_key": [
                    "int",
                    "str"
                ],
                "block": [
                    "typing.Type"
                ]
            }
        },
        "verify_l4_block_trust": {
            "name": "verify_l4_block_trust",
            "location": 717,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "encryption_type": [
                    "int",
                    "str"
                ],
                "pub_key": [
                    "int",
                    "str"
                ],
                "block": [
                    "typing.Type"
                ]
            }
        },
        "verify_l5_block_trust": {
            "name": "verify_l5_block_trust",
            "location": 735,
            "return": [],
            "arguments": {
                "hash_type": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "encryption_type": [
                    "int",
                    "str"
                ],
                "pub_key": [
                    "int",
                    "str"
                ],
                "block": [
                    "typing.Type"
                ]
            }
        },
        "verify_l1_block_pow": {
            "name": "verify_l1_block_pow",
            "location": 753,
            "return": [
                "bool"
            ],
            "arguments": {
                "hash_type": [
                    "int"
                ],
                "block": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "complexity": [
                    "int"
                ]
            }
        },
        "verify_l2_block_pow": {
            "name": "verify_l2_block_pow",
            "location": 770,
            "return": [
                "bool"
            ],
            "arguments": {
                "hash_type": [
                    "int"
                ],
                "block": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "complexity": [
                    "int"
                ]
            }
        },
        "verify_l3_block_pow": {
            "name": "verify_l3_block_pow",
            "location": 787,
            "return": [
                "bool"
            ],
            "arguments": {
                "hash_type": [
                    "int"
                ],
                "block": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "complexity": [
                    "int"
                ]
            }
        },
        "verify_l4_block_pow": {
            "name": "verify_l4_block_pow",
            "location": 804,
            "return": [
                "bool"
            ],
            "arguments": {
                "hash_type": [
                    "int"
                ],
                "block": [
                    "str",
                    "typing.Callable[, ]",
                    "None"
                ],
                "complexity": [
                    "int"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/crypto_utest.py": {
        "make_tx": {
            "name": "make_tx",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "make_l1_block": {
            "name": "make_l1_block",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "make_l2_block": {
            "name": "make_l2_block",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "make_l3_block": {
            "name": "make_l3_block",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "make_l3_block_v2": {
            "name": "make_l3_block_v2",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "make_l4_block": {
            "name": "make_l4_block",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "make_l5_block": {
            "name": "make_l5_block",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "TestCrypto.test_tx_blake2b_hashing": {
            "name": "test_tx_blake2b_hashing",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_tx_sha256_hashing": {
            "name": "test_tx_sha256_hashing",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_tx_sha3_256_hashing": {
            "name": "test_tx_sha3_256_hashing",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_tx_secp256k1_signing": {
            "name": "test_tx_secp256k1_signing",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l1block_signing_hashing": {
            "name": "test_l1block_signing_hashing",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l2block_signing_hashing": {
            "name": "test_l2block_signing_hashing",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l3block_signing_hashing": {
            "name": "test_l3block_signing_hashing",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l3block_signing_hashing_v2": {
            "name": "test_l3block_signing_hashing_v2",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l4block_signing_hashing": {
            "name": "test_l4block_signing_hashing",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l5block_signing_hashing": {
            "name": "test_l5block_signing_hashing",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_pow_complexity": {
            "name": "test_pow_complexity",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_stripped_tx_verifying": {
            "name": "test_stripped_tx_verifying",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_full_tx_verifying": {
            "name": "test_full_tx_verifying",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l1block_trust_verifying": {
            "name": "test_l1block_trust_verifying",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l2block_trust_verifying": {
            "name": "test_l2block_trust_verifying",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l3block_trust_verifying": {
            "name": "test_l3block_trust_verifying",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l3block_trust_verifying_v2": {
            "name": "test_l3block_trust_verifying_v2",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l4block_trust_verifying": {
            "name": "test_l4block_trust_verifying",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l5block_trust_verifying": {
            "name": "test_l5block_trust_verifying",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l1block_pow_verifying": {
            "name": "test_l1block_pow_verifying",
            "location": 552,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l2block_pow_verifying": {
            "name": "test_l2block_pow_verifying",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l3block_pow_verifying": {
            "name": "test_l3block_pow_verifying",
            "location": 622,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l3block_pow_verifying_v2": {
            "name": "test_l3block_pow_verifying_v2",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_l4block_pow_verifying": {
            "name": "test_l4block_pow_verifying",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_hash_bytes": {
            "name": "test_hash_bytes",
            "location": 763,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_create_public_id": {
            "name": "test_create_public_id",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_validate_public_id": {
            "name": "test_validate_public_id",
            "location": 777,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_hmac": {
            "name": "test_hmac",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_generic_signature": {
            "name": "test_generic_signature",
            "location": 797,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_encrypt_secp256k1_message_compact": {
            "name": "test_encrypt_secp256k1_message_compact",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_unsupported_crypto": {
            "name": "test_unsupported_crypto",
            "location": 808,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dragonnet_config.py": {},
    "dragonchain-master/dragonchain/lib/error_reporter.py": {
        "get_exception_message": {
            "name": "get_exception_message",
            "location": 40,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "exception": [
                    "str",
                    "bool",
                    "tuple[str]"
                ]
            }
        },
        "report_exception": {
            "name": "report_exception",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": [
                    "typing.Mapping"
                ],
                "message": [
                    "Exception",
                    "int",
                    "typing.Callable[[], collections.abc.Awaitable[typing.Mapping]]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/faas.py": {
        "get_faas_auth": {
            "name": "get_faas_auth",
            "location": 30,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "_get_raw_logs": {
            "name": "_get_raw_logs",
            "location": 48,
            "return": [],
            "arguments": {
                "contract_id": [
                    "str",
                    "int"
                ],
                "since": [
                    "None",
                    "str",
                    "int"
                ],
                "tail": [
                    "int"
                ]
            }
        },
        "get_logs": {
            "name": "get_logs",
            "location": 62,
            "return": [
                "list[]"
            ],
            "arguments": {
                "contract_id": [
                    "str",
                    "int",
                    "None"
                ],
                "since": [
                    "None",
                    "str",
                    "int"
                ],
                "tail": [
                    "int"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/faas_utest.py": {
        "TestGetFaaSAuth.test_delete_contract": {
            "name": "test_delete_contract",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetContractLogs.test_get_raw_logs_makes_request": {
            "name": "test_get_raw_logs_makes_request",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth": [],
                "mock_get": []
            }
        },
        "TestGetContractLogs.test_get_raw_logs_raises_runtime_error_on_bad_response": {
            "name": "test_get_raw_logs_raises_runtime_error_on_bad_response",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_auth": [],
                "mock_get": []
            }
        },
        "TestGetContractLogs.test_get_logs_calls_get_raw": {
            "name": "test_get_logs_calls_get_raw",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_raw": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/keys.py": {
        "get_public_id": {
            "name": "get_public_id",
            "location": 50,
            "return": [
                "typing.Text",
                "dict[str, str]",
                "int",
                "typing.Iterator"
            ],
            "arguments": {}
        },
        "get_my_keys": {
            "name": "get_my_keys",
            "location": 64,
            "return": [
                "bytes",
                "None",
                "str",
                "list[str]"
            ],
            "arguments": {}
        },
        "DCKeys.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dc_id": [
                    "typing.Text"
                ],
                "pull_keys": [
                    "bool"
                ]
            }
        },
        "DCKeys.initialize": {
            "name": "initialize",
            "location": 102,
            "return": [
                "DCKeys"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "scheme": [
                    "typing.Text"
                ],
                "private_key_string": [
                    "None",
                    "str",
                    "typing.Sequence[str]",
                    "bool"
                ],
                "public_key_string": [
                    "None",
                    "str",
                    "bytes",
                    "typing.Sequence[str]",
                    "bytearray",
                    "bool"
                ],
                "hash_type": [
                    "typing.Text"
                ],
                "encryption": [
                    "typing.Text"
                ]
            }
        },
        "DCKeys.set_scheme": {
            "name": "set_scheme",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str"
                ]
            }
        },
        "DCKeys.set_level": {
            "name": "set_level",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ]
            }
        },
        "DCKeys.set_encryption": {
            "name": "set_encryption",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encryption_type": [
                    "str"
                ]
            }
        },
        "DCKeys.set_hash": {
            "name": "set_hash",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_type": [
                    "str"
                ]
            }
        },
        "DCKeys.set_private_key": {
            "name": "set_private_key",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_key_string": [
                    "int",
                    "bytes",
                    "typing.Callable[, ]",
                    "None",
                    "str"
                ]
            }
        },
        "DCKeys.set_public_key": {
            "name": "set_public_key",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public_key_string": [
                    "str",
                    "bytes"
                ]
            }
        },
        "DCKeys.check_signature": {
            "name": "check_signature",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "dict[str, str]",
                    "list[str]"
                ],
                "signature": [
                    "str",
                    "dict[str, str]",
                    "list[str]"
                ],
                "hash_type": [
                    "None",
                    "str"
                ]
            }
        },
        "DCKeys.make_signature": {
            "name": "make_signature",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "int",
                    "float",
                    "None"
                ],
                "hash_type": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "DCKeys.make_binance_signature": {
            "name": "make_binance_signature",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "content": [
                    "bytes",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "DCKeys.sign_block": {
            "name": "sign_block",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "signable_block": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "DCKeys.hash_l5_for_public_broadcast": {
            "name": "hash_l5_for_public_broadcast",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "signable_block": []
            }
        },
        "DCKeys.pow_block": {
            "name": "pow_block",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "signable_block": [
                    "str",
                    "None"
                ]
            }
        },
        "DCKeys.verify_block": {
            "name": "verify_block",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "block": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "DCKeys.sign_transaction": {
            "name": "sign_transaction",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "signable_tx": [
                    "str",
                    "int"
                ]
            }
        },
        "DCKeys.verify_stripped_transaction": {
            "name": "verify_stripped_transaction",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "stripped_tx": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "dict[, ]"
                ]
            }
        },
        "DCKeys.verify_full_transaction": {
            "name": "verify_full_transaction",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "full_tx": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "dict[, ]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/matchmaking.py": {
        "get_dragonchain_address": {
            "name": "get_dragonchain_address",
            "location": 46,
            "return": [],
            "arguments": {
                "dragonchain_id": [
                    "int",
                    "str",
                    "tuple[typing.Union[str,None,str]]"
                ]
            }
        },
        "get_matchmaking_config": {
            "name": "get_matchmaking_config",
            "location": 56,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Text,float]]"
            ],
            "arguments": {}
        },
        "get_claim_request_dto": {
            "name": "get_claim_request_dto",
            "location": 84,
            "return": [
                "dict[typing.Text, typing.Union[str,dict[, ],int,dict[str, str]]]"
            ],
            "arguments": {
                "requirements": [
                    "str"
                ],
                "block_id": [
                    "str",
                    "dict[, ]",
                    "int",
                    "dict[str, str]"
                ],
                "transaction_count": [
                    "str",
                    "dict[, ]",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "update_funded_flag": {
            "name": "update_funded_flag",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "flag_value": [
                    "bool",
                    "str",
                    "list[]",
                    "None",
                    "typing.Sequence[str]",
                    "set[str]",
                    "list[str]"
                ]
            }
        },
        "get_overwrite_no_response_dto": {
            "name": "get_overwrite_no_response_dto",
            "location": 113,
            "return": [
                "dict[typing.Text, typing.Union[str,int,dict[, ]]]"
            ],
            "arguments": {
                "claim": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "higher_level_node": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "higher_level": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "retry": [
                    "bool"
                ]
            }
        },
        "renew_registration_if_necessary": {
            "name": "renew_registration_if_necessary",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_registration": {
            "name": "get_registration",
            "location": 143,
            "return": [],
            "arguments": {
                "dc_id": [
                    "int",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "update_registration": {
            "name": "update_registration",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "new_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]",
                    "str"
                ]
            }
        },
        "create_claim_check": {
            "name": "create_claim_check",
            "location": 171,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "int",
                    "None"
                ],
                "requirements": [
                    "int",
                    "None",
                    "list[str]",
                    "str"
                ]
            }
        },
        "get_claim_check": {
            "name": "get_claim_check",
            "location": 189,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "get_or_create_claim_check": {
            "name": "get_or_create_claim_check",
            "location": 206,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "int"
                ],
                "requirements": [
                    "dict[, ]",
                    "int",
                    "str"
                ]
            }
        },
        "get_claimed_txn_count": {
            "name": "get_claimed_txn_count",
            "location": 221,
            "return": [],
            "arguments": {
                "l1_dc_id": [
                    "str",
                    "int"
                ],
                "block_id": [
                    "str",
                    "int"
                ]
            }
        },
        "overwrite_no_response_node": {
            "name": "overwrite_no_response_node",
            "location": 235,
            "return": [],
            "arguments": {
                "block_id": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "higher_level": [
                    "int",
                    "str",
                    "float"
                ],
                "higher_level_node": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "update_claim_check": {
            "name": "update_claim_check",
            "location": 249,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "dict[, ]"
                ],
                "data": [
                    "str",
                    "bool",
                    "typing.Mapping",
                    "None",
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "add_receipt": {
            "name": "add_receipt",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "l1_block_id": [
                    "str"
                ],
                "level": [
                    "int",
                    "str"
                ],
                "dc_id": [
                    "int",
                    "str"
                ],
                "block_id": [
                    "str",
                    "int"
                ],
                "proof": [
                    "str",
                    "int"
                ]
            }
        },
        "resolve_claim_check": {
            "name": "resolve_claim_check",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "claim_check_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "make_matchmaking_request": {
            "name": "make_matchmaking_request",
            "location": 294,
            "return": [],
            "arguments": {
                "http_verb": [
                    "str",
                    "bytes"
                ],
                "path": [
                    "str",
                    "None"
                ],
                "json_content": [
                    "None",
                    "str",
                    "list[tuple[typing.Union[int,str]]]"
                ],
                "retry": [
                    "bool"
                ],
                "authenticated": [
                    "bool"
                ]
            }
        },
        "cache_claim_check": {
            "name": "cache_claim_check",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "dict[, ]",
                    "int",
                    "None",
                    "float"
                ],
                "claim_check": [
                    "str",
                    "dict[, ]",
                    "int",
                    "None",
                    "float"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/namespace.py": {},
    "dragonchain-master/dragonchain/lib/party.py": {
        "get_address_ddss": {
            "name": "get_address_ddss",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "address": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "make_party_request": {
            "name": "make_party_request",
            "location": 51,
            "return": [],
            "arguments": {
                "http_verb": [
                    "str",
                    "bytes"
                ],
                "path": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "json_content": [
                    "None",
                    "str",
                    "list[tuple[typing.Union[int,str]]]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/queue.py": {
        "check_and_recover_processing_if_necessary": {
            "name": "check_and_recover_processing_if_necessary",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "enqueue_item": {
            "name": "enqueue_item",
            "location": 68,
            "return": [],
            "arguments": {
                "item": [],
                "deadline": [
                    "int"
                ]
            }
        },
        "remove_transaction_stubs": {
            "name": "remove_transaction_stubs",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "transactions": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "enqueue_l1": {
            "name": "enqueue_l1",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "transaction": [
                    "typing.Match",
                    "float",
                    "typing.Type",
                    "bool"
                ]
            }
        },
        "enqueue_l1_pipeline": {
            "name": "enqueue_l1_pipeline",
            "location": 94,
            "return": [
                "bool",
                "typing.Type",
                "str"
            ],
            "arguments": {
                "pipeline": [
                    "bool",
                    "typing.Type",
                    "str"
                ],
                "transaction": []
            }
        },
        "enqueue_generic": {
            "name": "enqueue_generic",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "queue": [
                    "str"
                ],
                "deadline": [
                    "bool",
                    "bytes",
                    "typing.Callable[, ]"
                ]
            }
        },
        "is_not_empty": {
            "name": "is_not_empty",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "clear_processing_queue": {
            "name": "clear_processing_queue",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_deadline_key": {
            "name": "get_deadline_key",
            "location": 142,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "item_as_bytes": [
                    "int",
                    "list[int]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "item_is_expired": {
            "name": "item_is_expired",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "item_as_bytes": [
                    "Exception",
                    "bytes",
                    "dict[, ]",
                    "bool",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "get_next_item": {
            "name": "get_next_item",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_new_transactions": {
            "name": "get_new_transactions",
            "location": 168,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "get_next_l1_block": {
            "name": "get_next_l1_block",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_next_l2_blocks": {
            "name": "get_next_l2_blocks",
            "location": 199,
            "return": [
                "tuple[None]",
                "tuple[typing.Union[dict[typing.Text, ],list[]]]"
            ],
            "arguments": {}
        },
        "get_next_l3_block": {
            "name": "get_next_l3_block",
            "location": 222,
            "return": [
                "tuple[None]",
                "tuple[typing.Union[dict[typing.Text, ],list[]]]"
            ],
            "arguments": {}
        },
        "get_new_l4_blocks": {
            "name": "get_new_l4_blocks",
            "location": 245,
            "return": [
                "list[]"
            ],
            "arguments": {}
        }
    },
    "dragonchain-master/dragonchain/lib/queue_utest.py": {
        "TestQueue.test_remove_transaction_stubs": {
            "name": "test_remove_transaction_stubs",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stub_redis": []
            }
        },
        "TestQueue.test_get_new_transaction_raises_on_bad_level": {
            "name": "test_get_new_transaction_raises_on_bad_level",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.test_get_next_l1_block_raises_on_bad_level": {
            "name": "test_get_next_l1_block_raises_on_bad_level",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.test_get_next_l2_blocks_raises_on_bad_level": {
            "name": "test_get_next_l2_blocks_raises_on_bad_level",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.test_get_next_l3_block_raises_on_bad_level": {
            "name": "test_get_next_l3_block_raises_on_bad_level",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.test_get_new_l4_blocks_raises_on_bad_level": {
            "name": "test_get_new_l4_blocks_raises_on_bad_level",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.test_get_new_transactions": {
            "name": "test_get_new_transactions",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis": [],
                "mock_new_from_queue": []
            }
        },
        "TestQueue.test_enqueue_l1_raises_invalid_transaction_type_when_not_found": {
            "name": "test_enqueue_l1_raises_invalid_transaction_type_when_not_found",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis": [
                    "typing.Callable[, ]"
                ],
                "mock_get_transaction_type": []
            }
        },
        "TestQueue.test_enqueue_l1_not_invocation_is_successful": {
            "name": "test_enqueue_l1_not_invocation_is_successful",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis": [],
                "mock_get_transaction_type": []
            }
        },
        "TestQueue.test_enqueue_l1_raises_runtime_with_bad_redis_call": {
            "name": "test_enqueue_l1_raises_runtime_with_bad_redis_call",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis": [],
                "mock_get_transaction_type": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestQueue.test_enqueue_l1_with_active_contract_invocation_attempt_is_successful": {
            "name": "test_enqueue_l1_with_active_contract_invocation_attempt_is_successful",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis": [],
                "mock_get_transaction_type": [
                    "typing.Callable[..., None]",
                    "str",
                    "dict[, ]"
                ],
                "mock_get_contract": []
            }
        },
        "TestQueue.test_enqueue_l1_with_inactive_contract_invocation_attempt_is_successful": {
            "name": "test_enqueue_l1_with_inactive_contract_invocation_attempt_is_successful",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis": [],
                "mock_get_transaction_type": [
                    "typing.Callable[..., None]",
                    "str",
                    "dict[, ]"
                ],
                "mock_get_contract": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/segwit_addr.py": {
        "bech32_polymod": {
            "name": "bech32_polymod",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {
                "values": [
                    "tuple[typing.Union[str,int]]",
                    "list[]"
                ]
            }
        },
        "bech32_hrp_expand": {
            "name": "bech32_hrp_expand",
            "location": 45,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "hrp": [
                    "str"
                ]
            }
        },
        "bech32_verify_checksum": {
            "name": "bech32_verify_checksum",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "hrp": [
                    "str",
                    "list[int]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bytes",
                    "int"
                ],
                "data": [
                    "str",
                    "list[int]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bytes",
                    "int"
                ]
            }
        },
        "bech32_create_checksum": {
            "name": "bech32_create_checksum",
            "location": 55,
            "return": [
                "list[]"
            ],
            "arguments": {
                "hrp": [
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ],
                "data": [
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "bech32_encode": {
            "name": "bech32_encode",
            "location": 62,
            "return": [],
            "arguments": {
                "hrp": [
                    "tuple[typing.Union[int,slice,int,slice]]"
                ],
                "data": []
            }
        },
        "bech32_decode": {
            "name": "bech32_decode",
            "location": 68,
            "return": [
                "tuple[None]",
                "tuple[int]"
            ],
            "arguments": {
                "bech": []
            }
        },
        "convertbits": {
            "name": "convertbits",
            "location": 85,
            "return": [
                "None",
                "list[int]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "dict[, ]"
                ],
                "frombits": [
                    "int"
                ],
                "tobits": [
                    "int"
                ],
                "pad": [
                    "bool"
                ]
            }
        },
        "encode": {
            "name": "encode",
            "location": 108,
            "return": [],
            "arguments": {
                "hrp": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "witprog": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "decode_address": {
            "name": "decode_address",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "address": [
                    "str",
                    "float",
                    "bytes",
                    "dict[, ]",
                    "typing.IO"
                ]
            }
        },
        "address_from_public_key": {
            "name": "address_from_public_key",
            "location": 122,
            "return": [],
            "arguments": {
                "public_key": [
                    "str",
                    "int",
                    "bytes"
                ],
                "hrp": [
                    "typing.Text"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/types.py": {},
    "dragonchain-master/dragonchain/lib/__init__.py": {},
    "dragonchain-master/dragonchain/lib/dao/api_key_dao.py": {
        "save_api_key": {
            "name": "save_api_key",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "api_key": []
            }
        },
        "get_api_key": {
            "name": "get_api_key",
            "location": 37,
            "return": [],
            "arguments": {
                "key_id": [
                    "str",
                    "dict[int, int]"
                ],
                "interchain": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "list_api_keys": {
            "name": "list_api_keys",
            "location": 52,
            "return": [
                "list[]"
            ],
            "arguments": {
                "include_interchain": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "delete_api_key": {
            "name": "delete_api_key",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "key_id": [
                    "str"
                ],
                "interchain": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "perform_api_key_migration_v1_if_necessary": {
            "name": "perform_api_key_migration_v1_if_necessary",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dragonchain-master/dragonchain/lib/dao/api_key_dao_utest.py": {
        "TestApiKeyDAO.test_list_api_keys_removes_interchain_keys": {
            "name": "test_list_api_keys_removes_interchain_keys",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_list_objects": [],
                "mock_get_object": []
            }
        },
        "TestApiKeyDAO.test_list_api_keys_include_interchain_keys": {
            "name": "test_list_api_keys_include_interchain_keys",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_list_objects": [],
                "mock_get_object": []
            }
        },
        "TestApiKeyDAO.test_save_api_key_calls_storage_correctly": {
            "name": "test_save_api_key_calls_storage_correctly",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_save": []
            }
        },
        "TestApiKeyDAO.test_get_api_key_gets_from_storage_correctly": {
            "name": "test_get_api_key_gets_from_storage_correctly",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_object": []
            }
        },
        "TestApiKeyDAO.test_get_api_key_raises_error_when_mismatching_interchain": {
            "name": "test_get_api_key_raises_error_when_mismatching_interchain",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_object": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestApiKeyDAO.test_get_api_key_raises_not_found_when_slash_in_key_id": {
            "name": "test_get_api_key_raises_not_found_when_slash_in_key_id",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_object": []
            }
        },
        "TestApiKeyDAO.test_delete_api_key_deletes_from_storage_correctly": {
            "name": "test_delete_api_key_deletes_from_storage_correctly",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_delete": []
            }
        },
        "TestApiKeyDAO.test_delete_api_key_throws_error_if_deleting_interchain_key_when_not_intended": {
            "name": "test_delete_api_key_throws_error_if_deleting_interchain_key_when_not_intended",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyDAO.test_perform_api_key_migration_doesnt_do_anything_when_already_migrated": {
            "name": "test_perform_api_key_migration_doesnt_do_anything_when_already_migrated",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": [],
                "mock_list": []
            }
        },
        "TestApiKeyDAO.test_perform_api_key_migration_migrates_regular_keys": {
            "name": "test_perform_api_key_migration_migrates_regular_keys",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": [],
                "mock_list": [],
                "mock_put": [],
                "mock_get_object": [],
                "mock_save_key": [],
                "mock_new_from_legacy": []
            }
        },
        "TestApiKeyDAO.test_perform_api_key_migration_migrates_interchain_keys": {
            "name": "test_perform_api_key_migration_migrates_interchain_keys",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": [],
                "mock_list": [],
                "mock_put": [],
                "mock_get_object": [],
                "mock_save_key": [],
                "mock_new_from_legacy": []
            }
        },
        "TestApiKeyDAO.test_perform_api_key_migration_saves_migration_marker_when_complete": {
            "name": "test_perform_api_key_migration_saves_migration_marker_when_complete",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_storage_get": [],
                "mock_storage_list": [],
                "mock_storage_put": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dao/block_dao.py": {
        "get_verifications_for_l1_block": {
            "name": "get_verifications_for_l1_block",
            "location": 40,
            "return": [
                "list[]"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "int",
                    "typing.Mapping",
                    "None",
                    "bytes"
                ],
                "level": [
                    "str",
                    "int",
                    "typing.Mapping",
                    "None",
                    "bytes"
                ]
            }
        },
        "get_broadcast_dto": {
            "name": "get_broadcast_dto",
            "location": 56,
            "return": [],
            "arguments": {
                "higher_level": [
                    "int"
                ],
                "block_id": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "get_last_block_proof": {
            "name": "get_last_block_proof",
            "location": 84,
            "return": [
                "dict[, ]"
            ],
            "arguments": {}
        },
        "insert_block": {
            "name": "insert_block",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "block": []
            }
        },
        "insert_l5_verification": {
            "name": "insert_l5_verification",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "storage_location": [
                    "str"
                ],
                "block": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dao/interchain_dao.py": {
        "save_interchain_client": {
            "name": "save_interchain_client",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "interchain_client": []
            }
        },
        "does_interchain_exist": {
            "name": "does_interchain_exist",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "blockchain": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_interchain_client": {
            "name": "get_interchain_client",
            "location": 53,
            "return": [],
            "arguments": {
                "blockchain": [
                    "str",
                    "int",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "str",
                    "list[]"
                ]
            }
        },
        "list_interchain_clients": {
            "name": "list_interchain_clients",
            "location": 71,
            "return": [
                "list[]"
            ],
            "arguments": {
                "blockchain": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "set_default_interchain_client": {
            "name": "set_default_interchain_client",
            "location": 91,
            "return": [
                "typing.Generator[typing.Union[typing.Any,None,None]]"
            ],
            "arguments": {
                "blockchain": [
                    "str",
                    "typing.Sequence[str]",
                    "None"
                ],
                "name": [
                    "str",
                    "typing.Sequence[str]",
                    "None"
                ]
            }
        },
        "get_default_interchain_client": {
            "name": "get_default_interchain_client",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "delete_interchain_client": {
            "name": "delete_interchain_client",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "blockchain": [
                    "str",
                    "int",
                    "collections.abc.Awaitable[]"
                ],
                "name": [
                    "str",
                    "int",
                    "collections.abc.Awaitable[]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dao/interchain_dao_utest.py": {
        "TestTransactionTypeDAO.test_save_interchain_client_calls_correct_functions": {
            "name": "test_save_interchain_client_calls_correct_functions",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_save": []
            }
        },
        "TestTransactionTypeDAO.test_does_interchain_exist_returns_true": {
            "name": "test_does_interchain_exist_returns_true",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_exist": []
            }
        },
        "TestTransactionTypeDAO.test_does_interchain_exist_returns_false": {
            "name": "test_does_interchain_exist_returns_false",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_exist": []
            }
        },
        "TestTransactionTypeDAO.test_does_interchain_exist_returns_false_with_bad_blockchain": {
            "name": "test_does_interchain_exist_returns_false_with_bad_blockchain",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionTypeDAO.test_get_interchain_client_gets_from_storage": {
            "name": "test_get_interchain_client_gets_from_storage",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_btc": [],
                "mock_eth": [],
                "mock_storage": []
            }
        },
        "TestTransactionTypeDAO.test_get_interchain_client_throws_with_unknown_network": {
            "name": "test_get_interchain_client_throws_with_unknown_network",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionTypeDAO.test_list_interchain_client_bitcoin_calls_correct_functions": {
            "name": "test_list_interchain_client_bitcoin_calls_correct_functions",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_btc": [],
                "mock_get": [],
                "mock_list": []
            }
        },
        "TestTransactionTypeDAO.test_list_interchain_client_ethereum_calls_correct_functions": {
            "name": "test_list_interchain_client_ethereum_calls_correct_functions",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_eth": [],
                "mock_get": [],
                "mock_list": []
            }
        },
        "TestTransactionTypeDAO.test_list_interchain_throws_with_unknown_network": {
            "name": "test_list_interchain_throws_with_unknown_network",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionTypeDAO.test_set_default_interchain_calls_storage": {
            "name": "test_set_default_interchain_calls_storage",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_client": [],
                "mock_put_object": []
            }
        },
        "TestTransactionTypeDAO.test_get_default_client_gets_from_storage": {
            "name": "test_get_default_client_gets_from_storage",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_storage": [],
                "mock_get_interchain_client": []
            }
        },
        "TestTransactionTypeDAO.test_get_default_client_raises_with_unkown_version": {
            "name": "test_get_default_client_raises_with_unkown_version",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_storage": []
            }
        },
        "TestTransactionTypeDAO.test_delete_interchain": {
            "name": "test_delete_interchain",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_delete": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dao/smart_contract_dao.py": {
        "get_contract_id_by_txn_type": {
            "name": "get_contract_id_by_txn_type",
            "location": 33,
            "return": [],
            "arguments": {
                "txn_type": [
                    "str"
                ]
            }
        },
        "get_contract_by_txn_type": {
            "name": "get_contract_by_txn_type",
            "location": 42,
            "return": [],
            "arguments": {
                "txn_type": [
                    "str",
                    "None"
                ]
            }
        },
        "list_all_contract_ids": {
            "name": "list_all_contract_ids",
            "location": 47,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "get_serial_contracts": {
            "name": "get_serial_contracts",
            "location": 55,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "remove_bad_contracts": {
            "name": "remove_bad_contracts",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add_smart_contract_index": {
            "name": "add_smart_contract_index",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "contract": [
                    "float",
                    "int",
                    "None"
                ]
            }
        },
        "remove_smart_contract_index": {
            "name": "remove_smart_contract_index",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "contract_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_contract_by_id": {
            "name": "get_contract_by_id",
            "location": 89,
            "return": [],
            "arguments": {
                "contract_id": [
                    "str",
                    "int"
                ]
            }
        },
        "contract_does_exist": {
            "name": "contract_does_exist",
            "location": 94,
            "return": [],
            "arguments": {
                "contract_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_contract_logs": {
            "name": "get_contract_logs",
            "location": 99,
            "return": [],
            "arguments": {
                "contract_id": [
                    "int",
                    "None",
                    "str"
                ],
                "since": [
                    "int",
                    "None",
                    "str"
                ],
                "tail": [
                    "int",
                    "None",
                    "str"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dao/transaction_dao.py": {
        "ledger_contract_action": {
            "name": "ledger_contract_action",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "action": [
                    "str",
                    "typing.Mapping",
                    "tuple[typing.Type]",
                    "int"
                ],
                "txn_type": [
                    "str",
                    "typing.Mapping",
                    "tuple[typing.Type]",
                    "int"
                ],
                "entrypoint": [
                    "str",
                    "typing.Mapping",
                    "tuple[typing.Type]",
                    "int"
                ],
                "image_digest": [
                    "str",
                    "typing.Mapping",
                    "tuple[typing.Type]",
                    "int"
                ]
            }
        },
        "store_full_txns": {
            "name": "store_full_txns",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "block_model": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dao/transaction_dao_utest.py": {
        "TestStoreFullTxns.test_store_full_txns_calls_redis_a_lot": {
            "name": "test_store_full_txns_calls_redis_a_lot",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_index_many": [],
                "mock_put": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dao/transaction_type_dao.py": {
        "get_registered_transaction_type": {
            "name": "get_registered_transaction_type",
            "location": 37,
            "return": [],
            "arguments": {
                "transaction_type": [
                    "str",
                    "int"
                ]
            }
        },
        "get_registered_transaction_types_or_default": {
            "name": "get_registered_transaction_types_or_default",
            "location": 47,
            "return": [
                "dict[typing.Text, TransactionTypeModel]"
            ],
            "arguments": {
                "transaction_types": [
                    "str"
                ]
            }
        },
        "list_registered_transaction_types": {
            "name": "list_registered_transaction_types",
            "location": 66,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "remove_existing_transaction_type": {
            "name": "remove_existing_transaction_type",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "transaction_type": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "register_smart_contract_transaction_type": {
            "name": "register_smart_contract_transaction_type",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "sc_model": [
                    "list[\"custom_index\"]",
                    "None"
                ],
                "custom_indexes": [
                    "list[\"custom_index\"]",
                    "None"
                ]
            }
        },
        "activate_transaction_types_if_necessary": {
            "name": "activate_transaction_types_if_necessary",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "create_new_transaction_type": {
            "name": "create_new_transaction_type",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "txn_type_model": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dao/transaction_type_dao_utest.py": {
        "TestTransactionTypeDAO.test_module_has_correct_folder_correctly": {
            "name": "test_module_has_correct_folder_correctly",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionTypeDAO.test_get_registered_transaction_type_succeeds": {
            "name": "test_get_registered_transaction_type_succeeds",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage_get_mock": []
            }
        },
        "TestTransactionTypeDAO.test_get_registered_transactions_raises_not_found": {
            "name": "test_get_registered_transactions_raises_not_found",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage_get_mock": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]",
                    "typing.Callable[[], int]"
                ]
            }
        },
        "TestTransactionTypeDAO.test_create_registered_txn_type_succeeds": {
            "name": "test_create_registered_txn_type_succeeds",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage_put_mock": [],
                "rsearch_create_mock": [],
                "mock_lpush": []
            }
        },
        "TestTransactionTypeDAO.test_delete_registered_txn_type_succeeds": {
            "name": "test_delete_registered_txn_type_succeeds",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage_delete_mock": [],
                "rsearch_delete_mock": []
            }
        },
        "TestTransactionTypeDAO.test_activate_transaction_types_if_necessary": {
            "name": "test_activate_transaction_types_if_necessary",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "store_mock": [],
                "redis_mock": [],
                "mock_get_txn_type": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dao/__init__.py": {},
    "dragonchain-master/dragonchain/lib/database/redis.py": {
        "_set_redis_client_if_necessary": {
            "name": "_set_redis_client_if_necessary",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_set_redis_client_lru_if_necessary": {
            "name": "_set_redis_client_lru_if_necessary",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_decode_response": {
            "name": "_decode_response",
            "location": 58,
            "return": [],
            "arguments": {
                "response": [],
                "decode": [
                    "str"
                ]
            }
        },
        "_decode_dict_response": {
            "name": "_decode_dict_response",
            "location": 64,
            "return": [
                "dict[typing.Union[str,int,dict[str, str],bytes], typing.Union[bytes,str]]",
                "dict[str, typing.Any]",
                "dict[bytes, bytes]",
                "dict[, ]",
                "dict[str, float]"
            ],
            "arguments": {
                "response": [
                    "dict[str, typing.Any]",
                    "dict[bytes, bytes]",
                    "dict[, ]",
                    "dict[str, float]"
                ],
                "decode": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "float"
                ]
            }
        },
        "_decode_list_response": {
            "name": "_decode_list_response",
            "location": 77,
            "return": [
                "list[typing.Union[dict[, ],bytes,int,list[bytes],str]]",
                "list[]"
            ],
            "arguments": {
                "response": [
                    "list[]"
                ],
                "decode": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "list[tuple[typing.Union[str,str,int]]]",
                    "bool"
                ]
            }
        },
        "_decode_tuple_response": {
            "name": "_decode_tuple_response",
            "location": 88,
            "return": [
                "tuple[str]",
                "dict[, ]",
                "list[str]"
            ],
            "arguments": {
                "response": [
                    "dict[, ]",
                    "list[str]"
                ],
                "decode": [
                    "dict[, ]",
                    "bool",
                    "str"
                ]
            }
        },
        "_decode_set_response": {
            "name": "_decode_set_response",
            "location": 95,
            "return": [
                "set[typing.Union[str,bytes,int]]",
                "list[]"
            ],
            "arguments": {
                "response": [
                    "list[]"
                ],
                "decode": [
                    "dict[, ]",
                    "str",
                    "list[]",
                    "dict[str, typing.Any]",
                    "bool",
                    "list[tuple[typing.Union[str,str,int]]]"
                ]
            }
        },
        "_initialize_redis": {
            "name": "_initialize_redis",
            "location": 106,
            "return": [],
            "arguments": {
                "host": [
                    "int",
                    "str",
                    "float"
                ],
                "port": [
                    "int",
                    "str",
                    "float"
                ],
                "wait_time": [
                    "int"
                ]
            }
        },
        "_cache_key": {
            "name": "_cache_key",
            "location": 225,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "key": [
                    "str",
                    "typing.Sequence[str]",
                    "list[str]",
                    "None"
                ],
                "service_name": [
                    "str",
                    "typing.Sequence[str]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "cache_put": {
            "name": "cache_put",
            "location": 229,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "list[dict[, ]]",
                    "None",
                    "float",
                    "int",
                    "list[float]",
                    "str",
                    "tuple[()]"
                ],
                "value": [
                    "list[dict[, ]]",
                    "None",
                    "float",
                    "int",
                    "list[float]",
                    "str",
                    "tuple[()]"
                ],
                "cache_expire": [
                    "None",
                    "list[dict[, ]]",
                    "float",
                    "int",
                    "list[float]",
                    "str",
                    "tuple[()]"
                ],
                "service_name": [
                    "typing.Text"
                ]
            }
        },
        "cache_get": {
            "name": "cache_get",
            "location": 235,
            "return": [],
            "arguments": {
                "key": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "service_name": [
                    "typing.Text"
                ]
            }
        },
        "cache_delete": {
            "name": "cache_delete",
            "location": 240,
            "return": [],
            "arguments": {
                "key": [
                    "str",
                    "list[str]"
                ],
                "service_name": [
                    "typing.Text"
                ]
            }
        },
        "cache_flush": {
            "name": "cache_flush",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "hdel_sync": {
            "name": "hdel_sync",
            "location": 251,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "lpush_sync": {
            "name": "lpush_sync",
            "location": 256,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "sadd_sync": {
            "name": "sadd_sync",
            "location": 261,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "sismember_sync": {
            "name": "sismember_sync",
            "location": 266,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "rpush_sync": {
            "name": "rpush_sync",
            "location": 271,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "delete_sync": {
            "name": "delete_sync",
            "location": 276,
            "return": [],
            "arguments": {}
        },
        "hset_sync": {
            "name": "hset_sync",
            "location": 281,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "brpop_sync": {
            "name": "brpop_sync",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "keys": [
                    "str",
                    "int"
                ],
                "timeout": [
                    "int"
                ],
                "decode": [
                    "bool"
                ]
            }
        },
        "brpoplpush_sync": {
            "name": "brpoplpush_sync",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "pop_key": [
                    "str"
                ],
                "push_key": [
                    "str"
                ],
                "timeout": [
                    "int"
                ],
                "decode": [
                    "bool"
                ]
            }
        },
        "get_sync": {
            "name": "get_sync",
            "location": 319,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "decode": [
                    "bool"
                ]
            }
        },
        "lindex_sync": {
            "name": "lindex_sync",
            "location": 325,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ],
                "index": [
                    "str"
                ],
                "decode": [
                    "bool"
                ]
            }
        },
        "set_sync": {
            "name": "set_sync",
            "location": 331,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bytes"
                ],
                "ex": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "ltrim_sync": {
            "name": "ltrim_sync",
            "location": 336,
            "return": [],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "list[float]"
                ],
                "start": [
                    "str",
                    "int",
                    "list[float]"
                ],
                "end": [
                    "str",
                    "int",
                    "list[float]"
                ]
            }
        },
        "hget_sync": {
            "name": "hget_sync",
            "location": 341,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "key": [
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "decode": [
                    "bool"
                ]
            }
        },
        "smembers_sync": {
            "name": "smembers_sync",
            "location": 347,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "decode": [
                    "bool"
                ]
            }
        },
        "srem_sync": {
            "name": "srem_sync",
            "location": 353,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "lrange_sync": {
            "name": "lrange_sync",
            "location": 358,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "typing.Sequence[]",
                    "typing.Mapping"
                ],
                "start": [
                    "str",
                    "None",
                    "typing.Sequence[]",
                    "typing.Mapping"
                ],
                "end": [
                    "str",
                    "None",
                    "typing.Sequence[]",
                    "typing.Mapping"
                ],
                "decode": [
                    "bool"
                ]
            }
        },
        "pipeline_sync": {
            "name": "pipeline_sync",
            "location": 364,
            "return": [],
            "arguments": {
                "transaction": [
                    "bool"
                ]
            }
        },
        "llen_sync": {
            "name": "llen_sync",
            "location": 369,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "rpoplpush_sync": {
            "name": "rpoplpush_sync",
            "location": 374,
            "return": [],
            "arguments": {
                "src": [
                    "str",
                    "bytes"
                ],
                "dst": [
                    "str",
                    "bytes"
                ],
                "decode": [
                    "bool"
                ]
            }
        },
        "lpop_sync": {
            "name": "lpop_sync",
            "location": 380,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "decode": [
                    "bool"
                ]
            }
        },
        "hgetall_sync": {
            "name": "hgetall_sync",
            "location": 386,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "decode": [
                    "bool"
                ]
            }
        },
        "hexists_sync": {
            "name": "hexists_sync",
            "location": 392,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "zadd_sync": {
            "name": "zadd_sync",
            "location": 397,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "None"
                ],
                "mapping": [
                    "str",
                    "bool",
                    "None"
                ],
                "nx": [
                    "bool"
                ],
                "xx": [
                    "bool"
                ],
                "ch": [
                    "bool"
                ],
                "incr": [
                    "bool"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/database/redisearch.py": {
        "_get_redisearch_index_client": {
            "name": "_get_redisearch_index_client",
            "location": 104,
            "return": [],
            "arguments": {
                "index": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "_get_custom_field_from_input": {
            "name": "_get_custom_field_from_input",
            "location": 119,
            "return": [],
            "arguments": {
                "custom_index_input": []
            }
        },
        "get_escaped_redisearch_string": {
            "name": "get_escaped_redisearch_string",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "unescaped_string": [
                    "str"
                ]
            }
        },
        "create_transaction_index": {
            "name": "create_transaction_index",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "str",
                    "None",
                    "bool"
                ],
                "custom_indexes": [
                    "list[tuple[typing.Union[str,str,str,str]]]",
                    "str"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "delete_index": {
            "name": "delete_index",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "str"
                ]
            }
        },
        "search": {
            "name": "search",
            "location": 190,
            "return": [],
            "arguments": {
                "index": [
                    "str"
                ],
                "query_str": [
                    "str",
                    "None",
                    "bool",
                    "dict[str, str]"
                ],
                "only_id": [
                    "None",
                    "str",
                    "int"
                ],
                "verbatim": [
                    "None",
                    "str",
                    "int"
                ],
                "offset": [
                    "None",
                    "str",
                    "int",
                    "list[I]"
                ],
                "limit": [
                    "None",
                    "str",
                    "int",
                    "list[I]"
                ],
                "sort_by": [
                    "None",
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ],
                "sort_asc": [
                    "None",
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "list[str]"
                ]
            }
        },
        "get_document": {
            "name": "get_document",
            "location": 232,
            "return": [],
            "arguments": {
                "index": [
                    "str",
                    "None"
                ],
                "doc_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_document_count": {
            "name": "get_document_count",
            "location": 247,
            "return": [
                "int"
            ],
            "arguments": {
                "index": [
                    "str",
                    "None"
                ]
            }
        },
        "put_document": {
            "name": "put_document",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "doc_name": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "fields": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "upsert": [
                    "bool"
                ],
                "partial_update": [
                    "bool"
                ]
            }
        },
        "put_many_documents": {
            "name": "put_many_documents",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "str"
                ],
                "documents": [
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, dict[str, float]]",
                    "dict[, ]"
                ],
                "upsert": [
                    "bool"
                ],
                "partial_update": [
                    "bool"
                ]
            }
        },
        "delete_document": {
            "name": "delete_document",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "str",
                    "None"
                ],
                "doc_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "generate_indexes_if_necessary": {
            "name": "generate_indexes_if_necessary",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_generate_l5_verification_indexes": {
            "name": "_generate_l5_verification_indexes",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_generate_block_indexes": {
            "name": "_generate_block_indexes",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_generate_smart_contract_indexes": {
            "name": "_generate_smart_contract_indexes",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_generate_transaction_indexes": {
            "name": "_generate_transaction_indexes",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dragonchain-master/dragonchain/lib/database/redisearch_utest.py": {
        "TestRedisearch.test_get_custom_field_from_input_tag_with_opts": {
            "name": "test_get_custom_field_from_input_tag_with_opts",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_get_custom_field_from_input_text_with_opts": {
            "name": "test_get_custom_field_from_input_text_with_opts",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_get_custom_field_from_input_number_with_opts": {
            "name": "test_get_custom_field_from_input_number_with_opts",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_get_custom_field_from_input_throws_runtimeerror": {
            "name": "test_get_custom_field_from_input_throws_runtimeerror",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_get_escaped_redisearch_string": {
            "name": "test_get_escaped_redisearch_string",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_create_transaction_index": {
            "name": "test_create_transaction_index",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_delete_index": []
            }
        },
        "TestRedisearch.test_delete_index_exists": {
            "name": "test_delete_index_exists",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_delete_index_doesnt_exist": {
            "name": "test_delete_index_doesnt_exist",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_search_all_options": {
            "name": "test_search_all_options",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_query": []
            }
        },
        "TestRedisearch.test_get_document": {
            "name": "test_get_document",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_get_document_count": {
            "name": "test_get_document_count",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_put_document_success": {
            "name": "test_put_document_success",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_put_document_upsert": {
            "name": "test_put_document_upsert",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_put_document_partial_update": {
            "name": "test_put_document_partial_update",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_put_document_mutually_exclusive_options": {
            "name": "test_put_document_mutually_exclusive_options",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_put_many_documents": {
            "name": "test_put_many_documents",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_put_many_documents_respects_params": {
            "name": "test_put_many_documents_respects_params",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_put_many_documents_mutually_exclusive_options": {
            "name": "test_put_many_documents_mutually_exclusive_options",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_delete_document": {
            "name": "test_delete_document",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisearch.test_generate_indexes_if_necessary": {
            "name": "test_generate_indexes_if_necessary",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_put_document": [],
                "mock_list": [],
                "mock_get_json": [],
                "mock_new_l1": [],
                "mock_new_txn_type": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/database/redis_utest.py": {
        "TestRedisAccess.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_set_redis_client_if_necessary": {
            "name": "test_set_redis_client_if_necessary",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis": []
            }
        },
        "TestRedisAccess.test_set_redis_client_lru_if_necessary": {
            "name": "test_set_redis_client_lru_if_necessary",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redis": []
            }
        },
        "TestRedisAccess.test_cache_put_with_cache_expire": {
            "name": "test_cache_put_with_cache_expire",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_cache_put_no_cache_expire": {
            "name": "test_cache_put_no_cache_expire",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_cache_get": {
            "name": "test_cache_get",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_cache_delete": {
            "name": "test_cache_delete",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_get_key": {
            "name": "test_get_key",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.testcache_flush": {
            "name": "testcache_flush",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_hdel": {
            "name": "test_hdel",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_lpush": {
            "name": "test_lpush",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_rpush": {
            "name": "test_rpush",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_delete": {
            "name": "test_delete",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_hset": {
            "name": "test_hset",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_brpop": {
            "name": "test_brpop",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_brpoplpush": {
            "name": "test_brpoplpush",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_get_sync": {
            "name": "test_get_sync",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_lindex": {
            "name": "test_lindex",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_set_sync": {
            "name": "test_set_sync",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_ltrim": {
            "name": "test_ltrim",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_hget": {
            "name": "test_hget",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_sadd": {
            "name": "test_sadd",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_sismember": {
            "name": "test_sismember",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_smembers": {
            "name": "test_smembers",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_srem": {
            "name": "test_srem",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_lrange": {
            "name": "test_lrange",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_pipeline": {
            "name": "test_pipeline",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_llen": {
            "name": "test_llen",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_rpoplpush": {
            "name": "test_rpoplpush",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_lpop": {
            "name": "test_lpop",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_hgetall": {
            "name": "test_hgetall",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_hexists": {
            "name": "test_hexists",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisAccess.test_zadd": {
            "name": "test_zadd",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/database/__init__.py": {},
    "dragonchain-master/dragonchain/lib/dto/api_key_model.py": {
        "_check_default_endpoint_permission": {
            "name": "_check_default_endpoint_permission",
            "location": 39,
            "return": [],
            "arguments": {
                "api_name_permissions": [
                    "dict[str, typing.Any]"
                ],
                "extra_data": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_check_create_transaction_permission": {
            "name": "_check_create_transaction_permission",
            "location": 50,
            "return": [
                "bool",
                "str",
                "dict[str, typing.Any]",
                "dict[str, list[str]]",
                "dict[str, str]",
                "dict[, ]",
                "list[str]",
                "dict[str, bool]",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]"
            ],
            "arguments": {
                "api_name_permissions": [
                    "dict[, ]",
                    "dict[str, str]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "extra_data": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "gen_auth_key": {
            "name": "gen_auth_key",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "new_root_key": {
            "name": "new_root_key",
            "location": 128,
            "return": [
                "APIKeyModel"
            ],
            "arguments": {
                "key_id": [
                    "str",
                    "int",
                    "float"
                ],
                "key": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "new_from_scratch": {
            "name": "new_from_scratch",
            "location": 147,
            "return": [
                "APIKeyModel"
            ],
            "arguments": {
                "smart_contract": [
                    "bool"
                ],
                "nickname": [
                    "typing.Text"
                ],
                "interchain_dcid": [
                    "typing.Text"
                ]
            }
        },
        "new_from_at_rest": {
            "name": "new_from_at_rest",
            "location": 179,
            "return": [
                "APIKeyModel"
            ],
            "arguments": {
                "api_key_data": []
            }
        },
        "new_from_legacy": {
            "name": "new_from_legacy",
            "location": 195,
            "return": [
                "APIKeyModel"
            ],
            "arguments": {
                "api_key_data": [],
                "interchain_dcid": [
                    "str",
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "_process_api_resource": {
            "name": "_process_api_resource",
            "location": 303,
            "return": [],
            "arguments": {
                "permission_resource": [
                    "dict[str, typing.Any]"
                ],
                "api_operation": [
                    "str",
                    "list[]",
                    "bytes"
                ]
            }
        },
        "APIKeyModel.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_id": [
                    "str"
                ],
                "key": [
                    "str",
                    "dict[, ]",
                    "None",
                    "dict[typing.Union[str,None], str]",
                    "list[str]",
                    "bool"
                ],
                "registration_time": [
                    "int",
                    "float",
                    "None",
                    "str"
                ],
                "root": [
                    "str",
                    "None",
                    "list[typing.Any]",
                    "bool"
                ],
                "nickname": [
                    "str",
                    "None",
                    "list[typing.Any]",
                    "bool"
                ],
                "interchain": [
                    "str",
                    "None",
                    "list[typing.Any]",
                    "bool"
                ],
                "permissions_document": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "APIKeyModel.is_key_allowed": {
            "name": "is_key_allowed",
            "location": 229,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "api_resource": [
                    "str",
                    "bool"
                ],
                "api_operation": [
                    "str",
                    "bool"
                ],
                "api_name": [
                    "str",
                    "bool"
                ],
                "interchain": [
                    "bool",
                    "list[list[str]]",
                    "str",
                    "list[str]",
                    "None"
                ],
                "extra_data": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "APIKeyModel.is_key_allowed_v1": {
            "name": "is_key_allowed_v1",
            "location": 256,
            "return": [
                "bool",
                "str",
                "typing.Sequence[str]",
                "None"
            ],
            "arguments": {
                "self": [],
                "api_resource": [
                    "str",
                    "bytes",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "api_operation": [
                    "int",
                    "None",
                    "typing.Sequence[str]",
                    "str",
                    "bytes"
                ],
                "api_name": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "extra_data": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "APIKeyModel.export_as_at_rest": {
            "name": "export_as_at_rest",
            "location": 290,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/api_key_model_utest.py": {
        "create_generic_api_key_model": {
            "name": "create_generic_api_key_model",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "TestApiKeyModel.test_gen_auth_key": {
            "name": "test_gen_auth_key",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_new_from_legacy_parses_old_normal_key_dto": {
            "name": "test_new_from_legacy_parses_old_normal_key_dto",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_new_from_legacy_parses_old_root_key_dto": {
            "name": "test_new_from_legacy_parses_old_root_key_dto",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_new_from_legacy_parses_old_interchain_key_dto": {
            "name": "test_new_from_legacy_parses_old_interchain_key_dto",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_new_from_at_rest_parses_version_1_dto": {
            "name": "test_new_from_at_rest_parses_version_1_dto",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_new_from_at_rest_throws_with_bad_version": {
            "name": "test_new_from_at_rest_throws_with_bad_version",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_new_root_key_sets_root_and_keys": {
            "name": "test_new_root_key_sets_root_and_keys",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_new_from_scratch_generates_api_key_model_and_uses_default_permissions": {
            "name": "test_new_from_scratch_generates_api_key_model_and_uses_default_permissions",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_new_from_scratch_generates_sc_id_if_contract": {
            "name": "test_new_from_scratch_generates_sc_id_if_contract",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_new_from_scratch_uses_interchain_dcid_for_key_id": {
            "name": "test_new_from_scratch_uses_interchain_dcid_for_key_id",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_new_from_scratch_raises_if_dcid_and_contract": {
            "name": "test_new_from_scratch_raises_if_dcid_and_contract",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_export_as_at_rest_returns_good_dto": {
            "name": "test_export_as_at_rest_returns_good_dto",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_root_key_is_allowed": {
            "name": "test_root_key_is_allowed",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_key_allowed_v1": []
            }
        },
        "TestApiKeyModel.test_permissions_doc_v1_is_allowed_uses_is_allowed_v1": {
            "name": "test_permissions_doc_v1_is_allowed_uses_is_allowed_v1",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_key_allowed_v1": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "TestApiKeyModel.test_is_allowed_handles_interchain_keys": {
            "name": "test_is_allowed_handles_interchain_keys",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_bad_permission_document_version_raises": {
            "name": "test_bad_permission_document_version_raises",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_is_allowed_v1_raises_error_on_bad_api_name": {
            "name": "test_is_allowed_v1_raises_error_on_bad_api_name",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_is_allowed_v1_uses_default": {
            "name": "test_is_allowed_v1_uses_default",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_is_allowed_v1_global_crud_overrides_default": {
            "name": "test_is_allowed_v1_global_crud_overrides_default",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_is_allowed_v1_group_crud_overrides_global_crud": {
            "name": "test_is_allowed_v1_group_crud_overrides_global_crud",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_is_allowed_v1_group_crud_ignored_when_no_matching_group_crud": {
            "name": "test_is_allowed_v1_group_crud_ignored_when_no_matching_group_crud",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_is_allowed_v1_specific_api_name_overrides_group_crud": {
            "name": "test_is_allowed_v1_specific_api_name_overrides_group_crud",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_is_allowed_v1_specific_group_ignored_when_no_matching_specific_group": {
            "name": "test_is_allowed_v1_specific_group_ignored_when_no_matching_specific_group",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_is_allowed_v1_raises_with_bad_action": {
            "name": "test_is_allowed_v1_raises_with_bad_action",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_is_allowed_v1_crud_reads_correct_fields": {
            "name": "test_is_allowed_v1_crud_reads_correct_fields",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_check_create_transaction_permission_returns_true_with_no_extra_data": {
            "name": "test_check_create_transaction_permission_returns_true_with_no_extra_data",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_check_create_transaction_works_with_allowed_value_and_provided_extra_data": {
            "name": "test_check_create_transaction_works_with_allowed_value_and_provided_extra_data",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyModel.test_check_create_transaction_defaults_if_no_allowed_set": {
            "name": "test_check_create_transaction_defaults_if_no_allowed_set",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/bnb.py": {
        "new_from_user_input": {
            "name": "new_from_user_input",
            "location": 48,
            "return": [
                "BinanceNetwork"
            ],
            "arguments": {
                "user_input": []
            }
        },
        "new_from_at_rest": {
            "name": "new_from_at_rest",
            "location": 120,
            "return": [
                "BinanceNetwork"
            ],
            "arguments": {
                "binance_network_at_rest": []
            }
        },
        "BinanceNetwork.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "typing.Sequence[typing.Any]",
                    "dict[str, str]",
                    "bool"
                ],
                "testnet": [
                    "bool",
                    "str",
                    "tuple[str]"
                ],
                "node_url": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "None"
                ],
                "rpc_port": [
                    "bool",
                    "str",
                    "None",
                    "float"
                ],
                "api_port": [
                    "bool",
                    "str",
                    "None",
                    "float"
                ],
                "b64_private_key": [
                    "str",
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "BinanceNetwork.ping": {
            "name": "ping",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinanceNetwork.is_transaction_confirmed": {
            "name": "is_transaction_confirmed",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "BinanceNetwork.check_balance": {
            "name": "check_balance",
            "location": 192,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "typing.Text"
                ]
            }
        },
        "BinanceNetwork.get_transaction_fee_estimate": {
            "name": "get_transaction_fee_estimate",
            "location": 215,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinanceNetwork.get_current_block": {
            "name": "get_current_block",
            "location": 230,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinanceNetwork.should_retry_broadcast": {
            "name": "should_retry_broadcast",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "last_sent_block": []
            }
        },
        "BinanceNetwork.get_network_string": {
            "name": "get_network_string",
            "location": 249,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinanceNetwork.get_private_key": {
            "name": "get_private_key",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinanceNetwork._fetch_account": {
            "name": "_fetch_account",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinanceNetwork._build_transaction_msg": {
            "name": "_build_transaction_msg",
            "location": 285,
            "return": [
                "dict[typing.Text, typing.Union[list[dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, list[dict[typing.Text, typing.Text]]]]]]],typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "raw_transaction": []
            }
        },
        "BinanceNetwork.sign_transaction": {
            "name": "sign_transaction",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "raw_transaction": [
                    "list[dict[, ]]",
                    "dict[, ]"
                ]
            }
        },
        "BinanceNetwork.publish_transaction": {
            "name": "publish_transaction",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "signed_transaction": [
                    "dict[, ]",
                    "dict[str, str]",
                    "None",
                    "str",
                    "BaseException"
                ]
            }
        },
        "BinanceNetwork._publish_l5_transaction": {
            "name": "_publish_l5_transaction",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "transaction_payload": [
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "BinanceNetwork._call_node_rpc": {
            "name": "_call_node_rpc",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "params": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "BinanceNetwork._call_node_api": {
            "name": "_call_node_api",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "BinanceNetwork.export_as_at_rest": {
            "name": "export_as_at_rest",
            "location": 401,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/bnb_utest.py": {
        "TestBinanceMethods.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.assertRaisesWithMessage": {
            "name": "assertRaisesWithMessage",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "bool",
                    "tuple[typing.Union[float,float]]",
                    "typing.Callable[, ]",
                    "None"
                ],
                "msg": [
                    "str",
                    "float",
                    "typing.Type"
                ],
                "func": [
                    "typing.Callable[, ]",
                    "set[str]"
                ]
            }
        },
        "TestBinanceMethods.test_new_from_at_rest_good_input_v1": {
            "name": "test_new_from_at_rest_good_input_v1",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_new_from_at_rest_bad_version": {
            "name": "test_new_from_at_rest_bad_version",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_new_from_user_input_throws_with_bad_version": {
            "name": "test_new_from_user_input_throws_with_bad_version",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_should_retry_broadcast_true": {
            "name": "test_should_retry_broadcast_true",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_should_retry_broadcast_false": {
            "name": "test_should_retry_broadcast_false",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_build_transaction_msg": {
            "name": "test_build_transaction_msg",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_build_transaction_msg_throws_with_bad_amount": {
            "name": "test_build_transaction_msg_throws_with_bad_amount",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_sign_transaction": {
            "name": "test_sign_transaction",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_encode": []
            }
        },
        "TestBinanceMethods.test_publish_l5_transaction": {
            "name": "test_publish_l5_transaction",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_get_current_block": {
            "name": "test_get_current_block",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_check_balance_success": {
            "name": "test_check_balance_success",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_check_balance_failure": {
            "name": "test_check_balance_failure",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_get_transaction_fee_estimate_success": {
            "name": "test_get_transaction_fee_estimate_success",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_get_transaction_fee_estimate_failure": {
            "name": "test_get_transaction_fee_estimate_failure",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_is_transaction_confirmed_final": {
            "name": "test_is_transaction_confirmed_final",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_is_transaction_confirmed_unconfirmed": {
            "name": "test_is_transaction_confirmed_unconfirmed",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_is_transaction_confirmed_error": {
            "name": "test_is_transaction_confirmed_error",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_export_as_at_rest": {
            "name": "test_export_as_at_rest",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_rpc_request_success": {
            "name": "test_rpc_request_success",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_post": []
            }
        },
        "TestBinanceMethods.test_api_request_success": {
            "name": "test_api_request_success",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "TestBinanceMethods.test_rpc_request_error": {
            "name": "test_rpc_request_error",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_requests": []
            }
        },
        "TestBinanceMethods.test_api_request_error": {
            "name": "test_api_request_error",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_requests": []
            }
        },
        "TestBinanceMethods.test_from_user_input_throws_with_bad_private_key": {
            "name": "test_from_user_input_throws_with_bad_private_key",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_from_user_input_works_with_no_provided_key": {
            "name": "test_from_user_input_works_with_no_provided_key",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ping": []
            }
        },
        "TestBinanceMethods.test_new_from_user_input_sets_good_keys": {
            "name": "test_new_from_user_input_sets_good_keys",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ping": []
            }
        },
        "TestBinanceMethods.test_new_from_user_input_throws_with_bad_keys": {
            "name": "test_new_from_user_input_throws_with_bad_keys",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_new_from_user_input_no_testnet_parameter": {
            "name": "test_new_from_user_input_no_testnet_parameter",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ping": []
            }
        },
        "TestBinanceMethods.test_new_from_user_input_no_ports": {
            "name": "test_new_from_user_input_no_ports",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_get_network_string": {
            "name": "test_get_network_string",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_get_private_key": {
            "name": "test_get_private_key",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_fetch_account_success": {
            "name": "test_fetch_account_success",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_fetch_account_failure": {
            "name": "test_fetch_account_failure",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_ping_success": {
            "name": "test_ping_success",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_ping_failure": {
            "name": "test_ping_failure",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinanceMethods.test_new_from_user_node_ping_fails": {
            "name": "test_new_from_user_node_ping_fails",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ping": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/btc.py": {
        "new_from_user_input": {
            "name": "new_from_user_input",
            "location": 43,
            "return": [
                "BitcoinNetwork"
            ],
            "arguments": {
                "user_input": []
            }
        },
        "new_from_at_rest": {
            "name": "new_from_at_rest",
            "location": 107,
            "return": [
                "BitcoinNetwork"
            ],
            "arguments": {
                "bitcoin_network_at_rest": []
            }
        },
        "btc_to_satoshi": {
            "name": "btc_to_satoshi",
            "location": 347,
            "return": [
                "int"
            ],
            "arguments": {
                "btc": []
            }
        },
        "BitcoinNetwork.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ],
                "rpc_address": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "testnet": [
                    "str",
                    "None",
                    "bool",
                    "list[typing.Any]"
                ],
                "b64_private_key": [
                    "bytes",
                    "str"
                ],
                "authorization": [
                    "None",
                    "str",
                    "bool",
                    "list[typing.Any]"
                ]
            }
        },
        "BitcoinNetwork.ping": {
            "name": "ping",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinNetwork.sign_transaction": {
            "name": "sign_transaction",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "raw_transaction": []
            }
        },
        "BitcoinNetwork.is_transaction_confirmed": {
            "name": "is_transaction_confirmed",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "str",
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "BitcoinNetwork.check_balance": {
            "name": "check_balance",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitcoinNetwork.get_transaction_fee_estimate": {
            "name": "get_transaction_fee_estimate",
            "location": 201,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "byte_count": []
            }
        },
        "BitcoinNetwork.get_current_block": {
            "name": "get_current_block",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitcoinNetwork.should_retry_broadcast": {
            "name": "should_retry_broadcast",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "last_sent_block": [
                    "int",
                    "dict[str, tuple[typing.Union[int,int]]]",
                    "None",
                    "float"
                ]
            }
        },
        "BitcoinNetwork.register_address": {
            "name": "register_address",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scan": [
                    "bool"
                ]
            }
        },
        "BitcoinNetwork.get_network_string": {
            "name": "get_network_string",
            "location": 243,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinNetwork.get_private_key": {
            "name": "get_private_key",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BitcoinNetwork.publish_transaction": {
            "name": "publish_transaction",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "signed_transaction": [
                    "str",
                    "Exception",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BitcoinNetwork._publish_l5_transaction": {
            "name": "_publish_l5_transaction",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "transaction_payload": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "Exception"
                ]
            }
        },
        "BitcoinNetwork._calculate_transaction_fee": {
            "name": "_calculate_transaction_fee",
            "location": 280,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinNetwork._get_utxos": {
            "name": "_get_utxos",
            "location": 292,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BitcoinNetwork._call": {
            "name": "_call",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BitcoinNetwork.export_as_at_rest": {
            "name": "export_as_at_rest",
            "location": 331,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/btc_utest.py": {
        "TestBitcoinMethods.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_new_from_at_rest_good_input_v1": {
            "name": "test_new_from_at_rest_good_input_v1",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_new_from_at_rest_bad_version": {
            "name": "test_new_from_at_rest_bad_version",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_should_retry_broadcast_true": {
            "name": "test_should_retry_broadcast_true",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_should_retry_broadcast_false": {
            "name": "test_should_retry_broadcast_false",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_publish_creates_signs_and_sends": {
            "name": "test_publish_creates_signs_and_sends",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_sign_transaction": {
            "name": "test_sign_transaction",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_get_current_block_calls_rpc": {
            "name": "test_get_current_block_calls_rpc",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_check_balance": {
            "name": "test_check_balance",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_get_transaction_fee_estimate": {
            "name": "test_get_transaction_fee_estimate",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_btc_to_satoshi": {
            "name": "test_btc_to_satoshi",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_calculate_transaction_fee_rounds_up": {
            "name": "test_calculate_transaction_fee_rounds_up",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_calculate_transaction_fee": {
            "name": "test_calculate_transaction_fee",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_is_transaction_confirmed_final": {
            "name": "test_is_transaction_confirmed_final",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_is_transaction_confirmed_error": {
            "name": "test_is_transaction_confirmed_error",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_is_transaction_confirmed_pending": {
            "name": "test_is_transaction_confirmed_pending",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_register_address_raises": {
            "name": "test_register_address_raises",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_register_address_skips_already_registered": {
            "name": "test_register_address_skips_already_registered",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_export_as_at_rest": {
            "name": "test_export_as_at_rest",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_rpc_request_success": {
            "name": "test_rpc_request_success",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_post": []
            }
        },
        "TestBitcoinMethods.test_rpc_request_error": {
            "name": "test_rpc_request_error",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_post": []
            }
        },
        "TestBitcoinMethods.test_from_user_input_wif_defaults": {
            "name": "test_from_user_input_wif_defaults",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_register": [],
                "mock_ping": []
            }
        },
        "TestBitcoinMethods.test_from_user_input_wif_throws_with_mismatching_testnet": {
            "name": "test_from_user_input_wif_throws_with_mismatching_testnet",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_from_user_input_requires_testnet_with_b64_key": {
            "name": "test_from_user_input_requires_testnet_with_b64_key",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_from_user_input_works_with_no_provided_key": {
            "name": "test_from_user_input_works_with_no_provided_key",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_register": [],
                "mock_ping": []
            }
        },
        "TestBitcoinMethods.test_from_user_input_throws_bad_version": {
            "name": "test_from_user_input_throws_bad_version",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBitcoinMethods.test_from_user_input_throws_if_node_not_accessible": {
            "name": "test_from_user_input_throws_if_node_not_accessible",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_ping": []
            }
        },
        "TestBitcoinMethods.test_from_user_input_uses_provided_node_and_auth": {
            "name": "test_from_user_input_uses_provided_node_and_auth",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_register": [],
                "mock_ping": []
            }
        },
        "TestBitcoinMethods.test_from_user_input_scans_if_requested": {
            "name": "test_from_user_input_scans_if_requested",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_register": [],
                "mock_ping": []
            }
        },
        "TestBitcoinMethods.test_from_user_input_throws_with_bad_private_key": {
            "name": "test_from_user_input_throws_with_bad_private_key",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/eth.py": {
        "new_from_user_input": {
            "name": "new_from_user_input",
            "location": 46,
            "return": [
                "EthereumNetwork"
            ],
            "arguments": {
                "user_input": []
            }
        },
        "new_from_at_rest": {
            "name": "new_from_at_rest",
            "location": 109,
            "return": [
                "EthereumNetwork"
            ],
            "arguments": {
                "ethereum_network_at_rest": []
            }
        },
        "EthereumNetwork.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None"
                ],
                "rpc_address": [
                    "str",
                    "None"
                ],
                "chain_id": [
                    "str",
                    "int"
                ],
                "b64_private_key": [
                    "str",
                    "bytes",
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "EthereumNetwork.check_rpc_chain_id": {
            "name": "check_rpc_chain_id",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumNetwork.sign_transaction": {
            "name": "sign_transaction",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "raw_transaction": [
                    "typing.Mapping",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "EthereumNetwork.is_transaction_confirmed": {
            "name": "is_transaction_confirmed",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "str"
                ]
            }
        },
        "EthereumNetwork.check_balance": {
            "name": "check_balance",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthereumNetwork.get_transaction_fee_estimate": {
            "name": "get_transaction_fee_estimate",
            "location": 201,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "gas_limit": [
                    "int"
                ]
            }
        },
        "EthereumNetwork.get_current_block": {
            "name": "get_current_block",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthereumNetwork.should_retry_broadcast": {
            "name": "should_retry_broadcast",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "last_sent_block": [
                    "int",
                    "dict[str, tuple[typing.Union[int,int]]]",
                    "None",
                    "float"
                ]
            }
        },
        "EthereumNetwork.get_network_string": {
            "name": "get_network_string",
            "location": 226,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumNetwork.get_private_key": {
            "name": "get_private_key",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EthereumNetwork.publish_transaction": {
            "name": "publish_transaction",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "signed_transaction": [
                    "str",
                    "int",
                    "Exception",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "EthereumNetwork._publish_l5_transaction": {
            "name": "_publish_l5_transaction",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "transaction_payload": [
                    "str"
                ]
            }
        },
        "EthereumNetwork._calculate_transaction_fee": {
            "name": "_calculate_transaction_fee",
            "location": 269,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumNetwork.export_as_at_rest": {
            "name": "export_as_at_rest",
            "location": 279,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/eth_utest.py": {
        "TestEthereumMethods.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_new_from_at_rest_good_input_v1": {
            "name": "test_new_from_at_rest_good_input_v1",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_new_from_at_rest_bad_version": {
            "name": "test_new_from_at_rest_bad_version",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_publish_creates_signs_and_sends": {
            "name": "test_publish_creates_signs_and_sends",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_get_current_block_calls_web3": {
            "name": "test_get_current_block_calls_web3",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_should_retry_broadcast_true": {
            "name": "test_should_retry_broadcast_true",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_should_retry_broadcast_false": {
            "name": "test_should_retry_broadcast_false",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_check_balance": {
            "name": "test_check_balance",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_get_transaction_fee_estimate": {
            "name": "test_get_transaction_fee_estimate",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_calculate_transaction_fee_for_eth": {
            "name": "test_calculate_transaction_fee_for_eth",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_sign_transaction": {
            "name": "test_sign_transaction",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_is_transaction_confirmed_final": {
            "name": "test_is_transaction_confirmed_final",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_is_transaction_confirmed_unconfirmed": {
            "name": "test_is_transaction_confirmed_unconfirmed",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_is_transaction_confirmed_pending": {
            "name": "test_is_transaction_confirmed_pending",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_is_transaction_confirmed_dropped": {
            "name": "test_is_transaction_confirmed_dropped",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_export_as_at_rest": {
            "name": "test_export_as_at_rest",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_new_from_user_input_defaults": {
            "name": "test_new_from_user_input_defaults",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_check_chain_id": []
            }
        },
        "TestEthereumMethods.test_new_from_user_input_sets_good_private_keys": {
            "name": "test_new_from_user_input_sets_good_private_keys",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_check_chain_id": [
                    "str"
                ]
            }
        },
        "TestEthereumMethods.test_new_from_user_input_throws_with_bad_keys": {
            "name": "test_new_from_user_input_throws_with_bad_keys",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_new_from_user_inputs_throws_with_no_rpc_and_bad_chain_id": {
            "name": "test_new_from_user_inputs_throws_with_no_rpc_and_bad_chain_id",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEthereumMethods.test_new_from_user_input_throws_with_mismatching_chain_id": {
            "name": "test_new_from_user_input_throws_with_mismatching_chain_id",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_check_chain_id": [
                    "str"
                ]
            }
        },
        "TestEthereumMethods.test_new_from_user_input_throws_with_inaccessable_rpc": {
            "name": "test_new_from_user_input_throws_with_inaccessable_rpc",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_check_chain_id": [
                    "str",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestEthereumMethods.test_new_from_user_input_throws_with_bad_version": {
            "name": "test_new_from_user_input_throws_with_bad_version",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/l1_block_model.py": {
        "new_from_full_transactions": {
            "name": "new_from_full_transactions",
            "location": 40,
            "return": [
                "L1BlockModel"
            ],
            "arguments": {
                "full_transactions_array": [
                    "str"
                ],
                "block_id": [
                    "str",
                    "int",
                    "None"
                ],
                "prev_id": [
                    "str",
                    "list[str]"
                ],
                "prev_proof": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "new_from_stripped_block": {
            "name": "new_from_stripped_block",
            "location": 68,
            "return": [
                "L1BlockModel"
            ],
            "arguments": {
                "stripped_block": []
            }
        },
        "get_current_block_id": {
            "name": "get_current_block_id",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "export_broadcast_dto": {
            "name": "export_broadcast_dto",
            "location": 98,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,bool,dict[str, typing.Any]]]"
            ],
            "arguments": {
                "block": [
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "L1BlockModel.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dc_id": [
                    "None",
                    "str",
                    "int",
                    "set[int]"
                ],
                "block_id": [
                    "None",
                    "str",
                    "int",
                    "set[int]"
                ],
                "timestamp": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "int"
                ],
                "prev_proof": [
                    "typing.Text"
                ],
                "prev_id": [
                    "typing.Text"
                ],
                "transactions": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "int"
                ],
                "stripped_transactions": [
                    "None",
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "list[str]"
                ],
                "scheme": [
                    "typing.Text"
                ],
                "proof": [
                    "typing.Text"
                ],
                "nonce": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "int"
                ]
            }
        },
        "L1BlockModel.strip_payloads": {
            "name": "strip_payloads",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "L1BlockModel.get_associated_l1_dcid": {
            "name": "get_associated_l1_dcid",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "L1BlockModel.get_associated_l1_block_id": {
            "name": "get_associated_l1_block_id",
            "location": 144,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "L1BlockModel.get_txn_types": {
            "name": "get_txn_types",
            "location": 148,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "L1BlockModel.set_custom_indexes": {
            "name": "set_custom_indexes",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transaction_type_models": [
                    "str",
                    "list[str]",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "L1BlockModel.export_as_at_rest": {
            "name": "export_as_at_rest",
            "location": 158,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[str,int,list[],dict[int, dict[int, typing.Any]],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]],list[int]]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "L1BlockModel.export_as_full_transactions": {
            "name": "export_as_full_transactions",
            "location": 182,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "L1BlockModel.store_transaction_payloads": {
            "name": "store_transaction_payloads",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/l2_block_model.py": {
        "new_from_at_rest": {
            "name": "new_from_at_rest",
            "location": 30,
            "return": [
                "L2BlockModel"
            ],
            "arguments": {
                "block": []
            }
        },
        "export_broadcast_dto": {
            "name": "export_broadcast_dto",
            "location": 57,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[dict[typing.Text, str],int,str,None]]]]"
            ],
            "arguments": {
                "l2_blocks": [
                    "int",
                    "str",
                    "None"
                ],
                "l1_block": [
                    "str"
                ]
            }
        },
        "L2BlockModel.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dc_id": [
                    "None",
                    "str",
                    "int"
                ],
                "current_ddss": [
                    "None",
                    "str",
                    "int",
                    "typing.Mapping"
                ],
                "block_id": [],
                "timestamp": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "prev_proof": [
                    "typing.Text"
                ],
                "scheme": [
                    "typing.Text"
                ],
                "proof": [
                    "typing.Text"
                ],
                "nonce": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "l1_dc_id": [
                    "None",
                    "int",
                    "str",
                    "list[str]"
                ],
                "l1_block_id": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ],
                "l1_proof": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "validations_str": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "tuple[typing.Union[str,int]]"
                ],
                "validations_dict": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, int]",
                    "int"
                ]
            }
        },
        "L2BlockModel.set_validations_dict": {
            "name": "set_validations_dict",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validations_dict": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "L2BlockModel.set_validations_str": {
            "name": "set_validations_str",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validations_str": [
                    "str"
                ]
            }
        },
        "L2BlockModel.get_associated_l1_dcid": {
            "name": "get_associated_l1_dcid",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "L2BlockModel.get_associated_l1_block_id": {
            "name": "get_associated_l1_block_id",
            "location": 121,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "L2BlockModel.export_as_at_rest": {
            "name": "export_as_at_rest",
            "location": 125,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[str,int,list[],dict[int, dict[int, typing.Any]],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]],list[int]]]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/l3_block_model.py": {
        "new_from_at_rest": {
            "name": "new_from_at_rest",
            "location": 29,
            "return": [
                "L3BlockModel"
            ],
            "arguments": {
                "block": []
            }
        },
        "export_broadcast_dto": {
            "name": "export_broadcast_dto",
            "location": 61,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[dict[typing.Text, str],int,str,None]]]]"
            ],
            "arguments": {
                "l3_blocks": [
                    "int",
                    "str",
                    "None"
                ],
                "l1_block": [
                    "str"
                ]
            }
        },
        "L3BlockModel.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dc_id": [
                    "None",
                    "str",
                    "int"
                ],
                "current_ddss": [
                    "None",
                    "str",
                    "int",
                    "typing.Mapping"
                ],
                "block_id": [],
                "timestamp": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "prev_proof": [
                    "typing.Text"
                ],
                "scheme": [
                    "typing.Text"
                ],
                "proof": [
                    "typing.Text"
                ],
                "nonce": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "l1_dc_id": [
                    "None",
                    "int",
                    "str",
                    "list[str]"
                ],
                "l1_block_id": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ],
                "l1_proof": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "l2_proofs": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "l2_count": [
                    "None",
                    "int"
                ],
                "ddss": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "regions": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "clouds": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "L3BlockModel.get_associated_l1_dcid": {
            "name": "get_associated_l1_dcid",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "L3BlockModel.get_associated_l1_block_id": {
            "name": "get_associated_l1_block_id",
            "location": 118,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "L3BlockModel.export_as_at_rest": {
            "name": "export_as_at_rest",
            "location": 122,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[str,int,list[],dict[int, dict[int, typing.Any]],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]],list[int]]]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/l4_block_model.py": {
        "new_from_at_rest": {
            "name": "new_from_at_rest",
            "location": 28,
            "return": [
                "L4BlockModel"
            ],
            "arguments": {
                "block": []
            }
        },
        "export_broadcast_dto": {
            "name": "export_broadcast_dto",
            "location": 74,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[list[dict[str, typing.Any]],bool,Exception]]]]"
            ],
            "arguments": {
                "l4_blocks": [
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "L4BlockModel.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dc_id": [
                    "None",
                    "str",
                    "int"
                ],
                "current_ddss": [
                    "None",
                    "str",
                    "int",
                    "typing.Mapping"
                ],
                "block_id": [],
                "timestamp": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "prev_proof": [
                    "typing.Text"
                ],
                "scheme": [
                    "typing.Text"
                ],
                "proof": [
                    "typing.Text"
                ],
                "nonce": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "l1_dc_id": [
                    "None",
                    "int",
                    "str",
                    "list[str]"
                ],
                "l1_block_id": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ],
                "l1_proof": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "validations": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "float"
                ],
                "chain_name": [
                    "typing.Text"
                ]
            }
        },
        "L4BlockModel.get_associated_l1_dcid": {
            "name": "get_associated_l1_dcid",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "L4BlockModel.get_associated_l1_block_id": {
            "name": "get_associated_l1_block_id",
            "location": 122,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "L4BlockModel.export_as_at_rest": {
            "name": "export_as_at_rest",
            "location": 126,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Union[str,int,list[],dict[int, dict[int, typing.Any]],tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any,typing.Any]],list[int]]]]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/l5_block_model.py": {
        "new_from_at_rest": {
            "name": "new_from_at_rest",
            "location": 30,
            "return": [
                "L5BlockModel"
            ],
            "arguments": {
                "block": []
            }
        },
        "L5BlockModel.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dc_id": [
                    "None",
                    "str",
                    "int"
                ],
                "current_ddss": [
                    "None",
                    "str",
                    "int",
                    "typing.Mapping"
                ],
                "block_id": [],
                "timestamp": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "prev_proof": [
                    "typing.Text"
                ],
                "scheme": [
                    "typing.Text"
                ],
                "proof": [
                    "typing.Text"
                ],
                "transaction_hash": [
                    "None",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "network": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "nonce": [
                    "None",
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "l4_blocks": [
                    "None",
                    "int",
                    "dict[, ]"
                ],
                "block_last_sent_at": [
                    "None",
                    "float",
                    "bool",
                    "typing.Container",
                    "typing.Any"
                ]
            }
        },
        "L5BlockModel.get_associated_l1_block_id": {
            "name": "get_associated_l1_block_id",
            "location": 98,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "L5BlockModel.export_as_at_rest": {
            "name": "export_as_at_rest",
            "location": 109,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, int],dict[typing.Text, typing.Union[str,dict[int, dict[int, typing.Any]],list[],dict[str, dict[str, typing.Any]]]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "L5BlockModel.export_as_search_index": {
            "name": "export_as_search_index",
            "location": 144,
            "return": [
                "dict[typing.Text, typing.Union[int,typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/model.py": {
        "Model.export_as_search_index": {
            "name": "export_as_search_index",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.export_as_at_rest": {
            "name": "export_as_at_rest",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockModel.get_associated_l1_dcid": {
            "name": "get_associated_l1_dcid",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockModel.get_associated_l1_block_id": {
            "name": "get_associated_l1_block_id",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockModel.export_as_search_index": {
            "name": "export_as_search_index",
            "location": 48,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterchainModel.sign_transaction": {
            "name": "sign_transaction",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_transaction": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[M]",
                    "list[]"
                ]
            }
        },
        "InterchainModel.publish_l5_hash_to_public_network": {
            "name": "publish_l5_hash_to_public_network",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "l5_block_hash": [
                    "bool",
                    "str"
                ]
            }
        },
        "InterchainModel.is_transaction_confirmed": {
            "name": "is_transaction_confirmed",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transaction_hash": [
                    "str",
                    "bool"
                ]
            }
        },
        "InterchainModel.check_balance": {
            "name": "check_balance",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterchainModel.get_transaction_fee_estimate": {
            "name": "get_transaction_fee_estimate",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterchainModel.get_current_block": {
            "name": "get_current_block",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterchainModel.should_retry_broadcast": {
            "name": "should_retry_broadcast",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_sent_block": [
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "InterchainModel.get_network_string": {
            "name": "get_network_string",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterchainModel.publish_transaction": {
            "name": "publish_transaction",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signed_transaction": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[M]",
                    "list[]"
                ]
            }
        },
        "InterchainModel._publish_l5_transaction": {
            "name": "_publish_l5_transaction",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/models_utest.py": {
        "create_sc": {
            "name": "create_sc",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "create_tx": {
            "name": "create_tx",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "create_l1_block": {
            "name": "create_l1_block",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "create_l2_block": {
            "name": "create_l2_block",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "create_l3_block": {
            "name": "create_l3_block",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "create_l4_block": {
            "name": "create_l4_block",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "TestModel.test_abstract_model": {
            "name": "test_abstract_model",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlockModel.test_abstract_block": {
            "name": "test_abstract_block",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlockModel.test_search_index_schema": {
            "name": "test_search_index_schema",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartContract.test_from_input": {
            "name": "test_from_input",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartContract.test_seconds_low_range": {
            "name": "test_seconds_low_range",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartContract.test_seconds_high_range": {
            "name": "test_seconds_high_range",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSmartContract.test_export_schema": {
            "name": "test_export_schema",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_from_input": {
            "name": "test_from_input",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_export_schemas": {
            "name": "test_export_schemas",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransaction.test_new_from_at_rest_full": {
            "name": "test_new_from_at_rest_full",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL1Block.test_setting_validations": {
            "name": "test_setting_validations",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL1Block.test_stripped_schema": {
            "name": "test_stripped_schema",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL1Block.test_create_from_at_rest": {
            "name": "test_create_from_at_rest",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL1Block.test_create_from_transactions": {
            "name": "test_create_from_transactions",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_current_block_id": [
                    "str",
                    "list[str]",
                    "int"
                ],
                "mock_get_id": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "TestL1Block.test_nd_json_export": {
            "name": "test_nd_json_export",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL2Block.test_setting_validations": {
            "name": "test_setting_validations",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL2Block.test_at_rest_schema": {
            "name": "test_at_rest_schema",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL2Block.test_create_from_at_rest": {
            "name": "test_create_from_at_rest",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL3Block.test_setting_validations": {
            "name": "test_setting_validations",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL3Block.test_at_rest_schema": {
            "name": "test_at_rest_schema",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL3Block.test_create_from_at_rest": {
            "name": "test_create_from_at_rest",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL4Block.test_setting_validations": {
            "name": "test_setting_validations",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL4Block.test_at_rest_schema": {
            "name": "test_at_rest_schema",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestL4Block.test_create_from_at_rest": {
            "name": "test_create_from_at_rest",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/schema.py": {
        "get_transaction_queue_task_schema": {
            "name": "get_transaction_queue_task_schema",
            "location": 113,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, dict[typing.Text, typing.Text]],list[typing.Text]]]],list[typing.Text]]]"
            ],
            "arguments": {
                "dict_payload": [
                    "bool"
                ]
            }
        },
        "add_crud_default_properties": {
            "name": "add_crud_default_properties",
            "location": 735,
            "return": [],
            "arguments": {
                "other_properties": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/smart_contract_model.py": {
        "new_from_build_task": {
            "name": "new_from_build_task",
            "location": 55,
            "return": [
                "SmartContractModel"
            ],
            "arguments": {
                "data": []
            }
        },
        "new_contract_from_user": {
            "name": "new_contract_from_user",
            "location": 81,
            "return": [
                "SmartContractModel"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, float]"
                ]
            }
        },
        "new_from_at_rest": {
            "name": "new_from_at_rest",
            "location": 110,
            "return": [
                "SmartContractModel"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "new_update_contract": {
            "name": "new_update_contract",
            "location": 136,
            "return": [
                "SmartContractModel"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "existing_contract": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "ContractState.is_updatable_state": {
            "name": "is_updatable_state",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "state": [
                    "typing.Type",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "SmartContractModel.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "txn_type": [
                    "None",
                    "str",
                    "typing.Type"
                ],
                "task_type": [
                    "None",
                    "str",
                    "typing.Type",
                    "int",
                    "typing.Sequence[]"
                ],
                "sc_id": [
                    "None",
                    "str"
                ],
                "status": [
                    "None",
                    "str",
                    "bool"
                ],
                "start_state": [
                    "None",
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Callable[[], None]"
                ],
                "desired_state": [
                    "None",
                    "str",
                    "int",
                    "dict[str, T]"
                ],
                "image": [
                    "None",
                    "str",
                    "bool"
                ],
                "execution_order": [
                    "None",
                    "str",
                    "bool"
                ],
                "env": [
                    "None",
                    "str",
                    "bool"
                ],
                "secrets": [
                    "None",
                    "bool",
                    "list[str]",
                    "str",
                    "typing.Sequence[str]"
                ],
                "existing_secrets": [
                    "None",
                    "str",
                    "bool"
                ],
                "auth_key_id": [
                    "None",
                    "str",
                    "int"
                ],
                "cmd": [
                    "None",
                    "str",
                    "bool"
                ],
                "args": [
                    "None"
                ],
                "cron": [
                    "None",
                    "str",
                    "bool"
                ],
                "seconds": [
                    "None",
                    "str",
                    "bool"
                ],
                "auth": [
                    "None",
                    "str",
                    "bool"
                ],
                "image_digest": [
                    "None",
                    "str",
                    "bool"
                ],
                "disable_schedule": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "SmartContractModel.export_as_invoke_request": {
            "name": "export_as_invoke_request",
            "location": 215,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[str, typing.Any],typing.Sequence[str],dict[, ],frozenset]]"
            ],
            "arguments": {
                "self": [],
                "invoke_transaction": [
                    "dict[str, typing.Any]",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "frozenset"
                ]
            }
        },
        "SmartContractModel.export_as_search_index": {
            "name": "export_as_search_index",
            "location": 219,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartContractModel.export_as_at_rest": {
            "name": "export_as_at_rest",
            "location": 223,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartContractModel.export_as_contract_task": {
            "name": "export_as_contract_task",
            "location": 243,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": [],
                "task_type": [
                    "str",
                    "list[str]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "SmartContractModel.validate_schedule": {
            "name": "validate_schedule",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartContractModel.validate_secret_names": {
            "name": "validate_secret_names",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartContractModel.check_env_names": {
            "name": "check_env_names",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmartContractModel.set_state": {
            "name": "set_state",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "bytes",
                    "None",
                    "typing.Callable[, ]"
                ],
                "msg": [
                    "typing.Text"
                ]
            }
        },
        "SmartContractModel.update_faas_fields": {
            "name": "update_faas_fields",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update_model": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "SmartContractModel.save": {
            "name": "save",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/transaction_model.py": {
        "new_from_user_input": {
            "name": "new_from_user_input",
            "location": 33,
            "return": [
                "TransactionModel"
            ],
            "arguments": {
                "create_task": []
            }
        },
        "new_from_queue_input": {
            "name": "new_from_queue_input",
            "location": 44,
            "return": [
                "TransactionModel"
            ],
            "arguments": {
                "queue_task": []
            }
        },
        "new_from_stripped_block_input": {
            "name": "new_from_stripped_block_input",
            "location": 62,
            "return": [
                "TransactionModel"
            ],
            "arguments": {
                "l1_block_txn": [
                    "int",
                    "str",
                    "typing.Type",
                    "Exception"
                ]
            }
        },
        "new_from_at_rest_full": {
            "name": "new_from_at_rest_full",
            "location": 88,
            "return": [
                "TransactionModel"
            ],
            "arguments": {
                "full_txn": []
            }
        },
        "TransactionModel.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dc_id": [
                    "None",
                    "str"
                ],
                "block_id": [
                    "None",
                    "str"
                ],
                "txn_id": [
                    "None",
                    "str"
                ],
                "timestamp": [
                    "None",
                    "str"
                ],
                "txn_type": [
                    "None",
                    "str",
                    "bool",
                    "typing.Sequence[str]",
                    "dict[str, str]"
                ],
                "tag": [
                    "typing.Text"
                ],
                "payload": [
                    "typing.Text"
                ],
                "signature": [
                    "None",
                    "str"
                ],
                "full_hash": [
                    "None",
                    "str"
                ],
                "invoker": [
                    "typing.Text"
                ]
            }
        },
        "TransactionModel.export_as_full": {
            "name": "export_as_full",
            "location": 153,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionModel.export_as_stripped": {
            "name": "export_as_stripped",
            "location": 170,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionModel.export_as_queue_task": {
            "name": "export_as_queue_task",
            "location": 187,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "self": [],
                "dict_payload": [
                    "bool"
                ]
            }
        },
        "TransactionModel.export_as_search_index": {
            "name": "export_as_search_index",
            "location": 202,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionModel.extract_custom_indexes": {
            "name": "extract_custom_indexes",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transaction_type_model": [
                    "str",
                    "Exception",
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/transaction_type_model.py": {
        "new_from_user_input": {
            "name": "new_from_user_input",
            "location": 29,
            "return": [
                "TransactionTypeModel"
            ],
            "arguments": {
                "user_input": []
            }
        },
        "new_from_at_rest": {
            "name": "new_from_at_rest",
            "location": 39,
            "return": [
                "TransactionTypeModel"
            ],
            "arguments": {
                "transaction_type_data": []
            }
        },
        "new_from_contract_create": {
            "name": "new_from_contract_create",
            "location": 59,
            "return": [
                "TransactionTypeModel"
            ],
            "arguments": {
                "txn_type": [
                    "str",
                    "list[\"custom_index\"]",
                    "None"
                ],
                "contract_id": [
                    "str",
                    "list[\"custom_index\"]",
                    "None"
                ],
                "custom_indexes": [
                    "str",
                    "list[\"custom_index\"]",
                    "None"
                ]
            }
        },
        "TransactionTypeModel.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "txn_type": [
                    "None",
                    "bool",
                    "str"
                ],
                "custom_indexes": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "list[typing.Any]",
                    "list[int]"
                ],
                "contract_id": [
                    "None",
                    "int",
                    "str",
                    "typing.Mapping",
                    "bytes"
                ],
                "active_since_block": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "TransactionTypeModel.export_as_at_rest": {
            "name": "export_as_at_rest",
            "location": 80,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/dto/__init__.py": {},
    "dragonchain-master/dragonchain/lib/interfaces/docker_registry.py": {
        "get_login": {
            "name": "get_login",
            "location": 33,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "as_token": [
                    "bool"
                ]
            }
        },
        "get_login_token": {
            "name": "get_login_token",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "delete_image": {
            "name": "delete_image",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "repository": [
                    "str",
                    "int",
                    "tuple[str]"
                ],
                "image_digest": [
                    "str",
                    "int",
                    "tuple[str]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/interfaces/registry.py": {
        "get_login": {
            "name": "get_login",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "get_login_token": {
            "name": "get_login_token",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "delete_image": {
            "name": "delete_image",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "repository": [
                    "bool"
                ],
                "image_digest": [
                    "bool"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/interfaces/secrets.py": {
        "get_dc_secret": {
            "name": "get_dc_secret",
            "location": 27,
            "return": [],
            "arguments": {
                "secret_name": [
                    "str",
                    "set[str]",
                    "list[]",
                    "dict[, ]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/interfaces/storage.py": {
        "get": {
            "name": "get",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "cache_expire": [
                    "None",
                    "int",
                    "str",
                    "typing.Hashable"
                ],
                "should_cache": [
                    "bool"
                ]
            }
        },
        "put": {
            "name": "put",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int"
                ],
                "value": [],
                "cache_expire": [
                    "None",
                    "int",
                    "str"
                ],
                "should_cache": [
                    "bool"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool",
                    "typing.Iterator"
                ]
            }
        },
        "delete_directory": {
            "name": "delete_directory",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "directory_key": [
                    "str",
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        },
        "select_transaction": {
            "name": "select_transaction",
            "location": 126,
            "return": [],
            "arguments": {
                "block_id": [
                    "int",
                    "str",
                    "None"
                ],
                "txn_id": [
                    "int",
                    "str",
                    "None"
                ],
                "cache_expire": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "put_object_as_json": {
            "name": "put_object_as_json",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bool",
                    "None",
                    "bytes"
                ],
                "cache_expire": [
                    "None",
                    "str",
                    "bool",
                    "bytes"
                ],
                "should_cache": [
                    "bool"
                ]
            }
        },
        "get_json_from_object": {
            "name": "get_json_from_object",
            "location": 165,
            "return": [],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "None"
                ],
                "cache_expire": [
                    "None",
                    "str",
                    "int"
                ],
                "should_cache": [
                    "bool"
                ]
            }
        },
        "list_objects": {
            "name": "list_objects",
            "location": 177,
            "return": [],
            "arguments": {
                "prefix": [
                    "str",
                    "bool"
                ]
            }
        },
        "does_superkey_exist": {
            "name": "does_superkey_exist",
            "location": 193,
            "return": [],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "does_object_exist": {
            "name": "does_object_exist",
            "location": 209,
            "return": [],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "save_error_message": {
            "name": "save_error_message",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/interfaces/storage_utest.py": {
        "TestStorageInterfaceImport.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterfaceImport.test_storage_raises_not_implemented_with_bad_storage_type": {
            "name": "test_storage_raises_not_implemented_with_bad_storage_type",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.tearDown": {
            "name": "tearDown",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_get_calls_storage_get_with_params": {
            "name": "test_get_calls_storage_get_with_params",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_get_raises_storage_error": {
            "name": "test_get_raises_storage_error",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_get_calls_cache_with_correct_params": {
            "name": "test_get_calls_cache_with_correct_params",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_get_raises_not_found": {
            "name": "test_get_raises_not_found",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_put_calls_storage_put_with_params": {
            "name": "test_put_calls_storage_put_with_params",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_put_raises_storage_error": {
            "name": "test_put_raises_storage_error",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_put_calls_cache_with_correct_params": {
            "name": "test_put_calls_cache_with_correct_params",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_delete_calls_storage_delete_with_params": {
            "name": "test_delete_calls_storage_delete_with_params",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_delete_raises_storage_error": {
            "name": "test_delete_raises_storage_error",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_delete_calls_cache_with_correct_params": {
            "name": "test_delete_calls_cache_with_correct_params",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_list_objects_calls_storage_list_objects_with_params": {
            "name": "test_list_objects_calls_storage_list_objects_with_params",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_list_objects_throws_storage_error": {
            "name": "test_list_objects_throws_storage_error",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_does_superkey_exist_calls_storage_does_superkey_exist_with_params": {
            "name": "test_does_superkey_exist_calls_storage_does_superkey_exist_with_params",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_does_superkey_exist_throws_storage_error": {
            "name": "test_does_superkey_exist_throws_storage_error",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_does_object_exist_calls_storage_does_object_exist_with_params": {
            "name": "test_does_object_exist_calls_storage_does_object_exist_with_params",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_does_object_exist_throws_storage_error": {
            "name": "test_does_object_exist_throws_storage_error",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_put_object_as_json_calls_put_with_correct_params": {
            "name": "test_put_object_as_json_calls_put_with_correct_params",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_get_json_from_object_calls_get_with_correct_params": {
            "name": "test_get_json_from_object_calls_get_with_correct_params",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_get_json_from_object_returns_correct_json": {
            "name": "test_get_json_from_object_returns_correct_json",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_delete_directory_calls_list_objects_with_correct_params": {
            "name": "test_delete_directory_calls_list_objects_with_correct_params",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_delete_directory_calls_delete_with_correct_params": {
            "name": "test_delete_directory_calls_delete_with_correct_params",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_delete_directory_calls_delete_directory_with_correct_params": {
            "name": "test_delete_directory_calls_delete_directory_with_correct_params",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_delete_directory_raises_storage_exception": {
            "name": "test_delete_directory_raises_storage_exception",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_select_transaction_calls_storage_select_transaction_with_params": {
            "name": "test_select_transaction_calls_storage_select_transaction_with_params",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_select_transaction_calls_cache_get_with_params": {
            "name": "test_select_transaction_calls_cache_get_with_params",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_select_transaction_returns_correct_value_from_cache": {
            "name": "test_select_transaction_returns_correct_value_from_cache",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_select_transaction_returns_correct_value_from_storage": {
            "name": "test_select_transaction_returns_correct_value_from_storage",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_select_transaction_calls_cache_put_with_params": {
            "name": "test_select_transaction_calls_cache_put_with_params",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_select_transaction_raises_not_found": {
            "name": "test_select_transaction_raises_not_found",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_select_transaction_raises_storage_error": {
            "name": "test_select_transaction_raises_storage_error",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorageInterface.test_save_error_message": {
            "name": "test_save_error_message",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_time": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/interfaces/__init__.py": {},
    "dragonchain-master/dragonchain/lib/interfaces/aws/ecr.py": {
        "get_login": {
            "name": "get_login",
            "location": 29,
            "return": [
                "dict[typing.Text, typing.Union[int,list[str],str,tuple[]]]"
            ],
            "arguments": {}
        },
        "get_login_token": {
            "name": "get_login_token",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "delete_image": {
            "name": "delete_image",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "repository": [
                    "str",
                    "dict[, ]"
                ],
                "image_digest": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/interfaces/aws/s3.py": {
        "get": {
            "name": "get",
            "location": 29,
            "return": [],
            "arguments": {
                "location": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "put": {
            "name": "put",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "location": [
                    "str",
                    "bytes",
                    "int",
                    "None"
                ],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "None"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "None"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "location": [
                    "str",
                    "int",
                    "None"
                ],
                "key": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "delete_directory": {
            "name": "delete_directory",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "location": [
                    "str",
                    "bytes",
                    "float",
                    "int",
                    "list[str]"
                ],
                "directory_key": [
                    "str",
                    "bytes",
                    "float",
                    "int",
                    "list[str]"
                ]
            }
        },
        "select_transaction": {
            "name": "select_transaction",
            "location": 79,
            "return": [],
            "arguments": {
                "location": [
                    "str"
                ],
                "block_id": [
                    "str"
                ],
                "txn_id": [
                    "str",
                    "int"
                ]
            }
        },
        "list_objects": {
            "name": "list_objects",
            "location": 118,
            "return": [],
            "arguments": {
                "location": [
                    "str",
                    "bool"
                ],
                "prefix": [
                    "str",
                    "bool"
                ]
            }
        },
        "does_superkey_exist": {
            "name": "does_superkey_exist",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "location": [
                    "str",
                    "bytes"
                ],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "does_object_exist": {
            "name": "does_object_exist",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "location": [
                    "str",
                    "None"
                ],
                "key": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/interfaces/aws/s3_utest.py": {
        "TestS3Interface.test_get_calls_with_correct_params": {
            "name": "test_get_calls_with_correct_params",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_object": []
            }
        },
        "TestS3Interface.test_get_throws_notfound_on_nosuckkey": {
            "name": "test_get_throws_notfound_on_nosuckkey",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_object": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestS3Interface.test_put_calls_with_correct_params": {
            "name": "test_put_calls_with_correct_params",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_put_object": []
            }
        },
        "TestS3Interface.test_put_raises_when_not_200": {
            "name": "test_put_raises_when_not_200",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_put_object": []
            }
        },
        "TestS3Interface.test_delete_calls_with_correct_params": {
            "name": "test_delete_calls_with_correct_params",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_delete_object": []
            }
        },
        "TestS3Interface.test_delete_raises_when_not_204": {
            "name": "test_delete_raises_when_not_204",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_delete_object": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestS3Interface.test_delete_directory_does_nothing": {
            "name": "test_delete_directory_does_nothing",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3Interface.test_select_calls_with_correct_params": {
            "name": "test_select_calls_with_correct_params",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_select_object_content": []
            }
        },
        "TestS3Interface.test_select_gets_nested_data_properly": {
            "name": "test_select_gets_nested_data_properly",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_select_object_content": []
            }
        },
        "TestS3Interface.test_select_raises_not_found_with_empty_records": {
            "name": "test_select_raises_not_found_with_empty_records",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_select_object_content": []
            }
        },
        "TestS3Interface.test_select_transaction_raises_not_found_with_no_block": {
            "name": "test_select_transaction_raises_not_found_with_no_block",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_select_content": []
            }
        },
        "TestS3Interface.test_list_objects_calls_with_correct_params": {
            "name": "test_list_objects_calls_with_correct_params",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_paginator": []
            }
        },
        "TestS3Interface.test_list_objects_calls_returns_valid_keys": {
            "name": "test_list_objects_calls_returns_valid_keys",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_paginator": []
            }
        },
        "TestS3Interface.test_list_objects_filters_folders": {
            "name": "test_list_objects_filters_folders",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_paginator": []
            }
        },
        "TestS3Interface.test_does_superkey_exist_calls_with_correct_params": {
            "name": "test_does_superkey_exist_calls_with_correct_params",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_list": []
            }
        },
        "TestS3Interface.test_does_superkey_exist_returns_true_with_contents": {
            "name": "test_does_superkey_exist_returns_true_with_contents",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_list": []
            }
        },
        "TestS3Interface.test_does_superkey_exist_returns_false_without_contents": {
            "name": "test_does_superkey_exist_returns_false_without_contents",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_list": []
            }
        },
        "TestS3Interface.test_does_object_exist_calls_with_correct_params": {
            "name": "test_does_object_exist_calls_with_correct_params",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_head": []
            }
        },
        "TestS3Interface.test_does_object_exist_returns_true_when_existing": {
            "name": "test_does_object_exist_returns_true_when_existing",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_head": []
            }
        },
        "TestS3Interface.test_does_object_exist_returns_false_when_head_error": {
            "name": "test_does_object_exist_returns_false_when_head_error",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_head": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/interfaces/aws/sns.py": {
        "send_error_message": {
            "name": "send_error_message",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool"
                ],
                "topic": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/interfaces/aws/__init__.py": {},
    "dragonchain-master/dragonchain/lib/interfaces/local/disk.py": {
        "process_key": {
            "name": "process_key",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 37,
            "return": [],
            "arguments": {
                "location": [
                    "str",
                    "None"
                ],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "put": {
            "name": "put",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "location": [
                    "str",
                    "typing.Iterator",
                    "OSError",
                    "float"
                ],
                "key": [
                    "str",
                    "list[str]",
                    "typing.Mapping",
                    "dict[, ]",
                    "typing.MutableMapping"
                ],
                "value": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "location": [
                    "str",
                    "None"
                ],
                "key": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "delete_directory": {
            "name": "delete_directory",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "location": [
                    "str",
                    "typing.AnyStr"
                ],
                "directory_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "select_transaction": {
            "name": "select_transaction",
            "location": 93,
            "return": [],
            "arguments": {
                "location": [
                    "str",
                    "bool"
                ],
                "block_id": [
                    "str",
                    "int"
                ],
                "txn_id": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "list_objects": {
            "name": "list_objects",
            "location": 115,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "location": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "prefix": [
                    "str",
                    "int"
                ]
            }
        },
        "does_superkey_exist": {
            "name": "does_superkey_exist",
            "location": 128,
            "return": [],
            "arguments": {
                "location": [
                    "str",
                    "None"
                ],
                "key": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "does_object_exist": {
            "name": "does_object_exist",
            "location": 133,
            "return": [],
            "arguments": {
                "location": [
                    "str",
                    "None"
                ],
                "key": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/lib/interfaces/local/disk_utest.py": {
        "TestDiskInterface.test_process_key_replaces_dots": {
            "name": "test_process_key_replaces_dots",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiskInterface.test_get_opens_correct_file": {
            "name": "test_get_opens_correct_file",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": []
            }
        },
        "TestDiskInterface.test_get_returns_file_data": {
            "name": "test_get_returns_file_data",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": []
            }
        },
        "TestDiskInterface.test_get_throws_notfound_on_filenotfound": {
            "name": "test_get_throws_notfound_on_filenotfound",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": []
            }
        },
        "TestDiskInterface.test_put_opens_correct_file": {
            "name": "test_put_opens_correct_file",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_file": []
            }
        },
        "TestDiskInterface.test_put_makes_dirs_when_needed": {
            "name": "test_put_makes_dirs_when_needed",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_make_dirs": [
                    "str"
                ],
                "mock_file": []
            }
        },
        "TestDiskInterface.test_delete_calls_os_remove_with_correct_params": {
            "name": "test_delete_calls_os_remove_with_correct_params",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_remove": []
            }
        },
        "TestDiskInterface.test_delete_directory_recursively_deletes": {
            "name": "test_delete_directory_recursively_deletes",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_walk": [],
                "mock_rm_dir": [
                    "str"
                ]
            }
        },
        "TestDiskInterface.test_select_transaction_parses_txn_id": {
            "name": "test_select_transaction_parses_txn_id",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "TestDiskInterface.test_select_transaction_returns_not_found": {
            "name": "test_select_transaction_returns_not_found",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "TestDiskInterface.test_list_objects_returns_correct_objects": {
            "name": "test_list_objects_returns_correct_objects",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_walk": []
            }
        },
        "TestDiskInterface.test_does_superkey_exit_calls_isdir_with_correct_params": {
            "name": "test_does_superkey_exit_calls_isdir_with_correct_params",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_isdir": []
            }
        },
        "TestDiskInterface.test_does_object_exit_calls_isfile_with_correct_params": {
            "name": "test_does_object_exit_calls_isfile_with_correct_params",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_isfile": []
            }
        }
    },
    "dragonchain-master/dragonchain/lib/interfaces/local/__init__.py": {},
    "dragonchain-master/dragonchain/scheduler/background_scheduler.py": {
        "error_handler": {
            "name": "error_handler",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "event": [
                    "dict[, ]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/scheduler/change_request_poller.py": {},
    "dragonchain-master/dragonchain/scheduler/scheduler.py": {
        "parse_json_or_fail": {
            "name": "parse_json_or_fail",
            "location": 41,
            "return": [],
            "arguments": {
                "json_str": [
                    "str",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "subscribe": {
            "name": "subscribe",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "redis_key": [
                    "bytes",
                    "float"
                ]
            }
        },
        "revive_dead_workers": {
            "name": "revive_dead_workers",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "schedule_contract_invocation": {
            "name": "schedule_contract_invocation",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "contract_model": [
                    "int",
                    "None",
                    "str",
                    "typing.Callable[T, bool]",
                    "float"
                ],
                "action": []
            }
        },
        "worker": {
            "name": "worker",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "change_request": []
            }
        }
    },
    "dragonchain-master/dragonchain/scheduler/scheduler_utest.py": {
        "FakeScModel.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]"
                ],
                "cron": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ],
                "seconds": [
                    "int",
                    "str",
                    "typing.Sequence[]",
                    "None"
                ]
            }
        },
        "SchedulerTest.test_subscribe1": {
            "name": "test_subscribe1",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "brpop": [
                    "str",
                    "list[int]"
                ],
                "lpush": [
                    "str",
                    "list[int]"
                ],
                "delete": [
                    "str",
                    "list[int]"
                ],
                "mock_worker": []
            }
        },
        "SchedulerTest.test_subscribe2": {
            "name": "test_subscribe2",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "brpop": [
                    "str",
                    "list[int]"
                ],
                "lpush": [],
                "delete": [
                    "str",
                    "list[int]"
                ],
                "mock_worker": [
                    "str",
                    "list[int]"
                ]
            }
        },
        "SchedulerTest.test_revive_dead_workers": {
            "name": "test_revive_dead_workers",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hgetall": [],
                "lpush": []
            }
        },
        "SchedulerTest.test_parse_json_or_fail": {
            "name": "test_parse_json_or_fail",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchedulerTest.test_schedule_contract_invocation": {
            "name": "test_schedule_contract_invocation",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lpush": []
            }
        },
        "SchedulerTest.test_schedule_contract_invocation_raises": {
            "name": "test_schedule_contract_invocation_raises",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lpush": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "SchedulerTest.test_create_new_job": {
            "name": "test_create_new_job",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hset": [],
                "hexists": []
            }
        },
        "SchedulerTest.test_create_existing_job": {
            "name": "test_create_existing_job",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hexists": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ],
                "mock_hexists": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ],
                "mock_hset": [
                    "typing.Generator[typing.Union[None,typing.Any,None]]"
                ]
            }
        },
        "SchedulerTest.test_delete_job": {
            "name": "test_delete_job",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remove_job": [],
                "hdel": [],
                "hget": [
                    "str"
                ],
                "hexists": [
                    "str"
                ]
            }
        },
        "SchedulerTest.test_delete_non_existent_job": {
            "name": "test_delete_non_existent_job",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remove_job": [],
                "hdel": [],
                "hget": [],
                "exists": [
                    "bool"
                ]
            }
        },
        "SchedulerTest.test_update_job": {
            "name": "test_update_job",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_hset": [],
                "mock_hget": [],
                "reschedule_job": [],
                "exists": []
            }
        },
        "SchedulerTest.test_update_non_existent_job": {
            "name": "test_update_non_existent_job",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hgetall": [],
                "hexists": []
            }
        }
    },
    "dragonchain-master/dragonchain/scheduler/timing_event.py": {
        "exists": {
            "name": "exists",
            "location": 40,
            "return": [],
            "arguments": {
                "timing_id": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "get_by_id": {
            "name": "get_by_id",
            "location": 50,
            "return": [
                "TimingEvent"
            ],
            "arguments": {
                "timing_id": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "TimingEvent.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timing_id": [
                    "str",
                    "None"
                ],
                "cron": [
                    "typing.Text"
                ],
                "seconds": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ],
                "txn_type": [
                    "None",
                    "str",
                    "typing.Sequence[str]",
                    "bool",
                    "dict[str, str]"
                ],
                "execution_order": [
                    "None",
                    "str",
                    "bool",
                    "typing.Iterable[str]"
                ]
            }
        },
        "TimingEvent.delete": {
            "name": "delete",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimingEvent.update": {
            "name": "update",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "txn_type": [
                    "None",
                    "str"
                ],
                "execution_order": [
                    "None",
                    "str",
                    "bool",
                    "bytes"
                ],
                "cron": [
                    "None",
                    "int",
                    "dict[str, dict[str, typing.Any]]",
                    "float"
                ],
                "seconds": [
                    "None",
                    "str"
                ]
            }
        },
        "TimingEvent.save": {
            "name": "save",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimingEvent.start": {
            "name": "start",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimingEvent.submit_invocation_request": {
            "name": "submit_invocation_request",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimingEvent.get_trigger": {
            "name": "get_trigger",
            "location": 141,
            "return": [
                "IntervalTrigger"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimingEvent.as_json": {
            "name": "as_json",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/scheduler/timing_event_utest.py": {
        "TestTimingEvent.test_get_job_exists": {
            "name": "test_get_job_exists",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hexists": []
            }
        },
        "TestTimingEvent.test_get_by_id_fails": {
            "name": "test_get_by_id_fails",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hget": [
                    "str"
                ]
            }
        },
        "TestTimingEvent.test_get_by_id_valid": {
            "name": "test_get_by_id_valid",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hget": []
            }
        },
        "TestTimingEvent.test_delete": {
            "name": "test_delete",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hdel": [],
                "remove_job": []
            }
        },
        "TestTimingEvent.test_update_interval": {
            "name": "test_update_interval",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hset": [],
                "modify_job": []
            }
        },
        "TestTimingEvent.test_update_cron": {
            "name": "test_update_cron",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hset": [],
                "modify_job": [
                    "int",
                    "str"
                ]
            }
        },
        "TestTimingEvent.test_update_raises": {
            "name": "test_update_raises",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hset": [],
                "modify_job": []
            }
        },
        "TestTimingEvent.test_returns_instance": {
            "name": "test_returns_instance",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimingEvent.test_add_job_called_for_interval": {
            "name": "test_add_job_called_for_interval",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scheduler_add_jobstore": [
                    "str",
                    "typing.Callable[..., None]",
                    "list[]",
                    "bool"
                ],
                "scheduler_start": [
                    "str",
                    "typing.Callable[..., None]",
                    "list[]",
                    "bool"
                ],
                "scheduler_add_job": [
                    "int",
                    "float"
                ],
                "hset": [
                    "str",
                    "typing.Callable[..., None]",
                    "list[]",
                    "bool"
                ]
            }
        },
        "TestTimingEvent.test_start_raises_conflict_when_add_job_conflicts": {
            "name": "test_start_raises_conflict_when_add_job_conflicts",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "int",
                    "float"
                ],
                "b": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "TestTimingEvent.test_add_job_called_for_cron": {
            "name": "test_add_job_called_for_cron",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_crontab": [
                    "int"
                ],
                "scheduler_add_jobstore": [
                    "int"
                ],
                "scheduler_start": [
                    "int"
                ],
                "scheduler_add_job": [
                    "int",
                    "str"
                ],
                "hset": [
                    "int"
                ]
            }
        },
        "FakeEvent.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "str",
                    "int"
                ]
            }
        },
        "FakeEvent.exception": {
            "name": "exception",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/scheduler/__init__.py": {},
    "dragonchain-master/dragonchain/transaction_processor/level_1_actions.py": {
        "execute": {
            "name": "execute",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "activate_pending_indexes_if_necessary": {
            "name": "activate_pending_indexes_if_necessary",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "bool",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "clear_processing_transactions": {
            "name": "clear_processing_transactions",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_new_transactions": {
            "name": "get_new_transactions",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "process_transactions": {
            "name": "process_transactions",
            "location": 106,
            "return": [
                "list[typing.Union[typing.Text,T]]"
            ],
            "arguments": {
                "raw_transactions": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[T]",
                    "list[]"
                ]
            }
        },
        "sign_transaction": {
            "name": "sign_transaction",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "transaction": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ],
                "block_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "create_block": {
            "name": "create_block",
            "location": 138,
            "return": [],
            "arguments": {
                "signed_transactions": [
                    "str",
                    "int",
                    "None"
                ],
                "block_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "sign_block": {
            "name": "sign_block",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "block": []
            }
        },
        "store_data": {
            "name": "store_data",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "block": []
            }
        }
    },
    "dragonchain-master/dragonchain/transaction_processor/level_1_actions_utest.py": {
        "TestLevelOneActions.test_execute_calls_correct_functions": {
            "name": "test_execute_calls_correct_functions",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_clear_processing": [],
                "mock_get_transactions": [],
                "mock_store_data": [],
                "mock_create_block": [],
                "mock_process_transactions": [],
                "mock_matchmaking": [],
                "mock_activate_indexes": [],
                "mock_get_block_id": []
            }
        },
        "TestLevelOneActions.test_execute_no_ops_on_empty_queue": {
            "name": "test_execute_no_ops_on_empty_queue",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_clear_processing": [],
                "mock_get_transactions": [],
                "mock_store_data": [],
                "mock_create_block": [],
                "mock_process_transactions": [],
                "mock_matchmaking": [
                    "bool"
                ],
                "mock_activate_indexes": []
            }
        },
        "TestLevelOneActions.test_get_new_transactions_calls_incoming_queue": {
            "name": "test_get_new_transactions_calls_incoming_queue",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_txns": [],
                "mock_recover": []
            }
        },
        "TestLevelOneActions.test_get_new_transactions_checks_for_recovery": {
            "name": "test_get_new_transactions_checks_for_recovery",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_txns": [],
                "mock_recover": []
            }
        },
        "TestLevelOneActions.test_process_transactions_signs_all_transactions": {
            "name": "test_process_transactions_signs_all_transactions",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sign": [],
                "mock_callback": []
            }
        },
        "TestLevelOneActions.test_process_transactions_finds_contract_id": {
            "name": "test_process_transactions_finds_contract_id",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sign": [],
                "mock_fire_callback": []
            }
        },
        "TestLevelOneActions.test_process_transactions_no_invoker": {
            "name": "test_process_transactions_no_invoker",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sign": [],
                "mock_fire_callback": []
            }
        },
        "TestLevelOneActions.test_sign_calls_keys_sign": {
            "name": "test_sign_calls_keys_sign",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": []
            }
        },
        "TestLevelOneActions.test_create_block_creates_and_signs": {
            "name": "test_create_block_creates_and_signs",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sign": [],
                "mock_new_block": [],
                "mock_get_proof": []
            }
        },
        "TestLevelOneActions.test_sign_block_strips_payloads": {
            "name": "test_sign_block_strips_payloads",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": [
                    "list[int]"
                ]
            }
        },
        "TestLevelOneActions.test_sign_block_does_pow": {
            "name": "test_sign_block_does_pow",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": []
            }
        },
        "TestLevelOneActions.test_sign_block_does_trust": {
            "name": "test_sign_block_does_trust",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": []
            }
        },
        "TestLevelOneActions.test_store_data_does_correct_things": {
            "name": "test_store_data_does_correct_things",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_store": [],
                "mock_broadcast_schedule_block": [],
                "mock_broadcast_set_block_level": [],
                "mock_insert_block": [],
                "mock_remove_stubs": []
            }
        },
        "TestLevelOneActions.test_activate_pending_indexes_if_necessary": {
            "name": "test_activate_pending_indexes_if_necessary",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_activate": []
            }
        }
    },
    "dragonchain-master/dragonchain/transaction_processor/level_2_actions.py": {
        "execute": {
            "name": "execute",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clear_processing_block": {
            "name": "clear_processing_block",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_new_block": {
            "name": "get_new_block",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "get_verifying_keys": {
            "name": "get_verifying_keys",
            "location": 86,
            "return": [],
            "arguments": {
                "chain_id": [
                    "str"
                ]
            }
        },
        "verify_block": {
            "name": "verify_block",
            "location": 91,
            "return": [],
            "arguments": {
                "block": [
                    "list[str]"
                ],
                "keys": []
            }
        },
        "send_data": {
            "name": "send_data",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "process_transactions": {
            "name": "process_transactions",
            "location": 104,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "l1_block": [
                    "int",
                    "list[int]",
                    "tuple[str]"
                ]
            }
        },
        "verify_transactions": {
            "name": "verify_transactions",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "float",
                    "str",
                    "int",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "keys": [
                    "str",
                    "dict[str, str]",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]",
                    "int",
                    "float"
                ],
                "txn_map": [
                    "dict[str, typing.Any]",
                    "str",
                    "None"
                ]
            }
        },
        "verify_transaction_count": {
            "name": "verify_transaction_count",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "l1_dc_id": [
                    "str",
                    "int"
                ],
                "block_id": [
                    "str",
                    "int"
                ],
                "txn_count": [
                    "int",
                    "None"
                ]
            }
        },
        "mark_invalid": {
            "name": "mark_invalid",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "int",
                    "str"
                ],
                "txn_map": [
                    "dict[str, typing.Any]",
                    "str",
                    "int",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "create_block": {
            "name": "create_block",
            "location": 148,
            "return": [],
            "arguments": {
                "l1_block": [],
                "transaction_map": []
            }
        },
        "get_next_block_info": {
            "name": "get_next_block_info",
            "location": 169,
            "return": [
                "tuple[typing.Union[int,typing.Text]]"
            ],
            "arguments": {}
        },
        "sign_block": {
            "name": "sign_block",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "l2_block": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "recurse_if_necessary": {
            "name": "recurse_if_necessary",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dragonchain-master/dragonchain/transaction_processor/level_2_actions_utest.py": {
        "TestLevelTwoActions.test_execute_calls_correct_functions": {
            "name": "test_execute_calls_correct_functions",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_clear_processing": [],
                "mock_get_block": [],
                "mock_process": [],
                "mock_create_block": [],
                "mock_recurse": [],
                "mock_send_data": [],
                "mock_count": [],
                "mock_matchmaking": []
            }
        },
        "TestLevelTwoActions.test_execute_no_ops_on_empty_queue": {
            "name": "test_execute_no_ops_on_empty_queue",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_clear_processing": [],
                "mock_get_block": [],
                "mock_get_keys": [],
                "mock_verify_block": [],
                "mock_verify_txn": [],
                "mock_create_block": [],
                "mock_recurse": [],
                "mock_send_data": [],
                "mock_matchmaking": []
            }
        },
        "TestLevelTwoActions.test_get_new_block_calls_incoming_queue": {
            "name": "test_get_new_block_calls_incoming_queue",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_next_block": [],
                "mock_recover": []
            }
        },
        "TestLevelTwoActions.test_get_new_block_checks_for_recovery": {
            "name": "test_get_new_block_checks_for_recovery",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_next_block": [],
                "mock_recover": []
            }
        },
        "TestLevelTwoActions.test_get_verifying_keys_returns_correct_keys": {
            "name": "test_get_verifying_keys_returns_correct_keys",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": []
            }
        },
        "TestLevelTwoActions.test_keys_verifys_block": {
            "name": "test_keys_verifys_block",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLevelTwoActions.test_verify_transactions_verifies_each": {
            "name": "test_verify_transactions_verifies_each",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLevelTwoActions.test_verify_transactions_skips_invalid": {
            "name": "test_verify_transactions_skips_invalid",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLevelTwoActions.test_send_data_inserts_and_dispatches": {
            "name": "test_send_data_inserts_and_dispatches",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_insert_block": [],
                "mock_dispatch": []
            }
        },
        "TestLevelTwoActions.test_process_transactions_verifies_if_valid_block": {
            "name": "test_process_transactions_verifies_if_valid_block",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_verify_block": [],
                "mock_invalidate": [],
                "mock_validate": [],
                "mock_get_keys": []
            }
        },
        "TestLevelTwoActions.test_process_transactions_invalidates_if_invalid_block": {
            "name": "test_process_transactions_invalidates_if_invalid_block",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_verify_block": [],
                "mock_invalidate": [],
                "mock_validate": [],
                "mock_get_keys": []
            }
        },
        "TestLevelTwoActions.test_process_transactions_invalidates_if_no_matchmaking_data": {
            "name": "test_process_transactions_invalidates_if_no_matchmaking_data",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_verify_block": [],
                "mock_invalidate": [],
                "mock_validate": [],
                "mock_get_keys": []
            }
        },
        "TestLevelTwoActions.test_mark_invalid_marks_txns_bad": {
            "name": "test_mark_invalid_marks_txns_bad",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLevelTwoActions.test_mark_invalid_ignores_bad_json": {
            "name": "test_mark_invalid_ignores_bad_json",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLevelTwoActions.test_create_block_creates_and_signs_no_prev_proof": {
            "name": "test_create_block_creates_and_signs_no_prev_proof",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_next_info": [],
                "mock_sign_block": [],
                "mock_get_id": [],
                "mock_registration": []
            }
        },
        "TestLevelTwoActions.test_create_block_creates_and_signs_with_prev_proof": {
            "name": "test_create_block_creates_and_signs_with_prev_proof",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_proof": [],
                "mock_sign": [],
                "mock_get_id": [],
                "mock_registration": []
            }
        },
        "TestLevelTwoActions.test_get_next_block_info_with_prev": {
            "name": "test_get_next_block_info_with_prev",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_proof": []
            }
        },
        "TestLevelTwoActions.test_get_next_block_info_without_prev": {
            "name": "test_get_next_block_info_without_prev",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sanity_check": [],
                "mock_get_proof": []
            }
        },
        "TestLevelTwoActions.test_sign_block_does_pow": {
            "name": "test_sign_block_does_pow",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": []
            }
        },
        "TestLevelTwoActions.test_sign_block_does_trust": {
            "name": "test_sign_block_does_trust",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": []
            }
        },
        "TestLevelTwoActions.test_recurse_necessary": {
            "name": "test_recurse_necessary",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_execute": [],
                "mock_is_not_empty": []
            }
        },
        "TestLevelTwoActions.test_recurse_not_necessary": {
            "name": "test_recurse_not_necessary",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_execute": [],
                "mock_is_not_empty": []
            }
        }
    },
    "dragonchain-master/dragonchain/transaction_processor/level_3_actions.py": {
        "execute": {
            "name": "execute",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clear_processing_blocks": {
            "name": "clear_processing_blocks",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "send_data": {
            "name": "send_data",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "recurse_if_necessary": {
            "name": "recurse_if_necessary",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_new_blocks": {
            "name": "get_new_blocks",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "get_verifying_keys": {
            "name": "get_verifying_keys",
            "location": 109,
            "return": [],
            "arguments": {
                "chain_id": [
                    "str"
                ]
            }
        },
        "verify_blocks": {
            "name": "verify_blocks",
            "location": 113,
            "return": [
                "tuple[typing.Union[int,list[typing.Optional[str]],dict[, ],list[],float,list[str]]]"
            ],
            "arguments": {
                "l2_blocks": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "l1_headers": []
            }
        },
        "verify_block": {
            "name": "verify_block",
            "location": 140,
            "return": [
                "tuple[typing.Union[list[typing.Type],list[str],typing.AbstractSet,float,bool]]"
            ],
            "arguments": {
                "block": [
                    "int",
                    "str"
                ],
                "clouds": [
                    "list[typing.Type]",
                    "list[str]",
                    "typing.AbstractSet"
                ],
                "regions": [
                    "list[typing.Type]",
                    "list[str]",
                    "typing.AbstractSet"
                ],
                "ddss": [
                    "float",
                    "list[str]",
                    "bool"
                ],
                "l2_count": [
                    "int"
                ]
            }
        },
        "get_next_block_info": {
            "name": "get_next_block_info",
            "location": 162,
            "return": [
                "tuple[typing.Union[int,typing.Text]]"
            ],
            "arguments": {}
        },
        "create_block": {
            "name": "create_block",
            "location": 179,
            "return": [],
            "arguments": {
                "l1_headers": [
                    "str"
                ],
                "ddss": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None",
                    "int",
                    "float"
                ],
                "valid_block_count": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None",
                    "int",
                    "float"
                ],
                "regions": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None",
                    "int",
                    "float"
                ],
                "clouds": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None",
                    "int",
                    "float"
                ],
                "l2_blocks": [
                    "list[]",
                    "str"
                ]
            }
        },
        "sign_block": {
            "name": "sign_block",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "l3_block": []
            }
        }
    },
    "dragonchain-master/dragonchain/transaction_processor/level_3_actions_utest.py": {
        "TestLevelThreeActions.test_execute_calls_correct_functions": {
            "name": "test_execute_calls_correct_functions",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_clear_processing": [],
                "mock_get_block": [],
                "mock_verify_blocks": [],
                "mock_create_block": [],
                "mock_recurse": [],
                "mock_send_data": [],
                "mock_matchmaking": []
            }
        },
        "TestLevelThreeActions.test_execute_no_ops_on_empty_queue": {
            "name": "test_execute_no_ops_on_empty_queue",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_clear_processing": [],
                "mock_get_block": [],
                "mock_verify_blocks": [],
                "mock_create_block": [],
                "mock_recurse": [],
                "mock_send_data": [],
                "mock_matchmaking": []
            }
        },
        "TestLevelThreeActions.test_execute_skips_on_invalid_block": {
            "name": "test_execute_skips_on_invalid_block",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_block": [],
                "mock_verify_blocks": [],
                "mock_recurse": [],
                "mock_matchmaking": [],
                "mock_clear_blocks": []
            }
        },
        "TestLevelThreeActions.test_send_data_inserts_and_dispatches": {
            "name": "test_send_data_inserts_and_dispatches",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_insert_block": [],
                "mock_dispatch": []
            }
        },
        "TestLevelThreeActions.test_verify_block_returns_data_on_valid_block": {
            "name": "test_verify_block_returns_data_on_valid_block",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_registration": [],
                "mock_get_keys": []
            }
        },
        "TestLevelThreeActions.test_verify_block_returns_inputted_data_on_unverifiable_block": {
            "name": "test_verify_block_returns_inputted_data_on_unverifiable_block",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_keys": [],
                "mock_registration": []
            }
        },
        "TestLevelThreeActions.test_verify_block_returns_what_was_passed_in_on_invalid_block": {
            "name": "test_verify_block_returns_what_was_passed_in_on_invalid_block",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_keys": [],
                "mock_registration": []
            }
        },
        "TestLevelThreeActions.test_get_new_blocks_calls_incoming_queue": {
            "name": "test_get_new_blocks_calls_incoming_queue",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_blocks": [],
                "mock_recover": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestLevelThreeActions.test_get_new_blocks_checks_for_recovery": {
            "name": "test_get_new_blocks_checks_for_recovery",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_blocks": [],
                "mock_recover": []
            }
        },
        "TestLevelThreeActions.test_get_verifying_keys_returns_correct_keys": {
            "name": "test_get_verifying_keys_returns_correct_keys",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": []
            }
        },
        "TestLevelThreeActions.test_create_block_creates_and_signs_no_prev_proof": {
            "name": "test_create_block_creates_and_signs_no_prev_proof",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_block_info": [],
                "mock_sign": [],
                "mock_get_public_id": [],
                "mock_registration": []
            }
        },
        "TestLevelThreeActions.test_create_block_creates_and_signs_with_prev_proof": {
            "name": "test_create_block_creates_and_signs_with_prev_proof",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_block_info": [],
                "mock_sign": [],
                "mock_get_public_id": [],
                "mock_registration": []
            }
        },
        "TestLevelThreeActions.test_get_next_block_info_with_prev": {
            "name": "test_get_next_block_info_with_prev",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_proof": []
            }
        },
        "TestLevelThreeActions.test_get_next_block_info_without_prev": {
            "name": "test_get_next_block_info_without_prev",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sanity_check": [],
                "mock_get_proof": []
            }
        },
        "TestLevelThreeActions.test_sign_block_does_pow": {
            "name": "test_sign_block_does_pow",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": []
            }
        },
        "TestLevelThreeActions.test_sign_block_does_trust": {
            "name": "test_sign_block_does_trust",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": []
            }
        },
        "TestLevelThreeActions.test_recurse_necessary": {
            "name": "test_recurse_necessary",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_execute": [],
                "mock_is_not_empty": []
            }
        },
        "TestLevelThreeActions.test_recurse_not_necessary": {
            "name": "test_recurse_not_necessary",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_execute": [],
                "mock_is_not_empty": []
            }
        },
        "TestLevelThreeActions.test_keys_verifys_blocks": {
            "name": "test_keys_verifys_blocks",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_verify": []
            }
        }
    },
    "dragonchain-master/dragonchain/transaction_processor/level_4_actions.py": {
        "execute": {
            "name": "execute",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clear_processing_blocks": {
            "name": "clear_processing_blocks",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_new_blocks": {
            "name": "get_new_blocks",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "send_data": {
            "name": "send_data",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "get_verifying_keys": {
            "name": "get_verifying_keys",
            "location": 106,
            "return": [],
            "arguments": {
                "chain_id": [
                    "str"
                ]
            }
        },
        "recurse_if_necessary": {
            "name": "recurse_if_necessary",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "verify_blocks": {
            "name": "verify_blocks",
            "location": 118,
            "return": [
                "list[]"
            ],
            "arguments": {
                "l3_blocks": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "l1_headers": []
            }
        },
        "verify_block": {
            "name": "verify_block",
            "location": 141,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "block": [
                    "dict[str, typing.Any]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "create_block": {
            "name": "create_block",
            "location": 157,
            "return": [],
            "arguments": {
                "l1_headers": [],
                "validations": [
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "get_next_block_info": {
            "name": "get_next_block_info",
            "location": 179,
            "return": [
                "tuple[typing.Union[int,typing.Text]]"
            ],
            "arguments": {}
        },
        "sign_block": {
            "name": "sign_block",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "l4_block": []
            }
        }
    },
    "dragonchain-master/dragonchain/transaction_processor/level_4_actions_utest.py": {
        "TestLevelFourActions.test_execute_calls_correct_functions": {
            "name": "test_execute_calls_correct_functions",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_clear_processing": [],
                "mock_get_block": [],
                "mock_verify_blocks": [],
                "mock_create_block": [],
                "mock_recurse": [],
                "mock_send_data": [],
                "mock_matchmaking": []
            }
        },
        "TestLevelFourActions.test_execute_no_ops_on_empty_queue": {
            "name": "test_execute_no_ops_on_empty_queue",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_clear_processing": [],
                "mock_get_block": [],
                "mock_verify_blocks": [],
                "mock_create_block": [],
                "mock_recurse": [],
                "mock_send_data": [],
                "mock_matchmaking": []
            }
        },
        "TestLevelFourActions.test_verify_blocks_skips_duplicates": {
            "name": "test_verify_blocks_skips_duplicates",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_verify": []
            }
        },
        "TestLevelFourActions.test_verify_block_checks_valid_proof": {
            "name": "test_verify_block_checks_valid_proof",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_keys_mock": [
                    "str"
                ]
            }
        },
        "TestLevelFourActions.test_verify_block_invalidates_on_unverifiable_proof": {
            "name": "test_verify_block_invalidates_on_unverifiable_proof",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_keys_mock": [
                    "str"
                ]
            }
        },
        "TestLevelFourActions.test_verify_block_checks_invalid_proof": {
            "name": "test_verify_block_checks_invalid_proof",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_keys_mock": [
                    "str"
                ]
            }
        },
        "TestLevelFourActions.test_get_new_blocks_calls_incoming_queue": {
            "name": "test_get_new_blocks_calls_incoming_queue",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_block": [],
                "mock_recover": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestLevelFourActions.test_get_new_blocks_checks_for_recovery": {
            "name": "test_get_new_blocks_checks_for_recovery",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_block": [],
                "mock_recover": []
            }
        },
        "TestLevelFourActions.test_send_data_inserts_and_dispatches": {
            "name": "test_send_data_inserts_and_dispatches",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_insert_block": [],
                "mock_dispatch": []
            }
        },
        "TestLevelFourActions.test_get_verifying_keys_returns_correct_keys": {
            "name": "test_get_verifying_keys_returns_correct_keys",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": []
            }
        },
        "TestLevelFourActions.test_create_block_creates_and_signs_no_prev_proof": {
            "name": "test_create_block_creates_and_signs_no_prev_proof",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_proof": [],
                "mock_sign": [],
                "mock_get_id": [],
                "mock_registration": []
            }
        },
        "TestLevelFourActions.test_create_block_creates_and_signs_with_prev_proof": {
            "name": "test_create_block_creates_and_signs_with_prev_proof",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_proof": [],
                "mock_sign": [],
                "mock_get_id": [],
                "mock_registration": []
            }
        },
        "TestLevelFourActions.test_get_next_block_info_with_prev": {
            "name": "test_get_next_block_info_with_prev",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_proof": []
            }
        },
        "TestLevelFourActions.test_get_next_block_info_without_prev": {
            "name": "test_get_next_block_info_without_prev",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sanity_check": [],
                "mock_get_proof": []
            }
        },
        "TestLevelFourActions.test_sign_block_does_pow": {
            "name": "test_sign_block_does_pow",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": []
            }
        },
        "TestLevelFourActions.test_sign_block_does_trust": {
            "name": "test_sign_block_does_trust",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_keys": []
            }
        },
        "TestLevelFourActions.test_recurse_necessary": {
            "name": "test_recurse_necessary",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_is_not_empty": [],
                "mock_execute": []
            }
        },
        "TestLevelFourActions.test_recurse_not_necessary": {
            "name": "test_recurse_not_necessary",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_is_not_empty": [],
                "mock_execute": []
            }
        }
    },
    "dragonchain-master/dragonchain/transaction_processor/level_5_actions.py": {
        "setup": {
            "name": "setup",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "execute": {
            "name": "execute",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "process_claims_backlog": {
            "name": "process_claims_backlog",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "broadcast_clean_up": {
            "name": "broadcast_clean_up",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "l5_block": [
                    "str",
                    "typing.Pattern"
                ]
            }
        },
        "store_l4_blocks": {
            "name": "store_l4_blocks",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "next_block_id_to_broadcast": [
                    "str"
                ]
            }
        },
        "verify_blocks": {
            "name": "verify_blocks",
            "location": 159,
            "return": [
                "list[]"
            ],
            "arguments": {
                "l4_blocks": []
            }
        },
        "verify_block": {
            "name": "verify_block",
            "location": 169,
            "return": [],
            "arguments": {
                "l4_block": []
            }
        },
        "broadcast_to_public_chain": {
            "name": "broadcast_to_public_chain",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "l5_block": []
            }
        },
        "check_confirmations": {
            "name": "check_confirmations",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "finalize_block": {
            "name": "finalize_block",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [],
                "last_confirmed_block": [
                    "list[D]"
                ],
                "confirmed_txn_hash": [
                    "str",
                    "bool",
                    "float",
                    "None",
                    "list[list[str]]"
                ]
            }
        },
        "get_last_block_number": {
            "name": "get_last_block_number",
            "location": 246,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "get_last_confirmed_block": {
            "name": "get_last_confirmed_block",
            "location": 254,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[, ]]]"
            ],
            "arguments": {}
        },
        "set_last_block_number": {
            "name": "set_last_block_number",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "block_id": [
                    "str"
                ]
            }
        },
        "set_last_confirmed_block": {
            "name": "set_last_confirmed_block",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "l5_block": []
            }
        },
        "get_last_broadcast_time": {
            "name": "get_last_broadcast_time",
            "location": 269,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_last_watch_time": {
            "name": "get_last_watch_time",
            "location": 274,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "set_last_broadcast_time": {
            "name": "set_last_broadcast_time",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_last_watch_time": {
            "name": "set_last_watch_time",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_funds": {
            "name": "set_funds",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "balance": [
                    "str",
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "should_broadcast": {
            "name": "should_broadcast",
            "location": 291,
            "return": [
                "bool"
            ],
            "arguments": {
                "current_block_id": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "is_time_to_watch": {
            "name": "is_time_to_watch",
            "location": 315,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "watch_for_funds": {
            "name": "watch_for_funds",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "has_funds_for_transactions": {
            "name": "has_funds_for_transactions",
            "location": 355,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_backlog": {
            "name": "is_backlog",
            "location": 374,
            "return": [],
            "arguments": {
                "current_block_id": [
                    "str",
                    "bytes",
                    "list[str]",
                    "int"
                ]
            }
        },
        "create_l5_block": {
            "name": "create_l5_block",
            "location": 378,
            "return": [
                "int",
                "tuple[typing.Union[str,str,str,str,str]]"
            ],
            "arguments": {
                "block_id": [
                    "str"
                ]
            }
        },
        "get_pending_l4_blocks": {
            "name": "get_pending_l4_blocks",
            "location": 395,
            "return": [
                "list[]"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "bytes",
                    "bool",
                    "dict[, ]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/transaction_processor/level_5_actions_utest.py": {
        "TestLevelFiveActions.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLevelFiveActions.tearDown": {
            "name": "tearDown",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLevelFiveActions.test_set_up_sets_module_state_properly": {
            "name": "test_set_up_sets_module_state_properly",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_interchain": [],
                "mock_get_config": []
            }
        },
        "TestLevelFiveActions.test_execute_calls_correct_functions_when_funded_but_not_time_to_broadcast": {
            "name": "test_execute_calls_correct_functions_when_funded_but_not_time_to_broadcast",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_has_funds": [],
                "mock_get_last_block": [],
                "mock_store": [],
                "mock_should_broadcast": [],
                "mock_confirmations": [],
                "mock_backlog": [],
                "mock_matchmaking": []
            }
        },
        "TestLevelFiveActions.test_execute_calls_correct_functions_when_funded_and_time_to_broadcast": {
            "name": "test_execute_calls_correct_functions_when_funded_and_time_to_broadcast",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_has_funds": [],
                "mock_get_last_block": [],
                "mock_store": [],
                "mock_should_broadcast": [],
                "mock_create_l5": [],
                "mock_broadcast": [],
                "mock_broadcast_cleanup": [],
                "mock_watch_for_funds": [],
                "mock_confirmations": [],
                "mock_backlog": [],
                "mock_matchmaking": []
            }
        },
        "TestLevelFiveActions.test_execute_calls_correct_functions_when_out_of_funds": {
            "name": "test_execute_calls_correct_functions_when_out_of_funds",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_has_funds": [],
                "mock_is_time_to_watch": [],
                "mock_watch": [],
                "mock_confirmations": [],
                "mock_backlog": [],
                "mock_matchmaking": []
            }
        },
        "TestLevelFiveActions.test_process_claims_backlog": {
            "name": "test_process_claims_backlog",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_resolve_claim_check": [],
                "mock_srem_sync": [],
                "mock_smembers_sync": []
            }
        },
        "TestLevelFiveActions.test_process_claims_backlog_with_empty_backlog": {
            "name": "test_process_claims_backlog_with_empty_backlog",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_resolve_claim_check": [],
                "mock_srem_sync": [],
                "mock_smembers_sync": []
            }
        },
        "TestLevelFiveActions.test_process_claims_backlog_works_with_matchmaking_404": {
            "name": "test_process_claims_backlog_works_with_matchmaking_404",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_resolve_claim_check": [],
                "mock_srem_sync": [],
                "mock_smembers_sync": []
            }
        },
        "TestLevelFiveActions.test_process_claims_backlog_with_matchmaking_still_failing": {
            "name": "test_process_claims_backlog_with_matchmaking_still_failing",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_resolve_claim_check": [],
                "mock_srem_sync": [],
                "mock_smembers_sync": []
            }
        },
        "TestLevelFiveActions.test_broadcast_cleanup_calls_correct_functions": {
            "name": "test_broadcast_cleanup_calls_correct_functions",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_set_broadcast_time": [],
                "mock_set_block": [],
                "mock_delete_directory": []
            }
        },
        "TestLevelFiveActions.test_store_l4_blocks": {
            "name": "test_store_l4_blocks",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_verify_blocks": [],
                "mock_storage_put": [],
                "mock_clear": [],
                "mock_get_blocks": [],
                "mock_recover": []
            }
        },
        "TestLevelFiveActions.test_verify_blocks_verifies_each": {
            "name": "test_verify_blocks_verifies_each",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_verify": []
            }
        },
        "TestLevelFiveActions.test_verify_block_marks_invalid_block": {
            "name": "test_verify_block_marks_invalid_block",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLevelFiveActions.test_verify_block_validates_block_schema": {
            "name": "test_verify_block_validates_block_schema",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLevelFiveActions.test_broadcast_to_public_chain": {
            "name": "test_broadcast_to_public_chain",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_put_document": [],
                "mock_keys": [],
                "mock_storage_put": []
            }
        },
        "TestLevelFiveActions.test_check_confirmations_finalizes_when_confirmed": {
            "name": "test_check_confirmations_finalizes_when_confirmed",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_storage_get": [],
                "mock_finalize": [],
                "mock_get_last_number": [],
                "mock_get_last_confirmed": []
            }
        },
        "TestLevelFiveActions.test_check_confirmations_removes_unneeded_hashes": {
            "name": "test_check_confirmations_removes_unneeded_hashes",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_block_model": [],
                "mock_retry": [],
                "mock_storage_get": [],
                "mock_finalize": [],
                "mock_get_last_number": [],
                "mock_get_last_confirmed": []
            }
        },
        "TestLevelFiveActions.test_check_confirmations_attempts_to_retry_when_not_confirmed": {
            "name": "test_check_confirmations_attempts_to_retry_when_not_confirmed",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_retry": [],
                "mock_storage_get": [],
                "mock_finalize": [],
                "mock_get_last_number": [],
                "mock_get_last_confirmed": []
            }
        },
        "TestLevelFiveActions.test_check_confirmations_noops_when_no_blocks_to_confirm": {
            "name": "test_check_confirmations_noops_when_no_blocks_to_confirm",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_retry": [],
                "mock_storage_get": [],
                "mock_finalize": [],
                "mock_get_last_number": [],
                "mock_get_last_confirmed": []
            }
        },
        "TestLevelFiveActions.test_finalize_block_calls_correct_actions": {
            "name": "test_finalize_block_calls_correct_actions",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_set_last_confirmed": [],
                "mock_keys": [],
                "mock_dispatch": [],
                "mock_put_json": []
            }
        },
        "TestLevelFiveActions.test_get_last_block_number_returns_zero_on_new_chain": {
            "name": "test_get_last_block_number_returns_zero_on_new_chain",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sanity_check": [],
                "mock_storage_get": []
            }
        },
        "TestLevelFiveActions.test_get_last_block_number_returns_correctly": {
            "name": "test_get_last_block_number_returns_correctly",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sanity_check": [],
                "mock_storage_get": []
            }
        },
        "TestLevelFiveActions.test_get_last_confirmed_block": {
            "name": "test_get_last_confirmed_block",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_storage_get": []
            }
        },
        "TestLevelFiveActions.test_get_last_confirmed_block_returns_new_stub_on_new_chain": {
            "name": "test_get_last_confirmed_block_returns_new_stub_on_new_chain",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_storage_get": []
            }
        },
        "TestLevelFiveActions.test_set_last_block_calls_storage_correctly": {
            "name": "test_set_last_block_calls_storage_correctly",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_storage_put": []
            }
        },
        "TestLevelFiveActions.test_set_last_confirmed_block_calls_storage_correctly": {
            "name": "test_set_last_confirmed_block_calls_storage_correctly",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_storage_put": []
            }
        },
        "TestLevelFiveActions.test_get_last_broadcast_time_calls_storage_correctly": {
            "name": "test_get_last_broadcast_time_calls_storage_correctly",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_storage_get": []
            }
        },
        "TestLevelFiveActions.test_get_last_watch_time_calls_storage_correctly": {
            "name": "test_get_last_watch_time_calls_storage_correctly",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_storage_get": []
            }
        },
        "TestLevelFiveActions.test_set_last_broadcast_time_calls_storage_correctly": {
            "name": "test_set_last_broadcast_time_calls_storage_correctly",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_storage_put": []
            }
        },
        "TestLevelFiveActions.test_set_last_watch_time_calls_storage_correctly": {
            "name": "test_set_last_watch_time_calls_storage_correctly",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_storage_put": []
            }
        },
        "TestLevelFiveActions.test_set_funds_calls_storage_correctly": {
            "name": "test_set_funds_calls_storage_correctly",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_storage_put": []
            }
        },
        "TestLevelFiveActions.test_should_broadcast_returns_false_if_never_set": {
            "name": "test_should_broadcast_returns_false_if_never_set",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_set": [],
                "mock_get": []
            }
        },
        "TestLevelFiveActions.test_should_broadcast_returns_false_if_not_time": {
            "name": "test_should_broadcast_returns_false_if_not_time",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "TestLevelFiveActions.test_should_broadcast_returns_true_if_time_and_backlog": {
            "name": "test_should_broadcast_returns_true_if_time_and_backlog",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_is_backlog": [],
                "mock_get": []
            }
        },
        "TestLevelFiveActions.test_should_broadcast_returns_false_if_time_and_no_backlog": {
            "name": "test_should_broadcast_returns_false_if_time_and_no_backlog",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_set": [],
                "mock_is_backlog": [],
                "mock_get": []
            }
        },
        "TestLevelFiveActions.test_is_time_to_watch_returns_true_if_never_watched": {
            "name": "test_is_time_to_watch_returns_true_if_never_watched",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_set": [],
                "mock_get": []
            }
        },
        "TestLevelFiveActions.test_is_time_to_watch_returns_true_if_time": {
            "name": "test_is_time_to_watch_returns_true_if_time",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "TestLevelFiveActions.test_is_time_to_watch_returns_false_if_not": {
            "name": "test_is_time_to_watch_returns_false_if_not",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "TestLevelFiveActions.test_is_backlog_calls_storage_correctly": {
            "name": "test_is_backlog_calls_storage_correctly",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_storage_check": []
            }
        },
        "TestLevelFiveActions.test_watch_for_funds_calls_correct_functions": {
            "name": "test_watch_for_funds_calls_correct_functions",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_set_watch_time": [],
                "mock_set_funds": [],
                "mock_funded": []
            }
        },
        "TestLevelFiveActions.test_watch_for_funds_does_not_update_matchmaking_if_not_necessary": {
            "name": "test_watch_for_funds_does_not_update_matchmaking_if_not_necessary",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_set_watch_time": [],
                "mock_set_funds": [],
                "mock_funded": []
            }
        },
        "TestLevelFiveActions.test_has_funds_for_transaction_returns_true_if_funds_exist": {
            "name": "test_has_funds_for_transaction_returns_true_if_funds_exist",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "TestLevelFiveActions.test_has_funds_for_transaction_returns_false_for_new_chain": {
            "name": "test_has_funds_for_transaction_returns_false_for_new_chain",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": []
            }
        },
        "TestLevelFiveActions.test_has_funds_for_transaction_returns_false_if_funds_dont_exist": {
            "name": "test_has_funds_for_transaction_returns_false_if_funds_dont_exist",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": [],
                "mock_fund": []
            }
        },
        "TestLevelFiveActions.test_has_funds_for_transaction_does_not_call_matchmaking_when_not_needed": {
            "name": "test_has_funds_for_transaction_does_not_call_matchmaking_when_not_needed",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": [],
                "mock_fund": []
            }
        },
        "TestLevelFiveActions.test_create_block_creates_and_does_not_sign": {
            "name": "test_create_block_creates_and_does_not_sign",
            "location": 530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_pending": [],
                "mock_get_id": [],
                "mock_registration": []
            }
        },
        "TestLevelFiveActions.test_get_pending_l4_blocks_fetches_correctly_from_storage": {
            "name": "test_get_pending_l4_blocks_fetches_correctly_from_storage",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_list": [],
                "mock_get": []
            }
        },
        "TestLevelFiveActions.test_get_pending_l4_blocks_marks_invalid_blocks": {
            "name": "test_get_pending_l4_blocks_marks_invalid_blocks",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_list": [],
                "mock_get": []
            }
        }
    },
    "dragonchain-master/dragonchain/transaction_processor/shared_functions.py": {
        "sanity_check_empty_chain": {
            "name": "sanity_check_empty_chain",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dragonchain-master/dragonchain/transaction_processor/transaction_processor.py": {
        "setup": {
            "name": "setup",
            "location": 39,
            "return": [
                "tuple[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {}
        },
        "error_handler": {
            "name": "error_handler",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "event": [
                    "dict[, ]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/transaction_processor/__init__.py": {},
    "dragonchain-master/dragonchain/webserver/app.py": {},
    "dragonchain-master/dragonchain/webserver/gunicorn_settings.py": {},
    "dragonchain-master/dragonchain/webserver/helpers.py": {
        "flask_http_response": {
            "name": "flask_http_response",
            "location": 35,
            "return": [
                "tuple[typing.Union[bytes,dict[str, typing.Any],dict[, ],int,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "status": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "int"
                ],
                "data": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "format_success": {
            "name": "format_success",
            "location": 44,
            "return": [
                "dict[typing.Text, typing.Union[bool,list[tuple[typing.Union[int,str]]],float,str]]"
            ],
            "arguments": {
                "msg": [
                    "bool",
                    "list[tuple[typing.Union[int,str]]]",
                    "float",
                    "str"
                ]
            }
        },
        "format_error": {
            "name": "format_error",
            "location": 49,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[int,list[int]]]]"
            ],
            "arguments": {
                "category": [
                    "int",
                    "list[int]"
                ],
                "msg": [
                    "int",
                    "list[int]"
                ]
            }
        },
        "action_forbidden": {
            "name": "action_forbidden",
            "location": 83,
            "return": [],
            "arguments": {
                "exception": [
                    "str",
                    "list[list[int]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "invalid_auth": {
            "name": "invalid_auth",
            "location": 88,
            "return": [],
            "arguments": {
                "exception": [
                    "str",
                    "list[recidiviz.persistence.database.schema.state.schema.StatePerson]"
                ]
            }
        },
        "too_many_requests": {
            "name": "too_many_requests",
            "location": 93,
            "return": [],
            "arguments": {
                "exception": [
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "contract_limit_exceeded": {
            "name": "contract_limit_exceeded",
            "location": 98,
            "return": [],
            "arguments": {
                "exception": [
                    "str",
                    "list[list[int]]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "validation_exception": {
            "name": "validation_exception",
            "location": 106,
            "return": [],
            "arguments": {
                "exception": [
                    "float",
                    "str"
                ]
            }
        },
        "bad_request": {
            "name": "bad_request",
            "location": 111,
            "return": [],
            "arguments": {
                "exception": [
                    "str",
                    "float"
                ]
            }
        },
        "interchain_publish_error": {
            "name": "interchain_publish_error",
            "location": 116,
            "return": [],
            "arguments": {
                "exception": []
            }
        },
        "webserver_error_handler": {
            "name": "webserver_error_handler",
            "location": 121,
            "return": [],
            "arguments": {
                "exception": [
                    "dict[str, typing.Any]",
                    "Exception"
                ]
            }
        },
        "verify_custom_indexes_options": {
            "name": "verify_custom_indexes_options",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "custom_indexes": []
            }
        },
        "parse_query_parameters": {
            "name": "parse_query_parameters",
            "location": 219,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "params": []
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/helpers_utest.py": {
        "TestWebserverHelpers.test_flask_http_response_returns_correctly": {
            "name": "test_flask_http_response_returns_correctly",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_format_success_returns_correctly": {
            "name": "test_format_success_returns_correctly",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_format_error_returns_correctly": {
            "name": "test_format_error_returns_correctly",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_not_found": {
            "name": "test_webserver_error_handler_not_found",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_validation_exception": {
            "name": "test_webserver_error_handler_validation_exception",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_action_forbidden": {
            "name": "test_webserver_error_handler_action_forbidden",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_insufficient_crypto": {
            "name": "test_webserver_error_handler_insufficient_crypto",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_contract_conflict": {
            "name": "test_webserver_error_handler_contract_conflict",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_transaction_type_conflict": {
            "name": "test_webserver_error_handler_transaction_type_conflict",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_invalid_transaction_type": {
            "name": "test_webserver_error_handler_invalid_transaction_type",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_contract_limit_exceeded": {
            "name": "test_webserver_error_handler_contract_limit_exceeded",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_bad_state_error": {
            "name": "test_webserver_error_handler_bad_state_error",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_unauthorized_exception": {
            "name": "test_webserver_error_handler_unauthorized_exception",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_api_rate_limit": {
            "name": "test_webserver_error_handler_api_rate_limit",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_invalid_node_level": {
            "name": "test_webserver_error_handler_invalid_node_level",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_not_accepting_verifications": {
            "name": "test_webserver_error_handler_not_accepting_verifications",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_bad_request": {
            "name": "test_webserver_error_handler_bad_request",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_bad_auth_error": {
            "name": "test_webserver_error_handler_bad_auth_error",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_webserver_error_handler_unkown_error": {
            "name": "test_webserver_error_handler_unkown_error",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_http_response": [],
                "mock_report_exception": []
            }
        },
        "TestWebserverHelpers.test_verify_custom_indexes_options_valid_number": {
            "name": "test_verify_custom_indexes_options_valid_number",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_verify_custom_indexes_options_valid_tag": {
            "name": "test_verify_custom_indexes_options_valid_tag",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_verify_custom_indexes_options_valid_text": {
            "name": "test_verify_custom_indexes_options_valid_text",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_verify_custom_indexes_options_bad_type": {
            "name": "test_verify_custom_indexes_options_bad_type",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_parse_query_parameters_all_values": {
            "name": "test_parse_query_parameters_all_values",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_parse_query_parameters_all_values_weird_syntax": {
            "name": "test_parse_query_parameters_all_values_weird_syntax",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_parse_query_parameters_min_values": {
            "name": "test_parse_query_parameters_min_values",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_parse_query_parameters_bad_limit_type": {
            "name": "test_parse_query_parameters_bad_limit_type",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_parse_query_parameters_bad_offset_type": {
            "name": "test_parse_query_parameters_bad_offset_type",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_parse_query_parameters_float_limit_type": {
            "name": "test_parse_query_parameters_float_limit_type",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_parse_query_parameters_float_offset_type": {
            "name": "test_parse_query_parameters_float_offset_type",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_parse_query_parameters_extrapolates_sort_asc": {
            "name": "test_parse_query_parameters_extrapolates_sort_asc",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebserverHelpers.test_parse_query_parameters_fails_if_no_q": {
            "name": "test_parse_query_parameters_fails_if_no_q",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/request_authorizer.py": {
        "Authenticated.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_resource": [
                    "int",
                    "float",
                    "typing.Callable[typing.Any, None]",
                    "None"
                ],
                "api_operation": [
                    "int",
                    "float",
                    "typing.Callable[typing.Any, None]",
                    "None"
                ],
                "api_name": [
                    "bool",
                    "str",
                    "None",
                    "typing.Sequence[str]"
                ],
                "interchain": [
                    "bool"
                ]
            }
        },
        "Authenticated.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "authorized_func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "Authenticated.check_auth": {
            "name": "check_auth",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Authenticated.__call__.decorator": {
            "name": "decorator",
            "location": 44,
            "return": [],
            "arguments": {}
        }
    },
    "dragonchain-master/dragonchain/webserver/start.py": {
        "start": {
            "name": "start",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "dragonchain-master/dragonchain/webserver/__init__.py": {},
    "dragonchain-master/dragonchain/webserver/lib/api_keys.py": {
        "_api_key_model_to_user_dto": {
            "name": "_api_key_model_to_user_dto",
            "location": 32,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "api_key": [
                    "str",
                    "int",
                    "bytes",
                    "None"
                ],
                "with_key": [
                    "bool"
                ]
            }
        },
        "get_api_key_list_v1": {
            "name": "get_api_key_list_v1",
            "location": 45,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {}
        },
        "create_api_key_v1": {
            "name": "create_api_key_v1",
            "location": 57,
            "return": [],
            "arguments": {
                "nickname": [
                    "typing.Text"
                ],
                "permissions_document": [
                    "None",
                    "list[str]",
                    "str",
                    "typing.Iterator"
                ]
            }
        },
        "delete_api_key_v1": {
            "name": "delete_api_key_v1",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "key_id": [
                    "str"
                ]
            }
        },
        "get_api_key_v1": {
            "name": "get_api_key_v1",
            "location": 85,
            "return": [],
            "arguments": {
                "key_id": [
                    "str",
                    "bytes"
                ]
            }
        },
        "update_api_key_v1": {
            "name": "update_api_key_v1",
            "location": 98,
            "return": [],
            "arguments": {
                "key_id": [
                    "str"
                ],
                "nickname": [
                    "None",
                    "str",
                    "typing.Iterable[]"
                ],
                "permissions_document": [
                    "None",
                    "str",
                    "typing.Iterable[]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/api_keys_utest.py": {
        "TestApiKeyLib.test_get_api_key_list_calls_dao_correctly": {
            "name": "test_get_api_key_list_calls_dao_correctly",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_list_keys": []
            }
        },
        "TestApiKeyLib.test_create_api_key_calls_register_with_default_params": {
            "name": "test_create_api_key_calls_register_with_default_params",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_save_key": [
                    "str",
                    "list[str]"
                ],
                "mock_new_from_scratch": []
            }
        },
        "TestApiKeyLib.test_create_api_key_calls_register_with_correct_params": {
            "name": "test_create_api_key_calls_register_with_correct_params",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_save_key": [
                    "str",
                    "list[str]"
                ],
                "mock_new_from_scratch": []
            }
        },
        "TestApiKeyLib.test_delete_api_key_does_not_delete_sc_keys": {
            "name": "test_delete_api_key_does_not_delete_sc_keys",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyLib.test_delete_api_key_does_not_delete_root_key": {
            "name": "test_delete_api_key_does_not_delete_root_key",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_secret": [
                    "dict[str, typing.Any]",
                    "list[str]",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "TestApiKeyLib.test_delete_api_key_calls_appropriately": {
            "name": "test_delete_api_key_calls_appropriately",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_delete_api_key": [],
                "mock_get_secret": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "TestApiKeyLib.test_get_api_key_raises_not_found_when_interchain_key": {
            "name": "test_get_api_key_raises_not_found_when_interchain_key",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyLib.test_get_api_key_calls_appropriately": {
            "name": "test_get_api_key_calls_appropriately",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_key": []
            }
        },
        "TestApiKeyLib.test_update_api_key_raises_forbidden_when_key_id_starts_with_reserved_sequence": {
            "name": "test_update_api_key_raises_forbidden_when_key_id_starts_with_reserved_sequence",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApiKeyLib.test_update_api_key_saves_with_defaults": {
            "name": "test_update_api_key_saves_with_defaults",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_save_key": [
                    "str",
                    "int"
                ],
                "mock_get_key": []
            }
        },
        "TestApiKeyLib.test_update_api_key_saves_with_parameters": {
            "name": "test_update_api_key_saves_with_parameters",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_save_key": [
                    "str"
                ],
                "mock_get_key": []
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/blocks.py": {
        "query_blocks_v1": {
            "name": "query_blocks_v1",
            "location": 35,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "params": [],
                "parse": [
                    "bool"
                ]
            }
        },
        "get_block_by_id_v1": {
            "name": "get_block_by_id_v1",
            "location": 69,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "int",
                    "bytes"
                ],
                "parse": [
                    "bool"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/dragonnet.py": {
        "process_receipt_v1": {
            "name": "process_receipt_v1",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "block_dto": [
                    "str"
                ]
            }
        },
        "enqueue_item_for_verification_v1": {
            "name": "enqueue_item_for_verification_v1",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [
                    "int",
                    "dict[str, str]",
                    "str",
                    "typing.Callable[, ]"
                ],
                "deadline": [
                    "int",
                    "dict[str, str]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_local_claim_v1": {
            "name": "get_local_claim_v1",
            "location": 111,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "int"
                ]
            }
        },
        "register_interchain_auth_v1": {
            "name": "register_interchain_auth_v1",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "chain_registration_body": [
                    "str"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/interchain.py": {
        "_ethereum_client_to_user_dto_v1": {
            "name": "_ethereum_client_to_user_dto_v1",
            "location": 33,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "eth_client": []
            }
        },
        "_bitcoin_client_to_user_dto_v1": {
            "name": "_bitcoin_client_to_user_dto_v1",
            "location": 44,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "btc_client": []
            }
        },
        "_binance_client_to_user_dto_v1": {
            "name": "_binance_client_to_user_dto_v1",
            "location": 55,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "bnb_client": []
            }
        },
        "_get_output_dto_v1": {
            "name": "_get_output_dto_v1",
            "location": 68,
            "return": [],
            "arguments": {
                "client": [
                    "str"
                ]
            }
        },
        "create_bitcoin_interchain_v1": {
            "name": "create_bitcoin_interchain_v1",
            "location": 79,
            "return": [],
            "arguments": {
                "user_data": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "conflict_check": [
                    "bool"
                ]
            }
        },
        "create_ethereum_interchain_v1": {
            "name": "create_ethereum_interchain_v1",
            "location": 88,
            "return": [],
            "arguments": {
                "user_data": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "conflict_check": [
                    "bool"
                ]
            }
        },
        "create_binance_interchain_v1": {
            "name": "create_binance_interchain_v1",
            "location": 97,
            "return": [],
            "arguments": {
                "user_data": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "conflict_check": [
                    "bool"
                ]
            }
        },
        "update_bitcoin_interchain_v1": {
            "name": "update_bitcoin_interchain_v1",
            "location": 106,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None"
                ],
                "user_data": []
            }
        },
        "update_ethereum_interchain_v1": {
            "name": "update_ethereum_interchain_v1",
            "location": 123,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None"
                ],
                "user_data": []
            }
        },
        "update_binance_interchain_v1": {
            "name": "update_binance_interchain_v1",
            "location": 138,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "None"
                ],
                "user_data": []
            }
        },
        "get_interchain_v1": {
            "name": "get_interchain_v1",
            "location": 155,
            "return": [],
            "arguments": {
                "blockchain": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "list_interchain_v1": {
            "name": "list_interchain_v1",
            "location": 159,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "blockchain": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "delete_interchain_v1": {
            "name": "delete_interchain_v1",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "blockchain": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "set_default_interchain_v1": {
            "name": "set_default_interchain_v1",
            "location": 167,
            "return": [],
            "arguments": {
                "blockchain": [
                    "str",
                    "typing.NamedTuple"
                ],
                "name": [
                    "str",
                    "typing.NamedTuple"
                ]
            }
        },
        "get_default_interchain_v1": {
            "name": "get_default_interchain_v1",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "sign_interchain_transaction_v1": {
            "name": "sign_interchain_transaction_v1",
            "location": 175,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "blockchain": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "transaction": [
                    "dict[str, typing.Any]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "publish_interchain_transaction_v1": {
            "name": "publish_interchain_transaction_v1",
            "location": 185,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "blockchain": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "signed_transaction": [
                    "str",
                    "typing.Any",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "legacy_get_blockchain_addresses_v1": {
            "name": "legacy_get_blockchain_addresses_v1",
            "location": 197,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "legacy_sign_blockchain_transaction_v1": {
            "name": "legacy_sign_blockchain_transaction_v1",
            "location": 207,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "network": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "int"
                ],
                "transaction": [
                    "dict[str, typing.Any]",
                    "bool",
                    "list[]",
                    "str"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/interchain_utest.py": {
        "TestInterchain.test_get_output_dto_v1_ethereum": {
            "name": "test_get_output_dto_v1_ethereum",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInterchain.test_get_output_dto_v1_bitcoin": {
            "name": "test_get_output_dto_v1_bitcoin",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInterchain.test_get_output_dto_v1_bad_data": {
            "name": "test_get_output_dto_v1_bad_data",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInterchain.test_get_interchain_v1": {
            "name": "test_get_interchain_v1",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_output": [],
                "mock_get_client": []
            }
        },
        "TestInterchain.test_sign_interchain_v1": {
            "name": "test_sign_interchain_v1",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_client": []
            }
        },
        "TestInterchain.test_publish_interchain_v1": {
            "name": "test_publish_interchain_v1",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_client": []
            }
        },
        "TestInterchain.test_get_default_interchain": {
            "name": "test_get_default_interchain",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_output": [],
                "mock_get_interchain": []
            }
        },
        "TestInterchain.test_set_default_interchain": {
            "name": "test_set_default_interchain",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_output": [],
                "mock_set_default": []
            }
        },
        "TestInterchain.test_delete_interchain": {
            "name": "test_delete_interchain",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_delete": []
            }
        },
        "TestInterchain.test_list_interchain": {
            "name": "test_list_interchain",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_output": [],
                "mock_list": []
            }
        },
        "TestInterchain.test_create_interchain_bitcoin": {
            "name": "test_create_interchain_bitcoin",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_output": [],
                "mock_exist": [
                    "bool"
                ],
                "mock_save_client": [],
                "mock_new_from_user": []
            }
        },
        "TestInterchain.test_create_interchain_bitcoin_throws_if_already_exists": {
            "name": "test_create_interchain_bitcoin_throws_if_already_exists",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_exist": [],
                "mock_new_from_user": []
            }
        },
        "TestInterchain.test_create_interchain_ethereum": {
            "name": "test_create_interchain_ethereum",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_output": [],
                "mock_exist": [
                    "bool"
                ],
                "mock_save_client": [],
                "mock_new_from_user": []
            }
        },
        "TestInterchain.test_create_interchain_ethereum_throws_if_already_exists": {
            "name": "test_create_interchain_ethereum_throws_if_already_exists",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_exist": [],
                "mock_new_from_user": []
            }
        },
        "TestInterchain.test_update_interchain_bitcoin_calls_correctly": {
            "name": "test_update_interchain_bitcoin_calls_correctly",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_interchain": [],
                "mock_create_bitcoin": []
            }
        },
        "TestInterchain.test_update_interchain_ethereum_calls_correctly": {
            "name": "test_update_interchain_ethereum_calls_correctly",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_interchain": [],
                "mock_create_ethereum": []
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/misc.py": {
        "get_v1_status": {
            "name": "get_v1_status",
            "location": 29,
            "return": [
                "dict[typing.Text, typing.Union[str,int,float]]"
            ],
            "arguments": {}
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/misc_utest.py": {
        "TestMisc.test_get_status_retrieves_matchmaking_data_and_id": {
            "name": "test_get_status_retrieves_matchmaking_data_and_id",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_matchmaking": [],
                "mock_get_id": []
            }
        },
        "TestMisc.test_get_status_returns_expected_dto_l1": {
            "name": "test_get_status_returns_expected_dto_l1",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_matchmaking": [
                    "dict[str, dict[str, str]]"
                ],
                "mock_get_id": []
            }
        },
        "TestMisc.test_get_status_returns_expected_dto_l5": {
            "name": "test_get_status_returns_expected_dto_l5",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_matchmaking": [],
                "mock_get_id": []
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/smart_contracts.py": {
        "get_by_id_v1": {
            "name": "get_by_id_v1",
            "location": 36,
            "return": [],
            "arguments": {
                "smart_contract_id": [
                    "str"
                ]
            }
        },
        "get_by_txn_type_v1": {
            "name": "get_by_txn_type_v1",
            "location": 40,
            "return": [],
            "arguments": {
                "txn_type": [
                    "str",
                    "None"
                ]
            }
        },
        "get_id_by_txn_type_v1": {
            "name": "get_id_by_txn_type_v1",
            "location": 44,
            "return": [],
            "arguments": {
                "txn_type": [
                    "str"
                ]
            }
        },
        "list_contracts_v1": {
            "name": "list_contracts_v1",
            "location": 48,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {}
        },
        "create_contract_v1": {
            "name": "create_contract_v1",
            "location": 64,
            "return": [],
            "arguments": {
                "body": []
            }
        },
        "update_contract_v1": {
            "name": "update_contract_v1",
            "location": 99,
            "return": [],
            "arguments": {
                "contract_id": [
                    "str",
                    "int"
                ],
                "update": [
                    "int",
                    "str"
                ]
            }
        },
        "delete_contract_v1": {
            "name": "delete_contract_v1",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "contract_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_logs_v1": {
            "name": "get_logs_v1",
            "location": 151,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "contract_id": [
                    "int",
                    "str"
                ],
                "since": [
                    "None",
                    "str",
                    "int"
                ],
                "tail": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "heap_list_v1": {
            "name": "heap_list_v1",
            "location": 157,
            "return": [
                "list[]"
            ],
            "arguments": {
                "contract_id": [
                    "str",
                    "None"
                ],
                "path": [
                    "str",
                    "bytes",
                    "list[]"
                ]
            }
        },
        "heap_get_v1": {
            "name": "heap_get_v1",
            "location": 167,
            "return": [],
            "arguments": {
                "contract_id": [
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "None",
                    "typing.Mapping",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "path": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/smart_contracts_utest.py": {
        "get_sc_create_body": {
            "name": "get_sc_create_body",
            "location": 27,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]"
            ],
            "arguments": {}
        },
        "get_sc_create_body_with_custom_indexes": {
            "name": "get_sc_create_body_with_custom_indexes",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "get_sc_create_body_with_bad_cron": {
            "name": "get_sc_create_body_with_bad_cron",
            "location": 37,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[typing.Text]]]"
            ],
            "arguments": {}
        },
        "get_sc_update_body": {
            "name": "get_sc_update_body",
            "location": 49,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "TestCreateContract.test_create_contract": {
            "name": "test_create_contract",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_job_proc": [],
                "mock_get_count": [],
                "mock_register_sc_type": [],
                "mock_get_registered": [],
                "mock_add_index": []
            }
        },
        "TestCreateContract.test_create_contract_raises_on_uncaught_error": {
            "name": "test_create_contract_raises_on_uncaught_error",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_count": [
                    "list[]"
                ],
                "mock_register_type": [],
                "mock_get_type": [],
                "mock_task": [],
                "mock_add_index": []
            }
        },
        "TestCreateContract.test_create_contract_validates_cron_string": {
            "name": "test_create_contract_validates_cron_string",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_docs": []
            }
        },
        "TestCreateContract.test_create_contract_with_custom_indexes": {
            "name": "test_create_contract_with_custom_indexes",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_job_proc": [],
                "mock_get_count": [],
                "mock_register_sc_type": [],
                "mock_get_registered": [],
                "mock_add_index": []
            }
        },
        "TestUpdateContract.test_update_contract": {
            "name": "test_update_contract",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_get_by_id": [],
                "patch_job_proc": []
            }
        },
        "TestUpdateContract.test_update_contract_raises_and_resets_state_on_job_start_failure": {
            "name": "test_update_contract_raises_and_resets_state_on_job_start_failure",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_get_by_id": [],
                "patch_job_proc": []
            }
        },
        "TestUpdateContract.test_update_contract_raises_ise_on_uncaught_error": {
            "name": "test_update_contract_raises_ise_on_uncaught_error",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_get_by_id": []
            }
        },
        "TestDeleteContract.test_delete_contract": {
            "name": "test_delete_contract",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_get_by_id": [],
                "patch_job_proc": []
            }
        },
        "TestDeleteContract.test_delete_contract_raises_and_resets_state_on_job_start_failure": {
            "name": "test_delete_contract_raises_and_resets_state_on_job_start_failure",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_get_by_id": [],
                "patch_job_proc": []
            }
        },
        "TestDeleteContract.test_delete_contract_raises_ise_on_uncaught_error": {
            "name": "test_delete_contract_raises_ise_on_uncaught_error",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patch_get_by_id": []
            }
        },
        "TestGetContractLogs.test_get_logs_calls_library_function": {
            "name": "test_get_logs_calls_library_function",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_logs": [],
                "mock_get_contract": []
            }
        },
        "TestGetContractLogs.test_get_logs_calls_library_function_with_params": {
            "name": "test_get_logs_calls_library_function_with_params",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_logs": [],
                "mock_get_contract": []
            }
        },
        "TestGetContractLogs.test_get_logs_throws_not_found": {
            "name": "test_get_logs_throws_not_found",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_logs": [],
                "mock_get_contract": []
            }
        },
        "TestGetContract.test_get_smart_contract_by_txn_type": {
            "name": "test_get_smart_contract_by_txn_type",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_contract": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestGetContract.test_get_smart_contract_by_txn_type_fails": {
            "name": "test_get_smart_contract_by_txn_type_fails",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_contract": []
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/transactions.py": {
        "_get_transaction_stub": {
            "name": "_get_transaction_stub",
            "location": 43,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Union[str,list[],list[str],None,bool]],typing.Text]]"
            ],
            "arguments": {
                "txn_id": [
                    "str",
                    "list[]",
                    "list[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "query_transactions_v1": {
            "name": "query_transactions_v1",
            "location": 47,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "params": [],
                "parse": [
                    "bool"
                ]
            }
        },
        "get_transaction_v1": {
            "name": "get_transaction_v1",
            "location": 94,
            "return": [],
            "arguments": {
                "transaction_id": [
                    "str",
                    "int"
                ],
                "parse": [
                    "bool"
                ]
            }
        },
        "submit_transaction_v1": {
            "name": "submit_transaction_v1",
            "location": 112,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "transaction": [
                    "bytes",
                    "typing.Sequence[typing.Sequence[typing.Any]]",
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ],
                "callback_url": [
                    "str",
                    "None",
                    "bool",
                    "list[]"
                ],
                "api_key": []
            }
        },
        "submit_bulk_transaction_v1": {
            "name": "submit_bulk_transaction_v1",
            "location": 134,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "bulk_transaction": [],
                "api_key": []
            }
        },
        "_generate_transaction_model": {
            "name": "_generate_transaction_model",
            "location": 167,
            "return": [],
            "arguments": {
                "transaction": [
                    "str",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/transactions_utest.py": {
        "TestQueryTransactions.test_query_transactions_calls_search": {
            "name": "test_query_transactions_calls_search",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_txn": []
            }
        },
        "TestQueryTransactions.test_query_transactions_returns_search_result": {
            "name": "test_query_transactions_returns_search_result",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_search": [],
                "mock_select": []
            }
        },
        "TestGetTransactions.test_get_transaction_v1_returns_stub": {
            "name": "test_get_transaction_v1_returns_stub",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sismember": [
                    "list[T]"
                ]
            }
        },
        "TestGetTransactions.test_get_transaction_v1_returns_parsed": {
            "name": "test_get_transaction_v1_returns_parsed",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_sismember": [],
                "mock_search": [],
                "mock_select_txn": []
            }
        },
        "TestSubmitTransactions.test_submit_transaction_checks_if_key_is_allowed": {
            "name": "test_submit_transaction_checks_if_key_is_allowed",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_queue": [],
                "mock_gen_model": []
            }
        },
        "TestSubmitTransactions.test_submit_transaction_bulk_checks_if_key_is_allowed": {
            "name": "test_submit_transaction_bulk_checks_if_key_is_allowed",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_queue": [],
                "mock_gen_model": [],
                "mock_redis": []
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/transaction_types.py": {
        "list_registered_transaction_types_v1": {
            "name": "list_registered_transaction_types_v1",
            "location": 33,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {}
        },
        "register_transaction_type_v1": {
            "name": "register_transaction_type_v1",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "transaction_type_structure": [
                    "str",
                    "typing.Type",
                    "set[str]"
                ]
            }
        },
        "delete_transaction_type_v1": {
            "name": "delete_transaction_type_v1",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "transaction_type": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "get_transaction_type_v1": {
            "name": "get_transaction_type_v1",
            "location": 73,
            "return": [],
            "arguments": {
                "transaction_type": [
                    "str",
                    "typing.Callable[str, str]",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/transaction_types_utest.py": {
        "TestRegisterTransactionModel.test_register_txn_type_name_conflict": {
            "name": "test_register_txn_type_name_conflict",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dao_register_txn_type_mock": []
            }
        },
        "TestRegisterTransactionModel.test_register_txn_type_succeeds": {
            "name": "test_register_txn_type_succeeds",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_registered_type": [],
                "mock_queue": []
            }
        },
        "TestDeleteTransactionType.test_delete_if_txn_type_has_contract_id": {
            "name": "test_delete_if_txn_type_has_contract_id",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dao_get_registered_txn_type_mock": [
                    "typing.Callable[[], int]"
                ],
                "mock_contract_does_exist": []
            }
        },
        "TestDeleteTransactionType.test_delete_txn_type_succeeds": {
            "name": "test_delete_txn_type_succeeds",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_registered_type": [],
                "dao_remove_txn_type_mock": [
                    "list[]"
                ]
            }
        },
        "TestTransactionTypeList.test_list_registered_txn_types_succeeds": {
            "name": "test_list_registered_txn_types_succeeds",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage_get_as_json_mock": [],
                "get_list_mock": []
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/verifications.py": {
        "get_pending_verifications_v1": {
            "name": "get_pending_verifications_v1",
            "location": 32,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "int"
                ]
            }
        },
        "query_verifications_v1": {
            "name": "query_verifications_v1",
            "location": 49,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "None"
                ],
                "params": []
            }
        },
        "query_interchain_broadcasts_v1": {
            "name": "query_interchain_broadcasts_v1",
            "location": 56,
            "return": [
                "list[typing.Union[None,tuple[],str,list[]]]"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "typing.IO",
                    "None"
                ]
            }
        },
        "_query_l5_verification": {
            "name": "_query_l5_verification",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "l5_dc_id": [
                    "int",
                    "str"
                ],
                "timestamp": []
            }
        },
        "_get_verification_records": {
            "name": "_get_verification_records",
            "location": 88,
            "return": [],
            "arguments": {
                "block_id": [
                    "int",
                    "str"
                ],
                "level": [
                    "int"
                ]
            }
        },
        "_level_records": {
            "name": "_level_records",
            "location": 97,
            "return": [
                "list[]"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "None",
                    "int"
                ],
                "level": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "_all_records": {
            "name": "_all_records",
            "location": 101,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "block_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/verifications_dao_utest.py": {
        "TestVerificationDAO.test_get_pending_verifications": {
            "name": "test_get_pending_verifications",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_verifications": [],
                "mock_get_claim_check": []
            }
        },
        "TestVerificationDAO.test_get_verifications_records_on_specific_level": {
            "name": "test_get_verifications_records_on_specific_level",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_all_records": [],
                "mock_level_records": []
            }
        },
        "TestVerificationDAO.test_get_verifications_records_generalized": {
            "name": "test_get_verifications_records_generalized",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_all_records": [],
                "mock_level_records": []
            }
        },
        "TestVerificationDAO.test_get_verifications_records_raises_invalid_node_level": {
            "name": "test_get_verifications_records_raises_invalid_node_level",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_all_records": [],
                "mock_level_records": []
            }
        },
        "TestVerificationDAO.test__level_records_returns_correctly": {
            "name": "test__level_records_returns_correctly",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get": [],
                "mock_list": []
            }
        },
        "TestVerificationDAO.test__all_records_returns_correctly": {
            "name": "test__all_records_returns_correctly",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_level_records": []
            }
        },
        "TestVerificationDAO.test__query_l5_verifications_returns_correctly": {
            "name": "test__query_l5_verifications_returns_correctly",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redisearch_search": []
            }
        },
        "TestVerificationDAO.test__query_l5_verifications_returns_correctly_when_no_results_found": {
            "name": "test__query_l5_verifications_returns_correctly_when_no_results_found",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_redisearch_search": []
            }
        },
        "TestVerificationDAO.test_query_interchain_broadcasts_v1_returns_correctly_when_block_id_doesnt_exist": {
            "name": "test_query_interchain_broadcasts_v1_returns_correctly_when_block_id_doesnt_exist",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_verification_records": []
            }
        },
        "TestVerificationDAO.test_query_interchain_broadcasts_v1_returns_correctly": {
            "name": "test_query_interchain_broadcasts_v1_returns_correctly",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_object": [],
                "mock_get_verification_records": [
                    "bool"
                ],
                "mock_query_l5_verifications": []
            }
        },
        "TestVerificationDAO.test_query_interchain_broadcasts_v1_returns_correctly_when_verification_not_found": {
            "name": "test_query_interchain_broadcasts_v1_returns_correctly_when_verification_not_found",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_object": [],
                "mock_get_verification_records": [
                    "bool"
                ],
                "mock_query_l5_verifications": []
            }
        },
        "TestVerificationDAO.test_query_interchain_broadcasts_v1_returns_correctly_when_block_doesnt_exist": {
            "name": "test_query_interchain_broadcasts_v1_returns_correctly_when_block_doesnt_exist",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_get_object": [],
                "mock_get_verification_records": [],
                "mock_query_l5_verifications": []
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/lib/__init__.py": {},
    "dragonchain-master/dragonchain/webserver/routes/api_keys.py": {
        "apply_routes": {
            "name": "apply_routes",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "create_api_key_v1": {
            "name": "create_api_key_v1",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "get_api_key_v1": {
            "name": "get_api_key_v1",
            "location": 64,
            "return": [],
            "arguments": {
                "key_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "list_api_keys_v1": {
            "name": "list_api_keys_v1",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "delete_api_key_v1": {
            "name": "delete_api_key_v1",
            "location": 77,
            "return": [],
            "arguments": {
                "key_id": [
                    "str",
                    "int"
                ]
            }
        },
        "update_api_key_v1": {
            "name": "update_api_key_v1",
            "location": 86,
            "return": [],
            "arguments": {
                "key_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/routes/blocks.py": {
        "apply_routes": {
            "name": "apply_routes",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "get_block_v1": {
            "name": "get_block_v1",
            "location": 37,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "list[str]",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "query_blocks_v1": {
            "name": "query_blocks_v1",
            "location": 43,
            "return": [],
            "arguments": {
                "block_id": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/routes/dragonnet.py": {
        "apply_routes": {
            "name": "apply_routes",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "receipt_v1": {
            "name": "receipt_v1",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "get_claim_v1": {
            "name": "get_claim_v1",
            "location": 68,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "enqueue_v1": {
            "name": "enqueue_v1",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "dragonnet_auth_v1": {
            "name": "dragonnet_auth_v1",
            "location": 92,
            "return": [],
            "arguments": {}
        }
    },
    "dragonchain-master/dragonchain/webserver/routes/interchain.py": {
        "apply_routes": {
            "name": "apply_routes",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "create_bitcoin_interchain_v1": {
            "name": "create_bitcoin_interchain_v1",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "create_ethereum_interchain_v1": {
            "name": "create_ethereum_interchain_v1",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "create_binance_interchain_v1": {
            "name": "create_binance_interchain_v1",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "update_bitcoin_interchain_v1": {
            "name": "update_bitcoin_interchain_v1",
            "location": 123,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "update_ethereum_interchain_v1": {
            "name": "update_ethereum_interchain_v1",
            "location": 136,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "update_binance_interchain_v1": {
            "name": "update_binance_interchain_v1",
            "location": 149,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "create_bitcoin_transaction_v1": {
            "name": "create_bitcoin_transaction_v1",
            "location": 162,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "create_ethereum_transaction_v1": {
            "name": "create_ethereum_transaction_v1",
            "location": 175,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "create_binance_transaction_v1": {
            "name": "create_binance_transaction_v1",
            "location": 188,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "publish_interchain_transaction_v1": {
            "name": "publish_interchain_transaction_v1",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "list_interchains_v1": {
            "name": "list_interchains_v1",
            "location": 214,
            "return": [],
            "arguments": {
                "blockchain": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "typing.Callable[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "get_interchain_v1": {
            "name": "get_interchain_v1",
            "location": 219,
            "return": [],
            "arguments": {
                "blockchain": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "delete_interchain_v1": {
            "name": "delete_interchain_v1",
            "location": 224,
            "return": [],
            "arguments": {
                "blockchain": [
                    "str",
                    "int",
                    "None"
                ],
                "name": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "set_default_network_v1": {
            "name": "set_default_network_v1",
            "location": 230,
            "return": [],
            "arguments": {}
        },
        "get_default_network_v1": {
            "name": "get_default_network_v1",
            "location": 243,
            "return": [],
            "arguments": {}
        },
        "public_blockchain_address_v1": {
            "name": "public_blockchain_address_v1",
            "location": 251,
            "return": [],
            "arguments": {}
        },
        "public_blockchain_transaction_v1": {
            "name": "public_blockchain_transaction_v1",
            "location": 256,
            "return": [],
            "arguments": {}
        }
    },
    "dragonchain-master/dragonchain/webserver/routes/misc.py": {
        "apply_routes": {
            "name": "apply_routes",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "health_check": {
            "name": "health_check",
            "location": 33,
            "return": [
                "tuple[typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        },
        "get_status_v1": {
            "name": "get_status_v1",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "dragonchain-master/dragonchain/webserver/routes/smart_contracts.py": {
        "apply_routes": {
            "name": "apply_routes",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "get_contract_by_id_v1": {
            "name": "get_contract_by_id_v1",
            "location": 55,
            "return": [],
            "arguments": {
                "contract_id": [
                    "str",
                    "int",
                    "dict[int, dict[str, float]]",
                    "None"
                ]
            }
        },
        "get_contract_by_txn_type_v1": {
            "name": "get_contract_by_txn_type_v1",
            "location": 60,
            "return": [],
            "arguments": {
                "txn_type": [
                    "str",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "list_contract_v1": {
            "name": "list_contract_v1",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "get_smart_contract_logs_v1": {
            "name": "get_smart_contract_logs_v1",
            "location": 70,
            "return": [],
            "arguments": {
                "contract_id": [
                    "str",
                    "int"
                ]
            }
        },
        "post_contract_v1": {
            "name": "post_contract_v1",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "update_contract_v1": {
            "name": "update_contract_v1",
            "location": 100,
            "return": [],
            "arguments": {
                "contract_id": [
                    "str",
                    "int"
                ]
            }
        },
        "delete_contract_v1": {
            "name": "delete_contract_v1",
            "location": 115,
            "return": [],
            "arguments": {
                "contract_id": [
                    "int",
                    "str"
                ]
            }
        },
        "delete_contract_by_txn_type_v1": {
            "name": "delete_contract_by_txn_type_v1",
            "location": 121,
            "return": [],
            "arguments": {
                "txn_type": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "get_sc_heap_v1": {
            "name": "get_sc_heap_v1",
            "location": 128,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "list_sc_heap_v1": {
            "name": "list_sc_heap_v1",
            "location": 148,
            "return": [],
            "arguments": {
                "prefix_key": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/routes/transactions.py": {
        "apply_routes": {
            "name": "apply_routes",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "post_transaction_v1": {
            "name": "post_transaction_v1",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "post_transaction_bulk_v1": {
            "name": "post_transaction_bulk_v1",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "query_transaction_v1": {
            "name": "query_transaction_v1",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "get_transaction_v1": {
            "name": "get_transaction_v1",
            "location": 92,
            "return": [],
            "arguments": {
                "transaction_id": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/routes/transaction_types.py": {
        "apply_routes": {
            "name": "apply_routes",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "register_transaction_type_v1": {
            "name": "register_transaction_type_v1",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "delete_transaction_type_v1": {
            "name": "delete_transaction_type_v1",
            "location": 67,
            "return": [],
            "arguments": {
                "txn_type": [
                    "str"
                ]
            }
        },
        "list_transaction_types_v1": {
            "name": "list_transaction_types_v1",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "get_transaction_type_v1": {
            "name": "get_transaction_type_v1",
            "location": 81,
            "return": [],
            "arguments": {
                "txn_type": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/routes/verifications.py": {
        "apply_routes": {
            "name": "apply_routes",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "get_verification_v1": {
            "name": "get_verification_v1",
            "location": 35,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_pending_verifications_v1": {
            "name": "get_pending_verifications_v1",
            "location": 41,
            "return": [],
            "arguments": {
                "block_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "query_l5_verifications_v1": {
            "name": "query_l5_verifications_v1",
            "location": 46,
            "return": [],
            "arguments": {
                "block_id": [
                    "str"
                ]
            }
        }
    },
    "dragonchain-master/dragonchain/webserver/routes/__init__.py": {
        "route": {
            "name": "route",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        }
    },
    "dragonchain-master/scripts/check_packages.py": {
        "get_version": {
            "name": "get_version",
            "location": 14,
            "return": [
                "str",
                "typing.Pattern",
                "int"
            ],
            "arguments": {
                "package": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_requirements_packages": {
            "name": "get_requirements_packages",
            "location": 25,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {}
        }
    }
}
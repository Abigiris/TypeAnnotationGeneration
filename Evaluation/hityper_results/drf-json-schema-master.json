{
    "drf-json-schema-master/noxfile.py": {
        "install_pipenv_requirements": {
            "name": "install_pipenv_requirements",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "test": {
            "name": "test",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "django": [
                    "str"
                ],
                "drf": [
                    "str"
                ]
            }
        },
        "black": {
            "name": "black",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "mypy": {
            "name": "mypy",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "pydocstyle": {
            "name": "pydocstyle",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        }
    },
    "drf-json-schema-master/setup.py": {},
    "drf-json-schema-master/rest_framework_json_schema/apps.py": {},
    "drf-json-schema-master/rest_framework_json_schema/auto.py": {
        "from_serializer": {
            "name": "from_serializer",
            "location": 12,
            "return": [
                "typing.Type"
            ],
            "arguments": {
                "serializer": [
                    "str",
                    "None"
                ],
                "api_type": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "auto_schema": {
            "name": "auto_schema",
            "location": 91,
            "return": [
                "AutoSchemaDescriptor"
            ],
            "arguments": {
                "api_type": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "AutoSchemaDescriptor.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_type": [
                    "str"
                ],
                "id_field": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "init_kwargs": [
                    "str",
                    "int"
                ]
            }
        },
        "AutoSchemaDescriptor.__get__": {
            "name": "__get__",
            "location": 82,
            "return": [
                "str",
                "int",
                "tuple[]",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "bool",
                    "list[str]",
                    "None",
                    "list[]"
                ],
                "objtype": [
                    "typing.Type",
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "drf-json-schema-master/rest_framework_json_schema/datetime.py": {
        "api_format": {
            "name": "api_format",
            "location": 7,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "drf-json-schema-master/rest_framework_json_schema/exceptions.py": {},
    "drf-json-schema-master/rest_framework_json_schema/filters.py": {
        "get_query_filters": {
            "name": "get_query_filters",
            "location": 11,
            "return": [
                "dict[, typing.Union[tuple[typing.Union[str,typing.Any]],tuple[typing.Union[str,float]],tuple[typing.Union[str,dict[str, typing.Any]]]]]"
            ],
            "arguments": {
                "params": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, float]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "transformer": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "typing.Type",
                    "typing.Mapping",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "drf-json-schema-master/rest_framework_json_schema/helpers.py": {
        "JSONReturnList.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONReturnDict.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "drf-json-schema-master/rest_framework_json_schema/models.py": {},
    "drf-json-schema-master/rest_framework_json_schema/negotiation.py": {
        "JSONAPIContentNegotiation.get_accept_list": {
            "name": "get_accept_list",
            "location": 25,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "JSONAPIContentNegotiation.get_accept_list.jsonapi_params": {
            "name": "jsonapi_params",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "media_type_str": []
            }
        }
    },
    "drf-json-schema-master/rest_framework_json_schema/pagination.py": {
        "JSONAPILimitOffsetPagination.get_paginated_response": {
            "name": "get_paginated_response",
            "location": 15,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "float"
                ]
            }
        }
    },
    "drf-json-schema-master/rest_framework_json_schema/parsers.py": {
        "JSONAPIParser.get_schema": {
            "name": "get_schema",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "parser_context": []
            }
        },
        "JSONAPIParser.parse": {
            "name": "parse",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "media_type": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "parser_context": []
            }
        }
    },
    "drf-json-schema-master/rest_framework_json_schema/relations.py": {
        "ResourceIdField.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str",
                    "typing.Callable[, ]",
                    "list[list[str]]",
                    "typing.Type"
                ],
                "instance": [
                    "str",
                    "typing.Callable[, ]",
                    "list[list[str]]",
                    "typing.Type"
                ]
            }
        },
        "ResourceIdField.get_schema": {
            "name": "get_schema",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResourceIdField.get_data": {
            "name": "get_data",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIRelationshipField.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIRelationshipField.use_pk_only_optimization": {
            "name": "use_pk_only_optimization",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIRelationshipField.get_serializer": {
            "name": "get_serializer",
            "location": 90,
            "return": [
                "dict[str, str]",
                "dict[str, dict[str, str]]",
                "dict[str, dict[, ]]",
                "dict[str, dict[str, typing.Any]]",
                "dict[str, dict[typing.Any, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIRelationshipField.get_type": {
            "name": "get_type",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONAPIRelationshipField.to_representation": {
            "name": "to_representation",
            "location": 105,
            "return": [
                "ResourceIdField",
                "ResourceIdObject"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        }
    },
    "drf-json-schema-master/rest_framework_json_schema/renderers.py": {
        "JSONAPIRenderer.render_obj": {
            "name": "render_obj",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "schema": [],
                "renderer_context": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "context": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "JSONAPIRenderer.render_list": {
            "name": "render_list",
            "location": 35,
            "return": [
                "tuple[list[typing.Union[list[],dict[str, float],int]]]"
            ],
            "arguments": {
                "self": [],
                "obj_list": [
                    "list[str]",
                    "tuple[typing.Union[float,float]]",
                    "str"
                ],
                "schema": [
                    "int"
                ],
                "renderer_context": [
                    "int"
                ],
                "context": [
                    "int"
                ]
            }
        },
        "JSONAPIRenderer.render_data": {
            "name": "render_data",
            "location": 56,
            "return": [
                "tuple[typing.Optional[list[]]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "typing.Callable[, ]"
                ],
                "renderer_context": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "include": [
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "typing.Callable[, ]",
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "JSONAPIRenderer.render_exception": {
            "name": "render_exception",
            "location": 75,
            "return": [
                "list[typing.Union[typing.Mapping,dict[str, typing.Any],list[str],dict[, ],list[dict[, ]],tuple[str],bool]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]",
                    "list[dict[, ]]",
                    "tuple[str]",
                    "bool"
                ],
                "renderer_context": [
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "dict[, ]",
                    "list[dict[, ]]",
                    "tuple[str]",
                    "bool"
                ]
            }
        },
        "JSONAPIRenderer.is_exception": {
            "name": "is_exception",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "bool",
                    "typing.Iterable[bytes]",
                    "None"
                ],
                "renderer_context": [
                    "str"
                ]
            }
        },
        "JSONAPIRenderer.get_schema": {
            "name": "get_schema",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "renderer_context": [
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "bytes",
                    "list[]",
                    "int"
                ]
            }
        },
        "JSONAPIRenderer.get_include": {
            "name": "get_include",
            "location": 97,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "renderer_context": [
                    "dict[str, dict[str, typing.Any]]",
                    "dict[, ]"
                ]
            }
        },
        "JSONAPIRenderer.get_fields": {
            "name": "get_fields",
            "location": 105,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "renderer_context": [
                    "dict[, ]"
                ]
            }
        },
        "JSONAPIRenderer.render": {
            "name": "render",
            "location": 116,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "dict[, ]",
                    "int"
                ],
                "media_type": [
                    "None",
                    "str",
                    "bytes",
                    "tuple[]",
                    "bool"
                ],
                "renderer_context": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "drf-json-schema-master/rest_framework_json_schema/schema.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "tuple[typing.Union[int,int]]",
                    "list[str]",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "str"
                ],
                "include": [
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "list[str]",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "str"
                ],
                "fields": [
                    "None",
                    "list[int]",
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "BaseLinkedObject.render_links": {
            "name": "render_links",
            "location": 59,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str"
                ],
                "context": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "BaseLinkedObject.render_meta": {
            "name": "render_meta",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ],
                "context": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "ResourceObject.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceObject.parse": {
            "name": "parse",
            "location": 116,
            "return": [
                "OrderedDict",
                "dict[typing.Union[str,typing.Any], str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ResourceObject.render": {
            "name": "render",
            "location": 153,
            "return": [
                "tuple[typing.Union[OrderedDict,str,dict[str, str],list[],dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "bool",
                    "dict[, ]",
                    "str"
                ],
                "context": [
                    "bytes",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "ResourceObject.render_attributes": {
            "name": "render_attributes",
            "location": 175,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "dict[str, typing.Any]",
                    "typing.NamedTuple",
                    "bool"
                ]
            }
        },
        "ResourceObject.render_relationships": {
            "name": "render_relationships",
            "location": 184,
            "return": [
                "tuple[typing.Union[OrderedDict,list[]]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "ResourceObject.render_relationship": {
            "name": "render_relationship",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "str",
                    "bytes",
                    "int"
                ],
                "rel_name": [
                    "str",
                    "dict[, ]",
                    "typing.Sequence[]",
                    "None"
                ],
                "rel": [],
                "context": [
                    "dict[, ]",
                    "None",
                    "str"
                ]
            }
        },
        "ResourceObject.from_data": {
            "name": "from_data",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ],
                "attr": []
            }
        },
        "ResourceObject.filter_by_fields": {
            "name": "filter_by_fields",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "typing.Callable[typing.Any, str]",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "typing.Iterable[str]"
                ],
                "fields": [
                    "str",
                    "typing.Type"
                ],
                "name_fn": [
                    "str",
                    "typing.Callable[typing.Any, str]",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ResourceIdObject.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceIdObject.render": {
            "name": "render",
            "location": 270,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "ResourceIdObject.get_schema": {
            "name": "get_schema",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResourceIdObject.get_data": {
            "name": "get_data",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationshipObject.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationshipObject.render_included": {
            "name": "render_included",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "rel_data": [],
                "context": [
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RelationshipObject.render": {
            "name": "render",
            "location": 320,
            "return": [
                "tuple[typing.Union[OrderedDict,list[]]]"
            ],
            "arguments": {
                "self": [],
                "obj_data": [
                    "dict[, ]",
                    "list[str]",
                    "dict[str, dict[str, float]]",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "rel_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "include_this": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "RelationshipObject.parse": {
            "name": "parse",
            "location": 357,
            "return": [
                "list[]",
                "tuple[typing.Union[typing.Any,typing.Any,typing.Any,typing.Any,str]]",
                "int",
                "dict[str, typing.Any]",
                "None"
            ],
            "arguments": {
                "self": [],
                "obj_data": [
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "bool",
                    "str"
                ]
            }
        },
        "LinkObject.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkObject.render": {
            "name": "render",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bool"
                ],
                "request": [
                    "bool"
                ]
            }
        },
        "UrlLink.render": {
            "name": "render",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "list[int]",
                    "bytes"
                ],
                "request": [
                    "dict[str, typing.Any]",
                    "bytes",
                    "bool",
                    "dict[str, str]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ResourceObject.__init__._normalize_rel": {
            "name": "_normalize_rel",
            "location": 106,
            "return": [
                "tuple[typing.Union[str,RelationshipObject]]"
            ],
            "arguments": {
                "rel": []
            }
        }
    },
    "drf-json-schema-master/rest_framework_json_schema/transforms.py": {
        "_upper": {
            "name": "_upper",
            "location": 24,
            "return": [
                "str",
                "tuple[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "Transform.transform": {
            "name": "transform",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "NullTransform.transform": {
            "name": "transform",
            "location": 19,
            "return": [
                "str",
                "typing.Iterable[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "CamelCaseTransform.transform": {
            "name": "transform",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "CamelCaseToUnderscoreTransform.transform": {
            "name": "transform",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list[tuple[typing.Union[str,int]]]"
                ]
            }
        }
    },
    "drf-json-schema-master/rest_framework_json_schema/utils.py": {
        "parse_include": {
            "name": "parse_include",
            "location": 6,
            "return": [],
            "arguments": {
                "include": [
                    "str"
                ]
            }
        }
    },
    "drf-json-schema-master/rest_framework_json_schema/__init__.py": {},
    "drf-json-schema-master/rest_framework_json_schema/migrations/__init__.py": {},
    "drf-json-schema-master/tests/conftest.py": {
        "factory": {
            "name": "factory",
            "location": 8,
            "return": [
                "APIRequestFactory"
            ],
            "arguments": {}
        },
        "auto_reset_data": {
            "name": "auto_reset_data",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "drf-json-schema-master/tests/test_auto.py": {
        "test_from_serializer": {
            "name": "test_from_serializer",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_model_serializer": {
            "name": "test_from_model_serializer",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_relations": {
            "name": "test_model_relations",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_id_primary": {
            "name": "test_non_id_primary",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extra_params": {
            "name": "test_extra_params",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_descriptor": {
            "name": "test_descriptor",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "drf-json-schema-master/tests/test_filters.py": {
        "test_filter_no_transform": {
            "name": "test_filter_no_transform",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter_transform": {
            "name": "test_filter_transform",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "drf-json-schema-master/tests/test_negotiation.py": {
        "test_accept_list": {
            "name": "test_accept_list",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_media_params": {
            "name": "test_media_params",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        }
    },
    "drf-json-schema-master/tests/test_pagination.py": {
        "test_pagination_limit_offset": {
            "name": "test_pagination_limit_offset",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_no_pagination_limit_offset": {
            "name": "test_no_pagination_limit_offset",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        }
    },
    "drf-json-schema-master/tests/test_parsers.py": {
        "test_detail_attributes": {
            "name": "test_detail_attributes",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_list_attributes": {
            "name": "test_list_attributes",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_parse_relationships": {
            "name": "test_parse_relationships",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_post_non_default_id": {
            "name": "test_post_non_default_id",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        }
    },
    "drf-json-schema-master/tests/test_renderers.py": {
        "test_detail_attributes": {
            "name": "test_detail_attributes",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_list_attributes": {
            "name": "test_list_attributes",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_empty_list": {
            "name": "test_empty_list",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_attributes_exception": {
            "name": "test_attributes_exception",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_attributes_options": {
            "name": "test_attributes_options",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_attributes_fields": {
            "name": "test_attributes_fields",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_relationships_empty": {
            "name": "test_relationships_empty",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_to_one_non_empty": {
            "name": "test_to_one_non_empty",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_to_many_non_empty": {
            "name": "test_to_many_non_empty",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_include_to_one": {
            "name": "test_include_to_one",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_include_to_many_and_paths": {
            "name": "test_include_to_many_and_paths",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        },
        "test_relationships_fields": {
            "name": "test_relationships_fields",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "factory": []
            }
        }
    },
    "drf-json-schema-master/tests/test_schema.py": {
        "schema_request": {
            "name": "schema_request",
            "location": 24,
            "return": [],
            "arguments": {
                "factory": [
                    "dict[, ]",
                    "Exception",
                    "None",
                    "list[int]",
                    "typing.Mapping"
                ]
            }
        },
        "context": {
            "name": "context",
            "location": 30,
            "return": [
                "Context"
            ],
            "arguments": {
                "schema_request": [
                    "set[str]"
                ]
            }
        },
        "test_resource_object_default": {
            "name": "test_resource_object_default",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str"
                ]
            }
        },
        "test_constructor": {
            "name": "test_constructor",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "float"
                ]
            }
        },
        "test_subclass": {
            "name": "test_subclass",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "dict[str, typing.Sequence[str]]",
                    "bool"
                ]
            }
        },
        "test_links": {
            "name": "test_links",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_meta": {
            "name": "test_meta",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "float"
                ]
            }
        },
        "test_render_relationships": {
            "name": "test_render_relationships",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "test_render_complex_relationship": {
            "name": "test_render_complex_relationship",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_tolerate_missing_attributes": {
            "name": "test_tolerate_missing_attributes",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "float"
                ]
            }
        },
        "test_tolerate_missing_relationships": {
            "name": "test_tolerate_missing_relationships",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_render_included": {
            "name": "test_render_included",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_request": []
            }
        },
        "test_render_included_path": {
            "name": "test_render_included_path",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_request": [
                    "str",
                    "None"
                ]
            }
        },
        "test_render_invalid_include": {
            "name": "test_render_invalid_include",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_request": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "test_render_sparse_fields": {
            "name": "test_render_sparse_fields",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_request": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_sparse_transformed_fields": {
            "name": "test_sparse_transformed_fields",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_request": []
            }
        },
        "test_transform": {
            "name": "test_transform",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "str",
                    "float"
                ]
            }
        },
        "test_parse": {
            "name": "test_parse",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "int",
                    "str"
                ]
            }
        },
        "test_parse_partial": {
            "name": "test_parse_partial",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "int",
                    "str"
                ]
            }
        },
        "test_parse_type_conflict": {
            "name": "test_parse_type_conflict",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "schema_request": []
            }
        },
        "test_links.ObjectLink.render": {
            "name": "render",
            "location": 84,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "request": []
            }
        },
        "test_render_included.ArtistLink.get_schema": {
            "name": "get_schema",
            "location": 374,
            "return": [
                "ArtistObject"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_render_included.ArtistLink.get_data": {
            "name": "get_data",
            "location": 377,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_render_included_path.TrackLink.get_schema": {
            "name": "get_schema",
            "location": 420,
            "return": [
                "TrackObject"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_render_included_path.TrackLink.get_data": {
            "name": "get_data",
            "location": 423,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_render_included_path.AlbumLink.get_schema": {
            "name": "get_schema",
            "location": 432,
            "return": [
                "ArtistObject"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_render_included_path.AlbumLink.get_data": {
            "name": "get_data",
            "location": 435,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_render_sparse_fields.ArtistLink.get_schema": {
            "name": "get_schema",
            "location": 536,
            "return": [
                "ArtistObject"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_render_sparse_fields.ArtistLink.get_data": {
            "name": "get_data",
            "location": 539,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_sparse_transformed_fields.ArtistLink.get_schema": {
            "name": "get_schema",
            "location": 623,
            "return": [
                "ArtistObject"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_sparse_transformed_fields.ArtistLink.get_data": {
            "name": "get_data",
            "location": 626,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "drf-json-schema-master/tests/test_transforms.py": {
        "test_camel_case_transform": {
            "name": "test_camel_case_transform",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_camel_case_to_underscore_transform": {
            "name": "test_camel_case_to_underscore_transform",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "drf-json-schema-master/tests/test_utils.py": {
        "test_parse_include_empty": {
            "name": "test_parse_include_empty",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_include_single": {
            "name": "test_parse_include_single",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_include_complicated": {
            "name": "test_parse_include_complicated",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "drf-json-schema-master/tests/__init__.py": {},
    "drf-json-schema-master/tests/dummy/settings.py": {},
    "drf-json-schema-master/tests/dummy/urls.py": {},
    "drf-json-schema-master/tests/dummy/wsgi.py": {},
    "drf-json-schema-master/tests/dummy/__init__.py": {},
    "drf-json-schema-master/tests/support/decorators.py": {},
    "drf-json-schema-master/tests/support/serializers.py": {
        "get_artists": {
            "name": "get_artists",
            "location": 164,
            "return": [
                "QuerySet"
            ],
            "arguments": {}
        },
        "get_albums": {
            "name": "get_albums",
            "location": 169,
            "return": [
                "QuerySet"
            ],
            "arguments": {}
        },
        "get_tracks": {
            "name": "get_tracks",
            "location": 174,
            "return": [
                "QuerySet"
            ],
            "arguments": {}
        },
        "get_non_default_ids": {
            "name": "get_non_default_ids",
            "location": 179,
            "return": [
                "QuerySet"
            ],
            "arguments": {}
        },
        "reset_data": {
            "name": "reset_data",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BaseModel.pk": {
            "name": "pk",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.serializable_value": {
            "name": "serializable_value",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "set[str]",
                    "dict[str, typing.Type]",
                    "dict[, ]"
                ]
            }
        },
        "Artist.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "list[]"
                ],
                "first_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "last_name": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "Artist.update": {
            "name": "update",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ],
                "first_name": [
                    "str",
                    "list[str]"
                ],
                "last_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Album.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "None"
                ],
                "album_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "artist": [
                    "str",
                    "None",
                    "bool",
                    "typing.MutableMapping"
                ],
                "tracks": [
                    "None",
                    "str",
                    "int",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "Album.tracks": {
            "name": "tracks",
            "location": 72,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "track_num": [
                    "bool",
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ],
                "album": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "NonDefaultId.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "non_default_id": [
                    "str",
                    "int",
                    "None"
                ],
                "name": [
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "NonDefaultId.pk": {
            "name": "pk",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objs": [
                    "int",
                    "float"
                ]
            }
        },
        "QuerySet.__iter__": {
            "name": "__iter__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.get": {
            "name": "get",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "pk": [
                    "str",
                    "bool"
                ]
            }
        },
        "QuerySet.add": {
            "name": "add",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "float",
                    "int"
                ]
            }
        },
        "QuerySet.count": {
            "name": "count",
            "location": 155,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuerySet.__getitem__": {
            "name": "__getitem__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "list[str]"
                ]
            }
        },
        "ArtistSerializer.create": {
            "name": "create",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict[, ]",
                    "typing.OrderedDict",
                    "typing.AnyStr"
                ]
            }
        },
        "ArtistSerializer.update": {
            "name": "update",
            "location": 240,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict[, ]"
                ],
                "validated_data": [
                    "dict[, ]"
                ]
            }
        },
        "AlbumSerializer.create": {
            "name": "create",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict[, ]",
                    "typing.OrderedDict",
                    "typing.AnyStr"
                ]
            }
        },
        "NonDefaultIdSerializer.create": {
            "name": "create",
            "location": 288,
            "return": [
                "dict[, ]",
                "typing.Mapping"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "drf-json-schema-master/tests/support/urls.py": {},
    "drf-json-schema-master/tests/support/views.py": {
        "BaseViewSet.get_object": {
            "name": "get_object",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseViewSet.filter_queryset": {
            "name": "filter_queryset",
            "location": 58,
            "return": [
                "list[typing.Union[django.db.models.Model,str]]",
                "list[django.db.models.Model]",
                "dict[str, set[str]]"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "list[django.db.models.Model]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "ArtistViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlbumViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlbumViewSet.get_serializer": {
            "name": "get_serializer",
            "location": 102,
            "return": [
                "AlbumSerializer"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlbumViewSet.relationship_artist": {
            "name": "relationship_artist",
            "location": 107,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlbumViewSet.related_artist": {
            "name": "related_artist",
            "location": 113,
            "return": [
                "Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrackViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NonDefaultIdViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "drf-json-schema-master/tests/support/__init__.py": {}
}
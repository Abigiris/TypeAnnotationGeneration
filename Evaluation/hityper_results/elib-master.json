{
    "elib-master/setup.py": {
        "read_local_files": {
            "name": "read_local_files",
            "location": 48,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "read_local_files._read_single_file": {
            "name": "_read_single_file",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": []
            }
        }
    },
    "elib-master/elib/console.py": {
        "set_title": {
            "name": "set_title",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "title": []
            }
        },
        "_sanitize": {
            "name": "_sanitize",
            "location": 23,
            "return": [],
            "arguments": {
                "input_": [],
                "prefix": [
                    "bool"
                ]
            }
        },
        "_output": {
            "name": "_output",
            "location": 29,
            "return": [],
            "arguments": {
                "txt": [],
                "color": []
            }
        },
        "info": {
            "name": "info",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "txt": []
            }
        },
        "error": {
            "name": "error",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "txt": []
            }
        },
        "cmd_start": {
            "name": "cmd_start",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "txt": []
            }
        },
        "cmd_end": {
            "name": "cmd_end",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "txt": []
            }
        },
        "std_out": {
            "name": "std_out",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "txt": []
            }
        },
        "std_err": {
            "name": "std_err",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "txt": []
            }
        }
    },
    "elib-master/elib/custom_random.py": {
        "random_string": {
            "name": "random_string",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "chars": []
            }
        },
        "random_bytes": {
            "name": "random_bytes",
            "location": 22,
            "return": [],
            "arguments": {
                "length": [
                    "int"
                ]
            }
        }
    },
    "elib-master/elib/downloader.py": {
        "_get_http_pool": {
            "name": "_get_http_pool",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "download": {
            "name": "download",
            "location": 275,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "typing.MutableMapping",
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "outfile": [
                    "str"
                ],
                "hexdigest": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Downloader.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int",
                    "float",
                    "dict[, ]",
                    "None"
                ],
                "filename": [
                    "str"
                ],
                "content_length": [
                    "None",
                    "bool",
                    "list[str]",
                    "str",
                    "list[]"
                ],
                "hexdigest": [
                    "None",
                    "str",
                    "int",
                    "float",
                    "dict[, ]"
                ],
                "download_retries": [
                    "int"
                ],
                "block_size": [
                    "int"
                ],
                "hash_method": [
                    "typing.Text"
                ]
            }
        },
        "Downloader._write_to_file": {
            "name": "_write_to_file",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader._check_hash": {
            "name": "_check_hash",
            "location": 60,
            "return": [
                "None",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader._calc_eta": {
            "name": "_calc_eta",
            "location": 83,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "start": [
                    "int",
                    "float"
                ],
                "now": [
                    "int",
                    "float"
                ],
                "total": [
                    "int",
                    "None",
                    "float"
                ],
                "current": [
                    "float",
                    "int"
                ]
            }
        },
        "Downloader._calc_progress_percent": {
            "name": "_calc_progress_percent",
            "location": 102,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "received": [
                    "int",
                    "float"
                ],
                "total": [
                    "float",
                    "int"
                ]
            }
        },
        "Downloader._get_content_length": {
            "name": "_get_content_length",
            "location": 113,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes",
                    "None",
                    "dict[str, str]",
                    "list[str]"
                ]
            }
        },
        "Downloader._best_block_size": {
            "name": "_best_block_size",
            "location": 125,
            "return": [
                "int"
            ],
            "arguments": {
                "time_": [
                    "int",
                    "float"
                ],
                "chunk": [
                    "int"
                ]
            }
        },
        "Downloader._create_response": {
            "name": "_create_response",
            "location": 143,
            "return": [
                "None",
                "str",
                "dict[str, typing.Union[int,None]]",
                "typing.MutableMapping",
                "bytes",
                "list[str]",
                "typing.OrderedDict",
                "typing.Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader.download_to_memory": {
            "name": "download_to_memory",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader.download": {
            "name": "download",
            "location": 249,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader.download_to_memory._progress_hook": {
            "name": "_progress_hook",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "data_": []
            }
        }
    },
    "elib-master/elib/exe_version.py": {
        "_low_word": {
            "name": "_low_word",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {
                "dword": [
                    "int"
                ]
            }
        },
        "_high_word": {
            "name": "_high_word",
            "location": 16,
            "return": [
                "int"
            ],
            "arguments": {
                "dword": [
                    "int"
                ]
            }
        },
        "_parse_file_info": {
            "name": "_parse_file_info",
            "location": 50,
            "return": [
                "VersionInfo",
                "None"
            ],
            "arguments": {
                "file_info_list": [
                    "list[str]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "get_product_version": {
            "name": "get_product_version",
            "location": 61,
            "return": [
                "dict[str, typing.Any]",
                "list[]",
                "str",
                "bool",
                "typing.ChainMap",
                "dict[str, typing.Union[bool,str]]",
                "list[tuple[typing.Union[None,typing.Any,str]]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "VersionInfo.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_version": [
                    "str"
                ],
                "full_version": [
                    "int",
                    "None",
                    "str",
                    "typing.Iterable[typing.Iterable[]]"
                ]
            }
        },
        "VersionInfo.file_version": {
            "name": "file_version",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.full_version": {
            "name": "full_version",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "VersionInfo.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "elib-master/elib/hash_.py": {
        "get_hash": {
            "name": "get_hash",
            "location": 12,
            "return": [
                "int",
                "float",
                "typing.Deque",
                "str"
            ],
            "arguments": {
                "data": [
                    "str"
                ],
                "method": [
                    "typing.Text"
                ]
            }
        }
    },
    "elib-master/elib/known_folders.py": {
        "get_path": {
            "name": "get_path",
            "location": 180,
            "return": [],
            "arguments": {
                "folder_id": [
                    "str",
                    "int"
                ],
                "user_handle": []
            }
        },
        "GUID.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uuid_": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "CurrentUser.saved_games": {
            "name": "saved_games",
            "location": 210,
            "return": [],
            "arguments": {}
        }
    },
    "elib-master/elib/paste.py": {
        "create_new_paste": {
            "name": "create_new_paste",
            "location": 22,
            "return": [],
            "arguments": {
                "title": [
                    "str",
                    "typing.IO",
                    "typing.BinaryIO"
                ],
                "files": [
                    "str"
                ],
                "public": [
                    "bool"
                ],
                "language": [
                    "typing.Text"
                ]
            }
        }
    },
    "elib-master/elib/path.py": {
        "ensure_path": {
            "name": "ensure_path",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "ensure_file": {
            "name": "ensure_file",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "ensure_dir": {
            "name": "ensure_dir",
            "location": 44,
            "return": [],
            "arguments": {}
        }
    },
    "elib-master/elib/pretty.py": {
        "_indent": {
            "name": "_indent",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "indent": [
                    "int"
                ]
            }
        },
        "pretty_format": {
            "name": "pretty_format",
            "location": 14,
            "return": [],
            "arguments": {
                "obj": [
                    "list[int]",
                    "bool",
                    "None",
                    "dict[str, dict[str, int]]"
                ],
                "indent": [
                    "int"
                ]
            }
        }
    },
    "elib-master/elib/repo.py": {
        "Repo.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.get_current_branch": {
            "name": "get_current_branch",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.tag": {
            "name": "tag",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [],
                "overwrite": []
            }
        },
        "Repo.list_tags": {
            "name": "list_tags",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "Repo.remove_tag": {
            "name": "remove_tag",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.get_latest_tag": {
            "name": "get_latest_tag",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.latest_commit": {
            "name": "latest_commit",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.is_on_tag": {
            "name": "is_on_tag",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.get_current_tag": {
            "name": "get_current_tag",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.stash": {
            "name": "stash",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "stash_name": []
            }
        },
        "Repo.unstash": {
            "name": "unstash",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.ensure": {
            "name": "ensure",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "Repo.last_commit_msg": {
            "name": "last_commit_msg",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.untracked_files": {
            "name": "untracked_files",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.status": {
            "name": "status",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.list_staged_files": {
            "name": "list_staged_files",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.index_is_empty": {
            "name": "index_is_empty",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.changed_files": {
            "name": "changed_files",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.reset_index": {
            "name": "reset_index",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.stage_all": {
            "name": "stage_all",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.stage_modified": {
            "name": "stage_modified",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.stage_subset": {
            "name": "stage_subset",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.add_skip_ci_to_commit_msg": {
            "name": "add_skip_ci_to_commit_msg",
            "location": 273,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "Repo._sanitize_files_to_add": {
            "name": "_sanitize_files_to_add",
            "location": 291,
            "return": [],
            "arguments": {
                "files_to_add": []
            }
        },
        "Repo.commit": {
            "name": "commit",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "files_to_add": [],
                "allow_empty": []
            }
        },
        "Repo._sanitize_amend_commit_message": {
            "name": "_sanitize_amend_commit_message",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "append_to_msg": [],
                "new_message": [],
                "previous_message": []
            }
        },
        "Repo.amend_commit": {
            "name": "amend_commit",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "append_to_msg": [],
                "new_message": [],
                "files_to_add": []
            }
        },
        "Repo.merge": {
            "name": "merge",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "ref_name": []
            }
        },
        "Repo.push": {
            "name": "push",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "set_upstream": []
            }
        },
        "Repo.push_tags": {
            "name": "push_tags",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.list_branches": {
            "name": "list_branches",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.get_sha": {
            "name": "get_sha",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo.get_short_sha": {
            "name": "get_short_sha",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repo._validate_branch_name": {
            "name": "_validate_branch_name",
            "location": 484,
            "return": [],
            "arguments": {
                "self": [],
                "branch_name": []
            }
        },
        "Repo.checkout": {
            "name": "checkout",
            "location": 491,
            "return": [],
            "arguments": {
                "self": [],
                "reference": []
            }
        },
        "Repo.create_branch": {
            "name": "create_branch",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "branch_name": []
            }
        },
        "Repo.create_branch_and_checkout": {
            "name": "create_branch_and_checkout",
            "location": 536,
            "return": [],
            "arguments": {
                "self": [],
                "branch_name": []
            }
        },
        "Repo.is_dirty": {
            "name": "is_dirty",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "untracked": []
            }
        }
    },
    "elib-master/elib/resource_path.py": {
        "_get_from_dev": {
            "name": "_get_from_dev",
            "location": 13,
            "return": [],
            "arguments": {
                "package_name": [
                    "str",
                    "None"
                ],
                "relative_path": [
                    "str",
                    "None"
                ]
            }
        },
        "_get_from_sys": {
            "name": "_get_from_sys",
            "location": 17,
            "return": [],
            "arguments": {
                "_": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ],
                "relative_path": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "_get_from_package": {
            "name": "_get_from_package",
            "location": 21,
            "return": [],
            "arguments": {
                "package_name": [
                    "str"
                ],
                "relative_path": [
                    "str"
                ]
            }
        },
        "get_resource_path": {
            "name": "get_resource_path",
            "location": 25,
            "return": [],
            "arguments": {
                "package_name": [
                    "str",
                    "bytes"
                ],
                "relative_path": [
                    "str",
                    "typing.Iterable[pathlib.Path]"
                ]
            }
        }
    },
    "elib-master/elib/run.py": {
        "_append_exe": {
            "name": "_append_exe",
            "location": 18,
            "return": [],
            "arguments": {
                "executable": []
            }
        },
        "_set_paths": {
            "name": "_set_paths",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "_search_paths": {
            "name": "_search_paths",
            "location": 33,
            "return": [],
            "arguments": {
                "paths": [],
                "executable": []
            }
        },
        "find_executable": {
            "name": "find_executable",
            "location": 45,
            "return": [],
            "arguments": {
                "executable": []
            }
        },
        "filter_line": {
            "name": "filter_line",
            "location": 89,
            "return": [],
            "arguments": {
                "line": [],
                "filters": []
            }
        },
        "_parse_output": {
            "name": "_parse_output",
            "location": 110,
            "return": [],
            "arguments": {
                "process": [],
                "filters": []
            }
        },
        "_process_run_error": {
            "name": "_process_run_error",
            "location": 122,
            "return": [],
            "arguments": {
                "mute": [],
                "result": [],
                "failure_ok": [],
                "process": [],
                "exe_short": []
            }
        },
        "_process_run_success": {
            "name": "_process_run_success",
            "location": 140,
            "return": [],
            "arguments": {
                "mute": [],
                "result": [],
                "process": [],
                "exe_short": []
            }
        },
        "_process_run_result": {
            "name": "_process_run_result",
            "location": 155,
            "return": [],
            "arguments": {
                "process": [],
                "mute": [],
                "exe_short": [],
                "failure_ok": [],
                "result": []
            }
        },
        "_prepare_run_setup_filters": {
            "name": "_prepare_run_setup_filters",
            "location": 175,
            "return": [],
            "arguments": {
                "filters": []
            }
        },
        "_prepare_run_find_exe": {
            "name": "_prepare_run_find_exe",
            "location": 182,
            "return": [],
            "arguments": {
                "cmd": []
            }
        },
        "_prepare_run_advertise": {
            "name": "_prepare_run_advertise",
            "location": 189,
            "return": [],
            "arguments": {
                "mute": [],
                "cmd": []
            }
        },
        "run": {
            "name": "run",
            "location": 198,
            "return": [],
            "arguments": {
                "cmd": []
            }
        }
    },
    "elib-master/elib/sentry.py": {
        "filter_breadcrumbs": {
            "name": "filter_breadcrumbs",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "_logger": [
                    "str",
                    "bool",
                    "list[]"
                ],
                "level": [
                    "float",
                    "typing.Callable[None, bool]",
                    "list[str]",
                    "int"
                ],
                "msg": [
                    "float",
                    "typing.Callable[None, bool]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "SentryContext.get_context": {
            "name": "get_context",
            "location": 25,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentry.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dsn": [
                    "str"
                ],
                "version": [
                    "bool"
                ],
                "logger_name": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Sentry.set_context": {
            "name": "set_context",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentry.register_context": {
            "name": "register_context",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context_name": [
                    "str",
                    "bool"
                ],
                "context_provider": [
                    "str",
                    "bool"
                ]
            }
        },
        "Sentry.add_crumb": {
            "name": "add_crumb",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [],
                "category": [],
                "level": []
            }
        },
        "Sentry.captureMessage": {
            "name": "captureMessage",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "str",
                    "typing.Callable[bytes, bytes]"
                ]
            }
        },
        "Sentry.captureException": {
            "name": "captureException",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_info": [
                    "None",
                    "typing.Type",
                    "list[str]",
                    "dict[typing.Hashable, typing.Any]"
                ]
            }
        }
    },
    "elib-master/elib/settings.py": {},
    "elib-master/elib/tts.py": {
        "_patch_faulty_function": {
            "name": "_patch_faulty_function",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "text_to_speech": {
            "name": "text_to_speech",
            "location": 44,
            "return": [],
            "arguments": {
                "text": [],
                "file_path": [],
                "overwrite": []
            }
        }
    },
    "elib-master/elib/__init__.py": {},
    "elib-master/elib/config/config.py": {
        "BaseConfig.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str"
                ],
                "default_dict": [
                    "None",
                    "str",
                    "typing.Any",
                    "dict[, ]"
                ]
            }
        }
    },
    "elib-master/elib/config/property.py": {
        "ConfigProp.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "default": [
                    "typing.Text"
                ],
                "namespace": [
                    "None",
                    "int",
                    "dict[str, tuple[typing.Union[str,str]]]",
                    "typing.Sequence[str]",
                    "list[str]"
                ]
            }
        },
        "ConfigProp._name_without_namespace": {
            "name": "_name_without_namespace",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigProp._value": {
            "name": "_value",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ConfigProp._no_default": {
            "name": "_no_default",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "ConfigProp.__get__": {
            "name": "__get__",
            "location": 47,
            "return": [
                "ConfigProp"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "typing.Callable[, ]",
                    "tuple[typing.Type]",
                    "dict[, ]",
                    "str",
                    "None"
                ],
                "owner": [
                    "None",
                    "typing.Type"
                ]
            }
        },
        "ConfigProp.__set_name__": {
            "name": "__set_name__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        }
    },
    "elib-master/elib/config/yaml_config.py": {
        "update_nested_dict": {
            "name": "update_nested_dict",
            "location": 14,
            "return": [
                "typing.MutableMapping",
                "dict[str, typing.Any]",
                "dict[, ]",
                "typing.Type",
                "typing.Callable[[], None]",
                "str"
            ],
            "arguments": {
                "target_dict": [
                    "typing.MutableMapping",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Callable[[], None]",
                    "str"
                ],
                "source_dict": [
                    "typing.MutableMapping",
                    "typing.Iterable[str]",
                    "typing.Mapping",
                    "str"
                ]
            }
        },
        "flatten_dict": {
            "name": "flatten_dict",
            "location": 33,
            "return": [],
            "arguments": {
                "source_dict": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "parent_key": [],
                "sep": []
            }
        },
        "YAMLConfig.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "possible_paths": [
                    "str",
                    "typing.BinaryIO"
                ]
            }
        },
        "YAMLConfig.parse_yaml_file": {
            "name": "parse_yaml_file",
            "location": 72,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "YAMLConfig.get": {
            "name": "get",
            "location": 81,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "dict[, ]",
                    "typing.Sequence[typing.Hashable]",
                    "bytes"
                ],
                "namespace": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]",
                    "typing.Sequence[typing.Hashable]",
                    "bytes"
                ]
            }
        }
    },
    "elib-master/elib/config/__init__.py": {},
    "elib-master/elib/updater/_github.py": {
        "get_latest_release": {
            "name": "get_latest_release",
            "location": 92,
            "return": [
                "None",
                "Release"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "_Val.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Val.__get__": {
            "name": "__get__",
            "location": 25,
            "return": [
                "_Val",
                "list[Asset]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bytes"
                ],
                "_": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "_Val.__set_name__": {
            "name": "__set_name__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "Asset.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "int",
                    "float"
                ],
                "release": [
                    "int",
                    "float"
                ]
            }
        },
        "Asset.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Asset._get_hexdigest": {
            "name": "_get_hexdigest",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Asset.download": {
            "name": "download",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Release.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json": [
                    "int",
                    "float"
                ]
            }
        },
        "Release.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib-master/elib/updater/_updater.py": {
        "Updater.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "typing.MutableMapping",
                    "list[dict[, ]]",
                    "None"
                ],
                "current_version": [
                    "str",
                    "dict[str, str]"
                ],
                "local_executable": [
                    "str",
                    "bool",
                    "list[]"
                ]
            }
        },
        "Updater._write_bat": {
            "name": "_write_bat",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "local_executable": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Updater._write_vbs": {
            "name": "_write_vbs",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Updater._install_latest_version": {
            "name": "_install_latest_version",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater._download_latest_release": {
            "name": "_download_latest_release",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Updater.update": {
            "name": "update",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "elib-master/elib/updater/__init__.py": {},
    "elib-master/test/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "pytest_unconfigure": {
            "name": "pytest_unconfigure",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "cleandir": {
            "name": "cleandir",
            "location": 26,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ],
                "tmpdir": [
                    "typing.Any",
                    "None",
                    "bytes",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_clean_os_env": {
            "name": "_clean_os_env",
            "location": 38,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_unstub": {
            "name": "_unstub",
            "location": 49,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_setup_logging": {
            "name": "_setup_logging",
            "location": 56,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "item": []
            }
        }
    },
    "elib-master/test/test_console.py": {
        "test_sanitize": {
            "name": "test_sanitize",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "test_info": {
            "name": "test_info",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "capsys": []
            }
        },
        "test_cmd_end": {
            "name": "test_cmd_end",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "tuple[typing.Union[str,typing.Any]]",
                    "typing.Type",
                    "int"
                ],
                "capsys": []
            }
        },
        "test_quiet": {
            "name": "test_quiet",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "str",
                    "None",
                    "dict[typing.Any, int]",
                    "typing.Deque",
                    "list[str]"
                ],
                "out": [
                    "str",
                    "int"
                ],
                "err": [
                    "str",
                    "int",
                    "typing.Type"
                ],
                "text": [
                    "str",
                    "bool"
                ],
                "capsys": []
            }
        }
    },
    "elib-master/test/test_download.py": {
        "test_download": {
            "name": "test_download",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_download_wrong_digest": {
            "name": "test_download_wrong_digest",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_download_no_digest": {
            "name": "test_download_no_digest",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_download_no_data": {
            "name": "test_download_no_data",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_download_to_memory_no_data": {
            "name": "test_download_to_memory_no_data",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_download_delete_failed": {
            "name": "test_download_delete_failed",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_download_request_failed": {
            "name": "test_download_request_failed",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_download_method_not_allowed": {
            "name": "test_download_method_not_allowed",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/test_exe_version.py": {
        "test_exe_version": {
            "name": "test_exe_version",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exe_no_version": {
            "name": "test_exe_no_version",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exe_missing_attrib": {
            "name": "test_exe_missing_attrib",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/test_find_exe.py": {
        "test_find_executable": {
            "name": "test_find_executable",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_context": {
            "name": "test_context",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_paths": {
            "name": "test_paths",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_immediate": {
            "name": "test_immediate",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/test_hash.py": {
        "test_get_hash_from_string": {
            "name": "test_get_hash_from_string",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_hash_from_file": {
            "name": "test_get_hash_from_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_hash_wrong_method": {
            "name": "test_get_hash_wrong_method",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/test_imports.py": {
        "test_imports": {
            "name": "test_imports",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "module_": [
                    "str"
                ]
            }
        },
        "test_imports_tests": {
            "name": "test_imports_tests",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "module_": [
                    "str"
                ]
            }
        }
    },
    "elib-master/test/test_known_folders.py": {
        "test_current_user_class": {
            "name": "test_current_user_class",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_path_not_found": {
            "name": "test_path_not_found",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/test_paste.py": {
        "correct_response": {
            "name": "correct_response",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "bad_response": {
            "name": "bad_response",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "test_pastebin_correct": {
            "name": "test_pastebin_correct",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pastebin_bad": {
            "name": "test_pastebin_bad",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/test_path.py": {
        "test_path": {
            "name": "test_path",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dir": {
            "name": "test_dir",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_file": {
            "name": "test_file",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_args": {
            "name": "test_args",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "first": [
                    "str"
                ],
                "second": [
                    "str"
                ],
                "third": [
                    "str"
                ]
            }
        },
        "test_dir_create": {
            "name": "test_dir_create",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/test_pretty.py": {
        "test_pretty": {
            "name": "test_pretty",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pretty_no_indent": {
            "name": "test_pretty_no_indent",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/test_random.py": {
        "test_random_str": {
            "name": "test_random_str",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_bytes": {
            "name": "test_random_bytes",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_random_string_length": {
            "name": "test_random_string_length",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "length": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "elib-master/test/test_resource_path.py": {
        "test_from_dev": {
            "name": "test_from_dev",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_sys": {
            "name": "test_from_sys",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_from_package": {
            "name": "test_from_package",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not_found": {
            "name": "test_not_found",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/test_run.py": {
        "_process": {
            "name": "_process",
            "location": 16,
            "return": [
                "typing.Generator[typing.Union[str,list[str]]]"
            ],
            "arguments": {}
        },
        "test_filter_line_raw": {
            "name": "test_filter_line_raw",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str",
                    "None"
                ]
            }
        },
        "test_filter_line": {
            "name": "test_filter_line",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exe_not_found": {
            "name": "test_exe_not_found",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_basic_check": {
            "name": "_basic_check",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "output": [
                    "str",
                    "int"
                ],
                "code": [
                    "bool",
                    "str",
                    "dict[str, set[str]]",
                    "list[str]"
                ]
            }
        },
        "test_output": {
            "name": "test_output",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "process": [
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "input_": [
                    "bool",
                    "str",
                    "typing.Callable[, ]"
                ],
                "output": [
                    "int",
                    "str"
                ]
            }
        },
        "test_no_output": {
            "name": "test_no_output",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "process": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_filtered_output": {
            "name": "test_filtered_output",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mute_output": {
            "name": "test_mute_output",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter_as_str": {
            "name": "test_filter_as_str",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "process": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_error": {
            "name": "test_error",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "process": []
            }
        },
        "test_error_no_result": {
            "name": "test_error_no_result",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "process": []
            }
        },
        "test_error_muted": {
            "name": "test_error_muted",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "process": [
                    "str"
                ]
            }
        },
        "test_failure": {
            "name": "test_failure",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "process": []
            }
        }
    },
    "elib-master/test/test_sentry.py": {
        "test_init": {
            "name": "test_init",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_init_with_logger": {
            "name": "test_init_with_logger",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_init_failed": {
            "name": "test_init_failed",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "test_add_context": {
            "name": "test_add_context",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_context": {
            "name": "test_set_context",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_set_context_missing_win_version": {
            "name": "test_set_context_missing_win_version",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_capture_message": {
            "name": "test_capture_message",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_capture_message_with_data": {
            "name": "test_capture_message_with_data",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_capture_message_with_level": {
            "name": "test_capture_message_with_level",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_capture_message_with_context_provider": {
            "name": "test_capture_message_with_context_provider",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_capture_exception": {
            "name": "test_capture_exception",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_capture_exception_with_context_provider": {
            "name": "test_capture_exception_with_context_provider",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_breadcrumbs": {
            "name": "test_breadcrumbs",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/test_tts.py": {
        "test_tts_correct": {
            "name": "test_tts_correct",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/__init__.py": {},
    "elib-master/test/test_config/conftest.py": {
        "dummy_config": {
            "name": "dummy_config",
            "location": 20,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "dummy_config.make_dummy_config": {
            "name": "make_dummy_config",
            "location": 21,
            "return": [
                "DummyConfig"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/test_config/test_base_config.py": {
        "test_create_config": {
            "name": "test_create_config",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": []
            }
        },
        "test_default_dict": {
            "name": "test_default_dict",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "key": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_no_default": {
            "name": "test_no_default",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": []
            }
        },
        "test_wrong_base_class": {
            "name": "test_wrong_base_class",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calling_from_instance": {
            "name": "test_calling_from_instance",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": [
                    "typing.IO"
                ]
            }
        },
        "test_empty_config_file": {
            "name": "test_empty_config_file",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": []
            }
        }
    },
    "elib-master/test/test_config/test_env_config.py": {
        "test_env_config": {
            "name": "test_env_config",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": []
            }
        }
    },
    "elib-master/test/test_config/test_ini_config.py": {
        "test_ini_config_file": {
            "name": "test_ini_config_file",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": []
            }
        }
    },
    "elib-master/test/test_config/test_yaml_config.py": {
        "test_yaml_config_file": {
            "name": "test_yaml_config_file",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": [
                    "str"
                ],
                "ext": [
                    "str",
                    "typing.IO",
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_yaml_list_of_str": {
            "name": "test_yaml_list_of_str",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": [],
                "ext": [
                    "typing.Iterable[typing.Any]",
                    "typing.Callable[, ]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "test_yaml_list_of_int": {
            "name": "test_yaml_list_of_int",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": [],
                "ext": [
                    "typing.Iterable[typing.Any]",
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "test_yaml_namespace": {
            "name": "test_yaml_namespace",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_config": [],
                "ext": [
                    "typing.Iterable[typing.Any]",
                    "typing.Callable[, ]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        }
    },
    "elib-master/test/test_repo/conftest.py": {
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "repo": {
            "name": "repo",
            "location": 24,
            "return": [
                "typing.Generator[typing.Union[list[],list[str],list[dict[str, str]]]]"
            ],
            "arguments": {
                "dummy_git_repo": []
            }
        },
        "file_set": {
            "name": "file_set",
            "location": 31,
            "return": [
                "typing.Generator[list[]]"
            ],
            "arguments": {
                "request": [
                    "int",
                    "typing.Callable[..., collections.abc.Awaitable[dict[, ]]]"
                ]
            }
        },
        "dummy_git_repo": {
            "name": "dummy_git_repo",
            "location": 39,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_global_tear_down": {
            "name": "_global_tear_down",
            "location": 54,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "dummy_git_repo.create": {
            "name": "create",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "elib-master/test/test_repo/test_branch.py": {
        "test_list_branches": {
            "name": "test_list_branches",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_active_branch": {
            "name": "test_active_branch",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [
                    "str"
                ]
            }
        },
        "test_create_branch_and_checkout": {
            "name": "test_create_branch_and_checkout",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "branch": [
                    "str"
                ]
            }
        },
        "test_create_branch_invalid_name": {
            "name": "test_create_branch_invalid_name",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "branch": [
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_create_branch": {
            "name": "test_create_branch",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        }
    },
    "elib-master/test/test_repo/test_checkout.py": {
        "test_checkout": {
            "name": "test_checkout",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_checkout_dirty": {
            "name": "test_checkout_dirty",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        }
    },
    "elib-master/test/test_repo/test_commit.py": {
        "_dummy_commit": {
            "name": "_dummy_commit",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_commit": {
            "name": "test_commit",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_empty_commit_message": {
            "name": "test_empty_commit_message",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_empty_commit": {
            "name": "test_empty_commit",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_commit_appveyor": {
            "name": "test_commit_appveyor",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_commit_subset": {
            "name": "test_commit_subset",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "file_set": [
                    "str"
                ]
            }
        },
        "test_commit_amend_new_message": {
            "name": "test_commit_amend_new_message",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_commit_amend_append_message": {
            "name": "test_commit_amend_append_message",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_commit_amend_with_tag": {
            "name": "test_commit_amend_with_tag",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_amend_commit_add_files": {
            "name": "test_amend_commit_add_files",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_commit_amend_root_commit": {
            "name": "test_commit_amend_root_commit",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_commit_amend_wrong_params": {
            "name": "test_commit_amend_wrong_params",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_commit_amend_appveyor": {
            "name": "test_commit_amend_appveyor",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test__sanitize_amend_commit_message": {
            "name": "test__sanitize_amend_commit_message",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        }
    },
    "elib-master/test/test_repo/test_index.py": {
        "test_stage_all": {
            "name": "test_stage_all",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "file_set": [
                    "list[str]"
                ]
            }
        },
        "test_stage_subset": {
            "name": "test_stage_subset",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "file_set": [
                    "str"
                ]
            }
        },
        "test_stage_updated": {
            "name": "test_stage_updated",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "file_set": []
            }
        },
        "test__sanitize_files_to_add": {
            "name": "test__sanitize_files_to_add",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        }
    },
    "elib-master/test/test_repo/test_merge.py": {
        "test_merge": {
            "name": "test_merge",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_merge_dry_run": {
            "name": "test_merge_dry_run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_merge_dirty": {
            "name": "test_merge_dirty",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        }
    },
    "elib-master/test/test_repo/test_repo.py": {
        "test_ensure": {
            "name": "test_ensure",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_git_init": {
            "name": "test_git_init",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_push": {
            "name": "test_push",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_git_repo": []
            }
        },
        "test_list_of_untracked_files": {
            "name": "test_list_of_untracked_files",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "file_set": []
            }
        },
        "test_list_of_changed_files": {
            "name": "test_list_of_changed_files",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "file_set": []
            }
        },
        "test_dirty_repo": {
            "name": "test_dirty_repo",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_status": {
            "name": "test_status",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        }
    },
    "elib-master/test/test_repo/test_stash.py": {
        "test_stash": {
            "name": "test_stash",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "caplog": []
            }
        },
        "test_unstash": {
            "name": "test_unstash",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "caplog": []
            }
        },
        "test_unstash_no_stash": {
            "name": "test_unstash_no_stash",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "caplog": []
            }
        },
        "test_stash_no_changes": {
            "name": "test_stash_no_changes",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "caplog": []
            }
        },
        "test_stash_untracked_files": {
            "name": "test_stash_untracked_files",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "caplog": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_stash_modified_index": {
            "name": "test_stash_modified_index",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "caplog": []
            }
        },
        "test_already_stashed": {
            "name": "test_already_stashed",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": [],
                "caplog": []
            }
        }
    },
    "elib-master/test/test_repo/test_tag.py": {
        "test_tag": {
            "name": "test_tag",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_get_current_tag": {
            "name": "test_get_current_tag",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        },
        "test_existing_tag": {
            "name": "test_existing_tag",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "repo": []
            }
        }
    },
    "elib-master/test/test_updater/test_github.py": {
        "_dummy_asset": {
            "name": "_dummy_asset",
            "location": 14,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,int]]"
            ],
            "arguments": {}
        },
        "_dummy_release": {
            "name": "_dummy_release",
            "location": 24,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[]]]"
            ],
            "arguments": {}
        },
        "test_val": {
            "name": "test_val",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_release": [
                    "str",
                    "float"
                ]
            }
        },
        "test_asset": {
            "name": "test_asset",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_asset": [
                    "dict[str, typing.Any]"
                ],
                "dummy_release": [
                    "str",
                    "float"
                ]
            }
        },
        "test_asset_download": {
            "name": "test_asset_download",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_asset": [
                    "dict[, ]"
                ],
                "dummy_release": [
                    "str",
                    "float"
                ]
            }
        },
        "test_get_hexdigest": {
            "name": "test_get_hexdigest",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_release": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "dummy_asset": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_get_hexdigest_no_md5": {
            "name": "test_get_hexdigest_no_md5",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_release": [
                    "dict[, ]"
                ],
                "dummy_asset": [
                    "dict[, ]"
                ]
            }
        },
        "test_get_latest_release": {
            "name": "test_get_latest_release",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "dummy_release": [
                    "int",
                    "str",
                    "list[]"
                ]
            }
        },
        "test_get_latest_release_req_timeout": {
            "name": "test_get_latest_release_req_timeout",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "bool",
                    "str",
                    "dict[str, float]"
                ]
            }
        },
        "test_get_latest_release_req_failed": {
            "name": "test_get_latest_release_req_failed",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "bool",
                    "str",
                    "dict[str, float]"
                ]
            }
        }
    },
    "elib-master/test/test_updater/test_updater.py": {
        "_release": {
            "name": "_release",
            "location": 13,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "clean_up": {
            "name": "clean_up",
            "location": 43,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_updater": {
            "name": "test_updater",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "release": []
            }
        },
        "test_updater_no_asset": {
            "name": "test_updater_no_asset",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "release": [
                    "list[str]"
                ],
                "caplog": []
            }
        },
        "test_updater_up_to_date": {
            "name": "test_updater_up_to_date",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "release": [],
                "caplog": []
            }
        },
        "test_updater_no_release": {
            "name": "test_updater_no_release",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": []
            }
        }
    }
}
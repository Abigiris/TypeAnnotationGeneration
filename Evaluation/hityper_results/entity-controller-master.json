{
    "entity-controller-master/custom_components/entity_controller/const.py": {},
    "entity-controller-master/custom_components/entity_controller/entity_services.py": {
        "async_setup_entity_services": {
            "name": "async_setup_entity_services",
            "location": 48,
            "return": [],
            "arguments": {
                "component": []
            }
        },
        "async_entity_service_activate": {
            "name": "async_entity_service_activate",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "async_entity_service_clear_block": {
            "name": "async_entity_service_clear_block",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "async_entity_service_enable_stay_mode": {
            "name": "async_entity_service_enable_stay_mode",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "async_entity_service_disable_stay_mode": {
            "name": "async_entity_service_disable_stay_mode",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "async_entity_service_set_night_mode": {
            "name": "async_entity_service_set_night_mode",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "start_time": [],
                "end_time": []
            }
        }
    },
    "entity-controller-master/custom_components/entity_controller/__init__.py": {
        "EntityController.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hass": [
                    "dict[, ]",
                    "str"
                ],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "machine": []
            }
        },
        "EntityController.state": {
            "name": "state",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityController.name": {
            "name": "name",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityController.icon": {
            "name": "icon",
            "location": 401,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityController.state_attributes": {
            "name": "state_attributes",
            "location": 418,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityController.reset_state": {
            "name": "reset_state",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityController.do_update": {
            "name": "do_update",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait": [
                    "bool"
                ]
            }
        },
        "EntityController.set_attr": {
            "name": "set_attr",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "typing.Callable[str, bool]"
                ],
                "v": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[[], typing.Any]"
                ]
            }
        },
        "EntityController.should_poll": {
            "name": "should_poll",
            "location": 465,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hass": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "config": [],
                "machine": [],
                "entity": [
                    "bool",
                    "list[]"
                ]
            }
        },
        "Model.update": {
            "name": "update",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait": [
                    "bool"
                ]
            }
        },
        "Model.finalize": {
            "name": "finalize",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.sensor_state_change": {
            "name": "sensor_state_change",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [],
                "old": [
                    "bool",
                    "str",
                    "bytes",
                    "None",
                    "dict[, ]"
                ],
                "new": [
                    "int",
                    "str",
                    "typing.Callable[typing.Any, str]"
                ]
            }
        },
        "Model.override_state_change": {
            "name": "override_state_change",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [],
                "old": [
                    "str",
                    "float",
                    "None",
                    "int"
                ],
                "new": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Model.state_entity_state_change": {
            "name": "state_entity_state_change",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "None"
                ],
                "old": [
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ],
                "new": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Model._start_timer": {
            "name": "_start_timer",
            "location": 667,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._cancel_timer": {
            "name": "_cancel_timer",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._reset_timer": {
            "name": "_reset_timer",
            "location": 697,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.timer_expire": {
            "name": "timer_expire",
            "location": 708,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.block_timer_expire": {
            "name": "block_timer_expire",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._override_entity_state": {
            "name": "_override_entity_state",
            "location": 723,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_override_state_off": {
            "name": "is_override_state_off",
            "location": 742,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_override_state_on": {
            "name": "is_override_state_on",
            "location": 750,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model._sensor_entity_state": {
            "name": "_sensor_entity_state",
            "location": 753,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_sensor_off": {
            "name": "is_sensor_off",
            "location": 772,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_sensor_on": {
            "name": "is_sensor_on",
            "location": 775,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model._state_entity_state": {
            "name": "_state_entity_state",
            "location": 778,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_state_entities_off": {
            "name": "is_state_entities_off",
            "location": 799,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_state_entities_on": {
            "name": "is_state_entities_on",
            "location": 802,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.will_stay_on": {
            "name": "will_stay_on",
            "location": 805,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.is_night": {
            "name": "is_night",
            "location": 808,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_event_sensor": {
            "name": "is_event_sensor",
            "location": 817,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_duration_sensor": {
            "name": "is_duration_sensor",
            "location": 820,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_timer_expired": {
            "name": "is_timer_expired",
            "location": 823,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.does_sensor_reset_timer": {
            "name": "does_sensor_reset_timer",
            "location": 827,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.on_enter_idle": {
            "name": "on_enter_idle",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_exit_idle": {
            "name": "on_exit_idle",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_enter_overridden": {
            "name": "on_enter_overridden",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_exit_overridden": {
            "name": "on_exit_overridden",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_enter_active": {
            "name": "on_enter_active",
            "location": 852,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_exit_active": {
            "name": "on_exit_active",
            "location": 864,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_enter_blocked": {
            "name": "on_enter_blocked",
            "location": 873,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_exit_blocked": {
            "name": "on_exit_blocked",
            "location": 884,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_enter_constrained": {
            "name": "on_enter_constrained",
            "location": 890,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_exit_constrained": {
            "name": "on_exit_constrained",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.config_transition_behaviours": {
            "name": "config_transition_behaviours",
            "location": 901,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "str",
                    "None"
                ]
            }
        },
        "Model.config_control_entities": {
            "name": "config_control_entities",
            "location": 920,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "Model.config_state_entities": {
            "name": "config_state_entities",
            "location": 928,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Model.config_off_entities": {
            "name": "config_off_entities",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.config_on_entities": {
            "name": "config_on_entities",
            "location": 958,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.config_sensor_entities": {
            "name": "config_sensor_entities",
            "location": 964,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "Model.config_static_strings": {
            "name": "config_static_strings",
            "location": 980,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.config_night_mode": {
            "name": "config_night_mode",
            "location": 1007,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "Model.config_state_attributes_ignore": {
            "name": "config_state_attributes_ignore",
            "location": 1032,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "Model.config_normal_mode": {
            "name": "config_normal_mode",
            "location": 1044,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.start_time": {
            "name": "start_time",
            "location": 1053,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.end_time": {
            "name": "end_time",
            "location": 1058,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.config_times": {
            "name": "config_times",
            "location": 1062,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "Model.config_override_entities": {
            "name": "config_override_entities",
            "location": 1112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "typing.Mapping",
                    "dict[str, bool]"
                ]
            }
        },
        "Model.config_other": {
            "name": "config_other",
            "location": 1123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.constrain_entity": {
            "name": "constrain_entity",
            "location": 1156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evt": [
                    "typing.Mapping",
                    "typing.Iterable[typing.Sequence[str]]",
                    "float",
                    "bool"
                ]
            }
        },
        "Model.end_time_callback": {
            "name": "end_time_callback",
            "location": 1163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evt": [
                    "bool"
                ]
            }
        },
        "Model.start_time_callback": {
            "name": "start_time_callback",
            "location": 1183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evt": [
                    "dict[, ]",
                    "str",
                    "list[int]",
                    "None",
                    "dict[str, list[]]",
                    "tuple[typing.Union[list[],list[]]]"
                ]
            }
        },
        "Model.handleTriggerOnDeactivateEntities": {
            "name": "handleTriggerOnDeactivateEntities",
            "location": 1215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.handleTriggerOnActivateEntities": {
            "name": "handleTriggerOnActivateEntities",
            "location": 1232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.turn_on_control_entities": {
            "name": "turn_on_control_entities",
            "location": 1251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.turn_off_control_entities": {
            "name": "turn_off_control_entities",
            "location": 1271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.now_is_between": {
            "name": "now_is_between",
            "location": 1283,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "start_time_str": [
                    "str",
                    "None"
                ],
                "end_time_str": [
                    "str",
                    "None"
                ],
                "name": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "Model.parse_time": {
            "name": "parse_time",
            "location": 1303,
            "return": [],
            "arguments": {
                "self": [],
                "time_str": [
                    "str",
                    "tuple[typing.Type]",
                    "float"
                ],
                "name": [
                    "None",
                    "str",
                    "tuple[typing.Type]",
                    "float"
                ],
                "aware": [
                    "bool"
                ]
            }
        },
        "Model.parse_datetime": {
            "name": "parse_datetime",
            "location": 1311,
            "return": [],
            "arguments": {
                "self": [],
                "time_str": [
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "name": [
                    "None",
                    "str",
                    "dict[str, str]"
                ],
                "aware": [
                    "bool"
                ]
            }
        },
        "Model._parse_time": {
            "name": "_parse_time",
            "location": 1319,
            "return": [],
            "arguments": {
                "self": [],
                "time_str": [
                    "str",
                    "list[str]",
                    "int",
                    "None"
                ],
                "name": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Model.make_naive": {
            "name": "make_naive",
            "location": 1412,
            "return": [],
            "arguments": {
                "self": [],
                "dts": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Model.sunset": {
            "name": "sunset",
            "location": 1424,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "aware": [
                    "bool"
                ]
            }
        },
        "Model.sunrise": {
            "name": "sunrise",
            "location": 1433,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "aware": [
                    "bool"
                ]
            }
        },
        "Model.next_sunrise": {
            "name": "next_sunrise",
            "location": 1442,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "Model.next_sunset": {
            "name": "next_sunset",
            "location": 1454,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "Model.prepare_service_data": {
            "name": "prepare_service_data",
            "location": 1492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.call_service": {
            "name": "call_service",
            "location": 1510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str"
                ],
                "service": [
                    "str"
                ]
            }
        },
        "Model.set_context": {
            "name": "set_context",
            "location": 1530,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "Model.is_ignored_context": {
            "name": "is_ignored_context",
            "location": 1549,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "Model.matches": {
            "name": "matches",
            "location": 1560,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "list": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Type",
                    "typing.OrderedDict"
                ]
            }
        },
        "Model.five_seconds_from_now": {
            "name": "five_seconds_from_now",
            "location": 1570,
            "return": [],
            "arguments": {
                "self": [],
                "sun": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Model.five_minutes_ago": {
            "name": "five_minutes_ago",
            "location": 1579,
            "return": [],
            "arguments": {
                "self": [],
                "sun": [
                    "int"
                ]
            }
        },
        "Model.add": {
            "name": "add",
            "location": 1587,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "list": [
                    "str",
                    "dict[, ]"
                ],
                "config": [
                    "None",
                    "list[str]"
                ],
                "key": [
                    "None"
                ]
            }
        },
        "Model.futurize": {
            "name": "futurize",
            "location": 1610,
            "return": [
                "str",
                "int",
                "dict[str, str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "timet": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "float"
                ]
            }
        },
        "Model.debug_time_wrapper": {
            "name": "debug_time_wrapper",
            "location": 1639,
            "return": [
                "list[str]",
                "dict[, ]",
                "str",
                "int",
                "None",
                "typing.Pattern",
                "list[]",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "timet": [
                    "list[str]",
                    "dict[, ]",
                    "str",
                    "int",
                    "None",
                    "typing.Pattern",
                    "list[]",
                    "set[]"
                ]
            }
        },
        "Model.log_config": {
            "name": "log_config",
            "location": 1681,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.store_transition_behaviour": {
            "name": "store_transition_behaviour",
            "location": 1708,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Hashable",
                    "int",
                    "dict[str, str]"
                ],
                "behaviour": [
                    "str",
                    "typing.Hashable",
                    "int",
                    "dict[str, str]"
                ]
            }
        },
        "Model.get_transition_behaviour": {
            "name": "get_transition_behaviour",
            "location": 1712,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Sequence[str]",
                    "dict[, ]"
                ]
            }
        },
        "Model.do_transition_behaviour": {
            "name": "do_transition_behaviour",
            "location": 1719,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "behaviour": [
                    "int",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "entity-controller-master/hass-demo/custom_components/entity_controller/__init__.py": {
        "is_on": {
            "name": "is_on",
            "location": 146,
            "return": [],
            "arguments": {
                "hass": [
                    "str",
                    "int"
                ],
                "entity_id": [
                    "str",
                    "int"
                ]
            }
        },
        "EntityController.__init__": {
            "name": "__init__",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hass": [
                    "dict[, ]",
                    "str"
                ],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "machine": []
            }
        },
        "EntityController.is_on": {
            "name": "is_on",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityController.turn_on": {
            "name": "turn_on",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityController.turn_off": {
            "name": "turn_off",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityController.state": {
            "name": "state",
            "location": 386,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityController.name": {
            "name": "name",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityController.icon": {
            "name": "icon",
            "location": 396,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityController.state_attributes": {
            "name": "state_attributes",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityController.reset_state": {
            "name": "reset_state",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityController.do_update": {
            "name": "do_update",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait": [
                    "bool"
                ]
            }
        },
        "EntityController.set_attr": {
            "name": "set_attr",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "bool",
                    "dict[, ]",
                    "str",
                    "typing.Callable[str, bool]"
                ],
                "v": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Callable[[], typing.Any]"
                ]
            }
        },
        "EntityController.service_control": {
            "name": "service_control",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "int"
                ]
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hass": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[]"
                ],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "machine": [],
                "entity": [
                    "bool",
                    "list[]"
                ]
            }
        },
        "Model.update": {
            "name": "update",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait": [
                    "bool"
                ]
            }
        },
        "Model.finalize": {
            "name": "finalize",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.sensor_state_change": {
            "name": "sensor_state_change",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "old": [
                    "bool",
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ],
                "new": [
                    "float",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Model.override_state_change": {
            "name": "override_state_change",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "dict[str, bool]"
                ],
                "old": [
                    "bool",
                    "None",
                    "str",
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ],
                "new": [
                    "dict[int, dict[, ]]",
                    "int"
                ]
            }
        },
        "Model.state_entity_state_change": {
            "name": "state_entity_state_change",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "str",
                    "None"
                ],
                "old": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "new": [
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "Model._start_timer": {
            "name": "_start_timer",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._cancel_timer": {
            "name": "_cancel_timer",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._reset_timer": {
            "name": "_reset_timer",
            "location": 679,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.timer_expire": {
            "name": "timer_expire",
            "location": 691,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.block_timer_expire": {
            "name": "block_timer_expire",
            "location": 700,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._override_entity_state": {
            "name": "_override_entity_state",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_override_state_off": {
            "name": "is_override_state_off",
            "location": 726,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_override_state_on": {
            "name": "is_override_state_on",
            "location": 729,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model._sensor_entity_state": {
            "name": "_sensor_entity_state",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_sensor_off": {
            "name": "is_sensor_off",
            "location": 751,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_sensor_on": {
            "name": "is_sensor_on",
            "location": 754,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model._state_entity_state": {
            "name": "_state_entity_state",
            "location": 757,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_state_entities_off": {
            "name": "is_state_entities_off",
            "location": 777,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_state_entities_on": {
            "name": "is_state_entities_on",
            "location": 780,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.will_stay_on": {
            "name": "will_stay_on",
            "location": 783,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.is_night": {
            "name": "is_night",
            "location": 786,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_event_sensor": {
            "name": "is_event_sensor",
            "location": 795,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_duration_sensor": {
            "name": "is_duration_sensor",
            "location": 798,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.is_timer_expired": {
            "name": "is_timer_expired",
            "location": 801,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.does_sensor_reset_timer": {
            "name": "does_sensor_reset_timer",
            "location": 806,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.on_enter_idle": {
            "name": "on_enter_idle",
            "location": 812,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_exit_idle": {
            "name": "on_exit_idle",
            "location": 817,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_enter_overridden": {
            "name": "on_enter_overridden",
            "location": 820,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_enter_active": {
            "name": "on_enter_active",
            "location": 823,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_exit_active": {
            "name": "on_exit_active",
            "location": 834,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_enter_blocked": {
            "name": "on_enter_blocked",
            "location": 841,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_exit_blocked": {
            "name": "on_exit_blocked",
            "location": 850,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.config_control_entities": {
            "name": "config_control_entities",
            "location": 858,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "Model.config_state_entities": {
            "name": "config_state_entities",
            "location": 866,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Model.config_off_entities": {
            "name": "config_off_entities",
            "location": 889,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.config_on_entities": {
            "name": "config_on_entities",
            "location": 896,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.config_sensor_entities": {
            "name": "config_sensor_entities",
            "location": 902,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "Model.config_static_strings": {
            "name": "config_static_strings",
            "location": 918,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.config_night_mode": {
            "name": "config_night_mode",
            "location": 945,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Model.config_state_attributes_ignore": {
            "name": "config_state_attributes_ignore",
            "location": 970,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Model.config_normal_mode": {
            "name": "config_normal_mode",
            "location": 977,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.start_time": {
            "name": "start_time",
            "location": 986,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.end_time": {
            "name": "end_time",
            "location": 991,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.config_times": {
            "name": "config_times",
            "location": 995,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.config_override_entities": {
            "name": "config_override_entities",
            "location": 1041,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "typing.Mapping",
                    "dict[str, bool]"
                ]
            }
        },
        "Model.config_other": {
            "name": "config_other",
            "location": 1052,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Model.constrain_entity": {
            "name": "constrain_entity",
            "location": 1092,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evt": [
                    "typing.Mapping",
                    "typing.Iterable[typing.Sequence[str]]",
                    "float",
                    "bool"
                ]
            }
        },
        "Model.end_time_callback": {
            "name": "end_time_callback",
            "location": 1099,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evt": [
                    "bool"
                ]
            }
        },
        "Model.start_time_callback": {
            "name": "start_time_callback",
            "location": 1122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evt": [
                    "dict[, ]",
                    "str",
                    "list[int]",
                    "None",
                    "dict[str, list[]]",
                    "tuple[typing.Union[list[],list[]]]"
                ]
            }
        },
        "Model.turn_off_special_entities": {
            "name": "turn_off_special_entities",
            "location": 1154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.turn_on_special_entities": {
            "name": "turn_on_special_entities",
            "location": 1161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.turn_on_control_entities": {
            "name": "turn_on_control_entities",
            "location": 1168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.turn_off_control_entities": {
            "name": "turn_off_control_entities",
            "location": 1188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.now_is_between": {
            "name": "now_is_between",
            "location": 1200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "start_time_str": [
                    "str",
                    "None"
                ],
                "end_time_str": [
                    "str",
                    "None"
                ],
                "name": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "Model.parse_time": {
            "name": "parse_time",
            "location": 1220,
            "return": [],
            "arguments": {
                "self": [],
                "time_str": [
                    "str",
                    "tuple[typing.Type]",
                    "float"
                ],
                "name": [
                    "None",
                    "str",
                    "tuple[typing.Type]",
                    "float"
                ],
                "aware": [
                    "bool"
                ]
            }
        },
        "Model.parse_datetime": {
            "name": "parse_datetime",
            "location": 1228,
            "return": [],
            "arguments": {
                "self": [],
                "time_str": [
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "name": [
                    "None",
                    "str",
                    "dict[str, str]"
                ],
                "aware": [
                    "bool"
                ]
            }
        },
        "Model._parse_time": {
            "name": "_parse_time",
            "location": 1236,
            "return": [],
            "arguments": {
                "self": [],
                "time_str": [
                    "str",
                    "list[str]",
                    "int",
                    "None"
                ],
                "name": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "Model.make_naive": {
            "name": "make_naive",
            "location": 1329,
            "return": [],
            "arguments": {
                "self": [],
                "dts": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Model.sunset": {
            "name": "sunset",
            "location": 1341,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "aware": [
                    "bool"
                ]
            }
        },
        "Model.sunrise": {
            "name": "sunrise",
            "location": 1350,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "aware": [
                    "bool"
                ]
            }
        },
        "Model.next_sunrise": {
            "name": "next_sunrise",
            "location": 1359,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "Model.next_sunset": {
            "name": "next_sunset",
            "location": 1371,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [
                    "int"
                ]
            }
        },
        "Model.prepare_service_data": {
            "name": "prepare_service_data",
            "location": 1409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.call_service": {
            "name": "call_service",
            "location": 1427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [],
                "service": []
            }
        },
        "Model.matches": {
            "name": "matches",
            "location": 1441,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "list": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Type",
                    "typing.OrderedDict"
                ]
            }
        },
        "Model.five_seconds_from_now": {
            "name": "five_seconds_from_now",
            "location": 1451,
            "return": [],
            "arguments": {
                "self": [],
                "sun": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "Model.five_minutes_ago": {
            "name": "five_minutes_ago",
            "location": 1460,
            "return": [],
            "arguments": {
                "self": [],
                "sun": [
                    "int"
                ]
            }
        },
        "Model.add": {
            "name": "add",
            "location": 1468,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "list": [
                    "int",
                    "list[]",
                    "list[list[object]]",
                    "list[typing.Union[int,float]]",
                    "typing.OrderedDict",
                    "list[str]"
                ],
                "e": [
                    "None"
                ],
                "key": [
                    "None",
                    "typing.Callable[..., T]",
                    "str",
                    "int",
                    "float",
                    "typing.Any"
                ]
            }
        },
        "Model.futurize": {
            "name": "futurize",
            "location": 1488,
            "return": [
                "str",
                "int",
                "dict[str, str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "timet": [
                    "str",
                    "int",
                    "dict[str, str]",
                    "float"
                ]
            }
        },
        "Model.debug_time_wrapper": {
            "name": "debug_time_wrapper",
            "location": 1517,
            "return": [
                "list[str]",
                "dict[, ]",
                "str",
                "int",
                "None",
                "typing.Pattern",
                "list[]",
                "set[]"
            ],
            "arguments": {
                "self": [],
                "timet": [
                    "list[str]",
                    "dict[, ]",
                    "str",
                    "int",
                    "None",
                    "typing.Pattern",
                    "list[]",
                    "set[]"
                ]
            }
        },
        "Model.log_config": {
            "name": "log_config",
            "location": 1563,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "entity-controller-master/tests/common.py": {
        "threadsafe_callback_factory": {
            "name": "threadsafe_callback_factory",
            "location": 43,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "threadsafe_coroutine_factory": {
            "name": "threadsafe_coroutine_factory",
            "location": 58,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "get_test_config_dir": {
            "name": "get_test_config_dir",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "get_test_home_assistant": {
            "name": "get_test_home_assistant",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "get_test_instance_port": {
            "name": "get_test_instance_port",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "async_mock_service": {
            "name": "async_mock_service",
            "location": 202,
            "return": [
                "list[]"
            ],
            "arguments": {
                "hass": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,int]]]",
                    "None"
                ],
                "domain": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,int]]]",
                    "None"
                ],
                "service": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,int]]]",
                    "None"
                ],
                "schema": [
                    "None",
                    "bool",
                    "str",
                    "list[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "async_mock_intent": {
            "name": "async_mock_intent",
            "location": 221,
            "return": [
                "list[]"
            ],
            "arguments": {
                "hass": [
                    "typing.Mapping",
                    "list[str]"
                ],
                "intent_typ": [
                    "bool",
                    "str",
                    "dict[str, typing.BinaryIO]",
                    "float"
                ]
            }
        },
        "async_fire_mqtt_message": {
            "name": "async_fire_mqtt_message",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "hass": [
                    "bool",
                    "float"
                ],
                "topic": [
                    "str",
                    "int"
                ],
                "payload": [
                    "str",
                    "bool"
                ],
                "qos": [
                    "int"
                ],
                "retain": [
                    "bool"
                ]
            }
        },
        "async_fire_time_changed": {
            "name": "async_fire_time_changed",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "hass": [
                    "float",
                    "int"
                ],
                "time": [
                    "float",
                    "int"
                ]
            }
        },
        "fire_service_discovered": {
            "name": "fire_service_discovered",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "hass": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Union[str,None]]"
                ],
                "service": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Union[str,None]]"
                ],
                "info": [
                    "str",
                    "tuple[]",
                    "dict[str, typing.Union[str,None]]"
                ]
            }
        },
        "load_fixture": {
            "name": "load_fixture",
            "location": 268,
            "return": [],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "mock_state_change_event": {
            "name": "mock_state_change_event",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "hass": [
                    "str",
                    "int",
                    "None"
                ],
                "new_state": [
                    "bool",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ],
                "old_state": [
                    "None",
                    "bytes",
                    "int",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "async_mock_mqtt_component": {
            "name": "async_mock_mqtt_component",
            "location": 289,
            "return": [],
            "arguments": {
                "hass": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "config": [
                    "None",
                    "typing.Iterable[str]",
                    "str"
                ]
            }
        },
        "mock_component": {
            "name": "mock_component",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "hass": [
                    "str",
                    "bool",
                    "typing.Mapping"
                ],
                "component": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]"
                ]
            }
        },
        "mock_registry": {
            "name": "mock_registry",
            "location": 323,
            "return": [],
            "arguments": {
                "hass": [
                    "str"
                ],
                "mock_entries": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "mock_device_registry": {
            "name": "mock_device_registry",
            "location": 336,
            "return": [],
            "arguments": {
                "hass": [
                    "str"
                ],
                "mock_entries": [
                    "None",
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "ensure_auth_manager_loaded": {
            "name": "ensure_auth_manager_loaded",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "auth_mgr": [
                    "str",
                    "int",
                    "None",
                    "list[dict[str, str]]",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "patch_yaml_files": {
            "name": "patch_yaml_files",
            "location": 613,
            "return": [],
            "arguments": {
                "files_dict": [],
                "endswith": [
                    "bool"
                ]
            }
        },
        "mock_coro": {
            "name": "mock_coro",
            "location": 646,
            "return": [],
            "arguments": {
                "return_value": [
                    "None",
                    "dict[str, typing.Any]",
                    "bool",
                    "str"
                ],
                "exception": [
                    "None",
                    "dict[str, typing.Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "mock_coro_func": {
            "name": "mock_coro_func",
            "location": 651,
            "return": [],
            "arguments": {
                "return_value": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "float"
                ],
                "exception": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "float"
                ]
            }
        },
        "assert_setup_component": {
            "name": "assert_setup_component",
            "location": 664,
            "return": [
                "typing.Generator[dict[, ]]"
            ],
            "arguments": {
                "count": [
                    "int",
                    "str",
                    "float"
                ],
                "domain": [
                    "None",
                    "dict[str, typing.Any]",
                    "typing.Any"
                ]
            }
        },
        "init_recorder_component": {
            "name": "init_recorder_component",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "hass": [
                    "str",
                    "dict[, ]"
                ],
                "add_config": [
                    "None",
                    "dict[, ]",
                    "str",
                    "list[annofabapi.models.Task]"
                ]
            }
        },
        "mock_restore_cache": {
            "name": "mock_restore_cache",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "hass": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "states": [
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "mock_storage": {
            "name": "mock_storage",
            "location": 823,
            "return": [
                "typing.Generator[typing.Union[str,bool,list[],dict[, ],typing.Type]]"
            ],
            "arguments": {
                "data": [
                    "None",
                    "bytes",
                    "list[]",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "threadsafe_callback_factory.threadsafe": {
            "name": "threadsafe",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "threadsafe_coroutine_factory.threadsafe": {
            "name": "threadsafe",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "get_test_home_assistant.run_loop": {
            "name": "run_loop",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_test_home_assistant.start_hass": {
            "name": "start_hass",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_test_home_assistant.stop_hass": {
            "name": "stop_hass",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "async_test_home_assistant.async_add_job": {
            "name": "async_add_job",
            "location": 130,
            "return": [],
            "arguments": {
                "target": []
            }
        },
        "async_test_home_assistant.async_add_executor_job": {
            "name": "async_add_executor_job",
            "location": 136,
            "return": [],
            "arguments": {
                "target": []
            }
        },
        "async_test_home_assistant.async_create_task": {
            "name": "async_create_task",
            "location": 142,
            "return": [],
            "arguments": {
                "coroutine": []
            }
        },
        "async_test_home_assistant.clear_instance": {
            "name": "clear_instance",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "event": []
            }
        },
        "async_mock_service.mock_service_log": {
            "name": "mock_service_log",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "call": []
            }
        },
        "MockGroup.__init__": {
            "name": "__init__",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "list[S]",
                    "int",
                    "list[E]"
                ],
                "name": [
                    "typing.Text"
                ],
                "policy": []
            }
        },
        "MockGroup.add_to_hass": {
            "name": "add_to_hass",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "hass": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,str]]",
                    "bool"
                ]
            }
        },
        "MockGroup.add_to_auth_manager": {
            "name": "add_to_auth_manager",
            "location": 368,
            "return": [
                "MockGroup"
            ],
            "arguments": {
                "self": [],
                "auth_mgr": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "list[dict[, ]]"
                ]
            }
        },
        "MockUser.__init__": {
            "name": "__init__",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "None",
                    "bool",
                    "str",
                    "float",
                    "list[\"Brand\"]"
                ],
                "is_owner": [
                    "bool"
                ],
                "is_active": [
                    "bool"
                ],
                "name": [
                    "typing.Text"
                ],
                "system_generated": [
                    "bool"
                ],
                "groups": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Type",
                    "dict[str, dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "MockUser.add_to_hass": {
            "name": "add_to_hass",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "hass": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,str]]",
                    "bool"
                ]
            }
        },
        "MockUser.add_to_auth_manager": {
            "name": "add_to_auth_manager",
            "location": 397,
            "return": [
                "MockUser"
            ],
            "arguments": {
                "self": [],
                "auth_mgr": [
                    "list[dict[, ]]",
                    "tuple[]",
                    "None",
                    "int"
                ]
            }
        },
        "MockUser.mock_policy": {
            "name": "mock_policy",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "float",
                    "typing.Callable[bytes, None]",
                    "bool",
                    "str"
                ]
            }
        },
        "MockModule.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "None",
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "dependencies": [
                    "None",
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "setup": [
                    "None",
                    "typing.Callable[, ]",
                    "list[str]",
                    "dict[str, typing.Any]"
                ],
                "requirements": [
                    "None",
                    "str",
                    "dict[, ]",
                    "bool"
                ],
                "config_schema": [
                    "None",
                    "str",
                    "list[typing.Any]",
                    "list[str]",
                    "typing.Callable[, ]"
                ],
                "platform_schema": [
                    "None",
                    "str",
                    "tuple[typing.Any]",
                    "int"
                ],
                "async_setup": [
                    "None",
                    "int"
                ],
                "async_setup_entry": [
                    "None",
                    "str",
                    "int",
                    "tuple[typing.Any]"
                ],
                "async_unload_entry": [
                    "None",
                    "str",
                    "int",
                    "tuple[typing.Any]"
                ]
            }
        },
        "MockPlatform.__init__": {
            "name": "__init__",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_platform": [
                    "None",
                    "bool"
                ],
                "dependencies": [
                    "None",
                    "int",
                    "float"
                ],
                "platform_schema": [
                    "None",
                    "int",
                    "float",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Hashable"
                ],
                "async_setup_platform": [
                    "None",
                    "int",
                    "str"
                ],
                "async_setup_entry": [
                    "None",
                    "int",
                    "float",
                    "str"
                ],
                "scan_interval": [
                    "None",
                    "int",
                    "float",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Hashable"
                ]
            }
        },
        "MockEntityPlatform.__init__": {
            "name": "__init__",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hass": [
                    "str",
                    "int",
                    "float",
                    "None"
                ],
                "logger": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ],
                "domain": [
                    "typing.Text"
                ],
                "platform_name": [
                    "typing.Text"
                ],
                "platform": [
                    "None",
                    "int"
                ],
                "scan_interval": [
                    "str",
                    "int",
                    "float",
                    "None"
                ],
                "entity_namespace": [
                    "None",
                    "str",
                    "int",
                    "float"
                ],
                "async_entities_added_callback": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "MockToggleDevice.__init__": {
            "name": "__init__",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "bool"
                ],
                "state": [
                    "bool",
                    "typing.Sequence[]",
                    "str",
                    "None"
                ]
            }
        },
        "MockToggleDevice.name": {
            "name": "name",
            "location": 542,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockToggleDevice.state": {
            "name": "state",
            "location": 548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockToggleDevice.is_on": {
            "name": "is_on",
            "location": 554,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockToggleDevice.turn_on": {
            "name": "turn_on",
            "location": 559,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockToggleDevice.turn_off": {
            "name": "turn_off",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockToggleDevice.last_call": {
            "name": "last_call",
            "location": 569,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "MockConfigEntry.__init__": {
            "name": "__init__",
            "location": 585,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockConfigEntry.add_to_hass": {
            "name": "add_to_hass",
            "location": 604,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hass": [
                    "str"
                ]
            }
        },
        "MockConfigEntry.add_to_manager": {
            "name": "add_to_manager",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "int",
                    "set[]",
                    "tuple[typing.Union[int,int,int,int]]"
                ]
            }
        },
        "patch_yaml_files.mock_open_f": {
            "name": "mock_open_f",
            "location": 618,
            "return": [
                "StringIO",
                "typing.IO"
            ],
            "arguments": {
                "fname": []
            }
        },
        "mock_coro_func.coro": {
            "name": "coro",
            "location": 654,
            "return": [],
            "arguments": {}
        },
        "assert_setup_component.mock_psc": {
            "name": "mock_psc",
            "location": 679,
            "return": [
                "None"
            ],
            "arguments": {
                "hass": [],
                "config_input": [],
                "domain": []
            }
        },
        "MockDependency.__init__": {
            "name": "__init__",
            "location": 739,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str",
                    "None",
                    "typing.IO"
                ]
            }
        },
        "MockDependency.__enter__": {
            "name": "__enter__",
            "location": 744,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockDependency.__exit__": {
            "name": "__exit__",
            "location": 764,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockDependency.__call__": {
            "name": "__call__",
            "location": 769,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "MockEntity.__init__": {
            "name": "__init__",
            "location": 783,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockEntity.name": {
            "name": "name",
            "location": 791,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockEntity.should_poll": {
            "name": "should_poll",
            "location": 796,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockEntity.unique_id": {
            "name": "unique_id",
            "location": 801,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockEntity.available": {
            "name": "available",
            "location": 806,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockEntity.device_info": {
            "name": "device_info",
            "location": 811,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockEntity._handle": {
            "name": "_handle",
            "location": 815,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "mock_storage.mock_write_data": {
            "name": "mock_write_data",
            "location": 855,
            "return": [
                "None"
            ],
            "arguments": {
                "store": [],
                "path": [],
                "data_to_write": []
            }
        },
        "async_mock_intent.MockIntentHandler.async_handle": {
            "name": "async_handle",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "intent": []
            }
        },
        "MockDependency.__enter__.resolve": {
            "name": "resolve",
            "location": 746,
            "return": [],
            "arguments": {
                "mock": [],
                "path": []
            }
        },
        "MockDependency.__call__.run_mocked": {
            "name": "run_mocked",
            "location": 771,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "entity-controller-master/tests/conftest.py": {},
    "entity-controller-master/tests/test_demo.py": {
        "motion_light": {
            "name": "motion_light",
            "location": 12,
            "return": [
                "MotionLight"
            ],
            "arguments": {
                "given_that": []
            }
        },
        "test_demo": {
            "name": "test_demo",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [
                    "str",
                    "bool",
                    "list[int]"
                ],
                "motion_light": [],
                "assert_that": [
                    "bool",
                    "str"
                ],
                "time_travel": []
            }
        }
    },
    "entity-controller-master/tests/test_lightingsm.py": {
        "hass_et": {
            "name": "hass_et",
            "location": 35,
            "return": [
                "list[str]",
                "str"
            ],
            "arguments": {
                "loop": [
                    "list[str]",
                    "str"
                ],
                "hass": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "state": {
            "name": "state",
            "location": 103,
            "return": [],
            "arguments": {
                "hass": [
                    "dict[str, dict[str, typing.Any]]",
                    "str",
                    "None",
                    "typing.Mapping",
                    "int"
                ]
            }
        }
    },
    "entity-controller-master/tests/test_lightingsm_async.py": {
        "hass_et": {
            "name": "hass_et",
            "location": 30,
            "return": [
                "list[str]",
                "str"
            ],
            "arguments": {
                "loop": [
                    "list[str]",
                    "str"
                ],
                "hass": [
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "entity-controller-master/tests/test_lightingsm_backup_all_tests.py": {},
    "entity-controller-master/tests/test_lighting_sm_appdaemon.py": {
        "ml": {
            "name": "ml",
            "location": 23,
            "return": [
                "LightingSM"
            ],
            "arguments": {
                "given_that": []
            }
        },
        "test_basic_config": {
            "name": "test_basic_config",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [],
                "time_travel": []
            }
        },
        "test_basic_config_sad": {
            "name": "test_basic_config_sad",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [],
                "time_travel": []
            }
        },
        "basic_config_stay": {
            "name": "basic_config_stay",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "str",
                    "tuple[]",
                    "bool"
                ],
                "time_travel": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_basic_duration_happy": {
            "name": "test_basic_duration_happy",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "time_travel": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_basic_duration_sad": {
            "name": "test_basic_duration_sad",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "str",
                    "None"
                ],
                "time_travel": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_basic_disable": {
            "name": "test_basic_disable",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "str",
                    "None"
                ],
                "time_travel": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_control_multiple": {
            "name": "test_control_multiple",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "str",
                    "None"
                ],
                "time_travel": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_state_multiple_off": {
            "name": "test_state_multiple_off",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "time_travel": [
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_state_multiple_on": {
            "name": "test_state_multiple_on",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "bool"
                ],
                "time_travel": [
                    "list[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_sensor_multiple": {
            "name": "test_sensor_multiple",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "str",
                    "None"
                ],
                "time_travel": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_complex": {
            "name": "test_complex",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "str",
                    "None"
                ],
                "time_travel": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_backoff": {
            "name": "test_backoff",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "str",
                    "None"
                ],
                "time_travel": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_entity_on_off": {
            "name": "test_entity_on_off",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "str",
                    "None"
                ],
                "time_travel": [
                    "list[str]",
                    "bool"
                ]
            }
        },
        "test_parameters_entity": {
            "name": "test_parameters_entity",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "bool",
                    "list[str]"
                ],
                "time_travel": [
                    "bool",
                    "list[str]"
                ]
            }
        },
        "test_parameters_state": {
            "name": "test_parameters_state",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [],
                "time_travel": []
            }
        },
        "test_parameters_state_strings": {
            "name": "test_parameters_state_strings",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "str"
                ],
                "time_travel": [
                    "str"
                ]
            }
        },
        "night_mode": {
            "name": "night_mode",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "int",
                    "None",
                    "str"
                ],
                "time_travel": [
                    "bool"
                ]
            }
        },
        "motion": {
            "name": "motion",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "ml": []
            }
        }
    },
    "entity-controller-master/tests/test_motion_lights_appdaemon_non_sm.py": {
        "ml": {
            "name": "ml",
            "location": 12,
            "return": [
                "MotionLight"
            ],
            "arguments": {
                "given_that": []
            }
        },
        "test_basic": {
            "name": "test_basic",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "list[str]",
                    "str",
                    "dict[str, typing.Union[None,int,str]]"
                ],
                "time_travel": [
                    "str"
                ],
                "entity": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "set[str]",
                    "typing.Callable[, ]"
                ],
                "entity_value": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "set[str]",
                    "typing.Callable[, ]"
                ],
                "state_entity_value": [
                    "list[str]",
                    "set[str]",
                    "dict[str, dict[str, str]]",
                    "str",
                    "set[]"
                ],
                "sensor": [
                    "dict[, ]",
                    "list[]",
                    "dict[int, str]",
                    "bool"
                ],
                "sensor_value": [
                    "dict[, ]",
                    "list[]",
                    "dict[int, str]",
                    "bool"
                ],
                "delay": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]",
                    "list[]"
                ],
                "light_state": [
                    "str",
                    "None"
                ]
            }
        },
        "test_other": {
            "name": "test_other",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "dict[, ]",
                    "str",
                    "list[str]"
                ],
                "time_travel": [
                    "str"
                ],
                "entity": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "set[str]",
                    "typing.Callable[, ]"
                ],
                "entity_value": [
                    "str",
                    "typing.Sequence[typing.Any]",
                    "set[str]",
                    "typing.Callable[, ]"
                ],
                "stay": [
                    "list[]",
                    "dict[str, dict[str, str]]",
                    "set[]",
                    "list[str]"
                ]
            }
        },
        "test_entity_on_off": {
            "name": "test_entity_on_off",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "given_that": [],
                "ml": [],
                "assert_that": [
                    "dict[, ]",
                    "str"
                ],
                "time_travel": [],
                "entity_on": [],
                "entity_off": [
                    "dict[, ]"
                ]
            }
        },
        "motion": {
            "name": "motion",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "ml": []
            }
        },
        "motion_with_delay": {
            "name": "motion_with_delay",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "ml": [],
                "delay": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "entity-controller-master/tests/test_parsing.py": {
        "hass_et": {
            "name": "hass_et",
            "location": 23,
            "return": [
                "list[str]",
                "str"
            ],
            "arguments": {
                "loop": [
                    "list[str]",
                    "str"
                ],
                "hass": [
                    "list[str]",
                    "str"
                ]
            }
        }
    }
}
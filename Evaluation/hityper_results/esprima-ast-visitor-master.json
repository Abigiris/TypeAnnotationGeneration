{
    "esprima-ast-visitor-master/visitor.py": {
        "objectify": {
            "name": "objectify",
            "location": 53,
            "return": [
                "dict[, ]",
                "list[]"
            ],
            "arguments": {
                "data": []
            }
        },
        "Node.fields": {
            "name": "fields",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Node.dict": {
            "name": "dict",
            "location": 23,
            "return": [
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.traverse": {
            "name": "traverse",
            "location": 36,
            "return": [
                "typing.Generator[Node]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.type": {
            "name": "type",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Identifier.fields": {
            "name": "fields",
            "location": 80,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Literal.fields": {
            "name": "fields",
            "location": 85,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.fields": {
            "name": "fields",
            "location": 90,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExpressionStatement.fields": {
            "name": "fields",
            "location": 98,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockStatement.fields": {
            "name": "fields",
            "location": 103,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyStatement.fields": {
            "name": "fields",
            "location": 108,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebuggerStatement.fields": {
            "name": "fields",
            "location": 113,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WithStatement.fields": {
            "name": "fields",
            "location": 118,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReturnStatement.fields": {
            "name": "fields",
            "location": 126,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabeledStatement.fields": {
            "name": "fields",
            "location": 131,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BreakStatement.fields": {
            "name": "fields",
            "location": 136,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContinueStatement.fields": {
            "name": "fields",
            "location": 141,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IfStatement.fields": {
            "name": "fields",
            "location": 149,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitchStatement.fields": {
            "name": "fields",
            "location": 154,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitchCase.fields": {
            "name": "fields",
            "location": 159,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThrowStatement.fields": {
            "name": "fields",
            "location": 167,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TryStatement.fields": {
            "name": "fields",
            "location": 172,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CatchClause.fields": {
            "name": "fields",
            "location": 177,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhileStatement.fields": {
            "name": "fields",
            "location": 185,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoWhileStatement.fields": {
            "name": "fields",
            "location": 190,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForStatement.fields": {
            "name": "fields",
            "location": 195,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForInStatement.fields": {
            "name": "fields",
            "location": 200,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionDeclaration.fields": {
            "name": "fields",
            "location": 208,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableDeclaration.fields": {
            "name": "fields",
            "location": 213,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariableDeclarator.fields": {
            "name": "fields",
            "location": 218,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThisExpression.fields": {
            "name": "fields",
            "location": 227,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArrayExpression.fields": {
            "name": "fields",
            "location": 232,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectExpression.fields": {
            "name": "fields",
            "location": 237,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Property.fields": {
            "name": "fields",
            "location": 242,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionExpression.fields": {
            "name": "fields",
            "location": 247,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnaryExpression.fields": {
            "name": "fields",
            "location": 252,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpression.fields": {
            "name": "fields",
            "location": 257,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryExpression.fields": {
            "name": "fields",
            "location": 262,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssignmentExpression.fields": {
            "name": "fields",
            "location": 267,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogicalExpression.fields": {
            "name": "fields",
            "location": 272,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberExpression.fields": {
            "name": "fields",
            "location": 277,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionalExpression.fields": {
            "name": "fields",
            "location": 282,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallExpression.fields": {
            "name": "fields",
            "location": 287,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewExpression.fields": {
            "name": "fields",
            "location": 292,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceExpression.fields": {
            "name": "fields",
            "location": 297,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "esprima-ast-visitor-master/visitor_test.py": {
        "TestTraverse._test_ast_file": {
            "name": "_test_ast_file",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "TestTraverse.test_amazon": {
            "name": "test_amazon",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_baidu": {
            "name": "test_baidu",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_facebook": {
            "name": "test_facebook",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_google": {
            "name": "test_google",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_handlebars": {
            "name": "test_handlebars",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_jquery": {
            "name": "test_jquery",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_jquery_ui": {
            "name": "test_jquery_ui",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_qq": {
            "name": "test_qq",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_sugar": {
            "name": "test_sugar",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_twitter": {
            "name": "test_twitter",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_wikipedia": {
            "name": "test_wikipedia",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_yahoo": {
            "name": "test_yahoo",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_remaining": {
            "name": "test_remaining",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTraverse.test_unexpected_node_type": {
            "name": "test_unexpected_node_type",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
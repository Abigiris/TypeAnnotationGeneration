{
    "esst-master/setup.py": {},
    "esst-master/esst/config.py": {
        "init": {
            "name": "init",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/fs_paths.py": {
        "FS._reset": {
            "name": "_reset",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FS.ensure_path": {
            "name": "ensure_path",
            "location": 51,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "None",
                    "typing.Sequence[str]"
                ],
                "path_name": [
                    "str",
                    "list[str]"
                ],
                "must_exist": [
                    "bool"
                ]
            }
        },
        "FS.get_saved_games_variant": {
            "name": "get_saved_games_variant",
            "location": 68,
            "return": [],
            "arguments": {
                "dcs_path": [
                    "None",
                    "str"
                ]
            }
        },
        "FS._get_saved_games_from_registry": {
            "name": "_get_saved_games_from_registry",
            "location": 92,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "FS.discover_saved_games_path": {
            "name": "discover_saved_games_path",
            "location": 113,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "FS._init_saved_games": {
            "name": "_init_saved_games",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FS._init_dcs_path": {
            "name": "_init_dcs_path",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FS._init_dcs_exe": {
            "name": "_init_dcs_exe",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FS._init_saved_games_variant": {
            "name": "_init_saved_games_variant",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FS._init_autoexec_cfg": {
            "name": "_init_autoexec_cfg",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FS._init_mission_editor_lua": {
            "name": "_init_mission_editor_lua",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FS._init_hooks": {
            "name": "_init_hooks",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FS._init_mission_folder": {
            "name": "_init_mission_folder",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FS._init_server_settings": {
            "name": "_init_server_settings",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FS._init_logs_folder": {
            "name": "_init_logs_folder",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FS.init": {
            "name": "init",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/_esst_logging.py": {},
    "esst-master/esst/__init__.py": {},
    "esst-master/esst/__main__.py": {
        "_check_wan_and_start_wan_monitor": {
            "name": "_check_wan_and_start_wan_monitor",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [],
                "logger": [],
                "context": [
                    "float",
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "_set_console_title": {
            "name": "_set_console_title",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "esst_version": [
                    "str",
                    "bytes",
                    "int",
                    "list[str]"
                ]
            }
        },
        "_init_atis_module": {
            "name": "_init_atis_module",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_setup_logging_debug": {
            "name": "_setup_logging_debug",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [
                    "str",
                    "int",
                    "None"
                ],
                "logger": [],
                "console_handler": [
                    "list[dict[str, float]]",
                    "None"
                ],
                "debug": [
                    "str",
                    "int",
                    "None"
                ],
                "config_debug": [
                    "bool"
                ]
            }
        },
        "sigint_handler": {
            "name": "sigint_handler",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "debug": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "esst-master/esst/atis/config.py": {},
    "esst-master/esst/atis/create.py": {
        "_cleanup_full_speech": {
            "name": "_cleanup_full_speech",
            "location": 25,
            "return": [],
            "arguments": {
                "full_speech": []
            }
        },
        "_build_speech_for_airfield": {
            "name": "_build_speech_for_airfield",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "airfield": [],
                "wind_dir": [],
                "speech_atis": [],
                "ur_settings": [],
                "atis_queue": []
            }
        },
        "_update_status": {
            "name": "_update_status",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "atis_queue": []
            }
        },
        "_parse_metar_string": {
            "name": "_parse_metar_string",
            "location": 71,
            "return": [],
            "arguments": {
                "metar_str": []
            }
        },
        "generate_atis": {
            "name": "generate_atis",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "weather": [],
                "include_icao": [],
                "exclude_icao": []
            }
        }
    },
    "esst-master/esst/atis/init.py": {
        "init_atis_module": {
            "name": "init_atis_module",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/atis/tts.py": {
        "text_to_speech": {
            "name": "text_to_speech",
            "location": 13,
            "return": [
                "Path"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "file_path": [
                    "str"
                ],
                "overwrite": [
                    "bool"
                ]
            }
        }
    },
    "esst-master/esst/atis/_atis_airfields.py": {},
    "esst-master/esst/atis/_atis_get_info.py": {
        "get_info_for_icao": {
            "name": "get_info_for_icao",
            "location": 10,
            "return": [],
            "arguments": {
                "icao": [
                    "str"
                ]
            }
        }
    },
    "esst-master/esst/atis/_atis_identifier.py": {
        "get_random_identifier": {
            "name": "get_random_identifier",
            "location": 18,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/atis/_atis_objects.py": {},
    "esst-master/esst/atis/_atis_status.py": {
        "Status.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "esst-master/esst/atis/__init__.py": {},
    "esst-master/esst/atis/chat_commands/atis_discord_commands.py": {
        "showfor": {
            "name": "showfor",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "icao": [
                    "str",
                    "int",
                    "list[]",
                    "list[list[str]]",
                    "list[str]"
                ]
            }
        },
        "status": {
            "name": "status",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "show": {
            "name": "show",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/atis/chat_commands/__init__.py": {},
    "esst-master/esst/atis/_univers_radio/_ur_install_dir.py": {
        "_get_ur_install_path_from_registry": {
            "name": "_get_ur_install_path_from_registry",
            "location": 22,
            "return": [
                "Path",
                "None"
            ],
            "arguments": {}
        },
        "discover_ur_install_path": {
            "name": "discover_ur_install_path",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/atis/_univers_radio/_ur_object.py": {
        "URFrequency.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "freq": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "URFrequency.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "URFrequency.long_freq": {
            "name": "long_freq",
            "location": 40,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "URCoord.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lat": [
                    "str",
                    "bytes",
                    "int"
                ],
                "long": [
                    "str",
                    "bytes",
                    "int"
                ],
                "elev": []
            }
        },
        "URCoord.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runway.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "heading": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Runway.__int__": {
            "name": "__int__",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runway.__str__": {
            "name": "__str__",
            "location": 98,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runway.long_name": {
            "name": "long_name",
            "location": 101,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Airfield.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "icao": [
                    "bool",
                    "str",
                    "None"
                ],
                "name": [
                    "list[str]",
                    "str",
                    "dict[, ]"
                ],
                "coord": [
                    "bool",
                    "str",
                    "None"
                ],
                "atis_freq": [
                    "bool",
                    "str",
                    "None"
                ],
                "runways": []
            }
        },
        "Airfield.get_active_runway": {
            "name": "get_active_runway",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "wind_direction": [
                    "int",
                    "list[list[int]]",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "list[]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Airfield.get_active_runway.diff_angle": {
            "name": "diff_angle",
            "location": 136,
            "return": [
                "int"
            ],
            "arguments": {
                "angle1": [],
                "angle2": []
            }
        }
    },
    "esst-master/esst/atis/_univers_radio/_ur_status.py": {},
    "esst-master/esst/atis/_univers_radio/_ur_voice_service.py": {
        "URVoiceService.is_running": {
            "name": "is_running",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "URVoiceService.start_service": {
            "name": "start_service",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "URVoiceService.poll": {
            "name": "poll",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "URVoiceService.kill": {
            "name": "kill",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/atis/_univers_radio/_ur_voice_service_settings.py": {
        "URVoiceServiceSettings.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "URVoiceServiceSettings.add_station": {
            "name": "add_station",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "airfield": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "URVoiceServiceSettings.write_settings_file": {
            "name": "write_settings_file",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "esst-master/esst/atis/_univers_radio/__init__.py": {},
    "esst-master/esst/commands/__init__.py": {},
    "esst-master/esst/core/context.py": {
        "Context.get_context": {
            "name": "get_context",
            "location": 19,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Type",
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        }
    },
    "esst-master/esst/core/status.py": {},
    "esst-master/esst/core/__init__.py": {},
    "esst-master/esst/dcs/autoexec_cfg.py": {
        "inject_silent_crash_report": {
            "name": "inject_silent_crash_report",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/dcs/commands.py": {
        "DCS.restart": {
            "name": "restart",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "force": [
                    "bool"
                ]
            }
        },
        "DCS.kill": {
            "name": "kill",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "force": [
                    "bool"
                ],
                "queue": [
                    "bool"
                ]
            }
        },
        "DCS.queue_kill": {
            "name": "queue_kill",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DCS.show_cpu_usage_once": {
            "name": "show_cpu_usage_once",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DCS.show_cpu_usage_once_done": {
            "name": "show_cpu_usage_once_done",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DCS.show_cpu_usage_start": {
            "name": "show_cpu_usage_start",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DCS.show_cpu_usage_stop": {
            "name": "show_cpu_usage_stop",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DCS.block_start": {
            "name": "block_start",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "reason": [
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "DCS.unblock_start": {
            "name": "unblock_start",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "reason": [
                    "str",
                    "bool"
                ]
            }
        },
        "DCS.dcs_cannot_start": {
            "name": "dcs_cannot_start",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "DCS.there_are_connected_players": {
            "name": "there_are_connected_players",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "DCS.check_for_connected_players": {
            "name": "check_for_connected_players",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "DCS.queue_kill._queue_kill": {
            "name": "_queue_kill",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "queue": []
            }
        }
    },
    "esst-master/esst/dcs/config.py": {},
    "esst-master/esst/dcs/config_server.py": {},
    "esst-master/esst/dcs/dcs.py": {
        "App.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.app": {
            "name": "app",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App._work_with_dcs_process": {
            "name": "_work_with_dcs_process",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "App.set_affinity": {
            "name": "set_affinity",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.set_priority": {
            "name": "set_priority",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.monitor_cpu_usage": {
            "name": "monitor_cpu_usage",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.set_affinity._command": {
            "name": "_command",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "App.set_priority._command": {
            "name": "_command",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/dcs/dedicated.py": {
        "_get_me_auth_path": {
            "name": "_get_me_auth_path",
            "location": 20,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "_write_dedi_config": {
            "name": "_write_dedi_config",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_write_auth_file": {
            "name": "_write_auth_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "setup_config_for_dedicated_run": {
            "name": "setup_config_for_dedicated_run",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/dcs/game_gui.py": {
        "_remove_old_file": {
            "name": "_remove_old_file",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_install_hook": {
            "name": "_install_hook",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "install_game_gui_hooks": {
            "name": "install_game_gui_hooks",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/dcs/missions_manager.py": {
        "_get_mission_folder": {
            "name": "_get_mission_folder",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "_get_auto_mission_folder": {
            "name": "_get_auto_mission_folder",
            "location": 26,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "_get_settings_file_path": {
            "name": "_get_settings_file_path",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "set_active_mission": {
            "name": "set_active_mission",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "mission_path_as_str": [
                    "str",
                    "int"
                ],
                "metar": [
                    "None",
                    "str"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "mission": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "get_latest_mission_from_github": {
            "name": "get_latest_mission_from_github",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "download_mission_from_discord": {
            "name": "download_mission_from_discord",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "discord_attachment": [
                    "list[int]",
                    "list[float]"
                ],
                "overwrite": [
                    "bool"
                ],
                "load": [
                    "bool"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "list_available_missions": {
            "name": "list_available_missions",
            "location": 227,
            "return": [
                "typing.Generator[tuple[int]]"
            ],
            "arguments": {}
        },
        "get_running_mission": {
            "name": "get_running_mission",
            "location": 237,
            "return": [
                "None",
                "MissionPath",
                "typing.Text"
            ],
            "arguments": {}
        },
        "initial_setup": {
            "name": "initial_setup",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MissionPath.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mission": [
                    "str"
                ]
            }
        },
        "MissionPath.name": {
            "name": "name",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionPath.orig_name": {
            "name": "orig_name",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionPath.auto": {
            "name": "auto",
            "location": 58,
            "return": [
                "MissionPath"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissionPath.path": {
            "name": "path",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionPath.set_as_active": {
            "name": "set_as_active",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weather": [
                    "None",
                    "str"
                ]
            }
        },
        "MissionPath.__str__": {
            "name": "__str__",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissionPath.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissionPath.__bool__": {
            "name": "__bool__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "esst-master/esst/dcs/mission_editor_lua.py": {
        "inject_mission_editor_code": {
            "name": "inject_mission_editor_code",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/dcs/rotate_logs.py": {
        "clean_old_logs": {
            "name": "clean_old_logs",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/dcs/server_settings.py": {
        "_get_server_settings_path": {
            "name": "_get_server_settings_path",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "write_server_settings": {
            "name": "write_server_settings",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "mission_file_path": [
                    "None",
                    "str"
                ]
            }
        },
        "_get_current_mission_path": {
            "name": "_get_current_mission_path",
            "location": 79,
            "return": [],
            "arguments": {}
        }
    },
    "esst-master/esst/dcs/__init__.py": {},
    "esst-master/esst/dcs/templates/__init__.py": {},
    "esst-master/esst/discord_bot/abstract.py": {
        "AbstractDiscordCommandParser.dispatch": {
            "name": "dispatch",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "None",
                    "bool",
                    "str"
                ],
                "add_help_command": [
                    "bool"
                ],
                "completion": [
                    "bool"
                ],
                "pre_call": [
                    "None",
                    "bool",
                    "str"
                ],
                "output_file": [],
                "errors_file": [],
                "raw_output": [
                    "bool"
                ],
                "namespace": [
                    "None",
                    "bool",
                    "str"
                ],
                "skip_unknown_args": [
                    "bool"
                ]
            }
        },
        "AbstractDiscordCommandParser.parse_args": {
            "name": "parse_args",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "None"
                ],
                "namespace": [
                    "None",
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "AbstractDiscordCommandParser.format_help": {
            "name": "format_help",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDiscordCommandParser.parse_discord_message": {
            "name": "parse_discord_message",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "is_admin": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "AbstractDiscordBot.parser": {
            "name": "parser",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDiscordBot.ready": {
            "name": "ready",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDiscordBot.client": {
            "name": "client",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDiscordBot.server": {
            "name": "server",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDiscordBot.user": {
            "name": "user",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDiscordBot.member": {
            "name": "member",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDiscordBot.channel": {
            "name": "channel",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDiscordBot.say": {
            "name": "say",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "AbstractDiscordBot.send": {
            "name": "send",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str",
                    "list[]"
                ]
            }
        }
    },
    "esst-master/esst/discord_bot/catch_exc.py": {
        "_pass_exception": {
            "name": "_pass_exception",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "exc": [
                    "Exception",
                    "str",
                    "int"
                ]
            }
        },
        "catch_exc": {
            "name": "catch_exc",
            "location": 25,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "esst-master/esst/discord_bot/commands.py": {
        "DISCORD.say": {
            "name": "say",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "DISCORD.send_file": {
            "name": "send_file",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "None"
                ]
            }
        },
        "DISCORD.can_start": {
            "name": "can_start",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DISCORD.cannot_start": {
            "name": "cannot_start",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/discord_bot/config.py": {},
    "esst-master/esst/discord_bot/discord_bot.py": {
        "App.parser": {
            "name": "parser",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.channel": {
            "name": "channel",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.user": {
            "name": "user",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.member": {
            "name": "member",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.server": {
            "name": "server",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.client": {
            "name": "client",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.ready": {
            "name": "ready",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App._create_client": {
            "name": "_create_client",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "esst-master/esst/discord_bot/events.py": {},
    "esst-master/esst/discord_bot/logging_handler.py": {
        "register_logging_handler": {
            "name": "register_logging_handler",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DiscordLoggingHandler.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscordLoggingHandler.emit": {
            "name": "emit",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "None",
                    "int"
                ]
            }
        }
    },
    "esst-master/esst/discord_bot/tasks.py": {},
    "esst-master/esst/discord_bot/__init__.py": {},
    "esst-master/esst/discord_bot/chat_commands/dcs.py": {
        "status": {
            "name": "status",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "show_cpu": {
            "name": "show_cpu",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "bool"
                ],
                "stop": [
                    "bool"
                ]
            }
        },
        "restart": {
            "name": "restart",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "force": [
                    "bool"
                ]
            }
        },
        "version": {
            "name": "version",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "log": {
            "name": "log",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/discord_bot/chat_commands/esst_.py": {
        "log": {
            "name": "log",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "changelog": {
            "name": "changelog",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "version": {
            "name": "version",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/discord_bot/chat_commands/mission.py": {
        "_mission_index_to_mission_name": {
            "name": "_mission_index_to_mission_name",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "mission_index": [
                    "str",
                    "Exception",
                    "tuple[tuple[typing.Union[str,...]]]"
                ]
            }
        },
        "_load": {
            "name": "_load",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "metar_or_icao": [
                    "str",
                    "int",
                    "None"
                ],
                "time": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "typing.Callable[[], None]"
                ],
                "max_wind": [
                    "bool",
                    "str",
                    "typing.Sequence[]",
                    "None",
                    "typing.Iterable[str]"
                ],
                "min_wind": [
                    "bool",
                    "str",
                    "typing.Sequence[]",
                    "None",
                    "typing.Iterable[str]"
                ],
                "force": [
                    "bool",
                    "str",
                    "typing.Sequence[]",
                    "None",
                    "typing.Iterable[str]"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "load": {
            "name": "load",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "None",
                    "str",
                    "int"
                ],
                "metar_or_icao": [
                    "None",
                    "str",
                    "int"
                ],
                "time": [
                    "None",
                    "str",
                    "int"
                ],
                "max_wind": [
                    "int"
                ],
                "min_wind": [
                    "int"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "show": {
            "name": "show",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "weather": {
            "name": "weather",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "dcs": [
                    "bool"
                ]
            }
        },
        "download": {
            "name": "download",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/discord_bot/chat_commands/parser.py": {
        "_cancel_execution": {
            "name": "_cancel_execution",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_function_from_namespace_obj": {
            "name": "_get_function_from_namespace_obj",
            "location": 32,
            "return": [
                "None",
                "int",
                "list[]",
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "namespace_obj": [
                    "str",
                    "float",
                    "bool",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "_execute_command": {
            "name": "_execute_command",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "Exception",
                    "bool",
                    "list[str]",
                    "str",
                    "None"
                ],
                "namespace_obj": [
                    "bool",
                    "str",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ],
                "pre_call": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "make_root_parser": {
            "name": "make_root_parser",
            "location": 354,
            "return": [
                "DiscordCommandParser"
            ],
            "arguments": {}
        },
        "_execute_command._flat_key": {
            "name": "_flat_key",
            "location": 69,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "_execute_command._call": {
            "name": "_call",
            "location": 73,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "HelpFormatter.add_usage": {
            "name": "add_usage",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "usage": [
                    "str"
                ],
                "actions": [
                    "str",
                    "set[int]",
                    "int"
                ],
                "groups": [
                    "str",
                    "set[int]",
                    "int"
                ],
                "prefix": [
                    "None",
                    "str",
                    "set[int]",
                    "int"
                ]
            }
        },
        "DiscordCommandParser.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prog": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "usage": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "description": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "epilog": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "parents": [
                    "None",
                    "int",
                    "str"
                ],
                "formatter_class": [
                    "HelpFormatter"
                ],
                "prefix_chars": [
                    "typing.Text"
                ],
                "fromfile_prefix_chars": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "argument_default": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "conflict_handler": [
                    "typing.Text"
                ],
                "add_help": [
                    "bool"
                ],
                "allow_abbrev": [
                    "bool"
                ]
            }
        },
        "DiscordCommandParser._print_message": {
            "name": "_print_message",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "_": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "DiscordCommandParser.dispatch": {
            "name": "dispatch",
            "location": 203,
            "return": [
                "None",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "list[]",
                    "list[dict[str, typing.Any]]"
                ],
                "add_help_command": [
                    "bool"
                ],
                "completion": [
                    "bool"
                ],
                "pre_call": [
                    "None",
                    "int",
                    "str"
                ],
                "output_file": [],
                "errors_file": [],
                "raw_output": [
                    "bool"
                ],
                "namespace": [
                    "None",
                    "bool",
                    "list[str]",
                    "float"
                ],
                "skip_unknown_args": [
                    "bool"
                ],
                "is_admin": [
                    "bool"
                ]
            }
        },
        "DiscordCommandParser.exit": {
            "name": "exit",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int"
                ],
                "message": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "DiscordCommandParser.error": {
            "name": "error",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "set[]"
                ]
            }
        },
        "DiscordCommandParser.parse_args": {
            "name": "parse_args",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "namespace": [
                    "None",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "DiscordCommandParser.format_help": {
            "name": "format_help",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordCommandParser.parse_discord_message": {
            "name": "parse_discord_message",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "is_admin": [
                    "bool",
                    "BaseException"
                ]
            }
        }
    },
    "esst-master/esst/discord_bot/chat_commands/report.py": {
        "_send": {
            "name": "_send",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "dict[, ]"
                ],
                "ctx": [
                    "list[]",
                    "str"
                ]
            }
        },
        "issue": {
            "name": "issue",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "suggestion": {
            "name": "suggestion",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "esst-master/esst/discord_bot/chat_commands/server.py": {
        "status": {
            "name": "status",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "graph": {
            "name": "graph",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "days": [
                    "int"
                ],
                "hours": [
                    "int"
                ],
                "minutes": [
                    "int"
                ]
            }
        },
        "show_cpu": {
            "name": "show_cpu",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "start": [
                    "bool"
                ],
                "stop": [
                    "bool"
                ]
            }
        },
        "reboot": {
            "name": "reboot",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "force": [
                    "bool"
                ]
            }
        },
        "ip": {
            "name": "ip",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/discord_bot/chat_commands/weather.py": {
        "show": {
            "name": "show",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "metar_or_icao": [
                    "str",
                    "typing.DefaultDict",
                    "bytes"
                ]
            }
        }
    },
    "esst-master/esst/discord_bot/chat_commands/__init__.py": {},
    "esst-master/esst/listener/commands.py": {
        "LISTENER.monitor_server_startup_start": {
            "name": "monitor_server_startup_start",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LISTENER.monitor_server_startup_stop": {
            "name": "monitor_server_startup_stop",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "LISTENER.exit_dcs": {
            "name": "exit_dcs",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/listener/config.py": {},
    "esst-master/esst/listener/listener.py": {
        "DCSListener.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DCSListener._parse_ping": {
            "name": "_parse_ping",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "DCSListener._parse_status": {
            "name": "_parse_status",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "tuple[]",
                    "str"
                ]
            }
        }
    },
    "esst-master/esst/listener/__init__.py": {},
    "esst-master/esst/mission/context.py": {
        "MissionManagerContext.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "original_mission_path": [
                    "str",
                    "typing.Callable[str, None]"
                ],
                "originator": [
                    "bool",
                    "typing.Sequence[str]",
                    "str"
                ]
            }
        },
        "MissionManagerContext.original_path": {
            "name": "original_path",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionManagerContext.originator": {
            "name": "originator",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissionManagerContext.tmp_path": {
            "name": "tmp_path",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "esst-master/esst/mission/state.py": {},
    "esst-master/esst/mission/store.py": {
        "_get_mission_folder": {
            "name": "_get_mission_folder",
            "location": 13,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "get_base_missions_folder": {
            "name": "get_base_missions_folder",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "get_auto_missions_folder": {
            "name": "get_auto_missions_folder",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "get_random_auto_mission_name": {
            "name": "get_random_auto_mission_name",
            "location": 56,
            "return": [
                "Path"
            ],
            "arguments": {
                "source_mission": []
            }
        },
        "list_missions": {
            "name": "list_missions",
            "location": 77,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 85,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/mission/__init__.py": {},
    "esst-master/esst/sentry/sentry.py": {
        "filter_breadcrumbs": {
            "name": "filter_breadcrumbs",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "_logger": [
                    "str",
                    "bool",
                    "list[]"
                ],
                "level": [
                    "float",
                    "typing.Callable[None, bool]",
                    "list[str]",
                    "int"
                ],
                "msg": [
                    "float",
                    "typing.Callable[None, bool]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "Sentry.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentry.set_context": {
            "name": "set_context",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentry.register_context": {
            "name": "register_context",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context_name": [
                    "str",
                    "bool"
                ],
                "context_provider": [
                    "str",
                    "bool"
                ]
            }
        },
        "Sentry.add_crumb": {
            "name": "add_crumb",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [],
                "category": [],
                "level": []
            }
        },
        "Sentry.captureMessage": {
            "name": "captureMessage",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "str",
                    "typing.Callable[bytes, bytes]"
                ]
            }
        },
        "Sentry.captureException": {
            "name": "captureException",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_info": [
                    "None",
                    "typing.Type",
                    "list[str]",
                    "dict[typing.Hashable, typing.Any]"
                ]
            }
        }
    },
    "esst-master/esst/sentry/sentry_context.py": {
        "SentryClassContext.get_context": {
            "name": "get_context",
            "location": 14,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Iterable[int]"
                ]
            }
        },
        "SentryConfigContext.get_context": {
            "name": "get_context",
            "location": 33,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Iterable[int]"
                ]
            }
        },
        "SentryContext.get_context": {
            "name": "get_context",
            "location": 51,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "esst-master/esst/sentry/__init__.py": {},
    "esst-master/esst/server/commands.py": {
        "SERVER.reboot": {
            "name": "reboot",
            "location": 20,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "force": [
                    "bool"
                ]
            }
        },
        "SERVER.show_cpu_usage_once": {
            "name": "show_cpu_usage_once",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SERVER.show_cpu_usage_once_done": {
            "name": "show_cpu_usage_once_done",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SERVER.show_cpu_usage_start": {
            "name": "show_cpu_usage_start",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SERVER.show_cpu_usage_stop": {
            "name": "show_cpu_usage_stop",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SERVER.show_graph": {
            "name": "show_graph",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "days": [
                    "int",
                    "float"
                ],
                "hours": [
                    "int",
                    "float"
                ],
                "minutes": [
                    "int",
                    "float"
                ]
            }
        },
        "SERVER.show_graph._show_graph": {
            "name": "_show_graph",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": []
            }
        }
    },
    "esst-master/esst/server/config.py": {},
    "esst-master/esst/server/server.py": {
        "App.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._update_status": {
            "name": "_update_status",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/server/__init__.py": {},
    "esst-master/esst/utils/arg.py": {
        "arg": {
            "name": "arg",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "arg._wrapper": {
            "name": "_wrapper",
            "location": 14,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "esst-master/esst/utils/find_port.py": {
        "_socket": {
            "name": "_socket",
            "location": 17,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "_port_available": {
            "name": "_port_available",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "port_number": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "_find_available_port": {
            "name": "_find_available_port",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "assign_ports": {
            "name": "assign_ports",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/utils/github.py": {
        "_make_request": {
            "name": "_make_request",
            "location": 16,
            "return": [],
            "arguments": {
                "endpoint": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "get_latest_release": {
            "name": "get_latest_release",
            "location": 31,
            "return": [
                "tuple[typing.Union[str,bytes]]"
            ],
            "arguments": {
                "owner": [
                    "str"
                ],
                "repo": [
                    "str"
                ]
            }
        }
    },
    "esst-master/esst/utils/historygraph.py": {
        "_init_mpl": {
            "name": "_init_mpl",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "process_values": {
            "name": "process_values",
            "location": 53,
            "return": [
                "GraphValues"
            ],
            "arguments": {
                "values_to_process": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ],
                "time_delta": [
                    "float",
                    "str",
                    "typing.Callable[[], bool]",
                    "int"
                ]
            }
        },
        "_make_delta": {
            "name": "_make_delta",
            "location": 87,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "now": [
                    "bool"
                ],
                "days": [
                    "float",
                    "int",
                    "str",
                    "None"
                ],
                "hours": [
                    "str",
                    "float",
                    "int",
                    "None"
                ],
                "minutes": [
                    "float",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "_x_format_func": {
            "name": "_x_format_func",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "val": [
                    "int",
                    "float",
                    "str"
                ],
                "_": [
                    "bool",
                    "list[]",
                    "str",
                    "None",
                    "list[str]",
                    "list[dict[, ]]"
                ]
            }
        },
        "_y_format_func_percent": {
            "name": "_y_format_func_percent",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "val": [],
                "_": [
                    "tuple[int]",
                    "list[str]",
                    "list[list[typing.Any]]",
                    "bool",
                    "list['cirq.Qid']"
                ]
            }
        },
        "_y_format_func_bytes": {
            "name": "_y_format_func_bytes",
            "location": 104,
            "return": [],
            "arguments": {
                "val": [
                    "str",
                    "float"
                ],
                "_": [
                    "bool",
                    "str"
                ]
            }
        },
        "_plot_axis": {
            "name": "_plot_axis",
            "location": 108,
            "return": [],
            "arguments": {
                "grid_spec": [],
                "grid_pos": [
                    "int",
                    "float",
                    "None"
                ],
                "values_to_plot": [
                    "dict[, ]",
                    "list[]",
                    "str"
                ],
                "title": [
                    "str",
                    "bool"
                ],
                "y_label_text": [
                    "str",
                    "bool"
                ],
                "values": [
                    "str",
                    "int",
                    "bytes",
                    "tuple[]"
                ],
                "now": [
                    "str",
                    "None",
                    "int"
                ],
                "y_format_func": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "None",
                    "list[str]"
                ],
                "visible_x_labels": [
                    "bool"
                ],
                "share_x": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "_get_axis": {
            "name": "_get_axis",
            "location": 135,
            "return": [
                "float",
                "int",
                "list[float]"
            ],
            "arguments": {
                "grid_spec": [
                    "int",
                    "list[dict[str, str]]",
                    "str",
                    "list[str]"
                ],
                "now": [
                    "int",
                    "list[dict[str, str]]",
                    "str",
                    "list[str]"
                ],
                "values": [
                    "dict[, ]",
                    "typing.Any",
                    "None",
                    "str",
                    "float",
                    "typing.Callable[, ]"
                ],
                "grid_pos": [
                    "int",
                    "list[dict[str, str]]",
                    "str",
                    "list[str]"
                ],
                "values_list": [
                    "list[]",
                    "list[str]",
                    "str",
                    "bool",
                    "set[str]"
                ],
                "labels_list": [
                    "list[]",
                    "list[str]",
                    "str",
                    "bool",
                    "set[str]"
                ],
                "title": [
                    "int",
                    "list[dict[str, str]]",
                    "str",
                    "list[str]"
                ],
                "y_label": [
                    "int",
                    "list[dict[str, str]]",
                    "str",
                    "list[str]"
                ],
                "visible_x": [
                    "int",
                    "list[dict[str, str]]",
                    "str",
                    "list[str]"
                ],
                "y_format_func": [
                    "int",
                    "list[dict[str, str]]",
                    "str",
                    "list[str]"
                ],
                "share_x": [
                    "None",
                    "int",
                    "list[dict[str, str]]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "_plot_server": {
            "name": "_plot_server",
            "location": 171,
            "return": [],
            "arguments": {
                "grid_spec": [
                    "float",
                    "list[]",
                    "int"
                ],
                "values": [
                    "float",
                    "list[]",
                    "int"
                ],
                "now": [
                    "float",
                    "list[]",
                    "int"
                ]
            }
        },
        "_plot_dcs": {
            "name": "_plot_dcs",
            "location": 188,
            "return": [],
            "arguments": {
                "grid_spec": [
                    "int",
                    "list[]",
                    "str",
                    "None"
                ],
                "values": [
                    "int",
                    "list[]",
                    "str",
                    "None"
                ],
                "now": [
                    "int",
                    "list[]",
                    "str",
                    "None"
                ],
                "share_x": [
                    "None",
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "_plot_bandwidth": {
            "name": "_plot_bandwidth",
            "location": 206,
            "return": [],
            "arguments": {
                "grid_spec": [
                    "int",
                    "str",
                    "list[]"
                ],
                "values": [
                    "int",
                    "str",
                    "list[]"
                ],
                "now": [
                    "int",
                    "str",
                    "list[]"
                ],
                "share_x": [
                    "None",
                    "int",
                    "str",
                    "list[]"
                ]
            }
        },
        "_add_players_count_to_axis": {
            "name": "_add_players_count_to_axis",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "axis": [],
                "players_history": [
                    "bytes"
                ]
            }
        },
        "_make_history_graph": {
            "name": "_make_history_graph",
            "location": 238,
            "return": [
                "None",
                "bool",
                "str"
            ],
            "arguments": {
                "values_to_process": [
                    "bool",
                    "list[typing.Any]",
                    "None",
                    "typing.Sequence[str]",
                    "list[str]",
                    "dict[str, str]"
                ],
                "days": [
                    "int"
                ],
                "hours": [
                    "int"
                ],
                "minutes": [
                    "int"
                ],
                "show": [
                    "bool"
                ],
                "save_path": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "make_history_graph": {
            "name": "make_history_graph",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "callback": [
                    "None",
                    "bool",
                    "float"
                ],
                "days": [
                    "int"
                ],
                "hours": [
                    "int"
                ],
                "minutes": [
                    "int"
                ],
                "show": [
                    "bool"
                ],
                "save_path": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "process_values._process": {
            "name": "_process",
            "location": 65,
            "return": [
                "list[tuple[int]]"
            ],
            "arguments": {
                "values": []
            }
        }
    },
    "esst-master/esst/utils/remove_old_files.py": {
        "clean_all_folder": {
            "name": "clean_all_folder",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/esst/utils/__init__.py": {
        "external_ip": {
            "name": "external_ip",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "sanitize_path": {
            "name": "sanitize_path",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "check_path": {
            "name": "check_path",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "check_file": {
            "name": "check_file",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "check_dir": {
            "name": "check_dir",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "_do_backup": {
            "name": "_do_backup",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "original": [],
                "backup": []
            }
        },
        "create_versioned_backup": {
            "name": "create_versioned_backup",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "bool",
                    "str",
                    "None"
                ],
                "file_must_exist": [
                    "bool"
                ]
            }
        },
        "create_simple_backup": {
            "name": "create_simple_backup",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "bool",
                    "str",
                    "None"
                ],
                "file_must_exist": [
                    "bool"
                ]
            }
        },
        "now": {
            "name": "now",
            "location": 152,
            "return": [],
            "arguments": {}
        },
        "read_template": {
            "name": "read_template",
            "location": 161,
            "return": [],
            "arguments": {
                "template_name": [
                    "str"
                ]
            }
        },
        "get_esst_changelog_path": {
            "name": "get_esst_changelog_path",
            "location": 183,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {}
        },
        "get_dcs_log_file_path": {
            "name": "get_dcs_log_file_path",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "_parse_file_info": {
            "name": "_parse_file_info",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "file_info_list": [
                    "list[str]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "get_product_version": {
            "name": "get_product_version",
            "location": 221,
            "return": [
                "dict[str, typing.Any]",
                "list[]",
                "str",
                "bool",
                "typing.ChainMap",
                "dict[str, typing.Union[bool,str]]",
                "list[tuple[typing.Union[None,typing.Any,str]]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "esst-master/esst/wan/__init__.py": {},
    "esst-master/test/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "pytest_unconfigure": {
            "name": "pytest_unconfigure",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_dummy_config": {
            "name": "_dummy_config",
            "location": 48,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "cleandir": {
            "name": "cleandir",
            "location": 61,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "typing.Callable[, ]"
                ],
                "tmpdir": [
                    "typing.Any",
                    "None",
                    "bytes",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "pytest_runtest_setup": {
            "name": "pytest_runtest_setup",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "item": []
            }
        }
    },
    "esst-master/test/test_imports.py": {
        "test_imports": {
            "name": "test_imports",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "module_": [
                    "str"
                ]
            }
        },
        "test_imports_tests": {
            "name": "test_imports_tests",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "module_": [
                    "str"
                ]
            }
        }
    },
    "esst-master/test/__init__.py": {},
    "esst-master/test/test_core/test_fs_path.py": {
        "_setup": {
            "name": "_setup",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ensure_path": {
            "name": "test_ensure_path",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_saved_games_not_found": {
            "name": "test_saved_games_not_found",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_dcs_dir_in_saved_games": {
            "name": "test_no_dcs_dir_in_saved_games",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_dcs_dir": {
            "name": "test_no_dcs_dir",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_variant": {
            "name": "test_base_variant",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_variant_open_beta_missing": {
            "name": "test_variant_open_beta_missing",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_variant_open_beta": {
            "name": "test_variant_open_beta",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "esst-master/test/test_dcs/test_autoexec_cfg.py": {
        "_setup": {
            "name": "_setup",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_injection": {
            "name": "test_injection",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_dcs_saved_games_path": {
            "name": "test_no_dcs_saved_games_path",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_config_path": {
            "name": "test_no_config_path",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_existing_file": {
            "name": "test_existing_file",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "esst-master/test/test_dcs/test_mission_editor_lua.py": {
        "_setup": {
            "name": "_setup",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_injection": {
            "name": "test_injection",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dcs_does_not_exist": {
            "name": "test_dcs_does_not_exist",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mission_editor_lua_does_not_exist": {
            "name": "test_mission_editor_lua_does_not_exist",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wrong_content": {
            "name": "test_wrong_content",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "esst-master/test/test_mission/test_store.py": {
        "_setup": {
            "name": "_setup",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_random_file_name": {
            "name": "_random_file_name",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int"
                ],
                "chars": []
            }
        },
        "test__get_mission_folder": {
            "name": "test__get_mission_folder",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test__get_mission_folder_path_exists": {
            "name": "test__get_mission_folder_path_exists",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "dict[str, P]"
                ],
                "path": [
                    "dict[str, P]"
                ]
            }
        },
        "test__get_mission_folder_path_is_file": {
            "name": "test__get_mission_folder_path_is_file",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "bool",
                    "str",
                    "dict[str, P]"
                ],
                "path": [
                    "bool",
                    "str",
                    "dict[str, P]"
                ]
            }
        },
        "test_get_base_missions_folder": {
            "name": "test_get_base_missions_folder",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_auto_missions_folder": {
            "name": "test_get_auto_missions_folder",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_random_auto_mission_name": {
            "name": "test_get_random_auto_mission_name",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_get_random_auto_mission_name_not_a_file": {
            "name": "test_get_random_auto_mission_name_not_a_file",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_get_random_auto_mission_name_not_a_miz_file": {
            "name": "test_get_random_auto_mission_name_not_a_miz_file",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_get_random_auto_mission_name_does_not_exist": {
            "name": "test_get_random_auto_mission_name_does_not_exist",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "test_clean_store": {
            "name": "test_clean_store",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str"
                ]
            }
        }
    }
}
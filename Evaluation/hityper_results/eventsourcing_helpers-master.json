{
    "eventsourcing_helpers-master/setup.py": {},
    "eventsourcing_helpers-master/eventsourcing_helpers/command_handler.py": {
        "CommandHandler._can_handle_command": {
            "name": "_can_handle_command",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "tuple[typing.Type]"
                ]
            }
        },
        "CommandHandler._handle_command": {
            "name": "_handle_command",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[str, dict[str, str]]"
                ],
                "handler_inst": [
                    "None",
                    "list[]",
                    "str"
                ]
            }
        },
        "CommandHandler.handle": {
            "name": "handle",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "ESCommandHandler.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESCommandHandler._get_aggregate_root": {
            "name": "_get_aggregate_root",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "ESCommandHandler._commit_staged_events": {
            "name": "_commit_staged_events",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregate_root": [
                    "str",
                    "bool",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "ESCommandHandler.handle": {
            "name": "handle",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/consumer.py": {
        "Consumer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messagebus": [
                    "int",
                    "float"
                ],
                "handler": [
                    "int",
                    "float"
                ]
            }
        },
        "Consumer.consume": {
            "name": "consume",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/event_handler.py": {
        "EventHandler._can_handle_command": {
            "name": "_can_handle_command",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "EventHandler._handle_event": {
            "name": "_handle_event",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "EventHandler.handle": {
            "name": "handle",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/handler.py": {
        "Handler.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_deserializer": []
            }
        },
        "Handler.handle": {
            "name": "handle",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/message.py": {
        "message_factory": {
            "name": "message_factory",
            "location": 77,
            "return": [
                "typing.Type"
            ],
            "arguments": {
                "message_cls": [
                    "list[str]",
                    "typing.Type",
                    "str"
                ],
                "is_new": [
                    "bool"
                ]
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message._class": {
            "name": "_class",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.to_dict": {
            "name": "to_dict",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__eq__": {
            "name": "__eq__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "typing.Type"
                ]
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__setattr__": {
            "name": "__setattr__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__getattr__": {
            "name": "__getattr__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Iterable[str]",
                    "bool"
                ]
            }
        },
        "NewMessage.__getattr__": {
            "name": "__getattr__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "set[str]",
                    "dict[str, str]",
                    "list[str]",
                    "list[\"libkol.Item\"]"
                ]
            }
        },
        "OldMessage.__getattr__": {
            "name": "__getattr__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "set[str]",
                    "tuple[]"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/metrics.py": {
        "call_counter": {
            "name": "call_counter",
            "location": 40,
            "return": [],
            "arguments": {
                "base_metric": []
            }
        },
        "timed": {
            "name": "timed",
            "location": 54,
            "return": [],
            "arguments": {
                "base_metric": [],
                "tags": [
                    "None"
                ]
            }
        },
        "StatsdNullClient.timed": {
            "name": "timed",
            "location": 13,
            "return": [
                "TimedNullDecorator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimedNullDecorator.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "f": []
            }
        },
        "TimedNullDecorator.__exit__": {
            "name": "__exit__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "call_counter.wrapped": {
            "name": "wrapped",
            "location": 41,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "timed.wrapped": {
            "name": "wrapped",
            "location": 58,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "TimedNullDecorator.__call__.wrapped": {
            "name": "wrapped",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "call_counter.wrapped.decorator": {
            "name": "decorator",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "timed.wrapped.decorator": {
            "name": "decorator",
            "location": 60,
            "return": [],
            "arguments": {}
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/models.py": {
        "Entity.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.__call__": {
            "name": "__call__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.get_representation": {
            "name": "get_representation",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entity._class": {
            "name": "_class",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entity._get_apply_method": {
            "name": "_get_apply_method",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [],
                "method_name": []
            }
        },
        "Entity._apply_event": {
            "name": "_apply_event",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "entity": [],
                "method_name": [],
                "is_new": []
            }
        },
        "Entity._stage_event": {
            "name": "_stage_event",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "is_new": []
            }
        },
        "Entity._get_child_entities": {
            "name": "_get_child_entities",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entity._get_all_entities": {
            "name": "_get_all_entities",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Entity._get_entity": {
            "name": "_get_entity",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Entity._get_apply_method_name": {
            "name": "_get_apply_method_name",
            "location": 151,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "event_class": []
            }
        },
        "Entity._clear_staged_events": {
            "name": "_clear_staged_events",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity._apply_events": {
            "name": "_apply_events",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": [],
                "ignore_missing_apply_methods": [
                    "bool"
                ]
            }
        },
        "Entity.create_id": {
            "name": "create_id",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.apply_event": {
            "name": "apply_event",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "is_new": [
                    "bool"
                ]
            }
        },
        "EntityDict.__repr__": {
            "name": "__repr__",
            "location": 225,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityDict.__setitem__": {
            "name": "__setitem__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "EntityDict._class": {
            "name": "_class",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityDict._get_child_entities": {
            "name": "_get_child_entities",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EntityDict._get_all_entities": {
            "name": "_get_all_entities",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/serializers.py": {
        "from_message_to_dto": {
            "name": "from_message_to_dto",
            "location": 11,
            "return": [
                "str",
                "int",
                "list[dict[str, typing.Any]]",
                "list[tuple[typing.Union[str,bool]]]"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "is_new": [
                    "bool"
                ]
            }
        },
        "to_message_from_dto": {
            "name": "to_message_from_dto",
            "location": 48,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "dto": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/utils.py": {
        "import_backend": {
            "name": "import_backend",
            "location": 6,
            "return": [
                "str",
                "set[str]",
                "list[]",
                "dict[str, typing.Type]",
                "list[str]"
            ],
            "arguments": {
                "location": [
                    "str"
                ]
            }
        },
        "get_all_nested_keys": {
            "name": "get_all_nested_keys",
            "location": 30,
            "return": [
                "list[tuple[typing.Union[typing.Any,typing.Any]]]",
                "dict[str, str]",
                "list[typing.Union[tuple[typing.Union[typing.Any,typing.Any]],list[]]]"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "current_keys": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "list[list[str]]"
                ]
            }
        },
        "get_callable_representation": {
            "name": "get_callable_representation",
            "location": 82,
            "return": [],
            "arguments": {
                "target": [
                    "str",
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/__init__.py": {},
    "eventsourcing_helpers-master/eventsourcing_helpers/messagebus/__init__.py": {
        "MessageBus.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "importer": []
            }
        },
        "MessageBus.produce": {
            "name": "produce",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict[str, str]"
                ],
                "key": [
                    "None",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "MessageBus.get_consumer": {
            "name": "get_consumer",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MessageBus.consume": {
            "name": "consume",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/messagebus/backends/__init__.py": {
        "MessageBusBackend.produce": {
            "name": "produce",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "tuple[typing.Union[typing.Sequence[typing.Any],typing.Sequence[str],typing.Sequence[typing.Any]]]",
                    "tuple[typing.Union[str,typing.Sequence[str],typing.Sequence[str]]]"
                ],
                "key": [
                    "None",
                    "str",
                    "int",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "tuple[typing.Union[typing.Sequence[typing.Any],typing.Sequence[str],typing.Sequence[typing.Any]]]",
                    "tuple[typing.Union[str,typing.Sequence[str],typing.Sequence[str]]]"
                ]
            }
        },
        "MessageBusBackend.get_consumer": {
            "name": "get_consumer",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/messagebus/backends/kafka/config.py": {
        "get_producer_config": {
            "name": "get_producer_config",
            "location": 25,
            "return": [
                "None",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "config": []
            }
        },
        "get_consumer_config": {
            "name": "get_consumer_config",
            "location": 37,
            "return": [
                "None",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "config": []
            }
        },
        "get_offset_watchdog_config": {
            "name": "get_offset_watchdog_config",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/messagebus/backends/kafka/__init__.py": {
        "KafkaAvroBackend.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "producer": [],
                "consumer": [],
                "value_serializer": [],
                "get_producer_config": [],
                "get_consumer_config": [],
                "get_offset_watchdog_config": []
            }
        },
        "KafkaAvroBackend._shall_handle": {
            "name": "_shall_handle",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "KafkaAvroBackend._set_handled": {
            "name": "_set_handled",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "KafkaAvroBackend._handle": {
            "name": "_handle",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "handler": [],
                "message": [],
                "consumer": []
            }
        },
        "KafkaAvroBackend.produce": {
            "name": "produce",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "key": [],
                "topic": []
            }
        },
        "KafkaAvroBackend.get_consumer": {
            "name": "get_consumer",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KafkaAvroBackend.consume": {
            "name": "consume",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/messagebus/backends/kafka/offset_watchdog/__init__.py": {
        "OffsetWatchdog.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "importer": []
            }
        },
        "OffsetWatchdog.seen": {
            "name": "seen",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "OffsetWatchdog.set_seen": {
            "name": "set_seen",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/messagebus/backends/kafka/offset_watchdog/backends/__init__.py": {
        "OffsetWatchdogBackend.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "OffsetWatchdogBackend._key": {
            "name": "_key",
            "location": 16,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "OffsetWatchdogBackend.seen": {
            "name": "seen",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "OffsetWatchdogBackend.set_seen": {
            "name": "set_seen",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/messagebus/backends/kafka/offset_watchdog/backends/memory/__init__.py": {
        "InMemoryOffsetWatchdogBackend.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "InMemoryOffsetWatchdogBackend.seen": {
            "name": "seen",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "InMemoryOffsetWatchdogBackend.set_seen": {
            "name": "set_seen",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/messagebus/backends/kafka/offset_watchdog/backends/null/__init__.py": {
        "NullOffsetWatchdogBackend.seen": {
            "name": "seen",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "NullOffsetWatchdogBackend.set_seen": {
            "name": "set_seen",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/messagebus/backends/kafka/offset_watchdog/backends/redis/__init__.py": {
        "RedisOffsetWatchdogBackend.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "RedisOffsetWatchdogBackend.redis": {
            "name": "redis",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisOffsetWatchdogBackend.seen": {
            "name": "seen",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "RedisOffsetWatchdogBackend.set_seen": {
            "name": "set_seen",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/messagebus/backends/mock/utils.py": {
        "create_message": {
            "name": "create_message",
            "location": 9,
            "return": [
                "Message"
            ],
            "arguments": {
                "message_class": [],
                "data": [],
                "headers": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/messagebus/backends/mock/__init__.py": {
        "Consumer.add_message": {
            "name": "add_message",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_class": [],
                "data": [],
                "headers": [
                    "None"
                ]
            }
        },
        "Consumer.get_messages": {
            "name": "get_messages",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Consumer.assert_one_message_added_with": {
            "name": "assert_one_message_added_with",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message_class": [],
                "data": [],
                "headers": [
                    "None"
                ]
            }
        },
        "Producer.add_message": {
            "name": "add_message",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Producer.clear_messages": {
            "name": "clear_messages",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Producer.assert_message_produced_with": {
            "name": "assert_message_produced_with",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Producer.assert_one_message_produced_with": {
            "name": "assert_one_message_produced_with",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Producer.assert_multiple_messages_produced_with": {
            "name": "assert_multiple_messages_produced_with",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages": []
            }
        },
        "Producer.assert_no_messages_produced": {
            "name": "assert_no_messages_produced",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Producer.assert_one_message_produced": {
            "name": "assert_one_message_produced",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockBackend.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "MockBackend.produce": {
            "name": "produce",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "key": [
                    "None"
                ]
            }
        },
        "MockBackend.consume": {
            "name": "consume",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/repository/builder.py": {
        "AggregateBuilder.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "bool"
                ],
                "aggregate_root_cls": [
                    "str",
                    "bool"
                ],
                "repository": []
            }
        },
        "AggregateBuilder.rebuild": {
            "name": "rebuild",
            "location": 17,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "max_offset": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/repository/__init__.py": {
        "Repository.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[, ]"
                ],
                "aggregate_root_cls": [
                    "str",
                    "list[]",
                    "dict[, ]",
                    "bool",
                    "None"
                ],
                "ignore_missing_apply_methods": [
                    "bool"
                ],
                "importer": [],
                "message_deserializer": [],
                "snapshot": []
            }
        },
        "Repository.commit": {
            "name": "commit",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregate_root": []
            }
        },
        "Repository.load": {
            "name": "load",
            "location": 83,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ],
                "max_offset": [
                    "None",
                    "int"
                ]
            }
        },
        "Repository._load_from_snapshot_storage": {
            "name": "_load_from_snapshot_storage",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Repository._load_from_event_storage": {
            "name": "_load_from_event_storage",
            "location": 113,
            "return": [
                "str",
                "typing.TextIO",
                "int"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ],
                "max_offset": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/repository/backends/__init__.py": {
        "RepositoryBackend.commit": {
            "name": "commit",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "list[]",
                    "str",
                    "int"
                ],
                "events": [
                    "list[]",
                    "str",
                    "int"
                ]
            }
        },
        "RepositoryBackend.load": {
            "name": "load",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "RepositoryBackend.get_events": {
            "name": "get_events",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/repository/backends/kafka/config.py": {
        "get_producer_config": {
            "name": "get_producer_config",
            "location": 5,
            "return": [
                "None",
                "dict[typing.Union[str,typing.Text,typing.Text], typing.Union[bool,dict[str, bool],dict[str, bool]]]"
            ],
            "arguments": {
                "config": [
                    "dict[, ]"
                ]
            }
        },
        "get_loader_config": {
            "name": "get_loader_config",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/repository/backends/kafka/__init__.py": {
        "KafkaAvroBackend.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "producer": [],
                "loader": [],
                "value_serializer": [],
                "get_producer_config": [],
                "get_loader_config": []
            }
        },
        "KafkaAvroBackend.commit": {
            "name": "commit",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "events": []
            }
        },
        "KafkaAvroBackend.load": {
            "name": "load",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "KafkaAvroBackend.get_events": {
            "name": "get_events",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "max_offset": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/repository/snapshot/config.py": {
        "get_snapshot_config": {
            "name": "get_snapshot_config",
            "location": 5,
            "return": [
                "dict[str, dict[str, str]]",
                "dict[str, dict[str, typing.Any]]",
                "str"
            ],
            "arguments": {
                "config": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/repository/snapshot/serializers.py": {
        "from_aggregate_root_to_snapshot": {
            "name": "from_aggregate_root_to_snapshot",
            "location": 8,
            "return": [
                "dict[typing.Text, typing.Union[str,dict[, ],dict[str, typing.Any],bool]]"
            ],
            "arguments": {
                "aggregate_root": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "current_hash": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "encoder": []
            }
        },
        "from_snapshot_to_aggregate_root": {
            "name": "from_snapshot_to_aggregate_root",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "snapshot": [
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "current_hash": [
                    "dict[, ]",
                    "bool",
                    "str",
                    "None"
                ],
                "decoder": []
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/repository/snapshot/__init__.py": {
        "get_hash": {
            "name": "get_hash",
            "location": 20,
            "return": [],
            "arguments": {
                "seed": [
                    "str"
                ]
            }
        },
        "Snapshot.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "importer": [],
                "serializer": [],
                "deserializer": [],
                "hash_function": []
            }
        },
        "Snapshot.save": {
            "name": "save",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregate_root": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "Snapshot.load": {
            "name": "load",
            "location": 74,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "dict[int, int]",
                    "None"
                ],
                "aggregate_root": [
                    "str",
                    "dict[str, str]",
                    "tuple[typing.Literal]"
                ]
            }
        },
        "Snapshot.delete": {
            "name": "delete",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregate_root": [
                    "str"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/repository/snapshot/backends/__init__.py": {
        "SnapshotBackend.save": {
            "name": "save",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "data": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "SnapshotBackend.load": {
            "name": "load",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "SnapshotBackend.delete": {
            "name": "delete",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "set[str]"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/repository/snapshot/backends/mongo/__init__.py": {
        "MongoSnapshotBackend.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict[str, list[typing.Callable[, ]]]"
                ],
                "mongo_client_class": []
            }
        },
        "MongoSnapshotBackend.save": {
            "name": "save",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "list[int]",
                    "list[str]"
                ],
                "data": [
                    "typing.Sequence[int]",
                    "dict[, ]"
                ]
            }
        },
        "MongoSnapshotBackend.load": {
            "name": "load",
            "location": 36,
            "return": [
                "dict[str, str]",
                "str",
                "frozenset",
                "dict[str, typing.Union[dict[, ],typing.Any,typing.Any]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        },
        "MongoSnapshotBackend.delete": {
            "name": "delete",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "list[int]"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/eventsourcing_helpers/repository/snapshot/backends/null/__init__.py": {
        "NullSnapshotBackend.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullSnapshotBackend.save": {
            "name": "save",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]"
                ],
                "data": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "NullSnapshotBackend.load": {
            "name": "load",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "NullSnapshotBackend.delete": {
            "name": "delete",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "set[str]"
                ]
            }
        }
    },
    "eventsourcing_helpers-master/tests/conftest.py": {
        "aggregate_root_cls_mock": {
            "name": "aggregate_root_cls_mock",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "importer_mock": {
            "name": "importer_mock",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "aggregate_root_cls_mock.aggregate_root_cls": {
            "name": "aggregate_root_cls",
            "location": 11,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "attrs": [
                    "dict[, ]"
                ],
                "exhaust_events": [
                    "bool"
                ]
            }
        },
        "importer_mock.importer": {
            "name": "importer",
            "location": 31,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "return_value": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/test_command_handler.py": {
        "ESCommandHandlerTests.setup_method": {
            "name": "setup_method",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESCommandHandlerTests.test_handle": {
            "name": "test_handle",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_metrics_timed": [],
                "mock_can_handle": [],
                "mock_get": [],
                "mock_handle": [],
                "mock_commit": []
            }
        },
        "ESCommandHandlerTests.test_handle_deletes_snapshot_on_error": {
            "name": "test_handle_deletes_snapshot_on_error",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_metrics_timed": [],
                "mock_can_handle": [],
                "mock_get": [],
                "mock_handle": [],
                "mock_commit": []
            }
        },
        "ESCommandHandlerTests.test_commit_staged_events": {
            "name": "test_commit_staged_events",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESCommandHandlerTests.test_handle_command_by_str": {
            "name": "test_handle_command_by_str",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ESCommandHandlerTests.test_handle_command_by_function": {
            "name": "test_handle_command_by_function",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandHandlerTests.setup_method": {
            "name": "setup_method",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandHandlerTests.test_handle": {
            "name": "test_handle",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_metrics_timed": [],
                "mock_can_handle": [],
                "mock_handle": []
            }
        },
        "CommandHandlerTests.test_can_handle_command": {
            "name": "test_can_handle_command",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandHandlerTests.test_handle_command": {
            "name": "test_handle_command",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/test_event_handler.py": {
        "EventHandlerTests.setup_method": {
            "name": "setup_method",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandlerTests.test_handle": {
            "name": "test_handle",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_can_handle": [],
                "mock_handle": []
            }
        },
        "EventHandlerTests.test_handle_event": {
            "name": "test_handle_event",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHandlerTests.test_can_handle_command": {
            "name": "test_can_handle_command",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/test_kafka_backend.py": {
        "AvroConsumerMock.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "AvroConsumerMock.__iter__": {
            "name": "__iter__",
            "location": 14,
            "return": [
                "AvroConsumerMock"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroConsumerMock.__next__": {
            "name": "__next__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AvroConsumerMock.__enter__": {
            "name": "__enter__",
            "location": 20,
            "return": [
                "AvroConsumerMock"
            ],
            "arguments": {
                "self": []
            }
        },
        "AvroConsumerMock.__exit__": {
            "name": "__exit__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "tb": []
            }
        },
        "KafkaBackendTests.setup_method": {
            "name": "setup_method",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaBackendTests.test_init": {
            "name": "test_init",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaBackendTests.test_consume": {
            "name": "test_consume",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/test_message.py": {
        "MessageTests.setup_method": {
            "name": "setup_method",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageTests.test_type": {
            "name": "test_type",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageTests.test_message_attr_redirect": {
            "name": "test_message_attr_redirect",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageTests.test_access_missing_attr_on_new_msg_should_raise_attribute_error": {
            "name": "test_access_missing_attr_on_new_msg_should_raise_attribute_error",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageTests.test_access_missing_attr_on_old_msg_should_return_none": {
            "name": "test_access_missing_attr_on_old_msg_should_return_none",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageTests.test_to_dict": {
            "name": "test_to_dict",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageTests.test_name": {
            "name": "test_name",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageTests.test_read_only": {
            "name": "test_read_only",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageTests.test_read_only_nested_data_type_new_message": {
            "name": "test_read_only_nested_data_type_new_message",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageTests.test_read_only_nested_data_type_old_message": {
            "name": "test_read_only_nested_data_type_old_message",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/test_metrics.py": {
        "StatsdNullClientTests.setup_method": {
            "name": "setup_method",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsdNullClientTests.test_method_calls_should_not_fail": {
            "name": "test_method_calls_should_not_fail",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsdNullClientTests.test_timed_decorator_should_execute_decorated_method": {
            "name": "test_timed_decorator_should_execute_decorated_method",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CallCounterTests.test_increments_total_count": {
            "name": "test_increments_total_count",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_statsd": []
            }
        },
        "CallCounterTests.test_increments_counts_and_reraises_exception": {
            "name": "test_increments_counts_and_reraises_exception",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_statsd": []
            }
        },
        "StatsdNullClientTests.test_timed_decorator_should_execute_decorated_method.foo": {
            "name": "foo",
            "location": 18,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "CallCounterTests.test_increments_total_count.foo": {
            "name": "foo",
            "location": 29,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "CallCounterTests.test_increments_counts_and_reraises_exception.foo": {
            "name": "foo",
            "location": 38,
            "return": [],
            "arguments": {
                "a": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/test_models.py": {
        "LargerTestAggregate.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedAggregate.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoubleNestedAggregate.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregateRootTests.test_subclass": {
            "name": "test_subclass",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTests.setup_method": {
            "name": "setup_method",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTests.test_apply_event": {
            "name": "test_apply_event",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_event": [],
                "mock_apply": []
            }
        },
        "EntityTests.test_apply_events": {
            "name": "test_apply_events",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_apply": []
            }
        },
        "EntityTests.test_clear_events": {
            "name": "test_clear_events",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTests.test_create_id": {
            "name": "test_create_id",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTests.test_get_apply_method_name": {
            "name": "test_get_apply_method_name",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTests.test_get_entity": {
            "name": "test_get_entity",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_entities": []
            }
        },
        "EntityTests.test_get_all_entities": {
            "name": "test_get_all_entities",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_entities": []
            }
        },
        "EntityTests.test_get_child_entities": {
            "name": "test_get_child_entities",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_entities": []
            }
        },
        "EntityTests.test_stage_event": {
            "name": "test_stage_event",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTests.test_get_apply_method": {
            "name": "test_get_apply_method",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityTests.test_apply_event_aggregate_root": {
            "name": "test_apply_event_aggregate_root",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_stage": [],
                "mock_apply": []
            }
        },
        "EntityTests.test_get_representation_includes_name_and_fields": {
            "name": "test_get_representation_includes_name_and_fields",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [],
                "data": []
            }
        },
        "EntityTests.test_get_representation_handles_nested_entities": {
            "name": "test_get_representation_handles_nested_entities",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entity": [],
                "data": []
            }
        },
        "EntityDictTests.setup_method": {
            "name": "setup_method",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityDictTests.test_values": {
            "name": "test_values",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EntityDictTests.test_get_all_entities": {
            "name": "test_get_all_entities",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_entities": []
            }
        },
        "EntityDictTests.test_get_child_entities": {
            "name": "test_get_child_entities",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_entities": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/test_offset_watchdog.py": {
        "OffsetWatchdogTests.setup_method": {
            "name": "setup_method",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OffsetWatchdogTests._create_message": {
            "name": "_create_message",
            "location": 18,
            "return": [
                "Mock"
            ],
            "arguments": {
                "self": [],
                "offset": []
            }
        },
        "OffsetWatchdogTests.test_nulloffsetwatchdogbackend": {
            "name": "test_nulloffsetwatchdogbackend",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OffsetWatchdogTests.test_inmemoryoffsetwatchdogbackend": {
            "name": "test_inmemoryoffsetwatchdogbackend",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OffsetWatchdogTests.test_default_backend_configured": {
            "name": "test_default_backend_configured",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/test_serializers.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SerializerTests.test_from_message_to_dto": {
            "name": "test_from_message_to_dto",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_factory": []
            }
        },
        "SerializerTests.test_to_message_from_dto": {
            "name": "test_to_message_from_dto",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/test_utils.py": {
        "myfunc": {
            "name": "myfunc",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_callable_representation": {
            "name": "test_get_callable_representation",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ],
                "expected_result": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ]
            }
        },
        "test_get_all_nested_keys": {
            "name": "test_get_all_nested_keys",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes"
                ],
                "expected_result": [
                    "str"
                ]
            }
        },
        "Test.method": {
            "name": "method",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.klass": {
            "name": "klass",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Test.static": {
            "name": "static",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "eventsourcing_helpers-master/tests/__init__.py": {},
    "eventsourcing_helpers-master/tests/messagebus/backends/mock/test_mock_backend.py": {
        "MockBackendTests.setup_method": {
            "name": "setup_method",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockBackendTests.test_consumer_assert_one_message_added_with": {
            "name": "test_consumer_assert_one_message_added_with",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "dict[str, str]"
                ],
                "expected_headers": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "MockBackendTests.test_consume_messages_should_call_handler": {
            "name": "test_consume_messages_should_call_handler",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockBackendTests.test_produced_assert_one_message_produced_with": {
            "name": "test_produced_assert_one_message_produced_with",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": []
            }
        },
        "MockBackendTests.test_producer_assert_multiple_messages_produced_with": {
            "name": "test_producer_assert_multiple_messages_produced_with",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MockBackendTests.test_producer_assert_multiple_messages_produced_with_invalid_length": {
            "name": "test_producer_assert_multiple_messages_produced_with_invalid_length",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "MockBackendTests.test_producer_assert_multiple_messages_produced_with_invalid_message": {
            "name": "test_producer_assert_multiple_messages_produced_with_invalid_message",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MockBackendTests.test_producer_assert_message_produced_with": {
            "name": "test_producer_assert_message_produced_with",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockBackendTests.test_producer_assert_no_messages_produced": {
            "name": "test_producer_assert_no_messages_produced",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockBackendTests.test_producer_assert_one_message_produced": {
            "name": "test_producer_assert_one_message_produced",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/repository/conftest.py": {
        "snapshot_mock": {
            "name": "snapshot_mock",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "repository_backend_mock": {
            "name": "repository_backend_mock",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "snapshot_mock.snapshot": {
            "name": "snapshot",
            "location": 11,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "return_value": []
            }
        },
        "repository_backend_mock.repository_backend": {
            "name": "repository_backend",
            "location": 22,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "return_value": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/repository/test_builder.py": {
        "TestAggregate.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAggregate.apply_first_event": {
            "name": "apply_first_event",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestAggregate.apply_second_event": {
            "name": "apply_second_event",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestAggregate.apply_third_event": {
            "name": "apply_third_event",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str"
                ]
            }
        },
        "AggregateBuilderTests.setup_method": {
            "name": "setup_method",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregateBuilderTests.test_rebuild_returns_the_aggregate_to_the_final_state": {
            "name": "test_rebuild_returns_the_aggregate_to_the_final_state",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregateBuilderTests.test_rebuild_returns_the_aggregate_in_the_right_state_when_max_offset_is_given": {
            "name": "test_rebuild_returns_the_aggregate_in_the_right_state_when_max_offset_is_given",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/repository/test_repository.py": {
        "RepositoryTests.setup_method": {
            "name": "setup_method",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregate_root_cls_mock": [
                    "str"
                ],
                "snapshot_mock": [],
                "repository_backend_mock": [],
                "importer_mock": []
            }
        },
        "RepositoryTests.test_should_load_aggr_root_from_event_storage": {
            "name": "test_should_load_aggr_root_from_event_storage",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepositoryTests.test_should_load_aggr_root_from_snapshot_storage": {
            "name": "test_should_load_aggr_root_from_snapshot_storage",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot_mock": []
            }
        },
        "RepositoryTests.test_should_apply_events_when_loading_from_event_storage": {
            "name": "test_should_apply_events_when_loading_from_event_storage",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregate_root_cls_mock": []
            }
        },
        "RepositoryTests.test_repository_commit_should_call_backend_and_snapshot": {
            "name": "test_repository_commit_should_call_backend_and_snapshot",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregate_root_cls_mock": []
            }
        },
        "RepositoryTests.test_repository_commit_should_delete_snapshot_on_kafka_exception": {
            "name": "test_repository_commit_should_delete_snapshot_on_kafka_exception",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregate_root_cls_mock": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/repository/__init__.py": {},
    "eventsourcing_helpers-master/tests/repository/backends/kafka/test_config.py": {
        "KafkaConfigTests.setup_method": {
            "name": "setup_method",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaConfigTests.test_get_producer_config": {
            "name": "test_get_producer_config",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaConfigTests.test_get_loader_config": {
            "name": "test_get_loader_config",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/repository/backends/kafka/test_kafka_backend.py": {
        "KafkaBackendTests.setup_method": {
            "name": "setup_method",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaBackendTests.test_init": {
            "name": "test_init",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaBackendTests.test_commit": {
            "name": "test_commit",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaBackendTests.test_load": {
            "name": "test_load",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KafkaBackendTests.test_get_events": {
            "name": "test_get_events",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/repository/snapshot/conftest.py": {
        "snapshot_backend_mock": {
            "name": "snapshot_backend_mock",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "snapshot_backend_mock.snapshot_backend": {
            "name": "snapshot_backend",
            "location": 10,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "return_value": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/repository/snapshot/test_snapshot.py": {
        "SnapshotTests.setup_method": {
            "name": "setup_method",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregate_root_cls_mock": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "snapshot_backend_mock": [
                    "str"
                ],
                "importer_mock": []
            }
        },
        "SnapshotTests.test_save": {
            "name": "test_save",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotTests.test_load": {
            "name": "test_load",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SnapshotTests.test_delete": {
            "name": "test_delete",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/repository/snapshot/backends/mongo/test_backend.py": {
        "MongoSnapshotBackendTests.setup_method": {
            "name": "setup_method",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aggregate_root_cls_mock": [
                    "bool",
                    "None",
                    "list[str]"
                ],
                "snapshot_backend_mock": [
                    "bool",
                    "None",
                    "list[str]"
                ],
                "importer_mock": [
                    "bool",
                    "None",
                    "list[str]"
                ]
            }
        },
        "MongoSnapshotBackendTests.test_mongo_save_saves_data": {
            "name": "test_mongo_save_saves_data",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoSnapshotBackendTests.test_mongo_load_loads_correct_data": {
            "name": "test_mongo_load_loads_correct_data",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoSnapshotBackendTests.test_mongo_init_uses_default_config": {
            "name": "test_mongo_init_uses_default_config",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "str",
                    "None"
                ],
                "expected_call": []
            }
        },
        "MongoSnapshotBackendTests.test_mongo_delete_deletes_latest_snapshot": {
            "name": "test_mongo_delete_deletes_latest_snapshot",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoSnapshotBackendTests.test_mongo_delete_can_delete_empty": {
            "name": "test_mongo_delete_can_delete_empty",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "eventsourcing_helpers-master/tests/repository/snapshot/backends/mongo/__init__.py": {}
}
{
    "explorer-master/backend/setup.py": {},
    "explorer-master/backend/metrics_backend/metrics_cli.py": {
        "no_ssl_verification": {
            "name": "no_ssl_verification",
            "location": 46,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "eth_rpc": [
                    "str",
                    "int"
                ],
                "registry_address": [
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "float"
                ],
                "start_block": [
                    "int",
                    "float"
                ],
                "port": [
                    "str",
                    "bool",
                    "list[str]",
                    "None"
                ],
                "confirmations": [
                    "int"
                ],
                "environment": [
                    "str",
                    "int",
                    "list[str]",
                    "set[str]"
                ]
            }
        },
        "write_topology_task": {
            "name": "write_topology_task",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "pathfinding_service": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "explorer-master/backend/metrics_backend/metrics_service.py": {
        "register_error_handler": {
            "name": "register_error_handler",
            "location": 30,
            "return": [],
            "arguments": {
                "error_handler": []
            }
        },
        "error_handler": {
            "name": "error_handler",
            "location": 45,
            "return": [],
            "arguments": {
                "_": [],
                "exc_info": []
            }
        },
        "register_error_handler.custom_handle_error": {
            "name": "custom_handle_error",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "type": [],
                "value": [],
                "tb": []
            }
        },
        "MetricsService.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "web3": [],
                "contract_manager": [],
                "registry_address": [],
                "sync_start_block": [],
                "required_confirmations": []
            }
        },
        "MetricsService._setup_token_networks": {
            "name": "_setup_token_networks",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetricsService._run": {
            "name": "_run",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetricsService.stop": {
            "name": "stop",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetricsService.follows_token_network": {
            "name": "follows_token_network",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "token_network_address": []
            }
        },
        "MetricsService._get_token_network": {
            "name": "_get_token_network",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "token_network_address": []
            }
        },
        "MetricsService.handle_channel_event": {
            "name": "handle_channel_event",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MetricsService.handle_channel_opened": {
            "name": "handle_channel_opened",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MetricsService.handle_channel_new_deposit": {
            "name": "handle_channel_new_deposit",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MetricsService.handle_channel_withdraw": {
            "name": "handle_channel_withdraw",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MetricsService.handle_channel_closed": {
            "name": "handle_channel_closed",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MetricsService.handle_channel_settled": {
            "name": "handle_channel_settled",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MetricsService.handle_token_network_created": {
            "name": "handle_token_network_created",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MetricsService.create_token_network_for_address": {
            "name": "create_token_network_for_address",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "token_network_address": [],
                "token_address": [],
                "block_number": []
            }
        }
    },
    "explorer-master/backend/metrics_backend/presence_service.py": {
        "PresenceService.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "privkey_seed": [
                    "int",
                    "str"
                ],
                "contract_manager": [
                    "str",
                    "dict[str, str]"
                ],
                "web3": [
                    "int",
                    "str"
                ],
                "block_confirmations": [
                    "int",
                    "str"
                ],
                "service_registry_address": [
                    "str",
                    "dict[str, str]"
                ],
                "poll_interval": [
                    "int"
                ],
                "error_poll_interval": [
                    "int"
                ]
            }
        },
        "PresenceService._run": {
            "name": "_run",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenceService.stop": {
            "name": "stop",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PresenceService.update_presence": {
            "name": "update_presence",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "online_addresses": []
            }
        }
    },
    "explorer-master/backend/metrics_backend/__init__.py": {},
    "explorer-master/backend/metrics_backend/api/rest.py": {
        "NetworkInfoResource.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_service": [
                    "int",
                    "float"
                ],
                "presence_service": [
                    "int",
                    "float"
                ]
            }
        },
        "NetworkInfoResource.get": {
            "name": "get",
            "location": 24,
            "return": [
                "tuple[typing.Union[dict[typing.Text, list[]],int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkInfoAPI.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metrics_service": [
                    "int",
                    "float"
                ],
                "presence_service": [
                    "int",
                    "float"
                ]
            }
        },
        "NetworkInfoAPI.run": {
            "name": "run",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int"
                ]
            }
        }
    },
    "explorer-master/backend/metrics_backend/api/__init__.py": {},
    "explorer-master/backend/metrics_backend/model/channel_view.py": {
        "ChannelView.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_id": [
                    "str",
                    "int"
                ],
                "participant1": [
                    "str",
                    "list[str]",
                    "None"
                ],
                "participant2": [
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "ChannelView.update_deposit": {
            "name": "update_deposit",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "participant": [
                    "str",
                    "int"
                ],
                "new_total_deposit": [
                    "float"
                ]
            }
        },
        "ChannelView.withdraw": {
            "name": "withdraw",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "participant": [
                    "typing.Iterable[str]",
                    "str",
                    "float"
                ],
                "new_total_withdraw": [
                    "int"
                ]
            }
        },
        "ChannelView.update_state": {
            "name": "update_state",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_state": [
                    "str",
                    "typing.Type",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "ChannelView.deposit_p1": {
            "name": "deposit_p1",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelView.deposit_p2": {
            "name": "deposit_p2",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChannelView.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "explorer-master/backend/metrics_backend/model/payment_network_metrics.py": {
        "PaymentNetworkMetrics.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaymentNetworkMetrics.handle_channel_opened_event": {
            "name": "handle_channel_opened_event",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "participant1": [
                    "bool"
                ],
                "participant2": [
                    "bool"
                ]
            }
        },
        "PaymentNetworkMetrics.handle_channel_closed_event": {
            "name": "handle_channel_closed_event",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "participant1": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "participant2": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "PaymentNetworkMetrics.handle_channel_settled_event": {
            "name": "handle_channel_settled_event",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaymentNetworkMetrics.handle_token_network_created": {
            "name": "handle_token_network_created",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PaymentNetworkMetrics._add_opened_channel_to_participant": {
            "name": "_add_opened_channel_to_participant",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "participant": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "PaymentNetworkMetrics._remove_opened_channel_from_participant": {
            "name": "_remove_opened_channel_from_participant",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "participant": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "explorer-master/backend/metrics_backend/model/token_network.py": {
        "TokenNetwork.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_network_address": [
                    "str",
                    "typing.Sequence[str]",
                    "typing.Callable[, ]",
                    "None",
                    "int"
                ],
                "token_info": [
                    "str",
                    "None"
                ]
            }
        },
        "TokenNetwork.handle_channel_opened_event": {
            "name": "handle_channel_opened_event",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "dict[, ]"
                ],
                "participant1": [],
                "participant2": []
            }
        },
        "TokenNetwork.handle_channel_new_deposit_event": {
            "name": "handle_channel_new_deposit_event",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [],
                "receiver": [
                    "list[str]",
                    "None"
                ],
                "total_deposit": [
                    "str",
                    "int"
                ]
            }
        },
        "TokenNetwork.handle_channel_withdraw_event": {
            "name": "handle_channel_withdraw_event",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [],
                "withdrawing_participant": [],
                "total_withdraw": [
                    "int",
                    "None"
                ]
            }
        },
        "TokenNetwork.handle_channel_closed_event": {
            "name": "handle_channel_closed_event",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TokenNetwork.handle_channel_settled_event": {
            "name": "handle_channel_settled_event",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TokenNetwork.get_channel": {
            "name": "get_channel",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel_identifier": [
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "TokenNetwork._add_opened_channel_to_participant": {
            "name": "_add_opened_channel_to_participant",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "participant": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TokenNetwork._add_closed_channel_to_participant": {
            "name": "_add_closed_channel_to_participant",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "participant": [
                    "str"
                ]
            }
        },
        "TokenNetwork._add_settled_channel_to_participant": {
            "name": "_add_settled_channel_to_participant",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "participant": [
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "explorer-master/backend/metrics_backend/model/__init__.py": {},
    "explorer-master/backend/metrics_backend/utils/blockchain_listener.py": {
        "create_channel_event_topics": {
            "name": "create_channel_event_topics",
            "location": 24,
            "return": [
                "list[None]"
            ],
            "arguments": {}
        },
        "create_registry_event_topics": {
            "name": "create_registry_event_topics",
            "location": 30,
            "return": [
                "list[]"
            ],
            "arguments": {
                "contract_manager": [
                    "dict[, ]"
                ]
            }
        },
        "decode_event": {
            "name": "decode_event",
            "location": 38,
            "return": [],
            "arguments": {
                "codec": [
                    "bool",
                    "bytes",
                    "list[list[int]]"
                ],
                "topic_to_event_abi": [
                    "str"
                ],
                "log_entry": [
                    "bytes",
                    "list[list[int]]"
                ]
            }
        },
        "get_events": {
            "name": "get_events",
            "location": 45,
            "return": [],
            "arguments": {
                "web3": [
                    "bool",
                    "float",
                    "list[str]",
                    "None",
                    "typing.Callable[str,str, float]"
                ],
                "contract_address": [
                    "int",
                    "float"
                ],
                "topics": [
                    "int",
                    "float"
                ],
                "from_block": [
                    "int"
                ],
                "to_block": [
                    "typing.Text"
                ]
            }
        },
        "BlockchainListener.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "web3": [
                    "str",
                    "int",
                    "float",
                    "typing.Callable[typing.Any, None]",
                    "None"
                ],
                "contract_manager": [
                    "str",
                    "bool"
                ],
                "contract_name": [
                    "bool",
                    "str",
                    "None"
                ],
                "contract_address": [
                    "str",
                    "None",
                    "float",
                    "tuple[int]",
                    "list[str]"
                ]
            }
        },
        "BlockchainListener.add_confirmed_listener": {
            "name": "add_confirmed_listener",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "int",
                    "str",
                    "None"
                ],
                "callback": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "BlockchainListener.add_unconfirmed_listener": {
            "name": "add_unconfirmed_listener",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topics": [
                    "int",
                    "str",
                    "None"
                ],
                "callback": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "BlockchainListener._run": {
            "name": "_run",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainListener.stop": {
            "name": "stop",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainListener.wait_sync": {
            "name": "wait_sync",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainListener._update": {
            "name": "_update",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainListener.filter_events": {
            "name": "filter_events",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_params": [],
                "name_to_callback": [
                    "dict[, ]",
                    "dict[int, dict[str, typing.Any]]"
                ]
            }
        },
        "BlockchainListener._detected_chain_reorg": {
            "name": "_detected_chain_reorg",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_block": []
            }
        },
        "BlockchainListener.reset_unconfirmed_on_reorg": {
            "name": "reset_unconfirmed_on_reorg",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_block": [
                    "int",
                    "typing.Sequence[typing.Hashable]"
                ]
            }
        },
        "BlockchainListener.get_filter_params": {
            "name": "get_filter_params",
            "location": 326,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": [],
                "from_block": [
                    "int",
                    "list[str]"
                ],
                "to_block": [
                    "int",
                    "list[str]"
                ]
            }
        }
    },
    "explorer-master/backend/metrics_backend/utils/serialisation.py": {
        "_state_to_str": {
            "name": "_state_to_str",
            "location": 14,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "state": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "_calculate_channels_per_node": {
            "name": "_calculate_channels_per_node",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "channels_by_participants": [],
                "num_participants": [
                    "int"
                ]
            }
        },
        "token_network_to_dict": {
            "name": "token_network_to_dict",
            "location": 35,
            "return": [],
            "arguments": {
                "token_network": [
                    "dict[str, typing.Any]",
                    "int",
                    "None",
                    "str"
                ],
                "nodes_presence_status": [
                    "int"
                ]
            }
        },
        "metrics_to_dict": {
            "name": "metrics_to_dict",
            "location": 118,
            "return": [],
            "arguments": {
                "payment_network_metrics": [
                    "bool"
                ]
            }
        }
    },
    "explorer-master/backend/metrics_backend/utils/token.py": {
        "get_token_name": {
            "name": "get_token_name",
            "location": 7,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "token_contract": [
                    "str",
                    "int"
                ]
            }
        },
        "get_token_symbol": {
            "name": "get_token_symbol",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "token_contract": [
                    "typing.Type"
                ]
            }
        },
        "get_token_decimals": {
            "name": "get_token_decimals",
            "location": 27,
            "return": [
                "int"
            ],
            "arguments": {
                "token_contract": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "get_token_info": {
            "name": "get_token_info",
            "location": 37,
            "return": [
                "TokenInfo"
            ],
            "arguments": {
                "token_contract": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "explorer-master/backend/metrics_backend/utils/__init__.py": {}
}
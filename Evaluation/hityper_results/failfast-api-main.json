{
    "failfast-api-main/setup.py": {},
    "failfast-api-main/conf/gunicorn.py": {},
    "failfast-api-main/hub2labhook/config.py": {
        "logfile_path": {
            "name": "logfile_path",
            "location": 9,
            "return": [],
            "arguments": {
                "jsonfmt": [
                    "bool"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "getenv": {
            "name": "getenv",
            "location": 30,
            "return": [
                "None",
                "str",
                "bool",
                "tuple[]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]"
                ],
                "default": [
                    "None",
                    "str",
                    "bool",
                    "tuple[]"
                ],
                "convert": [
                    "str"
                ]
            }
        },
        "envbool": {
            "name": "envbool",
            "location": 51,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "FailFastConfig.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "defaults": [
                    "None",
                    "int",
                    "tuple[]",
                    "float"
                ],
                "confpath": [
                    "None",
                    "int",
                    "tuple[]",
                    "float"
                ]
            }
        },
        "FailFastConfig.gitlab": {
            "name": "gitlab",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FailFastConfig.github": {
            "name": "github",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FailFastConfig.failfast": {
            "name": "failfast",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FailFastConfig.reload": {
            "name": "reload",
            "location": 177,
            "return": [
                "FailFastConfig"
            ],
            "arguments": {
                "self": [],
                "confpath": [
                    "str",
                    "bytes"
                ],
                "inplace": [
                    "bool"
                ]
            }
        },
        "FailFastConfig.load_conf": {
            "name": "load_conf",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, float]"
                ]
            }
        },
        "FailFastConfig.load_conffile": {
            "name": "load_conffile",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "confpath": [
                    "str"
                ]
            }
        }
    },
    "failfast-api-main/hub2labhook/exception.py": {
        "Hub2LabException.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "float"
                ],
                "payload": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Hub2LabException.to_dict": {
            "name": "to_dict",
            "location": 10,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hub2LabException.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "failfast-api-main/hub2labhook/loghandler.py": {
        "_json_default": {
            "name": "_json_default",
            "location": 15,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "JsonFormatter.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JsonFormatter._parse_format_string": {
            "name": "_parse_format_string",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JsonFormatter.add_fields": {
            "name": "add_fields",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "log_record": [],
                "record": [],
                "message_dict": []
            }
        },
        "JsonFormatter.format": {
            "name": "format",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "failfast-api-main/hub2labhook/options.py": {},
    "failfast-api-main/hub2labhook/pipeline.py": {
        "Pipeline.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "git_event": [],
                "config": [
                    "None"
                ]
            }
        },
        "Pipeline._parse_ci_file": {
            "name": "_parse_ci_file",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "filepath": []
            }
        },
        "Pipeline._checkout_repo": {
            "name": "_checkout_repo",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "gevent": [],
                "repo_path": []
            }
        },
        "Pipeline._get_ci_file": {
            "name": "_get_ci_file",
            "location": 73,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": [],
                "repo_path": []
            }
        },
        "Pipeline.trigger_pipeline": {
            "name": "trigger_pipeline",
            "location": 85,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pipeline.sync_only_ci_file": {
            "name": "sync_only_ci_file",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "gevent": [],
                "content": [],
                "ci_project": [],
                "ci_file": []
            }
        }
    },
    "failfast-api-main/hub2labhook/utils.py": {
        "pretty_time_delta": {
            "name": "pretty_time_delta",
            "location": 16,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "clone_url_with_auth": {
            "name": "clone_url_with_auth",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "base_url": [
                    "str"
                ],
                "auth": [
                    "str"
                ]
            }
        },
        "DelayedRequest.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "int",
                    "str",
                    "None"
                ],
                "func": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "DelayedRequest.run": {
            "name": "run",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "failfast-api-main/hub2labhook/__init__.py": {
        "_get_git_sha": {
            "name": "_get_git_sha",
            "location": 10,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "failfast-api-main/hub2labhook/api/app.py": {
        "getvalues": {
            "name": "getvalues",
            "location": 10,
            "return": [
                "list[tuple[typing.Union[str,str]]]",
                "list[dict[, ]]",
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "dict[int, str]",
                "dict[str, dict[, ]]",
                "list[]",
                "dict[, ]",
                "typing.Counter"
            ],
            "arguments": {}
        },
        "create_app": {
            "name": "create_app",
            "location": 29,
            "return": [
                "FailfastApp"
            ],
            "arguments": {}
        }
    },
    "failfast-api-main/hub2labhook/api/config.py": {},
    "failfast-api-main/hub2labhook/api/flaskapp.py": {
        "FlaskApp.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "FlaskApp.app": {
            "name": "app",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlaskApp.register_blueprints": {
            "name": "register_blueprints",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskApp.register_after_requests": {
            "name": "register_after_requests",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskApp.register_before_requests": {
            "name": "register_before_requests",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskApp.register_teardowns": {
            "name": "register_teardowns",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlaskApp.register_error_handlers": {
            "name": "register_error_handlers",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "failfast-api-main/hub2labhook/api/hook.py": {
        "test_error": {
            "name": "test_error",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "verify_signature": {
            "name": "verify_signature",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "payload_body": [
                    "str",
                    "None"
                ],
                "signature": [
                    "str",
                    "bool"
                ]
            }
        },
        "github_event": {
            "name": "github_event",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "gitlab_event": {
            "name": "gitlab_event",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "resync": {
            "name": "resync",
            "location": 82,
            "return": [],
            "arguments": {
                "gitlab_project_id": [
                    "str",
                    "int"
                ],
                "pipeline_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "failfast-api-main/hub2labhook/api/info.py": {
        "index": {
            "name": "index",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "gen_error": {
            "name": "gen_error",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "slow_req": {
            "name": "slow_req",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "version": {
            "name": "version",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "routes": {
            "name": "routes",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "failfast-api-main/hub2labhook/api/wsgi.py": {},
    "failfast-api-main/hub2labhook/api/__init__.py": {},
    "failfast-api-main/hub2labhook/api/handlers/errors.py": {
        "errorhandler": {
            "name": "errorhandler",
            "location": 5,
            "return": [],
            "arguments": {
                "context_app": [
                    "typing.Callable[, ]",
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "render_error": {
            "name": "render_error",
            "location": 16,
            "return": [
                "list[]"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "bool"
                ]
            }
        },
        "errorhandler.decorator": {
            "name": "decorator",
            "location": 6,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "errorhandler.decorator.func_wrapper": {
            "name": "func_wrapper",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "failfast-api-main/hub2labhook/api/handlers/request_logging.py": {
        "default_filter": {
            "name": "default_filter",
            "location": 7,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "_": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "filter_logs": {
            "name": "filter_logs",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "values": [
                    "str",
                    "list[str]"
                ],
                "filtered_fields": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "after_request_log": {
            "name": "after_request_log",
            "location": 39,
            "return": [
                "dict[, ]",
                "list[tuple[typing.Union[str,str]]]",
                "str",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "resp": [
                    "dict[, ]",
                    "list[tuple[typing.Union[str,str]]]",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "before_request_log": {
            "name": "before_request_log",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "failfast-api-main/hub2labhook/api/handlers/tracing.py": {},
    "failfast-api-main/hub2labhook/api/handlers/__init__.py": {},
    "failfast-api-main/hub2labhook/github/client.py": {
        "icon_url": {
            "name": "icon_url",
            "location": 42,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "icon": [
                    "bool",
                    "typing.Iterator",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "jwt_token": {
            "name": "jwt_token",
            "location": 60,
            "return": [],
            "arguments": {
                "integration_id": [
                    "int",
                    "str"
                ],
                "integration_pem": [
                    "str"
                ]
            }
        },
        "GithubClient.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "installation_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "GithubClient.integration_pem": {
            "name": "integration_pem",
            "location": 79,
            "return": [
                "str",
                "float",
                "typing.Sequence[str]",
                "list[]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubClient.headers": {
            "name": "headers",
            "location": 85,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": [],
                "extra": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict[str, dict[str, str]]"
                ]
            }
        },
        "GithubClient._url": {
            "name": "_url",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "GithubClient.token": {
            "name": "token",
            "location": 101,
            "return": [
                "typing.Pattern",
                "dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubClient.post_status": {
            "name": "post_status",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "dict[str, str]",
                    "int"
                ],
                "github_repo": [
                    "str",
                    "dict[, ]"
                ],
                "sha": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "GithubClient.fetch_file": {
            "name": "fetch_file",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "repo": [
                    "str"
                ],
                "file_path": [
                    "str"
                ],
                "ref": [
                    "typing.Text"
                ]
            }
        },
        "GithubClient.get_json": {
            "name": "get_json",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "dict[, ]"
                ],
                "params": [
                    "dict[, ]"
                ]
            }
        },
        "GithubClient.get_ci_file": {
            "name": "get_ci_file",
            "location": 145,
            "return": [
                "dict[typing.Text, typing.Union[str,dict[, ],None]]"
            ],
            "arguments": {
                "self": [],
                "source_repo": [
                    "str"
                ],
                "ref": [
                    "str"
                ]
            }
        },
        "GithubClient.get_checks": {
            "name": "get_checks",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "github_repo": [
                    "str"
                ],
                "sha": [
                    "str"
                ]
            }
        },
        "GithubClient.create_check": {
            "name": "create_check",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "github_repo": [
                    "str"
                ],
                "check_body": [
                    "str",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "GithubClient.update_check_run": {
            "name": "update_check_run",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "github_repo": [
                    "str",
                    "int"
                ],
                "check_body": [
                    "str"
                ],
                "check_id": [
                    "str",
                    "int"
                ]
            }
        },
        "GithubClient.check_run": {
            "name": "check_run",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "github_repo": [
                    "int",
                    "dict[, ]",
                    "str"
                ],
                "sha": [
                    "str",
                    "list[str]",
                    "bool"
                ]
            }
        }
    },
    "failfast-api-main/hub2labhook/github/__init__.py": {},
    "failfast-api-main/hub2labhook/github/models/check.py": {
        "CheckStatus.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "float"
                ]
            }
        },
        "CheckStatus.ztime": {
            "name": "ztime",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "timestr": [
                    "None",
                    "int",
                    "typing.Callable[str, int]",
                    "str"
                ]
            }
        },
        "CheckStatus.duration": {
            "name": "duration",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "started_at": [
                    "int",
                    "None"
                ],
                "finished_at": [
                    "None",
                    "str"
                ]
            }
        },
        "CheckStatus.task_actions": {
            "name": "task_actions",
            "location": 50,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "list[str]"
                ],
                "extra_actions": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "CheckStatus.object_kind": {
            "name": "object_kind",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.repourl": {
            "name": "repourl",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.build_trace_url": {
            "name": "build_trace_url",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "build_id": [
                    "str",
                    "None"
                ]
            }
        },
        "CheckStatus.sha": {
            "name": "sha",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.build_url": {
            "name": "build_url",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "build_id": [
                    "str",
                    "bytes"
                ]
            }
        },
        "CheckStatus.pipeline_url": {
            "name": "pipeline_url",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "pipeline_id": [
                    "str",
                    "int"
                ]
            }
        },
        "CheckStatus.details_url": {
            "name": "details_url",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.play_url": {
            "name": "play_url",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "build_id": [
                    "str",
                    "bytes"
                ]
            }
        },
        "CheckStatus.cancel_url": {
            "name": "cancel_url",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "build_id": [
                    "str",
                    "bytes"
                ]
            }
        },
        "CheckStatus.object_id": {
            "name": "object_id",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.project_id": {
            "name": "project_id",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.external_id": {
            "name": "external_id",
            "location": 128,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.list_task_actions": {
            "name": "list_task_actions",
            "location": 136,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "int",
                    "dict[str, typing.Union[str,int]]",
                    "dict[str, str]"
                ]
            }
        },
        "CheckStatus.check_name": {
            "name": "check_name",
            "location": 139,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.check_output": {
            "name": "check_output",
            "location": 146,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.started_at": {
            "name": "started_at",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.finished_at": {
            "name": "finished_at",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.completed_at": {
            "name": "completed_at",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.status": {
            "name": "status",
            "location": 188,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.conclusion": {
            "name": "conclusion",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.gitlab_status": {
            "name": "gitlab_status",
            "location": 205,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.render_pipeline_status": {
            "name": "render_pipeline_status",
            "location": 214,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.render_check": {
            "name": "render_check",
            "location": 225,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.check_title": {
            "name": "check_title",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.check_summary": {
            "name": "check_summary",
            "location": 258,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.build_info_row": {
            "name": "build_info_row",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "build_info": [
                    "tuple[typing.Union[bool,list[str]]]"
                ]
            }
        },
        "CheckStatus.check_text": {
            "name": "check_text",
            "location": 311,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.check_pipeline_title": {
            "name": "check_pipeline_title",
            "location": 329,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.check_pipeline_summary": {
            "name": "check_pipeline_summary",
            "location": 341,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckStatus.check_pipeline_text": {
            "name": "check_pipeline_text",
            "location": 360,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "failfast-api-main/hub2labhook/github/models/event.py": {
        "GithubEvent.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "headers": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "GithubEvent.external_id": {
            "name": "external_id",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.ref": {
            "name": "ref",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent._parse_ref": {
            "name": "_parse_ref",
            "location": 36,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "ref": [
                    "bytes",
                    "str"
                ]
            }
        },
        "GithubEvent.pr_id": {
            "name": "pr_id",
            "location": 43,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.commit_message": {
            "name": "commit_message",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.commit_url": {
            "name": "commit_url",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.clone_url": {
            "name": "clone_url",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.installation_id": {
            "name": "installation_id",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.refname": {
            "name": "refname",
            "location": 79,
            "return": [
                "int",
                "bytes",
                "dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.target_refname": {
            "name": "target_refname",
            "location": 91,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.event_type": {
            "name": "event_type",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.comment": {
            "name": "comment",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.author_association": {
            "name": "author_association",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.action": {
            "name": "action",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.label": {
            "name": "label",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.pull_request_url": {
            "name": "pull_request_url",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.head_sha": {
            "name": "head_sha",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent._raise_unsupported": {
            "name": "_raise_unsupported",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.repo": {
            "name": "repo",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.pr_repo": {
            "name": "pr_repo",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.user": {
            "name": "user",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.istag": {
            "name": "istag",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GithubEvent.source_repo": {
            "name": "source_repo",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "failfast-api-main/hub2labhook/github/models/__init__.py": {},
    "failfast-api-main/hub2labhook/gitlab/client.py": {
        "GitlabClient.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "None",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "token": [
                    "None",
                    "str",
                    "typing.Mapping",
                    "dict[str, str]",
                    "list[str]"
                ],
                "config": [
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "GitlabClient._url": {
            "name": "_url",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list[dict[, ]]"
                ]
            }
        },
        "GitlabClient.create_webhooks": {
            "name": "create_webhooks",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int"
                ]
            }
        },
        "GitlabClient.headers": {
            "name": "headers",
            "location": 54,
            "return": [
                "dict[typing.Any, str]",
                "dict[str, list[str]]",
                "dict[str, str]",
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GitlabClient.gitlabci_lint": {
            "name": "gitlabci_lint",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes",
                    "None",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "GitlabClient.get_project": {
            "name": "get_project",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int"
                ]
            }
        },
        "GitlabClient.get_project_id": {
            "name": "get_project_id",
            "location": 81,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GitlabClient.get_variables": {
            "name": "get_variables",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int"
                ]
            }
        },
        "GitlabClient.get_variable": {
            "name": "get_variable",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int",
                    "None"
                ],
                "key": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "GitlabClient.set_variables": {
            "name": "set_variables",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int"
                ],
                "variables": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, int]"
                ]
            }
        },
        "GitlabClient.get_job": {
            "name": "get_job",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str"
                ],
                "job_id": [
                    "str"
                ]
            }
        },
        "GitlabClient.get_statuses": {
            "name": "get_statuses",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int"
                ],
                "sha": [
                    "str",
                    "int"
                ]
            }
        },
        "GitlabClient.get_jobs": {
            "name": "get_jobs",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int"
                ],
                "pipeline_id": [
                    "str",
                    "int"
                ]
            }
        },
        "GitlabClient.get_pipelines": {
            "name": "get_pipelines",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int",
                    "None"
                ],
                "ref": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Sequence[dict[str, str]]",
                    "int"
                ]
            }
        },
        "GitlabClient.get_pipeline_status": {
            "name": "get_pipeline_status",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int"
                ],
                "pipeline_id": [
                    "str",
                    "int"
                ]
            }
        },
        "GitlabClient.get_namespace_id": {
            "name": "get_namespace_id",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [
                    "str",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "GitlabClient.get_or_create_project": {
            "name": "get_or_create_project",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "project_name": [
                    "str",
                    "list[str]"
                ],
                "namespace": [
                    "None",
                    "str",
                    "bytes",
                    "dict[str, str]",
                    "bool"
                ],
                "repo_public": [
                    "bool"
                ]
            }
        },
        "GitlabClient.push_file": {
            "name": "push_file",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "dict[, ]"
                ],
                "file_path": [
                    "str",
                    "None",
                    "typing.BinaryIO"
                ],
                "file_content": [
                    "str",
                    "None"
                ],
                "branch": [
                    "str",
                    "None"
                ],
                "message": [
                    "str",
                    "None"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "GitlabClient.delete_project": {
            "name": "delete_project",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "project_id": [
                    "int",
                    "str"
                ]
            }
        },
        "GitlabClient.get_branches": {
            "name": "get_branches",
            "location": 243,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "int",
                    "str",
                    "None",
                    "Exception"
                ],
                "search": [
                    "None",
                    "int",
                    "str",
                    "dict[str, 'LabwareDefinition']"
                ]
            }
        },
        "GitlabClient.delete_old_branches": {
            "name": "delete_old_branches",
            "location": 261,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "None",
                    "int"
                ],
                "branches": [
                    "str",
                    "list[str]"
                ],
                "days_old": [
                    "str",
                    "bool",
                    "list[int]",
                    "tuple[typing.Union[float,float]]"
                ]
            }
        },
        "GitlabClient.delete_branch": {
            "name": "delete_branch",
            "location": 274,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "None"
                ],
                "branch": [
                    "str",
                    "None"
                ]
            }
        },
        "GitlabClient.initialize_project": {
            "name": "initialize_project",
            "location": 281,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str"
                ],
                "namespace": [
                    "None",
                    "str"
                ]
            }
        },
        "GitlabClient.retry_build": {
            "name": "retry_build",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "gitlab_project_id": [
                    "str",
                    "int"
                ],
                "build_id": [
                    "str",
                    "int"
                ]
            }
        },
        "GitlabClient.retry_pipeline": {
            "name": "retry_pipeline",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "gitlab_project_id": [
                    "str",
                    "int"
                ],
                "sha": [
                    "str",
                    "int"
                ]
            }
        },
        "GitlabClient.trigger_build": {
            "name": "trigger_build",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "gitlab_project": [
                    "bool",
                    "typing.Iterable[typing.Callable[, ]]"
                ],
                "variables": [
                    "None",
                    "typing.Callable[, ]",
                    "list[str]"
                ],
                "trigger_token": [
                    "None",
                    "str"
                ],
                "branch": [
                    "typing.Text"
                ]
            }
        }
    },
    "failfast-api-main/hub2labhook/gitlab/__init__.py": {},
    "failfast-api-main/hub2labhook/gitlab/models/__init__.py": {},
    "failfast-api-main/hub2labhook/jobs/celeryconfig.py": {},
    "failfast-api-main/hub2labhook/jobs/job_base.py": {
        "JobBase.after_return": {
            "name": "after_return",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "bytes",
                    "list[str]",
                    "list[int]",
                    "bool",
                    "dict[, ]"
                ],
                "retval": [
                    "str",
                    "bytes",
                    "list[str]",
                    "list[int]",
                    "bool",
                    "dict[, ]"
                ],
                "task_id": [
                    "str",
                    "bytes",
                    "list[str]",
                    "list[int]",
                    "bool",
                    "dict[, ]"
                ],
                "args": [],
                "kwargs": [],
                "einfo": [
                    "str",
                    "bytes",
                    "list[str]",
                    "list[int]",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "JobBase.on_failure": {
            "name": "on_failure",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "task_id": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "einfo": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ]
            }
        },
        "JobBase.on_retry": {
            "name": "on_retry",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "task_id": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "einfo": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ]
            }
        },
        "JobBase.on_success": {
            "name": "on_success",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retval": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "task_id": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "JobBase.task_queue": {
            "name": "task_queue",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobBase.task_routing_key": {
            "name": "task_routing_key",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "failfast-api-main/hub2labhook/jobs/runner.py": {},
    "failfast-api-main/hub2labhook/jobs/tasks.py": {
        "is_authorized": {
            "name": "is_authorized",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "group": [],
                "config": []
            }
        },
        "istriggered_on_comments": {
            "name": "istriggered_on_comments",
            "location": 30,
            "return": [],
            "arguments": {
                "gevent": [],
                "config": []
            }
        },
        "istriggered_on_labels": {
            "name": "istriggered_on_labels",
            "location": 39,
            "return": [],
            "arguments": {
                "gevent": [],
                "config": []
            }
        },
        "istriggered_on_branches": {
            "name": "istriggered_on_branches",
            "location": 47,
            "return": [],
            "arguments": {
                "gevent": [],
                "config": []
            }
        },
        "istriggered_on_pr": {
            "name": "istriggered_on_pr",
            "location": 63,
            "return": [],
            "arguments": {
                "gevent": [],
                "config": []
            }
        },
        "update_github_check": {
            "name": "update_github_check",
            "location": 73,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "pipeline": {
            "name": "pipeline",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "headers": []
            }
        },
        "update_github_statuses_failure": {
            "name": "update_github_statuses_failure",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "exc": [],
                "traceback": [],
                "event": [],
                "headers": []
            }
        },
        "post_pipeline_status": {
            "name": "post_pipeline_status",
            "location": 114,
            "return": [],
            "arguments": {
                "project": [],
                "pipeline_attr": []
            }
        },
        "update_pipeline_status": {
            "name": "update_pipeline_status",
            "location": 161,
            "return": [],
            "arguments": {
                "gitlab_project_id": [],
                "pipeline_id": []
            }
        },
        "update_pipeline_hook": {
            "name": "update_pipeline_hook",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "retry_build": {
            "name": "retry_build",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "external_id": [],
                "sha": []
            }
        },
        "skip_check": {
            "name": "skip_check",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "request_action": {
            "name": "request_action",
            "location": 228,
            "return": [],
            "arguments": {
                "action": [],
                "event": []
            }
        },
        "retry_pipeline": {
            "name": "retry_pipeline",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "resync_action": {
            "name": "resync_action",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "start_pipeline": {
            "name": "start_pipeline",
            "location": 324,
            "return": [],
            "arguments": {
                "event": [],
                "headers": []
            }
        }
    },
    "failfast-api-main/hub2labhook/jobs/__init__.py": {},
    "failfast-api-main/scripts/generate-conf-doc.py": {},
    "failfast-api-main/scripts/migrate_variables.py": {
        "migrate_variables": {
            "name": "migrate_variables",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "project_source_id": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "project_target_id": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        }
    },
    "failfast-api-main/tests/conftest.py": {
        "app": {
            "name": "app",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "get_request": {
            "name": "get_request",
            "location": 17,
            "return": [],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "testenv": {
            "name": "testenv",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "push_headers": {
            "name": "push_headers",
            "location": 30,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "pr_headers": {
            "name": "pr_headers",
            "location": 37,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "ping_headers": {
            "name": "ping_headers",
            "location": 44,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "ping_data": {
            "name": "ping_data",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "pipeline_hook_data": {
            "name": "pipeline_hook_data",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "pipeline_hook2_data": {
            "name": "pipeline_hook2_data",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "build_hook_data": {
            "name": "build_hook_data",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "pr_data": {
            "name": "pr_data",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "push_data": {
            "name": "push_data",
            "location": 76,
            "return": [],
            "arguments": {}
        }
    },
    "failfast-api-main/tests/test_check.py": {
        "test_checkstatus_pipeline_init": {
            "name": "test_checkstatus_pipeline_init",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "pipeline_hook_data": [
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_checkstatus_build_init": {
            "name": "test_checkstatus_build_init",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "build_hook_data": [
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[int, dict[int, typing.Any]]",
                    "list[]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_checkstatus_build_title": {
            "name": "test_checkstatus_build_title",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "build_hook_data": [
                    "dict[str, typing.Any]",
                    "int",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "test_checkstatus_build_summary": {
            "name": "test_checkstatus_build_summary",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "build_hook_data": [
                    "dict[str, typing.Any]",
                    "int",
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "test_checkstatus_build_text": {
            "name": "test_checkstatus_build_text",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "build_hook_data": [
                    "int",
                    "dict[str, list[typing.Any]]",
                    "str",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "test_checkstatus_pipeline_title": {
            "name": "test_checkstatus_pipeline_title",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "pipeline_hook_data": [
                    "bytes",
                    "str",
                    "dict[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "test_checkstatus_pipeline_summary": {
            "name": "test_checkstatus_pipeline_summary",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "pipeline_hook_data": [
                    "bytes",
                    "str",
                    "dict[, ]",
                    "int",
                    "None"
                ]
            }
        },
        "test_checkstatus_pipeline_text": {
            "name": "test_checkstatus_pipeline_text",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "pipeline_hook_data": [
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "dict[, ]"
                ]
            }
        },
        "test_checkstatus_pipeline2_text": {
            "name": "test_checkstatus_pipeline2_text",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "pipeline_hook2_data": [
                    "bool",
                    "list[dict[str, typing.Any]]",
                    "dict[, ]"
                ]
            }
        }
    },
    "failfast-api-main/tests/test_githubevent.py": {
        "test_ping_event": {
            "name": "test_ping_event",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "ping_data": [
                    "int",
                    "dict[str, int]"
                ],
                "ping_headers": [
                    "int",
                    "dict[str, int]"
                ]
            }
        },
        "test_push_event": {
            "name": "test_push_event",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "push_data": [
                    "int",
                    "dict[str, int]"
                ],
                "push_headers": [
                    "int",
                    "dict[str, int]"
                ]
            }
        },
        "test_pr_event": {
            "name": "test_pr_event",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "pr_data": [
                    "int",
                    "dict[str, int]"
                ],
                "pr_headers": [
                    "int",
                    "dict[str, int]"
                ]
            }
        }
    }
}
{
    "filtrark-master/filtrark/api.py": {
        "expression": {
            "name": "expression",
            "location": 7,
            "return": [],
            "arguments": {
                "domain": [
                    "str",
                    "None",
                    "ImportError"
                ],
                "context": [
                    "None",
                    "str",
                    "ImportError"
                ]
            }
        },
        "sql": {
            "name": "sql",
            "location": 13,
            "return": [],
            "arguments": {
                "domain": [
                    "str",
                    "bool"
                ],
                "context": [
                    "None",
                    "str",
                    "bool"
                ],
                "placeholder": [
                    "typing.Text"
                ]
            }
        }
    },
    "filtrark-master/filtrark/expression_parser.py": {
        "ExpressionParser.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "ExpressionParser.parse": {
            "name": "parse",
            "location": 40,
            "return": [
                "typing.Callable[, ]",
                "typing.Generator[typing.Union[typing.Any,None,None]]",
                "list[typing.Callable[[], typing.Any]]",
                "list[]",
                "dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "list[str]",
                    "str",
                    "float",
                    "int",
                    "typing.Container"
                ],
                "context": [
                    "None",
                    "list[float]",
                    "dict[str, typing.Any]"
                ],
                "namespaces": [
                    "list[]"
                ]
            }
        },
        "ExpressionParser._default_join": {
            "name": "_default_join",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "stack": []
            }
        },
        "ExpressionParser._parse_term": {
            "name": "_parse_term",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "term_tuple": [
                    "str",
                    "typing.Callable[str, T]",
                    "typing.Any",
                    "None"
                ],
                "context": [
                    "None",
                    "bool"
                ],
                "namespaces": [
                    "list[]"
                ]
            }
        },
        "ExpressionParser._build_filter": {
            "name": "_build_filter",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "field": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "comparator": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "namespaces": [
                    "list[]"
                ]
            }
        },
        "ExpressionParser._process_namespaces": {
            "name": "_process_namespaces",
            "location": 91,
            "return": [
                "tuple[typing.Union[list[],str,tuple[],list[str]]]",
                "tuple[typing.Union[T,str,list[float]]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "list[T]"
                ],
                "field": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "namespaces": [
                    "dict[str, typing.Any]",
                    "set[str]",
                    "tuple[typing.Union[str,int,int]]",
                    "str"
                ]
            }
        },
        "ExpressionParser._parse_like": {
            "name": "_parse_like",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "pattern": [
                    "str",
                    "bytes"
                ],
                "insensitive": [
                    "bool"
                ]
            }
        },
        "ExpressionParser._build_filter.function": {
            "name": "function",
            "location": 85,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "filtrark-master/filtrark/safe_eval.py": {
        "SafeEval.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "None",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "SafeEval.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "expression": [
                    "str"
                ],
                "locals": [
                    "None",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes",
                    "typing.Type"
                ]
            }
        }
    },
    "filtrark-master/filtrark/sql_parser.py": {
        "SqlParser.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "typing.Callable[, ]"
                ],
                "placeholder": [
                    "typing.Text"
                ],
                "jsonb_collection": [
                    "typing.Text"
                ]
            }
        },
        "SqlParser.parse": {
            "name": "parse",
            "location": 36,
            "return": [
                "tuple[typing.Union[typing.Text,tuple[]]]",
                "tuple[typing.Union[str,tuple[]]]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "dict[str, typing.Any]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "context": [
                    "None",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Iterator",
                    "typing.Mapping"
                ],
                "namespaces": [
                    "list[]"
                ],
                "jsonb_collection": [
                    "None",
                    "str",
                    "set[]"
                ]
            }
        },
        "SqlParser._default_join": {
            "name": "_default_join",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "stack": []
            }
        },
        "SqlParser._parse_term": {
            "name": "_parse_term",
            "location": 91,
            "return": [
                "tuple[typing.Union[str,typing.Type,dict[int, typing.Any],list[]]]"
            ],
            "arguments": {
                "self": [],
                "term_tuple": [
                    "str",
                    "typing.Callable[str, T]",
                    "typing.Any",
                    "None"
                ],
                "context": [
                    "None",
                    "bool"
                ],
                "position": [
                    "int"
                ]
            }
        },
        "SqlParser._to_jsonb_domain": {
            "name": "_to_jsonb_domain",
            "location": 103,
            "return": [
                "list[typing.Union[typing.Text,tuple[typing.Union[typing.Text,dict[str, str],typing.DefaultDict,tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]],dict[str, tuple[typing.Union[str,str,str]]],frozenset,dict[str, bool],bytes,set[],float]]]]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str"
                ],
                "collection": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "filtrark-master/filtrark/types.py": {},
    "filtrark-master/filtrark/__init__.py": {},
    "filtrark-master/tests/test_api.py": {
        "TestApi.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_api_expression": {
            "name": "test_api_expression",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_api_sql": {
            "name": "test_api_sql",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApi.test_api_expression.expected": {
            "name": "expected",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        }
    },
    "filtrark-master/tests/test_expression_parser.py": {
        "TestExpressionParser.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_object_creation": {
            "name": "test_expression_parser_object_creation",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_parse_tuple": {
            "name": "test_expression_parser_parse_tuple",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_parse_single_term": {
            "name": "test_expression_parser_parse_single_term",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_default_join": {
            "name": "test_expression_parser_default_join",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_parse_multiple_terms": {
            "name": "test_expression_parser_parse_multiple_terms",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_with_empty_list": {
            "name": "test_expression_parser_with_empty_list",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_with_lists_of_lists": {
            "name": "test_expression_parser_with_lists_of_lists",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_parse_like": {
            "name": "test_expression_parser_parse_like",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_parse_contains": {
            "name": "test_expression_parser_parse_contains",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_parse_evaluator": {
            "name": "test_expression_parser_parse_evaluator",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_evaluator_context": {
            "name": "test_expression_parser_evaluator_context",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_namespaces": {
            "name": "test_expression_parser_namespaces",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_with_dict": {
            "name": "test_expression_parser_with_dict",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExpressionParser.test_expression_parser_parse_single_term.expected": {
            "name": "expected",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        },
        "TestExpressionParser.test_expression_parser_default_join.expected": {
            "name": "expected",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        },
        "TestExpressionParser.test_expression_parser_with_lists_of_lists.expected": {
            "name": "expected",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        }
    },
    "filtrark-master/tests/test_safe_eval.py": {
        "TestSafeEval.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeEval.test_safe_eval_object_creation": {
            "name": "test_safe_eval_object_creation",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeEval.test_safe_eval_doesnt_have_globals_or_locals_by_default": {
            "name": "test_safe_eval_doesnt_have_globals_or_locals_by_default",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeEval.test_safe_eval_doesnt_evaluate_unprefixed_strings": {
            "name": "test_safe_eval_doesnt_evaluate_unprefixed_strings",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeEval.test_safe_eval_evaluate_simple_expression": {
            "name": "test_safe_eval_evaluate_simple_expression",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeEval.test_safe_custom_prefix": {
            "name": "test_safe_custom_prefix",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeEval.test_safe_eval_forbidden_characters": {
            "name": "test_safe_eval_forbidden_characters",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeEval.test_safe_eval_safe_builtins": {
            "name": "test_safe_eval_safe_builtins",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeEval.test_safe_eval_custom_locals": {
            "name": "test_safe_eval_custom_locals",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSafeEval.test_safe_eval_only_works_with_strings": {
            "name": "test_safe_eval_only_works_with_strings",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "filtrark-master/tests/test_sql_parser.py": {
        "TestSqlParser.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_object_creation": {
            "name": "test_sql_parser_object_creation",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_parse_tuple": {
            "name": "test_sql_parser_parse_tuple",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_parse_single_term": {
            "name": "test_sql_parser_parse_single_term",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_default_join": {
            "name": "test_sql_parser_default_join",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_string_parser_parse_multiple_terms": {
            "name": "test_string_parser_parse_multiple_terms",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_with_empty_list": {
            "name": "test_sql_parser_with_empty_list",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_with_lists_of_lists": {
            "name": "test_sql_parser_with_lists_of_lists",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_with_lists_parameters": {
            "name": "test_sql_parser_with_lists_parameters",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_parse_evaluator": {
            "name": "test_sql_parser_parse_evaluator",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_evaluator_context": {
            "name": "test_sql_parser_evaluator_context",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_namespaces": {
            "name": "test_sql_parser_namespaces",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_comparison_dict": {
            "name": "test_sql_parser_comparison_dict",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_jsonb_collection": {
            "name": "test_sql_parser_jsonb_collection",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_parse_with_jsonb_collection": {
            "name": "test_sql_parser_parse_with_jsonb_collection",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_parse_and_with_numeric_placeholders": {
            "name": "test_sql_parser_parse_and_with_numeric_placeholders",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_parse_or_with_numeric_placeholders": {
            "name": "test_sql_parser_parse_or_with_numeric_placeholders",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSqlParser.test_sql_parser_parse_complex_with_numeric_placeholders": {
            "name": "test_sql_parser_parse_complex_with_numeric_placeholders",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "filtrark-master/tests/__init__.py": {}
}
{
    "fimfarchive-master/setup.py": {
        "to_name": {
            "name": "to_name",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "iter_package_paths": {
            "name": "iter_package_paths",
            "location": 45,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "iter_package_names": {
            "name": "iter_package_names",
            "location": 54,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "iter_package_data": {
            "name": "iter_package_data",
            "location": 62,
            "return": [
                "typing.Generator[tuple[list[]]]"
            ],
            "arguments": {}
        }
    },
    "fimfarchive-master/fimfarchive/exceptions.py": {},
    "fimfarchive-master/fimfarchive/flavors.py": {
        "Flavor.__new__": {
            "name": "__new__",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "typing.Sequence[T]",
                    "list[T]",
                    "list[frozenset]",
                    "list[dict[, ]]",
                    "list[int]"
                ]
            }
        },
        "Flavor.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fimfarchive-master/fimfarchive/mappers.py": {
        "Mapper.__call__": {
            "name": "__call__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "dict[, ]"
                ]
            }
        },
        "StaticMapper.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "StaticMapper.__call__": {
            "name": "__call__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "story": [
                    "dict[, ]"
                ]
            }
        },
        "StoryDateMapper.__call__": {
            "name": "__call__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "StoryPathMapper.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "bool",
                    "typing.Generator[typing.Union[str,None,None]]"
                ]
            }
        },
        "StoryPathMapper.__call__": {
            "name": "__call__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "story": [
                    "typing.IO",
                    "str"
                ]
            }
        },
        "StorySlugMapper.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "typing.Type"
                ]
            }
        },
        "StorySlugMapper.slugify": {
            "name": "slugify",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "StorySlugMapper.join": {
            "name": "join",
            "location": 182,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "slug": [
                    "str",
                    "None",
                    "tuple[]",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[T, T]",
                    "typing.Type"
                ]
            }
        },
        "StorySlugMapper.group": {
            "name": "group",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "slug": [
                    "str"
                ]
            }
        },
        "StorySlugMapper.classify": {
            "name": "classify",
            "location": 220,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "StorySlugMapper.generate": {
            "name": "generate",
            "location": 236,
            "return": [
                "dict[typing.Text, typing.Union[str,None,typing.Type,int,list[list[typing.Any]]]]"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "StorySlugMapper.__call__": {
            "name": "__call__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "story": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "MetaFormatMapper.__call__": {
            "name": "__call__",
            "location": 286,
            "return": [
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "dict[str, set[str]]",
                    "str"
                ]
            }
        },
        "DataFormatMapper.__call__": {
            "name": "__call__",
            "location": 317,
            "return": [
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any]]",
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "int"
                ]
            }
        }
    },
    "fimfarchive-master/fimfarchive/selectors.py": {
        "Selector.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "new": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "UpdateSelector.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date_mapper": [
                    "None",
                    "str",
                    "int",
                    "float",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "UpdateSelector.filter_empty": {
            "name": "filter_empty",
            "location": 77,
            "return": [
                "typing.Callable[, ]",
                "typing.Type",
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "typing.Callable[, ]",
                    "typing.Type"
                ]
            }
        },
        "UpdateSelector.filter_invalid": {
            "name": "filter_invalid",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "UpdateSelector.filter_unchanged": {
            "name": "filter_unchanged",
            "location": 100,
            "return": [
                "bool",
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "bool"
                ],
                "new": [
                    "bool"
                ]
            }
        },
        "UpdateSelector.flavored": {
            "name": "flavored",
            "location": 119,
            "return": [
                "bytes",
                "dict[, ]",
                "dict[str, str]",
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "bytes",
                    "dict[, ]",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "UpdateSelector.__call__": {
            "name": "__call__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "int",
                    "typing.Callable[, ]"
                ],
                "new": [
                    "typing.Callable[, ]",
                    "typing.Iterable[int]",
                    "int"
                ]
            }
        },
        "RefetchSelector.filter_unchanged": {
            "name": "filter_unchanged",
            "location": 159,
            "return": [
                "typing.Callable[, ]",
                "int"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "new": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        }
    },
    "fimfarchive-master/fimfarchive/signals.py": {
        "find_related": {
            "name": "find_related",
            "location": 170,
            "return": [
                "typing.Generator[tuple[str]]"
            ],
            "arguments": {
                "obj": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "find_sources": {
            "name": "find_sources",
            "location": 179,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "sender": [
                    "bool",
                    "str",
                    "set[str]"
                ]
            }
        },
        "find_targets": {
            "name": "find_targets",
            "location": 191,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "receiver": [
                    "int",
                    "set[]",
                    "str"
                ]
            }
        },
        "find_matches": {
            "name": "find_matches",
            "location": 200,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "sender": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str",
                    "float"
                ],
                "receiver": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Signal.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signal.__call__": {
            "name": "__call__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signal.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signal.send": {
            "name": "send",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignalBinder.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "int",
                    "float"
                ],
                "sender": [
                    "int",
                    "float"
                ]
            }
        },
        "SignalBinder.__call__": {
            "name": "__call__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignalBinder.__getattr__": {
            "name": "__getattr__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "list[]"
                ]
            }
        },
        "SignalBinder.__repr__": {
            "name": "__repr__",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignalSender.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignalReceiver.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "int",
                    "float"
                ]
            }
        },
        "SignalReceiver.__enter__": {
            "name": "__enter__",
            "location": 159,
            "return": [
                "SignalReceiver"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignalReceiver.__exit__": {
            "name": "__exit__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fimfarchive-master/fimfarchive/stampers.py": {
        "Stamper.get_archive": {
            "name": "get_archive",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "story": [
                    "str",
                    "bool"
                ]
            }
        },
        "Stamper.__call__": {
            "name": "__call__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "dict[, ]"
                ]
            }
        },
        "UpdateStamper.__call__": {
            "name": "__call__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "int"
                ]
            }
        },
        "FlavorStamper.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "int",
                    "float"
                ]
            }
        },
        "FlavorStamper.__call__": {
            "name": "__call__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "PathStamper.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "int",
                    "float"
                ]
            }
        },
        "PathStamper.__call__": {
            "name": "__call__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "fimfarchive-master/fimfarchive/stories.py": {
        "Story.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "bytes"
                ],
                "fetcher": [
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "int",
                    "list[I]",
                    "list[dict[, ]]",
                    "tuple[typing.Union[str,int]]"
                ],
                "meta": [
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "int",
                    "list[I]",
                    "list[dict[, ]]",
                    "tuple[typing.Union[str,int]]"
                ],
                "data": [
                    "None",
                    "str",
                    "bytes",
                    "int",
                    "list[I]",
                    "list[str]"
                ],
                "flavors": [
                    "tuple[]"
                ]
            }
        },
        "Story.is_fetched": {
            "name": "is_fetched",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Story.has_meta": {
            "name": "has_meta",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Story.meta": {
            "name": "meta",
            "location": 90,
            "return": [
                "typing.Type",
                "tuple[]",
                "tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str,str]]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.has_data": {
            "name": "has_data",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Story.data": {
            "name": "data",
            "location": 116,
            "return": [
                "str",
                "tuple[typing.Union[str,str]]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Story.merge": {
            "name": "merge",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "fimfarchive-master/fimfarchive/utils.py": {
        "find_compressor": {
            "name": "find_compressor",
            "location": 192,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "find_flavor": {
            "name": "find_flavor",
            "location": 211,
            "return": [
                "flavor",
                "None"
            ],
            "arguments": {
                "story": [
                    "int",
                    "set[]",
                    "str"
                ],
                "flavor": [
                    "int",
                    "set[]",
                    "str"
                ]
            }
        },
        "get_path": {
            "name": "get_path",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "None",
                    "str"
                ]
            }
        },
        "is_blacklisted": {
            "name": "is_blacklisted",
            "location": 245,
            "return": [
                "bool"
            ],
            "arguments": {
                "story": [
                    "str",
                    "list[list[]]",
                    "int",
                    "bytes",
                    "dict[str, str]"
                ]
            }
        },
        "EmptyMeta.__bool__": {
            "name": "__bool__",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "bool",
                    "typing.Type",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Empty.__bool__": {
            "name": "__bool__",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedDict.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "default": [
                    "dict[, ]"
                ]
            }
        },
        "PersistedDict.load": {
            "name": "load",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PersistedDict.save": {
            "name": "save",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JayWalker.walk": {
            "name": "walk",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "list[]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "JayWalker.handle": {
            "name": "handle",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list[]",
                    "str",
                    "list[list[typing.Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "list[str]",
                    "int",
                    "typing.Callable[[], typing.Any]",
                    "list[dict[, ]]"
                ],
                "key": [
                    "list[]",
                    "str",
                    "list[list[typing.Any]]",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "list[str]",
                    "int",
                    "typing.Callable[[], typing.Any]",
                    "list[dict[, ]]"
                ],
                "value": [
                    "int",
                    "float",
                    "str",
                    "typing.Type",
                    "bytes"
                ]
            }
        },
        "ResourceLoader.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "package": [
                    "str",
                    "bool",
                    "dict[int, bool]"
                ],
                "binary": [
                    "bool"
                ]
            }
        },
        "ResourceLoader.__call__": {
            "name": "__call__",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "binary": [
                    "None",
                    "bool",
                    "str",
                    "typing.IO"
                ]
            }
        }
    },
    "fimfarchive-master/fimfarchive/writers.py": {
        "Writer.write": {
            "name": "write",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Writer.close": {
            "name": "close",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Writer.__enter__": {
            "name": "__enter__",
            "location": 70,
            "return": [
                "Writer"
            ],
            "arguments": {
                "self": []
            }
        },
        "Writer.__exit__": {
            "name": "__exit__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "exc_value": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "traceback": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "DirectoryWriter.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta_path": [
                    "None",
                    "str",
                    "dict[str, pathlib.Path]"
                ],
                "data_path": [
                    "None",
                    "str",
                    "dict[str, pathlib.Path]"
                ],
                "overwrite": [
                    "bool"
                ],
                "make_dirs": [
                    "bool"
                ]
            }
        },
        "DirectoryWriter.get_mapper": {
            "name": "get_mapper",
            "location": 107,
            "return": [
                "str",
                "None",
                "bool",
                "StoryPathMapper",
                "StaticMapper"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "DirectoryWriter.check_overwrite": {
            "name": "check_overwrite",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "DirectoryWriter.check_directory": {
            "name": "check_directory",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DirectoryWriter.perform_write": {
            "name": "perform_write",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "bytes",
                    "str",
                    "typing.TextIO",
                    "int"
                ],
                "path": []
            }
        },
        "DirectoryWriter.write_meta": {
            "name": "write_meta",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str"
                ],
                "path": [
                    "str",
                    "list[]",
                    "list[dict[, ]]"
                ]
            }
        },
        "DirectoryWriter.write_data": {
            "name": "write_data",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "dict[str, dict[str, typing.Any]]",
                    "list[str]"
                ],
                "path": [
                    "str",
                    "list[]",
                    "list[dict[, ]]"
                ]
            }
        },
        "DirectoryWriter.write": {
            "name": "write",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "bytes"
                ]
            }
        },
        "FimfarchiveWriter.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "extras": [
                    "tuple[]"
                ]
            }
        },
        "FimfarchiveWriter.write": {
            "name": "write",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "float",
                    "bool",
                    "None"
                ]
            }
        },
        "FimfarchiveWriter.close": {
            "name": "close",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fimfarchive-master/fimfarchive/__init__.py": {},
    "fimfarchive-master/fimfarchive/__main__.py": {},
    "fimfarchive-master/fimfarchive/commands/base.py": {
        "Command.__call__": {
            "name": "__call__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fimfarchive-master/fimfarchive/commands/build.py": {
        "BuildCommand.parser": {
            "name": "parser",
            "location": 46,
            "return": [
                "ArgumentParser"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildCommand.configure": {
            "name": "configure",
            "location": 89,
            "return": [
                "BuildTask"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "BuildCommand.__call__": {
            "name": "__call__",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fimfarchive-master/fimfarchive/commands/root.py": {
        "RootCommand.load": {
            "name": "load",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "bool"
                ]
            }
        },
        "RootCommand.doc": {
            "name": "doc",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "adjust": [
                    "int"
                ],
                "indent": [
                    "int"
                ]
            }
        },
        "RootCommand.usage": {
            "name": "usage",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RootCommand.__call__": {
            "name": "__call__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "fimfarchive-master/fimfarchive/commands/update.py": {
        "StoryFormatter.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "int",
                    "float"
                ]
            }
        },
        "StoryFormatter.__getattr__": {
            "name": "__getattr__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "StoryFormatter.__iter__": {
            "name": "__iter__",
            "location": 99,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryFormatter.__str__": {
            "name": "__str__",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryFormatter.approval": {
            "name": "approval",
            "location": 115,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryFormatter.chapters": {
            "name": "chapters",
            "location": 132,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryFormatter.action": {
            "name": "action",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdatePrinter.on_attempt": {
            "name": "on_attempt",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "key": [
                    "str",
                    "frozenset",
                    "list[dict[, ]]",
                    "bool",
                    "tuple[]"
                ],
                "skips": [
                    "str",
                    "bytes",
                    "None"
                ],
                "retries": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "UpdatePrinter.on_success": {
            "name": "on_success",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "key": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "story": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "UpdatePrinter.on_skipped": {
            "name": "on_skipped",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "key": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "story": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "UpdatePrinter.on_failure": {
            "name": "on_failure",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "bool",
                    "str",
                    "list[str]",
                    "dict[, ]"
                ],
                "key": [
                    "bool",
                    "str",
                    "list[str]",
                    "dict[, ]"
                ],
                "error": [
                    "str",
                    "int"
                ]
            }
        },
        "UpdateCommand.parser": {
            "name": "parser",
            "location": 201,
            "return": [
                "ArgumentParser"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateCommand.configure": {
            "name": "configure",
            "location": 232,
            "return": [
                "UpdateTask"
            ],
            "arguments": {
                "self": [],
                "opts": [
                    "set[str]",
                    "bool"
                ]
            }
        },
        "UpdateCommand.__call__": {
            "name": "__call__",
            "location": 270,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fimfarchive-master/fimfarchive/commands/__init__.py": {},
    "fimfarchive-master/fimfarchive/converters/base.py": {
        "Converter.__call__": {
            "name": "__call__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "dict[, ]"
                ]
            }
        }
    },
    "fimfarchive-master/fimfarchive/converters/fpub_epub.py": {
        "ebook_convert": {
            "name": "ebook_convert",
            "location": 54,
            "return": [],
            "arguments": {
                "data": [
                    "bytes"
                ],
                "pipe": []
            }
        },
        "FpubEpubConverter.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logdir": [
                    "None",
                    "str"
                ]
            }
        },
        "FpubEpubConverter.__call__": {
            "name": "__call__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "story": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "fimfarchive-master/fimfarchive/converters/local_utc.py": {
        "DateNormalizer.handle": {
            "name": "handle",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "key": [
                    "str",
                    "dict[, ]",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "str",
                    "dict[, ]",
                    "bytes",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "DateNormalizer.normalize": {
            "name": "normalize",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list[]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "LocalUtcConverter.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalUtcConverter.__call__": {
            "name": "__call__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "story": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "fimfarchive-master/fimfarchive/converters/__init__.py": {},
    "fimfarchive-master/fimfarchive/converters/alpha_beta/__init__.py": {
        "Handler.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "int",
                    "float"
                ]
            }
        },
        "Handler.__getattr__": {
            "name": "__getattr__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Handler.__iter__": {
            "name": "__iter__",
            "location": 86,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorHandler.id": {
            "name": "id",
            "location": 133,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorHandler.url": {
            "name": "url",
            "location": 137,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChapterHandler.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "int",
                    "float"
                ],
                "index": []
            }
        },
        "ChapterHandler.date_modified": {
            "name": "date_modified",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootHandler.archive": {
            "name": "archive",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RootHandler.author": {
            "name": "author",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RootHandler.chapters": {
            "name": "chapters",
            "location": 254,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootHandler.completion_status": {
            "name": "completion_status",
            "location": 260,
            "return": [
                "typing.Text",
                "list[]",
                "tuple[typing.Union[typing.Literal,typing.Literal,list[str]]]",
                "str",
                "bytes",
                "typing.Pattern",
                "list[dict[str, typing.Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootHandler.content_rating": {
            "name": "content_rating",
            "location": 269,
            "return": [
                "dict[str, str]",
                "dict[int, typing.Union[typing.Any,typing.Any,typing.Any]]",
                "dict[typing.Any, int]",
                "frozenset"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootHandler.cover_image": {
            "name": "cover_image",
            "location": 274,
            "return": [
                "None",
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootHandler.date_updated": {
            "name": "date_updated",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootHandler.description_html": {
            "name": "description_html",
            "location": 300,
            "return": [
                "None",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootHandler.rating": {
            "name": "rating",
            "location": 310,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootHandler.tags": {
            "name": "tags",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AlphaBetaConverter.__call__": {
            "name": "__call__",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "story": []
            }
        }
    },
    "fimfarchive-master/fimfarchive/converters/json_fpub/__init__.py": {
        "StoryRenderer.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StoryRenderer.fix_authors_note_position": {
            "name": "fix_authors_note_position",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StoryRenderer.fix_local_href_attributes": {
            "name": "fix_local_href_attributes",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StoryRenderer.fix_local_src_attributes": {
            "name": "fix_local_src_attributes",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StoryRenderer.verify_index": {
            "name": "verify_index",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str"
                ],
                "actual": [
                    "str"
                ]
            }
        },
        "StoryRenderer.iter_chapters": {
            "name": "iter_chapters",
            "location": 106,
            "return": [
                "typing.Generator[dict[, ]]"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "float"
                ]
            }
        },
        "StoryRenderer.iter_content": {
            "name": "iter_content",
            "location": 125,
            "return": [
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "int",
                    "dict[str, str]",
                    "float"
                ]
            }
        },
        "StoryRenderer.__call__": {
            "name": "__call__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "story": [
                    "typing.Type",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "JsonFpubConverter.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFpubConverter.__call__": {
            "name": "__call__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "story": [
                    "dict[str, typing.Any]",
                    "float",
                    "dict[, ]"
                ]
            }
        }
    },
    "fimfarchive-master/fimfarchive/fetchers/base.py": {
        "Fetcher.__enter__": {
            "name": "__enter__",
            "location": 45,
            "return": [
                "Fetcher"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fetcher.__exit__": {
            "name": "__exit__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "exc_value": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "traceback": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "Fetcher.close": {
            "name": "close",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fetcher.fetch": {
            "name": "fetch",
            "location": 63,
            "return": [
                "Story"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "prefetch_meta": [
                    "None",
                    "int",
                    "str",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "list[str]"
                ],
                "prefetch_data": [
                    "None",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "Fetcher.fetch_data": {
            "name": "fetch_data",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "tuple[]",
                    "bytes"
                ]
            }
        },
        "Fetcher.fetch_meta": {
            "name": "fetch_meta",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "fimfarchive-master/fimfarchive/fetchers/directory.py": {
        "DirectoryFetcher.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta_path": [
                    "None",
                    "str",
                    "dict[str, pathlib.Path]",
                    "dict[str, P]"
                ],
                "data_path": [
                    "None",
                    "str",
                    "dict[str, pathlib.Path]",
                    "dict[str, P]"
                ],
                "flavors": [
                    "tuple[]"
                ]
            }
        },
        "DirectoryFetcher.iter_path_keys": {
            "name": "iter_path_keys",
            "location": 69,
            "return": [
                "None",
                "typing.Generator[int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DirectoryFetcher.list_keys": {
            "name": "list_keys",
            "location": 97,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryFetcher.__len__": {
            "name": "__len__",
            "location": 112,
            "return": [
                "int",
                "typing.Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryFetcher.__iter__": {
            "name": "__iter__",
            "location": 121,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectoryFetcher.read_file": {
            "name": "read_file",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "DirectoryFetcher.fetch_data": {
            "name": "fetch_data",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.BinaryIO"
                ]
            }
        },
        "DirectoryFetcher.fetch_meta": {
            "name": "fetch_meta",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[str, typing.Any]",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "fimfarchive-master/fimfarchive/fetchers/fimfarchive.py": {
        "Index.close": {
            "name": "close",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.load": {
            "name": "load",
            "location": 69,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "Index.parse": {
            "name": "parse",
            "location": 95,
            "return": [
                "tuple[typing.Union[int,bytes]]",
                "tuple[int]"
            ],
            "arguments": {
                "pair": [
                    "bytes",
                    "str"
                ]
            }
        },
        "MemoryIndex.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "BaseException",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "int",
                    "list[]"
                ]
            }
        },
        "MemoryIndex.__getitem__": {
            "name": "__getitem__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "MemoryIndex.__contains__": {
            "name": "__contains__",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "bool"
                ]
            }
        },
        "MemoryIndex.__iter__": {
            "name": "__iter__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemoryIndex.__len__": {
            "name": "__len__",
            "location": 140,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryIndex.close": {
            "name": "close",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FimfarchiveFetcher.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "FimfarchiveFetcher.initialize": {
            "name": "initialize",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ]
            }
        },
        "FimfarchiveFetcher.__len__": {
            "name": "__len__",
            "location": 209,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FimfarchiveFetcher.__iter__": {
            "name": "__iter__",
            "location": 215,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FimfarchiveFetcher.validate": {
            "name": "validate",
            "location": 222,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "FimfarchiveFetcher.fetch_path": {
            "name": "fetch_path",
            "location": 246,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "FimfarchiveFetcher.close": {
            "name": "close",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FimfarchiveFetcher.fetch_meta": {
            "name": "fetch_meta",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "FimfarchiveFetcher.fetch_data": {
            "name": "fetch_data",
            "location": 302,
            "return": [
                "dict[str, typing.Any]",
                "dict[str, list[typing.Any]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "fimfarchive-master/fimfarchive/fetchers/fimfiction.py": {
        "FimfictionFetcher.get": {
            "name": "get",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict[str, typing.Union[str,int]]"
                ]
            }
        },
        "FimfictionFetcher.fetch_data": {
            "name": "fetch_data",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "FimfictionFetcher.fetch_meta": {
            "name": "fetch_meta",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "fimfarchive-master/fimfarchive/fetchers/fimfiction2.py": {
        "ApiClient.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "ApiClient.create_session": {
            "name": "create_session",
            "location": 154,
            "return": [
                "Session"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "bytes",
                    "list[list[str]]",
                    "list[str]",
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "ApiClient.create_filter": {
            "name": "create_filter",
            "location": 175,
            "return": [
                "Filter"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "ApiClient.get": {
            "name": "get",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "params": [
                    "dict[, ]"
                ]
            }
        },
        "Requester.get_meta": {
            "name": "get_meta",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Requester.get_data": {
            "name": "get_data",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "SingleRequester.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ]
            }
        },
        "SingleRequester.error": {
            "name": "error",
            "location": 261,
            "return": [
                "InvalidStoryError",
                "StorySourceError"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "status": [
                    "int",
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "SingleRequester.get": {
            "name": "get",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str"
                ],
                "path": [
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes",
                    "None"
                ],
                "params": [
                    "str",
                    "dict[, ]",
                    "int",
                    "bytes",
                    "None"
                ]
            }
        },
        "SingleRequester.get_meta": {
            "name": "get_meta",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "SingleRequester.get_data": {
            "name": "get_data",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "BulkRequester.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "None",
                    "int",
                    "str"
                ],
                "bulk_meta": [
                    "bool"
                ],
                "bulk_data": [
                    "bool"
                ],
                "bulk_size": [
                    "int"
                ]
            }
        },
        "BulkRequester.__setattr__": {
            "name": "__setattr__",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "BulkRequester.reset": {
            "name": "reset",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BulkRequester.create_params": {
            "name": "create_params",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BulkRequester.cache": {
            "name": "cache",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BulkRequester.fetch": {
            "name": "fetch",
            "location": 393,
            "return": [
                "int",
                "dict[str, int]",
                "tuple[typing.Union[typing.Literal,typing.Literal]]",
                "set[str]",
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "BulkRequester.get_meta": {
            "name": "get_meta",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Type",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[KT, VT]",
                    "None",
                    "tuple[]"
                ]
            }
        },
        "BulkRequester.get_data": {
            "name": "get_data",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "RoutedRequester.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [],
                "bulk_meta": [
                    "str",
                    "bool"
                ],
                "bulk_data": [
                    "str",
                    "bool"
                ]
            }
        },
        "RoutedRequester.get_meta": {
            "name": "get_meta",
            "location": 456,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "RoutedRequester.get_data": {
            "name": "get_data",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Documentifier.merge": {
            "name": "merge",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "dict[, ]",
                    "typing.Mapping",
                    "str",
                    "bool"
                ],
                "source": [
                    "dict[, ]",
                    "int",
                    "typing.IO",
                    "Exception",
                    "typing.Container",
                    "None",
                    "str"
                ]
            }
        },
        "Documentifier.flatten": {
            "name": "flatten",
            "location": 486,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": [],
                "resource": []
            }
        },
        "Documentifier.__call__": {
            "name": "__call__",
            "location": 505,
            "return": [],
            "arguments": {
                "self": [],
                "resource": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "MetaDocumentifier.fill_keys": {
            "name": "fill_keys",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "dict[str, typing.Any]",
                    "set[]",
                    "dict[, ]"
                ]
            }
        },
        "MetaDocumentifier.remove_data": {
            "name": "remove_data",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "list[str]"
                ]
            }
        },
        "MetaDocumentifier.__call__": {
            "name": "__call__",
            "location": 556,
            "return": [],
            "arguments": {
                "self": [],
                "resource": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BetaFormatVerifier.__init__": {
            "name": "__init__",
            "location": 592,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirements": [
                    "str",
                    "dict[str, list[str]]",
                    "dict[str, typing.Callable[, ]]"
                ]
            }
        },
        "BetaFormatVerifier.from_params": {
            "name": "from_params",
            "location": 602,
            "return": [],
            "arguments": {
                "cls": [
                    "int",
                    "list[int]",
                    "dict[, ]",
                    "str"
                ],
                "params": [
                    "str"
                ],
                "mapping": [
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        },
        "BetaFormatVerifier.from_meta_params": {
            "name": "from_meta_params",
            "location": 625,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BetaFormatVerifier.from_data_params": {
            "name": "from_data_params",
            "location": 637,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BetaFormatVerifier.check": {
            "name": "check",
            "location": 645,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "float",
                    "typing.Type",
                    "int",
                    "typing.Iterable[]"
                ],
                "required": [],
                "data": [
                    "dict[, ]",
                    "typing.Sequence[typing.Any]",
                    "typing.Callable[, ]",
                    "str",
                    "dict[str, typing.Callable[, ]]",
                    "dict[str, str]",
                    "int"
                ]
            }
        },
        "BetaFormatVerifier.__call__": {
            "name": "__call__",
            "location": 666,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "int",
                    "bytes",
                    "typing.Type"
                ]
            }
        },
        "Fimfiction2Fetcher.__init__": {
            "name": "__init__",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "bool"
                ],
                "bulk_meta": [
                    "bool"
                ],
                "bulk_data": [
                    "bool"
                ]
            }
        },
        "Fimfiction2Fetcher.fetch_meta": {
            "name": "fetch_meta",
            "location": 713,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Fimfiction2Fetcher.fetch_data": {
            "name": "fetch_data",
            "location": 720,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "fimfarchive-master/fimfarchive/fetchers/__init__.py": {},
    "fimfarchive-master/fimfarchive/tasks/build.py": {
        "BuildTask.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "upcoming": [
                    "bool",
                    "set[]",
                    "dict[, ]",
                    "list[str]"
                ],
                "previous": [
                    "None",
                    "bool",
                    "set[]",
                    "dict[, ]",
                    "list[str]"
                ],
                "extras": [
                    "None",
                    "str",
                    "typing.Sequence[int]",
                    "float"
                ]
            }
        },
        "BuildTask.get_output": {
            "name": "get_output",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "list[]",
                    "int"
                ]
            }
        },
        "BuildTask.get_extras": {
            "name": "get_extras",
            "location": 87,
            "return": [
                "tuple[]",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "str",
                    "None",
                    "list[]"
                ]
            }
        },
        "BuildTask.revive": {
            "name": "revive",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "story": [
                    "str",
                    "dict[str, list[]]",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "BuildTask.resolve": {
            "name": "resolve",
            "location": 123,
            "return": [
                "str",
                "float",
                "bytes",
                "dict[, ]",
                "typing.IO"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str",
                    "float",
                    "bytes",
                    "dict[, ]",
                    "typing.IO"
                ]
            }
        },
        "BuildTask.generate": {
            "name": "generate",
            "location": 140,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildTask.run": {
            "name": "run",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fimfarchive-master/fimfarchive/tasks/update.py": {
        "UpdateTask.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fimfarchive": [
                    "int",
                    "float"
                ],
                "fimfiction": [
                    "int",
                    "float"
                ],
                "selector": [
                    "None",
                    "bool",
                    "float",
                    "str"
                ],
                "stamper": [
                    "None",
                    "bool",
                    "float",
                    "str"
                ],
                "workdir": [
                    "typing.Text"
                ],
                "retries": [
                    "int"
                ],
                "skips": [
                    "int"
                ]
            }
        },
        "UpdateTask.get_mapper": {
            "name": "get_mapper",
            "location": 129,
            "return": [
                "StoryPathMapper"
            ],
            "arguments": {
                "self": [],
                "subdir": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "UpdateTask.fetch": {
            "name": "fetch",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [],
                "key": [
                    "int",
                    "str"
                ]
            }
        },
        "UpdateTask.write": {
            "name": "write",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "UpdateTask.copy_archive_meta": {
            "name": "copy_archive_meta",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "old": [
                    "None",
                    "int",
                    "str"
                ],
                "new": [
                    "None",
                    "int",
                    "typing.Any"
                ]
            }
        },
        "UpdateTask.update": {
            "name": "update",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "list[str]",
                    "None"
                ]
            }
        },
        "UpdateTask.run": {
            "name": "run",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fimfarchive-master/fimfarchive/tasks/__init__.py": {},
    "fimfarchive-master/tests/conftest.py": {},
    "fimfarchive-master/tests/test_flavors.py": {
        "TestFlavor.assert_flavor": {
            "name": "assert_flavor",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flavor": [
                    "typing.Iterable[typing.Any]",
                    "bool"
                ]
            }
        },
        "TestFlavor.test_flavor_with_empty_values": {
            "name": "test_flavor_with_empty_values",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlavor.test_flavor_with_custom_values": {
            "name": "test_flavor_with_custom_values",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlavor.test_instance_representation": {
            "name": "test_instance_representation",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlavor.test_flavor_with_custom_values.MyFlavor.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "one": [],
                "two": [
                    "int"
                ]
            }
        }
    },
    "fimfarchive-master/tests/test_imports.py": {
        "TestImport.test_wildcard_import": {
            "name": "test_wildcard_import",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "typing.Sequence[int]",
                    "str"
                ]
            }
        }
    },
    "fimfarchive-master/tests/test_mappers.py": {
        "TestStaticMapper.value": {
            "name": "value",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStaticMapper.test_value": {
            "name": "test_value",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str",
                    "dict[, ]",
                    "typing.Callable[str, bool]",
                    "dict[str, str]"
                ],
                "value": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestStoryDateMapper.mapper": {
            "name": "mapper",
            "location": 73,
            "return": [
                "StoryDateMapper"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoryDateMapper.merge": {
            "name": "merge",
            "location": 79,
            "return": [
                "Story"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "list[dict[str, typing.Any]]",
                    "int"
                ],
                "meta": [
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "TestStoryDateMapper.test_missing_story": {
            "name": "test_missing_story",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "bool"
                ]
            }
        },
        "TestStoryDateMapper.test_invalid_story": {
            "name": "test_invalid_story",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [],
                "story": [
                    "bool"
                ]
            }
        },
        "TestStoryDateMapper.test_empty_meta": {
            "name": "test_empty_meta",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [],
                "story": []
            }
        },
        "TestStoryDateMapper.test_meta_without_dates": {
            "name": "test_meta_without_dates",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [],
                "story": []
            }
        },
        "TestStoryDateMapper.test_meta_without_chapters": {
            "name": "test_meta_without_chapters",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "int",
                    "str",
                    "float",
                    "list[int]"
                ],
                "story": []
            }
        },
        "TestStoryDateMapper.test_meta_with_none_chapters": {
            "name": "test_meta_with_none_chapters",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "int",
                    "float",
                    "str"
                ],
                "story": []
            }
        },
        "TestStoryDateMapper.test_meta_with_empty_chapters": {
            "name": "test_meta_with_empty_chapters",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "int",
                    "str",
                    "float",
                    "list[int]"
                ],
                "story": []
            }
        },
        "TestStoryDateMapper.test_meta_with_only_chapter_dates": {
            "name": "test_meta_with_only_chapter_dates",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "int",
                    "float"
                ],
                "story": []
            }
        },
        "TestStoryDateMapper.test_meta_with_only_story_date": {
            "name": "test_meta_with_only_story_date",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "int",
                    "float"
                ],
                "story": []
            }
        },
        "TestStoryDateMapper.test_meta_with_latest_chapter_date": {
            "name": "test_meta_with_latest_chapter_date",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "int",
                    "float"
                ],
                "story": []
            }
        },
        "TestStoryDateMapper.test_meta_with_latest_story_date": {
            "name": "test_meta_with_latest_story_date",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "int",
                    "float"
                ],
                "story": []
            }
        },
        "TestStoryDateMapper.test_meta_with_both_latest": {
            "name": "test_meta_with_both_latest",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "int",
                    "str",
                    "float",
                    "list[int]"
                ],
                "story": []
            }
        },
        "TestStoryPathMapper.test_joins_paths": {
            "name": "test_joins_paths",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str"
                ]
            }
        },
        "TestStoryPathMapper.test_casts_values": {
            "name": "test_casts_values",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "dict[str, typing.Sequence[str]]"
                ],
                "story": []
            }
        },
        "TestStorySlugMapper.mapper": {
            "name": "mapper",
            "location": 289,
            "return": [
                "StorySlugMapper"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStorySlugMapper.story": {
            "name": "story",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestStorySlugMapper.test_mapping": {
            "name": "test_mapping",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str",
                    "int",
                    "dict[str, float]"
                ],
                "story": [
                    "str",
                    "int",
                    "dict[str, float]"
                ]
            }
        },
        "TestStorySlugMapper.test_custom_mapping": {
            "name": "test_custom_mapping",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestStorySlugMapper.test_slugify": {
            "name": "test_slugify",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str",
                    "int"
                ],
                "text": [
                    "str",
                    "int"
                ],
                "result": [
                    "str",
                    "int"
                ]
            }
        },
        "TestStorySlugMapper.test_join": {
            "name": "test_join",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str",
                    "None",
                    "bytes"
                ],
                "key": [
                    "str",
                    "None",
                    "bytes"
                ],
                "slug": [
                    "str",
                    "None",
                    "bytes"
                ],
                "result": [
                    "str",
                    "None",
                    "bytes"
                ]
            }
        },
        "TestStorySlugMapper.test_join_with_negative_key": {
            "name": "test_join_with_negative_key",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": []
            }
        },
        "TestStorySlugMapper.test_group": {
            "name": "test_group",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "dict[str, typing.Any]",
                    "list[str]",
                    "list[dict[str, typing.Any]]"
                ],
                "slug": [
                    "dict[str, typing.Any]",
                    "list[str]",
                    "list[dict[str, typing.Any]]"
                ],
                "result": [
                    "dict[str, typing.Any]",
                    "list[str]",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "TestStorySlugMapper.test_classify": {
            "name": "test_classify",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str",
                    "list[str]"
                ],
                "story": [],
                "flavors": [
                    "str",
                    "list[str]"
                ],
                "result": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "TestStorySlugMapper.test_map_with_long_template": {
            "name": "test_map_with_long_template",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestMetaFormatMapper.mapper": {
            "name": "mapper",
            "location": 409,
            "return": [
                "MetaFormatMapper"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetaFormatMapper.alpha": {
            "name": "alpha",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestMetaFormatMapper.beta": {
            "name": "beta",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestMetaFormatMapper.merge": {
            "name": "merge",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestMetaFormatMapper.test_alpha_format": {
            "name": "test_alpha_format",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str"
                ],
                "story": [
                    "bool"
                ],
                "alpha": [
                    "str",
                    "int",
                    "dict[str, float]",
                    "list[]"
                ]
            }
        },
        "TestMetaFormatMapper.test_beta_format": {
            "name": "test_beta_format",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str"
                ],
                "story": [
                    "bool"
                ],
                "beta": [
                    "str",
                    "int",
                    "dict[str, float]",
                    "list[]"
                ]
            }
        },
        "TestMetaFormatMapper.test_conflict": {
            "name": "test_conflict",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [],
                "story": [
                    "bool",
                    "None",
                    "str"
                ],
                "alpha": [
                    "str",
                    "float"
                ],
                "beta": [
                    "str",
                    "float"
                ]
            }
        },
        "TestMetaFormatMapper.test_existing_flavor": {
            "name": "test_existing_flavor",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str"
                ],
                "story": [],
                "beta": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDataFormatMapper.mapper": {
            "name": "mapper",
            "location": 473,
            "return": [
                "DataFormatMapper"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataFormatMapper.zip": {
            "name": "zip",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "names": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestDataFormatMapper.test_json_mapping": {
            "name": "test_json_mapping",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "dict[, ]",
                    "dict[str, typing.Union[str,None]]"
                ],
                "story": [],
                "data": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestDataFormatMapper.test_fpub_mapping": {
            "name": "test_fpub_mapping",
            "location": 508,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.TextIO"
                ],
                "story": [
                    "str"
                ],
                "files": [
                    "bool"
                ]
            }
        },
        "TestDataFormatMapper.test_epub_mapping": {
            "name": "test_epub_mapping",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str",
                    "typing.Callable[, ]",
                    "typing.TextIO"
                ],
                "story": [
                    "str"
                ],
                "files": [
                    "bool"
                ]
            }
        },
        "TestDataFormatMapper.test_included_mapping": {
            "name": "test_included_mapping",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "list[int]",
                    "int",
                    "str"
                ],
                "story": [],
                "fmt": [
                    "str"
                ]
            }
        },
        "TestDataFormatMapper.test_unknown_raw_mapping": {
            "name": "test_unknown_raw_mapping",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str"
                ],
                "story": [],
                "data": [
                    "int",
                    "str",
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "TestDataFormatMapper.test_unknown_zip_mapping": {
            "name": "test_unknown_zip_mapping",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "typing.Callable[, ]"
                ],
                "story": [],
                "files": [
                    "bool"
                ]
            }
        }
    },
    "fimfarchive-master/tests/test_selectors.py": {
        "TestUpdateSelector.selector": {
            "name": "selector",
            "location": 43,
            "return": [
                "UpdateSelector"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSelector.populate": {
            "name": "populate",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "story": [],
                "date": [
                    "int"
                ]
            }
        },
        "TestUpdateSelector.test_filter_empty_with_chapters": {
            "name": "test_filter_empty_with_chapters",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": [
                    "typing.Type",
                    "str",
                    "int"
                ]
            }
        },
        "TestUpdateSelector.test_filter_empty_without_chapters": {
            "name": "test_filter_empty_without_chapters",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": [
                    "typing.Type",
                    "str",
                    "int"
                ]
            }
        },
        "TestUpdateSelector.test_filter_empty_with_empty_chapters": {
            "name": "test_filter_empty_with_empty_chapters",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "typing.Type",
                    "str",
                    "int"
                ],
                "story": []
            }
        },
        "TestUpdateSelector.test_filter_invalid_for_valid": {
            "name": "test_filter_invalid_for_valid",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": []
            }
        },
        "TestUpdateSelector.test_filter_invalid_without_meta": {
            "name": "test_filter_invalid_without_meta",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": [
                    "typing.Type",
                    "str",
                    "int"
                ]
            }
        },
        "TestUpdateSelector.test_filter_invalid_without_data": {
            "name": "test_filter_invalid_without_data",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": []
            }
        },
        "TestUpdateSelector.test_filter_unchanged_for_changed": {
            "name": "test_filter_unchanged_for_changed",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": []
            }
        },
        "TestUpdateSelector.test_filter_unchanged_for_unchanged": {
            "name": "test_filter_unchanged_for_unchanged",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": []
            }
        },
        "TestUpdateSelector.test_filter_unchanged_default_mapper": {
            "name": "test_filter_unchanged_default_mapper",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSelector.test_filter_unchanged_custom_mapper": {
            "name": "test_filter_unchanged_custom_mapper",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "typing.Type",
                    "str",
                    "int"
                ]
            }
        },
        "TestUpdateSelector.test_filter_unchanged_missing_old_date": {
            "name": "test_filter_unchanged_missing_old_date",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": []
            }
        },
        "TestUpdateSelector.test_filter_unchanged_missing_new_date": {
            "name": "test_filter_unchanged_missing_new_date",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TestUpdateSelector.test_flavored": {
            "name": "test_flavored",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": [
                    "int"
                ]
            }
        },
        "TestUpdateSelector.test_created_selection": {
            "name": "test_created_selection",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ],
                "story": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float"
                ]
            }
        },
        "TestUpdateSelector.test_revived_selection": {
            "name": "test_revived_selection",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ],
                "story": [
                    "str",
                    "float"
                ]
            }
        },
        "TestUpdateSelector.test_updated_selection": {
            "name": "test_updated_selection",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ],
                "story": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float"
                ]
            }
        },
        "TestUpdateSelector.test_deleted_selection": {
            "name": "test_deleted_selection",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ],
                "story": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float"
                ]
            }
        },
        "TestUpdateSelector.test_old_protected_selection": {
            "name": "test_old_protected_selection",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ],
                "story": [
                    "int",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float"
                ]
            }
        },
        "TestUpdateSelector.test_new_protected_selection": {
            "name": "test_new_protected_selection",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "bool"
                ],
                "story": [
                    "int",
                    "str",
                    "tuple[typing.Union[float,float,float,float,float]]",
                    "float"
                ]
            }
        },
        "TestUpdateSelector.test_invalid_selection": {
            "name": "test_invalid_selection",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "bool"
                ]
            }
        },
        "TestRefetchSelector.selector": {
            "name": "selector",
            "location": 299,
            "return": [
                "RefetchSelector"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRefetchSelector.test_filter_unchanged_for_unchanged": {
            "name": "test_filter_unchanged_for_unchanged",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": []
            }
        },
        "TestRefetchSelector.test_filter_unchanged_missing_old_date": {
            "name": "test_filter_unchanged_missing_old_date",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": []
            }
        },
        "TestRefetchSelector.test_filter_unchanged_missing_new_date": {
            "name": "test_filter_unchanged_missing_new_date",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [],
                "story": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "TestRefetchSelector.test_revived_selection": {
            "name": "test_revived_selection",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str"
                ],
                "story": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "fimfarchive-master/tests/test_signals.py": {
        "params": {
            "name": "params",
            "location": 37,
            "return": [
                "OrderedDict"
            ],
            "arguments": {}
        },
        "signal": {
            "name": "signal",
            "location": 51,
            "return": [
                "Signal"
            ],
            "arguments": {
                "params": [
                    "dict[, ]",
                    "dict[str, str]",
                    "dict[str, list[typing.Any]]"
                ]
            }
        },
        "sender": {
            "name": "sender",
            "location": 59,
            "return": [
                "Sender"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "receiver": {
            "name": "receiver",
            "location": 70,
            "return": [
                "typing.Generator[Receiver]"
            ],
            "arguments": {
                "sender": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "binder": {
            "name": "binder",
            "location": 82,
            "return": [],
            "arguments": {
                "sender": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "TestSignal.test_reserved_value_names": {
            "name": "test_reserved_value_names",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSignal.test_send_unbound_signal": {
            "name": "test_send_unbound_signal",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "signal": []
            }
        },
        "TestSignal.test_parameter_mapping": {
            "name": "test_parameter_mapping",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict[, ]"
                ],
                "signal": [],
                "sender": [
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "TestSignal.test_parameter_overflow": {
            "name": "test_parameter_overflow",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict[str, typing.Any]"
                ],
                "signal": [],
                "sender": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestSignal.test_duplicate_parameter": {
            "name": "test_duplicate_parameter",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict[, ]"
                ],
                "signal": [],
                "sender": []
            }
        },
        "TestSignalBinder.test_send": {
            "name": "test_send",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "sender": [
                    "str",
                    "list[str]"
                ],
                "binder": []
            }
        },
        "TestSignalSender.test_bind": {
            "name": "test_bind",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "typing.Callable[, ]"
                ],
                "sender": [],
                "binder": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSignalSender.test_send": {
            "name": "test_send",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict[str, typing.Any]"
                ],
                "sender": []
            }
        },
        "TestSignalReceiver.test_connect": {
            "name": "test_connect",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "str",
                    "float"
                ],
                "receiver": [
                    "str",
                    "float"
                ]
            }
        },
        "TestSignalReceiver.test_send": {
            "name": "test_send",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "sender": [
                    "str"
                ],
                "receiver": []
            }
        }
    },
    "fimfarchive-master/tests/test_stampers.py": {
        "TestStamper.stamper": {
            "name": "stamper",
            "location": 44,
            "return": [
                "Stamper"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStamper.test_missing_archive_dict": {
            "name": "test_missing_archive_dict",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stamper": [
                    "str"
                ],
                "story": []
            }
        },
        "TestStamper.test_existing_archive_dict": {
            "name": "test_existing_archive_dict",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stamper": [
                    "str"
                ],
                "story": []
            }
        },
        "TestUpdateStamper.time": {
            "name": "time",
            "location": 79,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateStamper.stamper": {
            "name": "stamper",
            "location": 90,
            "return": [
                "UpdateStamper"
            ],
            "arguments": {
                "self": [],
                "time": [
                    "float",
                    "int",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "TestUpdateStamper.test_created_story": {
            "name": "test_created_story",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stamper": [],
                "story": [
                    "bool",
                    "typing.Callable[Any,Any, typing.Any]"
                ],
                "time": [
                    "int",
                    "float"
                ]
            }
        },
        "TestUpdateStamper.test_updated_story": {
            "name": "test_updated_story",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stamper": [
                    "str",
                    "int"
                ],
                "story": [
                    "dict[str, typing.Any]",
                    "bool",
                    "None"
                ],
                "time": [
                    "int",
                    "float"
                ]
            }
        },
        "TestUpdateStamper.test_revived_story": {
            "name": "test_revived_story",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stamper": [
                    "str",
                    "int"
                ],
                "story": [
                    "bool",
                    "typing.Callable[Any,Any, typing.Any]"
                ],
                "time": [
                    "float",
                    "str",
                    "list[float]"
                ]
            }
        },
        "TestUpdateStamper.test_deleted_story": {
            "name": "test_deleted_story",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stamper": [
                    "str",
                    "int"
                ],
                "story": [
                    "bool",
                    "typing.Callable[Any,Any, typing.Any]"
                ],
                "time": [
                    "str",
                    "int"
                ]
            }
        },
        "TestUpdateStamper.test_created_modification": {
            "name": "test_created_modification",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stamper": [],
                "story": [
                    "bool",
                    "typing.Callable[Any,Any, typing.Any]"
                ],
                "time": [
                    "float",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "TestUpdateStamper.test_deleted_modification": {
            "name": "test_deleted_modification",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stamper": [
                    "str",
                    "int"
                ],
                "story": [
                    "bool",
                    "typing.Callable[Any,Any, typing.Any]"
                ],
                "time": [
                    "float",
                    "typing.Mapping",
                    "list[float]"
                ]
            }
        },
        "TestFlavorStamper.test_ignored_blank_value": {
            "name": "test_ignored_blank_value",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str",
                    "None",
                    "set[]"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "TestFlavorStamper.test_stamped_value": {
            "name": "test_stamped_value",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "int",
                    "float",
                    "str",
                    "Exception",
                    "typing.Callable[, ]"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "TestPathStamper.test_cleared_alpha_path": {
            "name": "test_cleared_alpha_path",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [],
                "value": [
                    "str",
                    "int",
                    "typing.Mapping",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "TestPathStamper.test_cleared_beta_path": {
            "name": "test_cleared_beta_path",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestPathStamper.test_ignored_blank_value": {
            "name": "test_ignored_blank_value",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [],
                "value": [
                    "typing.Type",
                    "str",
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "TestPathStamper.test_stamped_value": {
            "name": "test_stamped_value",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "int",
                    "float",
                    "str",
                    "Exception",
                    "typing.Callable[, ]"
                ],
                "value": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "fimfarchive-master/tests/test_stories.py": {
        "TestStory.meta": {
            "name": "meta",
            "location": 40,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStory.data": {
            "name": "data",
            "location": 47,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStory.test_init": {
            "name": "test_init",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "typing.IO",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "meta": [
                    "typing.IO",
                    "int",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "dict[, ]",
                    "bool"
                ]
            }
        },
        "TestStory.test_init_with_fetcher_only": {
            "name": "test_init_with_fetcher_only",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestStory.test_init_with_meta_and_data_only": {
            "name": "test_init_with_meta_and_data_only",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "str",
                    "Exception",
                    "None"
                ],
                "data": [
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "TestStory.test_init_without_fetcher_nor_meta": {
            "name": "test_init_without_fetcher_nor_meta",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "float",
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "TestStory.test_init_without_fetcher_nor_data": {
            "name": "test_init_without_fetcher_nor_data",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "meta": [
                    "typing.Iterable[typing.Any]",
                    "None",
                    "str",
                    "bool",
                    "typing.Any"
                ]
            }
        },
        "TestStory.test_init_without_fetcher_nor_both": {
            "name": "test_init_without_fetcher_nor_both",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStory.test_fetch_meta_from_fetcher": {
            "name": "test_fetch_meta_from_fetcher",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [],
                "meta": [
                    "bytes"
                ],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestStory.test_fetch_data_from_fetcher": {
            "name": "test_fetch_data_from_fetcher",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "dict[str, typing.Any]",
                    "None"
                ],
                "meta": [
                    "dict[str, str]",
                    "bool"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "TestStory.test_meta_not_fetched_unless_necessary": {
            "name": "test_meta_not_fetched_unless_necessary",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "dict[, ]",
                    "bool"
                ],
                "meta": [
                    "str",
                    "int",
                    "tuple[]"
                ]
            }
        },
        "TestStory.test_data_not_fetched_unless_necessary": {
            "name": "test_data_not_fetched_unless_necessary",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "dict[, ]",
                    "bool"
                ],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "TestStory.test_is_fetched": {
            "name": "test_is_fetched",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "list[dict[str, typing.Any]]",
                    "str"
                ],
                "meta": [
                    "bytes",
                    "dict[str, str]"
                ],
                "data": [
                    "dict[str, typing.Union[int,str]]"
                ]
            }
        },
        "TestStory.test_raises_fetch_meta_exception": {
            "name": "test_raises_fetch_meta_exception",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "str"
                ]
            }
        },
        "TestStory.test_raises_fetch_data_exception": {
            "name": "test_raises_fetch_data_exception",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestStory.test_flavors_are_copied": {
            "name": "test_flavors_are_copied",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "str"
                ],
                "flavor": [
                    "int",
                    "typing.Sequence[int]"
                ]
            }
        },
        "TestStory.test_flavors_are_stored_in_set": {
            "name": "test_flavors_are_stored_in_set",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [],
                "flavor": []
            }
        },
        "TestStory.test_merge_without_parameters": {
            "name": "test_merge_without_parameters",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestStory.test_merge_with_parameters": {
            "name": "test_merge_with_parameters",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "TestStory.test_merge_with_invalid_state": {
            "name": "test_merge_with_invalid_state",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestStory.test_merge_with_invalid_arguments": {
            "name": "test_merge_with_invalid_arguments",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        }
    },
    "fimfarchive-master/tests/test_utils.py": {
        "TestEmpty.test_empty_class_is_not_none": {
            "name": "test_empty_class_is_not_none",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmpty.test_empty_class_evaluates_to_false": {
            "name": "test_empty_class_evaluates_to_false",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmpty.test_empty_class_is_empty": {
            "name": "test_empty_class_is_empty",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmpty.test_empty_instance_evaluates_to_false": {
            "name": "test_empty_instance_evaluates_to_false",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmpty.test_empty_instance_is_unique": {
            "name": "test_empty_instance_is_unique",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedDict.sample": {
            "name": "sample",
            "location": 92,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPersistedDict.tmppath": {
            "name": "tmppath",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestPersistedDict.tmpfile": {
            "name": "tmpfile",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "tmppath": [
                    "str"
                ],
                "sample": [
                    "dict[, ]",
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "TestPersistedDict.test_saves_data": {
            "name": "test_saves_data",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmppath": [
                    "str"
                ],
                "sample": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPersistedDict.test_loads_values": {
            "name": "test_loads_values",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpfile": [
                    "str"
                ],
                "sample": []
            }
        },
        "TestPersistedDict.test_load_replaces_data": {
            "name": "test_load_replaces_data",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpfile": [
                    "str"
                ],
                "sample": [
                    "str"
                ]
            }
        },
        "TestPersistedDict.test_load_empty_replaces_data": {
            "name": "test_load_empty_replaces_data",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmppath": [
                    "str"
                ],
                "sample": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestPersistedDict.test_load_restores_defaults": {
            "name": "test_load_restores_defaults",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpfile": [],
                "sample": [
                    "list[str]"
                ]
            }
        },
        "TestPersistedDict.test_default_in_empty": {
            "name": "test_default_in_empty",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmppath": [],
                "sample": [
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestPersistedDict.test_default_in_mixed": {
            "name": "test_default_in_mixed",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpfile": [],
                "sample": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "TestPersistedDict.test_default_does_not_override": {
            "name": "test_default_does_not_override",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpfile": [],
                "sample": []
            }
        },
        "TestJayWalker.walker": {
            "name": "walker",
            "location": 207,
            "return": [
                "typing.Generator[JayWalker]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJayWalker.test_ignored_walk": {
            "name": "test_ignored_walk",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "walker": [],
                "obj": [
                    "str",
                    "float"
                ]
            }
        },
        "TestJayWalker.test_list_walk": {
            "name": "test_list_walk",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "walker": []
            }
        },
        "TestJayWalker.test_dict_walk": {
            "name": "test_dict_walk",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "walker": []
            }
        },
        "TestJayWalker.test_nested_walk": {
            "name": "test_nested_walk",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "walker": []
            }
        },
        "TestFindFlavor.story": {
            "name": "story",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestFindFlavor.test_present_flavor": {
            "name": "test_present_flavor",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestFindFlavor.test_missing_flavor": {
            "name": "test_missing_flavor",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestGetPath.test_return_values": {
            "name": "test_return_values",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "target": []
            }
        },
        "TestIsBlacklisted.utils": {
            "name": "utils",
            "location": 339,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsBlacklisted.test_blacklisted": {
            "name": "test_blacklisted",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "utils": [
                    "str",
                    "set[int]",
                    "None",
                    "bool"
                ],
                "story": [],
                "key": [
                    "str",
                    "int",
                    "dict[, ]",
                    "None"
                ],
                "author": [
                    "str",
                    "list[dict[, ]]",
                    "tuple[typing.Union[int,int,int]]",
                    "set[]",
                    "int"
                ],
                "result": [
                    "int",
                    "str"
                ]
            }
        },
        "TestIsBlacklisted.test_blacklisted_string": {
            "name": "test_blacklisted_string",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "utils": [
                    "str"
                ],
                "story": [],
                "key": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]"
                ],
                "author": [
                    "str"
                ],
                "result": [
                    "str",
                    "int",
                    "list[str]",
                    "typing.Callable[..., collections.abc.Awaitable[]]"
                ]
            }
        }
    },
    "fimfarchive-master/tests/test_writers.py": {
        "TestDirectoryWriter.mapper": {
            "name": "mapper",
            "location": 47,
            "return": [
                "StoryPathMapper"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "TestDirectoryWriter.test_story_meta_is_written": {
            "name": "test_story_meta_is_written",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str",
                    "dict[, ]"
                ],
                "mapper": []
            }
        },
        "TestDirectoryWriter.test_story_data_is_written": {
            "name": "test_story_data_is_written",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [],
                "mapper": []
            }
        },
        "TestDirectoryWriter.test_string_paths_become_mappers": {
            "name": "test_string_paths_become_mappers",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestDirectoryWriter.test_rejects_integer_path": {
            "name": "test_rejects_integer_path",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDirectoryWriter.test_parent_directory_creation": {
            "name": "test_parent_directory_creation",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str"
                ],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestDirectoryWriter.test_disable_directory_creation": {
            "name": "test_disable_directory_creation",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str"
                ],
                "tmpdir": []
            }
        },
        "TestDirectoryWriter.test_refuse_meta_overwrite": {
            "name": "test_refuse_meta_overwrite",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str"
                ],
                "mapper": [
                    "str"
                ]
            }
        },
        "TestDirectoryWriter.test_refuse_data_overwrite": {
            "name": "test_refuse_data_overwrite",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str"
                ],
                "mapper": []
            }
        },
        "TestDirectoryWriter.test_overwrites_when_enabled": {
            "name": "test_overwrites_when_enabled",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [],
                "tmpdir": []
            }
        },
        "TestDirectoryWriter.test_current_directory_check": {
            "name": "test_current_directory_check",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "TestFimfarchiveWriter.story": {
            "name": "story",
            "location": 175,
            "return": [
                "Story"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ],
                "title": [
                    "dict[str, str]",
                    "int",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]"
                ],
                "author": [
                    "dict[str, str]",
                    "int",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]"
                ],
                "name": [
                    "dict[str, str]",
                    "int",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]"
                ]
            }
        },
        "TestFimfarchiveWriter.stories": {
            "name": "stories",
            "location": 202,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFimfarchiveWriter.extras": {
            "name": "extras",
            "location": 212,
            "return": [
                "tuple[tuple[typing.Union[typing.Text,bytes]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFimfarchiveWriter.archive": {
            "name": "archive",
            "location": 222,
            "return": [
                "ZipFile"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "str",
                    "typing.Sequence[str]"
                ],
                "stories": [
                    "str"
                ],
                "extras": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "TestFimfarchiveWriter.test_meta": {
            "name": "test_meta",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stories": [
                    "str"
                ],
                "archive": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "TestFimfarchiveWriter.test_data": {
            "name": "test_data",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stories": [],
                "archive": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestFimfarchiveWriter.test_extras": {
            "name": "test_extras",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extras": [
                    "str"
                ],
                "archive": [
                    "str"
                ]
            }
        }
    },
    "fimfarchive-master/tests/__init__.py": {},
    "fimfarchive-master/tests/commands/test_root.py": {
        "success": {
            "name": "success",
            "location": 33,
            "return": [
                "cls"
            ],
            "arguments": {}
        },
        "failure": {
            "name": "failure",
            "location": 49,
            "return": [
                "cls"
            ],
            "arguments": {}
        },
        "root": {
            "name": "root",
            "location": 65,
            "return": [
                "cls"
            ],
            "arguments": {
                "success": [
                    "typing.Callable[c, None]",
                    "set[int]"
                ],
                "failure": [
                    "typing.Callable[..., None]",
                    "set[int]"
                ]
            }
        },
        "args": {
            "name": "args",
            "location": 82,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "TestRootCommanad.mock_usage": {
            "name": "mock_usage",
            "location": 94,
            "return": [
                "PropertyMock"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "TestRootCommanad.test_root_usage": {
            "name": "test_root_usage",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "TestRootCommanad.test_root_usage_without_commands": {
            "name": "test_root_usage_without_commands",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "typing.Callable[, ]",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestRootCommanad.test_root_call_without_args": {
            "name": "test_root_call_without_args",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [],
                "success": [
                    "dict[str, typing.Any]"
                ],
                "failure": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestRootCommanad.test_root_call_with_args": {
            "name": "test_root_call_with_args",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [],
                "success": [
                    "dict[str, typing.Any]"
                ],
                "failure": [
                    "dict[str, typing.Any]"
                ],
                "args": []
            }
        },
        "TestRootCommanad.test_success_usage": {
            "name": "test_success_usage",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "TestRootCommanad.test_success_call_without_args": {
            "name": "test_success_call_without_args",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str"
                ],
                "success": [
                    "dict[str, typing.Any]"
                ],
                "failure": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestRootCommanad.test_success_call_with_args": {
            "name": "test_success_call_with_args",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str"
                ],
                "success": [],
                "failure": [
                    "dict[str, typing.Any]"
                ],
                "args": []
            }
        },
        "TestRootCommanad.test_failure_usage": {
            "name": "test_failure_usage",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "TestRootCommanad.test_failure_call_without_args": {
            "name": "test_failure_call_without_args",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str"
                ],
                "success": [
                    "dict[str, typing.Any]"
                ],
                "failure": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestRootCommanad.test_failure_call_with_args": {
            "name": "test_failure_call_with_args",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str"
                ],
                "success": [
                    "dict[str, typing.Any]"
                ],
                "failure": [],
                "args": []
            }
        }
    },
    "fimfarchive-master/tests/commands/test_update.py": {
        "TestStoryFormatter.assert_formatted_equals": {
            "name": "assert_formatted_equals",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "story": [
                    "str",
                    "float",
                    "None",
                    "int",
                    "tuple[]"
                ]
            }
        },
        "TestStoryFormatter.test_empty_meta": {
            "name": "test_empty_meta",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestStoryFormatter.test_old_meta": {
            "name": "test_old_meta",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestStoryFormatter.test_new_meta": {
            "name": "test_new_meta",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        },
        "TestStoryFormatter.test_edge_meta": {
            "name": "test_edge_meta",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": []
            }
        }
    },
    "fimfarchive-master/tests/commands/__init__.py": {},
    "fimfarchive-master/tests/converters/test_alpha_beta.py": {
        "to_null": {
            "name": "to_null",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "to_utc": {
            "name": "to_utc",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, float]"
                ]
            }
        },
        "data": {
            "name": "data",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "TestAlphaBetaConverter.converter": {
            "name": "converter",
            "location": 75,
            "return": [
                "AlphaBetaConverter"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAlphaBetaConverter.pair": {
            "name": "pair",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "float"
                ],
                "data": []
            }
        },
        "TestAlphaBetaConverter.alpha": {
            "name": "alpha",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ]
            }
        },
        "TestAlphaBetaConverter.beta": {
            "name": "beta",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [
                    "str"
                ]
            }
        },
        "TestAlphaBetaConverter.expected": {
            "name": "expected",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "beta": [
                    "str"
                ]
            }
        },
        "TestAlphaBetaConverter.test_conversion": {
            "name": "test_conversion",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "converter": [
                    "str",
                    "bool",
                    "typing.Iterable[]"
                ],
                "story": [],
                "expected": [
                    "typing.Callable[, ]",
                    "int"
                ],
                "alpha": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        }
    },
    "fimfarchive-master/tests/converters/test_fpub_epub.py": {
        "TestFpubEpubConverter.fpub": {
            "name": "fpub",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFpubEpubConverter.epub": {
            "name": "epub",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFpubEpubConverter.log": {
            "name": "log",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFpubEpubConverter.calibre": {
            "name": "calibre",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "fpub": [
                    "bool",
                    "list[]",
                    "None"
                ],
                "epub": [
                    "bool",
                    "list[]",
                    "None"
                ],
                "log": [
                    "bool",
                    "list[]",
                    "None"
                ]
            }
        },
        "TestFpubEpubConverter.proc": {
            "name": "proc",
            "location": 81,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "calibre": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "TestFpubEpubConverter.story": {
            "name": "story",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "story": [],
                "fpub": []
            }
        },
        "TestFpubEpubConverter.verify_call": {
            "name": "verify_call",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "typing.Callable[, ]"
                ],
                "pipe": [
                    "dict[str, typing.Union[str,None]]",
                    "typing.Type"
                ]
            }
        },
        "TestFpubEpubConverter.test_without_log": {
            "name": "test_without_log",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "story": [
                    "bool"
                ],
                "fpub": [],
                "epub": [],
                "proc": []
            }
        },
        "TestFpubEpubConverter.test_with_log": {
            "name": "test_with_log",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tmpdir": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "story": [
                    "str",
                    "None",
                    "list[str]",
                    "typing.Callable[, ]"
                ],
                "fpub": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "epub": [
                    "int",
                    "str",
                    "dict[str, str]",
                    "bytes"
                ],
                "log": [
                    "str",
                    "bytes"
                ],
                "proc": []
            }
        },
        "TestFpubEpubConverter.calibre.function": {
            "name": "function",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fimfarchive-master/tests/converters/test_json_fpub.py": {
        "data": {
            "name": "data",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "Redactor.handle": {
            "name": "handle",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "key": [],
                "value": [
                    "int",
                    "float",
                    "str",
                    "typing.Type",
                    "bytes"
                ]
            }
        },
        "JsonFpubConverterSampler.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "JsonFpubConverterSampler.sample": {
            "name": "sample",
            "location": 85,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "JsonFpubConverterSampler.redact": {
            "name": "redact",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "story": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "JsonFpubConverterSampler.extract": {
            "name": "extract",
            "location": 114,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        },
        "JsonFpubConverterSampler.__iter__": {
            "name": "__iter__",
            "location": 129,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFpubConverterSampler.__str__": {
            "name": "__str__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJsonFpubConverter.converter": {
            "name": "converter",
            "location": 154,
            "return": [
                "JsonFpubConverter"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJsonFpubConverter.pair": {
            "name": "pair",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "request": [
                    "float"
                ],
                "data": []
            }
        },
        "TestJsonFpubConverter.json_story": {
            "name": "json_story",
            "location": 168,
            "return": [
                "Story"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "TestJsonFpubConverter.fpub_story": {
            "name": "fpub_story",
            "location": 180,
            "return": [
                "Story"
            ],
            "arguments": {
                "self": [],
                "pair": [
                    "bytes",
                    "str"
                ]
            }
        },
        "TestJsonFpubConverter.test_conversion": {
            "name": "test_conversion",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "converter": [
                    "dict[, ]"
                ],
                "json_story": [
                    "dict[, ]"
                ],
                "fpub_story": [
                    "typing.IO"
                ]
            }
        },
        "TestJsonFpubConverter.test_mimetype": {
            "name": "test_mimetype",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "converter": [
                    "dict[, ]"
                ],
                "json_story": [
                    "dict[, ]"
                ]
            }
        },
        "TestJsonFpubConverter.test_immutablilty": {
            "name": "test_immutablilty",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "converter": [
                    "str",
                    "float"
                ],
                "json_story": []
            }
        }
    },
    "fimfarchive-master/tests/converters/test_local_utc.py": {
        "TestLocalUtcConverter.date_pair": {
            "name": "date_pair",
            "location": 44,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "TestLocalUtcConverter.meta_pair": {
            "name": "meta_pair",
            "location": 61,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "None"
                ],
                "date_pair": [
                    "str",
                    "set[str]"
                ]
            }
        },
        "TestLocalUtcConverter.converter": {
            "name": "converter",
            "location": 79,
            "return": [
                "LocalUtcConverter"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLocalUtcConverter.test_conversion": {
            "name": "test_conversion",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "converter": [
                    "dict[, ]"
                ],
                "story": [],
                "meta_pair": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "fimfarchive-master/tests/converters/__init__.py": {},
    "fimfarchive-master/tests/fetchers/test_base.py": {
        "TestFetcher.test_fetch_with_prefetch_meta": {
            "name": "test_fetch_with_prefetch_meta",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFetcher.test_fetch_without_prefetch_meta": {
            "name": "test_fetch_without_prefetch_meta",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFetcher.test_fetch_with_prefetch_data": {
            "name": "test_fetch_with_prefetch_data",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFetcher.test_fetch_without_prefetch_data": {
            "name": "test_fetch_without_prefetch_data",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFetcher.test_fetch_with_default_prefetch": {
            "name": "test_fetch_with_default_prefetch",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFetcher.test_fetch_without_default_prefetch": {
            "name": "test_fetch_without_default_prefetch",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFetcher.test_close_is_called_on_exit": {
            "name": "test_close_is_called_on_exit",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "TestFetcher.test_empty_flavors_are_passed_to_story": {
            "name": "test_empty_flavors_are_passed_to_story",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFetcher.test_custom_flavors_are_passed_to_story": {
            "name": "test_custom_flavors_are_passed_to_story",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [],
                "flavor": []
            }
        }
    },
    "fimfarchive-master/tests/fetchers/test_directory.py": {
        "TestDirectoryFetcher.make_meta": {
            "name": "make_meta",
            "location": 46,
            "return": [
                "dict[typing.Text, typing.Union[str,float,int]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "TestDirectoryFetcher.metadir": {
            "name": "metadir",
            "location": 53,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestDirectoryFetcher.make_data": {
            "name": "make_data",
            "location": 66,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "str",
                    "set[str]"
                ]
            }
        },
        "TestDirectoryFetcher.datadir": {
            "name": "datadir",
            "location": 73,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestDirectoryFetcher.fetcher": {
            "name": "fetcher",
            "location": 87,
            "return": [
                "DirectoryFetcher"
            ],
            "arguments": {
                "self": [],
                "metadir": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "datadir": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "flavor": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "TestDirectoryFetcher.test_complete_fetch": {
            "name": "test_complete_fetch",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestDirectoryFetcher.test_partial_meta_fetch": {
            "name": "test_partial_meta_fetch",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestDirectoryFetcher.test_partial_data_fetch": {
            "name": "test_partial_data_fetch",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestDirectoryFetcher.test_missing_fetch": {
            "name": "test_missing_fetch",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestDirectoryFetcher.test_flavors": {
            "name": "test_flavors",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [],
                "flavor": [
                    "typing.Iterable[str]",
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "TestDirectoryFetcher.test_len": {
            "name": "test_len",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDirectoryFetcher.test_len_caching": {
            "name": "test_len_caching",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "test": [
                    "str",
                    "list[int]",
                    "bool",
                    "dict[str, typing.Any]"
                ],
                "fetcher": [
                    "list[]",
                    "str",
                    "typing.Mapping",
                    "list[typing.Optional[str]]"
                ]
            }
        },
        "TestDirectoryFetcher.test_iter": {
            "name": "test_iter",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "list[str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "fimfarchive-master/tests/fetchers/test_fimfarchive.py": {
        "data": {
            "name": "data",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "serialize": {
            "name": "serialize",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]"
                ]
            }
        },
        "Redactor.handle": {
            "name": "handle",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "key": [],
                "value": [
                    "int",
                    "float",
                    "str",
                    "typing.Type",
                    "bytes"
                ]
            }
        },
        "FimfarchiveFetcherSampler.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "list[str]"
                ]
            }
        },
        "FimfarchiveFetcherSampler.sample": {
            "name": "sample",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "fetcher": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "FimfarchiveFetcherSampler.files": {
            "name": "files",
            "location": 98,
            "return": [
                "list[dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FimfarchiveFetcherSampler.about": {
            "name": "about",
            "location": 113,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FimfarchiveFetcherSampler.index": {
            "name": "index",
            "location": 127,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FimfarchiveFetcherSampler.archive": {
            "name": "archive",
            "location": 137,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FimfarchiveFetcherSampler.__str__": {
            "name": "__str__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PoolMock.imap": {
            "name": "imap",
            "location": 181,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "func": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "iterable": [
                    "typing.Callable[, ]",
                    "bool"
                ],
                "chunksize": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestFimfarchiveFetcher.archive": {
            "name": "archive",
            "location": 191,
            "return": [
                "BytesIO"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "TestFimfarchiveFetcher.pool": {
            "name": "pool",
            "location": 211,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFimfarchiveFetcher.fetcher": {
            "name": "fetcher",
            "location": 219,
            "return": [
                "typing.Generator[FimfarchiveFetcher]"
            ],
            "arguments": {
                "self": [],
                "archive": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "pool": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "TestFimfarchiveFetcher.test_closed_fetcher_raises_exception": {
            "name": "test_closed_fetcher_raises_exception",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfarchiveFetcher.test_fetch_meta_for_valid_story": {
            "name": "test_fetch_meta_for_valid_story",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfarchiveFetcher.test_fetch_meta_for_invalid_story": {
            "name": "test_fetch_meta_for_invalid_story",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfarchiveFetcher.test_fetch_data_for_valid_story": {
            "name": "test_fetch_data_for_valid_story",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfarchiveFetcher.test_fetch_data_for_invalid_story": {
            "name": "test_fetch_data_for_invalid_story",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfarchiveFetcher.test_close_when_missing_attribute": {
            "name": "test_close_when_missing_attribute",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [],
                "attr": [
                    "str",
                    "float",
                    "bool",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "fimfarchive-master/tests/fetchers/test_fimfiction.py": {
        "Redactor.wrap": {
            "name": "wrap",
            "location": 45,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "set[str]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "Redactor.handle": {
            "name": "handle",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "key": [],
                "value": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestFimfictionFetcher.fetcher": {
            "name": "fetcher",
            "location": 68,
            "return": [
                "typing.Generator[FimfictionFetcher]"
            ],
            "arguments": {
                "self": [],
                "responses": [
                    "dict[, ]"
                ]
            }
        },
        "TestFimfictionFetcher.test_with_statment": {
            "name": "test_with_statment",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFimfictionFetcher.test_get_for_invalid_host": {
            "name": "test_get_for_invalid_host",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfictionFetcher.test_get_for_invalid_page": {
            "name": "test_get_for_invalid_page",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfictionFetcher.test_fetch_meta_for_valid_story": {
            "name": "test_fetch_meta_for_valid_story",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfictionFetcher.test_fetch_meta_for_invalid_story": {
            "name": "test_fetch_meta_for_invalid_story",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfictionFetcher.test_fetch_meta_for_empty_story": {
            "name": "test_fetch_meta_for_empty_story",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfictionFetcher.test_fetch_meta_for_protected_story": {
            "name": "test_fetch_meta_for_protected_story",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfictionFetcher.test_fetch_data_for_valid_story": {
            "name": "test_fetch_data_for_valid_story",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfictionFetcher.test_fetch_data_for_invalid_story": {
            "name": "test_fetch_data_for_invalid_story",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfictionFetcher.test_fetch_data_for_empty_story": {
            "name": "test_fetch_data_for_empty_story",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfictionFetcher.test_fetch_data_for_protected_story": {
            "name": "test_fetch_data_for_protected_story",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        }
    },
    "fimfarchive-master/tests/fetchers/test_fimfiction2.py": {
        "Redactor.handle": {
            "name": "handle",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "None"
                ],
                "value": [
                    "int",
                    "float",
                    "str",
                    "typing.Type",
                    "bytes"
                ]
            }
        },
        "TestFimfiction2Fetcher.fetcher": {
            "name": "fetcher",
            "location": 80,
            "return": [
                "typing.Generator[Fimfiction2Fetcher]"
            ],
            "arguments": {
                "self": [],
                "responses": [],
                "request": [
                    "typing.Callable[..., collections.abc.Awaitable[dict[, ]]]",
                    "float",
                    "str"
                ]
            }
        },
        "TestFimfiction2Fetcher.fetch_valid": {
            "name": "fetch_valid",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "fetcher": [],
                "key": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[dict[str, typing.Any]]",
                    "list[str]",
                    "typing.Sequence[str]",
                    "bool"
                ]
            }
        },
        "TestFimfiction2Fetcher.fetch_invalid": {
            "name": "fetch_invalid",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "fetcher": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "TestFimfiction2Fetcher.test_valid": {
            "name": "test_valid",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfiction2Fetcher.test_valid_missing_cover": {
            "name": "test_valid_missing_cover",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "str"
                ]
            }
        },
        "TestFimfiction2Fetcher.test_valid_missing_avatar": {
            "name": "test_valid_missing_avatar",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "str"
                ]
            }
        },
        "TestFimfiction2Fetcher.test_valid_missing_published_date": {
            "name": "test_valid_missing_published_date",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "str"
                ]
            }
        },
        "TestFimfiction2Fetcher.test_empty_story": {
            "name": "test_empty_story",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": []
            }
        },
        "TestFimfiction2Fetcher.test_invalid_story": {
            "name": "test_invalid_story",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestFimfiction2Fetcher.test_hidden_story": {
            "name": "test_hidden_story",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestFimfiction2Fetcher.test_protected_story": {
            "name": "test_protected_story",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fetcher": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "fimfarchive-master/tests/fetchers/__init__.py": {},
    "fimfarchive-master/tests/fixtures/common.py": {
        "fetcher": {
            "name": "fetcher",
            "location": 35,
            "return": [
                "Fetcher"
            ],
            "arguments": {}
        },
        "flavor": {
            "name": "flavor",
            "location": 48,
            "return": [
                "MyFlavor"
            ],
            "arguments": {}
        },
        "story": {
            "name": "story",
            "location": 60,
            "return": [
                "Story"
            ],
            "arguments": {
                "flavor": [
                    "dict[str, list[]]",
                    "str"
                ]
            }
        }
    },
    "fimfarchive-master/tests/fixtures/responses.py": {
        "responses": {
            "name": "responses",
            "location": 175,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Recorder.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "Recorder.__iter__": {
            "name": "__iter__",
            "location": 66,
            "return": [
                "typing.Generator[dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.__call__": {
            "name": "__call__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "session": [
                    "dict[, ]",
                    "list[]"
                ],
                "request": []
            }
        },
        "Recorder.__enter__": {
            "name": "__enter__",
            "location": 116,
            "return": [
                "Recorder"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.__exit__": {
            "name": "__exit__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Responder.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "Responder.__enter__": {
            "name": "__enter__",
            "location": 158,
            "return": [
                "Responder"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recorder.__enter__.send": {
            "name": "send",
            "location": 120,
            "return": [],
            "arguments": {
                "session": [],
                "request": []
            }
        }
    },
    "fimfarchive-master/tests/fixtures/__init__.py": {},
    "fimfarchive-master/tests/tasks/conftest.py": {
        "DummyConverer.__call__": {
            "name": "__call__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "story": [
                    "typing.Callable[, ]",
                    "int",
                    "float"
                ]
            }
        },
        "DummyFetcher.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyFetcher.add": {
            "name": "add",
            "location": 58,
            "return": [
                "Story"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Sequence[str]",
                    "dict[, ]",
                    "list[typing.Optional[typing.Any]]",
                    "list[str]",
                    "None"
                ],
                "date": [
                    "str",
                    "typing.Callable[, ]",
                    "None",
                    "bool"
                ],
                "flavors": [
                    "tuple[]"
                ],
                "data": []
            }
        },
        "DummyFetcher.fetch": {
            "name": "fetch",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "None",
                    "int",
                    "typing.Hashable",
                    "tuple[]"
                ],
                "prefetch_meta": [
                    "None",
                    "str",
                    "bytes",
                    "float",
                    "list[str]",
                    "int"
                ],
                "prefetch_data": [
                    "None",
                    "str",
                    "bytes",
                    "float",
                    "list[str]",
                    "int"
                ]
            }
        },
        "DummyFetcher.fetch_data": {
            "name": "fetch_data",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "tuple[]",
                    "bytes"
                ]
            }
        },
        "DummyFetcher.fetch_meta": {
            "name": "fetch_meta",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "DummyFetcher.__iter__": {
            "name": "__iter__",
            "location": 113,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fimfarchive-master/tests/tasks/test_build.py": {
        "TestBuildTask.previous": {
            "name": "previous",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBuildTask.upcoming": {
            "name": "upcoming",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBuildTask.result": {
            "name": "result",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBuildTask.output": {
            "name": "output",
            "location": 94,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "tmp_path": []
            }
        },
        "TestBuildTask.extras_data": {
            "name": "extras_data",
            "location": 104,
            "return": [
                "list[tuple[typing.Union[typing.Text,bytes]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildTask.extras_path": {
            "name": "extras_path",
            "location": 114,
            "return": [
                "Path"
            ],
            "arguments": {
                "self": [],
                "tmp_path": [
                    "bool"
                ],
                "extras_data": [
                    "list[str]",
                    "list[]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "TestBuildTask.task": {
            "name": "task",
            "location": 128,
            "return": [
                "typing.Generator[BuildTask]"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "bool",
                    "str"
                ],
                "upcoming": [
                    "bool",
                    "str"
                ],
                "previous": [
                    "bool",
                    "str"
                ],
                "extras_path": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestBuildTask.test_path": {
            "name": "test_path",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "None",
                    "bytes"
                ],
                "output": []
            }
        },
        "TestBuildTask.test_extras": {
            "name": "test_extras",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str",
                    "dict[str, str]",
                    "bytes",
                    "dict[, ]",
                    "dict[pathlib.Path, types.Lines]"
                ],
                "extras_data": [
                    "str",
                    "dict[str, str]",
                    "bytes",
                    "dict[, ]",
                    "dict[pathlib.Path, types.Lines]"
                ]
            }
        },
        "TestBuildTask.test_generate": {
            "name": "test_generate",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "result": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestBuildTask.test_run": {
            "name": "test_run",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": []
            }
        }
    },
    "fimfarchive-master/tests/tasks/test_update.py": {
        "TestUpdateTask.fimfiction": {
            "name": "fimfiction",
            "location": 45,
            "return": [
                "DummyFetcher"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateTask.fimfarchive": {
            "name": "fimfarchive",
            "location": 52,
            "return": [
                "DummyFetcher"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateTask.selector": {
            "name": "selector",
            "location": 59,
            "return": [
                "UpdateSelector"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateTask.stamper": {
            "name": "stamper",
            "location": 66,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateTask.archive": {
            "name": "archive",
            "location": 73,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateTask.task": {
            "name": "task",
            "location": 80,
            "return": [
                "UpdateTask"
            ],
            "arguments": {
                "self": [],
                "fimfarchive": [],
                "fimfiction": [],
                "selector": [],
                "stamper": [],
                "tmpdir": []
            }
        },
        "TestUpdateTask.verify_run": {
            "name": "verify_run",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "delays": [
                    "str"
                ]
            }
        },
        "TestUpdateTask.verify_fetch": {
            "name": "verify_fetch",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "target": [
                    "int",
                    "bytes",
                    "list[int]",
                    "typing.Callable[, ]",
                    "float",
                    "dict[str, typing.Any]"
                ],
                "status": [
                    "typing.Callable[, ]",
                    "list[D]",
                    "None"
                ]
            }
        },
        "TestUpdateTask.verify_empty": {
            "name": "verify_empty",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "fetcher": []
            }
        },
        "TestUpdateTask.verify_failure": {
            "name": "verify_failure",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "fetcher": []
            }
        },
        "TestUpdateTask.test_created_story": {
            "name": "test_created_story",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "fimfiction": []
            }
        },
        "TestUpdateTask.test_revived_story": {
            "name": "test_revived_story",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "typing.Callable[, ]"
                ],
                "fimfarchive": [],
                "fimfiction": [],
                "archive": [
                    "typing.Iterable[typing.Iterable[typing.Any]]",
                    "str"
                ]
            }
        },
        "TestUpdateTask.test_updated_story": {
            "name": "test_updated_story",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "fimfarchive": [],
                "fimfiction": [],
                "archive": [
                    "str",
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "TestUpdateTask.test_deleted_story": {
            "name": "test_deleted_story",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "fimfarchive": []
            }
        },
        "TestUpdateTask.test_cleared_story": {
            "name": "test_cleared_story",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "typing.Callable[, ]"
                ],
                "fimfarchive": [],
                "fimfiction": []
            }
        },
        "TestUpdateTask.test_empty_fimfiction_story": {
            "name": "test_empty_fimfiction_story",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "typing.Callable[, ]"
                ],
                "fimfiction": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestUpdateTask.test_empty_fimfarchive_story": {
            "name": "test_empty_fimfarchive_story",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "typing.Callable[, ]"
                ],
                "fimfarchive": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestUpdateTask.test_fimfarchive_failure": {
            "name": "test_fimfarchive_failure",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "typing.Callable[, ]"
                ],
                "fimfarchive": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestUpdateTask.test_fimfiction_failure": {
            "name": "test_fimfiction_failure",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "typing.Callable[, ]"
                ],
                "fimfiction": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "TestUpdateTask.test_write_meta": {
            "name": "test_write_meta",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "story": []
            }
        },
        "TestUpdateTask.test_write_epub": {
            "name": "test_write_epub",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "story": []
            }
        },
        "TestUpdateTask.test_write_html": {
            "name": "test_write_html",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "story": []
            }
        },
        "TestUpdateTask.test_write_json": {
            "name": "test_write_json",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "story": []
            }
        },
        "TestUpdateTask.test_write_unsupported": {
            "name": "test_write_unsupported",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "str"
                ],
                "story": []
            }
        },
        "TestUpdateTask.test_remote_archive": {
            "name": "test_remote_archive",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [],
                "fimfarchive": [],
                "fimfiction": [],
                "archive": []
            }
        },
        "TestRefetchingUpdateTask.selector": {
            "name": "selector",
            "location": 309,
            "return": [
                "RefetchSelector"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRefetchingUpdateTask.test_revived_story": {
            "name": "test_revived_story",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "typing.Callable[, ]"
                ],
                "fimfarchive": [],
                "fimfiction": []
            }
        }
    },
    "fimfarchive-master/tests/tasks/__init__.py": {}
}
{
    "flambe-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "required": {
            "name": "required",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "flambe-master/docs/conf.py": {},
    "flambe-master/flambe/const.py": {},
    "flambe-master/flambe/logo.py": {},
    "flambe-master/flambe/version.py": {},
    "flambe-master/flambe/__init__.py": {},
    "flambe-master/flambe/cluster/aws.py": {
        "AWSCluster.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "factories_num": [],
                "factories_type": [],
                "orchestrator_type": [],
                "key_name": [],
                "security_group": [],
                "subnet_id": [],
                "creator": [],
                "key": [],
                "volume_type": [
                    "typing.Text"
                ],
                "region_name": [
                    "None"
                ],
                "username": [
                    "typing.Text"
                ],
                "tags": [
                    "None"
                ],
                "orchestrator_ami": [
                    "None"
                ],
                "factory_ami": [
                    "None"
                ],
                "dedicated": [
                    "bool"
                ],
                "orchestrator_timeout": [
                    "int"
                ],
                "factories_timeout": [
                    "int"
                ],
                "volume_size": [
                    "int"
                ],
                "setup_cmds": [
                    "None"
                ]
            }
        },
        "AWSCluster._get_boto_session": {
            "name": "_get_boto_session",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "region_name": []
            }
        },
        "AWSCluster.load_all_instances": {
            "name": "load_all_instances",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster._existing_cluster": {
            "name": "_existing_cluster",
            "location": 266,
            "return": [
                "tuple[typing.Optional[list]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster._get_existing_tags": {
            "name": "_get_existing_tags",
            "location": 304,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "boto_instance": []
            }
        },
        "AWSCluster.flambe_own_running_instances": {
            "name": "flambe_own_running_instances",
            "location": 326,
            "return": [
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster.name_hosts": {
            "name": "name_hosts",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster._get_all_tags": {
            "name": "_get_all_tags",
            "location": 363,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster.update_tags": {
            "name": "update_tags",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster._update_tags": {
            "name": "_update_tags",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "boto_instance": [],
                "tags": []
            }
        },
        "AWSCluster.name_instance": {
            "name": "name_instance",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "boto_instance": [],
                "name": []
            }
        },
        "AWSCluster._create_orchestrator": {
            "name": "_create_orchestrator",
            "location": 444,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster._create_factories": {
            "name": "_create_factories",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "number": [
                    "int"
                ]
            }
        },
        "AWSCluster._generic_launch_instances": {
            "name": "_generic_launch_instances",
            "location": 504,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "instance_class": [],
                "number": [],
                "instance_type": [],
                "instance_ami": [],
                "role": []
            }
        },
        "AWSCluster._get_boto_public_host": {
            "name": "_get_boto_public_host",
            "location": 607,
            "return": [],
            "arguments": {
                "self": [],
                "boto_ins": []
            }
        },
        "AWSCluster._get_boto_private_host": {
            "name": "_get_boto_private_host",
            "location": 627,
            "return": [],
            "arguments": {
                "self": [],
                "boto_ins": []
            }
        },
        "AWSCluster.terminate_instances": {
            "name": "terminate_instances",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster.rollback_env": {
            "name": "rollback_env",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster.parse": {
            "name": "parse",
            "location": 679,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster._get_boto_instance_by_host": {
            "name": "_get_boto_instance_by_host",
            "location": 713,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public_host": []
            }
        },
        "AWSCluster._get_instance_id_by_host": {
            "name": "_get_instance_id_by_host",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "public_host": []
            }
        },
        "AWSCluster._get_alarm_name": {
            "name": "_get_alarm_name",
            "location": 759,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "instance_id": []
            }
        },
        "AWSCluster.has_alarm": {
            "name": "has_alarm",
            "location": 775,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance_id": []
            }
        },
        "AWSCluster.remove_existing_events": {
            "name": "remove_existing_events",
            "location": 795,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster.create_cloudwatch_events": {
            "name": "create_cloudwatch_events",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster._delete_cloudwatch_event": {
            "name": "_delete_cloudwatch_event",
            "location": 853,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": []
            }
        },
        "AWSCluster._put_fake_cloudwatch_data": {
            "name": "_put_fake_cloudwatch_data",
            "location": 866,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [],
                "value": [
                    "int"
                ],
                "points": [
                    "int"
                ]
            }
        },
        "AWSCluster._create_cloudwatch_event": {
            "name": "_create_cloudwatch_event",
            "location": 914,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance_id": [],
                "mins": [
                    "int"
                ],
                "cpu_thresh": [
                    "float"
                ]
            }
        },
        "AWSCluster._get_images": {
            "name": "_get_images",
            "location": 962,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AWSCluster._get_ami": {
            "name": "_get_ami",
            "location": 983,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_type": [],
                "version": []
            }
        },
        "AWSCluster._find_default_ami": {
            "name": "_find_default_ami",
            "location": 1011,
            "return": [],
            "arguments": {
                "self": [],
                "_type": []
            }
        },
        "AWSCluster._get_creation_name": {
            "name": "_get_creation_name",
            "location": 1029,
            "return": [],
            "arguments": {
                "self": [],
                "role": []
            }
        }
    },
    "flambe-master/flambe/cluster/cluster.py": {
        "Cluster.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "factories_num": [],
                "key": [],
                "username": [],
                "setup_cmds": [
                    "None"
                ]
            }
        },
        "Cluster.__enter__": {
            "name": "__enter__",
            "location": 104,
            "return": [
                "Cluster"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.__exit__": {
            "name": "__exit__",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "tb": []
            }
        },
        "Cluster.get_orchestrator_name": {
            "name": "get_orchestrator_name",
            "location": 142,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.get_factory_basename": {
            "name": "get_factory_basename",
            "location": 159,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.load_all_instances": {
            "name": "load_all_instances",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster._get_all_hosts": {
            "name": "_get_all_hosts",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cluster.create_dirs": {
            "name": "create_dirs",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relative_dirs": []
            }
        },
        "Cluster.prepare_all_instances": {
            "name": "prepare_all_instances",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.run": {
            "name": "run",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool"
                ]
            }
        },
        "Cluster.run_cmds": {
            "name": "run_cmds",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_cmds": []
            }
        },
        "Cluster.get_orchestrator": {
            "name": "get_orchestrator",
            "location": 325,
            "return": [
                "OrchestratorInstance"
            ],
            "arguments": {
                "self": [],
                "ip": [],
                "private_ip": [
                    "None"
                ],
                "use_public": [
                    "bool"
                ]
            }
        },
        "Cluster.get_orch_home_path": {
            "name": "get_orch_home_path",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cluster.get_factory": {
            "name": "get_factory",
            "location": 344,
            "return": [
                "CPUFactoryInstance"
            ],
            "arguments": {
                "self": [],
                "ip": [],
                "private_ip": [
                    "None"
                ],
                "use_public": [
                    "bool"
                ]
            }
        },
        "Cluster.get_gpu_factory": {
            "name": "get_gpu_factory",
            "location": 351,
            "return": [
                "GPUFactoryInstance"
            ],
            "arguments": {
                "self": [],
                "ip": [],
                "private_ip": [
                    "None"
                ],
                "use_public": [
                    "bool"
                ]
            }
        },
        "Cluster.launch_ray_cluster": {
            "name": "launch_ray_cluster",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.check_ray_cluster": {
            "name": "check_ray_cluster",
            "location": 402,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.shutdown_ray_cluster": {
            "name": "shutdown_ray_cluster",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.existing_ray_cluster": {
            "name": "existing_ray_cluster",
            "location": 435,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.existing_flambe_execution": {
            "name": "existing_flambe_execution",
            "location": 451,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.shutdown_flambe_execution": {
            "name": "shutdown_flambe_execution",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.existing_dir": {
            "name": "existing_dir",
            "location": 491,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_dir": []
            }
        },
        "Cluster.is_ray_cluster_up": {
            "name": "is_ray_cluster_up",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cluster.rollback_env": {
            "name": "rollback_env",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.parse": {
            "name": "parse",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.send_local_content": {
            "name": "send_local_content",
            "location": 542,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "content": [],
                "dest": [],
                "all_hosts": [
                    "bool"
                ]
            }
        },
        "Cluster.rsync_orch": {
            "name": "rsync_orch",
            "location": 603,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": []
            }
        },
        "Cluster.send_secrets": {
            "name": "send_secrets",
            "location": 621,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "whitelist": [
                    "None"
                ]
            }
        },
        "Cluster.execute": {
            "name": "execute",
            "location": 653,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_runnable": [],
                "extensions": [],
                "new_secrets": [],
                "force": []
            }
        },
        "Cluster.remove_dir": {
            "name": "remove_dir",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_dir": [],
                "content_only": [
                    "bool"
                ],
                "all_hosts": [
                    "bool"
                ]
            }
        },
        "Cluster.cluster_has_key": {
            "name": "cluster_has_key",
            "location": 721,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.distribute_keys": {
            "name": "distribute_keys",
            "location": 758,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.contains_gpu_factories": {
            "name": "contains_gpu_factories",
            "location": 827,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.get_max_resources": {
            "name": "get_max_resources",
            "location": 840,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cluster.install_extensions_in_orchestrator": {
            "name": "install_extensions_in_orchestrator",
            "location": 871,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extensions": []
            }
        },
        "Cluster.install_extensions_in_factories": {
            "name": "install_extensions_in_factories",
            "location": 892,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extensions": []
            }
        },
        "Cluster.get_remote_env": {
            "name": "get_remote_env",
            "location": 909,
            "return": [
                "RemoteEnvironment"
            ],
            "arguments": {
                "self": [],
                "user_provider": []
            }
        },
        "Cluster.distribute_keys.m": {
            "name": "m",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "ins": []
            }
        }
    },
    "flambe-master/flambe/cluster/const.py": {},
    "flambe-master/flambe/cluster/errors.py": {},
    "flambe-master/flambe/cluster/ssh.py": {
        "SSHCluster.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "orchestrator_ip": [],
                "factories_ips": [],
                "key": [],
                "username": [],
                "remote_context": [
                    "None"
                ],
                "use_public": [
                    "bool"
                ],
                "setup_cmds": [
                    "None"
                ]
            }
        },
        "SSHCluster.load_all_instances": {
            "name": "load_all_instances",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exp_name": [
                    "None"
                ],
                "force": [
                    "bool"
                ]
            }
        },
        "SSHCluster.rollback_env": {
            "name": "rollback_env",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSHCluster.rsync_hosts": {
            "name": "rsync_hosts",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/cluster/utils.py": {},
    "flambe-master/flambe/cluster/__init__.py": {},
    "flambe-master/flambe/cluster/instance/errors.py": {},
    "flambe-master/flambe/cluster/instance/instance.py": {
        "Instance.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "private_host": [],
                "username": [],
                "key": [],
                "config": [],
                "debug": [],
                "use_public": [
                    "bool"
                ]
            }
        },
        "Instance.fix_relpaths_in_config": {
            "name": "fix_relpaths_in_config",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__enter__": {
            "name": "__enter__",
            "location": 115,
            "return": [
                "Instance"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.__exit__": {
            "name": "__exit__",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "Instance.prepare": {
            "name": "prepare",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.wait_until_accessible": {
            "name": "wait_until_accessible",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.is_up": {
            "name": "is_up",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance._get_cli": {
            "name": "_get_cli",
            "location": 189,
            "return": [
                "SSHClient"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance._run_cmd": {
            "name": "_run_cmd",
            "location": 222,
            "return": [
                "RemoteCommand"
            ],
            "arguments": {
                "self": [],
                "cmd": [],
                "retries": [
                    "int"
                ],
                "wd": [
                    "None"
                ]
            }
        },
        "Instance._run_script": {
            "name": "_run_script",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "fname": [],
                "desc": []
            }
        },
        "Instance._remote_script": {
            "name": "_remote_script",
            "location": 337,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "host_fname": [],
                "desc": []
            }
        },
        "Instance.run_cmds": {
            "name": "run_cmds",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_cmds": []
            }
        },
        "Instance.send_rsync": {
            "name": "send_rsync",
            "location": 411,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host_path": [],
                "remote_path": [],
                "params": []
            }
        },
        "Instance.get_home_path": {
            "name": "get_home_path",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instance.clean_containers": {
            "name": "clean_containers",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.clean_container_by_image": {
            "name": "clean_container_by_image",
            "location": 494,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_name": []
            }
        },
        "Instance.clean_container_by_command": {
            "name": "clean_container_by_command",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "Instance.install_docker": {
            "name": "install_docker",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.install_extensions": {
            "name": "install_extensions",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extensions": []
            }
        },
        "Instance.install_flambe": {
            "name": "install_flambe",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.is_docker_installed": {
            "name": "is_docker_installed",
            "location": 644,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instance.is_flambe_installed": {
            "name": "is_flambe_installed",
            "location": 658,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "bool"
                ]
            }
        },
        "Instance.is_docker_running": {
            "name": "is_docker_running",
            "location": 693,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instance.start_docker": {
            "name": "start_docker",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.is_node_running": {
            "name": "is_node_running",
            "location": 720,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instance.is_flambe_running": {
            "name": "is_flambe_running",
            "location": 732,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instance.existing_dir": {
            "name": "existing_dir",
            "location": 744,
            "return": [],
            "arguments": {
                "self": [],
                "_dir": []
            }
        },
        "Instance.shutdown_node": {
            "name": "shutdown_node",
            "location": 762,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.shutdown_flambe": {
            "name": "shutdown_flambe",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instance.create_dirs": {
            "name": "create_dirs",
            "location": 796,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relative_dirs": []
            }
        },
        "Instance.remove_dir": {
            "name": "remove_dir",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_dir": [],
                "content_only": [
                    "bool"
                ]
            }
        },
        "Instance.contains_gpu": {
            "name": "contains_gpu",
            "location": 840,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CPUFactoryInstance.prepare": {
            "name": "prepare",
            "location": 866,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CPUFactoryInstance.launch_node": {
            "name": "launch_node",
            "location": 879,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis_address": []
            }
        },
        "CPUFactoryInstance.num_cpus": {
            "name": "num_cpus",
            "location": 904,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CPUFactoryInstance.num_gpus": {
            "name": "num_gpus",
            "location": 916,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPUFactoryInstance.prepare": {
            "name": "prepare",
            "location": 946,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPUFactoryInstance.install_cuda": {
            "name": "install_cuda",
            "location": 962,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPUFactoryInstance.is_cuda_installed": {
            "name": "is_cuda_installed",
            "location": 977,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrchestratorInstance.prepare": {
            "name": "prepare",
            "location": 1002,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrchestratorInstance.launch_report_site": {
            "name": "launch_report_site",
            "location": 1019,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "progress_file": [],
                "port": [],
                "output_log": [],
                "output_dir": [],
                "tensorboard_port": []
            }
        },
        "OrchestratorInstance.is_tensorboard_running": {
            "name": "is_tensorboard_running",
            "location": 1054,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrchestratorInstance.is_report_site_running": {
            "name": "is_report_site_running",
            "location": 1067,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrchestratorInstance.remove_tensorboard": {
            "name": "remove_tensorboard",
            "location": 1079,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrchestratorInstance.remove_report_site": {
            "name": "remove_report_site",
            "location": 1085,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OrchestratorInstance.launch_tensorboard": {
            "name": "launch_tensorboard",
            "location": 1097,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logs_dir": [],
                "tensorboard_port": []
            }
        },
        "OrchestratorInstance.existing_tmux_session": {
            "name": "existing_tmux_session",
            "location": 1129,
            "return": [],
            "arguments": {
                "self": [],
                "session_name": []
            }
        },
        "OrchestratorInstance.kill_tmux_session": {
            "name": "kill_tmux_session",
            "location": 1147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_name": []
            }
        },
        "OrchestratorInstance.launch_flambe": {
            "name": "launch_flambe",
            "location": 1164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_file": [],
                "secrets_file": [],
                "force": []
            }
        },
        "OrchestratorInstance.launch_node": {
            "name": "launch_node",
            "location": 1197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": []
            }
        },
        "OrchestratorInstance.worker_nodes": {
            "name": "worker_nodes",
            "location": 1222,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrchestratorInstance.rsync_folder": {
            "name": "rsync_folder",
            "location": 1249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_from": [],
                "_to": [],
                "exclude": []
            }
        }
    },
    "flambe-master/flambe/cluster/instance/__init__.py": {},
    "flambe-master/flambe/compile/component.py": {
        "parse_link_str": {
            "name": "parse_link_str",
            "location": 406,
            "return": [
                "tuple[list]"
            ],
            "arguments": {
                "link_str": []
            }
        },
        "create_link_str": {
            "name": "create_link_str",
            "location": 499,
            "return": [],
            "arguments": {
                "schematic_path": [],
                "attr_path": []
            }
        },
        "fill_defaults": {
            "name": "fill_defaults",
            "location": 725,
            "return": [],
            "arguments": {
                "kwargs": [],
                "function": []
            }
        },
        "merge_kwargs": {
            "name": "merge_kwargs",
            "location": 738,
            "return": [
                "dict"
            ],
            "arguments": {
                "kwargs": [],
                "compiled_kwargs": []
            }
        },
        "dynamic_component": {
            "name": "dynamic_component",
            "location": 1440,
            "return": [],
            "arguments": {
                "class_": [],
                "tag": [],
                "tag_namespace": [
                    "None"
                ],
                "parent_component_class": [
                    "Component"
                ]
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component_subclass": [],
                "_flambe_custom_factory_name": [
                    "None"
                ]
            }
        },
        "Schema.__call__": {
            "name": "__call__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "stash": [
                    "None"
                ]
            }
        },
        "Schema.add_extensions_metadata": {
            "name": "add_extensions_metadata",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extensions": []
            }
        },
        "Schema.aggregate_extensions_metadata": {
            "name": "aggregate_extensions_metadata",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Schema.contains": {
            "name": "contains",
            "location": 179,
            "return": [
                "tuple[typing.Union[bool,list]]"
            ],
            "arguments": {
                "self": [],
                "schema": [],
                "original_link": []
            }
        },
        "Schema.__setitem__": {
            "name": "__setitem__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Schema.__getitem__": {
            "name": "__getitem__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Schema.__delitem__": {
            "name": "__delitem__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Schema.__iter__": {
            "name": "__iter__",
            "location": 217,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.__len__": {
            "name": "__len__",
            "location": 220,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.__getattr__": {
            "name": "__getattr__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Schema.__setattr__": {
            "name": "__setattr__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Schema.__repr__": {
            "name": "__repr__",
            "location": 241,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.to_yaml": {
            "name": "to_yaml",
            "location": 251,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": [
                    "typing.Text"
                ]
            }
        },
        "Schema.serialize": {
            "name": "serialize",
            "location": 257,
            "return": [
                "dict[typing.Text, dict]"
            ],
            "arguments": {
                "obj": []
            }
        },
        "Schema.deserialize": {
            "name": "deserialize",
            "location": 287,
            "return": [
                "dict"
            ],
            "arguments": {
                "data": []
            }
        },
        "contextualized_linking.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_obj": [],
                "prefix": []
            }
        },
        "contextualized_linking.__enter__": {
            "name": "__enter__",
            "location": 341,
            "return": [
                "contextualized_linking"
            ],
            "arguments": {
                "self": []
            }
        },
        "contextualized_linking.__exit__": {
            "name": "__exit__",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "PickledDataLink.__init__": {
            "name": "__init__",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj_id": [],
                "value": [
                    "None"
                ]
            }
        },
        "PickledDataLink.__call__": {
            "name": "__call__",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "stash": []
            }
        },
        "PickledDataLink.to_yaml": {
            "name": "to_yaml",
            "location": 382,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "PickledDataLink.from_yaml": {
            "name": "from_yaml",
            "location": 389,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "Link.__init__": {
            "name": "__init__",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schematic_path": [],
                "attr_path": [
                    "None"
                ],
                "target": [
                    "None"
                ],
                "local": [
                    "bool"
                ]
            }
        },
        "Link.root_schema": {
            "name": "root_schema",
            "location": 604,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Link.__repr__": {
            "name": "__repr__",
            "location": 607,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.__call__": {
            "name": "__call__",
            "location": 610,
            "return": [
                "Schema"
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.to_yaml": {
            "name": "to_yaml",
            "location": 658,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "Link.from_yaml": {
            "name": "from_yaml",
            "location": 698,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "Link.convert": {
            "name": "convert",
            "location": 704,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionCallLink.__call__": {
            "name": "__call__",
            "location": 714,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Component.__init__": {
            "name": "__init__",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Component.run": {
            "name": "run",
            "location": 791,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Component.metric": {
            "name": "metric",
            "location": 811,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Component._config_str": {
            "name": "_config_str",
            "location": 823,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Component.register_attrs": {
            "name": "register_attrs",
            "location": 865,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Component._state_dict_hook": {
            "name": "_state_dict_hook",
            "location": 893,
            "return": [],
            "arguments": {
                "self": [],
                "state_dict": [],
                "prefix": [],
                "local_metadata": []
            }
        },
        "Component._add_registered_attrs": {
            "name": "_add_registered_attrs",
            "location": 998,
            "return": [],
            "arguments": {
                "self": [],
                "state_dict": [],
                "prefix": []
            }
        },
        "Component._state": {
            "name": "_state",
            "location": 1004,
            "return": [],
            "arguments": {
                "self": [],
                "state_dict": [],
                "prefix": [],
                "local_metadata": []
            }
        },
        "Component.get_state": {
            "name": "get_state",
            "location": 1028,
            "return": [
                "State"
            ],
            "arguments": {
                "self": [],
                "destination": [
                    "None"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "keep_vars": [
                    "bool"
                ]
            }
        },
        "Component._load_state_dict_hook": {
            "name": "_load_state_dict_hook",
            "location": 1090,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [],
                "prefix": [],
                "local_metadata": [],
                "strict": [],
                "missing_keys": [],
                "unexpected_keys": [],
                "error_msgs": []
            }
        },
        "Component._load_registered_attrs": {
            "name": "_load_registered_attrs",
            "location": 1154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [],
                "prefix": []
            }
        },
        "Component._load_state": {
            "name": "_load_state",
            "location": 1159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [],
                "prefix": [],
                "local_metadata": [],
                "strict": [],
                "missing_keys": [],
                "unexpected_keys": [],
                "error_msgs": []
            }
        },
        "Component.load_state": {
            "name": "load_state",
            "location": 1197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [],
                "strict": [
                    "bool"
                ]
            }
        },
        "Component.load_from_path": {
            "name": "load_from_path",
            "location": 1267,
            "return": [],
            "arguments": {
                "cls": [],
                "path": [],
                "map_location": [
                    "None"
                ],
                "use_saved_config_defaults": [
                    "bool"
                ]
            }
        },
        "Component.save": {
            "name": "save",
            "location": 1280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Component.to_yaml": {
            "name": "to_yaml",
            "location": 1284,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "Component.from_yaml": {
            "name": "from_yaml",
            "location": 1288,
            "return": [
                "Schema"
            ],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "Component.precompile": {
            "name": "precompile",
            "location": 1310,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Component.aggregate_extensions_metadata": {
            "name": "aggregate_extensions_metadata",
            "location": 1332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Component.compile": {
            "name": "compile",
            "location": 1357,
            "return": [],
            "arguments": {
                "cls": [],
                "_flambe_custom_factory_name": [
                    "None"
                ],
                "_flambe_extensions": [
                    "None"
                ],
                "_flambe_stash": [
                    "None"
                ]
            }
        },
        "Schema.add_extensions_metadata.helper": {
            "name": "helper",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "Schema.aggregate_extensions_metadata.helper": {
            "name": "helper",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "Schema.contains.helper": {
            "name": "helper",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "current": [],
                "schematic_path": []
            }
        },
        "Link.__call__.auto_resolve_link_and_move_to_schema": {
            "name": "auto_resolve_link_and_move_to_schema",
            "location": 619,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "Component.load_state.load": {
            "name": "load",
            "location": 1233,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [],
                "prefix": [
                    "typing.Text"
                ]
            }
        },
        "Component.aggregate_extensions_metadata.helper": {
            "name": "helper",
            "location": 1341,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "Component.compile.helper": {
            "name": "helper",
            "location": 1389,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            }
        }
    },
    "flambe-master/flambe/compile/const.py": {},
    "flambe-master/flambe/compile/downloader.py": {
        "s3_exists": {
            "name": "s3_exists",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": []
            }
        },
        "s3_remote_file": {
            "name": "s3_remote_file",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": []
            }
        },
        "download_s3_file": {
            "name": "download_s3_file",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "destination": []
            }
        },
        "http_exists": {
            "name": "http_exists",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": []
            }
        },
        "download_http_file": {
            "name": "download_http_file",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "destination": []
            }
        },
        "download_s3_folder": {
            "name": "download_s3_folder",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "destination": []
            }
        },
        "download_manager": {
            "name": "download_manager",
            "location": 146,
            "return": [
                "typing.Generator",
                "typing.Generator[None]"
            ],
            "arguments": {
                "path": [],
                "destination": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/compile/extensions.py": {
        "download_extensions": {
            "name": "download_extensions",
            "location": 24,
            "return": [
                "dict"
            ],
            "arguments": {
                "extensions": [],
                "container_folder": []
            }
        },
        "_download_remote_extension": {
            "name": "_download_remote_extension",
            "location": 58,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "extension_url": [],
                "location": []
            }
        },
        "_has_svn": {
            "name": "_has_svn",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_download_svn": {
            "name": "_download_svn",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "svn_url": [],
                "location": [],
                "username": [
                    "None"
                ],
                "password": [
                    "None"
                ]
            }
        },
        "install_extensions": {
            "name": "install_extensions",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "extensions": [],
                "user_flag": [
                    "bool"
                ]
            }
        },
        "is_installed_module": {
            "name": "is_installed_module",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "module_name": []
            }
        },
        "import_modules": {
            "name": "import_modules",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "modules": []
            }
        },
        "setup_default_modules": {
            "name": "setup_default_modules",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/flambe/compile/registrable.py": {
        "make_from_yaml_with_metadata": {
            "name": "make_from_yaml_with_metadata",
            "location": 33,
            "return": [],
            "arguments": {
                "from_yaml_fn": [],
                "tag": [],
                "factory_name": []
            }
        },
        "make_to_yaml_with_metadata": {
            "name": "make_to_yaml_with_metadata",
            "location": 46,
            "return": [],
            "arguments": {
                "to_yaml_fn": []
            }
        },
        "alias": {
            "name": "alias",
            "location": 223,
            "return": [],
            "arguments": {
                "tag": [],
                "tag_namespace": []
            }
        },
        "register": {
            "name": "register",
            "location": 240,
            "return": [],
            "arguments": {
                "cls": [],
                "tag": []
            }
        },
        "make_from_yaml_with_metadata.wrapped": {
            "name": "wrapped",
            "location": 37,
            "return": [],
            "arguments": {
                "constructor": [],
                "node": []
            }
        },
        "make_to_yaml_with_metadata.wrapped": {
            "name": "wrapped",
            "location": 48,
            "return": [],
            "arguments": {
                "representer": [],
                "node": []
            }
        },
        "registration_context.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": []
            }
        },
        "registration_context.__enter__": {
            "name": "__enter__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "registration_context.__exit__": {
            "name": "__exit__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "registration_context.__call__": {
            "name": "__call__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Registrable.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 91,
            "return": [],
            "arguments": {
                "cls": [],
                "should_register": [],
                "tag_override": [],
                "tag_namespace": []
            }
        },
        "Registrable.register_tag": {
            "name": "register_tag",
            "location": 109,
            "return": [],
            "arguments": {
                "class_": [],
                "tag": [],
                "tag_namespace": []
            }
        },
        "Registrable.get_default_tag": {
            "name": "get_default_tag",
            "location": 185,
            "return": [],
            "arguments": {
                "class_": [],
                "factory_name": []
            }
        },
        "Registrable.to_yaml": {
            "name": "to_yaml",
            "location": 204,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "Registrable.from_yaml": {
            "name": "from_yaml",
            "location": 214,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "alias.decorator": {
            "name": "decorator",
            "location": 233,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "registrable_factory.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "registrable_factory.__set_name__": {
            "name": "__set_name__",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "owner": [],
                "name": []
            }
        },
        "MappedRegistrable.to_yaml": {
            "name": "to_yaml",
            "location": 297,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "MappedRegistrable.from_yaml": {
            "name": "from_yaml",
            "location": 302,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "registration_context.__call__.decorate_reg_context": {
            "name": "decorate_reg_context",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "Registrable.register_tag.registration_helper": {
            "name": "registration_helper",
            "location": 150,
            "return": [],
            "arguments": {
                "factory_name": []
            }
        },
        "Registrable.register_tag.registration_helper.t_y": {
            "name": "t_y",
            "location": 156,
            "return": [],
            "arguments": {
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "Registrable.register_tag.registration_helper.f_y": {
            "name": "f_y",
            "location": 166,
            "return": [],
            "arguments": {
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        }
    },
    "flambe-master/flambe/compile/serialization.py": {
        "_convert_to_tree": {
            "name": "_convert_to_tree",
            "location": 52,
            "return": [
                "SaveTreeNode"
            ],
            "arguments": {
                "metadata": []
            }
        },
        "_fetch_tree_item": {
            "name": "_fetch_tree_item",
            "location": 101,
            "return": [
                "tuple"
            ],
            "arguments": {
                "save_tree": [],
                "key": []
            }
        },
        "_update_save_tree": {
            "name": "_update_save_tree",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "save_tree": [],
                "key": [],
                "value": []
            }
        },
        "_update_save_tree_metadata": {
            "name": "_update_save_tree_metadata",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "save_tree": [],
                "key": [],
                "value": []
            }
        },
        "_traverse_all_nodes": {
            "name": "_traverse_all_nodes",
            "location": 123,
            "return": [
                "typing.Generator[tuple[list]]",
                "typing.Generator"
            ],
            "arguments": {
                "save_tree": [],
                "path": [
                    "None"
                ]
            }
        },
        "_extract_prefix": {
            "name": "_extract_prefix",
            "location": 133,
            "return": [],
            "arguments": {
                "root": [],
                "directory": []
            }
        },
        "_prefix_keys": {
            "name": "_prefix_keys",
            "location": 140,
            "return": [],
            "arguments": {
                "state": [],
                "prefix": []
            }
        },
        "traverse": {
            "name": "traverse",
            "location": 148,
            "return": [
                "typing.Generator",
                "typing.Generator[tuple[list]]"
            ],
            "arguments": {
                "nested": [],
                "path": [
                    "None"
                ]
            }
        },
        "_update_link_refs": {
            "name": "_update_link_refs",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "save_state_to_file": {
            "name": "save_state_to_file",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "state": [],
                "path": [],
                "compress": [
                    "bool"
                ],
                "pickle_only": [
                    "bool"
                ],
                "overwrite": [
                    "bool"
                ],
                "pickle_module": [],
                "pickle_protocol": []
            }
        },
        "save": {
            "name": "save",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [],
                "path": [],
                "compress": [
                    "bool"
                ],
                "pickle_only": [
                    "bool"
                ],
                "overwrite": [
                    "bool"
                ],
                "pickle_module": [],
                "pickle_protocol": []
            }
        },
        "load_state_from_file": {
            "name": "load_state_from_file",
            "location": 347,
            "return": [
                "State"
            ],
            "arguments": {
                "path": [],
                "map_location": [
                    "None"
                ],
                "pickle_module": []
            }
        },
        "load": {
            "name": "load",
            "location": 438,
            "return": [],
            "arguments": {
                "path": [],
                "map_location": [
                    "None"
                ],
                "auto_install": [
                    "bool"
                ],
                "pickle_module": []
            }
        }
    },
    "flambe-master/flambe/compile/utils.py": {
        "all_subclasses": {
            "name": "all_subclasses",
            "location": 11,
            "return": [
                "set"
            ],
            "arguments": {
                "class_": []
            }
        },
        "make_component": {
            "name": "make_component",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": [],
                "tag_namespace": [
                    "None"
                ],
                "only_module": [
                    "None"
                ],
                "parent_component_class": [
                    "None"
                ],
                "exclude": []
            }
        },
        "_is_url": {
            "name": "_is_url",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "resource": []
            }
        },
        "get_frozen_deps": {
            "name": "get_frozen_deps",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "write_deps": {
            "name": "write_deps",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [],
                "deps": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/compile/__init__.py": {},
    "flambe-master/flambe/dataset/dataset.py": {
        "Dataset.train": {
            "name": "train",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.val": {
            "name": "val",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.test": {
            "name": "test",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__setitem__": {
            "name": "__setitem__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__delitem__": {
            "name": "__delitem__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/dataset/tabular.py": {
        "DataView.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "transform_hooks": [],
                "cache": []
            }
        },
        "DataView.raw": {
            "name": "raw",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataView.__getitem__": {
            "name": "__getitem__",
            "location": 54,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "DataView.is_empty": {
            "name": "is_empty",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataView.cols": {
            "name": "cols",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataView.__len__": {
            "name": "__len__",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataView.__setitem__": {
            "name": "__setitem__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataView.__delitem__": {
            "name": "__delitem__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train": [],
                "val": [
                    "None"
                ],
                "test": [
                    "None"
                ],
                "cache": [
                    "bool"
                ],
                "named_columns": [],
                "transform": [
                    "None"
                ]
            }
        },
        "TabularDataset._set_transforms": {
            "name": "_set_transforms",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transform": []
            }
        },
        "TabularDataset.from_path": {
            "name": "from_path",
            "location": 284,
            "return": [],
            "arguments": {
                "cls": [],
                "train_path": [],
                "val_path": [
                    "None"
                ],
                "test_path": [
                    "None"
                ],
                "sep": [
                    "typing.Text"
                ],
                "header": [
                    "typing.Text"
                ],
                "columns": [],
                "encoding": [
                    "typing.Text"
                ],
                "transform": [
                    "None"
                ]
            }
        },
        "TabularDataset.autogen": {
            "name": "autogen",
            "location": 338,
            "return": [],
            "arguments": {
                "cls": [],
                "data_path": [],
                "test_path": [
                    "None"
                ],
                "seed": [
                    "None"
                ],
                "test_ratio": [
                    "float"
                ],
                "val_ratio": [
                    "float"
                ],
                "sep": [
                    "typing.Text"
                ],
                "header": [
                    "typing.Text"
                ],
                "columns": [],
                "encoding": [
                    "typing.Text"
                ],
                "transform": [
                    "None"
                ]
            }
        },
        "TabularDataset._load_file": {
            "name": "_load_file",
            "location": 410,
            "return": [
                "tuple[typing.Optional[list[str]]]"
            ],
            "arguments": {
                "cls": [],
                "path": [],
                "sep": [
                    "typing.Text"
                ],
                "header": [
                    "typing.Text"
                ],
                "columns": [],
                "encoding": [
                    "typing.Text"
                ]
            }
        },
        "TabularDataset.train": {
            "name": "train",
            "location": 491,
            "return": [
                "DataView"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.val": {
            "name": "val",
            "location": 499,
            "return": [
                "DataView"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.test": {
            "name": "test",
            "location": 507,
            "return": [
                "DataView"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.raw": {
            "name": "raw",
            "location": 515,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.cols": {
            "name": "cols",
            "location": 525,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.__len__": {
            "name": "__len__",
            "location": 529,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.__iter__": {
            "name": "__iter__",
            "location": 533,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "TabularDataset.__getitem__": {
            "name": "__getitem__",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        }
    },
    "flambe-master/flambe/dataset/__init__.py": {},
    "flambe-master/flambe/experiment/experiment.py": {
        "Experiment.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "pipeline": [],
                "resume": [
                    "None"
                ],
                "devices": [
                    "None"
                ],
                "save_path": [],
                "resources": [
                    "None"
                ],
                "search": [
                    "None"
                ],
                "schedulers": [
                    "None"
                ],
                "reduce": [
                    "None"
                ],
                "env": [
                    "None"
                ],
                "max_failures": [
                    "int"
                ],
                "stop_on_failure": [
                    "bool"
                ],
                "merge_plot": [
                    "bool"
                ],
                "user_provider": [
                    "None"
                ]
            }
        },
        "Experiment.process_resources": {
            "name": "process_resources",
            "location": 157,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "resources": [],
                "folder": []
            }
        },
        "Experiment.run": {
            "name": "run",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool"
                ],
                "verbose": [
                    "bool"
                ],
                "debug": [
                    "bool"
                ]
            }
        },
        "Experiment.teardown": {
            "name": "teardown",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.setup": {
            "name": "setup",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [],
                "extensions": [],
                "force": []
            }
        },
        "Experiment.parse": {
            "name": "parse",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.get_user": {
            "name": "get_user",
            "location": 628,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Experiment._dump_experiment_file": {
            "name": "_dump_experiment_file",
            "location": 639,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.run.trial_name_creator": {
            "name": "trial_name_creator",
            "location": 289,
            "return": [
                "str"
            ],
            "arguments": {
                "trial": []
            }
        }
    },
    "flambe-master/flambe/experiment/options.py": {
        "Options.from_sequence": {
            "name": "from_sequence",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "options": []
            }
        },
        "Options.convert": {
            "name": "convert",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Options.to_yaml": {
            "name": "to_yaml",
            "location": 47,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "Options.from_yaml": {
            "name": "from_yaml",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "GridSearchOptions.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": []
            }
        },
        "GridSearchOptions.from_sequence": {
            "name": "from_sequence",
            "location": 73,
            "return": [],
            "arguments": {
                "cls": [],
                "options": []
            }
        },
        "GridSearchOptions.convert": {
            "name": "convert",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GridSearchOptions.__getitem__": {
            "name": "__getitem__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "GridSearchOptions.__len__": {
            "name": "__len__",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridSearchOptions.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampledUniformSearchOptions.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [],
                "high": [],
                "k": [],
                "decimals": [
                    "int"
                ]
            }
        },
        "SampledUniformSearchOptions.from_sequence": {
            "name": "from_sequence",
            "location": 114,
            "return": [],
            "arguments": {
                "cls": [],
                "options": []
            }
        },
        "SampledUniformSearchOptions.convert": {
            "name": "convert",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SampledUniformSearchOptions.__getitem__": {
            "name": "__getitem__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "SampledUniformSearchOptions.__len__": {
            "name": "__len__",
            "location": 125,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampledUniformSearchOptions.__repr__": {
            "name": "__repr__",
            "location": 128,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SampledUniformSearchOptions.to_yaml": {
            "name": "to_yaml",
            "location": 132,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "ClusterResource.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": []
            }
        },
        "ClusterResource.to_yaml": {
            "name": "to_yaml",
            "location": 143,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "ClusterResource.from_yaml": {
            "name": "from_yaml",
            "location": 150,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        }
    },
    "flambe-master/flambe/experiment/progress.py": {
        "ProgressState.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "save_path": [],
                "dependency_dag": [],
                "config": [],
                "factories_num": [
                    "int"
                ]
            }
        },
        "ProgressState.checkpoint_start": {
            "name": "checkpoint_start",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_id": []
            }
        },
        "ProgressState.refresh": {
            "name": "refresh",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgressState.checkpoint_end": {
            "name": "checkpoint_end",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_id": [],
                "block_success": []
            }
        },
        "ProgressState.finish": {
            "name": "finish",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgressState._save": {
            "name": "_save",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgressState.toJSON": {
            "name": "toJSON",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/experiment/tune_adapter.py": {
        "TuneAdapter._setup": {
            "name": "_setup",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "TuneAdapter.save": {
            "name": "save",
            "location": 91,
            "return": [
                "string_types"
            ],
            "arguments": {
                "self": [],
                "checkpoint_dir": [
                    "None"
                ]
            }
        },
        "TuneAdapter._train": {
            "name": "_train",
            "location": 131,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TuneAdapter._save": {
            "name": "_save",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "checkpoint_dir": []
            }
        },
        "TuneAdapter._restore": {
            "name": "_restore",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checkpoint": []
            }
        },
        "TuneAdapter._stop": {
            "name": "_stop",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/experiment/utils.py": {
        "check_links": {
            "name": "check_links",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "blocks": [],
                "global_vars": [
                    "None"
                ]
            }
        },
        "check_search": {
            "name": "check_search",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "blocks": [],
                "search": [],
                "schedulers": []
            }
        },
        "convert_tune": {
            "name": "convert_tune",
            "location": 96,
            "return": [
                "dict",
                "list",
                "Options"
            ],
            "arguments": {
                "data": []
            }
        },
        "traverse": {
            "name": "traverse",
            "location": 123,
            "return": [
                "typing.Generator",
                "typing.Generator[tuple[list]]"
            ],
            "arguments": {
                "nested": [],
                "path": [
                    "None"
                ]
            }
        },
        "traverse_all": {
            "name": "traverse_all",
            "location": 149,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "obj": []
            }
        },
        "traverse_spec": {
            "name": "traverse_spec",
            "location": 172,
            "return": [
                "typing.Generator",
                "typing.Generator[tuple[typing.Text]]"
            ],
            "arguments": {
                "nested": [],
                "path": [
                    "None"
                ]
            }
        },
        "update_nested": {
            "name": "update_nested",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "nested": [],
                "prefix": [],
                "key": [],
                "new_value": []
            }
        },
        "get_nested": {
            "name": "get_nested",
            "location": 222,
            "return": [],
            "arguments": {
                "nested": [],
                "prefix": [],
                "key": []
            }
        },
        "update_schema_with_params": {
            "name": "update_schema_with_params",
            "location": 246,
            "return": [],
            "arguments": {
                "schema": [],
                "params": []
            }
        },
        "has_schemas_or_options": {
            "name": "has_schemas_or_options",
            "location": 270,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "divide_nested_grid_search_options": {
            "name": "divide_nested_grid_search_options",
            "location": 298,
            "return": [
                "typing.Generator",
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "extract_dict": {
            "name": "extract_dict",
            "location": 336,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "extract_needed_blocks": {
            "name": "extract_needed_blocks",
            "location": 377,
            "return": [
                "set",
                "int"
            ],
            "arguments": {
                "schemas": [],
                "block_id": [],
                "global_vars": []
            }
        },
        "update_link_refs": {
            "name": "update_link_refs",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "schemas": [],
                "block_id": [],
                "global_vars": []
            }
        },
        "get_best_trials": {
            "name": "get_best_trials",
            "location": 446,
            "return": [
                "list"
            ],
            "arguments": {
                "trials": [],
                "topk": [],
                "metric": [
                    "typing.Text"
                ]
            }
        },
        "get_non_remote_config": {
            "name": "get_non_remote_config",
            "location": 471,
            "return": [],
            "arguments": {
                "experiment": []
            }
        },
        "local_has_gpu": {
            "name": "local_has_gpu",
            "location": 491,
            "return": [],
            "arguments": {}
        },
        "rel_to_abs_paths": {
            "name": "rel_to_abs_paths",
            "location": 502,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "shutdown_ray_node": {
            "name": "shutdown_ray_node",
            "location": 524,
            "return": [],
            "arguments": {}
        },
        "shutdown_remote_ray_node": {
            "name": "shutdown_remote_ray_node",
            "location": 532,
            "return": [],
            "arguments": {
                "host": [],
                "user": [],
                "key": []
            }
        },
        "get_default_devices": {
            "name": "get_default_devices",
            "location": 555,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "debug": [
                    "bool"
                ],
                "default_cpus": [
                    "int"
                ],
                "default_gpus": [
                    "int"
                ]
            }
        },
        "check_links.helper": {
            "name": "helper",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "block": []
            }
        },
        "extract_dict.helper": {
            "name": "helper",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            }
        }
    },
    "flambe-master/flambe/experiment/wording.py": {
        "print_useful_local_info": {
            "name": "print_useful_local_info",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "full_save_path": []
            }
        },
        "print_useful_remote_info": {
            "name": "print_useful_remote_info",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "manager": [],
                "experiment_name": []
            }
        },
        "print_useful_metrics_only_info": {
            "name": "print_useful_metrics_only_info",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_extensions_cache_size_warning": {
            "name": "print_extensions_cache_size_warning",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "location": [],
                "limit": []
            }
        }
    },
    "flambe-master/flambe/experiment/__init__.py": {},
    "flambe-master/flambe/experiment/webapp/app.py": {
        "load_state": {
            "name": "load_state",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "analyze_download_params": {
            "name": "analyze_download_params",
            "location": 45,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "block": [],
                "variant": []
            }
        },
        "download": {
            "name": "download",
            "location": 67,
            "return": [],
            "arguments": {
                "block": [
                    "None"
                ],
                "variant": [
                    "None"
                ]
            }
        },
        "download_logs": {
            "name": "download_logs",
            "location": 83,
            "return": [],
            "arguments": {
                "block": [
                    "None"
                ],
                "variant": [
                    "None"
                ]
            }
        },
        "stream": {
            "name": "stream",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "state": {
            "name": "state",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "console_log": {
            "name": "console_log",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "stream.generate": {
            "name": "generate",
            "location": 103,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {}
        }
    },
    "flambe-master/flambe/experiment/webapp/__init__.py": {},
    "flambe-master/flambe/export/builder.py": {
        "Builder.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": [],
                "destination": [],
                "storage": [
                    "typing.Text"
                ],
                "compress": [
                    "bool"
                ],
                "pickle_only": [
                    "bool"
                ],
                "pickle_module": [],
                "pickle_protocol": []
            }
        },
        "Builder.run": {
            "name": "run",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": [
                    "bool"
                ]
            }
        },
        "Builder.save_local": {
            "name": "save_local",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": []
            }
        },
        "Builder.get_boto_session": {
            "name": "get_boto_session",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Builder.save_s3": {
            "name": "save_s3",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force": []
            }
        }
    },
    "flambe-master/flambe/export/exporter.py": {
        "Exporter.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Exporter.run": {
            "name": "run",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/export/__init__.py": {},
    "flambe-master/flambe/field/bow.py": {
        "BoWField.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "None"
                ],
                "lower": [
                    "bool"
                ],
                "unk_token": [
                    "typing.Text"
                ],
                "min_freq": [
                    "int"
                ],
                "normalize": [
                    "bool"
                ],
                "scale_factor": [
                    "None"
                ]
            }
        },
        "BoWField.vocab_size": {
            "name": "vocab_size",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoWField.process": {
            "name": "process",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "example": []
            }
        },
        "BoWField.setup": {
            "name": "setup",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/field/field.py": {
        "Field.setup": {
            "name": "setup",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.process": {
            "name": "process",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/field/label.py": {
        "LabelField.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "one_hot": [
                    "bool"
                ],
                "multilabel_sep": [
                    "None"
                ],
                "labels": [
                    "None"
                ]
            }
        },
        "LabelField.setup": {
            "name": "setup",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelField.process": {
            "name": "process",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "example": []
            }
        },
        "LabelField.vocab_list": {
            "name": "vocab_list",
            "location": 123,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelField.vocab_size": {
            "name": "vocab_size",
            "location": 135,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelField.label_count": {
            "name": "label_count",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LabelField.label_freq": {
            "name": "label_freq",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LabelField.label_inv_freq": {
            "name": "label_inv_freq",
            "location": 174,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/field/text.py": {
        "get_embeddings": {
            "name": "get_embeddings",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "embeddings": [],
                "embeddings_format": [
                    "typing.Text"
                ],
                "embeddings_binary": [
                    "bool"
                ]
            }
        },
        "TextField.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "None"
                ],
                "lower": [
                    "bool"
                ],
                "pad_token": [
                    "typing.Text"
                ],
                "unk_token": [
                    "typing.Text"
                ],
                "sos_token": [
                    "None"
                ],
                "eos_token": [
                    "None"
                ],
                "embeddings_info": [
                    "None"
                ],
                "embeddings": [
                    "None"
                ],
                "embeddings_format": [
                    "typing.Text"
                ],
                "embeddings_binary": [
                    "bool"
                ],
                "unk_init_all": [
                    "bool"
                ],
                "drop_unknown": [
                    "bool"
                ],
                "max_seq_len": [
                    "None"
                ],
                "truncate_end": [
                    "bool"
                ],
                "setup_all_embeddings": [
                    "bool"
                ],
                "additional_special_tokens": [
                    "None"
                ],
                "vocabulary": [
                    "None"
                ]
            }
        },
        "TextField.vocab_list": {
            "name": "vocab_list",
            "location": 275,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextField.vocab_size": {
            "name": "vocab_size",
            "location": 287,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextField._flatten_to_str": {
            "name": "_flatten_to_str",
            "location": 299,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data_sample": []
            }
        },
        "TextField._build_vocab": {
            "name": "_build_vocab",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextField._build_embeddings": {
            "name": "_build_embeddings",
            "location": 354,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "setup_vocab_from_embeddings": [],
                "initialize_unknowns": []
            }
        },
        "TextField.setup": {
            "name": "setup",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextField.process": {
            "name": "process",
            "location": 433,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "example": []
            }
        },
        "TextField.from_embeddings": {
            "name": "from_embeddings",
            "location": 497,
            "return": [],
            "arguments": {
                "cls": [],
                "embeddings": [],
                "embeddings_format": [
                    "typing.Text"
                ],
                "embeddings_binary": [
                    "bool"
                ],
                "build_vocab_from_embeddings": [
                    "bool"
                ],
                "unk_init_all": [
                    "bool"
                ],
                "drop_unknown": [
                    "bool"
                ],
                "additional_special_tokens": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/field/__init__.py": {},
    "flambe-master/flambe/learn/distillation.py": {
        "DistillationTrainer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [],
                "train_sampler": [],
                "val_sampler": [],
                "teacher_model": [],
                "student_model": [],
                "loss_fn": [],
                "metric_fn": [],
                "optimizer": [],
                "scheduler": [
                    "None"
                ],
                "iter_scheduler": [
                    "None"
                ],
                "device": [
                    "None"
                ],
                "max_steps": [
                    "int"
                ],
                "epoch_per_step": [
                    "float"
                ],
                "iter_per_step": [
                    "None"
                ],
                "batches_per_iter": [
                    "int"
                ],
                "lower_is_better": [
                    "bool"
                ],
                "max_grad_norm": [
                    "None"
                ],
                "max_grad_abs_val": [
                    "None"
                ],
                "extra_validation_metrics": [
                    "None"
                ],
                "teacher_columns": [
                    "None"
                ],
                "student_columns": [
                    "None"
                ],
                "alpha_kl": [
                    "float"
                ],
                "temperature": [
                    "int"
                ],
                "unlabel_dataset": [
                    "None"
                ],
                "unlabel_sampler": [
                    "None"
                ]
            }
        },
        "DistillationTrainer._compute_loss": {
            "name": "_compute_loss",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "DistillationTrainer._aggregate_preds": {
            "name": "_aggregate_preds",
            "location": 196,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "self": [],
                "data_iterator": []
            }
        }
    },
    "flambe-master/flambe/learn/eval.py": {
        "Evaluator.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [],
                "model": [],
                "metric_fn": [],
                "eval_sampler": [
                    "None"
                ],
                "eval_data": [
                    "typing.Text"
                ],
                "device": [
                    "None"
                ]
            }
        },
        "Evaluator.run": {
            "name": "run",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "block_name": [
                    "None"
                ]
            }
        },
        "Evaluator.metric": {
            "name": "metric",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/learn/script.py": {
        "Script.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script": [],
                "args": [],
                "kwargs": [
                    "None"
                ],
                "output_dir_arg": [
                    "None"
                ]
            }
        },
        "Script.run": {
            "name": "run",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/learn/train.py": {
        "Trainer.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [],
                "train_sampler": [],
                "val_sampler": [],
                "model": [],
                "loss_fn": [],
                "metric_fn": [],
                "optimizer": [],
                "scheduler": [
                    "None"
                ],
                "iter_scheduler": [
                    "None"
                ],
                "device": [
                    "None"
                ],
                "max_steps": [
                    "int"
                ],
                "epoch_per_step": [
                    "float"
                ],
                "iter_per_step": [
                    "None"
                ],
                "batches_per_iter": [
                    "int"
                ],
                "lower_is_better": [
                    "bool"
                ],
                "max_grad_norm": [
                    "None"
                ],
                "max_grad_abs_val": [
                    "None"
                ],
                "extra_validation_metrics": [
                    "None"
                ],
                "extra_training_metrics": [
                    "None"
                ],
                "extra_training_metrics_log_interval": [
                    "None"
                ]
            }
        },
        "Trainer.validation_metrics": {
            "name": "validation_metrics",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer._create_train_iterator": {
            "name": "_create_train_iterator",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer._batch_to_device": {
            "name": "_batch_to_device",
            "location": 184,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "Trainer._compute_loss": {
            "name": "_compute_loss",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "Trainer._compute_batch": {
            "name": "_compute_batch",
            "location": 217,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "batch": [],
                "metrics": [
                    "list"
                ]
            }
        },
        "Trainer._log_metrics": {
            "name": "_log_metrics",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "log_prefix": [],
                "metrics_with_states": [],
                "global_step": []
            }
        },
        "Trainer._train_step": {
            "name": "_train_step",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer._aggregate_preds": {
            "name": "_aggregate_preds",
            "location": 325,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "self": [],
                "data_iterator": []
            }
        },
        "Trainer._eval_step": {
            "name": "_eval_step",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.run": {
            "name": "run",
            "location": 405,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.metric": {
            "name": "metric",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Trainer._state": {
            "name": "_state",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "state_dict": [],
                "prefix": [],
                "local_metadata": []
            }
        },
        "Trainer._load_state": {
            "name": "_load_state",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [],
                "prefix": [],
                "local_metadata": [],
                "strict": [],
                "missing_keys": [],
                "unexpected_keys": [],
                "error_msgs": []
            }
        },
        "Trainer.precompile": {
            "name": "precompile",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Trainer.precompile.move_to_device": {
            "name": "move_to_device",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            }
        }
    },
    "flambe-master/flambe/learn/utils.py": {
        "select_device": {
            "name": "select_device",
            "location": 6,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "device": []
            }
        }
    },
    "flambe-master/flambe/learn/__init__.py": {},
    "flambe-master/flambe/logging/datatypes.py": {
        "ScalarT.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScalarsT.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistogramT.__repr__": {
            "name": "__repr__",
            "location": 93,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageT.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextT.__repr__": {
            "name": "__repr__",
            "location": 149,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PRCurveT.__repr__": {
            "name": "__repr__",
            "location": 185,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddingT.__repr__": {
            "name": "__repr__",
            "location": 224,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataLoggingFilter.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "bool"
                ],
                "level": [],
                "dont_include": [
                    "None"
                ]
            }
        },
        "DataLoggingFilter.filter": {
            "name": "filter",
            "location": 294,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "flambe-master/flambe/logging/logging.py": {
        "setup_global_logging": {
            "name": "setup_global_logging",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "console_log_level": []
            }
        },
        "colorize_exceptions": {
            "name": "colorize_exceptions",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FlambeFilter.filter": {
            "name": "filter",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "TrialLogging.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "log_dir": [],
                "verbose": [
                    "bool"
                ],
                "root_log_level": [
                    "None"
                ],
                "capture_warnings": [
                    "bool"
                ],
                "console_prefix": [
                    "None"
                ],
                "hyper_params": [
                    "None"
                ]
            }
        },
        "TrialLogging.__enter__": {
            "name": "__enter__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrialLogging.__exit__": {
            "name": "__exit__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "ContextInjection.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextInjection.filter": {
            "name": "filter",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "ContextInjection.__call__": {
            "name": "__call__",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "TqdmFileWrapper.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "TqdmFileWrapper.write": {
            "name": "write",
            "location": 209,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TqdmFileWrapper.flush": {
            "name": "flush",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrialLogging.__enter__.record_factory": {
            "name": "record_factory",
            "location": 139,
            "return": [],
            "arguments": {
                "name": [],
                "level": [],
                "fn": [],
                "lno": [],
                "msg": [],
                "args": [],
                "exc_info": [],
                "func": [
                    "None"
                ],
                "sinfo": [
                    "None"
                ]
            }
        },
        "colorize_exceptions.colorized_excepthook": {
            "name": "colorized_excepthook",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "type_": [],
                "value": [],
                "tb": []
            }
        }
    },
    "flambe-master/flambe/logging/utils.py": {
        "_get_context_logger": {
            "name": "_get_context_logger",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "get_trial_dir": {
            "name": "get_trial_dir",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "log": {
            "name": "log",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "data": [],
                "global_step": [],
                "walltime": [
                    "None"
                ]
            }
        },
        "log_scalar": {
            "name": "log_scalar",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "data": [],
                "global_step": [],
                "walltime": [
                    "None"
                ],
                "logger": [
                    "None"
                ]
            }
        },
        "log_scalars": {
            "name": "log_scalars",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "data": [],
                "global_step": [],
                "walltime": [
                    "None"
                ],
                "logger": [
                    "None"
                ]
            }
        },
        "log_text": {
            "name": "log_text",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "data": [],
                "global_step": [],
                "walltime": [
                    "None"
                ],
                "logger": [
                    "None"
                ]
            }
        },
        "log_image": {
            "name": "log_image",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "data": [],
                "global_step": [],
                "walltime": [
                    "None"
                ],
                "logger": [
                    "None"
                ]
            }
        },
        "log_pr_curve": {
            "name": "log_pr_curve",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "labels": [],
                "predictions": [],
                "global_step": [],
                "num_thresholds": [
                    "int"
                ],
                "walltime": [
                    "None"
                ],
                "logger": [
                    "None"
                ]
            }
        },
        "log_histogram": {
            "name": "log_histogram",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "tag": [],
                "data": [],
                "global_step": [],
                "bins": [
                    "typing.Text"
                ],
                "walltime": [
                    "None"
                ],
                "logger": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/logging/__init__.py": {},
    "flambe-master/flambe/logging/handler/contextual_file.py": {
        "ContextualFileHandler.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "canonical_name": [],
                "mode": [
                    "typing.Text"
                ],
                "encoding": [
                    "None"
                ]
            }
        },
        "ContextualFileHandler.baseFilename": {
            "name": "baseFilename",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContextualFileHandler.emit": {
            "name": "emit",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "flambe-master/flambe/logging/handler/tensorboard.py": {
        "TensorboardXHandler.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorboardXHandler.emit": {
            "name": "emit",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "TensorboardXHandler.close": {
            "name": "close",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorboardXHandler.flush": {
            "name": "flush",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/logging/handler/__init__.py": {},
    "flambe-master/flambe/metric/metric.py": {
        "Metric.compute": {
            "name": "compute",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        },
        "Metric.aggregate": {
            "name": "aggregate",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Metric.finalize": {
            "name": "finalize",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Metric.__call__": {
            "name": "__call__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Metric.__str__": {
            "name": "__str__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AverageableMetric.aggregate": {
            "name": "aggregate",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "AverageableMetric.finalize": {
            "name": "finalize",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        }
    },
    "flambe-master/flambe/metric/__init__.py": {},
    "flambe-master/flambe/metric/dev/accuracy.py": {
        "Accuracy.compute": {
            "name": "compute",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        }
    },
    "flambe-master/flambe/metric/dev/auc.py": {
        "one_hot": {
            "name": "one_hot",
            "location": 8,
            "return": [],
            "arguments": {
                "indices": [],
                "width": []
            }
        },
        "AUC.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_fpr": [
                    "float"
                ]
            }
        },
        "AUC.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AUC.compute": {
            "name": "compute",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        },
        "MultiClassAUC.compute": {
            "name": "compute",
            "location": 85,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        }
    },
    "flambe-master/flambe/metric/dev/binary.py": {
        "BinaryMetric.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "float"
                ]
            }
        },
        "BinaryMetric.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryMetric.compute": {
            "name": "compute",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        },
        "BinaryMetric.compute_binary": {
            "name": "compute_binary",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        },
        "BinaryAccuracy.compute_binary": {
            "name": "compute_binary",
            "location": 80,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        },
        "BinaryPrecision.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "float"
                ],
                "positive_label": [
                    "int"
                ]
            }
        },
        "BinaryPrecision.compute_binary": {
            "name": "compute_binary",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        },
        "BinaryPrecision.__str__": {
            "name": "__str__",
            "location": 176,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryRecall.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "float"
                ],
                "positive_label": [
                    "int"
                ]
            }
        },
        "BinaryRecall.compute_binary": {
            "name": "compute_binary",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        },
        "BinaryRecall.__str__": {
            "name": "__str__",
            "location": 247,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "F1.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threshold": [
                    "float"
                ],
                "positive_label": [
                    "int"
                ],
                "eps": [
                    "float"
                ]
            }
        },
        "F1.compute_binary": {
            "name": "compute_binary",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        }
    },
    "flambe-master/flambe/metric/dev/bpc.py": {
        "BPC.compute": {
            "name": "compute",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        },
        "BPC.finalize": {
            "name": "finalize",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        }
    },
    "flambe-master/flambe/metric/dev/perplexity.py": {
        "Perplexity.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Perplexity.compute": {
            "name": "compute",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        },
        "Perplexity.aggregate": {
            "name": "aggregate",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Perplexity.finalize": {
            "name": "finalize",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        }
    },
    "flambe-master/flambe/metric/dev/recall.py": {
        "Recall.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "top_k": [
                    "int"
                ]
            }
        },
        "Recall.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recall.compute": {
            "name": "compute",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        }
    },
    "flambe-master/flambe/metric/dev/__init__.py": {},
    "flambe-master/flambe/metric/loss/cross_entropy.py": {
        "MultiLabelCrossEntropy.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "None"
                ],
                "ignore_index": [
                    "None"
                ],
                "reduction": [
                    "typing.Text"
                ]
            }
        },
        "MultiLabelCrossEntropy.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiLabelCrossEntropy.compute": {
            "name": "compute",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        }
    },
    "flambe-master/flambe/metric/loss/nll_loss.py": {
        "MultiLabelNLLLoss.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "None"
                ],
                "ignore_index": [
                    "None"
                ],
                "reduction": [
                    "typing.Text"
                ]
            }
        },
        "MultiLabelNLLLoss.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiLabelNLLLoss.compute": {
            "name": "compute",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "pred": [],
                "target": []
            }
        }
    },
    "flambe-master/flambe/metric/loss/__init__.py": {},
    "flambe-master/flambe/model/logistic_regression.py": {
        "LogisticRegression.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": []
            }
        },
        "LogisticRegression.forward": {
            "name": "forward",
            "location": 39,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "target": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/model/__init__.py": {},
    "flambe-master/flambe/nlp/__init__.py": {},
    "flambe-master/flambe/nlp/classification/datasets.py": {
        "SSTDataset.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "binary": [
                    "bool"
                ],
                "phrases": [
                    "bool"
                ],
                "cache": [
                    "bool"
                ],
                "transform": [
                    "None"
                ]
            }
        },
        "SSTDataset._load_file": {
            "name": "_load_file",
            "location": 43,
            "return": [
                "tuple[list[tuple[str]]]"
            ],
            "arguments": {
                "cls": [],
                "path": [],
                "sep": [
                    "typing.Text"
                ],
                "header": [
                    "None"
                ],
                "columns": [
                    "None"
                ],
                "encoding": [
                    "typing.Text"
                ]
            }
        },
        "TRECDataset.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "bool"
                ],
                "transform": [
                    "None"
                ]
            }
        },
        "TRECDataset._load_file": {
            "name": "_load_file",
            "location": 79,
            "return": [
                "tuple[list[tuple[str]]]"
            ],
            "arguments": {
                "cls": [],
                "path": [],
                "sep": [
                    "typing.Text"
                ],
                "header": [
                    "None"
                ],
                "columns": [
                    "None"
                ],
                "encoding": [
                    "typing.Text"
                ]
            }
        },
        "NewsGroupDataset.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cache": [
                    "bool"
                ],
                "transform": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/nlp/classification/model.py": {
        "TextClassifier.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedder": [],
                "output_layer": [],
                "dropout": [
                    "int"
                ]
            }
        },
        "TextClassifier.forward": {
            "name": "forward",
            "location": 55,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "target": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/nlp/classification/__init__.py": {},
    "flambe-master/flambe/nlp/fewshot/model.py": {
        "PrototypicalTextClassifier.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedder": [],
                "distance": [
                    "typing.Text"
                ],
                "detach_mean": [
                    "bool"
                ]
            }
        },
        "PrototypicalTextClassifier.compute_prototypes": {
            "name": "compute_prototypes",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "support": [],
                "label": []
            }
        },
        "PrototypicalTextClassifier.forward": {
            "name": "forward",
            "location": 83,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "query_label": [
                    "None"
                ],
                "support": [
                    "None"
                ],
                "support_label": [
                    "None"
                ],
                "prototypes": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/nlp/fewshot/__init__.py": {},
    "flambe-master/flambe/nlp/language_modeling/datasets.py": {
        "PTBDataset.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "split_by_line": [
                    "bool"
                ],
                "end_of_line_token": [
                    "typing.Text"
                ],
                "cache": [
                    "bool"
                ],
                "transform": [
                    "None"
                ]
            }
        },
        "PTBDataset._process": {
            "name": "_process",
            "location": 45,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Wiki103.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "split_by_line": [
                    "bool"
                ],
                "end_of_line_token": [
                    "typing.Text"
                ],
                "remove_headers": [
                    "bool"
                ],
                "cache": [
                    "bool"
                ],
                "transform": [
                    "None"
                ]
            }
        },
        "Wiki103._process": {
            "name": "_process",
            "location": 109,
            "return": [
                "list[tuple[str]]"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Enwiki8.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_eval_symbols": [
                    "int"
                ],
                "remove_end_of_line": [
                    "bool"
                ],
                "cache": [
                    "bool"
                ],
                "transform": [
                    "None"
                ]
            }
        },
        "Enwiki8._process": {
            "name": "_process",
            "location": 177,
            "return": [
                "tuple[list[tuple[str]]]"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        }
    },
    "flambe-master/flambe/nlp/language_modeling/fields.py": {
        "LMField.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LMField.process": {
            "name": "process",
            "location": 18,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "example": []
            }
        }
    },
    "flambe-master/flambe/nlp/language_modeling/model.py": {
        "LanguageModel.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedder": [],
                "output_layer": [],
                "dropout": [
                    "int"
                ],
                "pad_index": [
                    "int"
                ],
                "tie_weights": [
                    "bool"
                ],
                "tie_weight_attr": [
                    "typing.Text"
                ]
            }
        },
        "LanguageModel.forward": {
            "name": "forward",
            "location": 66,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "target": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/nlp/language_modeling/sampler.py": {
        "CorpusSampler.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "unroll_size": [
                    "int"
                ],
                "n_workers": [
                    "int"
                ],
                "pin_memory": [
                    "bool"
                ],
                "downsample": [
                    "None"
                ],
                "drop_last": [
                    "bool"
                ]
            }
        },
        "CorpusSampler.collate_fn": {
            "name": "collate_fn",
            "location": 59,
            "return": [
                "tuple"
            ],
            "arguments": {
                "data": []
            }
        },
        "CorpusSampler.sample": {
            "name": "sample",
            "location": 76,
            "return": [
                "typing.Generator[DataLoader]"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "n_epochs": [
                    "int"
                ]
            }
        },
        "CorpusSampler.length": {
            "name": "length",
            "location": 127,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/nlp/language_modeling/__init__.py": {},
    "flambe-master/flambe/nlp/transformers/field.py": {
        "PretrainedTransformerField.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias": [],
                "cache_dir": [
                    "None"
                ],
                "max_len_truncate": [
                    "int"
                ],
                "add_special_tokens": [
                    "bool"
                ]
            }
        },
        "PretrainedTransformerField.padding_idx": {
            "name": "padding_idx",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PretrainedTransformerField.vocab_size": {
            "name": "vocab_size",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PretrainedTransformerField.process": {
            "name": "process",
            "location": 69,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "example": []
            }
        }
    },
    "flambe-master/flambe/nlp/transformers/model.py": {
        "PretrainedTransformerEmbedder.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alias": [],
                "cache_dir": [
                    "None"
                ],
                "padding_idx": [
                    "None"
                ],
                "pool": [
                    "bool"
                ]
            }
        },
        "PretrainedTransformerEmbedder.forward": {
            "name": "forward",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "token_type_ids": [
                    "None"
                ],
                "attention_mask": [
                    "None"
                ],
                "position_ids": [
                    "None"
                ],
                "head_mask": [
                    "None"
                ]
            }
        },
        "PretrainedTransformerEmbedder.__getattr__": {
            "name": "__getattr__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "flambe-master/flambe/nlp/transformers/__init__.py": {},
    "flambe-master/flambe/nn/cnn.py": {
        "conv_block": {
            "name": "conv_block",
            "location": 11,
            "return": [],
            "arguments": {
                "conv_mod": [],
                "activation": [],
                "pooling": [],
                "dropout": [],
                "batch_norm": [
                    "None"
                ]
            }
        },
        "CNNEncoder.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_channels": [],
                "channels": [],
                "conv_dim": [
                    "int"
                ],
                "kernel_size": [],
                "activation": [
                    "None"
                ],
                "pooling": [
                    "None"
                ],
                "dropout": [
                    "int"
                ],
                "batch_norm": [
                    "bool"
                ],
                "stride": [
                    "int"
                ],
                "padding": [
                    "int"
                ]
            }
        },
        "CNNEncoder.forward": {
            "name": "forward",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/nn/embedding.py": {
        "Embeddings.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_embeddings": [],
                "embedding_dim": [],
                "padding_idx": [
                    "int"
                ],
                "max_norm": [
                    "None"
                ],
                "norm_type": [
                    "float"
                ],
                "scale_grad_by_freq": [
                    "bool"
                ],
                "sparse": [
                    "bool"
                ],
                "positional_encoding": [
                    "bool"
                ],
                "positional_learned": [
                    "bool"
                ],
                "positonal_max_length": [
                    "int"
                ]
            }
        },
        "Embeddings.from_pretrained": {
            "name": "from_pretrained",
            "location": 117,
            "return": [],
            "arguments": {
                "cls": [],
                "embeddings": [],
                "freeze": [
                    "bool"
                ],
                "padding_idx": [
                    "int"
                ],
                "max_norm": [
                    "None"
                ],
                "norm_type": [
                    "float"
                ],
                "scale_grad_by_freq": [
                    "bool"
                ],
                "sparse": [
                    "bool"
                ],
                "positional_encoding": [
                    "bool"
                ],
                "positional_learned": [
                    "bool"
                ],
                "positonal_max_length": [
                    "int"
                ],
                "positonal_embeddings": [
                    "None"
                ],
                "positonal_freeze": [
                    "bool"
                ]
            }
        },
        "Embeddings.forward": {
            "name": "forward",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Embedder.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding": [],
                "encoder": [],
                "pooling": [
                    "None"
                ],
                "embedding_dropout": [
                    "int"
                ],
                "padding_idx": [
                    "int"
                ],
                "return_mask": [
                    "bool"
                ]
            }
        },
        "Embedder.forward": {
            "name": "forward",
            "location": 287,
            "return": [
                "tuple[typing.Optional[bool]]"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/nn/mlp.py": {
        "MLPEncoder.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "output_size": [],
                "n_layers": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "output_activation": [
                    "None"
                ],
                "hidden_size": [
                    "None"
                ],
                "hidden_activation": [
                    "None"
                ]
            }
        },
        "MLPEncoder.forward": {
            "name": "forward",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/nn/module.py": {
        "Module.named_trainable_params": {
            "name": "named_trainable_params",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.trainable_params": {
            "name": "trainable_params",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.gradient_norm": {
            "name": "gradient_norm",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.parameter_norm": {
            "name": "parameter_norm",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Module.num_parameters": {
            "name": "num_parameters",
            "location": 82,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "trainable": [
                    "bool"
                ]
            }
        },
        "Module.clip_params": {
            "name": "clip_params",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threshold": []
            }
        },
        "Module.clip_gradient_norm": {
            "name": "clip_gradient_norm",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "threshold": []
            }
        }
    },
    "flambe-master/flambe/nn/mos.py": {
        "MixtureOfSoftmax.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "output_size": [],
                "k": [
                    "int"
                ],
                "take_log": [
                    "bool"
                ]
            }
        },
        "MixtureOfSoftmax.forward": {
            "name": "forward",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/nn/pooling.py": {
        "_default_padding_mask": {
            "name": "_default_padding_mask",
            "location": 11,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_sum_with_padding_mask": {
            "name": "_sum_with_padding_mask",
            "location": 29,
            "return": [],
            "arguments": {
                "data": [],
                "padding_mask": []
            }
        },
        "FirstPooling.forward": {
            "name": "forward",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "padding_mask": [
                    "None"
                ]
            }
        },
        "LastPooling.forward": {
            "name": "forward",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "padding_mask": [
                    "None"
                ]
            }
        },
        "SumPooling.forward": {
            "name": "forward",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "padding_mask": [
                    "None"
                ]
            }
        },
        "AvgPooling.forward": {
            "name": "forward",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "padding_mask": [
                    "None"
                ]
            }
        },
        "StructuredSelfAttentivePooling.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "attention_heads": [
                    "int"
                ],
                "attention_units": [
                    "tuple[int]"
                ],
                "output_activation": [
                    "None"
                ],
                "hidden_activation": [
                    "None"
                ],
                "is_biased": [
                    "bool"
                ],
                "input_dropout": [
                    "float"
                ],
                "attention_dropout": [
                    "float"
                ]
            }
        },
        "StructuredSelfAttentivePooling._compute_attention": {
            "name": "_compute_attention",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "mask": []
            }
        },
        "StructuredSelfAttentivePooling.forward": {
            "name": "forward",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "mask": [
                    "None"
                ]
            }
        },
        "GeneralizedPooling.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "attention_units": [
                    "tuple[int]"
                ],
                "output_activation": [
                    "None"
                ],
                "hidden_activation": [
                    "None"
                ],
                "is_biased": [
                    "bool"
                ],
                "input_dropout": [
                    "float"
                ],
                "attention_dropout": [
                    "float"
                ]
            }
        },
        "GeneralizedPooling.forward": {
            "name": "forward",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "mask": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/nn/rnn.py": {
        "RNNEncoder.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": [],
                "n_layers": [
                    "int"
                ],
                "rnn_type": [
                    "typing.Text"
                ],
                "dropout": [
                    "int"
                ],
                "bidirectional": [
                    "bool"
                ],
                "layer_norm": [
                    "bool"
                ],
                "highway_bias": [
                    "int"
                ],
                "rescale": [
                    "bool"
                ],
                "enforce_sorted": [
                    "bool"
                ]
            }
        },
        "RNNEncoder.forward": {
            "name": "forward",
            "location": 117,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "state": [
                    "None"
                ],
                "padding_mask": [
                    "None"
                ]
            }
        },
        "PooledRNNEncoder.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "hidden_size": [],
                "n_layers": [
                    "int"
                ],
                "rnn_type": [
                    "typing.Text"
                ],
                "dropout": [
                    "int"
                ],
                "bidirectional": [
                    "bool"
                ],
                "layer_norm": [
                    "bool"
                ],
                "highway_bias": [
                    "int"
                ],
                "rescale": [
                    "bool"
                ],
                "pooling": [
                    "typing.Text"
                ]
            }
        },
        "PooledRNNEncoder.forward": {
            "name": "forward",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "state": [
                    "None"
                ],
                "padding_mask": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/nn/sequential.py": {
        "Sequential.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sequential.forward": {
            "name": "forward",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/nn/softmax.py": {
        "SoftmaxLayer.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "output_size": [],
                "mlp_layers": [
                    "int"
                ],
                "mlp_dropout": [
                    "float"
                ],
                "mlp_hidden_activation": [
                    "None"
                ],
                "take_log": [
                    "bool"
                ]
            }
        },
        "SoftmaxLayer.forward": {
            "name": "forward",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/nn/transformer.py": {
        "generate_square_subsequent_mask": {
            "name": "generate_square_subsequent_mask",
            "location": 536,
            "return": [],
            "arguments": {
                "self": [],
                "sz": []
            }
        },
        "Transformer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "d_model": [
                    "int"
                ],
                "nhead": [
                    "int"
                ],
                "num_encoder_layers": [
                    "int"
                ],
                "num_decoder_layers": [
                    "int"
                ],
                "dim_feedforward": [
                    "int"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "Transformer.forward": {
            "name": "forward",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "tgt": [],
                "src_mask": [
                    "None"
                ],
                "tgt_mask": [
                    "None"
                ],
                "memory_mask": [
                    "None"
                ],
                "src_key_padding_mask": [
                    "None"
                ],
                "tgt_key_padding_mask": [
                    "None"
                ],
                "memory_key_padding_mask": [
                    "None"
                ]
            }
        },
        "TransformerEncoder.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int"
                ],
                "d_model": [
                    "int"
                ],
                "nhead": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "dim_feedforward": [
                    "int"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "TransformerEncoder.forward": {
            "name": "forward",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "memory": [
                    "None"
                ],
                "mask": [
                    "None"
                ],
                "padding_mask": [
                    "None"
                ]
            }
        },
        "TransformerEncoder._reset_parameters": {
            "name": "_reset_parameters",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "d_model": [],
                "nhead": [],
                "num_layers": [],
                "dim_feedforward": [
                    "int"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "TransformerDecoder.forward": {
            "name": "forward",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "tgt": [],
                "memory": [],
                "tgt_mask": [
                    "None"
                ],
                "memory_mask": [
                    "None"
                ],
                "padding_mask": [
                    "None"
                ],
                "memory_key_padding_mask": [
                    "None"
                ]
            }
        },
        "TransformerDecoder._reset_parameters": {
            "name": "_reset_parameters",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoderLayer.__init__": {
            "name": "__init__",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_model": [],
                "nhead": [],
                "dim_feedforward": [
                    "int"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "TransformerEncoderLayer.forward": {
            "name": "forward",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "memory": [
                    "None"
                ],
                "src_mask": [
                    "None"
                ],
                "padding_mask": [
                    "None"
                ]
            }
        },
        "TransformerDecoderLayer.__init__": {
            "name": "__init__",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_model": [],
                "nhead": [],
                "dim_feedforward": [
                    "int"
                ],
                "dropout": [
                    "float"
                ]
            }
        },
        "TransformerDecoderLayer.forward": {
            "name": "forward",
            "location": 485,
            "return": [],
            "arguments": {
                "self": [],
                "tgt": [],
                "memory": [],
                "tgt_mask": [
                    "None"
                ],
                "memory_mask": [
                    "None"
                ],
                "padding_mask": [
                    "None"
                ],
                "memory_key_padding_mask": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/nn/transformer_sru.py": {
        "TransformerSRU.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int"
                ],
                "d_model": [
                    "int"
                ],
                "nhead": [
                    "int"
                ],
                "num_encoder_layers": [
                    "int"
                ],
                "num_decoder_layers": [
                    "int"
                ],
                "dim_feedforward": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "sru_dropout": [
                    "None"
                ],
                "bidrectional": [
                    "bool"
                ]
            }
        },
        "TransformerSRU.forward": {
            "name": "forward",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "tgt": [],
                "src_mask": [
                    "None"
                ],
                "tgt_mask": [
                    "None"
                ],
                "memory_mask": [
                    "None"
                ],
                "src_key_padding_mask": [
                    "None"
                ],
                "tgt_key_padding_mask": [
                    "None"
                ],
                "memory_key_padding_mask": [
                    "None"
                ]
            }
        },
        "TransformerSRUEncoder.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int"
                ],
                "d_model": [
                    "int"
                ],
                "nhead": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "dim_feedforward": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "sru_dropout": [
                    "None"
                ],
                "bidirectional": [
                    "bool"
                ]
            }
        },
        "TransformerSRUEncoder.forward": {
            "name": "forward",
            "location": 228,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "src": [],
                "state": [
                    "None"
                ],
                "mask": [
                    "None"
                ],
                "padding_mask": [
                    "None"
                ]
            }
        },
        "TransformerSRUEncoder._reset_parameters": {
            "name": "_reset_parameters",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerSRUDecoder.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int"
                ],
                "d_model": [
                    "int"
                ],
                "nhead": [
                    "int"
                ],
                "num_layers": [
                    "int"
                ],
                "dim_feedforward": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "sru_dropout": [
                    "None"
                ]
            }
        },
        "TransformerSRUDecoder.forward": {
            "name": "forward",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "tgt": [],
                "memory": [],
                "state": [
                    "None"
                ],
                "tgt_mask": [
                    "None"
                ],
                "memory_mask": [
                    "None"
                ],
                "padding_mask": [
                    "None"
                ],
                "memory_key_padding_mask": [
                    "None"
                ]
            }
        },
        "TransformerSRUDecoder._reset_parameters": {
            "name": "_reset_parameters",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerSRUEncoderLayer.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_model": [],
                "nhead": [],
                "dim_feedforward": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "sru_dropout": [
                    "None"
                ],
                "bidirectional": [
                    "bool"
                ]
            }
        },
        "TransformerSRUEncoderLayer.forward": {
            "name": "forward",
            "location": 442,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "src": [],
                "state": [
                    "None"
                ],
                "src_mask": [
                    "None"
                ],
                "padding_mask": [
                    "None"
                ]
            }
        },
        "TransformerSRUDecoderLayer.__init__": {
            "name": "__init__",
            "location": 493,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_model": [],
                "nhead": [],
                "dim_feedforward": [
                    "int"
                ],
                "dropout": [
                    "float"
                ],
                "sru_dropout": [
                    "None"
                ]
            }
        },
        "TransformerSRUDecoderLayer.forward": {
            "name": "forward",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "tgt": [],
                "memory": [],
                "state": [
                    "None"
                ],
                "tgt_mask": [
                    "None"
                ],
                "memory_mask": [
                    "None"
                ],
                "padding_mask": [
                    "None"
                ],
                "memory_key_padding_mask": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/nn/__init__.py": {},
    "flambe-master/flambe/nn/distance/cosine.py": {
        "CosineDistance.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eps": [
                    "float"
                ]
            }
        },
        "CosineDistance.forward": {
            "name": "forward",
            "location": 25,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "mat_1": [],
                "mat_2": []
            }
        },
        "CosineMean.forward": {
            "name": "forward",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/nn/distance/distance.py": {
        "DistanceModule.forward": {
            "name": "forward",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mat_1": [],
                "mat_2": []
            }
        },
        "MeanModule.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "detach_mean": [
                    "bool"
                ]
            }
        },
        "MeanModule.forward": {
            "name": "forward",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/nn/distance/euclidean.py": {
        "EuclideanDistance.forward": {
            "name": "forward",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "mat_1": [],
                "mat_2": []
            }
        },
        "EuclideanMean.forward": {
            "name": "forward",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/nn/distance/hyperbolic.py": {
        "arccosh": {
            "name": "arccosh",
            "location": 11,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "mdot": {
            "name": "mdot",
            "location": 19,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "dist": {
            "name": "dist",
            "location": 26,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "project": {
            "name": "project",
            "location": 31,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "log_map": {
            "name": "log_map",
            "location": 36,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "norm": {
            "name": "norm",
            "location": 42,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "exp_map": {
            "name": "exp_map",
            "location": 48,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "loss": {
            "name": "loss",
            "location": 54,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "HyperbolicDistance.forward": {
            "name": "forward",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "mat_1": [],
                "mat_2": []
            }
        },
        "HyperbolicMean.forward": {
            "name": "forward",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/nn/distance/__init__.py": {
        "get_distance_module": {
            "name": "get_distance_module",
            "location": 9,
            "return": [
                "HyperbolicDistance",
                "CosineDistance",
                "EuclideanDistance"
            ],
            "arguments": {
                "metric": []
            }
        },
        "get_mean_module": {
            "name": "get_mean_module",
            "location": 45,
            "return": [
                "HyperbolicMean",
                "CosineMean",
                "EuclideanMean"
            ],
            "arguments": {
                "metric": []
            }
        }
    },
    "flambe-master/flambe/optim/linear.py": {
        "WarmupLinearScheduler.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": [],
                "warmup": [],
                "n_steps": []
            }
        },
        "WarmupLinearScheduler.lr_lambda": {
            "name": "lr_lambda",
            "location": 36,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "step": []
            }
        }
    },
    "flambe-master/flambe/optim/noam.py": {
        "NoamScheduler.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": [],
                "warmup": [],
                "d_model": []
            }
        },
        "NoamScheduler.lr_lambda": {
            "name": "lr_lambda",
            "location": 35,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "step": []
            }
        }
    },
    "flambe-master/flambe/optim/radam.py": {
        "RAdam.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "lr": [
                    "float"
                ],
                "betas": [
                    "tuple[float]"
                ],
                "eps": [
                    "float"
                ],
                "weight_decay": [
                    "int"
                ],
                "degenerated_to_sgd": [
                    "bool"
                ]
            }
        },
        "RAdam.__setstate__": {
            "name": "__setstate__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "RAdam.state_dict": {
            "name": "state_dict",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RAdam.step": {
            "name": "step",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "closure": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/optim/scheduler.py": {
        "LRScheduler.state_dict": {
            "name": "state_dict",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LambdaLR.state_dict": {
            "name": "state_dict",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/optim/__init__.py": {},
    "flambe-master/flambe/runnable/cluster_runnable.py": {
        "ClusterRunnable.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_provider": [
                    "None"
                ],
                "env": [
                    "None"
                ]
            }
        },
        "ClusterRunnable.setup": {
            "name": "setup",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [],
                "extensions": [],
                "force": []
            }
        },
        "ClusterRunnable.setup_inject_env": {
            "name": "setup_inject_env",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster": [],
                "extensions": [],
                "force": []
            }
        },
        "ClusterRunnable.set_serializable_attr": {
            "name": "set_serializable_attr",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr": [],
                "value": []
            }
        }
    },
    "flambe-master/flambe/runnable/context.py": {
        "SafeExecutionContext.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "yaml_file": []
            }
        },
        "SafeExecutionContext.__enter__": {
            "name": "__enter__",
            "location": 40,
            "return": [
                "SafeExecutionContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "SafeExecutionContext.__exit__": {
            "name": "__exit__",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "tb": []
            }
        },
        "SafeExecutionContext.preprocess": {
            "name": "preprocess",
            "location": 74,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "secrets": [
                    "None"
                ],
                "download_ext": [
                    "bool"
                ],
                "install_ext": [
                    "bool"
                ],
                "import_ext": [
                    "bool"
                ],
                "check_tags": [
                    "bool"
                ]
            }
        },
        "SafeExecutionContext.first_parse": {
            "name": "first_parse",
            "location": 148,
            "return": [
                "tuple[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SafeExecutionContext.check_tags": {
            "name": "check_tags",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "SafeExecutionContext.compile_runnable": {
            "name": "compile_runnable",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        }
    },
    "flambe-master/flambe/runnable/environment.py": {
        "RemoteEnvironment.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "orchestrator_ip": [],
                "factories_ips": [],
                "user": [],
                "local_user": [],
                "public_orchestrator_ip": [
                    "None"
                ],
                "public_factories_ips": [
                    "None"
                ]
            }
        },
        "RemoteEnvironment.to_yaml": {
            "name": "to_yaml",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "RemoteEnvironment.from_yaml": {
            "name": "from_yaml",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        }
    },
    "flambe-master/flambe/runnable/error.py": {
        "ProtocolError.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ProtocolError.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkError.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_id": [],
                "target_block_id": []
            }
        },
        "SearchComponentError.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_id": []
            }
        }
    },
    "flambe-master/flambe/runnable/runnable.py": {
        "Runnable.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_provider": [
                    "None"
                ]
            }
        },
        "Runnable.inject_content": {
            "name": "inject_content",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "Runnable.inject_secrets": {
            "name": "inject_secrets",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "secrets": []
            }
        },
        "Runnable.inject_extensions": {
            "name": "inject_extensions",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extensions": []
            }
        },
        "Runnable.run": {
            "name": "run",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Runnable.parse": {
            "name": "parse",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/flambe/runnable/utils.py": {
        "_contains_path": {
            "name": "_contains_path",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "nested_dict": []
            }
        },
        "is_dev_mode": {
            "name": "is_dev_mode",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_flambe_repo_location": {
            "name": "get_flambe_repo_location",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "get_commit_hash": {
            "name": "get_commit_hash",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "rsync_hosts": {
            "name": "rsync_hosts",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "orch_ip": [],
                "factories_ips": [],
                "user": [],
                "folder": [],
                "key": [],
                "exclude": []
            }
        }
    },
    "flambe-master/flambe/runnable/__init__.py": {},
    "flambe-master/flambe/runner/report_site_run.py": {
        "launch_tensorboard": {
            "name": "launch_tensorboard",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "tracking_address": []
            }
        }
    },
    "flambe-master/flambe/runner/run.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "flambe-master/flambe/runner/utils.py": {
        "get_files": {
            "name": "get_files",
            "location": 15,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "get_size_MB": {
            "name": "get_size_MB",
            "location": 48,
            "return": [
                "float"
            ],
            "arguments": {
                "path": []
            }
        },
        "check_system_reqs": {
            "name": "check_system_reqs",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_files._wrapped": {
            "name": "_wrapped",
            "location": 39,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        }
    },
    "flambe-master/flambe/runner/__init__.py": {},
    "flambe-master/flambe/sampler/base.py": {
        "_bfs": {
            "name": "_bfs",
            "location": 17,
            "return": [
                "tuple[set[tuple[typing.Union[list,int,tuple]]]]"
            ],
            "arguments": {
                "obs": [],
                "obs_idx": []
            }
        },
        "_batch_from_nested_col": {
            "name": "_batch_from_nested_col",
            "location": 59,
            "return": [],
            "arguments": {
                "col": [],
                "pad": []
            }
        },
        "collate_fn": {
            "name": "collate_fn",
            "location": 126,
            "return": [
                "tuple"
            ],
            "arguments": {
                "data": [],
                "pad": []
            }
        },
        "BaseSampler.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int"
                ],
                "shuffle": [
                    "bool"
                ],
                "pad_index": [
                    "int"
                ],
                "n_workers": [
                    "int"
                ],
                "pin_memory": [
                    "bool"
                ],
                "seed": [
                    "None"
                ],
                "downsample": [],
                "downsample_max_samples": [
                    "None"
                ],
                "downsample_seed": [
                    "None"
                ],
                "drop_last": [
                    "bool"
                ]
            }
        },
        "BaseSampler.sample": {
            "name": "sample",
            "location": 257,
            "return": [
                "typing.Generator[DataLoader]"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "n_epochs": [
                    "int"
                ]
            }
        },
        "BaseSampler.length": {
            "name": "length",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/sampler/episodic.py": {
        "EpisodicSampler.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_support": [],
                "n_query": [],
                "n_episodes": [],
                "n_classes": [
                    "None"
                ],
                "pad_index": [
                    "int"
                ],
                "balance_query": [
                    "bool"
                ]
            }
        },
        "EpisodicSampler.sample": {
            "name": "sample",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "n_epochs": [
                    "int"
                ]
            }
        },
        "EpisodicSampler.length": {
            "name": "length",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/sampler/sampler.py": {
        "Sampler.sample": {
            "name": "sample",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "n_epochs": [
                    "int"
                ]
            }
        },
        "Sampler.length": {
            "name": "length",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/sampler/__init__.py": {},
    "flambe-master/flambe/tokenizer/char.py": {
        "CharTokenizer.tokenize": {
            "name": "tokenize",
            "location": 9,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "example": []
            }
        }
    },
    "flambe-master/flambe/tokenizer/label.py": {
        "LabelTokenizer.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "multilabel_sep": [
                    "None"
                ]
            }
        },
        "LabelTokenizer.tokenize": {
            "name": "tokenize",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "example": []
            }
        }
    },
    "flambe-master/flambe/tokenizer/tokenizer.py": {
        "Tokenizer.tokenize": {
            "name": "tokenize",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "example": []
            }
        },
        "Tokenizer.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "example": []
            }
        }
    },
    "flambe-master/flambe/tokenizer/word.py": {
        "WordTokenizer.tokenize": {
            "name": "tokenize",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "example": []
            }
        },
        "NLTKWordTokenizer.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NLTKWordTokenizer.tokenize": {
            "name": "tokenize",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "example": []
            }
        },
        "NGramsTokenizer.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ngrams": [
                    "int"
                ],
                "exclude_stopwords": [
                    "bool"
                ],
                "stop_words": [
                    "None"
                ]
            }
        },
        "NGramsTokenizer._tokenize": {
            "name": "_tokenize",
            "location": 109,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "example": [],
                "n": []
            }
        },
        "NGramsTokenizer.tokenize": {
            "name": "tokenize",
            "location": 115,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "example": []
            }
        }
    },
    "flambe-master/flambe/tokenizer/__init__.py": {},
    "flambe-master/flambe/utils/config.py": {
        "generate_config_from_template": {
            "name": "generate_config_from_template",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "template_path": [],
                "config_path": [],
                "remove_comments": [
                    "bool"
                ]
            }
        }
    },
    "flambe-master/flambe/utils/__init__.py": {},
    "flambe-master/flambe/vision/__init__.py": {},
    "flambe-master/flambe/vision/classification/datasets.py": {
        "get_dataset": {
            "name": "get_dataset",
            "location": 149,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "images": [],
                "labels": []
            }
        },
        "MNISTDataset.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_images": [
                    "None"
                ],
                "train_labels": [
                    "None"
                ],
                "test_images": [
                    "None"
                ],
                "test_labels": [
                    "None"
                ],
                "val_ratio": [
                    "float"
                ],
                "seed": [
                    "None"
                ]
            }
        },
        "MNISTDataset.from_path": {
            "name": "from_path",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "train_images_path": [],
                "train_labels_path": [],
                "test_images_path": [],
                "test_labels_path": [],
                "val_ratio": [
                    "float"
                ],
                "seed": [
                    "None"
                ]
            }
        },
        "MNISTDataset.train": {
            "name": "train",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MNISTDataset.val": {
            "name": "val",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MNISTDataset.test": {
            "name": "test",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MNISTDataset._parse_local_gzipped_idx": {
            "name": "_parse_local_gzipped_idx",
            "location": 121,
            "return": [],
            "arguments": {
                "cls": [],
                "path": []
            }
        },
        "MNISTDataset._parse_downloaded_idx": {
            "name": "_parse_downloaded_idx",
            "location": 127,
            "return": [],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "MNISTDataset._parse_idx": {
            "name": "_parse_idx",
            "location": 133,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        }
    },
    "flambe-master/flambe/vision/classification/model.py": {
        "ImageClassifier.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "encoder": [],
                "output_layer": []
            }
        },
        "ImageClassifier.forward": {
            "name": "forward",
            "location": 30,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "target": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/flambe/vision/classification/__init__.py": {},
    "flambe-master/scripts/deploy_documentation.py": {
        "get_flambe_bucket": {
            "name": "get_flambe_bucket",
            "location": 15,
            "return": [],
            "arguments": {
                "s3": []
            }
        },
        "get_mime_type": {
            "name": "get_mime_type",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "upload_documentation": {
            "name": "upload_documentation",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "bucket": [],
                "doc_html_dir": []
            }
        }
    },
    "flambe-master/tests/conftest.py": {
        "top_level": {
            "name": "top_level",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "flambe-master/tests/__init__.py": {},
    "flambe-master/tests/data/dummy_extensions/inference/setup.py": {},
    "flambe-master/tests/data/dummy_extensions/inference/flambe_inference/obj.py": {
        "DummyInferenceEngine.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "DummyInferenceEngine.run": {
            "name": "run",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/tests/data/dummy_extensions/inference/flambe_inference/__init__.py": {},
    "flambe-master/tests/data/dummy_extensions/runnable/setup.py": {},
    "flambe-master/tests/data/dummy_extensions/runnable/flambe_runnable/runnable.py": {
        "DummyRunnable.run": {
            "name": "run",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/tests/data/dummy_extensions/runnable/flambe_runnable/__init__.py": {},
    "flambe-master/tests/data/dummy_extensions/script/setup.py": {},
    "flambe-master/tests/data/dummy_extensions/script/flambe_script/train.py": {
        "my_script": {
            "name": "my_script",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "arg1": [],
                "arg2": [],
                "kwarg1": [],
                "kwarg2": []
            }
        }
    },
    "flambe-master/tests/data/dummy_extensions/script/flambe_script/__init__.py": {},
    "flambe-master/tests/integration/test_builder.py": {
        "module_equals": {
            "name": "module_equals",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "model1": [],
                "model2": []
            }
        },
        "test_exporter_builder": {
            "name": "test_exporter_builder",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "top_level": []
            }
        }
    },
    "flambe-master/tests/integration/test_examples.py": {
        "_reduce_iterations": {
            "name": "_reduce_iterations",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "d": []
            }
        },
        "_preprocess_experiment": {
            "name": "_preprocess_experiment",
            "location": 23,
            "return": [
                "list",
                "None"
            ],
            "arguments": {
                "fname": [],
                "save_path": []
            }
        },
        "run_experiments": {
            "name": "run_experiments",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "base": []
            }
        },
        "test_end2end_experiments": {
            "name": "test_end2end_experiments",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "top_level": []
            }
        },
        "test_examples_experiments": {
            "name": "test_examples_experiments",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/integration/test_resources_experiment.py": {
        "test_resources_config": {
            "name": "test_resources_config",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/__init__.py": {},
    "flambe-master/tests/unit/cluster/test_aws.py": {
        "ec2_mock": {
            "name": "ec2_mock",
            "location": 21,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "subnet": {
            "name": "subnet",
            "location": 35,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "sec_group": {
            "name": "sec_group",
            "location": 41,
            "return": [],
            "arguments": {
                "subnet": []
            }
        },
        "get_secrets": {
            "name": "get_secrets",
            "location": 47,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "get_cluster": {
            "name": "get_cluster",
            "location": 65,
            "return": [],
            "arguments": {
                "subnet": [],
                "sec_group": []
            }
        },
        "create_cluster": {
            "name": "create_cluster",
            "location": 88,
            "return": [],
            "arguments": {
                "get_cluster": []
            }
        },
        "test_missing_secrets": {
            "name": "test_missing_secrets",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "get_cluster": []
            }
        },
        "test_secrets": {
            "name": "test_secrets",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "get_cluster": [],
                "get_secrets": []
            }
        },
        "test_launch_orchestrator": {
            "name": "test_launch_orchestrator",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "subnet": [],
                "sec_group": [],
                "get_cluster": []
            }
        },
        "test_existing_orch": {
            "name": "test_existing_orch",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "get_cluster": []
            }
        },
        "test_existing_orch2": {
            "name": "test_existing_orch2",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "get_cluster": []
            }
        },
        "test_existing_multiple_orchs": {
            "name": "test_existing_multiple_orchs",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "get_cluster": []
            }
        },
        "test_launch_factories": {
            "name": "test_launch_factories",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_wait": [],
                "mock_contains_gpu": [],
                "subnet": [],
                "sec_group": [],
                "get_cluster": []
            }
        },
        "test_launch_gpu_factories": {
            "name": "test_launch_gpu_factories",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_wait": [],
                "mock_contains_gpu": [],
                "create_cluster": []
            }
        },
        "test_launch_cpu_factories": {
            "name": "test_launch_cpu_factories",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_wait": [],
                "mock_contains_gpu": [],
                "create_cluster": []
            }
        },
        "test_get_host_abstractions": {
            "name": "test_get_host_abstractions",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_public_host": [],
                "mock_private_host": [],
                "mock_wait": [],
                "mock_contains_gpu": [],
                "create_cluster": []
            }
        },
        "test_existing_factories": {
            "name": "test_existing_factories",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_wait": [],
                "mock_contains_gpu": [],
                "get_cluster": []
            }
        },
        "test_tags": {
            "name": "test_tags",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_wait": [],
                "mock_contains_gpu": [],
                "create_cluster": []
            }
        },
        "test_instances_lifecycle": {
            "name": "test_instances_lifecycle",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_wait": [],
                "mock_contains_gpu": [],
                "create_cluster": []
            }
        },
        "test_get_creation_name": {
            "name": "test_get_creation_name",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "get_cluster": []
            }
        },
        "test_get_creation_name_invalid_role": {
            "name": "test_get_creation_name_invalid_role",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "invalid_role": [],
                "get_cluster": []
            }
        },
        "get_secrets._get_secrets": {
            "name": "_get_secrets",
            "location": 50,
            "return": [],
            "arguments": {
                "secrets_content": [
                    "None"
                ]
            }
        },
        "get_cluster._get_cluster": {
            "name": "_get_cluster",
            "location": 67,
            "return": [
                "AWSCluster"
            ],
            "arguments": {}
        },
        "create_cluster._create_cluster": {
            "name": "_create_cluster",
            "location": 89,
            "return": [],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/cluster/test_cluster.py": {
        "get_instance": {
            "name": "get_instance",
            "location": 33,
            "return": [],
            "arguments": {
                "_class": [
                    "None"
                ]
            }
        },
        "get_cluster": {
            "name": "get_cluster",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_empty_cluster": {
            "name": "test_empty_cluster",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "get_cluster": []
            }
        },
        "test_empty_cluster_2": {
            "name": "test_empty_cluster_2",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "get_cluster": []
            }
        },
        "test_orch_home_path": {
            "name": "test_orch_home_path",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_home_path": [],
                "get_cluster": []
            }
        },
        "test_send_secrets": {
            "name": "test_send_secrets",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_home_path": [],
                "mock_rsync": [],
                "get_cluster": []
            }
        },
        "test_rsync_orch": {
            "name": "test_rsync_orch",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_home_path": [],
                "mock_rsync": [],
                "get_cluster": []
            }
        },
        "test_execute": {
            "name": "test_execute",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_home_path": [],
                "mock_rsync": [],
                "mock_launch": [],
                "get_cluster": []
            }
        },
        "test_get_max_resources": {
            "name": "test_get_max_resources",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "get_cluster": []
            }
        },
        "test_get_remote_env": {
            "name": "test_get_remote_env",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_get_home_path": [],
                "get_cluster": []
            }
        },
        "DummyRunnable.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ],
                "env": [
                    "None"
                ]
            }
        },
        "DummyRunnable.run": {
            "name": "run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyRunnable.setup": {
            "name": "setup",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyRunnable.to_yaml": {
            "name": "to_yaml",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "DummyRunnable.from_yaml": {
            "name": "from_yaml",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "get_cluster._get_cluster": {
            "name": "_get_cluster",
            "location": 52,
            "return": [
                "Cluster"
            ],
            "arguments": {
                "gpu_cluster": [
                    "bool"
                ],
                "fill": [
                    "bool"
                ]
            }
        }
    },
    "flambe-master/tests/unit/cluster/test_instance.py": {
        "get_instance": {
            "name": "get_instance",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "test_reachable_instance": {
            "name": "test_reachable_instance",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_is_up": [],
                "get_instance": []
            }
        },
        "test_unreachable_instance": {
            "name": "test_unreachable_instance",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_is_up": [],
                "get_instance": []
            }
        },
        "test_run_cmd": {
            "name": "test_run_cmd",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_ssh_cli": [],
                "get_instance": []
            }
        },
        "test_run_cmd2": {
            "name": "test_run_cmd2",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_ssh_cli": [],
                "get_instance": []
            }
        },
        "test_run_cmds": {
            "name": "test_run_cmds",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_ssh_cli": [],
                "get_instance": []
            }
        },
        "test_failure_run_cmds": {
            "name": "test_failure_run_cmds",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_ssh_cli": [],
                "get_instance": []
            }
        },
        "test_install_flambe": {
            "name": "test_install_flambe",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_run_cmd": [],
                "get_instance": []
            }
        },
        "test_install_flambe_gpu": {
            "name": "test_install_flambe_gpu",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_contains_gpu": [],
                "mock_run_cmd": [],
                "get_instance": []
            }
        },
        "test_install_flambe_debug": {
            "name": "test_install_flambe_debug",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_os_exists": [],
                "mock_run_cmd": [],
                "mock_rsync": [],
                "mock_get_home_path": [],
                "mock_flambe_loc": [],
                "get_instance": []
            }
        },
        "test_install_flambe_debug_2": {
            "name": "test_install_flambe_debug_2",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_os_exists": [],
                "mock_run_cmd": [],
                "mock_rsync": [],
                "mock_get_home_path": [],
                "mock_flambe_loc": [],
                "get_instance": []
            }
        },
        "test_install_flambe_custom_pypi": {
            "name": "test_install_flambe_custom_pypi",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_run_cmd": [],
                "get_instance": []
            }
        },
        "MockSSHClient.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [],
                "success_msg": [],
                "error_msg": []
            }
        },
        "MockSSHClient.exec_command": {
            "name": "exec_command",
            "location": 32,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "cmd": []
            }
        },
        "get_instance._get_instance": {
            "name": "_get_instance",
            "location": 46,
            "return": [],
            "arguments": {
                "_class": [
                    "None"
                ]
            }
        }
    },
    "flambe-master/tests/unit/compile/test_compilable.py": {
        "make_classes": {
            "name": "make_classes",
            "location": 10,
            "return": [
                "tuple[typing.Union[A,B]]"
            ],
            "arguments": {}
        },
        "make_classes_2": {
            "name": "make_classes_2",
            "location": 28,
            "return": [
                "tuple[typing.Union[A,B]]"
            ],
            "arguments": {}
        },
        "make_instances": {
            "name": "make_instances",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_component_basic": {
            "name": "test_component_basic",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_component_basic_top_level": {
            "name": "test_component_basic_top_level",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_component_schema_dict_access": {
            "name": "test_component_schema_dict_access",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_component_override": {
            "name": "test_component_override",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_component_dumping_with_defaults_and_comments": {
            "name": "test_component_dumping_with_defaults_and_comments",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes_2": []
            }
        },
        "test_component_dumping_factory": {
            "name": "test_component_dumping_factory",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "make_instances": []
            }
        },
        "test_component_dumping_made_in_code": {
            "name": "test_component_dumping_made_in_code",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes_2": []
            }
        },
        "test_component_anchors_compile_to_same_instance": {
            "name": "test_component_anchors_compile_to_same_instance",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes_2": []
            }
        },
        "test_component_linking": {
            "name": "test_component_linking",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_component_dynamic": {
            "name": "test_component_dynamic",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_state_dict_basic": {
            "name": "test_state_dict_basic",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_state_dict_roundtrip": {
            "name": "test_state_dict_roundtrip",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_state_dict_basic_pytorch": {
            "name": "test_state_dict_basic_pytorch",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_state_dict_roundtrip_original_source": {
            "name": "test_state_dict_roundtrip_original_source",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_state_dict_roundtrip_new_source": {
            "name": "test_state_dict_roundtrip_new_source",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_save_basic": {
            "name": "test_save_basic",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_basic": {
            "name": "test_load_basic",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_save_roundtrip": {
            "name": "test_load_save_roundtrip",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_instances._factory": {
            "name": "_factory",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "TestLinkParser.test_only_obj": {
            "name": "test_only_obj",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkParser.test_only_attr": {
            "name": "test_only_attr",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkParser.test_only_schematic": {
            "name": "test_only_schematic",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkParser.test_schematic_and_attr": {
            "name": "test_schematic_and_attr",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkParser.test_close_unopen_schematic": {
            "name": "test_close_unopen_schematic",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkParser.test_close_unopen_schematic_2": {
            "name": "test_close_unopen_schematic_2",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkParser.test_reopen_schematic": {
            "name": "test_reopen_schematic",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkParser.test_attr_without_dot": {
            "name": "test_attr_without_dot",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkParser.test_no_root_obj": {
            "name": "test_no_root_obj",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkCreator.test_only_obj": {
            "name": "test_only_obj",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkCreator.test_only_attr": {
            "name": "test_only_attr",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkCreator.test_only_schematic": {
            "name": "test_only_schematic",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinkCreator.test_schematic_and_attr": {
            "name": "test_schematic_and_attr",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSchema.test_contains": {
            "name": "test_contains",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_classes": []
            }
        },
        "make_classes.A.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "akw1": [
                    "int"
                ],
                "akw2": [
                    "None"
                ]
            }
        },
        "make_classes.B.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bkw1": [
                    "int"
                ],
                "bkw2": [
                    "typing.Text"
                ]
            }
        },
        "make_classes_2.A.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "akw1": [
                    "int"
                ],
                "akw2": [
                    "None"
                ]
            }
        },
        "make_classes_2.B.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bkw1": [
                    "int"
                ],
                "bkw2": [
                    "typing.Text"
                ],
                "bkw3": []
            }
        }
    },
    "flambe-master/tests/unit/compile/test_downloader.py": {
        "s3_mock": {
            "name": "s3_mock",
            "location": 15,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "test_s3_file": {
            "name": "test_s3_file",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s3_existing": {
            "name": "test_s3_existing",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_edge_cases": {
            "name": "test_edge_cases",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_local_file": {
            "name": "test_local_file",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s3_file_given_folder": {
            "name": "test_s3_file_given_folder",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_check_output": []
            }
        },
        "test_invalid_local_file": {
            "name": "test_invalid_local_file",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_protocol": {
            "name": "test_invalid_protocol",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s3_inexistent_path": {
            "name": "test_s3_inexistent_path",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_http_exists": {
            "name": "test_http_exists",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_http_exists_2": {
            "name": "test_http_exists_2",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_http_download": {
            "name": "test_http_download",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/compile/test_extensions.py": {
        "test_download_extensions": {
            "name": "test_download_extensions",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_installed_module": {
            "name": "test_is_installed_module",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/compile/test_registrable.py": {
        "make_classes": {
            "name": "make_classes",
            "location": 9,
            "return": [
                "tuple[typing.Union[A,B]]"
            ],
            "arguments": {}
        },
        "make_namespace_classes": {
            "name": "make_namespace_classes",
            "location": 53,
            "return": [
                "tuple[typing.Union[A,B]]"
            ],
            "arguments": {}
        },
        "make_aliased_classes": {
            "name": "make_aliased_classes",
            "location": 98,
            "return": [
                "tuple[typing.Union[A,B]]"
            ],
            "arguments": {}
        },
        "make_new_classes": {
            "name": "make_new_classes",
            "location": 145,
            "return": [
                "tuple[typing.Union[A,B]]"
            ],
            "arguments": {}
        },
        "test_registrable_load_basic": {
            "name": "test_registrable_load_basic",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_registrable_load_context": {
            "name": "test_registrable_load_context",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "make_namespace_classes": []
            }
        },
        "test_registrable_dump_basic": {
            "name": "test_registrable_dump_basic",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_registrable_roundtrip": {
            "name": "test_registrable_roundtrip",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_registrable_load_alias": {
            "name": "test_registrable_load_alias",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "make_aliased_classes": []
            }
        },
        "test_registrable_dump_alias": {
            "name": "test_registrable_dump_alias",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "make_aliased_classes": []
            }
        },
        "test_registrable_roundtrip_alias_default": {
            "name": "test_registrable_roundtrip_alias_default",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "make_aliased_classes": []
            }
        },
        "test_registrable_load_new_class": {
            "name": "test_registrable_load_new_class",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "make_new_classes": []
            }
        },
        "test_registrable_dump_new_class": {
            "name": "test_registrable_dump_new_class",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "make_new_classes": []
            }
        },
        "test_registrable_roundtrip_new_default": {
            "name": "test_registrable_roundtrip_new_default",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "make_new_classes": []
            }
        },
        "test_registrable_factory": {
            "name": "test_registrable_factory",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_registrable_factory_roundtrip": {
            "name": "test_registrable_factory_roundtrip",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_registrable_factory_roundtrip_alias": {
            "name": "test_registrable_factory_roundtrip_alias",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "make_aliased_classes": []
            }
        },
        "make_classes.A.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "akw1": [
                    "int"
                ],
                "akw2": [
                    "None"
                ]
            }
        },
        "make_classes.A.some_factory": {
            "name": "some_factory",
            "location": 19,
            "return": [],
            "arguments": {
                "cls": [],
                "akw1": [
                    "int"
                ],
                "akw2": [
                    "None"
                ]
            }
        },
        "make_classes.A.from_yaml": {
            "name": "from_yaml",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "make_classes.A.to_yaml": {
            "name": "to_yaml",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "make_classes.B.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bkw1": [
                    "int"
                ],
                "bkw2": [
                    "typing.Text"
                ]
            }
        },
        "make_classes.B.from_yaml": {
            "name": "from_yaml",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "make_classes.B.to_yaml": {
            "name": "to_yaml",
            "location": 46,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "make_aliased_classes.A.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "akw1": [
                    "int"
                ],
                "akw2": [
                    "None"
                ]
            }
        },
        "make_aliased_classes.A.some_factory": {
            "name": "some_factory",
            "location": 109,
            "return": [],
            "arguments": {
                "cls": [],
                "akw1": [
                    "int"
                ],
                "akw2": [
                    "None"
                ]
            }
        },
        "make_aliased_classes.A.from_yaml": {
            "name": "from_yaml",
            "location": 113,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "make_aliased_classes.A.to_yaml": {
            "name": "to_yaml",
            "location": 121,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "make_aliased_classes.B.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bkw1": [
                    "int"
                ],
                "bkw2": [
                    "typing.Text"
                ]
            }
        },
        "make_aliased_classes.B.from_yaml": {
            "name": "from_yaml",
            "location": 133,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "make_aliased_classes.B.to_yaml": {
            "name": "to_yaml",
            "location": 138,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "make_new_classes.A.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "akw1": [
                    "int"
                ],
                "akw2": [
                    "None"
                ]
            }
        },
        "make_new_classes.A.from_yaml": {
            "name": "from_yaml",
            "location": 154,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "make_new_classes.A.to_yaml": {
            "name": "to_yaml",
            "location": 159,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "make_new_classes.B.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bkw1": [
                    "int"
                ],
                "bkw2": [
                    "typing.Text"
                ]
            }
        },
        "make_new_classes.B.from_yaml": {
            "name": "from_yaml",
            "location": 169,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "make_new_classes.B.to_yaml": {
            "name": "to_yaml",
            "location": 174,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "make_namespace_classes.A.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "akw1": [
                    "int"
                ],
                "akw2": [
                    "None"
                ]
            }
        },
        "make_namespace_classes.A.some_factory": {
            "name": "some_factory",
            "location": 64,
            "return": [],
            "arguments": {
                "cls": [],
                "akw1": [
                    "int"
                ],
                "akw2": [
                    "None"
                ]
            }
        },
        "make_namespace_classes.A.from_yaml": {
            "name": "from_yaml",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "make_namespace_classes.A.to_yaml": {
            "name": "to_yaml",
            "location": 76,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        },
        "make_namespace_classes.B.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bkw1": [
                    "int"
                ],
                "bkw2": [
                    "typing.Text"
                ]
            }
        },
        "make_namespace_classes.B.from_yaml": {
            "name": "from_yaml",
            "location": 86,
            "return": [],
            "arguments": {
                "cls": [],
                "constructor": [],
                "node": [],
                "factory_name": []
            }
        },
        "make_namespace_classes.B.to_yaml": {
            "name": "to_yaml",
            "location": 91,
            "return": [],
            "arguments": {
                "cls": [],
                "representer": [],
                "node": [],
                "tag": []
            }
        }
    },
    "flambe-master/tests/unit/compile/test_serialization.py": {
        "list_files": {
            "name": "list_files",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "startpath": []
            }
        },
        "check_mapping_equivalence": {
            "name": "check_mapping_equivalence",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "x": [],
                "y": [],
                "exclude_config": [
                    "bool"
                ]
            }
        },
        "make_classes_2": {
            "name": "make_classes_2",
            "location": 76,
            "return": [
                "tuple[typing.Union[A,B]]"
            ],
            "arguments": {}
        },
        "create_factory": {
            "name": "create_factory",
            "location": 197,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "basic_object": {
            "name": "basic_object",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "nested_object": {
            "name": "nested_object",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "basic_object_with_state": {
            "name": "basic_object_with_state",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "alternating_nn_module_with_state": {
            "name": "alternating_nn_module_with_state",
            "location": 233,
            "return": [],
            "arguments": {}
        },
        "schema_builder": {
            "name": "schema_builder",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "complex_builder": {
            "name": "complex_builder",
            "location": 253,
            "return": [
                "ComposableTorchStateful"
            ],
            "arguments": {
                "from_config": [],
                "schema": [
                    "bool"
                ],
                "x": [
                    "int"
                ]
            }
        },
        "complex_builder_nontorch_root": {
            "name": "complex_builder_nontorch_root",
            "location": 293,
            "return": [
                "ComposableContainer"
            ],
            "arguments": {
                "from_config": [],
                "schema": [
                    "bool"
                ],
                "x": [
                    "int"
                ]
            }
        },
        "complex_multi_layered": {
            "name": "complex_multi_layered",
            "location": 337,
            "return": [],
            "arguments": {}
        },
        "complex_multi_layered_nontorch_root": {
            "name": "complex_multi_layered_nontorch_root",
            "location": 342,
            "return": [],
            "arguments": {}
        },
        "schema": {
            "name": "schema",
            "location": 347,
            "return": [],
            "arguments": {}
        },
        "Composite.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasicStateful.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "BasicStatefulTwo.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "IntermediateTorch.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntermediateStatefulTorch.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "IntermediateTorchOnly.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": []
            }
        },
        "RootTorch.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ComposableTorchStateful.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "ComposableTorchStatefulPrime.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "ComposableTorchStatefulPrime._state": {
            "name": "_state",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "state_dict": [],
                "prefix": [],
                "local_metadata": []
            }
        },
        "ComposableTorchStatefulPrime._load_state": {
            "name": "_load_state",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state_dict": [],
                "prefix": [],
                "local_metadata": [],
                "strict": [],
                "missing_keys": [],
                "unexpected_keys": [],
                "error_msgs": []
            }
        },
        "ComposableTorchStatefulTorchOnlyChild.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "c": []
            }
        },
        "ComposableContainer.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Org.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [],
                "extra": []
            }
        },
        "create_factory._factory": {
            "name": "_factory",
            "location": 198,
            "return": [],
            "arguments": {
                "from_config": []
            }
        },
        "basic_object_with_state._factory": {
            "name": "_factory",
            "location": 221,
            "return": [],
            "arguments": {
                "from_config": [],
                "x": []
            }
        },
        "alternating_nn_module_with_state._factory": {
            "name": "_factory",
            "location": 234,
            "return": [],
            "arguments": {
                "from_config": [],
                "x": []
            }
        },
        "TestHelpers.test_extract_prefix": {
            "name": "test_extract_prefix",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestState.test_state_returns_not_None": {
            "name": "test_state_returns_not_None",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basic_object": []
            }
        },
        "TestState.test_state_metadata": {
            "name": "test_state_metadata",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basic_object": []
            }
        },
        "TestState.test_state_config": {
            "name": "test_state_config",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basic_object": []
            }
        },
        "TestState.test_state_nested_but_empty": {
            "name": "test_state_nested_but_empty",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nested_object": []
            }
        },
        "TestState.test_state_custom": {
            "name": "test_state_custom",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basic_object_with_state": []
            }
        },
        "TestState.test_state_pytorch_alternating_nested_with_modules": {
            "name": "test_state_pytorch_alternating_nested_with_modules",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alternating_nn_module_with_state": []
            }
        },
        "TestLoadState.test_load_state_empty": {
            "name": "test_load_state_empty",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadState.test_load_state_nested_empty": {
            "name": "test_load_state_nested_empty",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadState.test_load_state_custom_nested": {
            "name": "test_load_state_custom_nested",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadState.test_load_state_pytorch": {
            "name": "test_load_state_pytorch",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadState.test_load_state_pytorch_alternating_nested": {
            "name": "test_load_state_pytorch_alternating_nested",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoadState.test_state_complex_multilayered_nontorch_root": {
            "name": "test_state_complex_multilayered_nontorch_root",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "complex_multi_layered_nontorch_root": []
            }
        },
        "TestLoadState.test_custom_attrs_load": {
            "name": "test_custom_attrs_load",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "complex_multi_layered": []
            }
        },
        "TestClassSave.test_class_save": {
            "name": "test_class_save",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClassLoad.test_class_load": {
            "name": "test_class_load",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModuleSave.test_save_single_object": {
            "name": "test_save_single_object",
            "location": 498,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basic_object": []
            }
        },
        "TestModuleSave.test_save_nested_object": {
            "name": "test_save_nested_object",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nested_object": []
            }
        },
        "TestModuleSave.test_save_pytorch_nested_alternating": {
            "name": "test_save_pytorch_nested_alternating",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alternating_nn_module_with_state": []
            }
        },
        "TestModuleLoad.test_load_directory_single_file": {
            "name": "test_load_directory_single_file",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basic_object": []
            }
        },
        "TestModuleLoad.test_load_nested_directory": {
            "name": "test_load_nested_directory",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nested_object": []
            }
        },
        "TestModuleLoad.test_load_pytorch_alternating": {
            "name": "test_load_pytorch_alternating",
            "location": 516,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alternating_nn_module_with_state": []
            }
        },
        "TestSerializationIntegration.test_state_and_load_roundtrip_single_object": {
            "name": "test_state_and_load_roundtrip_single_object",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basic_object": []
            }
        },
        "TestSerializationIntegration.test_state_and_load_roundtrip_pytorch_alternating": {
            "name": "test_state_and_load_roundtrip_pytorch_alternating",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alternating_nn_module_with_state": []
            }
        },
        "TestSerializationIntegration.test_save_to_file_and_load_from_file_roundtrip": {
            "name": "test_save_to_file_and_load_from_file_roundtrip",
            "location": 551,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basic_object": []
            }
        },
        "TestSerializationIntegration.test_save_to_file_and_load_from_file_roundtrip_pytorch": {
            "name": "test_save_to_file_and_load_from_file_roundtrip_pytorch",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alternating_nn_module_with_state": []
            }
        },
        "TestSerializationIntegration.test_save_to_file_and_load_from_file_roundtrip_complex": {
            "name": "test_save_to_file_and_load_from_file_roundtrip_complex",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "complex_multi_layered": []
            }
        },
        "TestSerializationIntegration.test_save_to_file_and_load_from_file_roundtrip_complex_nontorch_root": {
            "name": "test_save_to_file_and_load_from_file_roundtrip_complex_nontorch_root",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "complex_multi_layered_nontorch_root": [],
                "pickle_only": [],
                "compress_save_file": []
            }
        },
        "TestSerializationIntegration.test_module_save_and_load_roundtrip": {
            "name": "test_module_save_and_load_roundtrip",
            "location": 640,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basic_object": [],
                "pickle_only": [],
                "compress_save_file": []
            }
        },
        "TestSerializationIntegration.test_module_save_requirements_file": {
            "name": "test_module_save_requirements_file",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_freeze": [],
                "compress_save_file": [],
                "basic_object": []
            }
        },
        "TestSerializationIntegration.test_module_save_and_load_roundtrip_pytorch": {
            "name": "test_module_save_and_load_roundtrip_pytorch",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alternating_nn_module_with_state": [],
                "pickle_only": [],
                "compress_save_file": []
            }
        },
        "TestSerializationIntegration.test_module_save_and_load_roundtrip_pytorch_only_bridge": {
            "name": "test_module_save_and_load_roundtrip_pytorch_only_bridge",
            "location": 693,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerializationIntegration.test_module_save_and_load_single_instance_appears_twice": {
            "name": "test_module_save_and_load_single_instance_appears_twice",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "make_classes_2": []
            }
        },
        "TestSerializationExtensions.test_save_to_file_and_load_from_file_with_extensions": {
            "name": "test_save_to_file_and_load_from_file_with_extensions",
            "location": 774,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_add_extensions": [],
                "mock_import_module": [],
                "mock_installed_module": [],
                "compress_save_file": [],
                "pickle_only": [],
                "schema": []
            }
        },
        "TestSerializationExtensions.test_add_extensions_metadata": {
            "name": "test_add_extensions_metadata",
            "location": 811,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "TestSerializationExtensions.test_add_extensions_metadata_2": {
            "name": "test_add_extensions_metadata_2",
            "location": 821,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerializationExtensions.test_add_extensions_metadata_3": {
            "name": "test_add_extensions_metadata_3",
            "location": 854,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "complex_multi_layered_nontorch_root": []
            }
        },
        "make_classes_2.A.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "akw1": [],
                "akw2": []
            }
        },
        "make_classes_2.B.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bkw1": [],
                "bkw2": [],
                "bkw3": []
            }
        },
        "make_classes_2.C.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "one": [],
                "two": []
            }
        },
        "TestSerializationExtensions.test_add_extensions_metadata_3.helper": {
            "name": "helper",
            "location": 878,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "flambe-master/tests/unit/compile/test_utils.py": {
        "test_write_deps": {
            "name": "test_write_deps",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_write_deps_default": {
            "name": "test_write_deps_default",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_deps": []
            }
        }
    },
    "flambe-master/tests/unit/compile/__init__.py": {},
    "flambe-master/tests/unit/dataset/test_tabular.py": {
        "train_dataset": {
            "name": "train_dataset",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "train_dataset_no_header": {
            "name": "train_dataset_no_header",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "train_dataset_reversed": {
            "name": "train_dataset_reversed",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "full_dataset": {
            "name": "full_dataset",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "dir_dataset": {
            "name": "dir_dataset",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "autogen_dataset": {
            "name": "autogen_dataset",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "autogen_dataset_with_test": {
            "name": "autogen_dataset_with_test",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "autogen_dataset_dir": {
            "name": "autogen_dataset_dir",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "autogen_dataset_dir_with_test": {
            "name": "autogen_dataset_dir_with_test",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "autogen_dataset_ratios": {
            "name": "autogen_dataset_ratios",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "autogen_dataset_ratios_with_test": {
            "name": "autogen_dataset_ratios_with_test",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "autogen_dataset_dir_ratios": {
            "name": "autogen_dataset_dir_ratios",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "autogen_dataset_dir_ratios_with_test": {
            "name": "autogen_dataset_dir_ratios_with_test",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_valid_dataset": {
            "name": "test_valid_dataset",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_dataset": {
            "name": "test_invalid_dataset",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_dataset2": {
            "name": "test_invalid_dataset2",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_incomplete_dataset": {
            "name": "test_incomplete_dataset",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cache_dataset": {
            "name": "test_cache_dataset",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_column_attr": {
            "name": "test_column_attr",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "train_dataset": []
            }
        },
        "test_column_attr2": {
            "name": "test_column_attr2",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "train_dataset_no_header": []
            }
        },
        "test_named_columns": {
            "name": "test_named_columns",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_columns": {
            "name": "test_invalid_columns",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_from_file": {
            "name": "test_dataset_from_file",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "train_dataset": []
            }
        },
        "test_dataset_from_file_reversed": {
            "name": "test_dataset_from_file_reversed",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "train_dataset_reversed": []
            }
        },
        "test_full_dataset_from_file": {
            "name": "test_full_dataset_from_file",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "full_dataset": []
            }
        },
        "test_dataset_from_dir": {
            "name": "test_dataset_from_dir",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "dir_dataset": []
            }
        },
        "test_dataset_autogen": {
            "name": "test_dataset_autogen",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "autogen_dataset": []
            }
        },
        "test_dataset_autogen_with_test": {
            "name": "test_dataset_autogen_with_test",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "autogen_dataset_with_test": []
            }
        },
        "test_dataset_autogen_ratios": {
            "name": "test_dataset_autogen_ratios",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "autogen_dataset_ratios": []
            }
        },
        "test_dataset_autogen_ratios_with_test": {
            "name": "test_dataset_autogen_ratios_with_test",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "autogen_dataset_ratios_with_test": []
            }
        },
        "test_dataset_autogen_dir_val_test": {
            "name": "test_dataset_autogen_dir_val_test",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "autogen_dataset_dir": []
            }
        },
        "test_dataset_autogen_dir_with_test": {
            "name": "test_dataset_autogen_dir_with_test",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "autogen_dataset_dir_with_test": []
            }
        },
        "test_dataset_autogen_dir_val_test_ratios": {
            "name": "test_dataset_autogen_dir_val_test_ratios",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "autogen_dataset_dir_ratios": []
            }
        },
        "test_dataset_autogen_dir_val_test_ratios_with_test": {
            "name": "test_dataset_autogen_dir_val_test_ratios_with_test",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "autogen_dataset_dir_ratios_with_test": []
            }
        },
        "test_dataset_length": {
            "name": "test_dataset_length",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "train_dataset": [],
                "full_dataset": []
            }
        },
        "test_dataset_iter": {
            "name": "test_dataset_iter",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "train_dataset": []
            }
        },
        "test_dataset_setitem": {
            "name": "test_dataset_setitem",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "train_dataset": []
            }
        },
        "test_dataset_deltitem": {
            "name": "test_dataset_deltitem",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "train_dataset": []
            }
        },
        "test_dataset_transform": {
            "name": "test_dataset_transform",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_transform_2": {
            "name": "test_dataset_transform_2",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_transform_3": {
            "name": "test_dataset_transform_3",
            "location": 487,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_transform_4": {
            "name": "test_dataset_transform_4",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_transform_5": {
            "name": "test_dataset_transform_5",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_transform_6": {
            "name": "test_dataset_transform_6",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_transform_7": {
            "name": "test_dataset_transform_7",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_transform_8": {
            "name": "test_dataset_transform_8",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_transform_with_named_cols": {
            "name": "test_dataset_transform_with_named_cols",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_transform_with_invalid_named_cols": {
            "name": "test_dataset_transform_with_invalid_named_cols",
            "location": 634,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_transform_with_mixed_cols": {
            "name": "test_dataset_transform_with_mixed_cols",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_transform_mixed_multiple_named_cols": {
            "name": "test_dataset_transform_mixed_multiple_named_cols",
            "location": 671,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_dataset.check": {
            "name": "check",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [],
                "t": []
            }
        },
        "test_dataset_transform_6.DummyField.setup": {
            "name": "setup",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_dataset_transform_6.DummyField.process": {
            "name": "process",
            "location": 556,
            "return": [],
            "arguments": {
                "self": [],
                "ex1": [],
                "ex2": []
            }
        },
        "test_dataset_transform_7.DummyField.setup": {
            "name": "setup",
            "location": 576,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_dataset_transform_7.DummyField.process": {
            "name": "process",
            "location": 579,
            "return": [],
            "arguments": {
                "self": [],
                "ex1": [],
                "ex2": []
            }
        },
        "test_dataset_transform_mixed_multiple_named_cols.DummyField.setup": {
            "name": "setup",
            "location": 677,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_dataset_transform_mixed_multiple_named_cols.DummyField.process": {
            "name": "process",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "ex1": [],
                "ex2": []
            }
        }
    },
    "flambe-master/tests/unit/dataset/__init__.py": {},
    "flambe-master/tests/unit/experiment/test_experiment.py": {
        "get_experiment": {
            "name": "get_experiment",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "get_env": {
            "name": "get_env",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_get_user": {
            "name": "test_get_user",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "get_experiment": [],
                "get_env": []
            }
        },
        "get_experiment.wrapped": {
            "name": "wrapped",
            "location": 10,
            "return": [
                "Experiment"
            ],
            "arguments": {}
        },
        "get_env.wrapped": {
            "name": "wrapped",
            "location": 30,
            "return": [
                "Experiment"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/experiment/test_experiment_preprocess.py": {
        "context": {
            "name": "context",
            "location": 9,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "test_preprocessor_non_existing_file": {
            "name": "test_preprocessor_non_existing_file",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_preprocessor_empty": {
            "name": "test_preprocessor_empty",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_preprocessor_none_file": {
            "name": "test_preprocessor_none_file",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clean_imported_pkg": {
            "name": "clean_imported_pkg",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "added_paths": []
            }
        },
        "test_preprocessor_not_yaml": {
            "name": "test_preprocessor_not_yaml",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_wrong_yaml": {
            "name": "test_preprocessor_wrong_yaml",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_none_content": {
            "name": "test_preprocessor_none_content",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_name_none": {
            "name": "test_preprocessor_name_none",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_invalid_name": {
            "name": "test_preprocessor_invalid_name",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_invalid_name2": {
            "name": "test_preprocessor_invalid_name2",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_valid_resources": {
            "name": "test_preprocessor_valid_resources",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_valid_paths": {
            "name": "test_preprocessor_valid_paths",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_extensions_non_package": {
            "name": "test_preprocessor_extensions_non_package",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_extensions_invalid_mod_name": {
            "name": "test_preprocessor_extensions_invalid_mod_name",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_valid_extensions": {
            "name": "test_preprocessor_valid_extensions",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_custom_experiment": {
            "name": "test_preprocessor_custom_experiment",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_custom_experiment_invalid": {
            "name": "test_preprocessor_custom_experiment_invalid",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_unknown_tag": {
            "name": "test_preprocessor_unknown_tag",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "test_preprocessor_unknown_factory": {
            "name": "test_preprocessor_unknown_factory",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "context.ex": {
            "name": "ex",
            "location": 11,
            "return": [
                "SafeExecutionContext"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "flambe-master/tests/unit/experiment/test_options.py": {
        "test_g_tag": {
            "name": "test_g_tag",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s_tag": {
            "name": "test_s_tag",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s_tag_2": {
            "name": "test_s_tag_2",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s_tag_3": {
            "name": "test_s_tag_3",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s_tag_4": {
            "name": "test_s_tag_4",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_s_tag_incorrect_params": {
            "name": "test_s_tag_incorrect_params",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/experiment/test_utils.py": {
        "make_classes": {
            "name": "make_classes",
            "location": 9,
            "return": [
                "tuple[typing.Union[A,B]]"
            ],
            "arguments": {}
        },
        "test_divide_nested_grid_search_options_no_options": {
            "name": "test_divide_nested_grid_search_options_no_options",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_divide_nested_grid_search_options_non_nested_options": {
            "name": "test_divide_nested_grid_search_options_non_nested_options",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_divide_nested_grid_search_options_nested_schemas": {
            "name": "test_divide_nested_grid_search_options_nested_schemas",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_divide_nested_grid_search_options_nested_options": {
            "name": "test_divide_nested_grid_search_options_nested_options",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "make_classes": []
            }
        },
        "test_default_devices_cpu": {
            "name": "test_default_devices_cpu",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "cuda_available": [],
                "ray_initialized": [],
                "resources": [],
                "cpu_count": [],
                "gpu_count": [],
                "debug": [],
                "initialized": []
            }
        },
        "test_default_devices_gpu": {
            "name": "test_default_devices_gpu",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "cuda_available": [],
                "ray_initialized": [],
                "resources": [],
                "cpu_count": [],
                "gpu_count": [],
                "debug": [],
                "initialized": []
            }
        },
        "make_classes.A.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "akw1": [
                    "int"
                ],
                "akw2": [
                    "None"
                ]
            }
        },
        "make_classes.B.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bkw1": [
                    "int"
                ],
                "bkw2": [
                    "typing.Text"
                ]
            }
        }
    },
    "flambe-master/tests/unit/experiment/__init__.py": {},
    "flambe-master/tests/unit/field/test_label_field.py": {
        "test_tokenizer": {
            "name": "test_tokenizer",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tokenizer_multilabel": {
            "name": "test_tokenizer_multilabel",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_label_process": {
            "name": "test_label_process",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_label_process_multilabel": {
            "name": "test_label_process_multilabel",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_label_process_one_hot": {
            "name": "test_label_process_one_hot",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_label_process_multilabel_one_hot": {
            "name": "test_label_process_multilabel_one_hot",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_label_frequencies": {
            "name": "test_label_frequencies",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_label_frequencies_2": {
            "name": "test_label_frequencies_2",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_label_frequencies_3": {
            "name": "test_label_frequencies_3",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_label_process_one_hot_frequencies": {
            "name": "test_label_process_one_hot_frequencies",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_label_process_multilabel_one_hot_frequencies": {
            "name": "test_label_process_multilabel_one_hot_frequencies",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pass_bool_labels": {
            "name": "test_pass_bool_labels",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pass_labels": {
            "name": "test_pass_labels",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pass_labels_with_unkown_1": {
            "name": "test_pass_labels_with_unkown_1",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pass_labels_with_unkown_2": {
            "name": "test_pass_labels_with_unkown_2",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/field/test_text_field.py": {
        "test_word_tokenizer": {
            "name": "test_word_tokenizer",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nltk_word_tokenizer": {
            "name": "test_nltk_word_tokenizer",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ngram_tokenizer": {
            "name": "test_ngram_tokenizer",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ngram_tokenizer_equivalence": {
            "name": "test_ngram_tokenizer_equivalence",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ngram_tokenizer_equivalence_2": {
            "name": "test_ngram_tokenizer_equivalence_2",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ngram_tokenizer_stopwords": {
            "name": "test_ngram_tokenizer_stopwords",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_char_tokenizer": {
            "name": "test_char_tokenizer",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_vocab": {
            "name": "test_build_vocab",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_vocab_list": {
            "name": "test_build_vocab_list",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_vocab_dict": {
            "name": "test_build_vocab_dict",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_vocab_nested_list_in_dict": {
            "name": "test_build_vocab_nested_list_in_dict",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_vocab_nested_dict_in_list_in_dict": {
            "name": "test_build_vocab_nested_dict_in_list_in_dict",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bow_build_vocab": {
            "name": "test_bow_build_vocab",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_vocab_lower": {
            "name": "test_build_vocab_lower",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bow_build_vocab_lower": {
            "name": "test_bow_build_vocab_lower",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_vocab_empty": {
            "name": "test_build_vocab_empty",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_vocab_build_vocab_from_embeddings": {
            "name": "test_build_vocab_build_vocab_from_embeddings",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_vocab_decorators_specials": {
            "name": "test_build_vocab_decorators_specials",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_vocab_decorators_missing_specials": {
            "name": "test_build_vocab_decorators_missing_specials",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_embeddings": {
            "name": "test_load_embeddings",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_embeddings_with_extra_tokens": {
            "name": "test_load_embeddings_with_extra_tokens",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_embeddings_legacy": {
            "name": "test_load_embeddings_legacy",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_embeddings_empty_voc": {
            "name": "test_load_embeddings_empty_voc",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_process": {
            "name": "test_text_process",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bow_text_process": {
            "name": "test_bow_text_process",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bow_text_process_normalize": {
            "name": "test_bow_text_process_normalize",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bow_text_process_normalize_scale": {
            "name": "test_bow_text_process_normalize_scale",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bow_text_process_scale": {
            "name": "test_bow_text_process_scale",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_process_lower": {
            "name": "test_text_process_lower",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_process_unk": {
            "name": "test_text_process_unk",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "recursive_tensor_to_list": {
            "name": "recursive_tensor_to_list",
            "location": 414,
            "return": [
                "list"
            ],
            "arguments": {
                "data": []
            }
        },
        "test_setup_with_extra_tokens": {
            "name": "test_setup_with_extra_tokens",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_process_list": {
            "name": "test_text_process_list",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_process_dict": {
            "name": "test_text_process_dict",
            "location": 455,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_process_nested_list_in_dict": {
            "name": "test_text_process_nested_list_in_dict",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_text_process_nested_dict_in_list_in_dict": {
            "name": "test_text_process_nested_dict_in_list_in_dict",
            "location": 489,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/field/__init__.py": {},
    "flambe-master/tests/unit/learn/test_trainer.py": {
        "trainer": {
            "name": "trainer",
            "location": 36,
            "return": [
                "Trainer"
            ],
            "arguments": {}
        },
        "test_validation_metrics_property": {
            "name": "test_validation_metrics_property",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "trainer": []
            }
        },
        "DummyDataset.train": {
            "name": "train",
            "location": 19,
            "return": [
                "list[list[typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyDataset.val": {
            "name": "val",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyDataset.test": {
            "name": "test",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/tests/unit/metrics/test_dev.py": {
        "metric_test_case": {
            "name": "metric_test_case",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "predicted": [],
                "true": [],
                "metric": [],
                "expected": []
            }
        },
        "test_auc_full": {
            "name": "test_auc_full",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_auc_threshold": {
            "name": "test_auc_threshold",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_auc_empty": {
            "name": "test_auc_empty",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiclass_auc_full_one_hot": {
            "name": "test_multiclass_auc_full_one_hot",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiclass_auc_full_indexed": {
            "name": "test_multiclass_auc_full_indexed",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiclass_auc_empty": {
            "name": "test_multiclass_auc_empty",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_accuracy": {
            "name": "test_accuracy",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recall_at_1_index_preds": {
            "name": "test_recall_at_1_index_preds",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recall_at_1_class_preds": {
            "name": "test_recall_at_1_class_preds",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recall_at_k_index_preds": {
            "name": "test_recall_at_k_index_preds",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_recall_at_k_class_preds": {
            "name": "test_recall_at_k_class_preds",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aggregation_accuracy": {
            "name": "test_aggregation_accuracy",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aggregation_auc": {
            "name": "test_aggregation_auc",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_aggregation_perplexity": {
            "name": "test_aggregation_perplexity",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_perplexity": {
            "name": "test_perplexity",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bpc": {
            "name": "test_bpc",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_binary_precision": {
            "name": "test_binary_precision",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inverted_binary_precision": {
            "name": "test_inverted_binary_precision",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_binary_recall": {
            "name": "test_binary_recall",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inverted_binary_recall": {
            "name": "test_inverted_binary_recall",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "true_classes": [],
                "metric": [],
                "result": []
            }
        },
        "test_binary_accuracy": {
            "name": "test_binary_accuracy",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "true_classes": [],
                "metric": [],
                "result": []
            }
        },
        "test_multiple_dims": {
            "name": "test_multiple_dims",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_f1": {
            "name": "test_f1",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "true_classes": [],
                "metric": [],
                "result": []
            }
        },
        "test_global_aggregate": {
            "name": "test_global_aggregate",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/metrics/test_loss.py": {
        "test_cross_entropy_one_hot": {
            "name": "test_cross_entropy_one_hot",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nllloss_one_hot": {
            "name": "test_nllloss_one_hot",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/metrics/__init__.py": {},
    "flambe-master/tests/unit/model/test_logistic_regression.py": {
        "test_number_of_parameters": {
            "name": "test_number_of_parameters",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_forward_pass_with_target_param": {
            "name": "test_forward_pass_with_target_param",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_forward_pass_is_sigmoid": {
            "name": "test_forward_pass_is_sigmoid",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_parameters": {
            "name": "set_parameters",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "weight": [],
                "bias": []
            }
        }
    },
    "flambe-master/tests/unit/nlp/__init__.py": {},
    "flambe-master/tests/unit/nlp/classification/test_tc_datasets.py": {
        "test_dataset_sst": {
            "name": "test_dataset_sst",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_trec": {
            "name": "test_dataset_trec",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_news": {
            "name": "test_dataset_news",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/nlp/classification/__init__.py": {},
    "flambe-master/tests/unit/nlp/language_modeling/test_lm_datasets.py": {},
    "flambe-master/tests/unit/nlp/language_modeling/__init__.py": {},
    "flambe-master/tests/unit/nn/test_cnn.py": {
        "test_invalid_conv_dim": {
            "name": "test_invalid_conv_dim",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_conv_dim2": {
            "name": "test_invalid_conv_dim2",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_channels_kernels": {
            "name": "test_invalid_channels_kernels",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cnn_blocks_size": {
            "name": "test_cnn_blocks_size",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cnn_blocks_filters": {
            "name": "test_cnn_blocks_filters",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kernel_sizes": {
            "name": "test_kernel_sizes",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kernel_sizes2": {
            "name": "test_kernel_sizes2",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kernel_sizes3": {
            "name": "test_kernel_sizes3",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kernel_sizes4": {
            "name": "test_kernel_sizes4",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_kernel_sizes5": {
            "name": "test_kernel_sizes5",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_forward_passes": {
            "name": "test_forward_passes",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/nn/test_mlp.py": {
        "test_forward_pass_1_layer": {
            "name": "test_forward_pass_1_layer",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_forward_pass_multi_layers": {
            "name": "test_forward_pass_multi_layers",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/nn/test_pooling.py": {
        "test_last_pooling": {
            "name": "test_last_pooling",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "pooling_cls": [],
                "size": []
            }
        },
        "test_last_pooling_with_mask": {
            "name": "test_last_pooling_with_mask",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_first_pooling_with_mask": {
            "name": "test_first_pooling_with_mask",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sum_pooling_with_mask": {
            "name": "test_sum_pooling_with_mask",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_avg_pooling_with_mask": {
            "name": "test_avg_pooling_with_mask",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_avg_pooling": {
            "name": "test_avg_pooling",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sum_pooling": {
            "name": "test_sum_pooling",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_structured_self_attentive_pooling_shapes": {
            "name": "test_structured_self_attentive_pooling_shapes",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_structured_self_attentive_pooling_zeroes": {
            "name": "test_structured_self_attentive_pooling_zeroes",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_structured_self_attentive_pooling_ones": {
            "name": "test_structured_self_attentive_pooling_ones",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_vector_based_generalized_pooling_shapes": {
            "name": "test_vector_based_generalized_pooling_shapes",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_tensor": {
            "name": "build_tensor",
            "location": 167,
            "return": [],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/nn/test_rnn.py": {
        "test_invalid_type": {
            "name": "test_invalid_type",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "rnn_type": []
            }
        },
        "test_sru_kwargs": {
            "name": "test_sru_kwargs",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_sru_kwargs": {
            "name": "test_invalid_sru_kwargs",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_forward_pass": {
            "name": "test_forward_pass",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "rnn_type": []
            }
        },
        "test_transpose_on_forward_pass": {
            "name": "test_transpose_on_forward_pass",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "rnn_type": []
            }
        }
    },
    "flambe-master/tests/unit/optim/test_scheduler.py": {
        "test_warmup_linear": {
            "name": "test_warmup_linear",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_noam": {
            "name": "test_noam",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/remote/__init__.py": {},
    "flambe-master/tests/unit/runnable/test_runnable.py": {
        "runnable": {
            "name": "runnable",
            "location": 15,
            "return": [
                "DummyRunnable"
            ],
            "arguments": {}
        },
        "get_secrets": {
            "name": "get_secrets",
            "location": 24,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "test_valid_secrets": {
            "name": "test_valid_secrets",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "runnable": [],
                "get_secrets": []
            }
        },
        "test_invalid_secrets": {
            "name": "test_invalid_secrets",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "runnable": [],
                "get_secrets": []
            }
        },
        "test_invalid_secrets2": {
            "name": "test_invalid_secrets2",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "runnable": [],
                "get_secrets": []
            }
        },
        "test_no_secrets": {
            "name": "test_no_secrets",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "runnable": []
            }
        },
        "test_secrets": {
            "name": "test_secrets",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "runnable": [],
                "get_secrets": []
            }
        },
        "get_secrets._get_secrets": {
            "name": "_get_secrets",
            "location": 27,
            "return": [],
            "arguments": {
                "secrets_content": []
            }
        },
        "runnable.DummyRunnable.run": {
            "name": "run",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/tests/unit/runner/test_args.py": {
        "args": {
            "name": "args",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "runnable": {
            "name": "runnable",
            "location": 30,
            "return": [
                "DummyRunnable"
            ],
            "arguments": {}
        },
        "test_debug_remote": {
            "name": "test_debug_remote",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_runnable_args": {
            "name": "test_runnable_args",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_preprocess": [],
                "force": [],
                "debug": [],
                "runnable": [],
                "args": []
            }
        },
        "DummyRunnable.run": {
            "name": "run",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flambe-master/tests/unit/runner/test_utils.py": {
        "create_file": {
            "name": "create_file",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [],
                "size_MB": [
                    "int"
                ]
            }
        },
        "test_size_MB_file": {
            "name": "test_size_MB_file",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mbs": []
            }
        },
        "test_size_MB_folder": {
            "name": "test_size_MB_folder",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "mbs": []
            }
        },
        "test_get_files": {
            "name": "test_get_files",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_files_invalid": {
            "name": "test_get_files_invalid",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/sampler/test_base.py": {
        "test_compose_padded_batches_from_nested_seq": {
            "name": "test_compose_padded_batches_from_nested_seq",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_column_specific_pad_indexes": {
            "name": "test_column_specific_pad_indexes",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_incorrect_num_column_specific_pad_indexes_raises_error": {
            "name": "test_incorrect_num_column_specific_pad_indexes_raises_error",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flambe-master/tests/unit/sampler/__init__.py": {}
}
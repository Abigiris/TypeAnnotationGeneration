{
    "flask-logging-decorator-master/setup.py": {},
    "flask-logging-decorator-master/example/main.py": {
        "index": {
            "name": "index",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "foo": {
            "name": "foo",
            "location": 23,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "flask-logging-decorator-master/flask_logging_decorator/__init__.py": {
        "__get_trace_uuid": {
            "name": "__get_trace_uuid",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "trace": {
            "name": "trace",
            "location": 25,
            "return": [],
            "arguments": {
                "level": []
            }
        },
        "trace.outer": {
            "name": "outer",
            "location": 26,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "trace.outer.wrapper": {
            "name": "wrapper",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "flask-logging-decorator-master/flask_logging_decorator/tests/test_trace.py": {
        "fake_handler": {
            "name": "fake_handler",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "values": {
            "name": "values",
            "location": 18,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {}
        },
        "get_expected": {
            "name": "get_expected",
            "location": 23,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "post_expected": {
            "name": "post_expected",
            "location": 29,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "put_expected": {
            "name": "put_expected",
            "location": 35,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "get_expected_critical": {
            "name": "get_expected_critical",
            "location": 41,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "post_expected_critical": {
            "name": "post_expected_critical",
            "location": 47,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "put_expected_critical": {
            "name": "put_expected_critical",
            "location": 53,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {}
        },
        "test_trace": {
            "name": "test_trace",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "caplog": [],
                "method": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]",
                    "bytes"
                ],
                "get_expected": [
                    "list[str]",
                    "str"
                ],
                "post_expected": [
                    "list[str]",
                    "list[tuple[typing.Union[int,int]]]",
                    "list[]"
                ],
                "put_expected": [
                    "str",
                    "tuple[]"
                ],
                "is_json": [
                    "bool",
                    "typing.Callable[, ]",
                    "str"
                ],
                "values": [
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "app_log_level": [
                    "int",
                    "str",
                    "typing.Collection",
                    "typing.Callable[..., None]"
                ],
                "trace_log_level": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "flask-logging-decorator-master/flask_logging_decorator/tests/__init__.py": {}
}
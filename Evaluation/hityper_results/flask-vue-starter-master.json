{
    "flask-vue-starter-master/backend/app/app.py": {},
    "flask-vue-starter-master/backend/app/config.py": {},
    "flask-vue-starter-master/backend/app/extensions.py": {
        "init_app_extensions": {
            "name": "init_app_extensions",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "flask-vue-starter-master/backend/app/__init__.py": {},
    "flask-vue-starter-master/backend/app/core/cli.py": {
        "register_cli_handlers": {
            "name": "register_cli_handlers",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "register_cli_handlers.db_create_all": {
            "name": "db_create_all",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flask-vue-starter-master/backend/app/core/create_app.py": {
        "register_api": {
            "name": "register_api",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "register_api_error_handlers": {
            "name": "register_api_error_handlers",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "bool"
                ]
            }
        },
        "create_app": {
            "name": "create_app",
            "location": 51,
            "return": [
                "Flask"
            ],
            "arguments": {
                "config_name": [
                    "str"
                ]
            }
        },
        "register_api.hello": {
            "name": "hello",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "register_api_error_handlers.handle_error": {
            "name": "handle_error",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [],
                "req": [],
                "schema": [],
                "error_status_code": [],
                "error_headers": []
            }
        },
        "register_api_error_handlers.validateion_error": {
            "name": "validateion_error",
            "location": 43,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "error": []
            }
        }
    },
    "flask-vue-starter-master/backend/app/forum/api.py": {},
    "flask-vue-starter-master/backend/app/forum/models.py": {
        "Post.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-vue-starter-master/backend/app/forum/serializers.py": {},
    "flask-vue-starter-master/backend/app/user/api.py": {
        "users_get": {
            "name": "users_get",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "user_get": {
            "name": "user_get",
            "location": 22,
            "return": [
                "dict[str, typing.Any]",
                "dict[str, str]",
                "dict[, ]",
                "None"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "user_create": {
            "name": "user_create",
            "location": 32,
            "return": [
                "User"
            ],
            "arguments": {
                "user_data": [
                    "str",
                    "None"
                ]
            }
        },
        "user_update": {
            "name": "user_update",
            "location": 42,
            "return": [
                "str",
                "dict[, ]",
                "dict[str, str]",
                "list[str]"
            ],
            "arguments": {
                "user_data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "id": [
                    "str",
                    "int",
                    "dict[str, U]"
                ]
            }
        },
        "user_delete": {
            "name": "user_delete",
            "location": 58,
            "return": [
                "dict[str, typing.Any]",
                "dict[int, typing.Any]",
                "dict[str, str]",
                "None",
                "dict[, ]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        }
    },
    "flask-vue-starter-master/backend/app/user/models.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "None",
                    "str"
                ],
                "username": [
                    "None",
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ],
                "email": [
                    "None",
                    "int",
                    "str",
                    "list[int]",
                    "float"
                ]
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "flask-vue-starter-master/backend/app/user/serializers.py": {
        "validate_unique_field": {
            "name": "validate_unique_field",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None"
                ],
                "value": [
                    "str",
                    "None"
                ],
                "id": [
                    "None",
                    "int",
                    "str"
                ]
            }
        },
        "UserSchema.validate_unique_fields": {
            "name": "validate_unique_fields",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "partial": [
                    "bool",
                    "str",
                    "list[str]",
                    "list[dict[str, typing.Any]]",
                    "bytes"
                ],
                "many": [
                    "bool",
                    "str",
                    "list[str]",
                    "list[dict[str, typing.Any]]",
                    "bytes"
                ]
            }
        }
    },
    "flask-vue-starter-master/backend/app/utils/serializers.py": {
        "WrapDataSchema.wrap_with_envelope": {
            "name": "wrap_with_envelope",
            "location": 12,
            "return": [
                "dict[typing.Text, typing.Union[int,bytes,dict[, ]]]",
                "int",
                "bytes",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ],
                "many": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "WrapDataSchema.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wrap_data": [
                    "bool"
                ]
            }
        },
        "UUIDFormat.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "None",
                    "str",
                    "bool",
                    "float",
                    "typing.Callable[, ]"
                ]
            }
        },
        "UUIDFormat._format_error": {
            "name": "_format_error",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "list[]",
                    "str"
                ],
                "message": [
                    "int",
                    "list[]",
                    "str"
                ]
            }
        },
        "UUIDFormat.__call__": {
            "name": "__call__",
            "location": 53,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "flask-vue-starter-master/backend/app/utils/types.py": {},
    "flask-vue-starter-master/backend/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [],
                "revision": [],
                "directives": []
            }
        }
    },
    "flask-vue-starter-master/backend/migrations/versions/2a53d9419b3e_initial_migration.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "flask-vue-starter-master/backend/tests/conftest.py": {
        "database": {
            "name": "database",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 55,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "database": []
            }
        },
        "client": {
            "name": "client",
            "location": 64,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "_db": {
            "name": "_db",
            "location": 72,
            "return": [],
            "arguments": {
                "app": [
                    "Exception",
                    "typing.Callable[, ]"
                ]
            }
        },
        "user_factory": {
            "name": "user_factory",
            "location": 85,
            "return": [],
            "arguments": {
                "app": [
                    "bool"
                ],
                "db_session": [
                    "bool"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 98,
            "return": [],
            "arguments": {
                "user_factory": [
                    "str",
                    "list[]"
                ]
            }
        },
        "user_factory.factory": {
            "name": "factory",
            "location": 88,
            "return": [
                "User"
            ],
            "arguments": {
                "username": [],
                "email": []
            }
        }
    },
    "flask-vue-starter-master/backend/tests/test_users.py": {
        "test_api": {
            "name": "test_api",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_users": {
            "name": "test_users",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "user_factory": []
            }
        },
        "test_user_create": {
            "name": "test_user_create",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "dict[, ]",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "test_user_update": {
            "name": "test_user_update",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "user_factory": [
                    "int"
                ]
            }
        },
        "test_user_delete": {
            "name": "test_user_delete",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "user_factory": []
            }
        }
    },
    "flask-vue-starter-master/backend/tests/__init__.py": {},
    "flask-vue-starter-master/backend/tests/utils/equals.py": {
        "EqualsInteger.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "tuple[typing.Union[float,float]]",
                    "typing.Type"
                ]
            }
        },
        "EqualsString.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Hashable"
                ]
            }
        },
        "EqualsUUIDString.__eq__": {
            "name": "__eq__",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Mapping",
                    "Exception",
                    "typing.AbstractSet"
                ]
            }
        },
        "EqualsRegexp.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "regexp": [
                    "int",
                    "float"
                ]
            }
        },
        "EqualsRegexp.__eq__": {
            "name": "__eq__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "typing.Type",
                    "Exception"
                ]
            }
        },
        "EqualsDatetimeString.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date_format": [
                    "str",
                    "list[tuple[typing.Union[str,typing.Any]]]",
                    "int",
                    "None"
                ]
            }
        },
        "EqualsDatetimeString.__eq__": {
            "name": "__eq__",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "EqualsAnything.__eq__": {
            "name": "__eq__",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[str]",
                    "int",
                    "float",
                    "typing.AbstractSet"
                ]
            }
        },
        "EqualsPartialDict.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_dict": [
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "chain": [
                    "typing.Text"
                ]
            }
        },
        "EqualsPartialDict.__eq__": {
            "name": "__eq__",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "typing.AbstractSet",
                    "dict[, ]"
                ]
            }
        }
    }
}
{
    "frambozenapp-master/app/allpages.py": {},
    "frambozenapp-master/app/config.py": {},
    "frambozenapp-master/app/filex.py": {
        "FileExample.classLogo": {
            "name": "classLogo",
            "location": 32,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileExample.preSave": {
            "name": "preSave",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/foo.py": {
        "foos": {
            "name": "foos",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "foosTable": {
            "name": "foosTable",
            "location": 91,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "pag": [
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "foo": {
            "name": "foo",
            "location": 131,
            "return": [],
            "arguments": {
                "id": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "Foo.classLogo": {
            "name": "classLogo",
            "location": 61,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Foo.formWideErrorMessage": {
            "name": "formWideErrorMessage",
            "location": 64,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Foo.preSave": {
            "name": "preSave",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/front.py": {
        "front": {
            "name": "front",
            "location": 13,
            "return": [],
            "arguments": {}
        }
    },
    "frambozenapp-master/app/ht.py": {
        "errorBox": {
            "name": "errorBox",
            "location": 9,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "msg": [],
                "escapeForHtml": [
                    "bool"
                ]
            }
        },
        "warningBox": {
            "name": "warningBox",
            "location": 29,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "msg": [],
                "escapeForHtml": [
                    "bool"
                ]
            }
        },
        "goodMessageBox": {
            "name": "goodMessageBox",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "msg": [],
                "escapeForHtml": [
                    "bool"
                ]
            }
        },
        "boolH": {
            "name": "boolH",
            "location": 70,
            "return": [],
            "arguments": {
                "b": [],
                "yesText": [
                    "typing.Text"
                ],
                "noText": [
                    "typing.Text"
                ]
            }
        }
    },
    "frambozenapp-master/app/login.py": {
        "login": {
            "name": "login",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "users": {
            "name": "users",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "usersTable": {
            "name": "usersTable",
            "location": 103,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "yn": {
            "name": "yn",
            "location": 133,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "b": []
            }
        },
        "orNone": {
            "name": "orNone",
            "location": 139,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "user": {
            "name": "user",
            "location": 149,
            "return": [],
            "arguments": {
                "id": []
            }
        }
    },
    "frambozenapp-master/app/main.py": {
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "frambozenapp-master/app/models.py": {
        "createAdminSite": {
            "name": "createAdminSite",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Author.classLogo": {
            "name": "classLogo",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Author.myBooks": {
            "name": "myBooks",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Author.myBooksLinks": {
            "name": "myBooksLinks",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Book.classLogo": {
            "name": "classLogo",
            "location": 49,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "frambozenapp-master/app/permission.py": {
        "needUser": {
            "name": "needUser",
            "location": 21,
            "return": [],
            "arguments": {
                "fn": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "currentUserName": {
            "name": "currentUserName",
            "location": 37,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {}
        },
        "http403": {
            "name": "http403",
            "location": 51,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "msg": [
                    "typing.Text"
                ]
            }
        },
        "http404": {
            "name": "http404",
            "location": 63,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "e": [
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "needUser.viewWrapper": {
            "name": "viewWrapper",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "frambozenapp-master/app/tabexample.py": {
        "tabexTabLine": {
            "name": "tabexTabLine",
            "location": 25,
            "return": [],
            "arguments": {
                "tab": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "tabex": {
            "name": "tabex",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "tabId": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "frambozenapp-master/app/tabs.py": {
        "makeTabLine": {
            "name": "makeTabLine",
            "location": 16,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "tabTypesNames": [],
                "curTabType": [],
                "urlTemplate": [],
                "fillerH": [
                    "None"
                ]
            }
        }
    },
    "frambozenapp-master/app/templateglobal.py": {
        "rowcol": {
            "name": "rowcol",
            "location": 34,
            "return": [
                "str",
                "float",
                "list[int]",
                "set[int]",
                "int"
            ],
            "arguments": {
                "colSpec": [
                    "str"
                ]
            }
        },
        "col": {
            "name": "col",
            "location": 44,
            "return": [
                "str",
                "float",
                "list[int]",
                "set[int]",
                "int"
            ],
            "arguments": {
                "colSpec": [
                    "str"
                ]
            }
        },
        "endrow": {
            "name": "endrow",
            "location": 53,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "formSection": {
            "name": "formSection",
            "location": 67,
            "return": [
                "int",
                "typing.Counter",
                "dict[int, str]",
                "typing.Pattern"
            ],
            "arguments": {
                "t": [
                    "str",
                    "typing.Pattern",
                    "int",
                    "float"
                ]
            }
        },
        "helpPage": {
            "name": "helpPage",
            "location": 90,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "highlightPageIfCurrent": {
            "name": "highlightPageIfCurrent",
            "location": 97,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "testUrl": [
                    "bool",
                    "set[str]",
                    "dict[str, typing.Union[str,int]]",
                    "list[list[str]]"
                ]
            }
        },
        "highlightPageExact": {
            "name": "highlightPageExact",
            "location": 110,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "testUrl": [
                    "bool",
                    "set[str]",
                    "dict[str, typing.Union[str,int]]",
                    "list[list[str]]"
                ]
            }
        },
        "completeH": {
            "name": "completeH",
            "location": 124,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "b": [
                    "int",
                    "dict[tuple[typing.Union[int,...]], int]"
                ],
                "yesText": [
                    "typing.Text"
                ],
                "noText": [
                    "typing.Text"
                ]
            }
        },
        "yesNoH": {
            "name": "yesNoH",
            "location": 139,
            "return": [],
            "arguments": {
                "b": [
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "bool"
                ],
                "yesText": [
                    "typing.Text"
                ],
                "noText": [
                    "typing.Text"
                ]
            }
        },
        "usingHelp": {
            "name": "usingHelp",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "generate_csrf_token": {
            "name": "generate_csrf_token",
            "location": 151,
            "return": [],
            "arguments": {}
        },
        "currentUserName": {
            "name": "currentUserName",
            "location": 161,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "canView": {
            "name": "canView",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "page": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        }
    },
    "frambozenapp-master/app/testform.py": {
        "testForm": {
            "name": "testForm",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "getResultTable": {
            "name": "getResultTable",
            "location": 71,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "th": []
            }
        }
    },
    "frambozenapp-master/app/test_bozen.py": {},
    "frambozenapp-master/app/test_fieldinfo.py": {
        "T_functions.test_titleize": {
            "name": "test_titleize",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_functions.test_cssClasses": {
            "name": "test_cssClasses",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_StrField.test_basicMethods": {
            "name": "test_basicMethods",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/test_formdoc.py": {
        "T_FormDoc.test_creation1": {
            "name": "test_creation1",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_FormDoc.test_creation2": {
            "name": "test_creation2",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_FormDoc.test_buildForm": {
            "name": "test_buildForm",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/test_mondoc.py": {
        "T_create_save_delete.setUpAll": {
            "name": "setUpAll",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_create_save_delete.test_createFoo": {
            "name": "test_createFoo",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_create_save_delete.test_createFoo_withArguments": {
            "name": "test_createFoo_withArguments",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_create_save_delete.test_save": {
            "name": "test_save",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_create_save_delete.test_find": {
            "name": "test_find",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_create_save_delete.test_find_one": {
            "name": "test_find_one",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_create_save_delete.test_getDoc": {
            "name": "test_getDoc",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_create_save_delete.test_delete": {
            "name": "test_delete",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_urls.test_url": {
            "name": "test_url",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FK.setUpAll": {
            "name": "setUpAll",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FK.test_create_data": {
            "name": "test_create_data",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FK.test_accessForeignFields_b1": {
            "name": "test_accessForeignFields_b1",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FK.test_accessForeignFields_b3": {
            "name": "test_accessForeignFields_b3",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FK.test_no_FK_so_NullDoc": {
            "name": "test_no_FK_so_NullDoc",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FK.test_getForeignFieldNames": {
            "name": "test_getForeignFieldNames",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FKeys.setUpAll": {
            "name": "setUpAll",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FKeys.test_create_data": {
            "name": "test_create_data",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FKeys.test_load": {
            "name": "test_load",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FKeys.test_dereference": {
            "name": "test_dereference",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FKeys.test_getForeignFieldNames": {
            "name": "test_getForeignFieldNames",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FKeys.test_getForeignIds": {
            "name": "test_getForeignIds",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FKeys.test_getForeignIds_colStr": {
            "name": "test_getForeignIds_colStr",
            "location": 387,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FKeys.test_getForeignDocs": {
            "name": "test_getForeignDocs",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_FKeys.test_getForeignDocs_no_field": {
            "name": "test_getForeignDocs_no_field",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/test_mongo.py": {
        "T_functions.test_isObjectIdStr": {
            "name": "test_isObjectIdStr",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/test_timefield.py": {
        "T_BzDate.test_creation": {
            "name": "test_creation",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDate.test_creation_exception": {
            "name": "test_creation_exception",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDate.test_creation_from_date": {
            "name": "test_creation_from_date",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDate.test_creation_from_BzDate": {
            "name": "test_creation_from_BzDate",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDate.test_creation_from_int": {
            "name": "test_creation_from_int",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDate.test_actsAsStr": {
            "name": "test_actsAsStr",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDate.test_repr": {
            "name": "test_repr",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDate.test_toTuple": {
            "name": "test_toTuple",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDate.test_to_date": {
            "name": "test_to_date",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDate.test_to_datetime": {
            "name": "test_to_datetime",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDate.test_to_dayInt": {
            "name": "test_to_dayInt",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDate.test_addDays": {
            "name": "test_addDays",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDate.test_today": {
            "name": "test_today",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_creation_allDigits": {
            "name": "test_creation_allDigits",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_creation_from_string_2": {
            "name": "test_creation_from_string_2",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_creation_bzFormat": {
            "name": "test_creation_bzFormat",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_creation_from_BzDate": {
            "name": "test_creation_from_BzDate",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_creation_from_date": {
            "name": "test_creation_from_date",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_creation_from_int": {
            "name": "test_creation_from_int",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_toTuple": {
            "name": "test_toTuple",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_to_date": {
            "name": "test_to_date",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_to_datetime": {
            "name": "test_to_datetime",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_to_dayInt": {
            "name": "test_to_dayInt",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_formatDateTime": {
            "name": "test_formatDateTime",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_addDays": {
            "name": "test_addDays",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "T_BzDateTime.test_now": {
            "name": "test_now",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/userdb.py": {
        "load_user": {
            "name": "load_user",
            "location": 109,
            "return": [],
            "arguments": {
                "userId": []
            }
        },
        "randStr": {
            "name": "randStr",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "length": []
            }
        },
        "hashPassword": {
            "name": "hashPassword",
            "location": 127,
            "return": [],
            "arguments": {
                "password": []
            }
        },
        "verifyPassword": {
            "name": "verifyPassword",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "hashedPassword": [],
                "guessedPassword": []
            }
        },
        "toHex": {
            "name": "toHex",
            "location": 150,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "User.classLogo": {
            "name": "classLogo",
            "location": 52,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_id": {
            "name": "get_id",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.is_authenticated": {
            "name": "is_authenticated",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.is_anonymous": {
            "name": "is_anonymous",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_active": {
            "name": "is_active",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.isAuthenticated": {
            "name": "isAuthenticated",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.getIcon": {
            "name": "getIcon",
            "location": 91,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.preSave": {
            "name": "preSave",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/bozen/admin.py": {
        "getColName": {
            "name": "getColName",
            "location": 304,
            "return": [],
            "arguments": {
                "clsName": []
            }
        },
        "AdminSite.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "collections": [],
                "stub": [
                    "typing.Text"
                ]
            }
        },
        "AdminSite.showFields": {
            "name": "showFields",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "colClass": [],
                "fieldNames": []
            }
        },
        "AdminSite.sortFields": {
            "name": "sortFields",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "colClass": [],
                "sortSpec": []
            }
        },
        "AdminSite.runFlask": {
            "name": "runFlask",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flaskApp": [],
                "jinjaEnv": []
            }
        },
        "AdminSite.adminEp": {
            "name": "adminEp",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdminSite.colTableH": {
            "name": "colTableH",
            "location": 120,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminSite.adminColEp": {
            "name": "adminColEp",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "colName": []
            }
        },
        "AdminSite.docTableH": {
            "name": "docTableH",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "colClass": [],
                "pag": []
            }
        },
        "AdminSite.adminDocEp": {
            "name": "adminDocEp",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "colName": [],
                "id": []
            }
        },
        "AdminSite.adminPagesLisH": {
            "name": "adminPagesLisH",
            "location": 266,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminSite.getUseFields": {
            "name": "getUseFields",
            "location": 281,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "colClass": []
            }
        },
        "AdminSite.colUrl": {
            "name": "colUrl",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "colClass": []
            }
        }
    },
    "frambozenapp-master/app/bozen/autopages.py": {
        "notifyFlaskForAutopages": {
            "name": "notifyFlaskForAutopages",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "jinjaEnv": []
            }
        },
        "http403": {
            "name": "http403",
            "location": 24,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "msg": [
                    "typing.Text"
                ]
            }
        },
        "addAutopage": {
            "name": "addAutopage",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "monDocCls": [],
                "pages": []
            }
        },
        "Autopage.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monDocCls": [],
                "caps": []
            }
        },
        "Autopage.runFlask": {
            "name": "runFlask",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Autopage.colStubBrowseEp": {
            "name": "colStubBrowseEp",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Autopage.browseTableH": {
            "name": "browseTableH",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "pag": []
            }
        },
        "Autopage.addButtonH": {
            "name": "addButtonH",
            "location": 168,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Autopage.colStubDocEp": {
            "name": "colStubDocEp",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        }
    },
    "frambozenapp-master/app/bozen/bozenutil.py": {
        "Incrementor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "before": [
                    "int"
                ]
            }
        },
        "Incrementor.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/bozen/butil.py": {
        "normalizePath": {
            "name": "normalizePath",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "p": [
                    "str"
                ]
            }
        },
        "fileExists": {
            "name": "fileExists",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "getFilenames": {
            "name": "getFilenames",
            "location": 55,
            "return": [
                "list[]"
            ],
            "arguments": {
                "dir": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "pattern": [
                    "typing.Text"
                ]
            }
        },
        "form": {
            "name": "form",
            "location": 76,
            "return": [
                "str",
                "None"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "None"
                ]
            }
        },
        "pr": {
            "name": "pr",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "epr": {
            "name": "epr",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "str"
                ]
            }
        },
        "prn": {
            "name": "prn",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "eprn": {
            "name": "eprn",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "fs": [
                    "str"
                ]
            }
        },
        "dpr": {
            "name": "dpr",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "formatStr": [
                    "str"
                ]
            }
        },
        "printargs": {
            "name": "printargs",
            "location": 124,
            "return": [],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "pretty": {
            "name": "pretty",
            "location": 145,
            "return": [],
            "arguments": {
                "ob": [
                    "bool",
                    "str",
                    "float",
                    "typing.Sequence[int]"
                ],
                "indent": [
                    "int"
                ]
            }
        },
        "myStr": {
            "name": "myStr",
            "location": 152,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "attrEsc": {
            "name": "attrEsc",
            "location": 172,
            "return": [
                "typing.Text",
                "str",
                "int",
                "None",
                "list[typing.Any]",
                "typing.Type",
                "float",
                "dict[, ]",
                "typing.Sequence[typing.Any]",
                "typing.Sequence[str]",
                "dict[str, str]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "None",
                    "list[typing.Any]",
                    "str",
                    "typing.Type",
                    "float",
                    "dict[, ]",
                    "typing.Sequence[typing.Any]",
                    "typing.Sequence[str]"
                ],
                "noneIs": [
                    "typing.Text"
                ]
            }
        },
        "htmlEsc": {
            "name": "htmlEsc",
            "location": 186,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "set[int]"
                ]
            }
        },
        "toBytes": {
            "name": "toBytes",
            "location": 189,
            "return": [
                "bytes"
            ],
            "arguments": {
                "b": [
                    "bytes",
                    "int"
                ]
            }
        },
        "exValue": {
            "name": "exValue",
            "location": 222,
            "return": [
                "dict[tuple[typing.Union[int,int]], str]",
                "list[str]",
                "dict[str, int]",
                "dict[str, dict[, ]]",
                "dict[str, str]",
                "typing.Type",
                "dict[, ]",
                "str"
            ],
            "arguments": {
                "f": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ],
                "orValue": [
                    "str",
                    "typing.Iterable[typing.Hashable]"
                ]
            }
        },
        "printargs.wrapper": {
            "name": "wrapper",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "Struct.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Struct.__repr__": {
            "name": "__repr__",
            "location": 210,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Struct.hasattr": {
            "name": "hasattr",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "frambozenapp-master/app/bozen/bztypes.py": {},
    "frambozenapp-master/app/bozen/fieldinfo.py": {
        "titleize": {
            "name": "titleize",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "fn": []
            }
        },
        "cssClasses": {
            "name": "cssClasses",
            "location": 45,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "possibleAttr": {
            "name": "possibleAttr",
            "location": 81,
            "return": [
                "typing.Text",
                "str",
                "None",
                "list[]"
            ],
            "arguments": {
                "attrName": [
                    "str",
                    "int"
                ],
                "attrValue": [
                    "str",
                    "None"
                ]
            }
        },
        "FieldInfo.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.__repr__": {
            "name": "__repr__",
            "location": 134,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.createWithInitialValue": {
            "name": "createWithInitialValue",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.takesMultipleValues": {
            "name": "takesMultipleValues",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict[str, str]",
                    "bool"
                ]
            }
        },
        "FieldInfo.xxxformBox": {
            "name": "xxxformBox",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "list[]",
                    "str",
                    "typing.Callable[T, T]"
                ]
            }
        },
        "FieldInfo.formField": {
            "name": "formField",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "typing.Container",
                    "typing.AbstractSet",
                    "dict[str, typing.Any]",
                    "dict[str, int]"
                ]
            }
        },
        "FieldInfo.autocompleteAttr": {
            "name": "autocompleteAttr",
            "location": 176,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.formField_rw": {
            "name": "formField_rw",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "FieldInfo.formField_ro": {
            "name": "formField_ro",
            "location": 200,
            "return": [
                "dict[str, dict[str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "typing.AnyStr",
                    "int"
                ]
            }
        },
        "FieldInfo.errorMsg": {
            "name": "errorMsg",
            "location": 213,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "typing.Callable[, ]",
                    "None",
                    "str"
                ]
            }
        },
        "FieldInfo.readArgs": {
            "name": "readArgs",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.defaultDefault": {
            "name": "defaultDefault",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FieldInfo.convert": {
            "name": "convert",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "list[]"
                ]
            }
        },
        "FieldInfo.convertValue": {
            "name": "convertValue",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "FieldInfo.convertToScreenH": {
            "name": "convertToScreenH",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "FieldInfo.convertToScreen": {
            "name": "convertToScreen",
            "location": 292,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "FieldInfo.convertFromDatabase": {
            "name": "convertFromDatabase",
            "location": 302,
            "return": [
                "bool",
                "str",
                "list[list[str]]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "str",
                    "list[list[str]]"
                ]
            }
        },
        "FieldInfo.convertToDatabase": {
            "name": "convertToDatabase",
            "location": 309,
            "return": [
                "float",
                "BaseException",
                "None",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "float",
                    "BaseException",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "FieldInfo.setFieldName": {
            "name": "setFieldName",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fieldName": [
                    "str"
                ]
            }
        },
        "FieldInfo.setDocClass": {
            "name": "setDocClass",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "docClass": [
                    "dict[str, dict[str, str]]",
                    "tuple[typing.Type]",
                    "dict[str, str]",
                    "str"
                ]
            }
        },
        "FieldInfo.classFieldName": {
            "name": "classFieldName",
            "location": 341,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrField.readArgs": {
            "name": "readArgs",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrField.defaultDefault": {
            "name": "defaultDefault",
            "location": 362,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrField.convertValue": {
            "name": "convertValue",
            "location": 368,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bool"
                ]
            }
        },
        "StrField.errorMsg": {
            "name": "errorMsg",
            "location": 372,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "TextAreaField.readArgs": {
            "name": "readArgs",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextAreaField.formField_rw": {
            "name": "formField_rw",
            "location": 408,
            "return": [
                "dict[str, str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "None",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[str]"
                ]
            }
        },
        "TextAreaField.formField_ro": {
            "name": "formField_ro",
            "location": 425,
            "return": [
                "list[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str"
                ]
            }
        },
        "PasswordField.formField_rw": {
            "name": "formField_rw",
            "location": 446,
            "return": [
                "str",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "Exception",
                    "typing.Type"
                ]
            }
        }
    },
    "frambozenapp-master/app/bozen/filefield.py": {},
    "frambozenapp-master/app/bozen/formdoc.py": {
        "initialiseClass": {
            "name": "initialiseClass",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "dyct": []
            }
        },
        "checkForMissingIndex": {
            "name": "checkForMissingIndex",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "dyct": []
            }
        },
        "FormDocMeta.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "dyct": []
            }
        },
        "initialiseClass.keyFn": {
            "name": "keyFn",
            "location": 52,
            "return": [],
            "arguments": {
                "fieldName": []
            }
        },
        "FormDoc.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.allowedFieldNameSet": {
            "name": "allowedFieldNameSet",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.populateFields": {
            "name": "populateFields",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.__getattr__": {
            "name": "__getattr__",
            "location": 138,
            "return": [
                "NullDoc"
            ],
            "arguments": {
                "self": [],
                "fieldName": []
            }
        },
        "FormDoc.getFKeysDereference": {
            "name": "getFKeysDereference",
            "location": 166,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "fnids": []
            }
        },
        "FormDoc.__getitem__": {
            "name": "__getitem__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "FormDoc.__setitem__": {
            "name": "__setitem__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "FormDoc.__delitem__": {
            "name": "__delitem__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "FormDoc.keys": {
            "name": "keys",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.__iter__": {
            "name": "__iter__",
            "location": 198,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.__len__": {
            "name": "__len__",
            "location": 202,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.get": {
            "name": "get",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "defaultValue": [
                    "None"
                ]
            }
        },
        "FormDoc.has_key": {
            "name": "has_key",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "FormDoc.buildForm": {
            "name": "buildForm",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.buildFormLines": {
            "name": "buildFormLines",
            "location": 225,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.formLine": {
            "name": "formLine",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "FormDoc.formField": {
            "name": "formField",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "FormDoc.populateFromRequest": {
            "name": "populateFromRequest",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "populateBools": [
                    "typing.Text"
                ]
            }
        },
        "FormDoc.makeCopy": {
            "name": "makeCopy",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.asReadableH": {
            "name": "asReadableH",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "FormDoc.asReadable": {
            "name": "asReadable",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "FormDoc.isValid": {
            "name": "isValid",
            "location": 404,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fieldsToValidate": [
                    "None"
                ]
            }
        },
        "FormDoc.formWideErrorMessageH": {
            "name": "formWideErrorMessageH",
            "location": 427,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.formWideErrorMessage": {
            "name": "formWideErrorMessage",
            "location": 442,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormDoc.getFieldInfo": {
            "name": "getFieldInfo",
            "location": 454,
            "return": [],
            "arguments": {
                "cls": [],
                "fieldName": []
            }
        },
        "FormDoc.hasFieldInfo": {
            "name": "hasFieldInfo",
            "location": 460,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "fieldName": []
            }
        },
        "FormDoc.fieldNames": {
            "name": "fieldNames",
            "location": 466,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "FormDoc.setField": {
            "name": "setField",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fieldName": [],
                "newValue": []
            }
        },
        "FormDoc.classTitle": {
            "name": "classTitle",
            "location": 488,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "FormDoc.classTitlePlural": {
            "name": "classTitlePlural",
            "location": 492,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "frambozenapp-master/app/bozen/ht.py": {
        "errorBox": {
            "name": "errorBox",
            "location": 8,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "msg": [],
                "escapeForHtml": [
                    "bool"
                ]
            }
        },
        "warningBox": {
            "name": "warningBox",
            "location": 28,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "msg": [],
                "escapeForHtml": [
                    "bool"
                ]
            }
        },
        "goodMessageBox": {
            "name": "goodMessageBox",
            "location": 48,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "msg": [],
                "escapeForHtml": [
                    "bool"
                ]
            }
        }
    },
    "frambozenapp-master/app/bozen/keychoicefield.py": {
        "renderChoices": {
            "name": "renderChoices",
            "location": 228,
            "return": [],
            "arguments": {
                "fieldName": [],
                "choices": [],
                "chosen": []
            }
        },
        "ChoiceField.readArgs": {
            "name": "readArgs",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChoiceField.formField_rw": {
            "name": "formField_rw",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "ChoiceField.getChoices": {
            "name": "getChoices",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "ChoiceField.convertToScreen": {
            "name": "convertToScreen",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "ChoiceField.errorMsg": {
            "name": "errorMsg",
            "location": 77,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FK.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "foreignTable": []
            }
        },
        "FK.readArgs": {
            "name": "readArgs",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FK.formField_rw": {
            "name": "formField_rw",
            "location": 122,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FK.formField_ro": {
            "name": "formField_ro",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FK.convertToScreenH": {
            "name": "convertToScreenH",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FK.getChoices": {
            "name": "getChoices",
            "location": 153,
            "return": [
                "list[tuple[typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FK.convertValue": {
            "name": "convertValue",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FK.errorMsg": {
            "name": "errorMsg",
            "location": 177,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FK.getDoc": {
            "name": "getDoc",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "fkValue": []
            }
        },
        "FK.foreignTable": {
            "name": "foreignTable",
            "location": 202,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/bozen/lintest.py": {
        "fileExists": {
            "name": "fileExists",
            "location": 103,
            "return": [
                "int"
            ],
            "arguments": {
                "fn": []
            }
        },
        "dirExists": {
            "name": "dirExists",
            "location": 119,
            "return": [
                "int"
            ],
            "arguments": {
                "fn": []
            }
        },
        "getFunCollate": {
            "name": "getFunCollate",
            "location": 433,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "f": []
            }
        },
        "stripOnLines": {
            "name": "stripOnLines",
            "location": 440,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "Test.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "Test.getFullName": {
            "name": "getFullName",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test.getParentName": {
            "name": "getParentName",
            "location": 81,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.printTestResults": {
            "name": "printTestResults",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileAssertionMixin.assertFileExists": {
            "name": "assertFileExists",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pan": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "FileAssertionMixin.assertFileDoesNotExist": {
            "name": "assertFileDoesNotExist",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pan": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "FileAssertionMixin.assertDirExists": {
            "name": "assertDirExists",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pan": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "FileAssertionMixin.assertFilesEqual": {
            "name": "assertFilesEqual",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pan1": [],
                "pan2": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "FileAssertionMixin.assertFileHasData": {
            "name": "assertFileHasData",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pan": [],
                "data": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "FileAssertionMixin.cmd": {
            "name": "cmd",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "TestCase.passedTest": {
            "name": "passedTest",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "TestCase.assertEqual": {
            "name": "assertEqual",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [],
                "sb": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "TestCase.assertApprox": {
            "name": "assertApprox",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [],
                "sb": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "TestCase.assertNotEqual": {
            "name": "assertNotEqual",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [],
                "snb": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "TestCase.assertBool": {
            "name": "assertBool",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bool": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "TestCase.assertFalse": {
            "name": "assertFalse",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bool": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "TestCase.failed": {
            "name": "failed",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "TestCase.passed": {
            "name": "passed",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "comment": [
                    "typing.Text"
                ]
            }
        },
        "TestCase.run": {
            "name": "run",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None"
                ]
            }
        },
        "TestCase._pnTxt": {
            "name": "_pnTxt",
            "location": 357,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.canRun": {
            "name": "canRun",
            "location": 362,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "methodName": []
            }
        },
        "TestCase.doRun": {
            "name": "doRun",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "methodName": []
            }
        },
        "TestCase.getTests": {
            "name": "getTests",
            "location": 376,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase._runRequirements": {
            "name": "_runRequirements",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": []
            }
        },
        "TestCase._getRequirements": {
            "name": "_getRequirements",
            "location": 414,
            "return": [
                "list[list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroup.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "None"
                ]
            }
        },
        "TestGroup.run": {
            "name": "run",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None"
                ]
            }
        },
        "TestGroup.addTest": {
            "name": "addTest",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aTest": []
            }
        },
        "TestGroup.addCase": {
            "name": "addCase",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "testCaseSubclass": []
            }
        },
        "TestGroup.add": {
            "name": "add",
            "location": 521,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/bozen/mondoc.py": {
        "initialiseMonDocClass": {
            "name": "initialiseMonDocClass",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "typing.Callable[, ]"
                ],
                "dyct": [
                    "bool",
                    "dict[str, typing.Type]",
                    "typing.Mapping"
                ]
            }
        },
        "setCollection": {
            "name": "setCollection",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "typing.Callable[, ]",
                    "bool",
                    "list[]",
                    "typing.Mapping"
                ],
                "dyct": [
                    "typing.Type",
                    "list[dict[str, typing.Any]]",
                    "dict[str, bool]",
                    "int",
                    "list[]"
                ]
            }
        },
        "MonDocMeta.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "name": [
                    "str",
                    "tuple[typing.Type]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "bases": [
                    "str",
                    "tuple[typing.Type]",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "dyct": [
                    "str",
                    "tuple[typing.Type]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MonDoc.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.allowedFieldNameSet": {
            "name": "allowedFieldNameSet",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.__repr__": {
            "name": "__repr__",
            "location": 84,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.count": {
            "name": "count",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": [
                    "typing.Callable[, ]",
                    "typing.Type"
                ]
            }
        },
        "MonDoc.find": {
            "name": "find",
            "location": 114,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MonDoc.find_one": {
            "name": "find_one",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MonDoc.delete_many": {
            "name": "delete_many",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "spec": [
                    "None",
                    "str",
                    "bytes",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MonDoc.getDoc": {
            "name": "getDoc",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "id": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "MonDoc.transform": {
            "name": "transform",
            "location": 163,
            "return": [],
            "arguments": {
                "cls": [],
                "mongoDoc": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "MonDoc.col": {
            "name": "col",
            "location": 183,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "bytes",
                    "dict[str, float]",
                    "list[str]"
                ]
            }
        },
        "MonDoc.save": {
            "name": "save",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.delete": {
            "name": "delete",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.preSave": {
            "name": "preSave",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.postSave": {
            "name": "postSave",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.preCreate": {
            "name": "preCreate",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.postLoad": {
            "name": "postLoad",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.mongoDict": {
            "name": "mongoDict",
            "location": 232,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.getForeignIds": {
            "name": "getForeignIds",
            "location": 252,
            "return": [
                "list[]",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "foreignCol": [
                    "str",
                    "dict[, ]"
                ],
                "fn": [
                    "str",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "MonDoc.getForeignDocs": {
            "name": "getForeignDocs",
            "location": 265,
            "return": [
                "list[]",
                "int"
            ],
            "arguments": {
                "self": [],
                "foreignCol": [
                    "str",
                    "bool"
                ],
                "fn": [
                    "typing.Text"
                ]
            }
        },
        "MonDoc.getForeignFieldNames": {
            "name": "getForeignFieldNames",
            "location": 281,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "foreignClass": [
                    "str",
                    "typing.Callable[typing.Any, None]",
                    "float",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "MonDoc.a": {
            "name": "a",
            "location": 299,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "urlStub": [
                    "None",
                    "str"
                ],
                "includeLogo": [
                    "bool"
                ]
            }
        },
        "MonDoc.url": {
            "name": "url",
            "location": 320,
            "return": [
                "str",
                "dict[str, list[str]]",
                "list[str]",
                "typing.Final"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.classLogo": {
            "name": "classLogo",
            "location": 333,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "bool",
                    "typing.Callable[..., T]"
                ]
            }
        },
        "MonDoc.logo": {
            "name": "logo",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.getName": {
            "name": "getName",
            "location": 351,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.getNameH": {
            "name": "getNameH",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.adminA": {
            "name": "adminA",
            "location": 371,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "adminStub": [
                    "typing.Text"
                ]
            }
        },
        "MonDoc.adminUrl": {
            "name": "adminUrl",
            "location": 379,
            "return": [
                "dict[, ]",
                "dict[str, str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "adminStub": [
                    "typing.Text"
                ]
            }
        },
        "MonDoc.autopages": {
            "name": "autopages",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "pages": [
                    "typing.Text"
                ]
            }
        },
        "MonDoc.id": {
            "name": "id",
            "location": 396,
            "return": [
                "str",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.hasId": {
            "name": "hasId",
            "location": 405,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonDoc.fixKwargs": {
            "name": "fixKwargs",
            "location": 412,
            "return": [],
            "arguments": {
                "kwargs": []
            }
        },
        "MonDoc.fixSort": {
            "name": "fixSort",
            "location": 424,
            "return": [
                "list[typing.Union[tuple[],tuple[typing.Union[str,dict[str, float],int]]]]"
            ],
            "arguments": {
                "sortArg": [
                    "dict[str, float]",
                    "str"
                ]
            }
        },
        "MonDoc.makeMonDoc": {
            "name": "makeMonDoc",
            "location": 447,
            "return": [
                "str",
                "int",
                "tuple[typing.Union[float,float,float]]"
            ],
            "arguments": {
                "mdos": [
                    "str",
                    "int",
                    "tuple[typing.Union[float,float,float]]"
                ]
            }
        }
    },
    "frambozenapp-master/app/bozen/mongo.py": {
        "setDefaultDatabase": {
            "name": "setDefaultDatabase",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "dbName": [
                    "str",
                    "bool"
                ],
                "host": [
                    "typing.Text"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "getDefaultDatabase": {
            "name": "getDefaultDatabase",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "indexToBase36": {
            "name": "indexToBase36",
            "location": 67,
            "return": [],
            "arguments": {
                "ix": [
                    "int",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "base36encode": {
            "name": "base36encode",
            "location": 75,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "base36decode": {
            "name": "base36decode",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "number": []
            }
        },
        "isObjectIdStr": {
            "name": "isObjectIdStr",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]",
                    "str"
                ]
            }
        },
        "normaliseId": {
            "name": "normaliseId",
            "location": 110,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "MongoabIncrementor.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "float"
                ]
            }
        },
        "MongoabIncrementor.getNewIndex": {
            "name": "getNewIndex",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoabIncrementor.getNewIndexB36": {
            "name": "getNewIndexB36",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoabIncrementor.show": {
            "name": "show",
            "location": 55,
            "return": [
                "int",
                "str",
                "dict[str, bool]",
                "typing.Counter",
                "typing.Type",
                "list[str]",
                "dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/bozen/multichoicefield.py": {
        "MultiChoiceField.takesMultipleValues": {
            "name": "takesMultipleValues",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MultiChoiceField.readArgs": {
            "name": "readArgs",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiChoiceField.defaultDefault": {
            "name": "defaultDefault",
            "location": 20,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiChoiceField.convert": {
            "name": "convert",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "MultiChoiceField.convertValue": {
            "name": "convertValue",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "MultiChoiceField.formField_rw": {
            "name": "formField_rw",
            "location": 40,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "MultiChoiceField.formField_ro": {
            "name": "formField_ro",
            "location": 67,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "MultiChoiceField.convertToScreen": {
            "name": "convertToScreen",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FKeys.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "foreignTable": []
            }
        },
        "FKeys.takesMultipleValues": {
            "name": "takesMultipleValues",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": []
            }
        },
        "FKeys.readArgs": {
            "name": "readArgs",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FKeys.defaultDefault": {
            "name": "defaultDefault",
            "location": 114,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FKeys.formField_rw": {
            "name": "formField_rw",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FKeys.formField_ro": {
            "name": "formField_ro",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FKeys.convertValue": {
            "name": "convertValue",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FKeys.convertToScreenH": {
            "name": "convertToScreenH",
            "location": 151,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FKeys.convertToScreen": {
            "name": "convertToScreen",
            "location": 171,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FKeys.foreignTable": {
            "name": "foreignTable",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/bozen/nulldoc.py": {
        "NullDoc.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fakeClass": []
            }
        },
        "NullDoc.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullDoc.a": {
            "name": "a",
            "location": 22,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullDoc.__getattr__": {
            "name": "__getattr__",
            "location": 25,
            "return": [
                "NullDoc",
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "fieldName": []
            }
        },
        "NullDoc.getName": {
            "name": "getName",
            "location": 47,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullDoc.asReadable": {
            "name": "asReadable",
            "location": 50,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "NullDoc.asReadableH": {
            "name": "asReadableH",
            "location": 53,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "NullDoc.id": {
            "name": "id",
            "location": 56,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/bozen/numberfield.py": {
        "IntField.defaultDefault": {
            "name": "defaultDefault",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntField.convertValue": {
            "name": "convertValue",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "FloatField.defaultDefault": {
            "name": "defaultDefault",
            "location": 50,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FloatField.convertValue": {
            "name": "convertValue",
            "location": 56,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "BoolField.readArgs": {
            "name": "readArgs",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolField.defaultDefault": {
            "name": "defaultDefault",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolField.convertValue": {
            "name": "convertValue",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "bool"
                ]
            }
        },
        "BoolField.convertToScreen": {
            "name": "convertToScreen",
            "location": 85,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "typing.Iterable[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "float",
                    "str"
                ]
            }
        },
        "BoolField.formField_rw": {
            "name": "formField_rw",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "bool"
                ]
            }
        },
        "BoolField.setFieldName": {
            "name": "setFieldName",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fieldName": [
                    "str"
                ]
            }
        }
    },
    "frambozenapp-master/app/bozen/objectfield.py": {
        "ObjectField.defaultDefault": {
            "name": "defaultDefault",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectField.convertToScreen": {
            "name": "convertToScreen",
            "location": 20,
            "return": [
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "typing.Iterable[tuple[typing.Union[typing.Any,typing.Any]]]",
                    "float",
                    "str"
                ]
            }
        },
        "ObjectField.formField_rw": {
            "name": "formField_rw",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "ObjectField.formField_ro": {
            "name": "formField_ro",
            "location": 35,
            "return": [
                "float",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "frambozenapp-master/app/bozen/paginate.py": {
        "Paginator.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "total": [
                    "int",
                    "float"
                ],
                "perPage": [
                    "int"
                ],
                "showSinglePage": [
                    "bool"
                ]
            }
        },
        "Paginator.calc": {
            "name": "calc",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "frambozenapp-master/app/bozen/termcolours.py": {},
    "frambozenapp-master/app/bozen/timefield.py": {
        "isValidDate": {
            "name": "isValidDate",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "isValidDate8": {
            "name": "isValidDate8",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "isValidDateTime": {
            "name": "isValidDateTime",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "isValidTod": {
            "name": "isValidTod",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": []
            }
        },
        "convertToBzDataTimeStr": {
            "name": "convertToBzDataTimeStr",
            "location": 242,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "decodeDateTime8": {
            "name": "decodeDateTime8",
            "location": 266,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "s": []
            }
        },
        "decodeDateTime": {
            "name": "decodeDateTime",
            "location": 288,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "get3ints": {
            "name": "get3ints",
            "location": 302,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "s": []
            }
        },
        "getPosInt": {
            "name": "getPosInt",
            "location": 311,
            "return": [
                "tuple[typing.Union[int,typing.Text]]",
                "tuple[int]"
            ],
            "arguments": {
                "s": [],
                "default": [
                    "int"
                ]
            }
        },
        "BzDate.__new__": {
            "name": "__new__",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": [],
                "s": []
            }
        },
        "BzDate.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDate.toTuple_ymd": {
            "name": "toTuple_ymd",
            "location": 80,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDate.toTuple_ymdhms": {
            "name": "toTuple_ymdhms",
            "location": 87,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDate.to_date": {
            "name": "to_date",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BzDate.to_datetime": {
            "name": "to_datetime",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BzDate.to_dayInt": {
            "name": "to_dayInt",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BzDate.formatDate": {
            "name": "formatDate",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "formatStr": []
            }
        },
        "BzDate.addDays": {
            "name": "addDays",
            "location": 120,
            "return": [
                "BzDate"
            ],
            "arguments": {
                "self": [],
                "numDays": []
            }
        },
        "BzDate.today": {
            "name": "today",
            "location": 126,
            "return": [
                "BzDate"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BzDateTime.__new__": {
            "name": "__new__",
            "location": 135,
            "return": [],
            "arguments": {
                "cls": [],
                "s": []
            }
        },
        "BzDateTime.__repr__": {
            "name": "__repr__",
            "location": 166,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDateTime.toTuple_ymd": {
            "name": "toTuple_ymd",
            "location": 170,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDateTime.toTuple_ymdhms": {
            "name": "toTuple_ymdhms",
            "location": 177,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BzDateTime.to_date": {
            "name": "to_date",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BzDateTime.to_datetime": {
            "name": "to_datetime",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BzDateTime.to_dayInt": {
            "name": "to_dayInt",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BzDateTime.formatDateTime": {
            "name": "formatDateTime",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "formatStr": []
            }
        },
        "BzDateTime.addDays": {
            "name": "addDays",
            "location": 216,
            "return": [
                "BzDateTime"
            ],
            "arguments": {
                "self": [],
                "numDays": []
            }
        },
        "BzDateTime.addDaysSeconds": {
            "name": "addDaysSeconds",
            "location": 227,
            "return": [
                "BzDateTime"
            ],
            "arguments": {
                "self": [],
                "numDays": [],
                "numSeconds": []
            }
        },
        "BzDateTime.now": {
            "name": "now",
            "location": 234,
            "return": [
                "BzDateTime"
            ],
            "arguments": {
                "cls": []
            }
        },
        "DateField.readArgs": {
            "name": "readArgs",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateField.defaultDefault": {
            "name": "defaultDefault",
            "location": 354,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateField.formField_rw": {
            "name": "formField_rw",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DateField.formField_ro": {
            "name": "formField_ro",
            "location": 383,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DateField.errorMsg": {
            "name": "errorMsg",
            "location": 392,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DateField.convertValue": {
            "name": "convertValue",
            "location": 398,
            "return": [
                "typing.Text",
                "BzDate"
            ],
            "arguments": {
                "self": [],
                "vStr": []
            }
        },
        "DateField.convertToScreen": {
            "name": "convertToScreen",
            "location": 415,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DateField.convertFromDatabase": {
            "name": "convertFromDatabase",
            "location": 428,
            "return": [
                "typing.Text",
                "BzDate"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DateField.convertToDatabase": {
            "name": "convertToDatabase",
            "location": 441,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DateTimeField.readArgs": {
            "name": "readArgs",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateTimeField.defaultDefault": {
            "name": "defaultDefault",
            "location": 465,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DateTimeField.formField_rw": {
            "name": "formField_rw",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DateTimeField.formField_ro": {
            "name": "formField_ro",
            "location": 494,
            "return": [],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DateTimeField.errorMsg": {
            "name": "errorMsg",
            "location": 503,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DateTimeField.convertValue": {
            "name": "convertValue",
            "location": 509,
            "return": [
                "typing.Text",
                "BzDateTime"
            ],
            "arguments": {
                "self": [],
                "vStr": []
            }
        },
        "DateTimeField.convertToScreen": {
            "name": "convertToScreen",
            "location": 526,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DateTimeField.convertFromDatabase": {
            "name": "convertFromDatabase",
            "location": 540,
            "return": [
                "typing.Text",
                "BzDateTime"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        },
        "DateTimeField.convertToDatabase": {
            "name": "convertToDatabase",
            "location": 553,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": [],
                "v": []
            }
        }
    },
    "frambozenapp-master/app/bozen/__init__.py": {}
}
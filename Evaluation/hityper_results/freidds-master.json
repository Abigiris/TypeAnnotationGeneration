{
    "freidds-master/setup.py": {},
    "freidds-master/freidds/datasets.py": {
        "DatasetBase.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "list[]",
                    "list[float]",
                    "tuple[typing.Union[int,int,int]]",
                    "list[dict[, ]]"
                ]
            }
        },
        "DatasetBase.dataset": {
            "name": "dataset",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetBase.__getitem__": {
            "name": "__getitem__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Hashable"
                ]
            }
        },
        "DatasetBase.__len__": {
            "name": "__len__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetBase.as_target_to_source_list": {
            "name": "as_target_to_source_list",
            "location": 36,
            "return": [
                "dict[, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetBase.as_column_lists": {
            "name": "as_column_lists",
            "location": 42,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutiLevelDatasetBase.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "float"
                ]
            }
        },
        "MutiLevelDatasetBase._traverse": {
            "name": "_traverse",
            "location": 55,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list[]"
                ],
                "f": [
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]",
                    "bytearray",
                    "int"
                ]
            }
        },
        "MutiLevelDatasetBase._populate_dataset": {
            "name": "_populate_dataset",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [
                    "str",
                    "typing.Callable[[], None]",
                    "int"
                ]
            }
        },
        "MutiLevelDatasetBase.dataset": {
            "name": "dataset",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutiLevelDatasetBase.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutiLevelDatasetBase.__getitem__": {
            "name": "__getitem__",
            "location": 73,
            "return": [
                "MutiLevelDatasetBase"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "MutiLevelDatasetBase.as_target_to_source_list": {
            "name": "as_target_to_source_list",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutiLevelDatasetBase.traverse": {
            "name": "traverse",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "func": [
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        },
        "MutiLevelDatasetBase._read_train_test_dataset": {
            "name": "_read_train_test_dataset",
            "location": 86,
            "return": [
                "list[]",
                "list[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "dataset_directory": [
                    "bool",
                    "str"
                ],
                "image_ext": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "ReadableMultiLevelDatasetBase.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_directory": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "cache_file_name": [
                    "str",
                    "None"
                ],
                "cache_directory": [
                    "None",
                    "str"
                ]
            }
        },
        "ReadableMultiLevelDatasetBase._read_dataset_via_cache": {
            "name": "_read_dataset_via_cache",
            "location": 126,
            "return": [
                "str",
                "bool",
                "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]]",
                "typing.TextIO"
            ],
            "arguments": {
                "self": [],
                "dataset_directory": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ],
                "cache_directory": [
                    "str",
                    "bool",
                    "bytes",
                    "list[str]",
                    "None"
                ]
            }
        },
        "ReadableMultiLevelDatasetBase._read_dataset": {
            "name": "_read_dataset",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadableMultiLevelDatasetBase._scrub_dataset_directory": {
            "name": "_scrub_dataset_directory",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ReadableMultiLevelDatasetBase._prefix_dataset_directory": {
            "name": "_prefix_dataset_directory",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MultiViewDatasetMixin.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiViewDatasetMixin.is_valid": {
            "name": "is_valid",
            "location": 195,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGFace2.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_directory": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "VGGFace2._read_dataset": {
            "name": "_read_dataset",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VGGFace2.get_v2s": {
            "name": "get_v2s",
            "location": 216,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int"
                ]
            }
        },
        "VGGFace2._v2s_subset": {
            "name": "_v2s_subset",
            "location": 223,
            "return": [
                "dict[typing.Text, DatasetBase]"
            ],
            "arguments": {
                "self": [],
                "subset": [
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "Synthetic.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_directory": [
                    "str",
                    "None"
                ],
                "filters": [
                    "None",
                    "str",
                    "list[str]",
                    "typing.MutableMapping",
                    "bool",
                    "dict[str, typing.Union[str,typing.Any]]"
                ]
            }
        },
        "Synthetic._read_dataset": {
            "name": "_read_dataset",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Synthetic._build_filter": {
            "name": "_build_filter",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "filters": [
                    "list[dict[, ]]",
                    "list[]",
                    "bool"
                ]
            }
        },
        "Synthetic.get_v2s": {
            "name": "get_v2s",
            "location": 285,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int"
                ]
            }
        },
        "Synthetic._v2s_subset": {
            "name": "_v2s_subset",
            "location": 292,
            "return": [
                "dict[typing.Text, DatasetBase]"
            ],
            "arguments": {
                "self": [],
                "subset": [
                    "typing.Callable[, ]",
                    "str",
                    "None"
                ]
            }
        },
        "COXFaceDB.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_directory": [
                    "str",
                    "None"
                ],
                "subdataset": [
                    "typing.Text"
                ]
            }
        },
        "COXFaceDB._read_dataset": {
            "name": "_read_dataset",
            "location": 328,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "COXFaceDB.get_v2s": {
            "name": "get_v2s",
            "location": 368,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "gallery_and_probe": [
                    "bool"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "COXFaceDB._v2s_subset": {
            "name": "_v2s_subset",
            "location": 375,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "subset": [
                    "str",
                    "bool",
                    "typing.Sequence[str]"
                ],
                "gallery_and_probe": [
                    "tuple[float]",
                    "bool",
                    "float"
                ]
            }
        },
        "COXFaceDB._v2s_subset_round": {
            "name": "_v2s_subset_round",
            "location": 379,
            "return": [
                "dict[typing.Text, typing.Union[str,DatasetBase]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "bool",
                    "None"
                ],
                "gallery_and_probe": [
                    "str",
                    "int",
                    "float",
                    "None"
                ]
            }
        },
        "COXFaceDB._get_id_map_for_scenario": {
            "name": "_get_id_map_for_scenario",
            "location": 398,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "scenario": [
                    "str"
                ]
            }
        },
        "COXFaceDB._get_ids_per_scenario": {
            "name": "_get_ids_per_scenario",
            "location": 407,
            "return": [
                "list[list[bytes]]"
            ],
            "arguments": {
                "self": [],
                "subset": [
                    "str"
                ],
                "scenario": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "COXFaceDB._get_v2s_round_camera": {
            "name": "_get_v2s_round_camera",
            "location": 426,
            "return": [
                "DatasetBase"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "camera": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[str,str,str]]"
                ]
            }
        },
        "CVMultiViewWrapper.dataset": {
            "name": "dataset",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVMultiViewWrapper.rounds": {
            "name": "rounds",
            "location": 440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVMultiViewWrapper.__getitem__": {
            "name": "__getitem__",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "typing.Hashable"
                ]
            }
        },
        "CVMultiViewWrapper.__len__": {
            "name": "__len__",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CVMultiViewWrapper.__init__": {
            "name": "__init__",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "bytes"
                ],
                "n_rounds": [
                    "tuple[]",
                    "int"
                ],
                "v2s_gallery": [
                    "float",
                    "str",
                    "bool",
                    "list[int]"
                ]
            }
        },
        "CVMultiViewWrapper._get_rounds": {
            "name": "_get_rounds",
            "location": 456,
            "return": [
                "list[MutiLevelDatasetBase]"
            ],
            "arguments": {
                "self": [],
                "dataset": [],
                "n_rounds": [
                    "int"
                ]
            }
        },
        "CVMultiViewWrapper._get_v2s_gallery": {
            "name": "_get_v2s_gallery",
            "location": 498,
            "return": [
                "DatasetBase"
            ],
            "arguments": {
                "self": [],
                "view_dataset": []
            }
        },
        "CVMultiViewWrapper._v2s_round": {
            "name": "_v2s_round",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "round": [],
                "gallery_and_probe": [
                    "str",
                    "bytes",
                    "typing.Sequence[dict[str, typing.Any]]"
                ]
            }
        },
        "CVMultiViewWrapper.get_v2s": {
            "name": "get_v2s",
            "location": 528,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "gallery_and_probe": [
                    "bool"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "MMF.__init__": {
            "name": "__init__",
            "location": 541,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_directory": [
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[Any,Any, bool]"
                ]
            }
        },
        "MMF._read_dataset": {
            "name": "_read_dataset",
            "location": 544,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadableMultiLevelDatasetBase._scrub_dataset_directory.scrub": {
            "name": "scrub",
            "location": 159,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "dataset": []
            }
        },
        "ReadableMultiLevelDatasetBase._prefix_dataset_directory.prefix": {
            "name": "prefix",
            "location": 171,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "dataset": []
            }
        },
        "Synthetic._build_filter.list_to_or_regex": {
            "name": "list_to_or_regex",
            "location": 252,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "l": []
            }
        },
        "Synthetic._build_filter.get": {
            "name": "get",
            "location": 260,
            "return": [],
            "arguments": {
                "filter": [],
                "default": []
            }
        },
        "Synthetic._build_filter.filter": {
            "name": "filter",
            "location": 276,
            "return": [
                "DatasetBase"
            ],
            "arguments": {
                "ds": []
            }
        },
        "MMF._read_dataset.get_images": {
            "name": "get_images",
            "location": 549,
            "return": [
                "list[tuple[]]"
            ],
            "arguments": {
                "subset": []
            }
        },
        "Synthetic._build_filter.identity": {
            "name": "identity",
            "location": 248,
            "return": [],
            "arguments": {
                "ds": []
            }
        }
    },
    "freidds-master/freidds/__init__.py": {},
    "freidds-master/tests/dataset_test.py": {
        "DatasetBaseBasic.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetBaseBasic.test_init": {
            "name": "test_init",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetBaseBasic.test_iterator": {
            "name": "test_iterator",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetBaseBasic.test_as_target_to_source_list": {
            "name": "test_as_target_to_source_list",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetBaseBasic.test_as_column_lists": {
            "name": "test_as_column_lists",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiLevelDatasetBaseBasic.setUp": {
            "name": "setUp",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiLevelDatasetBaseBasic.test_init": {
            "name": "test_init",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiLevelDatasetBaseBasic.test_iterator": {
            "name": "test_iterator",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiLevelDatasetBaseBasic.test_as_target_to_source_list": {
            "name": "test_as_target_to_source_list",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGFace2Tests.setUp": {
            "name": "setUp",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGFace2Tests.test_init": {
            "name": "test_init",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGFace2Tests.test_v2s_dataset": {
            "name": "test_v2s_dataset",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGFace2Tests.test_init_cache_created": {
            "name": "test_init_cache_created",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VGGFace2Tests.test_init_cache_read": {
            "name": "test_init_cache_read",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntheticTests.setUp": {
            "name": "setUp",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntheticTests.test_init": {
            "name": "test_init",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntheticTests.test_filters": {
            "name": "test_filters",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntheticTests.test_v2s_dataset": {
            "name": "test_v2s_dataset",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntheticTests.test_init_cache_created": {
            "name": "test_init_cache_created",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntheticTests.test_init_cache_read": {
            "name": "test_init_cache_read",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntheticTests.test_init_cache_read_with_filters": {
            "name": "test_init_cache_read_with_filters",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyntheticTests.test_init_cache_read_with_filters2": {
            "name": "test_init_cache_read_with_filters2",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COXFaceDBTests.setUp": {
            "name": "setUp",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COXFaceDBTests.test_init": {
            "name": "test_init",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COXFaceDBTests.test_v2s_dataset": {
            "name": "test_v2s_dataset",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COXFaceDBTests.test_v2s_dataset_gallery_and_probe": {
            "name": "test_v2s_dataset_gallery_and_probe",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COXFaceDBTests.test_init_cache_created": {
            "name": "test_init_cache_created",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "COXFaceDBTests.test_init_cache_read": {
            "name": "test_init_cache_read",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MMFTests.setUp": {
            "name": "setUp",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MMFTests.test_init": {
            "name": "test_init",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MMFTests.test_ignore_filters_kwarg": {
            "name": "test_ignore_filters_kwarg",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CVMultiViewWrapperTestsWithMMF.setUp": {
            "name": "setUp",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CVMultiViewWrapperTestsWithMMF.test_init": {
            "name": "test_init",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CVMultiViewWrapperTestsWithMMF.test_v2s_dataset_gallery_and_probe": {
            "name": "test_v2s_dataset_gallery_and_probe",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "fsdl-text-recognizer-master/admin/endpoint_tester/app.py": {
        "url_for_get": {
            "name": "url_for_get",
            "location": 15,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "api_url": [
                    "str"
                ],
                "img_url": [
                    "str"
                ]
            }
        },
        "data_for_post": {
            "name": "data_for_post",
            "location": 20,
            "return": [
                "dict[typing.Text, typing.Text]"
            ],
            "arguments": {
                "api_url": [
                    "bool",
                    "typing.BinaryIO",
                    "None",
                    "list[typing.Union[str,int]]"
                ],
                "img_path": [
                    "str"
                ]
            }
        },
        "build_get_calls": {
            "name": "build_get_calls",
            "location": 27,
            "return": [
                "list[]"
            ],
            "arguments": {
                "api_url": [
                    "str"
                ],
                "img_urls": [
                    "str"
                ]
            }
        },
        "build_post_calls": {
            "name": "build_post_calls",
            "location": 32,
            "return": [
                "list[]"
            ],
            "arguments": {
                "api_url": [
                    "str",
                    "bytearray"
                ],
                "local_images": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fsdl-text-recognizer-master/admin/endpoint_tester/make_paths_txt.py": {},
    "fsdl-text-recognizer-master/admin/handwriting_data_gathering/output_markdown.py": {
        "main": {
            "name": "main",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fsdl-text-recognizer-master/admin/tasks/subset_repo_for_labs.py": {
        "_filter_your_code_blocks": {
            "name": "_filter_your_code_blocks",
            "location": 37,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "lines": [
                    "list[str]",
                    "bytes",
                    "str"
                ],
                "lab_number": [
                    "str",
                    "int",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "_filter_hidden_blocks": {
            "name": "_filter_hidden_blocks",
            "location": 61,
            "return": [
                "tuple[typing.Union[str,str]]",
                "list[tuple[typing.Union[str,str]]]",
                "list[list[str]]",
                "list[typing.Union[str,tuple[typing.Union[str,str]],list[str]]]"
            ],
            "arguments": {
                "lines": [
                    "tuple[typing.Union[str,str]]",
                    "list[tuple[typing.Union[str,str]]]",
                    "list[list[str]]"
                ],
                "lab_number": [
                    "int",
                    "float",
                    "list[str]"
                ]
            }
        },
        "_replace_data_dirname": {
            "name": "_replace_data_dirname",
            "location": 83,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "lines": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "_copy_files_for_lab": {
            "name": "_copy_files_for_lab",
            "location": 92,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "info": [
                    "str",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "lab_number": [
                    "bool"
                ],
                "lab_output_dir": [
                    "bool"
                ]
            }
        },
        "_process_new_files": {
            "name": "_process_new_files",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "new_paths": [
                    "list[str]",
                    "str"
                ],
                "lab_number": [
                    "str",
                    "int",
                    "list[tuple[typing.Union[str,typing.Any]]]"
                ],
                "filter_your_code": [
                    "bool"
                ],
                "filter_hidden": [
                    "bool"
                ],
                "replace_data_dirname": [
                    "bool"
                ]
            }
        },
        "subset_repo": {
            "name": "subset_repo",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [],
                "output_dirname": [
                    "str",
                    "typing.BinaryIO",
                    "typing.Callable[str, str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fsdl-text-recognizer-master/api/app.py": {
        "index": {
            "name": "index",
            "location": 16,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "predict": {
            "name": "predict",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "_load_image": {
            "name": "_load_image",
            "location": 34,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fsdl-text-recognizer-master/api/__init__.py": {},
    "fsdl-text-recognizer-master/api/tests/test_app.py": {
        "TestIntegrations.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegrations.test_index": {
            "name": "test_index",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntegrations.test_predict": {
            "name": "test_predict",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/evaluation/evaluate_character_predictor.py": {
        "TestEvaluateCharacterPredictor.test_evaluate": {
            "name": "test_evaluate",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/evaluation/evaluate_line_predictor.py": {
        "TestEvaluateLinePredictorEmnist.test_evaluate": {
            "name": "test_evaluate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEvaluateLinePredictorIam.test_evaluate": {
            "name": "test_evaluate",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/character_predictor.py": {
        "CharacterPredictor.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CharacterPredictor.predict": {
            "name": "predict",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "image_or_filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "CharacterPredictor.evaluate": {
            "name": "evaluate",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/line_predictor.py": {
        "LinePredictor.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_cls": []
            }
        },
        "LinePredictor.predict": {
            "name": "predict",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "image_or_filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "LinePredictor.evaluate": {
            "name": "evaluate",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "dataset": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/paragraph_text_recognizer.py": {
        "_find_line_bounding_boxes": {
            "name": "_find_line_bounding_boxes",
            "location": 84,
            "return": [],
            "arguments": {
                "line_segmentation": [
                    "list[bytes]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "_resize_image_for_line_detector_model": {
            "name": "_resize_image_for_line_detector_model",
            "location": 101,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "image": [],
                "max_shape": [
                    "int",
                    "str"
                ]
            }
        },
        "ParagraphTextRecognizer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParagraphTextRecognizer.predict": {
            "name": "predict",
            "location": 23,
            "return": [
                "tuple[typing.Union[str,list[],dict[, ],list[dict[str, typing.Any]],dict[str, typing.Any],tuple[]]]"
            ],
            "arguments": {
                "self": [],
                "image_or_filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "ParagraphTextRecognizer._get_line_region_crops": {
            "name": "_get_line_region_crops",
            "location": 43,
            "return": [
                "list[typing.Union[int,str]]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "tuple[typing.Union[int,int,int]]",
                    "str"
                ],
                "min_crop_len_factor": [
                    "int"
                ]
            }
        },
        "ParagraphTextRecognizer._prepare_image_for_line_detector_model": {
            "name": "_prepare_image_for_line_detector_model",
            "location": 59,
            "return": [
                "tuple[typing.Union[int,str]]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "tuple[typing.Union[int,int,int]]",
                    "float"
                ]
            }
        },
        "ParagraphTextRecognizer._prepare_image_for_line_predictor_model": {
            "name": "_prepare_image_for_line_predictor_model",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "_find_line_bounding_boxes._find_line_bounding_boxes_in_channel": {
            "name": "_find_line_bounding_boxes_in_channel",
            "location": 87,
            "return": [],
            "arguments": {
                "line_segmentation_channel": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/util.py": {
        "read_image": {
            "name": "read_image",
            "location": 18,
            "return": [],
            "arguments": {
                "image_uri": [
                    "str",
                    "bool",
                    "typing.Callable[, ]"
                ],
                "grayscale": [
                    "bool"
                ]
            }
        },
        "read_b64_image": {
            "name": "read_b64_image",
            "location": 44,
            "return": [],
            "arguments": {
                "b64_string": [
                    "str"
                ],
                "grayscale": [
                    "bool"
                ]
            }
        },
        "write_image": {
            "name": "write_image",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "str",
                    "typing.IO",
                    "bytes",
                    "float",
                    "int"
                ],
                "filename": [
                    "str",
                    "typing.IO",
                    "bytes",
                    "float",
                    "int"
                ]
            }
        },
        "compute_sha256": {
            "name": "compute_sha256",
            "location": 60,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "download_url": {
            "name": "download_url",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "int",
                    "str",
                    "bytes",
                    "None"
                ],
                "filename": [
                    "int",
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "download_urls": {
            "name": "download_urls",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "urls": [
                    "str",
                    "int",
                    "typing.Iterable[tuple[typing.Union[str,str,str]]]"
                ],
                "filenames": [
                    "str",
                    "int",
                    "typing.Iterable[tuple[typing.Union[str,str,str]]]"
                ]
            }
        },
        "read_image.read_image_from_filename": {
            "name": "read_image_from_filename",
            "location": 21,
            "return": [],
            "arguments": {
                "image_filename": [],
                "imread_flag": []
            }
        },
        "read_image.read_image_from_url": {
            "name": "read_image_from_url",
            "location": 24,
            "return": [],
            "arguments": {
                "image_url": [],
                "imread_flag": []
            }
        },
        "TqdmUpTo.update_to": {
            "name": "update_to",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocks": [
                    "int"
                ],
                "bsize": [
                    "int"
                ],
                "tsize": [
                    "None",
                    "str",
                    "bool",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/__init__.py": {},
    "fsdl-text-recognizer-master/text_recognizer/datasets/dataset.py": {
        "_download_raw_dataset": {
            "name": "_download_raw_dataset",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "metadata": [
                    "str"
                ]
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "Dataset.data_dirname": {
            "name": "data_dirname",
            "location": 13,
            "return": [],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "Dataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/datasets/dataset_sequence.py": {
        "_shuffle": {
            "name": "_shuffle",
            "location": 6,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "DatasetSequence.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "str",
                    "None"
                ],
                "y": [
                    "int",
                    "None",
                    "dict[, ]",
                    "str"
                ],
                "batch_size": [
                    "int"
                ],
                "augment_fn": [
                    "None",
                    "bool",
                    "str"
                ],
                "format_fn": [
                    "None",
                    "bool",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "DatasetSequence.__len__": {
            "name": "__len__",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetSequence.__getitem__": {
            "name": "__getitem__",
            "location": 28,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "float",
                    "list[int]"
                ]
            }
        },
        "DatasetSequence.on_epoch_end": {
            "name": "on_epoch_end",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/datasets/emnist_dataset.py": {
        "_download_and_process_emnist": {
            "name": "_download_and_process_emnist",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_process_raw_dataset": {
            "name": "_process_raw_dataset",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "None"
                ]
            }
        },
        "_sample_to_balance": {
            "name": "_sample_to_balance",
            "location": 142,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "x": [
                    "typing.Iterable[list[T]]",
                    "float",
                    "int",
                    "str"
                ],
                "y": []
            }
        },
        "_augment_emnist_mapping": {
            "name": "_augment_emnist_mapping",
            "location": 157,
            "return": [
                "dict[typing.Union[dict[, ],dict[str, typing.Any],dict[str, set[str]]], dict[, ]]"
            ],
            "arguments": {
                "mapping": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, set[str]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EmnistDataset.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subsample_fraction": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "EmnistDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmnistDataset._subsample": {
            "name": "_subsample",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmnistDataset.y_train": {
            "name": "y_train",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmnistDataset.y_test": {
            "name": "y_test",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmnistDataset.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/datasets/emnist_lines_dataset.py": {
        "get_samples_by_char": {
            "name": "get_samples_by_char",
            "location": 121,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "samples": [
                    "Exception",
                    "None",
                    "list[list[int]]",
                    "dict[, ]"
                ],
                "labels": [],
                "mapping": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "bool"
                ]
            }
        },
        "select_letter_samples_for_string": {
            "name": "select_letter_samples_for_string",
            "location": 128,
            "return": [
                "list[]"
            ],
            "arguments": {
                "string": [
                    "list[str]"
                ],
                "samples_by_char": [
                    "str"
                ]
            }
        },
        "construct_image_from_string": {
            "name": "construct_image_from_string",
            "location": 140,
            "return": [],
            "arguments": {
                "string": [
                    "str"
                ],
                "samples_by_char": [
                    "str"
                ],
                "min_overlap": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "max_overlap": [
                    "int",
                    "str",
                    "list[str]"
                ]
            }
        },
        "create_dataset_of_images": {
            "name": "create_dataset_of_images",
            "location": 156,
            "return": [
                "tuple[list[typing.Union[str,list[None],typing.OrderedDict,dict[str, str],None]]]"
            ],
            "arguments": {
                "N": [
                    "int",
                    "tuple[]"
                ],
                "samples_by_char": [
                    "int"
                ],
                "sentence_generator": [],
                "min_overlap": [
                    "int",
                    "dict[str, typing.Any]",
                    "tuple[]",
                    "typing.Callable[, ]"
                ],
                "max_overlap": [
                    "int",
                    "dict[str, typing.Any]",
                    "tuple[]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "convert_strings_to_categorical_labels": {
            "name": "convert_strings_to_categorical_labels",
            "location": 178,
            "return": [],
            "arguments": {
                "labels": [],
                "mapping": []
            }
        },
        "main": {
            "name": "main",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "EmnistLinesDataset.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_length": [
                    "int"
                ],
                "min_overlap": [
                    "int"
                ],
                "max_overlap": [
                    "float"
                ],
                "num_train": [
                    "int"
                ],
                "num_test": [
                    "int"
                ]
            }
        },
        "EmnistLinesDataset.data_filename": {
            "name": "data_filename",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmnistLinesDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmnistLinesDataset.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmnistLinesDataset._load_data": {
            "name": "_load_data",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmnistLinesDataset._generate_data": {
            "name": "_generate_data",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "split": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/datasets/fsdl_handwriting_dataset.py": {
        "_extract_id_and_data": {
            "name": "_extract_id_and_data",
            "location": 60,
            "return": [
                "tuple[typing.Union[str,dict[typing.Text, typing.Union[str,list[dict[typing.Text, int]],list[typing.Text]]]]]"
            ],
            "arguments": {
                "page_datum": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FsdlHandwritingDataset.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsdlHandwritingDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsdlHandwritingDataset.page_filenames": {
            "name": "page_filenames",
            "location": 37,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsdlHandwritingDataset._download_pages": {
            "name": "_download_pages",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsdlHandwritingDataset.line_regions_by_id": {
            "name": "line_regions_by_id",
            "location": 47,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsdlHandwritingDataset.line_strings_by_id": {
            "name": "line_strings_by_id",
            "location": 52,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FsdlHandwritingDataset.__repr__": {
            "name": "__repr__",
            "location": 56,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/datasets/iam_dataset.py": {
        "_extract_raw_dataset": {
            "name": "_extract_raw_dataset",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "metadata": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "_get_line_strings_from_xml_file": {
            "name": "_get_line_strings_from_xml_file",
            "location": 82,
            "return": [
                "list[]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_get_line_regions_from_xml_file": {
            "name": "_get_line_regions_from_xml_file",
            "location": 89,
            "return": [
                "list[]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_get_line_region_from_xml_element": {
            "name": "_get_line_region_from_xml_element",
            "location": 96,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "xml_line": []
            }
        },
        "main": {
            "name": "main",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IamDataset.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamDataset.xml_filenames": {
            "name": "xml_filenames",
            "location": 43,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamDataset.form_filenames": {
            "name": "form_filenames",
            "location": 47,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamDataset._download_iam": {
            "name": "_download_iam",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamDataset.form_filenames_by_id": {
            "name": "form_filenames_by_id",
            "location": 58,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamDataset.line_strings_by_id": {
            "name": "line_strings_by_id",
            "location": 62,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamDataset.line_regions_by_id": {
            "name": "line_regions_by_id",
            "location": 67,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamDataset.__repr__": {
            "name": "__repr__",
            "location": 71,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/datasets/iam_lines_dataset.py": {
        "main": {
            "name": "main",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IamLinesDataset.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subsample_fraction": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "IamLinesDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamLinesDataset._subsample": {
            "name": "_subsample",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamLinesDataset.y_train": {
            "name": "y_train",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IamLinesDataset.y_test": {
            "name": "y_test",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IamLinesDataset.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/datasets/iam_paragraphs_dataset.py": {
        "_get_max_paragraph_crop_height": {
            "name": "_get_max_paragraph_crop_height",
            "location": 134,
            "return": [
                "int"
            ],
            "arguments": {
                "line_regions_by_id": []
            }
        },
        "_crop_paragraph_image": {
            "name": "_crop_paragraph_image",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "line_regions": [
                    "str",
                    "dict[str, int]",
                    "tuple[typing.Union[int,int]]"
                ],
                "crop_dims": [
                    "str"
                ],
                "final_dims": [
                    "str",
                    "list[numpy.ndarray]",
                    "list[float]"
                ]
            }
        },
        "_load_iam_paragraphs": {
            "name": "_load_iam_paragraphs",
            "location": 192,
            "return": [
                "tuple[typing.Union[float,list[],int,dict[str, typing.Any],str,tuple[typing.Union[int,int]],list[float]]]"
            ],
            "arguments": {}
        },
        "_get_random_split": {
            "name": "_get_random_split",
            "location": 213,
            "return": [
                "tuple[typing.Union[int,str,list[list[typing.Any]],set[]]]"
            ],
            "arguments": {
                "num_total": [
                    "int",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IamParagraphsDataset.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subsample_fraction": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "IamParagraphsDataset.load_or_generate_data": {
            "name": "load_or_generate_data",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamParagraphsDataset.x_train": {
            "name": "x_train",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IamParagraphsDataset.y_train": {
            "name": "y_train",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IamParagraphsDataset.x_test": {
            "name": "x_test",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IamParagraphsDataset.y_test": {
            "name": "y_test",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IamParagraphsDataset.ids_train": {
            "name": "ids_train",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IamParagraphsDataset.ids_test": {
            "name": "ids_test",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IamParagraphsDataset.get_x_and_y_from_id": {
            "name": "get_x_and_y_from_id",
            "location": 75,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "tuple[typing.Union[str,str,str]]",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "IamParagraphsDataset._process_iam_paragraphs": {
            "name": "_process_iam_paragraphs",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamParagraphsDataset._decide_on_crop_dims": {
            "name": "_decide_on_crop_dims",
            "location": 95,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamParagraphsDataset._subsample": {
            "name": "_subsample",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IamParagraphsDataset.__repr__": {
            "name": "__repr__",
            "location": 124,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/datasets/sentence_generator.py": {
        "brown_text": {
            "name": "brown_text",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "load_nltk_brown_corpus": {
            "name": "load_nltk_brown_corpus",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "SentenceGenerator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_length": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "SentenceGenerator.generate": {
            "name": "generate",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "max_length": [
                    "None",
                    "int",
                    "float"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/datasets/__init__.py": {},
    "fsdl-text-recognizer-master/text_recognizer/models/base.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_cls": [
                    "set[str]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]",
                    "dict[str, bool]",
                    "str",
                    "dict[str, str]"
                ],
                "network_fn": [
                    "int",
                    "set[str]",
                    "None",
                    "bytes"
                ],
                "dataset_args": [
                    "None",
                    "int",
                    "float",
                    "str"
                ],
                "network_args": [
                    "None",
                    "bool"
                ]
            }
        },
        "Model.image_shape": {
            "name": "image_shape",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.weights_filename": {
            "name": "weights_filename",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.fit": {
            "name": "fit",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset": [
                    "float",
                    "bool",
                    "None"
                ],
                "batch_size": [
                    "int"
                ],
                "epochs": [
                    "int"
                ],
                "augment_val": [
                    "bool"
                ],
                "callbacks": [
                    "None",
                    "tuple[typing.Union[str,int]]",
                    "int",
                    "float"
                ]
            }
        },
        "Model.evaluate": {
            "name": "evaluate",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "tuple[typing.Union[int,int]]",
                    "int",
                    "float",
                    "str"
                ],
                "batch_size": [
                    "int"
                ],
                "_verbose": [
                    "bool"
                ]
            }
        },
        "Model.loss": {
            "name": "loss",
            "location": 88,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.optimizer": {
            "name": "optimizer",
            "location": 91,
            "return": [
                "RMSprop"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.metrics": {
            "name": "metrics",
            "location": 94,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.load_weights": {
            "name": "load_weights",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.save_weights": {
            "name": "save_weights",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/models/character_model.py": {
        "CharacterModel.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_cls": [],
                "network_fn": [],
                "dataset_args": [
                    "None",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Callable[, ]"
                ],
                "network_args": [
                    "None",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "CharacterModel.predict_on_image": {
            "name": "predict_on_image",
            "location": 23,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/models/line_detector_model.py": {
        "LineDetectorModel.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_cls": [],
                "network_fn": [],
                "dataset_args": [
                    "None",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Callable[, ]"
                ],
                "network_args": [
                    "None",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "LineDetectorModel.loss": {
            "name": "loss",
            "location": 41,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineDetectorModel.optimizer": {
            "name": "optimizer",
            "location": 44,
            "return": [
                "Adam"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineDetectorModel.metrics": {
            "name": "metrics",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineDetectorModel.augment_batch": {
            "name": "augment_batch",
            "location": 50,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "x_batch": [
                    "float",
                    "bool"
                ],
                "y_batch": [
                    "float",
                    "bool"
                ]
            }
        },
        "LineDetectorModel._augment_sample": {
            "name": "_augment_sample",
            "location": 55,
            "return": [
                "tuple[typing.Union[int,str,list[int],list[],float,list[str],dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": []
            }
        },
        "LineDetectorModel.predict_on_image": {
            "name": "predict_on_image",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "typing.Iterable[T]",
                    "int"
                ]
            }
        },
        "LineDetectorModel.evaluate": {
            "name": "evaluate",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "batch_size": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/models/line_model.py": {
        "LineModel.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_cls": [],
                "network_fn": [],
                "dataset_args": [
                    "None",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Callable[, ]"
                ],
                "network_args": [
                    "None",
                    "dict[, ]",
                    "typing.Type",
                    "typing.Callable[, ]"
                ]
            }
        },
        "LineModel.evaluate": {
            "name": "evaluate",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "tuple[typing.Union[float,float]]",
                    "list[]",
                    "int"
                ],
                "y": [
                    "typing.Type",
                    "dict[, ]",
                    "list[]"
                ],
                "batch_size": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "LineModel.predict_on_image": {
            "name": "predict_on_image",
            "location": 56,
            "return": [
                "tuple[typing.Union[str,dict[int, str],dict[str, str],list[str]]]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/models/line_model_ctc.py": {
        "format_batch_ctc": {
            "name": "format_batch_ctc",
            "location": 109,
            "return": [
                "tuple[dict[typing.Text, typing.Union[list[typing.AnyStr],list[list[]],float,dict[str, int]]]]"
            ],
            "arguments": {
                "batch_x": [
                    "list[typing.AnyStr]",
                    "list[list[]]",
                    "float",
                    "dict[str, int]"
                ],
                "batch_y": []
            }
        },
        "LineModelCtc.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_cls": [],
                "network_fn": [],
                "dataset_args": [
                    "None",
                    "list[]",
                    "dict[, ]",
                    "int",
                    "typing.Callable[..., typing.Any]"
                ],
                "network_args": [
                    "None",
                    "list[]",
                    "dict[, ]",
                    "int",
                    "typing.Callable[..., typing.Any]"
                ]
            }
        },
        "LineModelCtc.loss": {
            "name": "loss",
            "location": 38,
            "return": [
                "dict[typing.Text, typing.Callable[, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineModelCtc.metrics": {
            "name": "metrics",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LineModelCtc.evaluate": {
            "name": "evaluate",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str"
                ],
                "y": [
                    "float"
                ],
                "batch_size": [
                    "int"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "LineModelCtc.predict_on_image": {
            "name": "predict_on_image",
            "location": 84,
            "return": [
                "tuple[typing.Union[str,dict[int, str],dict[str, str]]]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/models/__init__.py": {},
    "fsdl-text-recognizer-master/text_recognizer/networks/ctc.py": {
        "ctc_decode": {
            "name": "ctc_decode",
            "location": 7,
            "return": [],
            "arguments": {
                "y_pred": [
                    "bool",
                    "str"
                ],
                "input_length": [
                    "bool",
                    "str"
                ],
                "max_output_length": [
                    "bool"
                ]
            }
        },
        "ctc_decode.pad": {
            "name": "pad",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "ctc_decode.noop": {
            "name": "noop",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/networks/fcn.py": {
        "residual_conv_block": {
            "name": "residual_conv_block",
            "location": 8,
            "return": [
                "int",
                "str",
                "tuple[typing.Union[int,typing.Any]]",
                "tuple[typing.Union[float,float]]",
                "list[]",
                "typing.Final"
            ],
            "arguments": {
                "input_layer": [
                    "list[int]",
                    "str",
                    "int"
                ],
                "kernel_sizes": [
                    "list[int]",
                    "str",
                    "int"
                ],
                "num_filters": [
                    "list[int]",
                    "str",
                    "int"
                ],
                "dilation_rates": [
                    "list[int]",
                    "str",
                    "int"
                ],
                "activation": [
                    "str",
                    "list[int]",
                    "int"
                ]
            }
        },
        "fcn": {
            "name": "fcn",
            "location": 27,
            "return": [
                "Model"
            ],
            "arguments": {
                "_input_shape": [
                    "bool"
                ],
                "output_shape": [
                    "str",
                    "tuple[int]"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/networks/lenet.py": {
        "lenet": {
            "name": "lenet",
            "location": 9,
            "return": [],
            "arguments": {
                "input_shape": [],
                "output_shape": [
                    "str",
                    "tuple[int]"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/networks/line_cnn_all_conv.py": {
        "line_cnn_all_conv": {
            "name": "line_cnn_all_conv",
            "location": 10,
            "return": [],
            "arguments": {
                "input_shape": [
                    "tuple[int]",
                    "int",
                    "str",
                    "None",
                    "list[int]"
                ],
                "output_shape": [
                    "tuple[int]",
                    "None",
                    "bytes",
                    "list[str]"
                ],
                "window_width": [
                    "int"
                ],
                "window_stride": [
                    "int"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/networks/line_lstm_ctc.py": {
        "line_lstm_ctc": {
            "name": "line_lstm_ctc",
            "location": 11,
            "return": [
                "list[]"
            ],
            "arguments": {
                "input_shape": [
                    "int",
                    "str",
                    "frozenset"
                ],
                "output_shape": [
                    "tuple[int]",
                    "bytes",
                    "None",
                    "list[str]"
                ],
                "window_width": [
                    "int"
                ],
                "window_stride": [
                    "int"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/networks/misc.py": {
        "slide_window": {
            "name": "slide_window",
            "location": 6,
            "return": [],
            "arguments": {
                "image": [
                    "float",
                    "list[int]",
                    "int"
                ],
                "window_width": [
                    "int"
                ],
                "window_stride": [
                    "int"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/networks/mlp.py": {
        "mlp": {
            "name": "mlp",
            "location": 8,
            "return": [],
            "arguments": {
                "input_shape": [
                    "tuple[int]",
                    "float",
                    "bool",
                    "typing.Collection",
                    "None"
                ],
                "output_shape": [
                    "str"
                ],
                "layer_size": [
                    "int"
                ],
                "dropout_amount": [
                    "float"
                ],
                "num_layers": [
                    "int"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/networks/__init__.py": {},
    "fsdl-text-recognizer-master/text_recognizer/tests/test_character_predictor.py": {
        "TestCharacterPredictor.test_filename": {
            "name": "test_filename",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/tests/test_line_predictor.py": {
        "TestEmnistLinePredictor.test_filename": {
            "name": "test_filename",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmnistLinePredictorVariableImageWidth.test_filename": {
            "name": "test_filename",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIamLinePredictor.test_filename": {
            "name": "test_filename",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/tests/test_paragraph_text_recognizer.py": {
        "TestParagraphTextRecognizer.test_filename": {
            "name": "test_filename",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/tests/__init__.py": {},
    "fsdl-text-recognizer-master/text_recognizer/tests/support/create_emnist_lines_support_files.py": {
        "create_emnist_lines_support_files": {
            "name": "create_emnist_lines_support_files",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/tests/support/create_emnist_support_files.py": {
        "create_emnist_support_files": {
            "name": "create_emnist_support_files",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fsdl-text-recognizer-master/text_recognizer/tests/support/create_iam_lines_support_files.py": {
        "create_iam_lines_support_files": {
            "name": "create_iam_lines_support_files",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fsdl-text-recognizer-master/training/gpu_manager.py": {
        "GPUManager.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool"
                ]
            }
        },
        "GPUManager.get_free_gpu": {
            "name": "get_free_gpu",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GPUManager._get_free_gpu": {
            "name": "_get_free_gpu",
            "location": 33,
            "return": [
                "list[int]",
                "int",
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "fsdl-text-recognizer-master/training/prepare_experiments.py": {
        "run_experiments": {
            "name": "run_experiments",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "experiments_filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fsdl-text-recognizer-master/training/run_experiment.py": {
        "run_experiment": {
            "name": "run_experiment",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "experiment_config": [],
                "save_weights": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str",
                    "None"
                ],
                "gpu_ind": [
                    "bool",
                    "float"
                ],
                "use_wandb": [
                    "bool"
                ]
            }
        },
        "_parse_args": {
            "name": "_parse_args",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fsdl-text-recognizer-master/training/run_sweep.py": {
        "args_to_json": {
            "name": "args_to_json",
            "location": 19,
            "return": [
                "tuple[list[str]]"
            ],
            "arguments": {
                "default_config": [],
                "preserve_args": [
                    "tuple[typing.Text]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fsdl-text-recognizer-master/training/update_metadata.py": {
        "_get_metadata_filename": {
            "name": "_get_metadata_filename",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "fsdl-text-recognizer-master/training/util.py": {
        "train_model": {
            "name": "train_model",
            "location": 38,
            "return": [],
            "arguments": {
                "model": [],
                "dataset": [
                    "int",
                    "float"
                ],
                "epochs": [
                    "int",
                    "float",
                    "None"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "None"
                ],
                "use_wandb": [
                    "bool"
                ]
            }
        },
        "WandbImageLogger.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_wrapper": [
                    "str",
                    "bool",
                    "list[]"
                ],
                "dataset": [
                    "float",
                    "list[]",
                    "int",
                    "str"
                ],
                "example_count": [
                    "int"
                ]
            }
        },
        "WandbImageLogger.on_epoch_end": {
            "name": "on_epoch_end",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "int",
                    "dict[, ]",
                    "None",
                    "str",
                    "list[float]"
                ],
                "logs": [
                    "None",
                    "int",
                    "dict[, ]",
                    "str",
                    "list[float]"
                ]
            }
        }
    },
    "fsdl-text-recognizer-master/training/__init__.py": {}
}
{
    "funpy-master/setup.py": {},
    "funpy-master/tasks.py": {
        "venv": {
            "name": "venv",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [],
                "force": [
                    "bool"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "type": {
            "name": "type",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "lint": {
            "name": "lint",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "isort": {
            "name": "isort",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "cover": {
            "name": "cover",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "format": {
            "name": "format",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "docs": {
            "name": "docs",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "hook": {
            "name": "hook",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "clean": {
            "name": "clean",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "build": {
            "name": "build",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "deploy": {
            "name": "deploy",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "commit": {
            "name": "commit",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        }
    },
    "funpy-master/funpy/fn.py": {
        "copy": {
            "name": "copy",
            "location": 17,
            "return": [],
            "arguments": {
                "x": [
                    "bool"
                ],
                "deep": [
                    "bool"
                ]
            }
        },
        "copies": {
            "name": "copies",
            "location": 29,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float"
                ],
                "n": [
                    "int"
                ],
                "deep": [
                    "bool"
                ]
            }
        },
        "flip": {
            "name": "flip",
            "location": 52,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "partialfp": {
            "name": "partialfp",
            "location": 66,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Callable[, ]",
                    "dict[, ]"
                ]
            }
        },
        "ident": {
            "name": "ident",
            "location": 77,
            "return": [
                "bool",
                "float",
                "typing.Iterable[typing.Iterable[float]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "constantly": {
            "name": "constantly",
            "location": 90,
            "return": [],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 105,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ],
                "g": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "comp": {
            "name": "comp",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "juxt": {
            "name": "juxt",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "pre": {
            "name": "pre",
            "location": 168,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Type",
                    "int"
                ],
                "do": []
            }
        },
        "post": {
            "name": "post",
            "location": 187,
            "return": [],
            "arguments": {
                "f": [
                    "bool",
                    "typing.Callable[[], None]",
                    "str",
                    "None"
                ],
                "do": []
            }
        },
        "fnil": {
            "name": "fnil",
            "location": 208,
            "return": [],
            "arguments": {
                "f": [
                    "bool",
                    "typing.Iterable[typing.Any]"
                ],
                "x": [
                    "bool",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "safe": {
            "name": "safe",
            "location": 224,
            "return": [],
            "arguments": {
                "f": [
                    "bool"
                ],
                "x": [
                    "None",
                    "bool"
                ]
            }
        },
        "pure": {
            "name": "pure",
            "location": 245,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ],
                "deep": [
                    "bool"
                ]
            }
        },
        "fluent": {
            "name": "fluent",
            "location": 265,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Iterable[str]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "complement": {
            "name": "complement",
            "location": 283,
            "return": [],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "flip.wrapped": {
            "name": "wrapped",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "constantly.constant": {
            "name": "constant",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "compose.composed": {
            "name": "composed",
            "location": 112,
            "return": [],
            "arguments": {}
        },
        "juxt.juxted": {
            "name": "juxted",
            "location": 151,
            "return": [
                "tuple[]"
            ],
            "arguments": {}
        },
        "pre.wrapped": {
            "name": "wrapped",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "post.wrapped": {
            "name": "wrapped",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "fnil.wrapped": {
            "name": "wrapped",
            "location": 218,
            "return": [],
            "arguments": {
                "z": []
            }
        },
        "safe.wrapped": {
            "name": "wrapped",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "pure.wrapped": {
            "name": "wrapped",
            "location": 255,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "fluent.wrapped": {
            "name": "wrapped",
            "location": 275,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "complement.wrapped": {
            "name": "wrapped",
            "location": 293,
            "return": [],
            "arguments": {}
        }
    },
    "funpy-master/funpy/io.py": {
        "slurp": {
            "name": "slurp",
            "location": 23,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "spit": {
            "name": "spit",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "s": [
                    "str"
                ],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "interact": {
            "name": "interact",
            "location": 42,
            "return": [],
            "arguments": {
                "f": [
                    "str",
                    "None",
                    "bytes",
                    "typing.BinaryIO",
                    "int"
                ],
                "files": [
                    "None",
                    "str",
                    "bytes",
                    "typing.BinaryIO",
                    "int"
                ],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "unnl": {
            "name": "unnl",
            "location": 62,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "l": [
                    "bytes"
                ]
            }
        },
        "unbl": {
            "name": "unbl",
            "location": 73,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "l": []
            }
        },
        "words": {
            "name": "words",
            "location": 84,
            "return": [
                "typing.Generator[bytes]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "unwords": {
            "name": "unwords",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "l": [
                    "str"
                ]
            }
        },
        "lines": {
            "name": "lines",
            "location": 106,
            "return": [
                "typing.Generator[str]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "unlines": {
            "name": "unlines",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "l": [
                    "str"
                ]
            }
        }
    },
    "funpy-master/funpy/it.py": {
        "mapcat": {
            "name": "mapcat",
            "location": 26,
            "return": [],
            "arguments": {
                "f": [
                    "typing.Type",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]",
                    "int"
                ]
            }
        },
        "mapevery": {
            "name": "mapevery",
            "location": 35,
            "return": [
                "typing.Generator[]",
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "f": [
                    "int",
                    "float"
                ],
                "n": [
                    "int",
                    "None",
                    "bytes",
                    "str"
                ]
            }
        },
        "replace": {
            "name": "replace",
            "location": 50,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "l": [],
                "m": [
                    "int",
                    "str",
                    "float"
                ],
                "d": [
                    "None",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "slide": {
            "name": "slide",
            "location": 71,
            "return": [],
            "arguments": {
                "l": [
                    "int",
                    "str"
                ],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "split": {
            "name": "split",
            "location": 91,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "l": [
                    "int",
                    "float",
                    "str"
                ],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "splitby": {
            "name": "splitby",
            "location": 104,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "l": [
                    "typing.Sized",
                    "int",
                    "float",
                    "typing.Callable[..., bool]",
                    "str"
                ],
                "p": [
                    "bool"
                ]
            }
        },
        "chunk": {
            "name": "chunk",
            "location": 117,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "l": [
                    "str"
                ],
                "n": [
                    "int",
                    "bytes",
                    "float",
                    "list[int]",
                    "None"
                ]
            }
        },
        "chunkby": {
            "name": "chunkby",
            "location": 137,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "l": [
                    "typing.Sized",
                    "int",
                    "float",
                    "typing.Callable[..., bool]",
                    "str"
                ],
                "p": [
                    "bool"
                ]
            }
        },
        "chunkall": {
            "name": "chunkall",
            "location": 147,
            "return": [
                "typing.Generator[tuple[]]"
            ],
            "arguments": {
                "l": [
                    "str"
                ],
                "n": [
                    "int",
                    "bytes",
                    "float",
                    "list[int]",
                    "None"
                ]
            }
        },
        "grouped": {
            "name": "grouped",
            "location": 172,
            "return": [
                "typing.Generator[tuple[typing.Union[list[str],list[int],list[],dict[str, typing.Union[float,str]],list[None],tuple[]]]]"
            ],
            "arguments": {
                "l": [],
                "f": []
            }
        },
        "groupkv": {
            "name": "groupkv",
            "location": 192,
            "return": [
                "typing.Generator[tuple[tuple[]]]"
            ],
            "arguments": {
                "l": [
                    "list[T]",
                    "list[str]",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "member": {
            "name": "member",
            "location": 219,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {
                "l": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "s": []
            }
        },
        "locate": {
            "name": "locate",
            "location": 232,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "l": [
                    "str"
                ],
                "p": [
                    "bool"
                ]
            }
        },
        "dedupe": {
            "name": "dedupe",
            "location": 243,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "l": [],
                "f": []
            }
        },
        "distinct": {
            "name": "distinct",
            "location": 261,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "l": [],
                "f": []
            }
        },
        "len": {
            "name": "len",
            "location": 291,
            "return": [
                "str",
                "list[]",
                "int",
                "tuple[typing.Union[float,float]]"
            ],
            "arguments": {
                "l": [
                    "str"
                ]
            }
        },
        "mult": {
            "name": "mult",
            "location": 305,
            "return": [],
            "arguments": {
                "l": [
                    "str",
                    "float",
                    "typing.Match",
                    "int",
                    "dict[, ]"
                ],
                "start": [
                    "int"
                ]
            }
        },
        "contains": {
            "name": "contains",
            "location": 316,
            "return": [
                "bool"
            ],
            "arguments": {
                "l": [],
                "x": [
                    "float"
                ]
            }
        },
        "quantify": {
            "name": "quantify",
            "location": 327,
            "return": [
                "bool"
            ],
            "arguments": {
                "l": [
                    "typing.Sized",
                    "int",
                    "float",
                    "typing.Callable[..., bool]",
                    "str"
                ],
                "p": [
                    "bool"
                ]
            }
        },
        "consume": {
            "name": "consume",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "l": [
                    "list[T]",
                    "list[str]",
                    "dict[, ]",
                    "list[]"
                ]
            }
        },
        "nth": {
            "name": "nth",
            "location": 352,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "l": [],
                "n": [
                    "int",
                    "None",
                    "bytes",
                    "str"
                ],
                "d": [
                    "None",
                    "int"
                ]
            }
        },
        "first": {
            "name": "first",
            "location": 371,
            "return": [],
            "arguments": {
                "l": [
                    "int"
                ],
                "d": [
                    "None",
                    "int"
                ]
            }
        },
        "second": {
            "name": "second",
            "location": 382,
            "return": [],
            "arguments": {
                "l": [
                    "int"
                ],
                "d": [
                    "None",
                    "int"
                ]
            }
        },
        "third": {
            "name": "third",
            "location": 393,
            "return": [],
            "arguments": {
                "l": [
                    "int"
                ],
                "d": [
                    "None",
                    "int"
                ]
            }
        },
        "last": {
            "name": "last",
            "location": 404,
            "return": [
                "int",
                "None",
                "typing.Callable[, ]",
                "tuple[typing.Union[int,int]]"
            ],
            "arguments": {
                "it": [
                    "tuple[typing.Union[int,int]]"
                ],
                "d": [
                    "None",
                    "int",
                    "typing.Callable[, ]",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "butlast": {
            "name": "butlast",
            "location": 423,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "l": [
                    "typing.Sized",
                    "int",
                    "float",
                    "typing.Callable[..., bool]",
                    "str"
                ]
            }
        },
        "sub": {
            "name": "sub",
            "location": 438,
            "return": [
                "range"
            ],
            "arguments": {
                "l": [
                    "int",
                    "str",
                    "list[]"
                ],
                "start": [
                    "int"
                ],
                "stop": [
                    "int",
                    "str",
                    "list[]"
                ]
            }
        },
        "rest": {
            "name": "rest",
            "location": 449,
            "return": [
                "range"
            ],
            "arguments": {
                "l": [
                    "str",
                    "None",
                    "list[typing.Any]",
                    "int"
                ]
            }
        },
        "take": {
            "name": "take",
            "location": 460,
            "return": [
                "range"
            ],
            "arguments": {
                "l": [
                    "int",
                    "str"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "takenth": {
            "name": "takenth",
            "location": 471,
            "return": [],
            "arguments": {
                "l": [
                    "int",
                    "str",
                    "set[]"
                ],
                "n": [
                    "int",
                    "str",
                    "set[]"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "None",
                    "int",
                    "str",
                    "set[]"
                ]
            }
        },
        "takelast": {
            "name": "takelast",
            "location": 482,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "l": [
                    "int",
                    "str"
                ],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "drop": {
            "name": "drop",
            "location": 499,
            "return": [
                "range"
            ],
            "arguments": {
                "l": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "dropnth": {
            "name": "dropnth",
            "location": 510,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "l": [
                    "str"
                ],
                "n": [
                    "int",
                    "bytes",
                    "float",
                    "list[int]",
                    "None"
                ]
            }
        },
        "droplast": {
            "name": "droplast",
            "location": 525,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "l": [
                    "int",
                    "str"
                ],
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "find": {
            "name": "find",
            "location": 540,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "l": [],
                "p": [
                    "bool"
                ],
                "d": [
                    "None",
                    "int"
                ]
            }
        },
        "pad": {
            "name": "pad",
            "location": 573,
            "return": [],
            "arguments": {
                "l": [
                    "int",
                    "set[]"
                ],
                "d": [
                    "None",
                    "int",
                    "set[]"
                ]
            }
        },
        "cons": {
            "name": "cons",
            "location": 584,
            "return": [
                "typing.Generator[typing.Union[Exception,bool,str]]"
            ],
            "arguments": {
                "l": [
                    "Exception",
                    "bool",
                    "str"
                ],
                "x": [
                    "Exception",
                    "bool",
                    "str"
                ]
            }
        },
        "conj": {
            "name": "conj",
            "location": 594,
            "return": [
                "typing.Generator[typing.Union[Exception,bool,str]]"
            ],
            "arguments": {
                "l": [
                    "Exception",
                    "bool",
                    "str"
                ],
                "x": [
                    "Exception",
                    "bool",
                    "str"
                ]
            }
        },
        "iterate": {
            "name": "iterate",
            "location": 604,
            "return": [
                "typing.Generator[typing.Union[typing.Callable[, ],list[]]]"
            ],
            "arguments": {
                "f": [
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "x": [
                    "typing.Callable[, ]",
                    "list[]"
                ]
            }
        },
        "iterwith": {
            "name": "iterwith",
            "location": 615,
            "return": [
                "typing.Generator[typing.Union[bool,float,typing.Iterable[typing.Iterable[float]],str,bytes]]"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "tabulate": {
            "name": "tabulate",
            "location": 621,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "f": [
                    "int",
                    "typing.Sequence[T]",
                    "str",
                    "list[dict[str, typing.Any]]"
                ],
                "start": [
                    "int"
                ],
                "step": [
                    "int"
                ]
            }
        },
        "interleave": {
            "name": "interleave",
            "location": 632,
            "return": [],
            "arguments": {}
        },
        "interchange": {
            "name": "interchange",
            "location": 643,
            "return": [],
            "arguments": {}
        },
        "interpose": {
            "name": "interpose",
            "location": 654,
            "return": [],
            "arguments": {
                "l": [
                    "float",
                    "int"
                ],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "slide.window": {
            "name": "window",
            "location": 80,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "funpy-master/funpy/op.py": {
        "dec": {
            "name": "dec",
            "location": 33,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float"
                ]
            }
        },
        "inc": {
            "name": "inc",
            "location": 46,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float"
                ]
            }
        },
        "isneg": {
            "name": "isneg",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float"
                ]
            }
        },
        "iszero": {
            "name": "iszero",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "typing.Iterable[typing.Iterable[float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "ispos": {
            "name": "ispos",
            "location": 85,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float"
                ]
            }
        },
        "isodd": {
            "name": "isodd",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "iseven": {
            "name": "iseven",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        },
        "issome": {
            "name": "issome",
            "location": 132,
            "return": [],
            "arguments": {
                "x": [
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "isnone": {
            "name": "isnone",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "isfalse": {
            "name": "isfalse",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "notin": {
            "name": "notin",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "l": [
                    "str"
                ],
                "x": [
                    "typing.Container",
                    "str",
                    "int"
                ]
            }
        },
        "isempty": {
            "name": "isempty",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "l": []
            }
        },
        "notempty": {
            "name": "notempty",
            "location": 223,
            "return": [
                "bool"
            ],
            "arguments": {
                "l": []
            }
        }
    },
    "funpy-master/funpy/pp.py": {
        "pmap": {
            "name": "pmap",
            "location": 17,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "f": [
                    "dict[, ]",
                    "None",
                    "bool",
                    "dict[str, int]"
                ]
            }
        },
        "mapreduce": {
            "name": "mapreduce",
            "location": 34,
            "return": [
                "typing.Generator[typing.Generator[tuple[]]]"
            ],
            "arguments": {
                "mapper": [
                    "bool",
                    "str",
                    "float",
                    "dict[str, int]"
                ],
                "reducer": [
                    "int",
                    "str",
                    "typing.Pattern"
                ]
            }
        }
    },
    "funpy-master/funpy/__init__.py": {}
}
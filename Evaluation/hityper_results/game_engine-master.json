{
    "game_engine-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "game_engine-master/game_engine/asset.py": {
        "load_image_from_mat": {
            "name": "load_image_from_mat",
            "location": 66,
            "return": [
                "Texture"
            ],
            "arguments": {
                "mat": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ]
            }
        },
        "load_image_from_file": {
            "name": "load_image_from_file",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "get_current_directory": {
            "name": "get_current_directory",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "Texture.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "tuple[]",
                    "bool",
                    "list[int]"
                ],
                "f": [
                    "float",
                    "bool",
                    "tuple[]",
                    "typing.Sequence[T]"
                ],
                "t": []
            }
        },
        "Texture.image": {
            "name": "image",
            "location": 39,
            "return": [
                "int",
                "str",
                "dict[, ]",
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Texture.upload": {
            "name": "upload",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Texture.bind": {
            "name": "bind",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Texture.unbind": {
            "name": "unbind",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeshSurface.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertex_attributes": [
                    "int",
                    "float"
                ],
                "uniforms": [
                    "int",
                    "float"
                ]
            }
        },
        "MeshSurface.setup": {
            "name": "setup",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MeshSurface.draw": {
            "name": "draw",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uniforms": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "ColorMeshSurface.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "int",
                    "float"
                ],
                "colors": [
                    "int",
                    "float"
                ]
            }
        },
        "TextureMeshSurface.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "int",
                    "float"
                ],
                "uvs": [
                    "int",
                    "float"
                ],
                "texture": [
                    "int",
                    "float"
                ]
            }
        },
        "TextureMeshSurface.draw": {
            "name": "draw",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "additional_uniforms": []
            }
        }
    },
    "game_engine-master/game_engine/camera.py": {
        "Camera.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "float"
                ],
                "rotation": [
                    "int",
                    "float"
                ]
            }
        },
        "Camera.get_view_matrix": {
            "name": "get_view_matrix",
            "location": 12,
            "return": [
                "str",
                "float",
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Camera.update": {
            "name": "update",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        }
    },
    "game_engine-master/game_engine/game.py": {
        "Mouse.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WindowData.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGame.init": {
            "name": "init",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseGame.update": {
            "name": "update",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "BaseGame.render": {
            "name": "render",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "BaseData.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseData.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseData.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "game_engine-master/game_engine/helper.py": {
        "timer.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "timer.__enter__": {
            "name": "__enter__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "timer.__exit__": {
            "name": "__exit__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_val": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ],
                "exc_tb": [
                    "typing.Type",
                    "None",
                    "str",
                    "BaseException",
                    "Exception"
                ]
            }
        }
    },
    "game_engine-master/game_engine/math.py": {
        "cross": {
            "name": "cross",
            "location": 187,
            "return": [
                "vec3"
            ],
            "arguments": {
                "u": [],
                "v": []
            }
        },
        "dot": {
            "name": "dot",
            "location": 191,
            "return": [],
            "arguments": {
                "u": [
                    "str",
                    "float",
                    "typing.Match",
                    "int"
                ],
                "v": [
                    "str",
                    "float",
                    "typing.Match",
                    "int"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 256,
            "return": [
                "mat4"
            ],
            "arguments": {}
        },
        "scale": {
            "name": "scale",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "float",
                    "list[int]",
                    "str"
                ],
                "s": [
                    "int",
                    "str"
                ]
            }
        },
        "translate": {
            "name": "translate",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "tuple[typing.Union[int,int]]"
                ],
                "v": [
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "rotate": {
            "name": "rotate",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "m": [
                    "float",
                    "str"
                ],
                "v": [
                    "float",
                    "int",
                    "typing.Iterable[v]"
                ],
                "radians": [
                    "bool"
                ]
            }
        },
        "vec2.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "vec2.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec2.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec2.rotate": {
            "name": "rotate",
            "location": 19,
            "return": [
                "vec2"
            ],
            "arguments": {
                "self": [],
                "angle": []
            }
        },
        "vec2.__eq__": {
            "name": "__eq__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "vec2.__add__": {
            "name": "__add__",
            "location": 32,
            "return": [
                "vec2"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "vec2.__sub__": {
            "name": "__sub__",
            "location": 37,
            "return": [
                "vec2"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "vec2.__mul__": {
            "name": "__mul__",
            "location": 42,
            "return": [
                "vec2"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "vec2.__truediv__": {
            "name": "__truediv__",
            "location": 47,
            "return": [
                "vec2"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "vec2.__getitem__": {
            "name": "__getitem__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "typing.Iterable[m]",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "vec2.__setitem__": {
            "name": "__setitem__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Iterable[typing.Hashable]",
                    "None",
                    "bytes"
                ],
                "value": [
                    "str",
                    "float",
                    "bytes"
                ]
            }
        },
        "vec2.to_list": {
            "name": "to_list",
            "location": 67,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec2.length": {
            "name": "length",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "vec2.normalize": {
            "name": "normalize",
            "location": 74,
            "return": [
                "vec2"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "z": [
                    "int"
                ],
                "arr": [
                    "None"
                ]
            }
        },
        "vec3.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.__eq__": {
            "name": "__eq__",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "vec3.__add__": {
            "name": "__add__",
            "location": 106,
            "return": [
                "vec3"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "vec3.__sub__": {
            "name": "__sub__",
            "location": 111,
            "return": [
                "vec3"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "vec3.__mul__": {
            "name": "__mul__",
            "location": 116,
            "return": [
                "vec3"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "vec3.__truediv__": {
            "name": "__truediv__",
            "location": 121,
            "return": [
                "vec3"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "vec3.__getitem__": {
            "name": "__getitem__",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "vec3.__setitem__": {
            "name": "__setitem__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.MutableMapping",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "vec3.__hash__": {
            "name": "__hash__",
            "location": 145,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.__len__": {
            "name": "__len__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "vec3.length": {
            "name": "length",
            "location": 152,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.copy": {
            "name": "copy",
            "location": 155,
            "return": [
                "vec3"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.normalize": {
            "name": "normalize",
            "location": 158,
            "return": [
                "vec3"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.calculate_normal": {
            "name": "calculate_normal",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "v1": [
                    "int"
                ],
                "v2": [
                    "int"
                ]
            }
        },
        "vec3.to_list": {
            "name": "to_list",
            "location": 170,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.to_vec2": {
            "name": "to_vec2",
            "location": 173,
            "return": [
                "vec2"
            ],
            "arguments": {
                "self": [],
                "component_mapping": []
            }
        },
        "mat4.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "None",
                    "float",
                    "list[int]",
                    "str",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "mat4.__eq__": {
            "name": "__eq__",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "typing.Type",
                    "float",
                    "None",
                    "str"
                ]
            }
        },
        "mat4.__str__": {
            "name": "__str__",
            "location": 223,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "mat4.__repr__": {
            "name": "__repr__",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "mat4.__mul__": {
            "name": "__mul__",
            "location": 229,
            "return": [
                "mat4",
                "vec3"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "mat4.copy": {
            "name": "copy",
            "location": 238,
            "return": [
                "mat4"
            ],
            "arguments": {
                "self": []
            }
        },
        "mat4.to_list": {
            "name": "to_list",
            "location": 243,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "column_major": [
                    "bool"
                ]
            }
        }
    },
    "game_engine-master/game_engine/shader.py": {
        "Shader.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertex_shader_name": [
                    "typing.Text"
                ],
                "fragment_shader_name": [
                    "typing.Text"
                ]
            }
        },
        "Shader.compile": {
            "name": "compile",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shader.create_shader": {
            "name": "create_shader",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "strings": [],
                "t": [
                    "str",
                    "int",
                    "list[int]",
                    "bytes"
                ]
            }
        },
        "Shader.was_compile_successful": {
            "name": "was_compile_successful",
            "location": 69,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "shader": [
                    "str",
                    "int"
                ]
            }
        },
        "Shader.link": {
            "name": "link",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shader.was_link_successful": {
            "name": "was_link_successful",
            "location": 87,
            "return": [
                "bool",
                "list[dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shader.bind": {
            "name": "bind",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shader.unbind": {
            "name": "unbind",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Shader.uniform": {
            "name": "uniform",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[, ]",
                    "dict[str, 'LabwareDefinition']",
                    "list[str]",
                    "None"
                ],
                "data": [],
                "index": [
                    "int"
                ]
            }
        },
        "Shader.uniformf": {
            "name": "uniformf",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Shader.uniformi": {
            "name": "uniformi",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Shader.uniform_matrixf": {
            "name": "uniform_matrixf",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "mat": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[str]",
                    "int",
                    "list[tuple[typing.Union[str,int]]]"
                ]
            }
        }
    },
    "game_engine-master/game_engine/vertex_objects.py": {
        "array_buffer": {
            "name": "array_buffer",
            "location": 44,
            "return": [
                "VBO"
            ],
            "arguments": {
                "vertices": [
                    "list[]",
                    "str",
                    "int"
                ],
                "nums_per_vertex": [
                    "int"
                ]
            }
        },
        "index_buffer": {
            "name": "index_buffer",
            "location": 48,
            "return": [
                "VBO"
            ],
            "arguments": {
                "indices": [
                    "list[]",
                    "str",
                    "bool"
                ]
            }
        },
        "VBO.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buffer_type": [
                    "str",
                    "list[str]",
                    "typing.Type"
                ],
                "nums_per_vertex": [
                    "int",
                    "list[str]",
                    "None",
                    "str",
                    "float"
                ],
                "data": [
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bytes"
                ],
                "data_type": [
                    "str",
                    "bool",
                    "None",
                    "list[str]"
                ]
            }
        },
        "VBO.bind": {
            "name": "bind",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VBO.unbind": {
            "name": "unbind",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VBO.upload": {
            "name": "upload",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "usage": []
            }
        },
        "VBO.__len__": {
            "name": "__len__",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VAO.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VAO.bind": {
            "name": "bind",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VAO.unbind": {
            "name": "unbind",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "VAO.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "VAO.__str__": {
            "name": "__str__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VertexAttribute.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.OrderedDict",
                    "typing.Sequence[typing.Any]",
                    "None",
                    "bool"
                ],
                "vertex_size": [
                    "bool",
                    "float",
                    "None",
                    "str",
                    "tuple[int]"
                ],
                "stride": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "typing.Sequence[]"
                ],
                "offset": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[, ]",
                    "typing.Sequence[]"
                ]
            }
        },
        "VertexAttribute.bind": {
            "name": "bind",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "int"
                ],
                "shader": [
                    "str",
                    "typing.Iterable[str]",
                    "int",
                    "float"
                ]
            }
        },
        "Uniform.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "list[str]",
                    "int"
                ],
                "data": [
                    "str",
                    "dict[str, str]",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "Uniform.bind": {
            "name": "bind",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shader": [
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "game_engine-master/game_engine/window.py": {
        "run_game": {
            "name": "run_game",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "game": [
                    "str",
                    "dict[, ]",
                    "int"
                ],
                "data": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "Window.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "width": [
                    "int",
                    "None",
                    "tuple[]"
                ],
                "height": [
                    "int",
                    "None",
                    "tuple[]"
                ],
                "resizable": [
                    "bool"
                ],
                "game": [
                    "None",
                    "str",
                    "bool"
                ],
                "data": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "Window.show_average_time": {
            "name": "show_average_time",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.update_game_data": {
            "name": "update_game_data",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_time": [
                    "int",
                    "float",
                    "bytes"
                ]
            }
        },
        "Window.on_draw": {
            "name": "on_draw",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.on_resize": {
            "name": "on_resize",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ]
            }
        },
        "Window.orthographic_projection": {
            "name": "orthographic_projection",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ]
            }
        },
        "Window.perspective_projection": {
            "name": "perspective_projection",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ]
            }
        },
        "Window.on_key_press": {
            "name": "on_key_press",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str"
                ],
                "modifiers": [
                    "str",
                    "bool",
                    "typing.Mapping"
                ]
            }
        },
        "Window.on_key_release": {
            "name": "on_key_release",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "list[str]",
                    "typing.IO",
                    "None",
                    "bool",
                    "float"
                ],
                "modifiers": [
                    "str",
                    "bool",
                    "typing.Mapping"
                ]
            }
        },
        "Window.on_mouse_motion": {
            "name": "on_mouse_motion",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "list[int]"
                ],
                "y": [
                    "int",
                    "float",
                    "list[int]"
                ],
                "dx": [
                    "str",
                    "float",
                    "int",
                    "dict[, ]",
                    "tuple[str]"
                ],
                "dy": [
                    "str",
                    "float",
                    "int",
                    "dict[, ]",
                    "tuple[str]"
                ]
            }
        }
    },
    "game_engine-master/game_engine/__init__.py": {},
    "game_engine-master/game_engine/__version__.py": {},
    "game_engine-master/sandbox/__init__.py": {},
    "game_engine-master/sandbox/__main__.py": {
        "to_vec_arr": {
            "name": "to_vec_arr",
            "location": 19,
            "return": [
                "list[]"
            ],
            "arguments": {
                "arr": [],
                "vector_size": [
                    "bool",
                    "typing.Sequence[int]",
                    "str"
                ]
            }
        },
        "to_vec3_arr": {
            "name": "to_vec3_arr",
            "location": 33,
            "return": [],
            "arguments": {
                "arr": [
                    "float",
                    "dict[str, numpy.ndarray]",
                    "dict[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "to_vec2_arr": {
            "name": "to_vec2_arr",
            "location": 37,
            "return": [],
            "arguments": {
                "arr": [
                    "float",
                    "dict[str, numpy.ndarray]",
                    "dict[, ]",
                    "str",
                    "int"
                ]
            }
        },
        "get_points_and_uvs": {
            "name": "get_points_and_uvs",
            "location": 41,
            "return": [
                "tuple[typing.Union[int,dict[, ],list[int],list[list[int]],str]]"
            ],
            "arguments": {
                "width": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ]
            }
        },
        "Image.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "Image.draw": {
            "name": "draw",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uniforms": []
            }
        },
        "Video.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.get_next_frame": {
            "name": "get_next_frame",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init": [
                    "bool"
                ]
            }
        },
        "Video.draw": {
            "name": "draw",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uniforms": []
            }
        },
        "Game.init": {
            "name": "init",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.update": {
            "name": "update",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "typing.OrderedDict"
                ]
            }
        },
        "Game.render": {
            "name": "render",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "Data.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "gestalt-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "get_long_description": {
            "name": "get_long_description",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "get_requirements": {
            "name": "get_requirements",
            "location": 30,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "requirements_file": [
                    "str"
                ]
            }
        }
    },
    "gestalt-master/docs/source/conf.py": {
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "dict[, ]"
                ]
            }
        }
    },
    "gestalt-master/examples/timers.py": {},
    "gestalt-master/examples/amq/rpc/rpc-client.py": {},
    "gestalt-master/examples/amq/rpc/rpc-server.py": {},
    "gestalt-master/examples/amq/topic/topic-consumer.py": {},
    "gestalt-master/examples/amq/topic/topic-producer.py": {},
    "gestalt-master/examples/datagram/base/receiver.py": {
        "on_message": {
            "name": "on_message",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "list[dict[, ]]",
                    "list[str]"
                ]
            }
        }
    },
    "gestalt-master/examples/datagram/base/sender.py": {},
    "gestalt-master/examples/datagram/broadcast/receiver.py": {
        "on_message": {
            "name": "on_message",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "list[dict[, ]]",
                    "list[str]"
                ]
            }
        }
    },
    "gestalt-master/examples/datagram/broadcast/sender.py": {},
    "gestalt-master/examples/datagram/mti/receiver.py": {
        "on_message": {
            "name": "on_message",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "list[dict[, ]]",
                    "list[str]"
                ]
            }
        }
    },
    "gestalt-master/examples/datagram/mti/sender.py": {},
    "gestalt-master/examples/stream/linereceiver/client.py": {
        "on_started": {
            "name": "on_started",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "on_stopped": {
            "name": "on_stopped",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "on_peer_available": {
            "name": "on_peer_available",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "int"
                ]
            }
        },
        "on_peer_unavailable": {
            "name": "on_peer_unavailable",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "None",
                    "int",
                    "set[int]"
                ]
            }
        }
    },
    "gestalt-master/examples/stream/linereceiver/delimited.py": {
        "LineDelimitedStreamProtocol.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message": [
                    "None",
                    "str"
                ],
                "on_peer_available": [
                    "None",
                    "str"
                ],
                "on_peer_unavailable": [
                    "None",
                    "str"
                ],
                "delimiter": [
                    "bytes"
                ]
            }
        },
        "LineDelimitedStreamProtocol.send": {
            "name": "send",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LineDelimitedStreamProtocol.data_received": {
            "name": "data_received",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "float",
                    "typing.Mapping",
                    "list[]",
                    "bytes"
                ]
            }
        }
    },
    "gestalt-master/examples/stream/linereceiver/server.py": {
        "on_started": {
            "name": "on_started",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "on_stopped": {
            "name": "on_stopped",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "on_peer_available": {
            "name": "on_peer_available",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "None",
                    "int",
                    "set[int]"
                ]
            }
        },
        "on_peer_unavailable": {
            "name": "on_peer_unavailable",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "None",
                    "int",
                    "set[int]"
                ]
            }
        }
    },
    "gestalt-master/examples/stream/mti/client.py": {
        "on_started": {
            "name": "on_started",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "on_stopped": {
            "name": "on_stopped",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "on_peer_available": {
            "name": "on_peer_available",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "on_peer_unavailable": {
            "name": "on_peer_unavailable",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "None",
                    "int",
                    "set[int]"
                ]
            }
        }
    },
    "gestalt-master/examples/stream/mti/server.py": {
        "on_started": {
            "name": "on_started",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "on_stopped": {
            "name": "on_stopped",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "on_peer_available": {
            "name": "on_peer_available",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "None",
                    "int",
                    "set[int]"
                ]
            }
        },
        "on_peer_unavailable": {
            "name": "on_peer_unavailable",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "None",
                    "int",
                    "set[int]"
                ]
            }
        }
    },
    "gestalt-master/examples/stream/netstring/client.py": {
        "on_started": {
            "name": "on_started",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "on_stopped": {
            "name": "on_stopped",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "on_peer_available": {
            "name": "on_peer_available",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "int"
                ]
            }
        },
        "on_peer_unavailable": {
            "name": "on_peer_unavailable",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "cli": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "None",
                    "int",
                    "set[int]"
                ]
            }
        }
    },
    "gestalt-master/examples/stream/netstring/server.py": {
        "on_started": {
            "name": "on_started",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "on_stopped": {
            "name": "on_stopped",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "on_peer_available": {
            "name": "on_peer_available",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "None",
                    "int",
                    "set[int]"
                ]
            }
        },
        "on_peer_unavailable": {
            "name": "on_peer_unavailable",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "server": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "None",
                    "int",
                    "set[int]"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/compression.py": {
        "register_none": {
            "name": "register_none",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "reg": []
            }
        },
        "register_zlib": {
            "name": "register_zlib",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "reg": []
            }
        },
        "register_deflate": {
            "name": "register_deflate",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "reg": []
            }
        },
        "register_gzip": {
            "name": "register_gzip",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "reg": []
            }
        },
        "register_bz2": {
            "name": "register_bz2",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "reg": []
            }
        },
        "register_lzma": {
            "name": "register_lzma",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "reg": []
            }
        },
        "register_brotli": {
            "name": "register_brotli",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "reg": []
            }
        },
        "register_snappy": {
            "name": "register_snappy",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "reg": []
            }
        },
        "initialize": {
            "name": "initialize",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {
                "reg": []
            }
        },
        "ICompressor.compress": {
            "name": "compress",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "ICompressor.decompress": {
            "name": "decompress",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "CompressorRegistry.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressorRegistry.register": {
            "name": "register",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "compressor": [
                    "str",
                    "typing.Pattern"
                ],
                "content_type": [
                    "str",
                    "int",
                    "typing.Type"
                ]
            }
        },
        "CompressorRegistry.set_default": {
            "name": "set_default",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name_or_type": [
                    "str",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "CompressorRegistry.compressors": {
            "name": "compressors",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CompressorRegistry.get_compressor": {
            "name": "get_compressor",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "name_or_type": [
                    "str",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "CompressorRegistry.get_codec": {
            "name": "get_codec",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "name_or_type": [
                    "str",
                    "None",
                    "typing.Type"
                ]
            }
        },
        "CompressorRegistry.compress": {
            "name": "compress",
            "location": 147,
            "return": [
                "tuple[typing.Union[str,dict[str, str],int,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "name_or_type": [
                    "None",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "CompressorRegistry.decompress": {
            "name": "decompress",
            "location": 170,
            "return": [
                "tuple[typing.Union[str,dict[str, str],int,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "name_or_type": [
                    "None",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "CompressorRegistry._resolve": {
            "name": "_resolve",
            "location": 194,
            "return": [
                "tuple[typing.Union[int,tuple[typing.Union[typing.Any,typing.Any]],None,dict[, ],dict[str, typing.Any],str]]"
            ],
            "arguments": {
                "self": [],
                "name_or_type": [
                    "int",
                    "tuple[typing.Union[typing.Any,typing.Any]]",
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "register_none.NoneCompressor.compress": {
            "name": "compress",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_none.NoneCompressor.decompress": {
            "name": "decompress",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_zlib.ZlibCompressor.compress": {
            "name": "compress",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_zlib.ZlibCompressor.decompress": {
            "name": "decompress",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_deflate.DeflateCompressor.compress": {
            "name": "compress",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_deflate.DeflateCompressor.decompress": {
            "name": "decompress",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_gzip.GzipCompressor.compress": {
            "name": "compress",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_gzip.GzipCompressor.decompress": {
            "name": "decompress",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_bz2.Bz2Compressor.compress": {
            "name": "compress",
            "location": 355,
            "return": [
                "tuple[typing.Union[str,dict[str, str],int,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "register_bz2.Bz2Compressor.decompress": {
            "name": "decompress",
            "location": 370,
            "return": [
                "tuple[typing.Union[str,dict[str, str],int,list[str]]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "register_lzma.LzmaCompressor.compress": {
            "name": "compress",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_lzma.LzmaCompressor.decompress": {
            "name": "decompress",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_brotli.BrotliCompressor.compress": {
            "name": "compress",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_brotli.BrotliCompressor.decompress": {
            "name": "decompress",
            "location": 433,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_snappy.SnappyCompressor.compress": {
            "name": "compress",
            "location": 450,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_snappy.SnappyCompressor.decompress": {
            "name": "decompress",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "gestalt-master/src/gestalt/runner.py": {
        "run": {
            "name": "run",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "func": [
                    "None",
                    "collections.abc.Awaitable[None]",
                    "typing.Iterable[]",
                    "float",
                    "int"
                ]
            }
        },
        "run.signal_handler": {
            "name": "signal_handler",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [],
                "sig": []
            }
        },
        "run.exception_handler": {
            "name": "exception_handler",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "loop": [],
                "context": []
            }
        }
    },
    "gestalt-master/src/gestalt/serialization.py": {
        "register_none": {
            "name": "register_none",
            "location": 265,
            "return": [],
            "arguments": {
                "reg": []
            }
        },
        "register_text": {
            "name": "register_text",
            "location": 285,
            "return": [],
            "arguments": {
                "reg": []
            }
        },
        "register_json": {
            "name": "register_json",
            "location": 311,
            "return": [],
            "arguments": {
                "reg": []
            }
        },
        "register_msgpack": {
            "name": "register_msgpack",
            "location": 337,
            "return": [],
            "arguments": {
                "reg": []
            }
        },
        "register_yaml": {
            "name": "register_yaml",
            "location": 375,
            "return": [],
            "arguments": {
                "reg": []
            }
        },
        "register_avro": {
            "name": "register_avro",
            "location": 407,
            "return": [],
            "arguments": {
                "reg": [],
                "schema_registry": []
            }
        },
        "register_protobuf": {
            "name": "register_protobuf",
            "location": 490,
            "return": [],
            "arguments": {
                "reg": [],
                "object_registry": []
            }
        },
        "initialize": {
            "name": "initialize",
            "location": 607,
            "return": [],
            "arguments": {
                "reg": []
            }
        },
        "ISerializer.encode": {
            "name": "encode",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ISerializer.decode": {
            "name": "decode",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SerializerRegistry.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SerializerRegistry.register": {
            "name": "register",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "serializer": [],
                "content_type": [],
                "content_encoding": []
            }
        },
        "SerializerRegistry.set_default": {
            "name": "set_default",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "name_or_type": []
            }
        },
        "SerializerRegistry.serializers": {
            "name": "serializers",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SerializerRegistry.get_serializer": {
            "name": "get_serializer",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "name_or_type": []
            }
        },
        "SerializerRegistry.get_codec": {
            "name": "get_codec",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "name_or_type": []
            }
        },
        "SerializerRegistry.dumps": {
            "name": "dumps",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "name_or_type": []
            }
        },
        "SerializerRegistry.loads": {
            "name": "loads",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "content_type": [],
                "content_encoding": []
            }
        },
        "SerializerRegistry._resolve": {
            "name": "_resolve",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "register_none.NoneSerializer.encode": {
            "name": "encode",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_none.NoneSerializer.decode": {
            "name": "decode",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_text.TextSerializer.encode": {
            "name": "encode",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_text.TextSerializer.decode": {
            "name": "decode",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_json.JsonSerializer.encode": {
            "name": "encode",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_json.JsonSerializer.decode": {
            "name": "decode",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_msgpack.MsgpackSerializer.encode": {
            "name": "encode",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_msgpack.MsgpackSerializer.decode": {
            "name": "decode",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_yaml.YamlSerializer.encode": {
            "name": "encode",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_yaml.YamlSerializer.decode": {
            "name": "decode",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_avro.SchemaRegistry.__init__": {
            "name": "__init__",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "register_avro.SchemaRegistry.register_message": {
            "name": "register_message",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "type_identifier": []
            }
        },
        "register_avro.SchemaRegistry.get_schema_by_id": {
            "name": "get_schema_by_id",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "schema_identifier": []
            }
        },
        "register_avro.AvroSerializer.__init__": {
            "name": "__init__",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "schema_registry": []
            }
        },
        "register_avro.AvroSerializer.encode": {
            "name": "encode",
            "location": 448,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_avro.AvroSerializer.decode": {
            "name": "decode",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "register_protobuf.ObjectRegistry.__init__": {
            "name": "__init__",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "register_protobuf.ObjectRegistry.register_message": {
            "name": "register_message",
            "location": 502,
            "return": [],
            "arguments": {
                "self": [],
                "obj": [],
                "type_identifier": []
            }
        },
        "register_protobuf.ObjectRegistry.get_object_by_id": {
            "name": "get_object_by_id",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "type_identifier": []
            }
        },
        "register_protobuf.ObjectRegistry.get_id_for_object": {
            "name": "get_id_for_object",
            "location": 525,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "register_protobuf.ProtobufSerializer.__init__": {
            "name": "__init__",
            "location": 557,
            "return": [],
            "arguments": {
                "self": [],
                "object_registry": []
            }
        },
        "register_protobuf.ProtobufSerializer.encode": {
            "name": "encode",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "register_protobuf.ProtobufSerializer.decode": {
            "name": "decode",
            "location": 574,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "gestalt-master/src/gestalt/timer.py": {
        "Timer.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "int",
                    "float",
                    "list[str]",
                    "None",
                    "list[list[int]]"
                ],
                "coroutine_func": [
                    "dict[str, typing.Any]",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Timer.started": {
            "name": "started",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer.running": {
            "name": "running",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer.cancelled": {
            "name": "cancelled",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Timer._schedule": {
            "name": "_schedule",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "None",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Timer._cancel": {
            "name": "_cancel",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer._on_timer_expiry": {
            "name": "_on_timer_expiry",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gestalt-master/src/gestalt/__init__.py": {},
    "gestalt-master/src/gestalt/amq/consumer.py": {
        "Consumer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amqp_url": [
                    "typing.Text"
                ],
                "exchange_name": [
                    "typing.Text"
                ],
                "exchange_type": [],
                "routing_key": [
                    "typing.Text"
                ],
                "reconnect_interval": [
                    "float"
                ],
                "prefetch_count": [
                    "int"
                ],
                "on_message": [
                    "None",
                    "str",
                    "bytes",
                    "bool"
                ],
                "loop": [
                    "None",
                    "str"
                ]
            }
        },
        "Consumer._on_reconnected": {
            "name": "_on_reconnected",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Consumer._on_channel_closed": {
            "name": "_on_channel_closed",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "int",
                    "tuple[tuple[typing.Union[str,...]]]",
                    "list[str]"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/amq/producer.py": {
        "Producer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amqp_url": [
                    "typing.Text"
                ],
                "exchange_name": [
                    "typing.Text"
                ],
                "exchange_type": [],
                "routing_key": [
                    "typing.Text"
                ],
                "reconnect_interval": [
                    "float"
                ],
                "serialization": [
                    "None",
                    "str",
                    "bool"
                ],
                "compression": [
                    "None",
                    "str",
                    "bool"
                ],
                "loop": [
                    "None",
                    "str"
                ]
            }
        },
        "Producer._on_reconnected": {
            "name": "_on_reconnected",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Producer._on_channel_closed": {
            "name": "_on_channel_closed",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "int",
                    "tuple[tuple[typing.Union[str,...]]]",
                    "list[str]"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/amq/requester.py": {
        "Requester.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amqp_url": [
                    "typing.Text"
                ],
                "exchange_name": [
                    "typing.Text"
                ],
                "exchange_type": [],
                "service_name": [
                    "typing.Text"
                ],
                "reconnect_interval": [
                    "float"
                ],
                "prefetch_count": [
                    "int"
                ],
                "serialization": [
                    "None",
                    "str",
                    "int"
                ],
                "compression": [
                    "None",
                    "str",
                    "int"
                ],
                "dlx_name": [
                    "typing.Text"
                ],
                "loop": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Requester.__remove_future": {
            "name": "__remove_future",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "correlation_id": [
                    "int",
                    "list[str]"
                ],
                "future": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "list[]",
                    "bytes"
                ]
            }
        },
        "Requester.create_future": {
            "name": "create_future",
            "location": 213,
            "return": [
                "tuple[typing.Union[str,dict[, ],typing.OrderedDict]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requester._on_request_returned": {
            "name": "_on_request_returned",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "None",
                    "int",
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Requester._on_reconnected": {
            "name": "_on_reconnected",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requester._on_channel_closed": {
            "name": "_on_channel_closed",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "Exception",
                    "int",
                    "None"
                ]
            }
        },
        "Requester._discard_pending_responses": {
            "name": "_discard_pending_responses",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/amq/responder.py": {
        "Responder.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amqp_url": [
                    "typing.Text"
                ],
                "exchange_name": [
                    "typing.Text"
                ],
                "exchange_type": [],
                "service_name": [
                    "typing.Text"
                ],
                "reconnect_interval": [
                    "float"
                ],
                "prefetch_count": [
                    "int"
                ],
                "serialization": [
                    "None",
                    "str",
                    "int"
                ],
                "compression": [
                    "None",
                    "str",
                    "int"
                ],
                "dlx_name": [
                    "typing.Text"
                ],
                "on_request": [
                    "None",
                    "str",
                    "typing.TextIO",
                    "int"
                ],
                "loop": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Responder._on_reconnected": {
            "name": "_on_reconnected",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Responder._on_channel_closed": {
            "name": "_on_channel_closed",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "int",
                    "tuple[tuple[typing.Union[str,...]]]",
                    "list[str]"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/amq/utils.py": {
        "build_amqp_url": {
            "name": "build_amqp_url",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [
                    "None",
                    "str"
                ],
                "password": [
                    "None",
                    "str"
                ],
                "host": [
                    "None",
                    "str"
                ],
                "port": [
                    "None",
                    "str"
                ],
                "virtual_host": [
                    "None",
                    "str"
                ],
                "connection_attempts": [
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "heartbeat_interval": [
                    "None",
                    "str",
                    "bool"
                ],
                "ssl_options": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "encode_payload": {
            "name": "encode_payload",
            "location": 85,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "None",
                    "typing.Mapping",
                    "int"
                ]
            }
        },
        "decode_payload": {
            "name": "decode_payload",
            "location": 162,
            "return": [
                "str",
                "tuple[typing.Union[str,str,str,str,str,str,str]]",
                "int",
                "typing.Final"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "typing.Callable[, ]",
                    "list[str]",
                    "int"
                ],
                "compression": [
                    "None",
                    "str",
                    "bytes"
                ],
                "content_type": [
                    "None",
                    "str",
                    "bool"
                ],
                "content_encoding": [
                    "None",
                    "str",
                    "list[int]"
                ],
                "type_identifier": [
                    "None",
                    "str",
                    "list[int]"
                ]
            }
        },
        "decode_message": {
            "name": "decode_message",
            "location": 202,
            "return": [
                "str",
                "dict[, ]"
            ],
            "arguments": {
                "message": [
                    "dict[str, str]"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/amq/__init__.py": {},
    "gestalt-master/src/gestalt/datagram/endpoint.py": {
        "DatagramEndpoint.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message": [
                    "None",
                    "bool"
                ],
                "on_started": [
                    "None",
                    "bool"
                ],
                "on_stopped": [
                    "None",
                    "bool"
                ],
                "on_peer_available": [
                    "None",
                    "bool",
                    "float"
                ],
                "on_peer_unavailable": [
                    "None",
                    "bool",
                    "float"
                ],
                "content_type": [],
                "loop": [
                    "None",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "DatagramEndpoint.running": {
            "name": "running",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatagramEndpoint.bindings": {
            "name": "bindings",
            "location": 97,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatagramEndpoint.connections": {
            "name": "connections",
            "location": 106,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatagramEndpoint.register_message": {
            "name": "register_message",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_identifier": [
                    "int",
                    "str"
                ],
                "obj": [
                    "int",
                    "str"
                ]
            }
        },
        "DatagramEndpoint.send": {
            "name": "send",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int",
                    "typing.MutableMapping",
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "DatagramEndpoint._protocol_factory": {
            "name": "_protocol_factory",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatagramEndpoint.on_peer_available": {
            "name": "on_peer_available",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prot": [
                    "list[int]",
                    "bytes",
                    "str",
                    "bool",
                    "list[str]"
                ],
                "peer_id": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "DatagramEndpoint.on_peer_unavailable": {
            "name": "on_peer_unavailable",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prot": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "DatagramEndpoint.on_message": {
            "name": "on_message",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prot": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "peer_id": [
                    "str",
                    "int",
                    "bytes"
                ],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/datagram/mti.py": {},
    "gestalt-master/src/gestalt/datagram/netstring.py": {},
    "gestalt-master/src/gestalt/datagram/__init__.py": {},
    "gestalt-master/src/gestalt/datagram/protocols/base.py": {
        "BaseDatagramProtocol.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message": [
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "str"
                ],
                "on_peer_available": [
                    "None",
                    "str",
                    "Exception",
                    "typing.Callable[, ]",
                    "int"
                ],
                "on_peer_unavailable": [
                    "None",
                    "str",
                    "Exception",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "BaseDatagramProtocol.identity": {
            "name": "identity",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatagramProtocol.raddr": {
            "name": "raddr",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatagramProtocol.laddr": {
            "name": "laddr",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseDatagramProtocol.connection_made": {
            "name": "connection_made",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "BaseDatagramProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "BaseDatagramProtocol.close": {
            "name": "close",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDatagramProtocol.send": {
            "name": "send",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "list[int]",
                    "str",
                    "None"
                ],
                "addr": [
                    "None",
                    "bytes",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "BaseDatagramProtocol.datagram_received": {
            "name": "datagram_received",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ],
                "addr": [
                    "dict[, ]",
                    "bytes",
                    "dict[str, typing.Any]",
                    "typing.Mapping"
                ]
            }
        },
        "BaseDatagramProtocol.error_received": {
            "name": "error_received",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/datagram/protocols/mti.py": {
        "MtiDatagramProtocol.send": {
            "name": "send",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "addr": [
                    "None",
                    "str",
                    "int"
                ],
                "type_identifier": [
                    "int"
                ]
            }
        },
        "MtiDatagramProtocol.datagram_received": {
            "name": "datagram_received",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int"
                ],
                "addr": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "None",
                    "dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/datagram/protocols/netstring.py": {
        "NetstringDatagramProtocol.send": {
            "name": "send",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "addr": [
                    "None",
                    "int",
                    "list[str]"
                ],
                "add_frame_header": [
                    "bool"
                ]
            }
        },
        "NetstringDatagramProtocol.datagram_received": {
            "name": "datagram_received",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int"
                ],
                "addr": [
                    "memoryview",
                    "typing.Mapping",
                    "dict[, ]",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/datagram/protocols/__init__.py": {},
    "gestalt-master/src/gestalt/stream/endpoint.py": {
        "StreamEndpoint.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message": [
                    "None",
                    "bool"
                ],
                "on_started": [
                    "None",
                    "bool"
                ],
                "on_stopped": [
                    "None",
                    "bool"
                ],
                "on_peer_available": [
                    "None",
                    "bool",
                    "float"
                ],
                "on_peer_unavailable": [
                    "None",
                    "bool",
                    "float"
                ],
                "content_type": [],
                "backoff_maximum": [
                    "float"
                ],
                "loop": [
                    "None",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "StreamEndpoint.mode": {
            "name": "mode",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamEndpoint.running": {
            "name": "running",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamEndpoint.bindings": {
            "name": "bindings",
            "location": 157,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamEndpoint.connections": {
            "name": "connections",
            "location": 162,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamEndpoint.register_message": {
            "name": "register_message",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_identifier": [
                    "int",
                    "str"
                ],
                "obj": [
                    "int",
                    "str"
                ]
            }
        },
        "StreamEndpoint.send": {
            "name": "send",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "int",
                    "typing.MutableMapping",
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "StreamEndpoint._protocol_factory": {
            "name": "_protocol_factory",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StreamEndpoint.on_peer_available": {
            "name": "on_peer_available",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prot": [
                    "int",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "peer_id": [
                    "str",
                    "int"
                ]
            }
        },
        "StreamEndpoint.on_peer_unavailable": {
            "name": "on_peer_unavailable",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prot": [
                    "bool",
                    "typing.MutableSet",
                    "list[str]",
                    "str"
                ],
                "peer_id": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "StreamEndpoint.on_message": {
            "name": "on_message",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prot": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "peer_id": [
                    "str",
                    "bytes",
                    "dict[, ]"
                ],
                "data": [
                    "bytes",
                    "dict[, ]",
                    "typing.MutableMapping",
                    "str"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/stream/mti.py": {},
    "gestalt-master/src/gestalt/stream/netstring.py": {},
    "gestalt-master/src/gestalt/stream/__init__.py": {},
    "gestalt-master/src/gestalt/stream/protocols/base.py": {
        "BaseStreamProtocol.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message": [
                    "None",
                    "typing.Callable[, ]",
                    "int",
                    "str"
                ],
                "on_peer_available": [
                    "None",
                    "str",
                    "Exception",
                    "typing.Callable[, ]",
                    "int"
                ],
                "on_peer_unavailable": [
                    "None",
                    "str",
                    "Exception",
                    "typing.Callable[, ]",
                    "int"
                ]
            }
        },
        "BaseStreamProtocol.raddr": {
            "name": "raddr",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseStreamProtocol.laddr": {
            "name": "laddr",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseStreamProtocol.identity": {
            "name": "identity",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseStreamProtocol.connection_made": {
            "name": "connection_made",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": []
            }
        },
        "BaseStreamProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseStreamProtocol.close": {
            "name": "close",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStreamProtocol.send": {
            "name": "send",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BaseStreamProtocol.data_received": {
            "name": "data_received",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "BaseStreamProtocol.connection_made.get_host_port": {
            "name": "get_host_port",
            "location": 81,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "info": []
            }
        }
    },
    "gestalt-master/src/gestalt/stream/protocols/mti.py": {
        "MtiStreamProtocol.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message": [
                    "None",
                    "str"
                ],
                "on_peer_available": [
                    "None",
                    "str"
                ],
                "on_peer_unavailable": [
                    "None",
                    "str"
                ]
            }
        },
        "MtiStreamProtocol.send": {
            "name": "send",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "type_identifier": [
                    "int"
                ]
            }
        },
        "MtiStreamProtocol.data_received": {
            "name": "data_received",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "float",
                    "typing.Mapping",
                    "list[]",
                    "bytes"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/stream/protocols/netstring.py": {
        "NetstringStreamProtocol.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "on_message": [
                    "None",
                    "str"
                ],
                "on_peer_available": [
                    "None",
                    "str"
                ],
                "on_peer_unavailable": [
                    "None",
                    "str"
                ]
            }
        },
        "NetstringStreamProtocol.send": {
            "name": "send",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "add_frame_header": [
                    "bool"
                ]
            }
        },
        "NetstringStreamProtocol.data_received": {
            "name": "data_received",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[, ]",
                    "float",
                    "typing.Mapping",
                    "list[]",
                    "bytes"
                ]
            }
        }
    },
    "gestalt-master/src/gestalt/stream/protocols/__init__.py": {},
    "gestalt-master/tests/test_amq_request_reply.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RabbitmqRequestReplyTestCase.setUp": {
            "name": "setUp",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gestalt-master/tests/test_amq_topic_pubsub.py": {
        "setUpModule": {
            "name": "setUpModule",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RabbitmqTopicPubSubTestCase.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gestalt-master/tests/test_amq_utils.py": {
        "RabbitmqUtilitiesTestCase.test_encode_payload_exceptions": {
            "name": "test_encode_payload_exceptions",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_decode_payload_exceptions": {
            "name": "test_decode_payload_exceptions",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_text_payload_roundtrip": {
            "name": "test_text_payload_roundtrip",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_json_payload_roundtrip": {
            "name": "test_json_payload_roundtrip",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_msgpack_payload_roundtrip": {
            "name": "test_msgpack_payload_roundtrip",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_yaml_payload_roundtrip": {
            "name": "test_yaml_payload_roundtrip",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_protobuf_payload_roundtrip": {
            "name": "test_protobuf_payload_roundtrip",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_avro_payload_roundtrip": {
            "name": "test_avro_payload_roundtrip",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_create_url_without_args": {
            "name": "test_create_url_without_args",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_create_url_with_connection_attempts": {
            "name": "test_create_url_with_connection_attempts",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_create_url_with_heartbeat_interval": {
            "name": "test_create_url_with_heartbeat_interval",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_create_url_with_connection_attempts_and_heartbeat_interval": {
            "name": "test_create_url_with_connection_attempts_and_heartbeat_interval",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_create_url_with_virtual_host": {
            "name": "test_create_url_with_virtual_host",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_create_url_without_virtual_host": {
            "name": "test_create_url_without_virtual_host",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_create_url_with_env_settings": {
            "name": "test_create_url_with_env_settings",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitmqUtilitiesTestCase.test_create_url_with_ssl_options": {
            "name": "test_create_url_with_ssl_options",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gestalt-master/tests/test_compression.py": {
        "CompressionTestCase.test_expected_codecs_are_present": {
            "name": "test_expected_codecs_are_present",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_expected_codec_attributes": {
            "name": "test_expected_codec_attributes",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_fetch_compressor_by_name_or_type": {
            "name": "test_fetch_compressor_by_name_or_type",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_fetch_codec_by_name_or_type": {
            "name": "test_fetch_codec_by_name_or_type",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_register_invalid_compressor": {
            "name": "test_register_invalid_compressor",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_fetch_codec_with_invalid_name_or_type": {
            "name": "test_fetch_codec_with_invalid_name_or_type",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_fetch_compressor_with_invalid_name_or_type": {
            "name": "test_fetch_compressor_with_invalid_name_or_type",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_decompress_with_invalid_name_or_type": {
            "name": "test_decompress_with_invalid_name_or_type",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_compress_with_invalid_name_or_type": {
            "name": "test_compress_with_invalid_name_or_type",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_compress_with_unspecified_name_or_type": {
            "name": "test_compress_with_unspecified_name_or_type",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_compression_roundtrip": {
            "name": "test_compression_roundtrip",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_none_compression": {
            "name": "test_none_compression",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_zlib_compression": {
            "name": "test_zlib_compression",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_deflate_compression": {
            "name": "test_deflate_compression",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_gzip_compression": {
            "name": "test_gzip_compression",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_bzip2_compression": {
            "name": "test_bzip2_compression",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_lzma_compression": {
            "name": "test_lzma_compression",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_brotli_compression": {
            "name": "test_brotli_compression",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompressionTestCase.test_snappy_compression": {
            "name": "test_snappy_compression",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gestalt-master/tests/test_datagram_mti.py": {},
    "gestalt-master/tests/test_datagram_netstring.py": {},
    "gestalt-master/tests/test_runner.py": {
        "invalid_func": {
            "name": "invalid_func",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RunnerTestCase.test_exception_is_raised_if_func_is_not_awaitable": {
            "name": "test_exception_is_raised_if_func_is_not_awaitable",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunnerTestCase.test_exception_is_raised_if_finalize_is_not_awaitable": {
            "name": "test_exception_is_raised_if_finalize_is_not_awaitable",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunnerTestCase.test_valid_runner_func": {
            "name": "test_valid_runner_func",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunnerTestCase.test_handle_exceptions": {
            "name": "test_handle_exceptions",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunnerTestCase.test_handle_signals": {
            "name": "test_handle_signals",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunnerTestCase.test_pending_tasks_are_cancelled_when_stopping_loop": {
            "name": "test_pending_tasks_are_cancelled_when_stopping_loop",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gestalt-master/tests/test_serialization.py": {
        "SerializationTestCase.tearDown": {
            "name": "tearDown",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_expected_codecs_are_present": {
            "name": "test_expected_codecs_are_present",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_expected_codec_attributes": {
            "name": "test_expected_codec_attributes",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_fetch_serializer_by_name_or_type": {
            "name": "test_fetch_serializer_by_name_or_type",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_fetch_codec_by_name_or_type": {
            "name": "test_fetch_codec_by_name_or_type",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_register_invalid_serializer": {
            "name": "test_register_invalid_serializer",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_fetch_codec_with_invalid_name_or_type": {
            "name": "test_fetch_codec_with_invalid_name_or_type",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_fetch_serializer_with_invalid_name_or_type": {
            "name": "test_fetch_serializer_with_invalid_name_or_type",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_loads_with_no_data": {
            "name": "test_loads_with_no_data",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_loads_with_invalid_name_or_type": {
            "name": "test_loads_with_invalid_name_or_type",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_dumps_with_invalid_name_or_type": {
            "name": "test_dumps_with_invalid_name_or_type",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_dumps_with_unspecified_name_or_type": {
            "name": "test_dumps_with_unspecified_name_or_type",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_none_serialization_roundtrip": {
            "name": "test_none_serialization_roundtrip",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_text_serialization_roundtrip": {
            "name": "test_text_serialization_roundtrip",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_json_serialization_roundtrip": {
            "name": "test_json_serialization_roundtrip",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_msgpack_serialization_roundtrip": {
            "name": "test_msgpack_serialization_roundtrip",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_yaml_serialization_roundtrip": {
            "name": "test_yaml_serialization_roundtrip",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_avro_serialization_roundtrip": {
            "name": "test_avro_serialization_roundtrip",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializationTestCase.test_protobuf_serialization_roundtrip": {
            "name": "test_protobuf_serialization_roundtrip",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gestalt-master/tests/test_stream_mti.py": {},
    "gestalt-master/tests/test_stream_mti_protocol.py": {
        "create_mti_message": {
            "name": "create_mti_message",
            "location": 9,
            "return": [],
            "arguments": {
                "msg_id": [
                    "bool",
                    "str",
                    "None",
                    "bytes"
                ],
                "data": []
            }
        },
        "MtiStreamProtocolTestCase.test_error_raised_when_sending_invalid_data_type": {
            "name": "test_error_raised_when_sending_invalid_data_type",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtiStreamProtocolTestCase.test_error_raised_when_using_invalid_type_identifier_data_type": {
            "name": "test_error_raised_when_using_invalid_type_identifier_data_type",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtiStreamProtocolTestCase.test_empty_message_can_be_sent": {
            "name": "test_empty_message_can_be_sent",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtiStreamProtocolTestCase.test_empty_message_can_be_received": {
            "name": "test_empty_message_can_be_received",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MtiStreamProtocolTestCase.test_message_received_in_worst_case_delivery_scenario": {
            "name": "test_message_received_in_worst_case_delivery_scenario",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gestalt-master/tests/test_stream_netstring.py": {},
    "gestalt-master/tests/test_stream_netstring_protocol.py": {
        "create_netstring_message": {
            "name": "create_netstring_message",
            "location": 12,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "NetstringStreamProtocolTestCase.test_error_raised_when_sending_invalid_data_type": {
            "name": "test_error_raised_when_sending_invalid_data_type",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetstringStreamProtocolTestCase.test_error_raised_when_sending_empty_message": {
            "name": "test_error_raised_when_sending_empty_message",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetstringStreamProtocolTestCase.test_error_raised_when_received_an_empty_message": {
            "name": "test_error_raised_when_received_an_empty_message",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetstringStreamProtocolTestCase.test_message_received_in_worst_case_delivery_scenario": {
            "name": "test_message_received_in_worst_case_delivery_scenario",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gestalt-master/tests/test_timer.py": {
        "TimersTestCase.test_callback_func.user_func_sync": {
            "name": "user_func_sync",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gestalt-master/tests/test_version.py": {
        "VersionTestCase.test_version": {
            "name": "test_version",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gestalt-master/tests/tls_utils.py": {
        "get_certs": {
            "name": "get_certs",
            "location": 26,
            "return": [
                "Certificates"
            ],
            "arguments": {}
        },
        "create_ssl_server_context": {
            "name": "create_ssl_server_context",
            "location": 30,
            "return": [],
            "arguments": {
                "cafile": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "str"
                ],
                "certfile": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "str"
                ],
                "keyfile": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "typing.Callable[..., collections.abc.Awaitable[]]",
                    "str"
                ]
            }
        },
        "create_ssl_client_context": {
            "name": "create_ssl_client_context",
            "location": 64,
            "return": [],
            "arguments": {
                "cafile": [
                    "bool",
                    "typing.Type"
                ],
                "certfile": [
                    "bool",
                    "typing.Type"
                ],
                "keyfile": [
                    "bool",
                    "typing.Type"
                ]
            }
        }
    }
}
{
    "ghostwriter-master/setup.py": {
        "requirements_from": {
            "name": "requirements_from",
            "location": 9,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "requirements_from.resolv_require_line": {
            "name": "resolv_require_line",
            "location": 10,
            "return": [],
            "arguments": {
                "req": []
            }
        },
        "requirements_from.reqlist": {
            "name": "reqlist",
            "location": 22,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "ghostwriter-master/ghostwriter/__init__.py": {},
    "ghostwriter-master/ghostwriter/__main__.py": {
        "one": {
            "name": "one",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "two": {
            "name": "two",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "cli": {
            "name": "cli",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [
                    "None"
                ]
            }
        }
    },
    "ghostwriter-master/ghostwriter/lang/codeemitter.py": {
        "CodeEmitter.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int"
                ]
            }
        },
        "CodeEmitter.__str__": {
            "name": "__str__",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeEmitter.add_line": {
            "name": "add_line",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "bytes",
                    "str",
                    "typing.Iterator",
                    "int",
                    "list[]"
                ]
            }
        },
        "CodeEmitter.add_section": {
            "name": "add_section",
            "location": 24,
            "return": [
                "CodeEmitter"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeEmitter.indent": {
            "name": "indent",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeEmitter.dedent": {
            "name": "dedent",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeEmitter.evaluate": {
            "name": "evaluate",
            "location": 49,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ghostwriter-master/ghostwriter/lang/lexer.py": {
        "lex_file": {
            "name": "lex_file",
            "location": 74,
            "return": [
                "Lexer"
            ],
            "arguments": {
                "fname": []
            }
        },
        "seekable_stream": {
            "name": "seekable_stream",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "attribute": [],
                "val": []
            }
        },
        "LexerError.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lexer": [],
                "message": []
            }
        },
        "LexerError.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LexerError.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LexerExpectError.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lexer": [],
                "expected": [],
                "actual": [],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "Lexer.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.close": {
            "name": "close",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.error": {
            "name": "error",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Lexer.expect_next": {
            "name": "expect_next",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "seq": [],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "Lexer.expect_peek": {
            "name": "expect_peek",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "seq": [],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "Lexer.next": {
            "name": "next",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Lexer.next_while": {
            "name": "next_while",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alphabet": []
            }
        },
        "Lexer.next_until": {
            "name": "next_until",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alphabet": []
            }
        },
        "Lexer.next_until_seq": {
            "name": "next_until_seq",
            "location": 237,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "seq": []
            }
        },
        "Lexer.peek": {
            "name": "peek",
            "location": 249,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Lexer.peek_while": {
            "name": "peek_while",
            "location": 271,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alphabet": []
            }
        },
        "Lexer.peek_until": {
            "name": "peek_until",
            "location": 306,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alphabet": []
            }
        },
        "Lexer.current": {
            "name": "current",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lexer.rewind": {
            "name": "rewind",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Lexer.ignore": {
            "name": "ignore",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.emit": {
            "name": "emit",
            "location": 375,
            "return": [
                "Token"
            ],
            "arguments": {
                "self": [],
                "typ": []
            }
        }
    },
    "ghostwriter-master/ghostwriter/lang/lexer_test_utils.py": {
        "cmp_token_seqs": {
            "name": "cmp_token_seqs",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "expected_seq": [],
                "actual_seq": [],
                "cmp_type": [
                    "bool"
                ],
                "cmp_literal": [
                    "bool"
                ],
                "cmp_startpos": [
                    "bool"
                ]
            }
        },
        "FormattedError.__repr__": {
            "name": "__repr__",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FormattedError.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenComparisonError.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [],
                "actual": [],
                "index": [],
                "fields": [
                    "None"
                ],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "ExtraTokensError.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [],
                "actual": [],
                "message": [
                    "typing.Text"
                ]
            }
        },
        "MissingTokensError.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [],
                "actual": [],
                "message": [
                    "typing.Text"
                ]
            }
        }
    },
    "ghostwriter-master/ghostwriter/lang/token.py": {},
    "ghostwriter-master/ghostwriter/lang/__init__.py": {},
    "ghostwriter-master/ghostwriter/moustache/lexer.py": {
        "MoustacheLexer.lex_ident": {
            "name": "lex_ident",
            "location": 15,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MoustacheLexer.delimiter_set": {
            "name": "delimiter_set",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoustacheLexer.comment": {
            "name": "comment",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoustacheLexer.start": {
            "name": "start",
            "location": 51,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ghostwriter-master/ghostwriter/moustache/parser.py": {
        "parse": {
            "name": "parse",
            "location": 120,
            "return": [
                "list[]"
            ],
            "arguments": {
                "moustache_tokens": []
            }
        },
        "ParseError.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseError.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoPrefixParseFunction.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token_type": [],
                "message": [
                    "None"
                ]
            }
        },
        "ExpectedTokenError.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [],
                "actual": []
            }
        },
        "Parser.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.advance": {
            "name": "advance",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.curr_token_is": {
            "name": "curr_token_is",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "typ": []
            }
        },
        "Parser.peek_token_is": {
            "name": "peek_token_is",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "typ": []
            }
        },
        "Parser.expect_peek": {
            "name": "expect_peek",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "typ": []
            }
        },
        "Parser.prefixfn_missing_error": {
            "name": "prefixfn_missing_error",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": []
            }
        },
        "Parser.curr_precedence": {
            "name": "curr_precedence",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "typ": []
            }
        },
        "Parser.peek_precedence": {
            "name": "peek_precedence",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "typ": []
            }
        },
        "Parser.register_prefix_fns": {
            "name": "register_prefix_fns",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "Parser.register_infix_fns": {
            "name": "register_infix_fns",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        }
    },
    "ghostwriter-master/ghostwriter/moustache/__init__.py": {},
    "ghostwriter-master/tests/lang/test_lang_lexer.py": {
        "test_next1": {
            "name": "test_next1",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "next_chunks": {
            "name": "next_chunks",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "txt": [],
                "readsiz": [],
                "reads": []
            }
        },
        "test_peek_start": {
            "name": "test_peek_start",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "txt": [],
                "peek_siz": [],
                "exp_res": []
            }
        },
        "test_peek_next_mix": {
            "name": "test_peek_next_mix",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "description": [],
                "commands": []
            }
        },
        "test_pos_peek": {
            "name": "test_pos_peek",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_current": {
            "name": "test_current",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rewind": {
            "name": "test_rewind",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rewind_too_far": {
            "name": "test_rewind_too_far",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignore_all": {
            "name": "test_ignore_all",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ignore_partial": {
            "name": "test_ignore_partial",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_emit": {
            "name": "test_emit",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peek_while": {
            "name": "test_peek_while",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "txt": [],
                "alphabet": [],
                "exp": []
            }
        },
        "test_next_while_no_buffer": {
            "name": "test_next_while_no_buffer",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "alphabet": [],
                "expected": []
            }
        },
        "test_next_while_partially_consumed_buffer": {
            "name": "test_next_while_partially_consumed_buffer",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "alphabet": [],
                "expected": []
            }
        },
        "test_next_while_idempotent": {
            "name": "test_next_while_idempotent",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_next_while_eof": {
            "name": "test_next_while_eof",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "alphabet": [],
                "expected": [],
                "exp_eof": []
            }
        },
        "test_next_until_no_buffer": {
            "name": "test_next_until_no_buffer",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "alphabet": [],
                "expected": []
            }
        },
        "test_next_until_partially_consumed_buffer": {
            "name": "test_next_until_partially_consumed_buffer",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "alphabet": [],
                "expected": []
            }
        },
        "test_next_until_idempotent": {
            "name": "test_next_until_idempotent",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_next_until_eof": {
            "name": "test_next_until_eof",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "alphabet": [],
                "expected": [],
                "exp_eof": []
            }
        },
        "test_peek_while_no_buffer": {
            "name": "test_peek_while_no_buffer",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "alphabet": [],
                "expected": []
            }
        },
        "test_peek_while_partially_consumed_buffer": {
            "name": "test_peek_while_partially_consumed_buffer",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "alphabet": [],
                "expected": []
            }
        },
        "test_peek_while_idempotent": {
            "name": "test_peek_while_idempotent",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peek_until_no_buffer": {
            "name": "test_peek_until_no_buffer",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "alphabet": [],
                "expected": []
            }
        },
        "test_peek_until_partially_consumed_buffer": {
            "name": "test_peek_until_partially_consumed_buffer",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "alphabet": [],
                "expected": []
            }
        },
        "test_peek_until_idempotent": {
            "name": "test_peek_until_idempotent",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_peek_until_eof": {
            "name": "test_peek_until_eof",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "alphabet": [],
                "expected": []
            }
        },
        "test_expect_next_ok": {
            "name": "test_expect_next_ok",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "offset": [],
                "expected": []
            }
        },
        "test_expect_next_err": {
            "name": "test_expect_next_err",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "offset": [],
                "expected": []
            }
        },
        "test_expect_next_multiple": {
            "name": "test_expect_next_multiple",
            "location": 515,
            "return": [
                "None"
            ],
            "arguments": {
                "offset": [],
                "results": []
            }
        },
        "test_expect_peek_ok": {
            "name": "test_expect_peek_ok",
            "location": 533,
            "return": [
                "None"
            ],
            "arguments": {
                "offset": [],
                "expected": []
            }
        },
        "test_expect_peek_err": {
            "name": "test_expect_peek_err",
            "location": 546,
            "return": [
                "None"
            ],
            "arguments": {
                "offset": [],
                "expected": []
            }
        },
        "test_expect_peek_idempotent": {
            "name": "test_expect_peek_idempotent",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "offset": [],
                "expected": []
            }
        },
        "test_next_until_seq": {
            "name": "test_next_until_seq",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "seq": [],
                "expected": []
            }
        }
    },
    "ghostwriter-master/tests/moustache/test_moustache_lexer.py": {
        "test_moustache": {
            "name": "test_moustache",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "inp": [
                    "str"
                ],
                "expected": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "ghostwriter-master/tests/moustache/test_moustache_parser.py": {
        "test_moustache": {
            "name": "test_moustache",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "template": [
                    "str"
                ],
                "ast": [
                    "str"
                ]
            }
        }
    }
}
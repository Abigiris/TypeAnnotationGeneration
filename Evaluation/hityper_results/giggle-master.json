{
    "giggle-master/setup.py": {},
    "giggle-master/examples/web_service_test.py": {
        "add_data": {
            "name": "add_data",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "predict_interests": {
            "name": "predict_interests",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "similar_items": {
            "name": "similar_items",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "giggle-master/giggle/cli.py": {
        "train": {
            "name": "train",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "web": {
            "name": "web",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "giggle-master/giggle/config.py": {},
    "giggle-master/giggle/data.py": {
        "pick_from_random_users": {
            "name": "pick_from_random_users",
            "location": 88,
            "return": [],
            "arguments": {
                "data_frame": [],
                "nr_users": []
            }
        },
        "data_to_user_joke_matrix": {
            "name": "data_to_user_joke_matrix",
            "location": 105,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "iqr": {
            "name": "iqr",
            "location": 114,
            "return": [],
            "arguments": {
                "xs": []
            }
        },
        "compute_nr_bins": {
            "name": "compute_nr_bins",
            "location": 119,
            "return": [
                "int"
            ],
            "arguments": {
                "counts": []
            }
        },
        "describe_data": {
            "name": "describe_data",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "count_ratings": {
            "name": "count_ratings",
            "location": 137,
            "return": [],
            "arguments": {
                "data": [],
                "column": []
            }
        },
        "plot_counts": {
            "name": "plot_counts",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "data": []
            }
        },
        "plot_rating_hist": {
            "name": "plot_rating_hist",
            "location": 159,
            "return": [],
            "arguments": {
                "data": [],
                "bins": [
                    "None"
                ]
            }
        },
        "Dataset.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nr_folds": [],
                "subsample": [
                    "None"
                ]
            }
        },
        "Dataset._load_data_frame": {
            "name": "_load_data_frame",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "subsample": []
            }
        },
        "Dataset._get_folds": {
            "name": "_get_folds",
            "location": 62,
            "return": [
                "dict[, dict[typing.Text, ]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.load_split_fold": {
            "name": "load_split_fold",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "split": [],
                "i": []
            }
        },
        "Dataset.load_fold": {
            "name": "load_fold",
            "location": 76,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "Dataset.get_data": {
            "name": "get_data",
            "location": 82,
            "return": [
                "Data"
            ],
            "arguments": {
                "self": [],
                "data_frame": [
                    "None"
                ]
            }
        },
        "plot_counts.plot_counts_": {
            "name": "plot_counts_",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "counts": [],
                "xlabel": [],
                "title": []
            }
        }
    },
    "giggle-master/giggle/evaluate.py": {
        "evaluate_fold": {
            "name": "evaluate_fold",
            "location": 30,
            "return": [
                "tuple[tuple[]]"
            ],
            "arguments": {
                "i": [],
                "dataset": [],
                "recommender": [],
                "verbose": [
                    "int"
                ]
            }
        },
        "evaluate_folds": {
            "name": "evaluate_folds",
            "location": 42,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "dataset": [],
                "recommender": [],
                "verbose": [
                    "int"
                ]
            }
        },
        "print_results": {
            "name": "print_results",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "results": []
            }
        },
        "scatter_plot": {
            "name": "scatter_plot",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "list_of_data": [],
                "path": []
            }
        }
    },
    "giggle-master/giggle/models.py": {
        "get_users": {
            "name": "get_users",
            "location": 83,
            "return": [
                "typing.Generator[User]"
            ],
            "arguments": {
                "nr_users": []
            }
        },
        "get_jokes": {
            "name": "get_jokes",
            "location": 87,
            "return": [
                "typing.Generator[Joke]"
            ],
            "arguments": {
                "nr_jokes": []
            }
        },
        "get_ratings": {
            "name": "get_ratings",
            "location": 91,
            "return": [
                "typing.Generator[Rating]"
            ],
            "arguments": {
                "data": []
            }
        },
        "main": {
            "name": "main",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Joke.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rating.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rating.validate_rating": {
            "name": "validate_rating",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "main.get_objects": {
            "name": "get_objects",
            "location": 117,
            "return": [],
            "arguments": {
                "table": []
            }
        }
    },
    "giggle-master/giggle/recommender.py": {
        "rmse": {
            "name": "rmse",
            "location": 32,
            "return": [],
            "arguments": {
                "y_true": [],
                "y_pred": []
            }
        },
        "get_recommender_path": {
            "name": "get_recommender_path",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "key": []
            }
        },
        "save_recommender": {
            "name": "save_recommender",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "recommender": []
            }
        },
        "load_recommender": {
            "name": "load_recommender",
            "location": 238,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "Recommender.fit": {
            "name": "fit",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "verbose": []
            }
        },
        "Recommender.predict": {
            "name": "predict",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_id": [],
                "joke_id": []
            }
        },
        "Recommender.predict_multi": {
            "name": "predict_multi",
            "location": 44,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "user_joke_ids": []
            }
        },
        "GaussianRecommender.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GaussianRecommender.fit": {
            "name": "fit",
            "location": 56,
            "return": [
                "GaussianRecommender"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "verbose": []
            }
        },
        "GaussianRecommender.predict": {
            "name": "predict",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "joke_id": []
            }
        },
        "GaussianRecommender.predict_multi": {
            "name": "predict_multi",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "user_joke_ids": []
            }
        },
        "BetaRecommender.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BetaRecommender.fit": {
            "name": "fit",
            "location": 85,
            "return": [
                "BetaRecommender"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "verbose": []
            }
        },
        "BetaRecommender.predict": {
            "name": "predict",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "joke_id": []
            }
        },
        "BetaRecommender.predict_multi": {
            "name": "predict_multi",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "user_joke_ids": []
            }
        },
        "BaselineRecommender.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nr_epochs": [],
                "lr": [],
                "reg": []
            }
        },
        "BaselineRecommender._compute_rmse": {
            "name": "_compute_rmse",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "data_frame": []
            }
        },
        "BaselineRecommender._update_params": {
            "name": "_update_params",
            "location": 138,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BaselineRecommender.fit": {
            "name": "fit",
            "location": 148,
            "return": [
                "BaselineRecommender"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "verbose": []
            }
        },
        "BaselineRecommender.predict": {
            "name": "predict",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "joke_id": []
            }
        },
        "Neighbourhood.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "Neighbourhood._compute_similarities": {
            "name": "_compute_similarities",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "user_joke_matrix": []
            }
        },
        "Neighbourhood._find_most_similar_rated_jokes": {
            "name": "_find_most_similar_rated_jokes",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "user_ratings": [],
                "joke_id": []
            }
        },
        "Neighbourhood.fit": {
            "name": "fit",
            "location": 201,
            "return": [
                "Neighbourhood"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "verbose": []
            }
        },
        "Neighbourhood.predict": {
            "name": "predict",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "joke_id": []
            }
        }
    },
    "giggle-master/giggle/utils.py": {
        "wrap_exceptions": {
            "name": "wrap_exceptions",
            "location": 7,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ],
                "logger": [
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "_error_as_json": {
            "name": "_error_as_json",
            "location": 17,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "ex": [
                    "str"
                ],
                "logger": [],
                "status": [
                    "int"
                ]
            }
        },
        "grouper": {
            "name": "grouper",
            "location": 25,
            "return": [],
            "arguments": {
                "iterable": [
                    "int",
                    "dict[, ]"
                ],
                "n": [
                    "int"
                ],
                "fillvalue": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "wrap_exceptions.func_wrapper": {
            "name": "func_wrapper",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "giggle-master/giggle/web_service.py": {
        "get_unrated_jokes": {
            "name": "get_unrated_jokes",
            "location": 59,
            "return": [
                "list[]"
            ],
            "arguments": {
                "user_id": []
            }
        },
        "predict_interests": {
            "name": "predict_interests",
            "location": 67,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "user_id": []
            }
        },
        "add_data": {
            "name": "add_data",
            "location": 81,
            "return": [
                "tuple[int]"
            ],
            "arguments": {}
        },
        "similar_items": {
            "name": "similar_items",
            "location": 101,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "joke_id": []
            }
        }
    },
    "giggle-master/giggle/__init__.py": {},
    "giggle-master/scripts/split_jokes.py": {},
    "giggle-master/tests/test_recommender.py": {
        "TestBaseline.test_error_improves": {
            "name": "test_error_improves",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeighbourhood.test_sims": {
            "name": "test_sims",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNeighbourhood.test_user_joke_matrix": {
            "name": "test_user_joke_matrix",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "giggle-master/tests/test_utils.py": {
        "test_grouper": {
            "name": "test_grouper",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
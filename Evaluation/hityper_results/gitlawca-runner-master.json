{
    "gitlawca-runner-master/runner.py": {},
    "gitlawca-runner-master/setup.py": {},
    "gitlawca-runner-master/pylint_custom/multiple_import_checker.py": {
        "register_checkers": {
            "name": "register_checkers",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "linter": []
            }
        },
        "MultipleImportChecker.visit_importfrom": {
            "name": "visit_importfrom",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "gitlawca-runner-master/pylint_custom/__init__.py": {
        "register": {
            "name": "register",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "linter": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        }
    },
    "gitlawca-runner-master/scraper/acts_scraper.py": {
        "Scraper.scrape": {
            "name": "scrape",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_breadcrumb": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "ActsScraper.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActsScraper.follow_breadcrumb": {
            "name": "follow_breadcrumb",
            "location": 48,
            "return": [
                "tuple[typing.Union[str,dict[str, typing.Union[int,str]]]]"
            ],
            "arguments": {
                "input_breadcrumb": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "ActsScraper.parse_main_page": {
            "name": "parse_main_page",
            "location": 62,
            "return": [
                "tuple[list[]]",
                "tuple[list[Breadcrumb]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "list[int]",
                    "typing.Callable[typing.Any, T]",
                    "str"
                ],
                "scraper_input": [
                    "str",
                    "list[dict[, ]]",
                    "bytes",
                    "typing.Callable[, ]"
                ]
            }
        },
        "ActsScraper.parse_letter_page": {
            "name": "parse_letter_page",
            "location": 80,
            "return": [
                "tuple[list[]]",
                "tuple[list[Breadcrumb]]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "scraper_input": [
                    "str",
                    "dict[, ]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ActsScraper.parse_act_main": {
            "name": "parse_act_main",
            "location": 102,
            "return": [
                "tuple[list[]]",
                "tuple[list[Breadcrumb]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "list[int]",
                    "typing.Callable[typing.Any, T]",
                    "str"
                ],
                "scraper_input": [
                    "str",
                    "typing.Generator[]"
                ]
            }
        },
        "ActsScraper.parse_act_versions": {
            "name": "parse_act_versions",
            "location": 119,
            "return": [
                "tuple[list[]]",
                "tuple[list[Breadcrumb]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "scraper_input": [
                    "BaseException",
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ActsScraper.parse_act_item": {
            "name": "parse_act_item",
            "location": 144,
            "return": [
                "tuple[list[]]",
                "tuple[list[ActItem]]"
            ],
            "arguments": {
                "cls": [
                    "list[]",
                    "typing.Type",
                    "typing.Callable[, ]",
                    "Exception"
                ],
                "scraper_input": [
                    "str",
                    "tuple[]",
                    "dict[, ]"
                ]
            }
        },
        "ActsScraper.scrape": {
            "name": "scrape",
            "location": 162,
            "return": [
                "None",
                "tuple[typing.Union[typing.Any,typing.Any]]",
                "typing.Mapping",
                "tuple[typing.Union[int,typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "input_breadcrumb": [
                    "str",
                    "dict[, ]",
                    "int"
                ]
            }
        }
    },
    "gitlawca-runner-master/scraper/acts_storage.py": {
        "ActsStorage.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ds": [
                    "int",
                    "list[str]",
                    "str",
                    "tuple[typing.Union[int,int,int]]"
                ],
                "st": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "ActsStorage.__act_in_datastore": {
            "name": "__act_in_datastore",
            "location": 13,
            "return": [
                "list[]",
                "dict[str, str]",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[str, typing.Any]",
                    "dict[typing.AbstractSet, set[typing.Any]]",
                    "dict[, ]",
                    "int",
                    "list[]"
                ]
            }
        },
        "ActsStorage.__act_version_in_datastore": {
            "name": "__act_version_in_datastore",
            "location": 26,
            "return": [
                "str",
                "bytes",
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[, ]",
                    "list[dict[, ]]",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "act_key": [
                    "dict[, ]",
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "ActsStorage.__store_raw_in_storage": {
            "name": "__store_raw_in_storage",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict[, ]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ActsStorage.store": {
            "name": "store",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "typing.Type",
                    "bytes"
                ]
            }
        }
    },
    "gitlawca-runner-master/scraper/cli.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "trigger": {
            "name": "trigger",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_get_spider": {
            "name": "_get_spider",
            "location": 24,
            "return": [
                "ActsSpider"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "wait": [
                    "dict[, ]"
                ],
                "continuous": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "gitlawca-runner-master/scraper/install.py": {
        "get_platform": {
            "name": "get_platform",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "get_distribution_url": {
            "name": "get_distribution_url",
            "location": 57,
            "return": [],
            "arguments": {
                "system": [
                    "list[str]",
                    "int",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "detect_gcloud": {
            "name": "detect_gcloud",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "system": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "gcloud_folder": {
            "name": "gcloud_folder",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "root_folder": [
                    "str"
                ]
            }
        },
        "download_gcloud": {
            "name": "download_gcloud",
            "location": 75,
            "return": [
                "str",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]",
                "int"
            ],
            "arguments": {
                "root_folder": [
                    "str",
                    "bytes"
                ],
                "system": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "run_gcloud_installation": {
            "name": "run_gcloud_installation",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "base_path": [
                    "str",
                    "int"
                ]
            }
        },
        "install_gcloud": {
            "name": "install_gcloud",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "root_folder": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "installation_folder": {
            "name": "installation_folder",
            "location": 111,
            "return": [],
            "arguments": {}
        }
    },
    "gitlawca-runner-master/scraper/logger.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "gitlawca-runner-master/scraper/spider.py": {
        "ActsSpider.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pubsub_client": [],
                "scraper": [
                    "float",
                    "bool"
                ],
                "storage": [
                    "float",
                    "bool"
                ]
            }
        },
        "ActsSpider._store_breadcrumbs": {
            "name": "_store_breadcrumbs",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "breadcrumbs": [
                    "list[]",
                    "str"
                ]
            }
        },
        "ActsSpider._store_items": {
            "name": "_store_items",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str"
                ]
            }
        },
        "ActsSpider.listen": {
            "name": "listen",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "wait": [
                    "bool"
                ]
            }
        },
        "ActsSpider.keep_listening": {
            "name": "keep_listening",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wait": [
                    "bool"
                ]
            }
        }
    },
    "gitlawca-runner-master/scraper/storage.py": {
        "get_storage": {
            "name": "get_storage",
            "location": 138,
            "return": [
                "GoogleStorage",
                "MockStorage"
            ],
            "arguments": {}
        },
        "Blob.name": {
            "name": "name",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blob.exists": {
            "name": "exists",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blob.delete": {
            "name": "delete",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blob.upload_from_file": {
            "name": "upload_from_file",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "typing.IO",
                    "list[str]",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "Blob.upload_from_filename": {
            "name": "upload_from_filename",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "Blob.upload_from_string": {
            "name": "upload_from_string",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "list[str]",
                    "list[dict[, ]]",
                    "bool"
                ]
            }
        },
        "Blob.download_to_file": {
            "name": "download_to_file",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "typing.IO",
                    "typing.Sequence[str]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "Blob.download_to_filename": {
            "name": "download_to_filename",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool",
                    "typing.IO"
                ]
            }
        },
        "Blob.download_to_string": {
            "name": "download_to_string",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Storage.get_blob": {
            "name": "get_blob",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blob_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "MockBlob.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_path": [
                    "str",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        },
        "MockBlob.name": {
            "name": "name",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockBlob.exists": {
            "name": "exists",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockBlob.delete": {
            "name": "delete",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockBlob.upload_from_file": {
            "name": "upload_from_file",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "MockBlob.upload_from_filename": {
            "name": "upload_from_filename",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "MockBlob.upload_from_string": {
            "name": "upload_from_string",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MockBlob.download_to_file": {
            "name": "download_to_file",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "typing.IO",
                    "tuple[]",
                    "typing.BinaryIO"
                ]
            }
        },
        "MockBlob.download_to_filename": {
            "name": "download_to_filename",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "MockBlob.download_to_string": {
            "name": "download_to_string",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockStorage.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "MockStorage.get_blob": {
            "name": "get_blob",
            "location": 93,
            "return": [
                "MockBlob"
            ],
            "arguments": {
                "self": [],
                "blob_name": [
                    "str"
                ]
            }
        },
        "GoogleBlob.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blob_name": [
                    "str",
                    "None",
                    "bool"
                ],
                "blob": [
                    "bool",
                    "str",
                    "None"
                ]
            }
        },
        "GoogleBlob.name": {
            "name": "name",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoogleBlob.exists": {
            "name": "exists",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoogleBlob.delete": {
            "name": "delete",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleBlob.upload_from_file": {
            "name": "upload_from_file",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "GoogleBlob.upload_from_filename": {
            "name": "upload_from_filename",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "GoogleBlob.upload_from_string": {
            "name": "upload_from_string",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "GoogleBlob.download_to_file": {
            "name": "download_to_file",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str"
                ]
            }
        },
        "GoogleBlob.download_to_filename": {
            "name": "download_to_filename",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "GoogleBlob.download_to_string": {
            "name": "download_to_string",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GoogleStorage.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "GoogleStorage.get_blob": {
            "name": "get_blob",
            "location": 134,
            "return": [
                "GoogleBlob"
            ],
            "arguments": {
                "self": [],
                "blob_name": [
                    "str"
                ]
            }
        }
    },
    "gitlawca-runner-master/scraper/__init__.py": {},
    "gitlawca-runner-master/tests/conftest.py": {
        "terminate_subprocess": {
            "name": "terminate_subprocess",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "proc": [],
                "name": [
                    "str",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "datastore_service": {
            "name": "datastore_service",
            "location": 35,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "datastore_client": {
            "name": "datastore_client",
            "location": 58,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "datastore_service": []
            }
        },
        "pubsub_service": {
            "name": "pubsub_service",
            "location": 69,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "pubsub_client": {
            "name": "pubsub_client",
            "location": 90,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "pubsub_service": []
            }
        },
        "stor": {
            "name": "stor",
            "location": 107,
            "return": [],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "gitlaw_env": {
            "name": "gitlaw_env",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DoNothingCreds.refresh": {
            "name": "refresh",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        }
    },
    "gitlawca-runner-master/tests/__init__.py": {},
    "gitlawca-runner-master/tests/pylint_custom/test_multiple_import_checker.py": {
        "TestMultipleImportChecker.test_multiple_imports_raises_linter_error": {
            "name": "test_multiple_imports_raises_linter_error",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultipleImportChecker.test_no_multiple_imports_doesnt_raise_linter_error": {
            "name": "test_no_multiple_imports_doesnt_raise_linter_error",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gitlawca-runner-master/tests/pylint_custom/__init__.py": {},
    "gitlawca-runner-master/tests/scraper/test_acts_scraper.py": {
        "get_fixture": {
            "name": "get_fixture",
            "location": 7,
            "return": [],
            "arguments": {}
        },
        "test_parse_main_page": {
            "name": "test_parse_main_page",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_main_page_skip_old": {
            "name": "test_parse_main_page_skip_old",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_letter_page": {
            "name": "test_parse_letter_page",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_letter_page_skip_old": {
            "name": "test_parse_letter_page_skip_old",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_act_main": {
            "name": "test_parse_act_main",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_act_main_skip_old": {
            "name": "test_parse_act_main_skip_old",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_act_versions": {
            "name": "test_parse_act_versions",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_act_versions_skip_old": {
            "name": "test_parse_act_versions_skip_old",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_act_item": {
            "name": "test_parse_act_item",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_act_item_skip_old": {
            "name": "test_parse_act_item_skip_old",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gitlawca-runner-master/tests/scraper/test_acts_storage.py": {
        "test_datastore_is_clean": {
            "name": "test_datastore_is_clean",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "datastore_client": []
            }
        },
        "test_datastore_is_still_clean": {
            "name": "test_datastore_is_still_clean",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "datastore_client": []
            }
        },
        "test_store_item": {
            "name": "test_store_item",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "datastore_client": [
                    "dict[, ]"
                ],
                "stor": []
            }
        }
    },
    "gitlawca-runner-master/tests/scraper/test_integration.py": {
        "acts_spider": {
            "name": "acts_spider",
            "location": 13,
            "return": [],
            "arguments": {
                "pubsub_client": [
                    "float",
                    "str",
                    "dict[, ]"
                ],
                "datastore_client": [
                    "str"
                ],
                "stor": [
                    "str"
                ]
            }
        },
        "test_integration": {
            "name": "test_integration",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "pubsub_client": [],
                "datastore_client": [],
                "stor": [
                    "bool"
                ],
                "acts_spider": []
            }
        }
    },
    "gitlawca-runner-master/tests/scraper/test_pubsub.py": {
        "test_pubsub_is_blank": {
            "name": "test_pubsub_is_blank",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "pubsub_client": []
            }
        },
        "test_pubsub_is_still_blank": {
            "name": "test_pubsub_is_still_blank",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "pubsub_client": []
            }
        }
    },
    "gitlawca-runner-master/tests/scraper/test_spider.py": {
        "test_listen_publishes_to_pubsub": {
            "name": "test_listen_publishes_to_pubsub",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "pubsub_client": [],
                "datastore_client": [],
                "stor": []
            }
        },
        "test_listen_stores_results": {
            "name": "test_listen_stores_results",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "pubsub_client": [],
                "datastore_client": [],
                "stor": []
            }
        },
        "MockScraper.scrape": {
            "name": "scrape",
            "location": 16,
            "return": [
                "tuple[list[]]"
            ],
            "arguments": {
                "self": [],
                "input_breadcrumb": [
                    "dict[str, object]",
                    "str"
                ]
            }
        }
    },
    "gitlawca-runner-master/tests/scraper/test_storage.py": {
        "mock_storage": {
            "name": "mock_storage",
            "location": 9,
            "return": [],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_mock_storage_returns_blob": {
            "name": "test_mock_storage_returns_blob",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_storage": []
            }
        },
        "test_upload_download_string": {
            "name": "test_upload_download_string",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_storage": []
            }
        },
        "test_upload_from_file": {
            "name": "test_upload_from_file",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_storage": []
            }
        },
        "test_download_to_file": {
            "name": "test_download_to_file",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_storage": []
            }
        },
        "test_upload_from_filename": {
            "name": "test_upload_from_filename",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "mock_storage": []
            }
        },
        "test_download_to_filename": {
            "name": "test_download_to_filename",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "mock_storage": []
            }
        },
        "test_exists": {
            "name": "test_exists",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_storage": []
            }
        },
        "test_delete": {
            "name": "test_delete",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "mock_storage": []
            }
        },
        "test_get_storage_not_production": {
            "name": "test_get_storage_not_production",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gitlawca-runner-master/tests/scraper/__init__.py": {}
}
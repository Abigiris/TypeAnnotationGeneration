{
    "gobbli-master/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "make_temp_dir": {
            "name": "make_temp_dir",
            "location": 55,
            "return": [
                "typing.Generator[Path]"
            ],
            "arguments": {}
        },
        "tmp_gobbli_dir": {
            "name": "tmp_gobbli_dir",
            "location": 68,
            "return": [
                "typing.Generator"
            ],
            "arguments": {}
        },
        "gobbli_dir": {
            "name": "gobbli_dir",
            "location": 78,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "request": []
            }
        },
        "model_gpu_config": {
            "name": "model_gpu_config",
            "location": 99,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "gobbli-master/setup.py": {},
    "gobbli-master/benchmark/benchmark_util.py": {
        "format_exception": {
            "name": "format_exception",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "e": []
            }
        },
        "init_benchmark_env": {
            "name": "init_benchmark_env",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "assert_param_required": {
            "name": "assert_param_required",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "params": []
            }
        },
        "assert_proportion": {
            "name": "assert_proportion",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "p": []
            }
        },
        "assert_valid_model": {
            "name": "assert_valid_model",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "assert_valid_augment": {
            "name": "assert_valid_augment",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        },
        "maybe_limit": {
            "name": "maybe_limit",
            "location": 100,
            "return": [
                "tuple",
                "tuple[list]"
            ],
            "arguments": {
                "X_train_valid": [],
                "y_train_valid": [],
                "X_test": [],
                "y_test": [],
                "limit": []
            }
        },
        "fasttext_preprocess": {
            "name": "fasttext_preprocess",
            "location": 128,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "texts": []
            }
        },
        "bert_preprocess": {
            "name": "bert_preprocess",
            "location": 147,
            "return": [
                "list"
            ],
            "arguments": {
                "texts": []
            }
        },
        "run_benchmark_experiment": {
            "name": "run_benchmark_experiment",
            "location": 168,
            "return": [],
            "arguments": {
                "name": [],
                "X": [],
                "y": [],
                "model_cls": [],
                "param_grid": [],
                "ray_log_level": [],
                "worker_log_level": [],
                "test_dataset": [
                    "None"
                ],
                "run_kwargs": [
                    "None"
                ]
            }
        },
        "StdoutCatcher.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StdoutCatcher.__enter__": {
            "name": "__enter__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StdoutCatcher.__exit__": {
            "name": "__exit__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "et": [],
                "ev": [],
                "tb": []
            }
        },
        "StdoutCatcher.get_logs": {
            "name": "get_logs",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "gobbli-master/benchmark/run_benchmarks.py": {
        "load_specs": {
            "name": "load_specs",
            "location": 47,
            "return": [
                "dict"
            ],
            "arguments": {
                "specs_file": []
            }
        },
        "run": {
            "name": "run",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "scenario_names": [],
                "force": [],
                "output_dir": [],
                "log_level": [],
                "debug": [],
                "raise_exceptions": []
            }
        }
    },
    "gobbli-master/benchmark/scenario.py": {
        "get_model_run_params": {
            "name": "get_model_run_params",
            "location": 51,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {}
        },
        "load_scenario": {
            "name": "load_scenario",
            "location": 996,
            "return": [],
            "arguments": {
                "scenario_cls": [],
                "output_dir": [],
                "params": [],
                "run_dicts": [],
                "force": [
                    "bool"
                ],
                "dataset_limit": [
                    "None"
                ]
            }
        },
        "BaseRun.key": {
            "name": "key",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelClassificationRun.key": {
            "name": "key",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelEmbeddingRun.key": {
            "name": "key",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AugmentRun.key": {
            "name": "key",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseScenario.__post_init__": {
            "name": "__post_init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseScenario._gather_existing_runs": {
            "name": "_gather_existing_runs",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseScenario.run": {
            "name": "run",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raise_exceptions": [
                    "bool"
                ]
            }
        },
        "BaseScenario.to_metadata": {
            "name": "to_metadata",
            "location": 215,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "run": []
            }
        },
        "BaseScenario.should_run": {
            "name": "should_run",
            "location": 218,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "run": []
            }
        },
        "BaseScenario.get_markdown_relative_path": {
            "name": "get_markdown_relative_path",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "BaseScenario.metadata_filename": {
            "name": "metadata_filename",
            "location": 236,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseScenario.output_filename": {
            "name": "output_filename",
            "location": 240,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseScenario.error_filename": {
            "name": "error_filename",
            "location": 244,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseScenario.all_output_filename": {
            "name": "all_output_filename",
            "location": 248,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseScenario.name": {
            "name": "name",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseScenario._validate_params": {
            "name": "_validate_params",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseScenario._do_run": {
            "name": "_do_run",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run": [],
                "run_output_dir": []
            }
        },
        "ModelClassificationScenario._do_run": {
            "name": "_do_run",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run": [],
                "run_output_dir": []
            }
        },
        "ModelEmbeddingScenario._do_run": {
            "name": "_do_run",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run": [],
                "run_output_dir": []
            }
        },
        "AugmentScenario._do_run": {
            "name": "_do_run",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "run": [],
                "run_output_dir": []
            }
        },
        "DatasetClassificationScenario.dataset": {
            "name": "dataset",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetClassificationScenario._validate_params": {
            "name": "_validate_params",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetClassificationScenario._do_run": {
            "name": "_do_run",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "run": [],
                "run_output_dir": []
            }
        },
        "NewsgroupsClassificationScenario.name": {
            "name": "name",
            "location": 370,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewsgroupsClassificationScenario.dataset": {
            "name": "dataset",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IMDBClassificationScenario.name": {
            "name": "name",
            "location": 385,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMDBClassificationScenario.dataset": {
            "name": "dataset",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MovieSummaryClassificationScenario.name": {
            "name": "name",
            "location": 401,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovieSummaryClassificationScenario.dataset": {
            "name": "dataset",
            "location": 405,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DatasetEmbeddingScenario.dataset": {
            "name": "dataset",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetEmbeddingScenario._validate_params": {
            "name": "_validate_params",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetEmbeddingScenario._do_run": {
            "name": "_do_run",
            "location": 428,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "run": [],
                "run_output_dir": []
            }
        },
        "NewsgroupsEmbeddingScenario.name": {
            "name": "name",
            "location": 502,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewsgroupsEmbeddingScenario.dataset": {
            "name": "dataset",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IMDBEmbeddingScenario.name": {
            "name": "name",
            "location": 517,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMDBEmbeddingScenario.dataset": {
            "name": "dataset",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassImbalanceScenario.name": {
            "name": "name",
            "location": 532,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassImbalanceScenario._validate_params": {
            "name": "_validate_params",
            "location": 535,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassImbalanceScenario.find_majority_minority_classes": {
            "name": "find_majority_minority_classes",
            "location": 544,
            "return": [
                "tuple"
            ],
            "arguments": {
                "y": []
            }
        },
        "ClassImbalanceScenario.split_dataset": {
            "name": "split_dataset",
            "location": 549,
            "return": [
                "tuple"
            ],
            "arguments": {
                "X": [],
                "y": [],
                "majority": [],
                "minority": []
            }
        },
        "ClassImbalanceScenario._do_run": {
            "name": "_do_run",
            "location": 562,
            "return": [],
            "arguments": {
                "self": [],
                "run": [],
                "run_output_dir": []
            }
        },
        "LowResourceScenario.name": {
            "name": "name",
            "location": 671,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LowResourceScenario._validate_params": {
            "name": "_validate_params",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LowResourceScenario._do_run": {
            "name": "_do_run",
            "location": 682,
            "return": [],
            "arguments": {
                "self": [],
                "run": [],
                "run_output_dir": []
            }
        },
        "DataAugmentationScenario.name": {
            "name": "name",
            "location": 757,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataAugmentationScenario._validate_params": {
            "name": "_validate_params",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataAugmentationScenario._do_run": {
            "name": "_do_run",
            "location": 782,
            "return": [],
            "arguments": {
                "self": [],
                "run": [],
                "run_output_dir": []
            }
        },
        "DocumentWindowingScenario.name": {
            "name": "name",
            "location": 878,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentWindowingScenario._validate_params": {
            "name": "_validate_params",
            "location": 881,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DocumentWindowingScenario._do_run": {
            "name": "_do_run",
            "location": 899,
            "return": [],
            "arguments": {
                "self": [],
                "run": [],
                "run_output_dir": []
            }
        }
    },
    "gobbli-master/docs/conf.py": {
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "gobbli-master/gobbli/cli.py": {
        "_streamlit_run": {
            "name": "_streamlit_run",
            "location": 9,
            "return": [],
            "arguments": {
                "app_name": []
            }
        },
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main_explore": {
            "name": "main_explore",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main_evaluate": {
            "name": "main_evaluate",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "main_explain": {
            "name": "main_explain",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "gobbli-master/gobbli/docker.py": {
        "format_container_output": {
            "name": "format_container_output",
            "location": 10,
            "return": [],
            "arguments": {
                "output": []
            }
        },
        "maybe_mount": {
            "name": "maybe_mount",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "volumes": [],
                "host_path": [],
                "container_path": [],
                "mode": [
                    "typing.Text"
                ]
            }
        },
        "run_container": {
            "name": "run_container",
            "location": 44,
            "return": [],
            "arguments": {
                "client": [],
                "image_tag": [],
                "cmd": [],
                "logger": []
            }
        }
    },
    "gobbli-master/gobbli/io.py": {
        "_check_string_list": {
            "name": "_check_string_list",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            }
        },
        "_check_multilabel_list": {
            "name": "_check_multilabel_list",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": []
            }
        },
        "validate_X": {
            "name": "validate_X",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "X": []
            }
        },
        "validate_multilabel_y": {
            "name": "validate_multilabel_y",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "y": [],
                "multilabel": []
            }
        },
        "validate_X_y": {
            "name": "validate_X_y",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [],
                "y": []
            }
        },
        "_chunk_tokens": {
            "name": "_chunk_tokens",
            "location": 388,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "tokens": [],
                "window_len": []
            }
        },
        "make_document_windows": {
            "name": "make_document_windows",
            "location": 393,
            "return": [
                "tuple[list]",
                "tuple[typing.Optional[list]]"
            ],
            "arguments": {
                "X": [],
                "window_len": [],
                "y": [
                    "None"
                ],
                "tokenize_method": [],
                "model_path": [
                    "None"
                ],
                "vocab_size": [
                    "None"
                ]
            }
        },
        "pool_document_windows": {
            "name": "pool_document_windows",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "unpooled_output": [],
                "window_indices": [],
                "pooling": []
            }
        },
        "TaskIO.metadata": {
            "name": "metadata",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainInput.y_train_multiclass": {
            "name": "y_train_multiclass",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainInput.y_train_multilabel": {
            "name": "y_train_multilabel",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainInput.y_valid_multiclass": {
            "name": "y_valid_multiclass",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainInput.y_valid_multilabel": {
            "name": "y_valid_multilabel",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainInput.labels": {
            "name": "labels",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainInput.__post_init__": {
            "name": "__post_init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainInput.metadata": {
            "name": "metadata",
            "location": 187,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainOutput.metadata": {
            "name": "metadata",
            "location": 229,
            "return": [
                "dict[typing.Text, typing.Union[float,str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictInput.__post_init__": {
            "name": "__post_init__",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictInput.metadata": {
            "name": "metadata",
            "location": 264,
            "return": [
                "dict[typing.Text, typing.Union[str,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictOutput.y_pred": {
            "name": "y_pred",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictOutput.y_pred_multilabel": {
            "name": "y_pred_multilabel",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "threshold": [
                    "float"
                ]
            }
        },
        "PredictOutput.__post_init__": {
            "name": "__post_init__",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictOutput.metadata": {
            "name": "metadata",
            "location": 307,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbedInput.__post_init__": {
            "name": "__post_init__",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbedInput.metadata": {
            "name": "metadata",
            "location": 354,
            "return": [
                "dict[typing.Text, typing.Union[str,int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbedOutput.metadata": {
            "name": "metadata",
            "location": 384,
            "return": [
                "dict[typing.Text, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gobbli-master/gobbli/util.py": {
        "default_gobbli_dir": {
            "name": "default_gobbli_dir",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "gobbli_dir": {
            "name": "gobbli_dir",
            "location": 48,
            "return": [
                "Path"
            ],
            "arguments": {}
        },
        "model_dir": {
            "name": "model_dir",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "gobbli_version": {
            "name": "gobbli_version",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "disk_usage": {
            "name": "disk_usage",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "human_disk_usage": {
            "name": "human_disk_usage",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "cleanup": {
            "name": "cleanup",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "force": [
                    "bool"
                ],
                "full": [
                    "bool"
                ]
            }
        },
        "pred_prob_to_pred_label": {
            "name": "pred_prob_to_pred_label",
            "location": 127,
            "return": [
                "list"
            ],
            "arguments": {
                "y_pred_proba": []
            }
        },
        "pred_prob_to_pred_multilabel": {
            "name": "pred_prob_to_pred_multilabel",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "y_pred_proba": [],
                "threshold": [
                    "float"
                ]
            }
        },
        "is_multilabel": {
            "name": "is_multilabel",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "y": []
            }
        },
        "as_multilabel": {
            "name": "as_multilabel",
            "location": 157,
            "return": [],
            "arguments": {
                "y": [],
                "is_multilabel": []
            }
        },
        "as_multiclass": {
            "name": "as_multiclass",
            "location": 170,
            "return": [],
            "arguments": {
                "y": [],
                "is_multilabel": []
            }
        },
        "multiclass_to_multilabel_target": {
            "name": "multiclass_to_multilabel_target",
            "location": 183,
            "return": [
                "list[list]"
            ],
            "arguments": {
                "y": []
            }
        },
        "multilabel_to_indicator_df": {
            "name": "multilabel_to_indicator_df",
            "location": 194,
            "return": [],
            "arguments": {
                "y": [],
                "labels": []
            }
        },
        "collect_labels": {
            "name": "collect_labels",
            "location": 210,
            "return": [
                "list"
            ],
            "arguments": {
                "y": []
            }
        },
        "truncate_text": {
            "name": "truncate_text",
            "location": 231,
            "return": [],
            "arguments": {
                "text": [],
                "length": []
            }
        },
        "assert_type": {
            "name": "assert_type",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "val": [],
                "cls": []
            }
        },
        "assert_in": {
            "name": "assert_in",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "val": [],
                "container": []
            }
        },
        "generate_uuid": {
            "name": "generate_uuid",
            "location": 275,
            "return": [],
            "arguments": {}
        },
        "download_dir": {
            "name": "download_dir",
            "location": 283,
            "return": [],
            "arguments": {}
        },
        "escape_line_delimited_text": {
            "name": "escape_line_delimited_text",
            "location": 293,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "escape_line_delimited_texts": {
            "name": "escape_line_delimited_texts",
            "location": 308,
            "return": [
                "str"
            ],
            "arguments": {
                "texts": []
            }
        },
        "is_dir_empty": {
            "name": "is_dir_empty",
            "location": 324,
            "return": [
                "bool"
            ],
            "arguments": {
                "dir_path": []
            }
        },
        "write_metadata": {
            "name": "write_metadata",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "metadata": [],
                "file_path": []
            }
        },
        "read_metadata": {
            "name": "read_metadata",
            "location": 355,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "format_duration": {
            "name": "format_duration",
            "location": 369,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "seconds": []
            }
        },
        "copy_file": {
            "name": "copy_file",
            "location": 382,
            "return": [
                "bool"
            ],
            "arguments": {
                "src_path": [],
                "dest_path": []
            }
        },
        "download_file": {
            "name": "download_file",
            "location": 401,
            "return": [],
            "arguments": {
                "url": [],
                "filename": [
                    "None"
                ]
            }
        },
        "_extract_tar_junk_path": {
            "name": "_extract_tar_junk_path",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "tarfile_obj": [],
                "archive_extract_dir": []
            }
        },
        "_extract_zip_junk_path": {
            "name": "_extract_zip_junk_path",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {
                "zipfile_obj": [],
                "archive_extract_dir": []
            }
        },
        "is_archive": {
            "name": "is_archive",
            "location": 489,
            "return": [
                "bool"
            ],
            "arguments": {
                "filepath": []
            }
        },
        "extract_archive": {
            "name": "extract_archive",
            "location": 503,
            "return": [],
            "arguments": {
                "archive_path": [],
                "archive_extract_dir": [],
                "junk_paths": [
                    "bool"
                ]
            }
        },
        "download_archive": {
            "name": "download_archive",
            "location": 549,
            "return": [],
            "arguments": {
                "archive_url": [],
                "archive_extract_dir": [],
                "junk_paths": [
                    "bool"
                ],
                "filename": [
                    "None"
                ]
            }
        },
        "dir_to_blob": {
            "name": "dir_to_blob",
            "location": 587,
            "return": [],
            "arguments": {
                "dir_path": []
            }
        },
        "blob_to_dir": {
            "name": "blob_to_dir",
            "location": 610,
            "return": [
                "None"
            ],
            "arguments": {
                "blob": [],
                "dir_path": []
            }
        },
        "shuffle_together": {
            "name": "shuffle_together",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {
                "l1": [],
                "l2": [],
                "seed": [
                    "None"
                ]
            }
        },
        "_train_sentencepiece": {
            "name": "_train_sentencepiece",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "spm": [],
                "texts": [],
                "model_path": [],
                "vocab_size": []
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 695,
            "return": [
                "list[list]",
                "list"
            ],
            "arguments": {
                "method": [],
                "texts": [],
                "model_path": [
                    "None"
                ],
                "vocab_size": [
                    "int"
                ]
            }
        },
        "detokenize": {
            "name": "detokenize",
            "location": 762,
            "return": [
                "list[str]",
                "list"
            ],
            "arguments": {
                "method": [],
                "all_tokens": [],
                "model_path": [
                    "None"
                ]
            }
        }
    },
    "gobbli-master/gobbli/__init__.py": {},
    "gobbli-master/gobbli/augment/base.py": {
        "augment_dir": {
            "name": "augment_dir",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "BaseAugment.augment": {
            "name": "augment",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "times": [
                    "int"
                ],
                "p": [
                    "float"
                ]
            }
        },
        "BaseAugment.data_dir": {
            "name": "data_dir",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "gobbli-master/gobbli/augment/word2vec.py": {
        "Word2Vec.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [],
                "tokenizer": [],
                "n_similar": [
                    "int"
                ],
                "diversity": [
                    "float"
                ]
            }
        },
        "Word2Vec._maybe_replace_token": {
            "name": "_maybe_replace_token",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "Word2Vec.augment": {
            "name": "augment",
            "location": 184,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "times": [
                    "int"
                ],
                "p": [
                    "float"
                ]
            }
        }
    },
    "gobbli-master/gobbli/augment/wordnet.py": {
        "_detokenize_doc": {
            "name": "_detokenize_doc",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "doc": []
            }
        },
        "_get_lemmas": {
            "name": "_get_lemmas",
            "location": 17,
            "return": [
                "list"
            ],
            "arguments": {
                "synsets": []
            }
        },
        "_get_wordnet_lemmas": {
            "name": "_get_wordnet_lemmas",
            "location": 25,
            "return": [
                "list"
            ],
            "arguments": {
                "word": [],
                "pos": []
            }
        },
        "WordNet.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "skip_download_check": [
                    "bool"
                ],
                "spacy_model": [
                    "typing.Text"
                ]
            }
        },
        "WordNet._maybe_replace_token": {
            "name": "_maybe_replace_token",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "WordNet.augment": {
            "name": "augment",
            "location": 104,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "times": [
                    "int"
                ],
                "p": [
                    "float"
                ]
            }
        }
    },
    "gobbli-master/gobbli/augment/__init__.py": {},
    "gobbli-master/gobbli/augment/bert/model.py": {
        "BERTMaskedLM.init": {
            "name": "init",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "BERTMaskedLM.image_tag": {
            "name": "image_tag",
            "location": 68,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BERTMaskedLM._build": {
            "name": "_build",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BERTMaskedLM._write_input": {
            "name": "_write_input",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "context": []
            }
        },
        "BERTMaskedLM._read_output": {
            "name": "_read_output",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "BERTMaskedLM.host_cache_dir": {
            "name": "host_cache_dir",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BERTMaskedLM.augment": {
            "name": "augment",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "X": [],
                "times": [
                    "int"
                ],
                "p": [
                    "float"
                ]
            }
        }
    },
    "gobbli-master/gobbli/augment/bert/__init__.py": {},
    "gobbli-master/gobbli/augment/bert/src/augment_text.py": {
        "batch_list": {
            "name": "batch_list",
            "location": 8,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "l": [],
                "batch_size": []
            }
        },
        "encode_batch": {
            "name": "encode_batch",
            "location": 13,
            "return": [],
            "arguments": {
                "batch": [],
                "tokenizer": [],
                "config": []
            }
        }
    },
    "gobbli-master/gobbli/augment/marian/model.py": {
        "MarianMT.init": {
            "name": "init",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "MarianMT.image_tag": {
            "name": "image_tag",
            "location": 177,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarianMT.marian_model": {
            "name": "marian_model",
            "location": 185,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [],
                "language": []
            }
        },
        "MarianMT.marian_inverse_model": {
            "name": "marian_inverse_model",
            "location": 194,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cls": [],
                "language": []
            }
        },
        "MarianMT._build": {
            "name": "_build",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarianMT._write_input": {
            "name": "_write_input",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "context": []
            }
        },
        "MarianMT._read_output": {
            "name": "_read_output",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "MarianMT.host_cache_dir": {
            "name": "host_cache_dir",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MarianMT.augment": {
            "name": "augment",
            "location": 234,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "times": [
                    "None"
                ],
                "p": [
                    "None"
                ]
            }
        }
    },
    "gobbli-master/gobbli/augment/marian/__init__.py": {},
    "gobbli-master/gobbli/augment/marian/src/backtranslate_text.py": {
        "batch_list": {
            "name": "batch_list",
            "location": 6,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "l": [],
                "batch_size": []
            }
        }
    },
    "gobbli-master/gobbli/dataset/base.py": {
        "dataset_dir": {
            "name": "dataset_dir",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "BaseDataset.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDataset.data_dir": {
            "name": "data_dir",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseDataset.load": {
            "name": "load",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseDataset._is_built": {
            "name": "_is_built",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDataset._build": {
            "name": "_build",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDataset.X_train": {
            "name": "X_train",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDataset.y_train": {
            "name": "y_train",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDataset.X_test": {
            "name": "X_test",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDataset.y_test": {
            "name": "y_test",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseDataset._get_train_valid": {
            "name": "_get_train_valid",
            "location": 74,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "None"
                ],
                "shuffle_seed": [
                    "int"
                ]
            }
        },
        "BaseDataset.train_input": {
            "name": "train_input",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "train_batch_size": [
                    "int"
                ],
                "valid_batch_size": [
                    "int"
                ],
                "num_train_epochs": [
                    "int"
                ],
                "valid_proportion": [
                    "float"
                ],
                "split_seed": [
                    "int"
                ],
                "shuffle_seed": [
                    "int"
                ],
                "limit": [
                    "None"
                ]
            }
        },
        "BaseDataset.embed_input": {
            "name": "embed_input",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "embed_batch_size": [
                    "int"
                ],
                "pooling": [],
                "limit": [
                    "None"
                ]
            }
        },
        "BaseDataset.predict_input": {
            "name": "predict_input",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "predict_batch_size": [
                    "int"
                ],
                "limit": [
                    "None"
                ]
            }
        }
    },
    "gobbli-master/gobbli/dataset/cmu_movie_summary.py": {
        "MovieSummaryDataset._build": {
            "name": "_build",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovieSummaryDataset._make_multilabels": {
            "name": "_make_multilabels",
            "location": 31,
            "return": [
                "list[list]"
            ],
            "arguments": {
                "genres": []
            }
        },
        "MovieSummaryDataset._is_built": {
            "name": "_is_built",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MovieSummaryDataset._get_source_df_split": {
            "name": "_get_source_df_split",
            "location": 40,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovieSummaryDataset.X_train": {
            "name": "X_train",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MovieSummaryDataset.y_train": {
            "name": "y_train",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MovieSummaryDataset.X_test": {
            "name": "X_test",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MovieSummaryDataset.y_test": {
            "name": "y_test",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "gobbli-master/gobbli/dataset/imdb.py": {
        "IMDBDataset.labels": {
            "name": "labels",
            "location": 15,
            "return": [
                "set[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMDBDataset.download": {
            "name": "download",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "IMDBDataset.folders": {
            "name": "folders",
            "location": 23,
            "return": [
                "tuple[Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IMDBDataset.read_source_file": {
            "name": "read_source_file",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        }
    },
    "gobbli-master/gobbli/dataset/nested_file.py": {
        "NestedFileDataset.labels": {
            "name": "labels",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedFileDataset.download": {
            "name": "download",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "NestedFileDataset.folders": {
            "name": "folders",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedFileDataset.read_source_file": {
            "name": "read_source_file",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "NestedFileDataset._build": {
            "name": "_build",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedFileDataset._load_folder": {
            "name": "_load_folder",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [],
                "X_file": [],
                "y_file": []
            }
        },
        "NestedFileDataset._read_data_file": {
            "name": "_read_data_file",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": []
            }
        },
        "NestedFileDataset._is_built": {
            "name": "_is_built",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedFileDataset.X_train": {
            "name": "X_train",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedFileDataset.y_train": {
            "name": "y_train",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedFileDataset.X_test": {
            "name": "X_test",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedFileDataset.y_test": {
            "name": "y_test",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "gobbli-master/gobbli/dataset/newsgroups.py": {
        "NewsgroupsDataset.labels": {
            "name": "labels",
            "location": 15,
            "return": [
                "set[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewsgroupsDataset.download": {
            "name": "download",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "NewsgroupsDataset.folders": {
            "name": "folders",
            "location": 46,
            "return": [
                "tuple[Path]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewsgroupsDataset.read_source_file": {
            "name": "read_source_file",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": []
            }
        }
    },
    "gobbli-master/gobbli/dataset/trivial.py": {
        "TrivialDataset._is_built": {
            "name": "_is_built",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrivialDataset._build": {
            "name": "_build",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrivialDataset.X_train": {
            "name": "X_train",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrivialDataset.y_train": {
            "name": "y_train",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrivialDataset.X_test": {
            "name": "X_test",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrivialDataset.y_test": {
            "name": "y_test",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "gobbli-master/gobbli/dataset/__init__.py": {},
    "gobbli-master/gobbli/experiment/base.py": {
        "experiment_dir": {
            "name": "experiment_dir",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "init_worker_env": {
            "name": "init_worker_env",
            "location": 18,
            "return": [],
            "arguments": {
                "gobbli_dir": [
                    "None"
                ],
                "log_level": []
            }
        },
        "init_gpu_config": {
            "name": "init_gpu_config",
            "location": 41,
            "return": [
                "tuple[typing.Union[bool,str]]"
            ],
            "arguments": {}
        },
        "get_worker_ip": {
            "name": "get_worker_ip",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "BaseExperiment.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_cls": [],
                "dataset": [],
                "test_dataset": [
                    "None"
                ],
                "data_dir": [
                    "None"
                ],
                "name": [
                    "None"
                ],
                "param_grid": [
                    "None"
                ],
                "task_num_cpus": [
                    "int"
                ],
                "task_num_gpus": [
                    "int"
                ],
                "worker_gobbli_dir": [
                    "None"
                ],
                "worker_log_level": [],
                "limit": [
                    "None"
                ],
                "overwrite_existing": [
                    "bool"
                ],
                "ignore_ray_initialized_error": [
                    "bool"
                ],
                "distributed": [
                    "bool"
                ],
                "ray_kwargs": [
                    "None"
                ]
            }
        },
        "BaseExperiment.metadata_path": {
            "name": "metadata_path",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseExperiment.data_dir": {
            "name": "data_dir",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "gobbli-master/gobbli/experiment/classification.py": {
        "ClassificationExperimentResults.__post_init__": {
            "name": "__post_init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassificationExperimentResults.get_checkpoint": {
            "name": "get_checkpoint",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "base_path": [
                    "None"
                ]
            }
        },
        "ClassificationExperimentResults.metrics": {
            "name": "metrics",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassificationExperimentResults.metrics_report": {
            "name": "metrics_report",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassificationExperimentResults.plot": {
            "name": "plot",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassificationExperimentResults.errors": {
            "name": "errors",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassificationExperimentResults.errors_report": {
            "name": "errors_report",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassificationExperiment.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassificationExperiment._validate_model_cls": {
            "name": "_validate_model_cls",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "model_cls": []
            }
        },
        "ClassificationExperiment._validate_split": {
            "name": "_validate_split",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "train_valid_test_split": [],
                "expected_len": [
                    "int"
                ]
            }
        },
        "ClassificationExperiment.run": {
            "name": "run",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "dataset_split": [
                    "None"
                ],
                "seed": [
                    "int"
                ],
                "train_batch_size": [
                    "int"
                ],
                "valid_batch_size": [
                    "int"
                ],
                "test_batch_size": [
                    "int"
                ],
                "num_train_epochs": [
                    "int"
                ]
            }
        },
        "ClassificationExperiment.run.train": {
            "name": "train",
            "location": 303,
            "return": [
                "RemoteTrainResult"
            ],
            "arguments": {
                "X_train": [],
                "y_train": [],
                "X_valid": [],
                "y_valid": [],
                "train_batch_size": [],
                "valid_batch_size": [],
                "num_train_epochs": [],
                "model_cls": [],
                "model_params": [],
                "gobbli_dir": [
                    "None"
                ],
                "log_level": [],
                "local_mode": [
                    "bool"
                ],
                "distributed": [
                    "bool"
                ]
            }
        },
        "ClassificationExperiment.run.predict": {
            "name": "predict",
            "location": 373,
            "return": [],
            "arguments": {
                "X_test": [],
                "test_batch_size": [],
                "model_cls": [],
                "model_params": [],
                "labels": [],
                "checkpoint": [],
                "checkpoint_name": [],
                "gobbli_dir": [
                    "None"
                ],
                "log_level": [],
                "distributed": [
                    "bool"
                ]
            }
        }
    },
    "gobbli-master/gobbli/experiment/__init__.py": {},
    "gobbli-master/gobbli/inspect/evaluate.py": {
        "ClassificationError.y_pred": {
            "name": "y_pred",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassificationError.y_pred_multilabel": {
            "name": "y_pred_multilabel",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "threshold": [
                    "float"
                ]
            }
        },
        "ClassificationEvaluation.__post_init__": {
            "name": "__post_init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassificationEvaluation.y_true_multiclass": {
            "name": "y_true_multiclass",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassificationEvaluation.y_true_multilabel": {
            "name": "y_true_multilabel",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassificationEvaluation.y_pred_multiclass": {
            "name": "y_pred_multiclass",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassificationEvaluation.y_pred_multilabel": {
            "name": "y_pred_multilabel",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClassificationEvaluation.metrics": {
            "name": "metrics",
            "location": 142,
            "return": [
                "dict[tuple[typing.Union[typing.Text,typing.Callable]], ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassificationEvaluation.metrics_report": {
            "name": "metrics_report",
            "location": 163,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassificationEvaluation.plot": {
            "name": "plot",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "sample_size": [
                    "None"
                ]
            }
        },
        "ClassificationEvaluation.errors_for_label": {
            "name": "errors_for_label",
            "location": 267,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "label": [],
                "k": [
                    "int"
                ]
            }
        },
        "ClassificationEvaluation.errors": {
            "name": "errors",
            "location": 316,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "ClassificationEvaluation.errors_report": {
            "name": "errors_report",
            "location": 336,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int"
                ]
            }
        },
        "ClassificationEvaluation.errors_for_label.create_classification_errors": {
            "name": "create_classification_errors",
            "location": 297,
            "return": [
                "list[ClassificationError]"
            ],
            "arguments": {
                "y_pred_proba": []
            }
        },
        "ClassificationEvaluation.errors_report.make_errors_str": {
            "name": "make_errors_str",
            "location": 350,
            "return": [
                "str"
            ],
            "arguments": {
                "errors": []
            }
        }
    },
    "gobbli-master/gobbli/inspect/__init__.py": {},
    "gobbli-master/gobbli/interactive/evaluate.py": {
        "show_metrics": {
            "name": "show_metrics",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "metrics": []
            }
        },
        "show_plot": {
            "name": "show_plot",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "plot": []
            }
        },
        "_show_example_predictions": {
            "name": "_show_example_predictions",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "texts": [],
                "labels": [],
                "y_pred_proba": [],
                "truncate_len": [],
                "top_k": []
            }
        },
        "show_example_predictions": {
            "name": "show_example_predictions",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "texts": [],
                "labels": [],
                "y_pred_proba": [],
                "example_truncate_len": [],
                "example_num_docs": [],
                "example_top_k": []
            }
        },
        "show_errors": {
            "name": "show_errors",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "errors": [],
                "truncate_len": [
                    "int"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "model_data_dir": [],
                "data": [],
                "n_rows": [],
                "use_gpu": [],
                "multilabel": [],
                "multilabel_sep": [],
                "nvidia_visible_devices": []
            }
        },
        "_show_example_predictions.gather_predictions": {
            "name": "gather_predictions",
            "location": 51,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "_show_example_predictions.style_pred_prob": {
            "name": "style_pred_prob",
            "location": 67,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "row": [],
                "labels": []
            }
        }
    },
    "gobbli-master/gobbli/interactive/explain.py": {
        "make_predict_func": {
            "name": "make_predict_func",
            "location": 19,
            "return": [],
            "arguments": {
                "model_cls": [],
                "model_kwargs": [],
                "unique_labels": [],
                "checkpoint": [],
                "batch_size": []
            }
        },
        "st_lime_explanation": {
            "name": "st_lime_explanation",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "predict_func": [],
                "unique_labels": [],
                "n_samples": [],
                "position_dependent": [
                    "bool"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "model_data_dir": [],
                "data": [],
                "n_rows": [],
                "use_gpu": [],
                "multilabel": [],
                "multilabel_sep": [],
                "nvidia_visible_devices": []
            }
        },
        "make_predict_func.predict": {
            "name": "predict",
            "location": 26,
            "return": [],
            "arguments": {
                "texts": []
            }
        }
    },
    "gobbli-master/gobbli/interactive/explore.py": {
        "get_tokens": {
            "name": "get_tokens",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "texts": [],
                "tokenize_method": [],
                "vocab_size": []
            }
        },
        "_show_example_documents": {
            "name": "_show_example_documents",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "texts": [],
                "labels": [],
                "truncate_len": []
            }
        },
        "show_example_documents": {
            "name": "show_example_documents",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "texts": [],
                "labels": [],
                "filter_label": [],
                "example_truncate_len": [],
                "example_num_docs": []
            }
        },
        "get_document_lengths": {
            "name": "get_document_lengths",
            "location": 94,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "tokens": []
            }
        },
        "_collect_label_counts": {
            "name": "_collect_label_counts",
            "location": 98,
            "return": [],
            "arguments": {
                "labels": []
            }
        },
        "show_label_distribution": {
            "name": "show_label_distribution",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "sample_labels": [],
                "all_labels": [
                    "None"
                ]
            }
        },
        "show_document_length_distribution": {
            "name": "show_document_length_distribution",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "tokens": []
            }
        },
        "get_topics": {
            "name": "get_topics",
            "location": 173,
            "return": [
                "tuple[list]"
            ],
            "arguments": {
                "tokens": [],
                "num_topics": [
                    "int"
                ],
                "train_chunksize": [
                    "int"
                ],
                "train_passes": [
                    "int"
                ],
                "train_iterations": [
                    "int"
                ],
                "do_bigrams": [
                    "bool"
                ],
                "bigram_min_count": [
                    "int"
                ],
                "min_frequency": [
                    "int"
                ],
                "max_proportion": [
                    "float"
                ]
            }
        },
        "corr_df_to_heatmap_df": {
            "name": "corr_df_to_heatmap_df",
            "location": 249,
            "return": [],
            "arguments": {
                "corr_df": [],
                "index_col_name": [],
                "columns_col_name": []
            }
        },
        "st_heatmap": {
            "name": "st_heatmap",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "heatmap_df": [],
                "x_col_name": [],
                "y_col_name": [],
                "color_col_name": []
            }
        },
        "show_topic_model": {
            "name": "show_topic_model",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "tokens": [],
                "labels": [],
                "filter_label": []
            }
        },
        "get_embeddings": {
            "name": "get_embeddings",
            "location": 340,
            "return": [
                "tuple",
                "tuple[None]"
            ],
            "arguments": {
                "model_cls": [],
                "model_kwargs": [],
                "texts": [],
                "checkpoint_meta": [
                    "None"
                ],
                "batch_size": [],
                "pooling": []
            }
        },
        "show_embeddings": {
            "name": "show_embeddings",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "model_cls": [],
                "model_kwargs": [],
                "texts": [],
                "labels": [],
                "checkpoint_meta": [
                    "None"
                ],
                "batch_size": [],
                "umap_seed": [
                    "int"
                ],
                "umap_n_neighbors": [
                    "int"
                ],
                "umap_metric": [
                    "typing.Text"
                ],
                "umap_min_dist": [
                    "float"
                ],
                "cluster_when": [
                    "typing.Text"
                ],
                "clusterer": [
                    "None"
                ],
                "show_vocab_overlap": [
                    "bool"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "n_rows": [],
                "model_data_dir": [],
                "multilabel": [],
                "multilabel_sep": [],
                "use_gpu": [],
                "nvidia_visible_devices": []
            }
        }
    },
    "gobbli-master/gobbli/interactive/util.py": {
        "get_label_indices": {
            "name": "get_label_indices",
            "location": 28,
            "return": [],
            "arguments": {
                "y": []
            }
        },
        "_read_delimited": {
            "name": "_read_delimited",
            "location": 40,
            "return": [
                "tuple[typing.Optional[list[list]]]"
            ],
            "arguments": {
                "data_file": [],
                "delimiter": [],
                "n_rows": [
                    "None"
                ],
                "multilabel": [
                    "bool"
                ],
                "multilabel_sep": [
                    "typing.Text"
                ]
            }
        },
        "_read_lines": {
            "name": "_read_lines",
            "location": 91,
            "return": [
                "list"
            ],
            "arguments": {
                "data_file": [],
                "n_rows": [
                    "None"
                ]
            }
        },
        "read_data_file": {
            "name": "read_data_file",
            "location": 106,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "data_file": [],
                "multilabel": [],
                "multilabel_sep": [
                    "typing.Text"
                ],
                "n_rows": [
                    "None"
                ]
            }
        },
        "sample_dataset": {
            "name": "sample_dataset",
            "location": 150,
            "return": [
                "tuple"
            ],
            "arguments": {
                "dataset": [],
                "n_rows": [
                    "None"
                ]
            }
        },
        "read_data_file_cached": {
            "name": "read_data_file_cached",
            "location": 191,
            "return": [],
            "arguments": {
                "data_file": [],
                "multilabel": [],
                "n_rows": [
                    "None"
                ],
                "multilabel_sep": [
                    "typing.Text"
                ]
            }
        },
        "load_data": {
            "name": "load_data",
            "location": 210,
            "return": [
                "tuple"
            ],
            "arguments": {
                "data": [],
                "multilabel": [],
                "n_rows": [],
                "multilabel_sep": [
                    "typing.Text"
                ]
            }
        },
        "safe_sample": {
            "name": "safe_sample",
            "location": 251,
            "return": [
                "list"
            ],
            "arguments": {
                "l": [],
                "n": [],
                "seed": [
                    "None"
                ]
            }
        },
        "st_sample_data": {
            "name": "st_sample_data",
            "location": 262,
            "return": [
                "tuple",
                "tuple[typing.Optional[list]]"
            ],
            "arguments": {
                "texts": [],
                "labels": []
            }
        },
        "st_example_documents": {
            "name": "st_example_documents",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "texts": [],
                "labels": [],
                "truncate_len": []
            }
        },
        "format_task": {
            "name": "format_task",
            "location": 317,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "task_dir": []
            }
        },
        "st_select_model_checkpoint": {
            "name": "st_select_model_checkpoint",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "model_data_path": [],
                "use_gpu": [],
                "nvidia_visible_devices": []
            }
        },
        "st_select_untrained_model": {
            "name": "st_select_untrained_model",
            "location": 405,
            "return": [
                "None",
                "tuple[dict[typing.Text, ]]"
            ],
            "arguments": {
                "use_gpu": [],
                "nvidia_visible_devices": [],
                "predicate": [
                    "typing.Callable"
                ]
            }
        },
        "st_model_metadata": {
            "name": "st_model_metadata",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "get_predictions": {
            "name": "get_predictions",
            "location": 470,
            "return": [],
            "arguments": {
                "model_cls": [],
                "model_kwargs": [],
                "texts": [],
                "unique_labels": [],
                "checkpoint": [],
                "batch_size": []
            }
        }
    },
    "gobbli-master/gobbli/model/base.py": {
        "BaseModel.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": [
                    "None"
                ],
                "load_existing": [
                    "bool"
                ],
                "use_gpu": [
                    "bool"
                ],
                "nvidia_visible_devices": [
                    "typing.Text"
                ],
                "logger": [
                    "None"
                ]
            }
        },
        "BaseModel.logger": {
            "name": "logger",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.info_path": {
            "name": "info_path",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.metadata_path": {
            "name": "metadata_path",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.init": {
            "name": "init",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "BaseModel._base_docker_run_kwargs": {
            "name": "_base_docker_run_kwargs",
            "location": 173,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, typing.Text],bool,dict[str, dict[typing.Text, str]],typing.Text]]"
            ],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "BaseModel._base_docker_build_kwargs": {
            "name": "_base_docker_build_kwargs",
            "location": 211,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.data_dir": {
            "name": "data_dir",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.model_class_dir": {
            "name": "model_class_dir",
            "location": 233,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BaseModel.class_weights_dir": {
            "name": "class_weights_dir",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.weights_dir": {
            "name": "weights_dir",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.build": {
            "name": "build",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._build": {
            "name": "_build",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gobbli-master/gobbli/model/context.py": {
        "ContainerTaskContext.host_dir": {
            "name": "host_dir",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ContainerTaskContext.to_container": {
            "name": "to_container",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "host_dir": []
            }
        },
        "ContainerTaskContext.container_root_dir": {
            "name": "container_root_dir",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContainerTaskContext.host_input_dir": {
            "name": "host_input_dir",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContainerTaskContext.host_output_dir": {
            "name": "host_output_dir",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContainerTaskContext.container_input_dir": {
            "name": "container_input_dir",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContainerTaskContext.container_output_dir": {
            "name": "container_output_dir",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "gobbli-master/gobbli/model/majority.py": {
        "MajorityClassifier.init": {
            "name": "init",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "MajorityClassifier._build": {
            "name": "_build",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MajorityClassifier._make_pred_df": {
            "name": "_make_pred_df",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "size": []
            }
        },
        "MajorityClassifier._train": {
            "name": "_train",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "train_input": [],
                "context": []
            }
        },
        "MajorityClassifier._predict": {
            "name": "_predict",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "predict_input": [],
                "context": []
            }
        }
    },
    "gobbli-master/gobbli/model/mixin.py": {
        "_run_task": {
            "name": "_run_task",
            "location": 14,
            "return": [],
            "arguments": {
                "task_func": [],
                "task_input": [],
                "root_dir": [],
                "dir_name": [
                    "None"
                ]
            }
        },
        "TrainMixin.data_dir": {
            "name": "data_dir",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainMixin.logger": {
            "name": "logger",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainMixin.train_dir": {
            "name": "train_dir",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainMixin.train": {
            "name": "train",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "train_input": [],
                "train_dir_name": [
                    "None"
                ]
            }
        },
        "TrainMixin._train": {
            "name": "_train",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_input": [],
                "context": []
            }
        },
        "PredictMixin.data_dir": {
            "name": "data_dir",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictMixin.logger": {
            "name": "logger",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PredictMixin.predict_dir": {
            "name": "predict_dir",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictMixin.predict": {
            "name": "predict",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "predict_input": [],
                "predict_dir_name": [
                    "None"
                ]
            }
        },
        "PredictMixin._predict": {
            "name": "_predict",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predict_input": [],
                "context": []
            }
        },
        "EmbedMixin.data_dir": {
            "name": "data_dir",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbedMixin.logger": {
            "name": "logger",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbedMixin.embed_dir": {
            "name": "embed_dir",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbedMixin.embed": {
            "name": "embed",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "embed_input": [],
                "embed_dir_name": [
                    "None"
                ]
            }
        },
        "EmbedMixin._embed": {
            "name": "_embed",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed_input": [],
                "context": []
            }
        }
    },
    "gobbli-master/gobbli/model/random.py": {
        "RandomEmbedder.init": {
            "name": "init",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "RandomEmbedder._build": {
            "name": "_build",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomEmbedder.tokenize": {
            "name": "tokenize",
            "location": 32,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "RandomEmbedder._train": {
            "name": "_train",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "train_input": [],
                "context": []
            }
        },
        "RandomEmbedder._embed": {
            "name": "_embed",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "embed_input": [],
                "context": []
            }
        }
    },
    "gobbli-master/gobbli/model/__init__.py": {},
    "gobbli-master/gobbli/model/bert/model.py": {
        "_preprocess_text": {
            "name": "_preprocess_text",
            "location": 24,
            "return": [],
            "arguments": {
                "text_series": []
            }
        },
        "_df_to_train_tsv": {
            "name": "_df_to_train_tsv",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [],
                "output_file": []
            }
        },
        "_write_labels": {
            "name": "_write_labels",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "labels": [],
                "output_file": []
            }
        },
        "_read_predictions": {
            "name": "_read_predictions",
            "location": 56,
            "return": [],
            "arguments": {
                "labels": [],
                "output_file": []
            }
        },
        "_read_embeddings": {
            "name": "_read_embeddings",
            "location": 64,
            "return": [
                "tuple[typing.Optional[list[list]]]"
            ],
            "arguments": {
                "output_file": [],
                "pooling": []
            }
        },
        "BERT.init": {
            "name": "init",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "BERT.weights_dir": {
            "name": "weights_dir",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BERT.image_tag": {
            "name": "image_tag",
            "location": 179,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "BERT.do_lower_case": {
            "name": "do_lower_case",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BERT._build": {
            "name": "_build",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BERT._get_checkpoint": {
            "name": "_get_checkpoint",
            "location": 220,
            "return": [
                "tuple[typing.Optional[typing.Text]]"
            ],
            "arguments": {
                "user_checkpoint": [],
                "context": []
            }
        },
        "BERT._write_train_input": {
            "name": "_write_train_input",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_input": [],
                "input_dir": []
            }
        },
        "BERT._train": {
            "name": "_train",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "train_input": [],
                "context": []
            }
        },
        "BERT._write_predict_input": {
            "name": "_write_predict_input",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predict_input": [],
                "input_dir": []
            }
        },
        "BERT._predict": {
            "name": "_predict",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "predict_input": [],
                "context": []
            }
        },
        "BERT._write_embed_input": {
            "name": "_write_embed_input",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed_input": [],
                "input_dir": []
            }
        },
        "BERT._embed": {
            "name": "_embed",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "embed_input": [],
                "context": []
            }
        }
    },
    "gobbli-master/gobbli/model/bert/__init__.py": {},
    "gobbli-master/gobbli/model/bert/src/create_pretraining_data.py": {
        "write_instance_to_example_files": {
            "name": "write_instance_to_example_files",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "instances": [],
                "tokenizer": [],
                "max_seq_length": [],
                "max_predictions_per_seq": [],
                "output_files": []
            }
        },
        "create_int_feature": {
            "name": "create_int_feature",
            "location": 165,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "create_float_feature": {
            "name": "create_float_feature",
            "location": 170,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "create_training_instances": {
            "name": "create_training_instances",
            "location": 175,
            "return": [
                "list"
            ],
            "arguments": {
                "input_files": [],
                "tokenizer": [],
                "max_seq_length": [],
                "dupe_factor": [],
                "short_seq_prob": [],
                "masked_lm_prob": [],
                "max_predictions_per_seq": [],
                "rng": []
            }
        },
        "create_instances_from_document": {
            "name": "create_instances_from_document",
            "location": 219,
            "return": [],
            "arguments": {
                "all_documents": [],
                "document_index": [],
                "max_seq_length": [],
                "short_seq_prob": [],
                "masked_lm_prob": [],
                "max_predictions_per_seq": [],
                "vocab_words": [],
                "rng": []
            }
        },
        "create_masked_lm_predictions": {
            "name": "create_masked_lm_predictions",
            "location": 338,
            "return": [
                "tuple[list[typing.Text]]"
            ],
            "arguments": {
                "tokens": [],
                "masked_lm_prob": [],
                "max_predictions_per_seq": [],
                "vocab_words": [],
                "rng": []
            }
        },
        "truncate_seq_pair": {
            "name": "truncate_seq_pair",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "tokens_a": [],
                "tokens_b": [],
                "max_num_tokens": [],
                "rng": []
            }
        },
        "main": {
            "name": "main",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "TrainingInstance.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [],
                "segment_ids": [],
                "masked_lm_positions": [],
                "masked_lm_labels": [],
                "is_random_next": []
            }
        },
        "TrainingInstance.__str__": {
            "name": "__str__",
            "location": 75,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainingInstance.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "gobbli-master/gobbli/model/bert/src/extract_features.py": {
        "input_fn_builder": {
            "name": "input_fn_builder",
            "location": 100,
            "return": [],
            "arguments": {
                "features": [],
                "seq_length": []
            }
        },
        "model_fn_builder": {
            "name": "model_fn_builder",
            "location": 148,
            "return": [],
            "arguments": {
                "bert_config": [],
                "init_checkpoint": [],
                "layer_indexes": [],
                "use_tpu": [],
                "use_one_hot_embeddings": []
            }
        },
        "convert_examples_to_features": {
            "name": "convert_examples_to_features",
            "location": 210,
            "return": [
                "list[InputFeatures]"
            ],
            "arguments": {
                "examples": [],
                "seq_length": [],
                "tokenizer": []
            }
        },
        "_truncate_seq_pair": {
            "name": "_truncate_seq_pair",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "tokens_a": [],
                "tokens_b": [],
                "max_length": []
            }
        },
        "read_examples": {
            "name": "read_examples",
            "location": 319,
            "return": [
                "list[InputExample]"
            ],
            "arguments": {
                "input_file": []
            }
        },
        "main": {
            "name": "main",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "InputExample.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unique_id": [],
                "text_a": [],
                "text_b": []
            }
        },
        "InputFeatures.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unique_id": [],
                "tokens": [],
                "input_ids": [],
                "input_mask": [],
                "input_type_ids": []
            }
        },
        "input_fn_builder.input_fn": {
            "name": "input_fn",
            "location": 114,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "model_fn_builder.model_fn": {
            "name": "model_fn",
            "location": 152,
            "return": [],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": [],
                "params": []
            }
        },
        "model_fn_builder.model_fn.tpu_scaffold": {
            "name": "tpu_scaffold",
            "location": 178,
            "return": [],
            "arguments": {}
        }
    },
    "gobbli-master/gobbli/model/bert/src/modeling.py": {
        "gelu": {
            "name": "gelu",
            "location": 264,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "get_activation": {
            "name": "get_activation",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "activation_string": []
            }
        },
        "get_assignment_map_from_checkpoint": {
            "name": "get_assignment_map_from_checkpoint",
            "location": 317,
            "return": [
                "tuple[dict[, int]]"
            ],
            "arguments": {
                "tvars": [],
                "init_checkpoint": []
            }
        },
        "dropout": {
            "name": "dropout",
            "location": 344,
            "return": [],
            "arguments": {
                "input_tensor": [],
                "dropout_prob": []
            }
        },
        "layer_norm": {
            "name": "layer_norm",
            "location": 362,
            "return": [],
            "arguments": {
                "input_tensor": [],
                "name": [
                    "None"
                ]
            }
        },
        "layer_norm_and_dropout": {
            "name": "layer_norm_and_dropout",
            "location": 368,
            "return": [],
            "arguments": {
                "input_tensor": [],
                "dropout_prob": [],
                "name": [
                    "None"
                ]
            }
        },
        "create_initializer": {
            "name": "create_initializer",
            "location": 375,
            "return": [],
            "arguments": {
                "initializer_range": [
                    "float"
                ]
            }
        },
        "embedding_lookup": {
            "name": "embedding_lookup",
            "location": 380,
            "return": [
                "tuple"
            ],
            "arguments": {
                "input_ids": [],
                "vocab_size": [],
                "embedding_size": [
                    "int"
                ],
                "initializer_range": [
                    "float"
                ],
                "word_embedding_name": [
                    "typing.Text"
                ],
                "use_one_hot_embeddings": [
                    "bool"
                ]
            }
        },
        "embedding_postprocessor": {
            "name": "embedding_postprocessor",
            "location": 428,
            "return": [],
            "arguments": {
                "input_tensor": [],
                "use_token_type": [
                    "bool"
                ],
                "token_type_ids": [
                    "None"
                ],
                "token_type_vocab_size": [
                    "int"
                ],
                "token_type_embedding_name": [
                    "typing.Text"
                ],
                "use_position_embeddings": [
                    "bool"
                ],
                "position_embedding_name": [
                    "typing.Text"
                ],
                "initializer_range": [
                    "float"
                ],
                "max_position_embeddings": [
                    "int"
                ],
                "dropout_prob": [
                    "float"
                ]
            }
        },
        "create_attention_mask_from_input_mask": {
            "name": "create_attention_mask_from_input_mask",
            "location": 524,
            "return": [],
            "arguments": {
                "from_tensor": [],
                "to_mask": []
            }
        },
        "attention_layer": {
            "name": "attention_layer",
            "location": 558,
            "return": [],
            "arguments": {
                "from_tensor": [],
                "to_tensor": [],
                "attention_mask": [
                    "None"
                ],
                "num_attention_heads": [
                    "int"
                ],
                "size_per_head": [
                    "int"
                ],
                "query_act": [
                    "None"
                ],
                "key_act": [
                    "None"
                ],
                "value_act": [
                    "None"
                ],
                "attention_probs_dropout_prob": [
                    "float"
                ],
                "initializer_range": [
                    "float"
                ],
                "do_return_2d_tensor": [
                    "bool"
                ],
                "batch_size": [],
                "from_seq_length": [],
                "to_seq_length": [
                    "None"
                ]
            }
        },
        "transformer_model": {
            "name": "transformer_model",
            "location": 754,
            "return": [
                "list"
            ],
            "arguments": {
                "input_tensor": [],
                "attention_mask": [
                    "None"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_hidden_layers": [
                    "int"
                ],
                "num_attention_heads": [
                    "int"
                ],
                "intermediate_size": [
                    "int"
                ],
                "intermediate_act_fn": [],
                "hidden_dropout_prob": [
                    "float"
                ],
                "attention_probs_dropout_prob": [
                    "float"
                ],
                "initializer_range": [
                    "float"
                ],
                "do_return_all_layers": [
                    "bool"
                ]
            }
        },
        "get_shape_list": {
            "name": "get_shape_list",
            "location": 895,
            "return": [],
            "arguments": {
                "tensor": [],
                "expected_rank": [
                    "None"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "reshape_to_matrix": {
            "name": "reshape_to_matrix",
            "location": 932,
            "return": [],
            "arguments": {
                "input_tensor": []
            }
        },
        "reshape_from_matrix": {
            "name": "reshape_from_matrix",
            "location": 946,
            "return": [],
            "arguments": {
                "output_tensor": [],
                "orig_shape_list": []
            }
        },
        "assert_rank": {
            "name": "assert_rank",
            "location": 959,
            "return": [
                "None"
            ],
            "arguments": {
                "tensor": [],
                "expected_rank": [],
                "name": [
                    "None"
                ]
            }
        },
        "BertConfig.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_size": [],
                "hidden_size": [
                    "int"
                ],
                "num_hidden_layers": [
                    "int"
                ],
                "num_attention_heads": [
                    "int"
                ],
                "intermediate_size": [
                    "int"
                ],
                "hidden_act": [
                    "typing.Text"
                ],
                "hidden_dropout_prob": [
                    "float"
                ],
                "attention_probs_dropout_prob": [
                    "float"
                ],
                "max_position_embeddings": [
                    "int"
                ],
                "type_vocab_size": [
                    "int"
                ],
                "initializer_range": [
                    "float"
                ]
            }
        },
        "BertConfig.from_dict": {
            "name": "from_dict",
            "location": 83,
            "return": [
                "BertConfig"
            ],
            "arguments": {
                "cls": [],
                "json_object": []
            }
        },
        "BertConfig.from_json_file": {
            "name": "from_json_file",
            "location": 91,
            "return": [],
            "arguments": {
                "cls": [],
                "json_file": []
            }
        },
        "BertConfig.to_dict": {
            "name": "to_dict",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertConfig.to_json_string": {
            "name": "to_json_string",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertModel.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "is_training": [],
                "input_ids": [],
                "input_mask": [
                    "None"
                ],
                "token_type_ids": [
                    "None"
                ],
                "use_one_hot_embeddings": [
                    "bool"
                ],
                "scope": [
                    "None"
                ]
            }
        },
        "BertModel.get_pooled_output": {
            "name": "get_pooled_output",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertModel.get_sequence_output": {
            "name": "get_sequence_output",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertModel.get_all_encoder_layers": {
            "name": "get_all_encoder_layers",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertModel.get_embedding_output": {
            "name": "get_embedding_output",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BertModel.get_embedding_table": {
            "name": "get_embedding_table",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "attention_layer.transpose_for_scores": {
            "name": "transpose_for_scores",
            "location": 629,
            "return": [],
            "arguments": {
                "input_tensor": [],
                "batch_size": [],
                "num_attention_heads": [],
                "seq_length": [],
                "width": []
            }
        }
    },
    "gobbli-master/gobbli/model/bert/src/modeling_test.py": {
        "BertModelTest.test_default": {
            "name": "test_default",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertModelTest.test_config_to_json_string": {
            "name": "test_config_to_json_string",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertModelTest.run_tester": {
            "name": "run_tester",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tester": []
            }
        },
        "BertModelTest.ids_tensor": {
            "name": "ids_tensor",
            "location": 147,
            "return": [],
            "arguments": {
                "cls": [],
                "shape": [],
                "vocab_size": [],
                "rng": [
                    "None"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "BertModelTest.assert_all_tensors_reachable": {
            "name": "assert_all_tensors_reachable",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sess": [],
                "outputs": []
            }
        },
        "BertModelTest.get_unreachable_ops": {
            "name": "get_unreachable_ops",
            "location": 194,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "graph": [],
                "outputs": []
            }
        },
        "BertModelTest.flatten_recursive": {
            "name": "flatten_recursive",
            "location": 257,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "BertModelTest.BertModelTester.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "batch_size": [
                    "int"
                ],
                "seq_length": [
                    "int"
                ],
                "is_training": [
                    "bool"
                ],
                "use_input_mask": [
                    "bool"
                ],
                "use_token_type_ids": [
                    "bool"
                ],
                "vocab_size": [
                    "int"
                ],
                "hidden_size": [
                    "int"
                ],
                "num_hidden_layers": [
                    "int"
                ],
                "num_attention_heads": [
                    "int"
                ],
                "intermediate_size": [
                    "int"
                ],
                "hidden_act": [
                    "typing.Text"
                ],
                "hidden_dropout_prob": [
                    "float"
                ],
                "attention_probs_dropout_prob": [
                    "float"
                ],
                "max_position_embeddings": [
                    "int"
                ],
                "type_vocab_size": [
                    "int"
                ],
                "initializer_range": [
                    "float"
                ],
                "scope": [
                    "None"
                ]
            }
        },
        "BertModelTest.BertModelTester.create_model": {
            "name": "create_model",
            "location": 71,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BertModelTest.BertModelTester.check_output": {
            "name": "check_output",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": []
            }
        }
    },
    "gobbli-master/gobbli/model/bert/src/optimization.py": {
        "create_optimizer": {
            "name": "create_optimizer",
            "location": 25,
            "return": [],
            "arguments": {
                "loss": [],
                "init_lr": [],
                "num_train_steps": [],
                "num_warmup_steps": [],
                "use_tpu": []
            }
        },
        "AdamWeightDecayOptimizer.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "learning_rate": [],
                "weight_decay_rate": [
                    "float"
                ],
                "beta_1": [
                    "float"
                ],
                "beta_2": [
                    "float"
                ],
                "epsilon": [
                    "float"
                ],
                "exclude_from_weight_decay": [
                    "None"
                ],
                "name": [
                    "typing.Text"
                ]
            }
        },
        "AdamWeightDecayOptimizer.apply_gradients": {
            "name": "apply_gradients",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "grads_and_vars": [],
                "global_step": [
                    "None"
                ],
                "name": [
                    "None"
                ]
            }
        },
        "AdamWeightDecayOptimizer._do_use_weight_decay": {
            "name": "_do_use_weight_decay",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "param_name": []
            }
        },
        "AdamWeightDecayOptimizer._get_variable_name": {
            "name": "_get_variable_name",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "param_name": []
            }
        }
    },
    "gobbli-master/gobbli/model/bert/src/optimization_test.py": {
        "OptimizationTest.test_adam": {
            "name": "test_adam",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gobbli-master/gobbli/model/bert/src/run_classifier.py": {
        "convert_single_example": {
            "name": "convert_single_example",
            "location": 440,
            "return": [
                "InputFeatures"
            ],
            "arguments": {
                "ex_index": [],
                "example": [],
                "label_list": [],
                "max_seq_length": [],
                "tokenizer": []
            }
        },
        "file_based_convert_examples_to_features": {
            "name": "file_based_convert_examples_to_features",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "examples": [],
                "label_list": [],
                "max_seq_length": [],
                "tokenizer": [],
                "output_file": []
            }
        },
        "file_based_input_fn_builder": {
            "name": "file_based_input_fn_builder",
            "location": 575,
            "return": [],
            "arguments": {
                "input_file": [],
                "seq_length": [],
                "is_training": [],
                "drop_remainder": []
            }
        },
        "_truncate_seq_pair": {
            "name": "_truncate_seq_pair",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "tokens_a": [],
                "tokens_b": [],
                "max_length": []
            }
        },
        "create_model": {
            "name": "create_model",
            "location": 641,
            "return": [
                "tuple"
            ],
            "arguments": {
                "bert_config": [],
                "is_training": [],
                "input_ids": [],
                "input_mask": [],
                "segment_ids": [],
                "labels": [],
                "num_labels": [],
                "use_one_hot_embeddings": []
            }
        },
        "model_fn_builder": {
            "name": "model_fn_builder",
            "location": 698,
            "return": [],
            "arguments": {
                "bert_config": [],
                "num_labels": [],
                "init_checkpoint": [],
                "learning_rate": [],
                "num_train_steps": [],
                "num_warmup_steps": [],
                "use_tpu": [],
                "use_one_hot_embeddings": []
            }
        },
        "input_fn_builder": {
            "name": "input_fn_builder",
            "location": 810,
            "return": [],
            "arguments": {
                "features": [],
                "seq_length": [],
                "is_training": [],
                "drop_remainder": []
            }
        },
        "convert_examples_to_features": {
            "name": "convert_examples_to_features",
            "location": 862,
            "return": [
                "list"
            ],
            "arguments": {
                "examples": [],
                "label_list": [],
                "max_seq_length": [],
                "tokenizer": []
            }
        },
        "main": {
            "name": "main",
            "location": 878,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "InputExample.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "guid": [],
                "text_a": [],
                "text_b": [
                    "None"
                ],
                "label": [
                    "None"
                ]
            }
        },
        "InputFeatures.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_ids": [],
                "input_mask": [],
                "segment_ids": [],
                "label_id": [],
                "is_real_example": [
                    "bool"
                ]
            }
        },
        "DataProcessor.get_train_examples": {
            "name": "get_train_examples",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "DataProcessor.get_dev_examples": {
            "name": "get_dev_examples",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "DataProcessor.get_test_examples": {
            "name": "get_test_examples",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "DataProcessor.get_labels": {
            "name": "get_labels",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProcessor._read_tsv": {
            "name": "_read_tsv",
            "location": 220,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "input_file": [],
                "quotechar": [
                    "None"
                ]
            }
        },
        "XnliProcessor.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "XnliProcessor.get_train_examples": {
            "name": "get_train_examples",
            "location": 236,
            "return": [
                "list[InputExample]"
            ],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "XnliProcessor.get_dev_examples": {
            "name": "get_dev_examples",
            "location": 256,
            "return": [
                "list[InputExample]"
            ],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "XnliProcessor.get_labels": {
            "name": "get_labels",
            "location": 275,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MnliProcessor.get_train_examples": {
            "name": "get_train_examples",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "MnliProcessor.get_dev_examples": {
            "name": "get_dev_examples",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "MnliProcessor.get_test_examples": {
            "name": "get_test_examples",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "MnliProcessor.get_labels": {
            "name": "get_labels",
            "location": 301,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MnliProcessor._create_examples": {
            "name": "_create_examples",
            "location": 305,
            "return": [
                "list[InputExample]"
            ],
            "arguments": {
                "self": [],
                "lines": [],
                "set_type": []
            }
        },
        "MrpcProcessor.get_train_examples": {
            "name": "get_train_examples",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "MrpcProcessor.get_dev_examples": {
            "name": "get_dev_examples",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "MrpcProcessor.get_test_examples": {
            "name": "get_test_examples",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "MrpcProcessor.get_labels": {
            "name": "get_labels",
            "location": 345,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MrpcProcessor._create_examples": {
            "name": "_create_examples",
            "location": 349,
            "return": [
                "list[InputExample]"
            ],
            "arguments": {
                "self": [],
                "lines": [],
                "set_type": []
            }
        },
        "ColaProcessor.get_train_examples": {
            "name": "get_train_examples",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "ColaProcessor.get_dev_examples": {
            "name": "get_dev_examples",
            "location": 382,
            "return": [],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "ColaProcessor.get_test_examples": {
            "name": "get_test_examples",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "ColaProcessor.get_labels": {
            "name": "get_labels",
            "location": 398,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "data_dir": []
            }
        },
        "ColaProcessor._create_examples": {
            "name": "_create_examples",
            "location": 407,
            "return": [
                "list[InputExample]"
            ],
            "arguments": {
                "self": [],
                "lines": [],
                "set_type": []
            }
        },
        "file_based_input_fn_builder._decode_record": {
            "name": "_decode_record",
            "location": 586,
            "return": [],
            "arguments": {
                "record": [],
                "name_to_features": []
            }
        },
        "file_based_input_fn_builder.input_fn": {
            "name": "input_fn",
            "location": 600,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "model_fn_builder.model_fn": {
            "name": "model_fn",
            "location": 710,
            "return": [],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": [],
                "params": []
            }
        },
        "input_fn_builder.input_fn": {
            "name": "input_fn",
            "location": 824,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "file_based_convert_examples_to_features.create_int_feature": {
            "name": "create_int_feature",
            "location": 559,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "model_fn_builder.model_fn.tpu_scaffold": {
            "name": "tpu_scaffold",
            "location": 750,
            "return": [],
            "arguments": {}
        },
        "model_fn_builder.model_fn.metric_fn": {
            "name": "metric_fn",
            "location": 779,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "per_example_loss": [],
                "label_ids": [],
                "logits": [],
                "is_real_example": []
            }
        }
    },
    "gobbli-master/gobbli/model/bert/src/run_classifier_with_tfhub.py": {
        "create_model": {
            "name": "create_model",
            "location": 37,
            "return": [
                "tuple"
            ],
            "arguments": {
                "is_training": [],
                "input_ids": [],
                "input_mask": [],
                "segment_ids": [],
                "labels": [],
                "num_labels": [],
                "bert_hub_module_handle": []
            }
        },
        "model_fn_builder": {
            "name": "model_fn_builder",
            "location": 87,
            "return": [],
            "arguments": {
                "num_labels": [],
                "learning_rate": [],
                "num_train_steps": [],
                "num_warmup_steps": [],
                "use_tpu": [],
                "bert_hub_module_handle": []
            }
        },
        "create_tokenizer_from_hub_module": {
            "name": "create_tokenizer_from_hub_module",
            "location": 146,
            "return": [],
            "arguments": {
                "bert_hub_module_handle": []
            }
        },
        "main": {
            "name": "main",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "model_fn_builder.model_fn": {
            "name": "model_fn",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": [],
                "params": []
            }
        },
        "model_fn_builder.model_fn.metric_fn": {
            "name": "metric_fn",
            "location": 120,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "per_example_loss": [],
                "label_ids": [],
                "logits": []
            }
        }
    },
    "gobbli-master/gobbli/model/bert/src/run_pretraining.py": {
        "model_fn_builder": {
            "name": "model_fn_builder",
            "location": 109,
            "return": [],
            "arguments": {
                "bert_config": [],
                "init_checkpoint": [],
                "learning_rate": [],
                "num_train_steps": [],
                "num_warmup_steps": [],
                "use_tpu": [],
                "use_one_hot_embeddings": []
            }
        },
        "get_masked_lm_output": {
            "name": "get_masked_lm_output",
            "location": 240,
            "return": [
                "tuple"
            ],
            "arguments": {
                "bert_config": [],
                "input_tensor": [],
                "output_weights": [],
                "positions": [],
                "label_ids": [],
                "label_weights": []
            }
        },
        "get_next_sentence_output": {
            "name": "get_next_sentence_output",
            "location": 285,
            "return": [
                "tuple"
            ],
            "arguments": {
                "bert_config": [],
                "input_tensor": [],
                "labels": []
            }
        },
        "gather_indexes": {
            "name": "gather_indexes",
            "location": 308,
            "return": [],
            "arguments": {
                "sequence_tensor": [],
                "positions": []
            }
        },
        "input_fn_builder": {
            "name": "input_fn_builder",
            "location": 324,
            "return": [],
            "arguments": {
                "input_files": [],
                "max_seq_length": [],
                "max_predictions_per_seq": [],
                "is_training": [],
                "num_cpu_threads": [
                    "int"
                ]
            }
        },
        "_decode_record": {
            "name": "_decode_record",
            "location": 391,
            "return": [],
            "arguments": {
                "record": [],
                "name_to_features": []
            }
        },
        "main": {
            "name": "main",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "model_fn_builder.model_fn": {
            "name": "model_fn",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": [],
                "params": []
            }
        },
        "input_fn_builder.input_fn": {
            "name": "input_fn",
            "location": 331,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "model_fn_builder.model_fn.tpu_scaffold": {
            "name": "tpu_scaffold",
            "location": 159,
            "return": [],
            "arguments": {}
        },
        "model_fn_builder.model_fn.metric_fn": {
            "name": "metric_fn",
            "location": 187,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "masked_lm_example_loss": [],
                "masked_lm_log_probs": [],
                "masked_lm_ids": [],
                "masked_lm_weights": [],
                "next_sentence_example_loss": [],
                "next_sentence_log_probs": [],
                "next_sentence_labels": []
            }
        }
    },
    "gobbli-master/gobbli/model/bert/src/run_squad.py": {
        "read_squad_examples": {
            "name": "read_squad_examples",
            "location": 227,
            "return": [
                "list[SquadExample]"
            ],
            "arguments": {
                "input_file": [],
                "is_training": []
            }
        },
        "convert_examples_to_features": {
            "name": "convert_examples_to_features",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "examples": [],
                "tokenizer": [],
                "max_seq_length": [],
                "doc_stride": [],
                "max_query_length": [],
                "is_training": [],
                "output_fn": []
            }
        },
        "_improve_answer_span": {
            "name": "_improve_answer_span",
            "location": 476,
            "return": [
                "tuple"
            ],
            "arguments": {
                "doc_tokens": [],
                "input_start": [],
                "input_end": [],
                "tokenizer": [],
                "orig_answer_text": []
            }
        },
        "_check_is_max_context": {
            "name": "_check_is_max_context",
            "location": 513,
            "return": [
                "bool"
            ],
            "arguments": {
                "doc_spans": [],
                "cur_span_index": [],
                "position": []
            }
        },
        "create_model": {
            "name": "create_model",
            "location": 550,
            "return": [
                "tuple"
            ],
            "arguments": {
                "bert_config": [],
                "is_training": [],
                "input_ids": [],
                "input_mask": [],
                "segment_ids": [],
                "use_one_hot_embeddings": []
            }
        },
        "model_fn_builder": {
            "name": "model_fn_builder",
            "location": 590,
            "return": [],
            "arguments": {
                "bert_config": [],
                "init_checkpoint": [],
                "learning_rate": [],
                "num_train_steps": [],
                "num_warmup_steps": [],
                "use_tpu": [],
                "use_one_hot_embeddings": []
            }
        },
        "input_fn_builder": {
            "name": "input_fn_builder",
            "location": 687,
            "return": [],
            "arguments": {
                "input_file": [],
                "seq_length": [],
                "is_training": [],
                "drop_remainder": []
            }
        },
        "write_predictions": {
            "name": "write_predictions",
            "location": 741,
            "return": [
                "None"
            ],
            "arguments": {
                "all_examples": [],
                "all_features": [],
                "all_results": [],
                "n_best_size": [],
                "max_answer_length": [],
                "do_lower_case": [],
                "output_prediction_file": [],
                "output_nbest_file": [],
                "output_null_log_odds_file": []
            }
        },
        "get_final_text": {
            "name": "get_final_text",
            "location": 927,
            "return": [],
            "arguments": {
                "pred_text": [],
                "orig_text": [],
                "do_lower_case": []
            }
        },
        "_get_best_indexes": {
            "name": "_get_best_indexes",
            "location": 1023,
            "return": [
                "list"
            ],
            "arguments": {
                "logits": [],
                "n_best_size": []
            }
        },
        "_compute_softmax": {
            "name": "_compute_softmax",
            "location": 1035,
            "return": [
                "list",
                "list[float]"
            ],
            "arguments": {
                "scores": []
            }
        },
        "validate_flags_or_throw": {
            "name": "validate_flags_or_throw",
            "location": 1097,
            "return": [
                "None"
            ],
            "arguments": {
                "bert_config": []
            }
        },
        "main": {
            "name": "main",
            "location": 1126,
            "return": [
                "None"
            ],
            "arguments": {
                "_": []
            }
        },
        "SquadExample.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qas_id": [],
                "question_text": [],
                "doc_tokens": [],
                "orig_answer_text": [
                    "None"
                ],
                "start_position": [
                    "None"
                ],
                "end_position": [
                    "None"
                ],
                "is_impossible": [
                    "bool"
                ]
            }
        },
        "SquadExample.__str__": {
            "name": "__str__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SquadExample.__repr__": {
            "name": "__repr__",
            "location": 182,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputFeatures.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unique_id": [],
                "example_index": [],
                "doc_span_index": [],
                "tokens": [],
                "token_to_orig_map": [],
                "token_is_max_context": [],
                "input_ids": [],
                "input_mask": [],
                "segment_ids": [],
                "start_position": [
                    "None"
                ],
                "end_position": [
                    "None"
                ],
                "is_impossible": [
                    "None"
                ]
            }
        },
        "read_squad_examples.is_whitespace": {
            "name": "is_whitespace",
            "location": 232,
            "return": [
                "bool"
            ],
            "arguments": {
                "c": []
            }
        },
        "model_fn_builder.model_fn": {
            "name": "model_fn",
            "location": 595,
            "return": [
                "None"
            ],
            "arguments": {
                "features": [],
                "labels": [],
                "mode": [],
                "params": []
            }
        },
        "input_fn_builder._decode_record": {
            "name": "_decode_record",
            "location": 701,
            "return": [],
            "arguments": {
                "record": [],
                "name_to_features": []
            }
        },
        "input_fn_builder.input_fn": {
            "name": "input_fn",
            "location": 715,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "get_final_text._strip_spaces": {
            "name": "_strip_spaces",
            "location": 955,
            "return": [
                "tuple[str]"
            ],
            "arguments": {
                "text": []
            }
        },
        "FeatureWriter.__init__": {
            "name": "__init__",
            "location": 1061,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [],
                "is_training": []
            }
        },
        "FeatureWriter.process_feature": {
            "name": "process_feature",
            "location": 1067,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "feature": []
            }
        },
        "FeatureWriter.close": {
            "name": "close",
            "location": 1093,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FeatureWriter.process_feature.create_int_feature": {
            "name": "create_int_feature",
            "location": 1071,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "main.append_feature": {
            "name": "append_feature",
            "location": 1226,
            "return": [
                "None"
            ],
            "arguments": {
                "feature": []
            }
        },
        "model_fn_builder.model_fn.compute_loss": {
            "name": "compute_loss",
            "location": 646,
            "return": [],
            "arguments": {
                "logits": [],
                "positions": []
            }
        },
        "model_fn_builder.model_fn.tpu_scaffold": {
            "name": "tpu_scaffold",
            "location": 626,
            "return": [],
            "arguments": {}
        }
    },
    "gobbli-master/gobbli/model/bert/src/tokenization.py": {
        "validate_case_matches_checkpoint": {
            "name": "validate_case_matches_checkpoint",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "do_lower_case": [],
                "init_checkpoint": []
            }
        },
        "convert_to_unicode": {
            "name": "convert_to_unicode",
            "location": 78,
            "return": [
                "str",
                "unicode"
            ],
            "arguments": {
                "text": []
            }
        },
        "printable_text": {
            "name": "printable_text",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "load_vocab": {
            "name": "load_vocab",
            "location": 121,
            "return": [],
            "arguments": {
                "vocab_file": []
            }
        },
        "convert_by_vocab": {
            "name": "convert_by_vocab",
            "location": 136,
            "return": [
                "list"
            ],
            "arguments": {
                "vocab": [],
                "items": []
            }
        },
        "convert_tokens_to_ids": {
            "name": "convert_tokens_to_ids",
            "location": 144,
            "return": [],
            "arguments": {
                "vocab": [],
                "tokens": []
            }
        },
        "convert_ids_to_tokens": {
            "name": "convert_ids_to_tokens",
            "location": 148,
            "return": [],
            "arguments": {
                "inv_vocab": [],
                "ids": []
            }
        },
        "whitespace_tokenize": {
            "name": "whitespace_tokenize",
            "location": 152,
            "return": [
                "list"
            ],
            "arguments": {
                "text": []
            }
        },
        "_is_whitespace": {
            "name": "_is_whitespace",
            "location": 362,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": []
            }
        },
        "_is_control": {
            "name": "_is_control",
            "location": 374,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": []
            }
        },
        "_is_punctuation": {
            "name": "_is_punctuation",
            "location": 386,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": []
            }
        },
        "FullTokenizer.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_file": [],
                "do_lower_case": [
                    "bool"
                ]
            }
        },
        "FullTokenizer.tokenize": {
            "name": "tokenize",
            "location": 170,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "FullTokenizer.convert_tokens_to_ids": {
            "name": "convert_tokens_to_ids",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "FullTokenizer.convert_ids_to_tokens": {
            "name": "convert_ids_to_tokens",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "ids": []
            }
        },
        "BasicTokenizer.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "do_lower_case": [
                    "bool"
                ]
            }
        },
        "BasicTokenizer.tokenize": {
            "name": "tokenize",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._run_strip_accents": {
            "name": "_run_strip_accents",
            "location": 220,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._run_split_on_punc": {
            "name": "_run_split_on_punc",
            "location": 231,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._tokenize_chinese_chars": {
            "name": "_tokenize_chinese_chars",
            "location": 251,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "BasicTokenizer._is_chinese_char": {
            "name": "_is_chinese_char",
            "location": 264,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "cp": []
            }
        },
        "BasicTokenizer._clean_text": {
            "name": "_clean_text",
            "location": 286,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "WordpieceTokenizer.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": [],
                "unk_token": [
                    "typing.Text"
                ],
                "max_input_chars_per_word": [
                    "int"
                ]
            }
        },
        "WordpieceTokenizer.tokenize": {
            "name": "tokenize",
            "location": 308,
            "return": [
                "list[typing.Optional[str]]"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "gobbli-master/gobbli/model/bert/src/tokenization_test.py": {
        "TokenizationTest.test_full_tokenizer": {
            "name": "test_full_tokenizer",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenizationTest.test_chinese": {
            "name": "test_chinese",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenizationTest.test_basic_tokenizer_lower": {
            "name": "test_basic_tokenizer_lower",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenizationTest.test_basic_tokenizer_no_lower": {
            "name": "test_basic_tokenizer_no_lower",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenizationTest.test_wordpiece_tokenizer": {
            "name": "test_wordpiece_tokenizer",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenizationTest.test_convert_tokens_to_ids": {
            "name": "test_convert_tokens_to_ids",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenizationTest.test_is_whitespace": {
            "name": "test_is_whitespace",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenizationTest.test_is_control": {
            "name": "test_is_control",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenizationTest.test_is_punctuation": {
            "name": "test_is_punctuation",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gobbli-master/gobbli/model/bert/src/__init__.py": {},
    "gobbli-master/gobbli/model/fasttext/model.py": {
        "_parse_dim": {
            "name": "_parse_dim",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "model_name": []
            }
        },
        "_fasttext_preprocess": {
            "name": "_fasttext_preprocess",
            "location": 57,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "FastTextCheckpoint.vectors": {
            "name": "vectors",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FastTextCheckpoint.model": {
            "name": "model",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FastText.image_tag": {
            "name": "image_tag",
            "location": 116,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastText.weights_dir": {
            "name": "weights_dir",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FastText.init": {
            "name": "init",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "FastText._build": {
            "name": "_build",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastText._escape_label": {
            "name": "_escape_label",
            "location": 228,
            "return": [],
            "arguments": {
                "label": []
            }
        },
        "FastText._unescape_label": {
            "name": "_unescape_label",
            "location": 242,
            "return": [],
            "arguments": {
                "label": []
            }
        },
        "FastText._locate_checkpoint": {
            "name": "_locate_checkpoint",
            "location": 255,
            "return": [
                "FastTextCheckpoint"
            ],
            "arguments": {
                "weights_dir": []
            }
        },
        "FastText._get_checkpoint": {
            "name": "_get_checkpoint",
            "location": 276,
            "return": [
                "tuple[None]",
                "tuple[FastTextCheckpoint]"
            ],
            "arguments": {
                "self": [],
                "user_checkpoint": [],
                "context": []
            }
        },
        "FastText._write_input": {
            "name": "_write_input",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": [],
                "input_path": []
            }
        },
        "FastText._run_supervised": {
            "name": "_run_supervised",
            "location": 336,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "self": [],
                "user_checkpoint": [],
                "container_input_path": [],
                "container_output_path": [],
                "context": [],
                "num_epochs": [],
                "autotune_validation_file_path": [
                    "None"
                ],
                "freeze_vectors": [
                    "bool"
                ]
            }
        },
        "FastText._run_predict_prob": {
            "name": "_run_predict_prob",
            "location": 423,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "user_checkpoint": [],
                "labels": [],
                "container_input_path": [],
                "context": []
            }
        },
        "FastText._train": {
            "name": "_train",
            "location": 492,
            "return": [],
            "arguments": {
                "self": [],
                "train_input": [],
                "context": []
            }
        },
        "FastText._predict": {
            "name": "_predict",
            "location": 553,
            "return": [],
            "arguments": {
                "self": [],
                "predict_input": [],
                "context": []
            }
        },
        "FastText._embed": {
            "name": "_embed",
            "location": 574,
            "return": [],
            "arguments": {
                "self": [],
                "embed_input": [],
                "context": []
            }
        }
    },
    "gobbli-master/gobbli/model/fasttext/__init__.py": {},
    "gobbli-master/gobbli/model/mtdnn/model.py": {
        "_preprocess_text": {
            "name": "_preprocess_text",
            "location": 34,
            "return": [],
            "arguments": {
                "text_series": []
            }
        },
        "_df_to_tsv": {
            "name": "_df_to_tsv",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [],
                "output_file": []
            }
        },
        "_write_labels": {
            "name": "_write_labels",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "labels": [],
                "output_file": []
            }
        },
        "MTDNN.init": {
            "name": "init",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "MTDNN.weights_dir": {
            "name": "weights_dir",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MTDNN.image_tag": {
            "name": "image_tag",
            "location": 110,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MTDNN._build": {
            "name": "_build",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MTDNN._get_checkpoint": {
            "name": "_get_checkpoint",
            "location": 137,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "user_checkpoint": [],
                "context": []
            }
        },
        "MTDNN._write_input": {
            "name": "_write_input",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "y": [],
                "input_file": []
            }
        },
        "MTDNN._train": {
            "name": "_train",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "train_input": [],
                "context": []
            }
        },
        "MTDNN._predict": {
            "name": "_predict",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "predict_input": [],
                "context": []
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/__init__.py": {},
    "gobbli-master/gobbli/model/mtdnn/src/gobbli_train.py": {
        "model_config": {
            "name": "model_config",
            "location": 18,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "data_config": {
            "name": "data_config",
            "location": 56,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "train_config": {
            "name": "train_config",
            "location": 73,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "dump": {
            "name": "dump",
            "location": 130,
            "return": [],
            "arguments": {
                "path": [],
                "data": []
            }
        },
        "dump_predictions": {
            "name": "dump_predictions",
            "location": 135,
            "return": [],
            "arguments": {
                "scores": [],
                "labels": [],
                "output_file": []
            }
        },
        "read_labels": {
            "name": "read_labels",
            "location": 150,
            "return": [],
            "arguments": {
                "label_file": []
            }
        },
        "eval_model": {
            "name": "eval_model",
            "location": 155,
            "return": [],
            "arguments": {
                "model": [],
                "dataset": [],
                "use_cuda": [],
                "with_label": []
            }
        },
        "main": {
            "name": "main",
            "location": 210,
            "return": [],
            "arguments": {}
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/prepro.py": {
        "_truncate_seq_pair": {
            "name": "_truncate_seq_pair",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "tokens_a": [],
                "tokens_b": [],
                "max_length": []
            }
        },
        "build_data": {
            "name": "build_data",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "dump_path": [],
                "max_seq_len": [
                    "int"
                ],
                "is_train": [
                    "bool"
                ],
                "tolower": [
                    "bool"
                ]
            }
        },
        "build_qnli": {
            "name": "build_qnli",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "dump_path": [],
                "max_seq_len": [
                    "int"
                ],
                "is_train": [
                    "bool"
                ],
                "tolower": [
                    "bool"
                ],
                "gold_path": [
                    "None"
                ]
            }
        },
        "build_data_single": {
            "name": "build_data_single",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "dump_path": [],
                "max_seq_len": [
                    "int"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/train.py": {
        "model_config": {
            "name": "model_config",
            "location": 21,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "data_config": {
            "name": "data_config",
            "location": 49,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "train_config": {
            "name": "train_config",
            "location": 60,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "dump": {
            "name": "dump",
            "location": 127,
            "return": [],
            "arguments": {
                "path": [],
                "data": []
            }
        },
        "main": {
            "name": "main",
            "location": 131,
            "return": [],
            "arguments": {}
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/data_utils/glue_utils.py": {
        "load_scitail": {
            "name": "load_scitail",
            "location": 6,
            "return": [
                "list[dict[typing.Text, str]]"
            ],
            "arguments": {
                "file": [],
                "label_dict": []
            }
        },
        "load_snli": {
            "name": "load_snli",
            "location": 21,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "file": [],
                "label_dict": [],
                "header": [
                    "bool"
                ]
            }
        },
        "load_mnli": {
            "name": "load_mnli",
            "location": 41,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "file": [],
                "label_dict": [],
                "header": [
                    "bool"
                ],
                "multi_snli": [
                    "bool"
                ],
                "is_train": [
                    "bool"
                ]
            }
        },
        "load_mrpc": {
            "name": "load_mrpc",
            "location": 63,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "file": [],
                "header": [
                    "bool"
                ],
                "is_train": [
                    "bool"
                ]
            }
        },
        "load_qnli": {
            "name": "load_qnli",
            "location": 81,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "file": [],
                "label_dict": [],
                "header": [
                    "bool"
                ],
                "is_train": [
                    "bool"
                ]
            }
        },
        "load_qnnli": {
            "name": "load_qnnli",
            "location": 103,
            "return": [
                "list[dict[typing.Text, typing.Union[int,list[int]]]]"
            ],
            "arguments": {
                "file": [],
                "label_dict": [],
                "header": [
                    "bool"
                ],
                "is_train": [
                    "bool"
                ]
            }
        },
        "load_qqp": {
            "name": "load_qqp",
            "location": 139,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "file": [],
                "header": [
                    "bool"
                ],
                "is_train": [
                    "bool"
                ]
            }
        },
        "load_rte": {
            "name": "load_rte",
            "location": 163,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "file": [],
                "label_dict": [],
                "header": [
                    "bool"
                ],
                "is_train": [
                    "bool"
                ]
            }
        },
        "load_wnli": {
            "name": "load_wnli",
            "location": 184,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "file": [],
                "header": [
                    "bool"
                ],
                "is_train": [
                    "bool"
                ]
            }
        },
        "load_diag": {
            "name": "load_diag",
            "location": 203,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "file": [],
                "label_dict": [],
                "header": [
                    "bool"
                ]
            }
        },
        "load_sst": {
            "name": "load_sst",
            "location": 218,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "file": [],
                "header": [
                    "bool"
                ],
                "is_train": [
                    "bool"
                ]
            }
        },
        "load_cola": {
            "name": "load_cola",
            "location": 239,
            "return": [
                "list[dict[typing.Text, int]]"
            ],
            "arguments": {
                "file": [],
                "header": [
                    "bool"
                ],
                "is_train": [
                    "bool"
                ]
            }
        },
        "load_sts": {
            "name": "load_sts",
            "location": 259,
            "return": [
                "list[dict[typing.Text, typing.Union[int,float]]]"
            ],
            "arguments": {
                "file": [],
                "header": [
                    "bool"
                ],
                "is_train": [
                    "bool"
                ]
            }
        },
        "submit": {
            "name": "submit",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [],
                "data": [],
                "label_dict": [
                    "None"
                ]
            }
        },
        "_truncate_seq_pair": {
            "name": "_truncate_seq_pair",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "tokens_a": [],
                "tokens_b": [],
                "max_length": []
            }
        },
        "eval_model": {
            "name": "eval_model",
            "location": 305,
            "return": [
                "tuple[typing.Union[dict,list]]"
            ],
            "arguments": {
                "model": [],
                "data": [],
                "dataset": [],
                "use_cuda": [
                    "bool"
                ],
                "with_label": [
                    "bool"
                ]
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/data_utils/label_map.py": {
        "generate_decoder_opt": {
            "name": "generate_decoder_opt",
            "location": 147,
            "return": [
                "int"
            ],
            "arguments": {
                "task": [],
                "max_opt": []
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/data_utils/log_wrapper.py": {
        "create_logger": {
            "name": "create_logger",
            "location": 6,
            "return": [],
            "arguments": {
                "name": [],
                "silent": [
                    "bool"
                ],
                "to_disk": [
                    "bool"
                ],
                "log_file": [
                    "None"
                ]
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/data_utils/metrics.py": {
        "compute_acc": {
            "name": "compute_acc",
            "location": 7,
            "return": [
                "float"
            ],
            "arguments": {
                "predicts": [],
                "labels": []
            }
        },
        "compute_f1": {
            "name": "compute_f1",
            "location": 10,
            "return": [
                "float"
            ],
            "arguments": {
                "predicts": [],
                "labels": []
            }
        },
        "compute_mcc": {
            "name": "compute_mcc",
            "location": 13,
            "return": [
                "float"
            ],
            "arguments": {
                "predicts": [],
                "labels": []
            }
        },
        "compute_pearson": {
            "name": "compute_pearson",
            "location": 16,
            "return": [
                "float"
            ],
            "arguments": {
                "predicts": [],
                "labels": []
            }
        },
        "compute_spearman": {
            "name": "compute_spearman",
            "location": 20,
            "return": [
                "float"
            ],
            "arguments": {
                "predicts": [],
                "labels": []
            }
        },
        "compute_cross_entropy": {
            "name": "compute_cross_entropy",
            "location": 24,
            "return": [],
            "arguments": {
                "predicts": [],
                "labels": []
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/data_utils/utils.py": {},
    "gobbli-master/gobbli/model/mtdnn/src/data_utils/vocab.py": {
        "Vocabulary.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "neat": [
                    "bool"
                ]
            }
        },
        "Vocabulary.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vocabulary.__iter__": {
            "name": "__iter__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vocabulary.__contains__": {
            "name": "__contains__",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Vocabulary.__getitem__": {
            "name": "__getitem__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Vocabulary.__setitem__": {
            "name": "__setitem__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "item": []
            }
        },
        "Vocabulary.add": {
            "name": "add",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "Vocabulary.get_vocab_list": {
            "name": "get_vocab_list",
            "location": 58,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "with_order": [
                    "bool"
                ]
            }
        },
        "Vocabulary.toidx": {
            "name": "toidx",
            "location": 66,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "tokens": []
            }
        },
        "Vocabulary.copy": {
            "name": "copy",
            "location": 69,
            "return": [
                "Vocabulary"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vocabulary.build": {
            "name": "build",
            "location": 77,
            "return": [
                "Vocabulary"
            ],
            "arguments": {
                "words": [],
                "neat": [
                    "bool"
                ]
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/data_utils/__init__.py": {},
    "gobbli-master/gobbli/model/mtdnn/src/module/bert_optim.py": {
        "warmup_linear_xdl": {
            "name": "warmup_linear_xdl",
            "location": 8,
            "return": [
                "float"
            ],
            "arguments": {
                "x": [],
                "warmup": [
                    "float"
                ]
            }
        },
        "schedule_func": {
            "name": "schedule_func",
            "location": 13,
            "return": [],
            "arguments": {
                "sch": []
            }
        },
        "Adamax.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "lr": [],
                "warmup": [
                    "int"
                ],
                "t_total": [
                    "int"
                ],
                "schedule": [
                    "typing.Text"
                ],
                "betas": [
                    "tuple[float]"
                ],
                "eps": [
                    "float"
                ],
                "weight_decay_rate": [
                    "float"
                ],
                "max_grad_norm": [
                    "float"
                ]
            }
        },
        "Adamax.get_lr": {
            "name": "get_lr",
            "location": 53,
            "return": [
                "list[int]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Adamax.to": {
            "name": "to",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        },
        "Adamax.initialize_step": {
            "name": "initialize_step",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_step": []
            }
        },
        "Adamax.step": {
            "name": "step",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "closure": [
                    "None"
                ]
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/module/common.py": {
        "linear": {
            "name": "linear",
            "location": 6,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "swish": {
            "name": "swish",
            "location": 9,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "gelu": {
            "name": "gelu",
            "location": 12,
            "return": [
                "float"
            ],
            "arguments": {
                "x": []
            }
        },
        "activation": {
            "name": "activation",
            "location": 17,
            "return": [],
            "arguments": {
                "func_a": []
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/module/dropout_wrapper.py": {
        "DropoutWrapper.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dropout_p": [
                    "int"
                ],
                "enable_vbp": [
                    "bool"
                ]
            }
        },
        "DropoutWrapper.forward": {
            "name": "forward",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/module/my_optim.py": {
        "_norm": {
            "name": "_norm",
            "location": 42,
            "return": [],
            "arguments": {
                "p": [],
                "dim": []
            }
        },
        "_dummy": {
            "name": "_dummy",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "weight_norm": {
            "name": "weight_norm",
            "location": 109,
            "return": [],
            "arguments": {
                "module": [],
                "weights": [
                    "None"
                ],
                "dim": [
                    "int"
                ]
            }
        },
        "EMA.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gamma": [],
                "model": []
            }
        },
        "EMA.setup": {
            "name": "setup",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EMA.cuda": {
            "name": "cuda",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EMA.update": {
            "name": "update",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EMA.swap_parameters": {
            "name": "swap_parameters",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EMA.state_dict": {
            "name": "state_dict",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WeightNorm.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights": [],
                "dim": []
            }
        },
        "WeightNorm.compute_weight": {
            "name": "compute_weight",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "module": [],
                "name": []
            }
        },
        "WeightNorm.apply": {
            "name": "apply",
            "location": 74,
            "return": [
                "WeightNorm"
            ],
            "arguments": {
                "module": [],
                "weights": [],
                "dim": []
            }
        },
        "WeightNorm.remove": {
            "name": "remove",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "WeightNorm.__call__": {
            "name": "__call__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": [],
                "inputs": []
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/module/san.py": {
        "generate_mask": {
            "name": "generate_mask",
            "location": 16,
            "return": [
                "Variable"
            ],
            "arguments": {
                "new_data": [],
                "dropout_p": [
                    "float"
                ],
                "is_training": [
                    "bool"
                ]
            }
        },
        "Classifier.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_size": [],
                "y_size": [],
                "opt": [],
                "prefix": [
                    "typing.Text"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "Classifier.forward": {
            "name": "forward",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "x1": [],
                "x2": [],
                "mask": [
                    "None"
                ]
            }
        },
        "SANClassifier.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_size": [],
                "h_size": [],
                "label_size": [],
                "opt": [
                    "dict"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "SANClassifier.forward": {
            "name": "forward",
            "location": 82,
            "return": [
                "tuple[list]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "h0": [],
                "x_mask": [
                    "None"
                ],
                "h_mask": [
                    "None"
                ]
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/module/similarity.py": {
        "DotProduct.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x1_dim": [],
                "x2_dim": [],
                "prefix": [
                    "typing.Text"
                ],
                "opt": [
                    "dict"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "DotProduct.forward": {
            "name": "forward",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "x1": [],
                "x2": []
            }
        },
        "DotProductProject.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x1_dim": [],
                "x2_dim": [],
                "prefix": [
                    "typing.Text"
                ],
                "opt": [
                    "dict"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "DotProductProject.forward": {
            "name": "forward",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "x1": [],
                "x2": []
            }
        },
        "Bilinear.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x1_dim": [],
                "x2_dim": [],
                "prefix": [
                    "typing.Text"
                ],
                "opt": [
                    "dict"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "Bilinear.forward": {
            "name": "forward",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "BilinearSum.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x1_dim": [],
                "x2_dim": [],
                "prefix": [
                    "typing.Text"
                ],
                "opt": [
                    "dict"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "BilinearSum.forward": {
            "name": "forward",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "x1": [],
                "x2": []
            }
        },
        "Trilinear.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x1_dim": [],
                "x2_dim": [],
                "prefix": [
                    "typing.Text"
                ],
                "opt": [
                    "dict"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "Trilinear.forward": {
            "name": "forward",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "x1": [],
                "x2": []
            }
        },
        "SimilarityWrapper.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x1_dim": [],
                "x2_dim": [],
                "prefix": [
                    "typing.Text"
                ],
                "opt": [
                    "dict"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "SimilarityWrapper.forward": {
            "name": "forward",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "x1": [],
                "x2": []
            }
        },
        "AttentionWrapper.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x1_dim": [],
                "x2_dim": [],
                "x3_dim": [
                    "None"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "opt": [
                    "dict"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "AttentionWrapper.forward": {
            "name": "forward",
            "location": 210,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "key": [],
                "value": [],
                "key_padding_mask": [
                    "None"
                ],
                "return_scores": [
                    "bool"
                ]
            }
        },
        "LinearSelfAttn.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "dropout": [
                    "None"
                ]
            }
        },
        "LinearSelfAttn.forward": {
            "name": "forward",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "x_mask": []
            }
        },
        "MLPSelfAttn.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "opt": [
                    "dict"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "MLPSelfAttn.forward": {
            "name": "forward",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "x_mask": []
            }
        },
        "SelfAttnWrapper.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [],
                "prefix": [
                    "typing.Text"
                ],
                "opt": [
                    "dict"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "SelfAttnWrapper.forward": {
            "name": "forward",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "x_mask": []
            }
        },
        "DeepAttentionWrapper.__init__": {
            "name": "__init__",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x1_dim": [],
                "x2_dim": [],
                "x3_dims": [],
                "att_cnt": [],
                "prefix": [
                    "typing.Text"
                ],
                "opt": [],
                "dropout": [
                    "None"
                ]
            }
        },
        "DeepAttentionWrapper.forward": {
            "name": "forward",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "x1": [],
                "x2": [],
                "x3": [],
                "x2_mask": []
            }
        },
        "BilinearFlatSim.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_size": [],
                "y_size": [],
                "opt": [
                    "dict"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "BilinearFlatSim.forward": {
            "name": "forward",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "x_mask": []
            }
        },
        "SimpleFlatSim.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_size": [],
                "y_size": [],
                "opt": [
                    "dict"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "SimpleFlatSim.forward": {
            "name": "forward",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "x_mask": []
            }
        },
        "FlatSim.__init__": {
            "name": "__init__",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_size": [],
                "y_size": [],
                "opt": [
                    "dict"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "FlatSim.forward": {
            "name": "forward",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "x_mask": []
            }
        },
        "FlatSimV2.__init__": {
            "name": "__init__",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x_size": [],
                "y_size": [],
                "opt": [
                    "dict"
                ],
                "prefix": [
                    "typing.Text"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "FlatSimV2.forward": {
            "name": "forward",
            "location": 428,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "x_mask": []
            }
        },
        "FlatSimilarityWrapper.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x1_dim": [],
                "x2_dim": [],
                "prefix": [
                    "typing.Text"
                ],
                "opt": [
                    "dict"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "FlatSimilarityWrapper.forward": {
            "name": "forward",
            "location": 461,
            "return": [],
            "arguments": {
                "self": [],
                "x1": [],
                "x2": [],
                "mask": []
            }
        },
        "MultiheadAttentionWrapper.__init__": {
            "name": "__init__",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_dim": [],
                "key_dim": [],
                "value_dim": [],
                "prefix": [
                    "typing.Text"
                ],
                "opt": [
                    "dict"
                ],
                "dropout": [
                    "None"
                ]
            }
        },
        "MultiheadAttentionWrapper.forward": {
            "name": "forward",
            "location": 512,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "key": [],
                "value": [],
                "key_padding_mask": [
                    "None"
                ]
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/module/sub_layers.py": {
        "LayerNorm.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [],
                "eps": [
                    "float"
                ]
            }
        },
        "LayerNorm.forward": {
            "name": "forward",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/module/__init__.py": {},
    "gobbli-master/gobbli/model/mtdnn/src/mt_dnn/batcher.py": {},
    "gobbli-master/gobbli/model/mtdnn/src/mt_dnn/gobbli_batcher.py": {},
    "gobbli-master/gobbli/model/mtdnn/src/mt_dnn/gobbli_model.py": {},
    "gobbli-master/gobbli/model/mtdnn/src/mt_dnn/matcher.py": {
        "SANBertNetwork.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opt": [],
                "bert_config": [
                    "None"
                ]
            }
        },
        "SANBertNetwork._my_init": {
            "name": "_my_init",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SANBertNetwork.nbert_layer": {
            "name": "nbert_layer",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SANBertNetwork.freeze_layers": {
            "name": "freeze_layers",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_n": []
            }
        },
        "SANBertNetwork.freeze_layer": {
            "name": "freeze_layer",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "SANBertNetwork.set_embed": {
            "name": "set_embed",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "opt": []
            }
        },
        "SANBertNetwork.forward": {
            "name": "forward",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "input_ids": [],
                "token_type_ids": [],
                "attention_mask": [],
                "premise_mask": [
                    "None"
                ],
                "hyp_mask": [
                    "None"
                ],
                "task_id": [
                    "int"
                ]
            }
        },
        "SANBertNetwork._my_init.init_weights": {
            "name": "init_weights",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "module": []
            }
        }
    },
    "gobbli-master/gobbli/model/mtdnn/src/mt_dnn/model.py": {},
    "gobbli-master/gobbli/model/mtdnn/src/mt_dnn/__init__.py": {},
    "gobbli-master/gobbli/model/mtdnn/src/scripts/strip_model.py": {
        "predict_config": {
            "name": "predict_config",
            "location": 6,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gobbli-master/gobbli/model/sklearn/model.py": {
        "persist_estimator": {
            "name": "persist_estimator",
            "location": 23,
            "return": [],
            "arguments": {
                "estimator": []
            }
        },
        "make_default_tfidf_logistic_regression": {
            "name": "make_default_tfidf_logistic_regression",
            "location": 46,
            "return": [
                "Pipeline"
            ],
            "arguments": {}
        },
        "make_cv_tfidf_logistic_regression": {
            "name": "make_cv_tfidf_logistic_regression",
            "location": 57,
            "return": [
                "GridSearchCV"
            ],
            "arguments": {
                "grid_params": [
                    "None"
                ]
            }
        },
        "_SafeEstimator.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_estimator": []
            }
        },
        "_SafeEstimator.fit": {
            "name": "fit",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SafeEstimator.predict_proba": {
            "name": "predict_proba",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "_SafeEstimator.predict": {
            "name": "predict",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "SKLearnClassifier.init": {
            "name": "init",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "SKLearnClassifier._load_estimator": {
            "name": "_load_estimator",
            "location": 184,
            "return": [],
            "arguments": {
                "estimator_path": []
            }
        },
        "SKLearnClassifier._dump_estimator": {
            "name": "_dump_estimator",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "estimator": [],
                "estimator_path": []
            }
        },
        "SKLearnClassifier._validate_estimator": {
            "name": "_validate_estimator",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "estimator": []
            }
        },
        "SKLearnClassifier._build": {
            "name": "_build",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SKLearnClassifier._train": {
            "name": "_train",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "train_input": [],
                "context": []
            }
        },
        "SKLearnClassifier._predict": {
            "name": "_predict",
            "location": 283,
            "return": [],
            "arguments": {
                "self": [],
                "predict_input": [],
                "context": []
            }
        },
        "TfidfEmbedder.init": {
            "name": "init",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "TfidfEmbedder._build": {
            "name": "_build",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TfidfEmbedder._embed": {
            "name": "_embed",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "embed_input": [],
                "context": []
            }
        }
    },
    "gobbli-master/gobbli/model/sklearn/__init__.py": {},
    "gobbli-master/gobbli/model/spacy/model.py": {
        "SpaCyModel.init": {
            "name": "init",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "SpaCyModel.image_tag": {
            "name": "image_tag",
            "location": 84,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaCyModel._build": {
            "name": "_build",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaCyModel._get_checkpoint": {
            "name": "_get_checkpoint",
            "location": 103,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "user_checkpoint": [],
                "context": []
            }
        },
        "SpaCyModel._get_model": {
            "name": "_get_model",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "container_checkpoint_dir": []
            }
        },
        "SpaCyModel.host_cache_dir": {
            "name": "host_cache_dir",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpaCyModel._write_input": {
            "name": "_write_input",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "labels": [],
                "input_path": []
            }
        },
        "SpaCyModel._write_labels": {
            "name": "_write_labels",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [],
                "labels_path": []
            }
        },
        "SpaCyModel._train": {
            "name": "_train",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "train_input": [],
                "context": []
            }
        },
        "SpaCyModel._read_predictions": {
            "name": "_read_predictions",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "predict_path": []
            }
        },
        "SpaCyModel._predict": {
            "name": "_predict",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "predict_input": [],
                "context": []
            }
        },
        "SpaCyModel._read_embeddings": {
            "name": "_read_embeddings",
            "location": 311,
            "return": [
                "tuple[typing.Optional[list]]"
            ],
            "arguments": {
                "self": [],
                "embed_path": [],
                "pooling": []
            }
        },
        "SpaCyModel._embed": {
            "name": "_embed",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "embed_input": [],
                "context": []
            }
        }
    },
    "gobbli-master/gobbli/model/spacy/__init__.py": {},
    "gobbli-master/gobbli/model/spacy/src/run_spacy.py": {
        "is_transformer": {
            "name": "is_transformer",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "nlp": []
            }
        },
        "read_unique_labels": {
            "name": "read_unique_labels",
            "location": 26,
            "return": [],
            "arguments": {
                "labels_path": []
            }
        },
        "read_data": {
            "name": "read_data",
            "location": 33,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "file_path": [],
                "has_labels": []
            }
        },
        "spacy_format_labels": {
            "name": "spacy_format_labels",
            "location": 48,
            "return": [
                "list[dict[, int]]"
            ],
            "arguments": {
                "ys": [],
                "labels": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 53,
            "return": [
                "tuple[float]"
            ],
            "arguments": {
                "tokenizer": [],
                "nlp": [],
                "valid_data": [],
                "labels": []
            }
        },
        "train": {
            "name": "train",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "predict": {
            "name": "predict",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "embed": {
            "name": "embed",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gobbli-master/gobbli/model/transformer/model.py": {
        "Transformer.init": {
            "name": "init",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "Transformer.image_tag": {
            "name": "image_tag",
            "location": 108,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transformer._build": {
            "name": "_build",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transformer._get_checkpoint": {
            "name": "_get_checkpoint",
            "location": 123,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "user_checkpoint": [],
                "context": []
            }
        },
        "Transformer._get_weights": {
            "name": "_get_weights",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "container_checkpoint_dir": []
            }
        },
        "Transformer.host_cache_dir": {
            "name": "host_cache_dir",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transformer._write_input": {
            "name": "_write_input",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "X": [],
                "labels": [],
                "input_path": []
            }
        },
        "Transformer._write_labels": {
            "name": "_write_labels",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labels": [],
                "labels_path": []
            }
        },
        "Transformer._write_config": {
            "name": "_write_config",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_path": []
            }
        },
        "Transformer._train": {
            "name": "_train",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "train_input": [],
                "context": []
            }
        },
        "Transformer._read_predictions": {
            "name": "_read_predictions",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "predict_path": []
            }
        },
        "Transformer._predict": {
            "name": "_predict",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "predict_input": [],
                "context": []
            }
        },
        "Transformer._read_embeddings": {
            "name": "_read_embeddings",
            "location": 339,
            "return": [
                "tuple[typing.Optional[list]]"
            ],
            "arguments": {
                "self": [],
                "embed_path": [],
                "pooling": []
            }
        },
        "Transformer._embed": {
            "name": "_embed",
            "location": 358,
            "return": [],
            "arguments": {
                "self": [],
                "embed_input": [],
                "context": []
            }
        }
    },
    "gobbli-master/gobbli/model/transformer/__init__.py": {},
    "gobbli-master/gobbli/model/transformer/src/run_model.py": {
        "read_unique_labels": {
            "name": "read_unique_labels",
            "location": 16,
            "return": [],
            "arguments": {
                "labels_path": []
            }
        },
        "read_data": {
            "name": "read_data",
            "location": 23,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "file_path": [],
                "labels": [],
                "multilabel": []
            }
        },
        "batch_gen": {
            "name": "batch_gen",
            "location": 48,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "l": [],
                "batch_size": []
            }
        },
        "encode_batch": {
            "name": "encode_batch",
            "location": 53,
            "return": [
                "tuple[list]",
                "tuple"
            ],
            "arguments": {
                "batch": [],
                "tokenizer": [],
                "max_seq_length": [],
                "return_tokens": [
                    "bool"
                ]
            }
        },
        "encode_labels": {
            "name": "encode_labels",
            "location": 79,
            "return": [],
            "arguments": {
                "y": [],
                "labels": [],
                "multilabel": []
            }
        },
        "decode_labels": {
            "name": "decode_labels",
            "location": 91,
            "return": [
                "list"
            ],
            "arguments": {
                "y_encoded": [],
                "labels": []
            }
        },
        "tsv_to_encoded_batches": {
            "name": "tsv_to_encoded_batches",
            "location": 98,
            "return": [
                "typing.Generator[tuple]",
                "typing.Generator"
            ],
            "arguments": {
                "input_path": [],
                "tokenizer": [],
                "labels": [],
                "batch_size": [],
                "max_seq_length": [],
                "multilabel": [],
                "return_tokens": [
                    "bool"
                ]
            }
        },
        "num_batches": {
            "name": "num_batches",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "data_path": [],
                "batch_size": []
            }
        },
        "get_loss_preds": {
            "name": "get_loss_preds",
            "location": 146,
            "return": [
                "tuple"
            ],
            "arguments": {
                "model": [],
                "X": [],
                "y": [],
                "num_labels": [],
                "multilabel": []
            }
        },
        "train": {
            "name": "train",
            "location": 168,
            "return": [
                "dict[typing.Text, float]"
            ],
            "arguments": {}
        },
        "predict": {
            "name": "predict",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "embed": {
            "name": "embed",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gobbli-master/gobbli/model/use/model.py": {
        "_read_embeddings": {
            "name": "_read_embeddings",
            "location": 17,
            "return": [
                "list"
            ],
            "arguments": {
                "output_file": []
            }
        },
        "USE.init": {
            "name": "init",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "USE.image_tag": {
            "name": "image_tag",
            "location": 68,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "USE.weights_dir": {
            "name": "weights_dir",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "USE._build": {
            "name": "_build",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "USE._embed": {
            "name": "_embed",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "embed_input": [],
                "context": []
            }
        }
    },
    "gobbli-master/gobbli/model/use/__init__.py": {},
    "gobbli-master/gobbli/model/use/src/use.py": {
        "read_texts": {
            "name": "read_texts",
            "location": 7,
            "return": [],
            "arguments": {
                "input_file": []
            }
        },
        "make_batches": {
            "name": "make_batches",
            "location": 12,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "l": [],
                "batch_size": []
            }
        }
    },
    "gobbli-master/gobbli/test/test_io.py": {
        "test_validate_X": {
            "name": "test_validate_X",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [],
                "err_class": []
            }
        },
        "test_validate_multilabel_y": {
            "name": "test_validate_multilabel_y",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "multilabel": [],
                "obj": [],
                "err_class": []
            }
        },
        "test_validate_X_y": {
            "name": "test_validate_X_y",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "X": [],
                "y": [],
                "err_class": []
            }
        },
        "test_predict_output": {
            "name": "test_predict_output",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "df": [],
                "y_pred": []
            }
        },
        "test_make_document_windows": {
            "name": "test_make_document_windows",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "docs": [],
                "window_len": [],
                "expected_windowed": [],
                "has_y": []
            }
        },
        "test_pool_document_windows": {
            "name": "test_pool_document_windows",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "output_cls": [],
                "unpooled_data": [],
                "indices": [],
                "pooling": [],
                "pooled_data": []
            }
        },
        "test_pool_document_windows_validation": {
            "name": "test_pool_document_windows_validation",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gobbli-master/gobbli/test/test_util.py": {
        "make_zip": {
            "name": "make_zip",
            "location": 22,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "relative_paths": []
            }
        },
        "make_tar_gz": {
            "name": "make_tar_gz",
            "location": 38,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "relative_paths": []
            }
        },
        "make_gz": {
            "name": "make_gz",
            "location": 54,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "name": []
            }
        },
        "test_extract_archive": {
            "name": "test_extract_archive",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "archive_func": [],
                "junk": [],
                "expected_paths": []
            }
        },
        "test_extract_gz": {
            "name": "test_extract_gz",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_is_archive": {
            "name": "test_is_archive",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [],
                "expected_is_archive": []
            }
        },
        "test_dir_to_blob": {
            "name": "test_dir_to_blob",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_blob_to_dir": {
            "name": "test_blob_to_dir",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_shuffle_together": {
            "name": "test_shuffle_together",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "l1": [],
                "l2": [],
                "err": []
            }
        },
        "test_tokenize_split": {
            "name": "test_tokenize_split",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "tokens": []
            }
        },
        "test_tokenize_spacy": {
            "name": "test_tokenize_spacy",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "tokens": []
            }
        },
        "test_detokenize_split_spacy": {
            "name": "test_detokenize_split_spacy",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "tokens": [],
                "tokenize_method": []
            }
        },
        "test_tokenize_detokenize_sentencepiece": {
            "name": "test_tokenize_detokenize_sentencepiece",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "model_path": []
            }
        }
    },
    "gobbli-master/gobbli/test/util.py": {
        "skip_if_no_gpu": {
            "name": "skip_if_no_gpu",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "skip_if_low_resource": {
            "name": "skip_if_low_resource",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "model_test_dir": {
            "name": "model_test_dir",
            "location": 33,
            "return": [],
            "arguments": {
                "model_cls": []
            }
        },
        "validate_checkpoint": {
            "name": "validate_checkpoint",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "model_cls": [],
                "checkpoint": []
            }
        },
        "MockDataset.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockDataset._is_built": {
            "name": "_is_built",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockDataset._build": {
            "name": "_build",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockDataset.X_train": {
            "name": "X_train",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockDataset.y_train": {
            "name": "y_train",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockDataset.X_test": {
            "name": "X_test",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockDataset.y_test": {
            "name": "y_test",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockModel.init": {
            "name": "init",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "MockModel._build": {
            "name": "_build",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gobbli-master/gobbli/test/__init__.py": {},
    "gobbli-master/gobbli/test/augment/test_bertmaskedlm.py": {
        "test_init": {
            "name": "test_init",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [],
                "exception": []
            }
        },
        "test_bertmaskedlm_augment": {
            "name": "test_bertmaskedlm_augment",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "model_gpu_config": [],
                "gobbli_dir": []
            }
        }
    },
    "gobbli-master/gobbli/test/augment/test_marian.py": {
        "test_init": {
            "name": "test_init",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [],
                "exception": []
            }
        },
        "test_marianmt_augment": {
            "name": "test_marianmt_augment",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "model_gpu_config": [],
                "gobbli_dir": []
            }
        }
    },
    "gobbli-master/gobbli/test/augment/test_word2vec.py": {
        "test_word2vec_models": {
            "name": "test_word2vec_models",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_weights_file": {
            "name": "make_weights_file",
            "location": 21,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_word2vec_init": {
            "name": "test_word2vec_init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_word2vec_kwargs": {
            "name": "test_word2vec_kwargs",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "n_similar": [],
                "diversity": [],
                "tokenizer": [],
                "exception_cls": []
            }
        },
        "test_word2vec_replace": {
            "name": "test_word2vec_replace",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "gobbli-master/gobbli/test/augment/test_wordnet.py": {
        "test_detokenize_doc": {
            "name": "test_detokenize_doc",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "text": []
            }
        },
        "test_wordnet_augment": {
            "name": "test_wordnet_augment",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gobbli-master/gobbli/test/augment/__init__.py": {},
    "gobbli-master/gobbli/test/classification/test_classifiers.py": {
        "check_predict_output": {
            "name": "check_predict_output",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "train_output": [],
                "predict_input": [],
                "predict_output": []
            }
        },
        "test_classifier": {
            "name": "test_classifier",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "model_cls": [],
                "dataset_cls": [],
                "model_kwargs": [],
                "train_kwargs": [],
                "predict_kwargs": [],
                "model_gpu_config": [],
                "gobbli_dir": [],
                "request": []
            }
        }
    },
    "gobbli-master/gobbli/test/classification/test_embeddings.py": {
        "check_embed_output": {
            "name": "check_embed_output",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "embed_input": [],
                "embed_output": [],
                "expected_dimensionality": [
                    "None"
                ],
                "max_seq_length": []
            }
        },
        "test_embeddings": {
            "name": "test_embeddings",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "model_cls": [],
                "dataset_cls": [],
                "model_kwargs": [],
                "train_kwargs": [],
                "embed_kwargs": [],
                "model_gpu_config": [],
                "pooling": [],
                "gobbli_dir": [],
                "request": []
            }
        }
    },
    "gobbli-master/gobbli/test/classification/__init__.py": {},
    "gobbli-master/gobbli/test/dataset/test_base_dataset.py": {
        "test_base_dataset_load": {
            "name": "test_base_dataset_load",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_dataset_train_input": {
            "name": "test_base_dataset_train_input",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_base_dataset_predict_input": {
            "name": "test_base_dataset_predict_input",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gobbli-master/gobbli/test/dataset/test_cmu_movie_summary.py": {
        "test_load_cmu_movie_summary": {
            "name": "test_load_cmu_movie_summary",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_gobbli_dir": []
            }
        }
    },
    "gobbli-master/gobbli/test/dataset/test_imdb.py": {
        "test_load_imdb": {
            "name": "test_load_imdb",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_gobbli_dir": []
            }
        }
    },
    "gobbli-master/gobbli/test/dataset/test_newsgroups.py": {
        "test_load_newsgroups": {
            "name": "test_load_newsgroups",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_gobbli_dir": []
            }
        }
    },
    "gobbli-master/gobbli/test/dataset/__init__.py": {},
    "gobbli-master/gobbli/test/experiment/test_base_experiment.py": {
        "test_base_experiment_init": {
            "name": "test_base_experiment_init",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_base_experiment_gpu": {
            "name": "test_base_experiment_gpu",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "request": []
            }
        },
        "test_base_experiment_gpu.find_gpus": {
            "name": "find_gpus",
            "location": 75,
            "return": [],
            "arguments": {}
        }
    },
    "gobbli-master/gobbli/test/experiment/test_classification_experiment.py": {
        "test_classification_results_checkpoint": {
            "name": "test_classification_results_checkpoint",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_classification_init_validation": {
            "name": "test_classification_init_validation",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "model_cls": [],
                "valid": []
            }
        },
        "test_classification_run_validation": {
            "name": "test_classification_run_validation",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "bad_value": []
            }
        },
        "test_classification_run": {
            "name": "test_classification_run",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "request": [],
                "model_cls": [],
                "dataset_cls": [],
                "param_grid": [],
                "limit": [],
                "ray_local_mode": [],
                "gobbli_dir": []
            }
        }
    },
    "gobbli-master/gobbli/test/experiment/__init__.py": {},
    "gobbli-master/gobbli/test/inspect/test_evaluate.py": {
        "test_classification_evaluation_multiclass": {
            "name": "test_classification_evaluation_multiclass",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_classification_evaluation_multilabel": {
            "name": "test_classification_evaluation_multilabel",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gobbli-master/gobbli/test/interactive/test_util.py": {
        "test_read_data_file": {
            "name": "test_read_data_file",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [],
                "filename": [],
                "contents": [],
                "multilabel": [],
                "limit": [],
                "expected": []
            }
        }
    },
    "gobbli-master/gobbli/test/interactive/__init__.py": {},
    "gobbli-master/gobbli/test/model/test_base_model.py": {
        "test_base_model_init": {
            "name": "test_base_model_init",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_base_model_init_warnings_errors": {
            "name": "test_base_model_init_warnings_errors",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "gobbli-master/gobbli/test/model/test_bert.py": {
        "test_init": {
            "name": "test_init",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [],
                "exception": []
            }
        }
    },
    "gobbli-master/gobbli/test/model/test_fasttext.py": {
        "test_init": {
            "name": "test_init",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [],
                "exception": []
            }
        }
    },
    "gobbli-master/gobbli/test/model/test_mtdnn.py": {
        "test_init": {
            "name": "test_init",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [],
                "exception": []
            }
        }
    },
    "gobbli-master/gobbli/test/model/test_sklearn.py": {
        "_make_test_estimator": {
            "name": "_make_test_estimator",
            "location": 19,
            "return": [
                "LogisticRegression"
            ],
            "arguments": {}
        },
        "_assert_estimators_equal": {
            "name": "_assert_estimators_equal",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "clf1": [],
                "clf2": []
            }
        },
        "test_dump_estimator": {
            "name": "test_dump_estimator",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_load_estimator": {
            "name": "test_load_estimator",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_persist_estimator": {
            "name": "test_persist_estimator",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_gobbli_dir": []
            }
        },
        "test_validate_estimator": {
            "name": "test_validate_estimator",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "clf": [],
                "err": []
            }
        },
        "test_safe_estimator": {
            "name": "test_safe_estimator",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [],
                "exception": []
            }
        }
    },
    "gobbli-master/gobbli/test/model/test_spacy.py": {
        "test_init": {
            "name": "test_init",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [],
                "exception": []
            }
        }
    },
    "gobbli-master/gobbli/test/model/test_transformer.py": {
        "test_init": {
            "name": "test_init",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [],
                "exception": []
            }
        }
    },
    "gobbli-master/gobbli/test/model/test_use.py": {
        "test_init": {
            "name": "test_init",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "params": [],
                "exception": []
            }
        }
    },
    "gobbli-master/gobbli/test/model/__init__.py": {}
}
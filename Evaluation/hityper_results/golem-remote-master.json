{
    "golem-remote-master/setup.py": {},
    "golem-remote-master/examples/iteration1_golemclientmock.py": {
        "func": {
            "name": "func",
            "location": 29,
            "return": [
                "tuple[typing.Union[int,str,list[tuple[typing.Union[int,int]]],bytes,list[]]]"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "kwarg1": [
                    "typing.Text"
                ],
                "kwarg2": [
                    "typing.Text"
                ]
            }
        }
    },
    "golem-remote-master/examples/iteration2_golemclientcmdmock.py": {
        "func": {
            "name": "func",
            "location": 29,
            "return": [
                "tuple[typing.Union[int,str,list[tuple[typing.Union[int,int]]],bytes,list[]]]"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "kwarg1": [
                    "typing.Text"
                ],
                "kwarg2": [
                    "typing.Text"
                ]
            }
        }
    },
    "golem-remote-master/examples/iteration3_redismock.py": {
        "func": {
            "name": "func",
            "location": 29,
            "return": [
                "tuple[typing.Union[int,str,list[tuple[typing.Union[int,int]]],bytes,list[]]]"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "kwarg1": [
                    "typing.Text"
                ],
                "kwarg2": [
                    "typing.Text"
                ]
            }
        }
    },
    "golem-remote-master/examples/iteration4_realredis.py": {
        "func": {
            "name": "func",
            "location": 29,
            "return": [
                "tuple[typing.Union[int,str,list[tuple[typing.Union[int,int]]],bytes,list[]]]"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "kwarg1": [
                    "typing.Text"
                ],
                "kwarg2": [
                    "typing.Text"
                ]
            }
        }
    },
    "golem-remote-master/examples/iteration5_realgolem.py": {
        "func": {
            "name": "func",
            "location": 37,
            "return": [
                "tuple[typing.Union[int,str,list[tuple[typing.Union[int,int]]],bytes,list[]]]"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "kwarg1": [
                    "typing.Text"
                ],
                "kwarg2": [
                    "typing.Text"
                ]
            }
        }
    },
    "golem-remote-master/examples/iteration6_golem_remote_package.py": {
        "func": {
            "name": "func",
            "location": 25,
            "return": [
                "tuple[typing.Union[int,str,list[tuple[typing.Union[int,int]]],bytes,list[]]]"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "arg2": [
                    "int",
                    "str",
                    "list[]",
                    "bytes",
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "kwarg1": [
                    "typing.Text"
                ],
                "kwarg2": [
                    "typing.Text"
                ]
            }
        }
    },
    "golem-remote-master/examples/iteration7_task_files.py": {
        "func": {
            "name": "func",
            "location": 35,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "arg1": [],
                "arg2": [],
                "kwarg1": [
                    "typing.Text"
                ],
                "kwarg2": [
                    "typing.Text"
                ]
            }
        }
    },
    "golem-remote-master/examples/target.py": {},
    "golem-remote-master/examples/hyperopt/iteration8_hyperopt_distributed.py": {
        "fn": {
            "name": "fn",
            "location": 34,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "dict[, ]",
                    "dict[str, str]",
                    "str",
                    "None"
                ]
            }
        },
        "spawn_head": {
            "name": "spawn_head",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "spawn_worker": {
            "name": "spawn_worker",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fn.f": {
            "name": "f",
            "location": 40,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "golem-remote-master/examples/hyperopt/iteration8_hyperopt_locally.py": {
        "fn": {
            "name": "fn",
            "location": 26,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "bool"
                ]
            }
        },
        "spawn_head": {
            "name": "spawn_head",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "spawn_worker": {
            "name": "spawn_worker",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "golem-remote-master/experiments/hyperopt1/iteration8_hyperopt_distributed.py": {
        "fn": {
            "name": "fn",
            "location": 31,
            "return": [],
            "arguments": {
                "x": [
                    "float",
                    "dict[, ]",
                    "dict[str, str]",
                    "str",
                    "None"
                ]
            }
        },
        "spawn_head": {
            "name": "spawn_head",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "spawn_worker": {
            "name": "spawn_worker",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fn.f": {
            "name": "f",
            "location": 37,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "golem-remote-master/experiments/hyperopt1/iteration8_hyperopt_locally.py": {
        "fn": {
            "name": "fn",
            "location": 26,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "x": [
                    "float",
                    "bool"
                ]
            }
        },
        "spawn_head": {
            "name": "spawn_head",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "spawn_worker": {
            "name": "spawn_worker",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "golem-remote-master/golem_remote/config.py": {},
    "golem-remote-master/golem_remote/consts.py": {},
    "golem-remote-master/golem_remote/encoding.py": {
        "encode_obj_to_str": {
            "name": "encode_obj_to_str",
            "location": 9,
            "return": [],
            "arguments": {
                "obj": [
                    "typing.Callable[typing.Any, bool]",
                    "BaseException",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "decode_str_to_obj": {
            "name": "decode_str_to_obj",
            "location": 18,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "golem-remote-master/golem_remote/golem_client.py": {
        "fill_task_definition": {
            "name": "fill_task_definition",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "template_path": [
                    "str"
                ],
                "queue_host": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "list[str]",
                    "list[dict[, ]]"
                ],
                "queue_port": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "list[str]",
                    "list[dict[, ]]"
                ],
                "output_path": [
                    "str",
                    "bool",
                    "typing.Callable[float, None]"
                ],
                "number_of_subtasks": [
                    "int"
                ],
                "task_files_dir": [
                    "None",
                    "str",
                    "dict[pathlib.Path, S]",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "initialize_task_files": {
            "name": "initialize_task_files",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp": [
                    "str",
                    "typing.IO"
                ],
                "task_files": [
                    "list[pathlib.Path]"
                ]
            }
        },
        "_run_cmd": {
            "name": "_run_cmd",
            "location": 98,
            "return": [],
            "arguments": {
                "cmd": [
                    "list[]",
                    "str",
                    "list[str]",
                    "list[list[str]]"
                ]
            }
        },
        "GolemClientInterface.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientInterface.run_function": {
            "name": "run_function",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "GolemClientInterface.initialize_task": {
            "name": "initialize_task",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientInterface._run": {
            "name": "_run",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "list[tuple[]]",
                    "list[dict[, ]]"
                ]
            }
        },
        "GolemClientInterface.get": {
            "name": "get",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subtask_id": [
                    "str",
                    "int",
                    "None",
                    "dict[, ]"
                ],
                "blocking": [
                    "bool"
                ],
                "timeout": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "GolemClient.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "golem_host": [],
                "golem_port": [],
                "golem_dir": [],
                "golemcli": [],
                "queue_host": [],
                "queue_port": [],
                "blocking": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ],
                "number_of_subtasks": [
                    "int"
                ],
                "clear_db": [
                    "bool"
                ],
                "task_id": [
                    "None",
                    "str",
                    "int",
                    "typing.Mapping"
                ],
                "task_files": [
                    "None",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "GolemClient._build_start_task_cmd": {
            "name": "_build_start_task_cmd",
            "location": 146,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "task_definition_path": [
                    "str",
                    "list[str]",
                    "int",
                    "None",
                    "set[str]"
                ]
            }
        },
        "GolemClient._run": {
            "name": "_run",
            "location": 160,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]",
                    "dict[str, str]",
                    "typing.Any",
                    "None",
                    "bytes"
                ]
            }
        },
        "GolemClient._create_golem_task": {
            "name": "_create_golem_task",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClient._create_queue": {
            "name": "_create_queue",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClient.initialize_task": {
            "name": "initialize_task",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClient.__getstate__": {
            "name": "__getstate__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClient.__setstate__": {
            "name": "__setstate__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "GolemClient.get": {
            "name": "get",
            "location": 221,
            "return": [
                "None",
                "set[]",
                "dict[int, list[typing.Any]]",
                "list[]",
                "typing.OrderedDict",
                "dict[str, list[typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "subtask_id": [
                    "str"
                ],
                "blocking": [
                    "bool"
                ],
                "timeout": [
                    "None",
                    "bool",
                    "str",
                    "dict[, ]",
                    "float",
                    "list[str]"
                ]
            }
        }
    },
    "golem-remote-master/golem_remote/golem_remote.py": {
        "golem_running": {
            "name": "golem_running",
            "location": 35,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "remote": {
            "name": "remote",
            "location": 47,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "get": {
            "name": "get",
            "location": 62,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "init": {
            "name": "init",
            "location": 78,
            "return": [],
            "arguments": {
                "host": [],
                "port": [],
                "golem_dir": [],
                "golemcli": [],
                "class_": [],
                "blocking": [],
                "timeout": [],
                "number_of_subtasks": [],
                "clear_db": [],
                "task_id": [],
                "task_files": []
            }
        },
        "RemoteFunction.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "function": [],
                "client": []
            }
        },
        "RemoteFunction.remote": {
            "name": "remote",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "golem_running.checked": {
            "name": "checked",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "golem-remote-master/golem_remote/open_file.py": {
        "open_file": {
            "name": "open_file",
            "location": 11,
            "return": [],
            "arguments": {
                "original_dir": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[typing.Any]",
                    "dict[str, str]"
                ],
                "task_files_dir": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "list_dir_recursive": {
            "name": "list_dir_recursive",
            "location": 39,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "directory": [
                    "typing.Iterable[str]",
                    "str"
                ]
            }
        },
        "open_file._open": {
            "name": "_open",
            "location": 23,
            "return": [],
            "arguments": {
                "file": []
            }
        }
    },
    "golem-remote-master/golem_remote/queue_helpers.py": {
        "get_result_key": {
            "name": "get_result_key",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "subtask_id": [
                    "str"
                ]
            }
        },
        "_RedisQueue.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "float"
                ],
                "host": [
                    "typing.Text"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "_RedisQueue._queue_size": {
            "name": "_queue_size",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_RedisQueue.is_empty": {
            "name": "is_empty",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RedisQueue.clear_queue": {
            "name": "clear_queue",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RedisQueue.clear_db": {
            "name": "clear_db",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_RedisQueue._pop": {
            "name": "_pop",
            "location": 41,
            "return": [
                "None",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "_RedisQueue.push": {
            "name": "push",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "str"
                ]
            }
        },
        "_RedisQueue.set": {
            "name": "set",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "val": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_RedisQueue.get": {
            "name": "get",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Queue.pop": {
            "name": "pop",
            "location": 82,
            "return": [
                "tuple[None]",
                "tuple[typing.Union[str,tuple[],int,typing.Any,None,dict[, ]]]"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "bool"
                ],
                "timeout": [
                    "None",
                    "list[typing.Type]"
                ]
            }
        },
        "Queue.pop_nowait": {
            "name": "pop_nowait",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "golem-remote-master/golem_remote/runf_helpers.py": {},
    "golem-remote-master/golem_remote/__init__.py": {},
    "golem-remote-master/tests/helpers.py": {
        "start_redis": {
            "name": "start_redis",
            "location": 10,
            "return": [],
            "arguments": {
                "port": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "_TestWithRedis.setUpClass": {
            "name": "setUpClass",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "None",
                    "dict[str, object]"
                ]
            }
        },
        "_TestWithRedis.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestWithRedis.tearDownClass": {
            "name": "tearDownClass",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type"
                ]
            }
        }
    },
    "golem-remote-master/tests/test_encoding.py": {
        "TestEncodingDecoding.test_encode_decode": {
            "name": "test_encode_decode",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingDecoding.test_encode_decode.A.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "golem-remote-master/tests/test_golem_client.py": {
        "MockQueue.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockQueue.pop": {
            "name": "pop",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "block": [
                    "bool"
                ],
                "timeout": [
                    "None",
                    "bool",
                    "float",
                    "Exception",
                    "list[]"
                ]
            }
        },
        "MockQueue.pop_nowait": {
            "name": "pop_nowait",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockQueue.push": {
            "name": "push",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bool",
                    "typing.Match",
                    "None",
                    "typing.Any",
                    "list[]",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "MockQueue.set": {
            "name": "set",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "int",
                    "str"
                ]
            }
        },
        "MockQueue.get": {
            "name": "get",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "MockQueue2.set": {
            "name": "set",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[, ]",
                    "set[]",
                    "None"
                ],
                "value": [
                    "str",
                    "dict[, ]",
                    "typing.Type",
                    "set[]"
                ]
            }
        },
        "GolemClientQueueMock.initialize_task": {
            "name": "initialize_task",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientQueue2Mock.initialize_task": {
            "name": "initialize_task",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGolemClient.test_workflow": {
            "name": "test_workflow",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGolemClient.test_workflow.run_test": {
            "name": "run_test",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": []
            }
        },
        "TestGolemClient.test_workflow.run_test.func": {
            "name": "func",
            "location": 82,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "arg1": [],
                "arg2": [],
                "kwarg1": [
                    "typing.Text"
                ],
                "kwarg2": [
                    "typing.Text"
                ]
            }
        }
    },
    "golem-remote-master/tests/test_golem_remote.py": {
        "GolemClientAllMock.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientAllMock.initialize_task": {
            "name": "initialize_task",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientAllMock._run": {
            "name": "_run",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "GolemClientAllMock.get": {
            "name": "get",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_id": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "blocking": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "timeout": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "GolemClientMockPickle.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientMockPickle.initialize_task": {
            "name": "initialize_task",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GolemClientMockPickle.__run_pickled": {
            "name": "__run_pickled",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict[, ]",
                    "typing.Mapping"
                ]
            }
        },
        "GolemClientMockPickle._run": {
            "name": "_run",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "GolemClientMockPickle.get": {
            "name": "get",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "subtask_id": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "blocking": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "timeout": [
                    "None",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "TestGolemRemote.test_workflow": {
            "name": "test_workflow",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGolemRemote.test_workflow.run_test": {
            "name": "run_test",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": []
            }
        },
        "TestGolemRemote.test_workflow.run_test.func": {
            "name": "func",
            "location": 64,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "arg1": [],
                "arg2": [],
                "kwarg1": [
                    "typing.Text"
                ],
                "kwarg2": [
                    "typing.Text"
                ]
            }
        }
    },
    "golem-remote-master/tests/test_open_file.py": {
        "TestOpenFile_1.test_open_file": {
            "name": "test_open_file",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOpenFile_1.test_open_file.read_file": {
            "name": "read_file",
            "location": 24,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "golem-remote-master/tests/test_queue_helpers.py": {
        "TestRedisQueue.test_init": {
            "name": "test_init",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisQueue.test_empty": {
            "name": "test_empty",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisQueue.test_push_pop_noblock": {
            "name": "test_push_pop_noblock",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisQueue.test_push_pop_block": {
            "name": "test_push_pop_block",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRedisQueue.test_get_set": {
            "name": "test_get_set",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.test_pop_noblock": {
            "name": "test_pop_noblock",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQueue.pop_nowait": {
            "name": "pop_nowait",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "golem-remote-master/tests/__init__.py": {}
}
{
    "graphbook-master/docs/conf.py": {},
    "graphbook-master/graphbook/__init__.py": {},
    "graphbook-master/graphbook/graph/cell.py": {
        "_decode": {
            "name": "_decode",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "contents": [
                    "bytes"
                ],
                "encoding": [
                    "typing.Text"
                ]
            }
        },
        "register_cell_type": {
            "name": "register_cell_type",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "cell_type": [
                    "str",
                    "int"
                ],
                "cls": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "replace": [
                    "bool"
                ]
            }
        },
        "load_cell": {
            "name": "load_cell",
            "location": 157,
            "return": [],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "Cell.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "dict[, ]",
                    "bytes",
                    "list[typing.Callable[, ]]"
                ]
            }
        },
        "Cell.render": {
            "name": "render",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decoder": [
                    "None",
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Cell.is_executable": {
            "name": "is_executable",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.execute": {
            "name": "execute",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.to_obj": {
            "name": "to_obj",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.dup": {
            "name": "dup",
            "location": 47,
            "return": [
                "Cell"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cell.from_obj": {
            "name": "from_obj",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "obj": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Cell.__eq__": {
            "name": "__eq__",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "TextCell.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "bytes",
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "TextCell.render": {
            "name": "render",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "decoder": []
            }
        },
        "TextCell.is_executable": {
            "name": "is_executable",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextCell.execute": {
            "name": "execute",
            "location": 96,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextCell.to_obj": {
            "name": "to_obj",
            "location": 99,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TextCell.from_obj": {
            "name": "from_obj",
            "location": 103,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "obj": []
            }
        },
        "MicroSchemeCell.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "bytes",
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "MicroSchemeCell.is_executable": {
            "name": "is_executable",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MicroSchemeCell.execute": {
            "name": "execute",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "graphbook-master/graphbook/graph/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "float"
                ]
            }
        },
        "Node.add": {
            "name": "add",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "float",
                    "int"
                ]
            }
        },
        "Node.remove": {
            "name": "remove",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "None"
                ]
            }
        },
        "Node.insert": {
            "name": "insert",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cell": [
                    "int",
                    "str"
                ],
                "index": [
                    "int",
                    "str"
                ]
            }
        },
        "Node.to_obj": {
            "name": "to_obj",
            "location": 45,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.link": {
            "name": "link",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "typing.Sequence[object]"
                ]
            }
        },
        "Node.from_obj": {
            "name": "from_obj",
            "location": 60,
            "return": [],
            "arguments": {
                "cls": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "obj": []
            }
        },
        "Node.tag": {
            "name": "tag",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "None",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "Node.untag": {
            "name": "untag",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "Node.render": {
            "name": "render",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__getitem__": {
            "name": "__getitem__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "typing.Iterator"
                ]
            }
        },
        "Node.__setitem__": {
            "name": "__setitem__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "str"
                ],
                "c": [
                    "int",
                    "str"
                ]
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "typing.Hashable"
                ]
            }
        }
    },
    "graphbook-master/graphbook/graph/notebook.py": {
        "NodeEntry.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "None",
                    "int"
                ],
                "title": [
                    "typing.Callable[, ]",
                    "bool",
                    "None",
                    "str"
                ],
                "tags": [
                    "str"
                ],
                "links": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "NodeEntry.__eq__": {
            "name": "__eq__",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str"
                ]
            }
        },
        "NodeEntry.__lt__": {
            "name": "__lt__",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "typing.Type"
                ]
            }
        },
        "NodeEntry.to_obj": {
            "name": "to_obj",
            "location": 55,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeEntry.from_obj": {
            "name": "from_obj",
            "location": 65,
            "return": [
                "NodeEntry"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict[str, typing.Any]"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "Notebook.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "typing.Text"
                ]
            }
        },
        "Notebook._is_maybe_node": {
            "name": "_is_maybe_node",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Notebook.scan": {
            "name": "scan",
            "location": 106,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notebook.noder": {
            "name": "noder",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "node_id": [
                    "str"
                ]
            }
        },
        "Notebook._noder": {
            "name": "_noder",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_path": [
                    "str"
                ]
            }
        },
        "Notebook.nodew": {
            "name": "nodew",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_node": []
            }
        },
        "Notebook._update_node": {
            "name": "_update_node",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "list[str]"
                ]
            }
        },
        "Notebook.select": {
            "name": "select",
            "location": 158,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "typing.Text"
                ],
                "cased": [
                    "bool"
                ],
                "and_tags": [
                    "list[str]",
                    "set[typing.Union[str,str,str,str,str,str,str,str]]",
                    "str"
                ]
            }
        }
    },
    "graphbook-master/graphbook/graph/serial.py": {
        "to_yaml": {
            "name": "to_yaml",
            "location": 10,
            "return": [],
            "arguments": {
                "obj": [
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "from_yaml": {
            "name": "from_yaml",
            "location": 15,
            "return": [],
            "arguments": {
                "data": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "graphbook-master/graphbook/graph/__init__.py": {},
    "graphbook-master/graphbook/ui/curses.py": {
        "render_cell": {
            "name": "render_cell",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [],
                "scr": [
                    "str",
                    "tuple[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "stdscr": [],
                "args": []
            }
        },
        "KeyMap.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyMap.register": {
            "name": "register",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "list[str]",
                    "None",
                    "typing.MutableMapping"
                ],
                "func": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "typing.Type",
                    "tuple[typing.Union[typing.Type,...]]"
                ]
            }
        },
        "KeyMap.press": {
            "name": "press",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int"
                ],
                "scr": [
                    "str",
                    "bool"
                ]
            }
        },
        "main.fine_python": {
            "name": "fine_python",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "scr": []
            }
        }
    },
    "graphbook-master/graphbook/ui/server.py": {
        "to_json": {
            "name": "to_json",
            "location": 11,
            "return": [
                "Response"
            ],
            "arguments": {
                "v": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "node_route": {
            "name": "node_route",
            "location": 31,
            "return": [],
            "arguments": {
                "node_id": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "graphbook-master/graphbook/ui/tk.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "master": [
                    "None",
                    "bool",
                    "dict[str, typing.Any]",
                    "typing.Callable[A, bool]"
                ]
            }
        }
    },
    "graphbook-master/graphbook/ui/urwid.py": {
        "build_node_display": {
            "name": "build_node_display",
            "location": 16,
            "return": [],
            "arguments": {
                "node_id": [
                    "int",
                    "str"
                ]
            }
        },
        "jump_nodes": {
            "name": "jump_nodes",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "button": [
                    "str",
                    "int",
                    "float",
                    "typing.Sequence[]"
                ],
                "nodeinfo": [
                    "str",
                    "int",
                    "float",
                    "typing.Sequence[]"
                ]
            }
        },
        "display_node": {
            "name": "display_node",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "button": [
                    "list[str]",
                    "bool",
                    "str"
                ],
                "node": [
                    "dict[, ]"
                ]
            }
        },
        "menu": {
            "name": "menu",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "exit_program": {
            "name": "exit_program",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "button": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "keypress_exit": {
            "name": "keypress_exit",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "setup_notebook": {
            "name": "setup_notebook",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "display": {
            "name": "display",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "graphbook-master/graphbook/ui/__init__.py": {},
    "graphbook-master/graphbook/vm/uscheme.py": {
        "tokenise": {
            "name": "tokenise",
            "location": 31,
            "return": [],
            "arguments": {
                "expr": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "atom": {
            "name": "atom",
            "location": 35,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "token": []
            }
        },
        "expression_from_tokens": {
            "name": "expression_from_tokens",
            "location": 45,
            "return": [
                "list[]"
            ],
            "arguments": {
                "tokens": [
                    "list[str]"
                ]
            }
        },
        "standard_env": {
            "name": "standard_env",
            "location": 62,
            "return": [
                "dict[typing.Text, typing.Callable[, ]]"
            ],
            "arguments": {}
        },
        "eval": {
            "name": "eval",
            "location": 116,
            "return": [
                "Procedure"
            ],
            "arguments": {
                "exp": [],
                "env": []
            }
        },
        "standalone": {
            "name": "standalone",
            "location": 196,
            "return": [
                "list[]",
                "dict[str, dict[str, bool]]",
                "None"
            ],
            "arguments": {
                "paths": [
                    "str"
                ]
            }
        },
        "Procedure.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "list[dict[, ]]",
                    "int"
                ],
                "body": [
                    "str",
                    "list[dict[, ]]",
                    "int"
                ],
                "env": [
                    "str",
                    "list[dict[, ]]",
                    "int"
                ]
            }
        },
        "Procedure.__call__": {
            "name": "__call__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ]
            }
        },
        "Interpreter.reset": {
            "name": "reset",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Interpreter.eval": {
            "name": "eval",
            "location": 179,
            "return": [
                "typing.Text",
                "dict[, ]",
                "str",
                "None",
                "tuple[typing.Union[int,None,int,None]]"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Interpreter.load_file": {
            "name": "load_file",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "graphbook-master/graphbook/vm/__init__.py": {},
    "graphbook-master/tests/context.py": {},
    "graphbook-master/tests/test_cell.py": {
        "test_cell": {
            "name": "test_cell",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cell_yaml": {
            "name": "test_cell_yaml",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_cell": {
            "name": "test_load_cell",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "graphbook-master/tests/test_node.py": {
        "test_node": {
            "name": "test_node",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_node_yaml": {
            "name": "test_node_yaml",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove": {
            "name": "test_remove",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_insert": {
            "name": "test_insert",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_render": {
            "name": "test_render",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_link": {
            "name": "test_link",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "graphbook-master/tests/test_notebook.py": {
        "test_demobook": {
            "name": "test_demobook",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_maybe_path": {
            "name": "test_is_maybe_path",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_newnotebook": {
            "name": "test_newnotebook",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nodeentry": {
            "name": "test_nodeentry",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "graphbook-master/tests/test_vm_uscheme.py": {
        "test_uscheme_cell": {
            "name": "test_uscheme_cell",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uscheme_load_file": {
            "name": "test_uscheme_load_file",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
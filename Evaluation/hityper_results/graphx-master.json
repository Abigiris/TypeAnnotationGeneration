{
    "graphx-master/packages/graphx/client.py": {
        "make_edge": {
            "name": "make_edge",
            "location": 10,
            "return": [
                "Edge"
            ],
            "arguments": {
                "edge": [
                    "str"
                ]
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edges": []
            }
        },
        "Graph.vertices": {
            "name": "vertices",
            "location": 20,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.get_node_pairs": {
            "name": "get_node_pairs",
            "location": 27,
            "return": [
                "list[list[typing.Union[int,tuple[typing.Union[int,int]]]]]"
            ],
            "arguments": {
                "self": [],
                "n1": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "n2": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Graph.remove_edge": {
            "name": "remove_edge",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [
                    "int",
                    "list[]"
                ],
                "n2": [
                    "int",
                    "list[]"
                ]
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "n1": [
                    "int"
                ],
                "n2": [
                    "int"
                ],
                "cost": [
                    "int"
                ]
            }
        },
        "Graph.neighbours": {
            "name": "neighbours",
            "location": 46,
            "return": [
                "dict[, set[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.dijkstra": {
            "name": "dijkstra",
            "location": 53,
            "return": [
                "str",
                "list[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "None"
                ],
                "dest": [
                    "str"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/graph2.py": {
        "make_edge": {
            "name": "make_edge",
            "location": 9,
            "return": [
                "Edge"
            ],
            "arguments": {
                "start": [
                    "str",
                    "set[]",
                    "int"
                ],
                "end": [
                    "str",
                    "set[]",
                    "int"
                ],
                "cost": [
                    "int"
                ]
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edges": [
                    "list[tuple[typing.Union[int,float,float]]]",
                    "list[int]"
                ]
            }
        },
        "Graph.vertices": {
            "name": "vertices",
            "location": 23,
            "return": [
                "set[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.get_node_pairs": {
            "name": "get_node_pairs",
            "location": 30,
            "return": [
                "list[list[typing.Union[int,tuple[typing.Union[int,int]]]]]"
            ],
            "arguments": {
                "self": [],
                "n1": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "n2": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Graph.remove_edge": {
            "name": "remove_edge",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n1": [
                    "int",
                    "list[]"
                ],
                "n2": [
                    "int",
                    "list[]"
                ]
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "n1": [
                    "int"
                ],
                "n2": [
                    "int"
                ],
                "cost": [
                    "int"
                ]
            }
        },
        "Graph.neighbours": {
            "name": "neighbours",
            "location": 49,
            "return": [
                "dict[, set[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.dijkstra": {
            "name": "dijkstra",
            "location": 56,
            "return": [
                "str",
                "list[str]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "None"
                ],
                "dest": [
                    "str"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/setup.py": {
        "execfile": {
            "name": "execfile",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str"
                ],
                "globs": [
                    "str",
                    "typing.TextIO"
                ],
                "locs": [
                    "None",
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "get_variable_from_file": {
            "name": "get_variable_from_file",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "variable": []
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/_version.py": {},
    "graphx-master/packages/graphx/src/graphx/__init__.py": {},
    "graphx-master/packages/graphx/src/graphx/configurations/__init__.py": {},
    "graphx-master/packages/graphx/src/graphx/configurations/app/main.py": {},
    "graphx-master/packages/graphx/src/graphx/configurations/app/middlewares.py": {
        "HTTPValidationError.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "status": [],
                "errors": []
            }
        },
        "HTTPValidationError.to_dict": {
            "name": "to_dict",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequestLoader.process_resource": {
            "name": "process_resource",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RequestLoader.process_resource_inner": {
            "name": "process_resource_inner",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": [],
                "resource": [],
                "params": []
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/configurations/app/settings.py": {},
    "graphx-master/packages/graphx/src/graphx/configurations/app/__init__.py": {},
    "graphx-master/packages/graphx/src/graphx/configurations/infrastructure/db/definitions.py": {
        "GraphConfigurator.provide_graph": {
            "name": "provide_graph",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/configurations/infrastructure/db/__init__.py": {
        "DataBaseService.boot": {
            "name": "boot",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/configurations/infrastructure/environment/__init__.py": {
        "EnvironmentService.boot": {
            "name": "boot",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "Exception",
                    "typing.Mapping",
                    "dict[, ]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/configurations/infrastructure/logging/__init__.py": {
        "LoggingService.boot": {
            "name": "boot",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/configurations/infrastructure/rest/__init__.py": {},
    "graphx-master/packages/graphx/src/graphx/configurations/infrastructure/rest/swagger/registry.py": {
        "SwaggerService.boot": {
            "name": "boot",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "dict[, ]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/configurations/infrastructure/rest/swagger/__init__.py": {
        "SwaggerResource.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwaggerResource.on_get": {
            "name": "on_get",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "bool",
                    "str"
                ],
                "resp": [
                    "typing.Type",
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/entities.py": {},
    "graphx-master/packages/graphx/src/graphx/core/exceptions.py": {},
    "graphx-master/packages/graphx/src/graphx/core/__init__.py": {},
    "graphx-master/packages/graphx/src/graphx/core/data_providers/data_provider.py": {
        "DataProvider.save": {
            "name": "save",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "list[dict[str, typing.Any]]",
                    "bool"
                ]
            }
        },
        "DataProvider.find_all_nodes": {
            "name": "find_all_nodes",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.add_edge": {
            "name": "add_edge",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edge": [
                    "str",
                    "bytes",
                    "list[str]"
                ]
            }
        },
        "DataProvider.find_by_id": {
            "name": "find_by_id",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "set[str]",
                    "int"
                ]
            }
        },
        "DataProvider.find_shortest_path": {
            "name": "find_shortest_path",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bool",
                    "None",
                    "str"
                ],
                "destination": [
                    "bool",
                    "None",
                    "str"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/data_providers/memory.py": {
        "MemoryNodeRepository.save": {
            "name": "save",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "MemoryNodeRepository.add_edge": {
            "name": "add_edge",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edge": [
                    "float",
                    "int"
                ]
            }
        },
        "MemoryNodeRepository.edge_exists": {
            "name": "edge_exists",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "edge": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MemoryNodeRepository.find_all_nodes": {
            "name": "find_all_nodes",
            "location": 28,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryNodeRepository.find_by_id": {
            "name": "find_by_id",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "set[str]",
                    "int"
                ]
            }
        },
        "MemoryNodeRepository.find_all_edges": {
            "name": "find_all_edges",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemoryNodeRepository.find_shortest_path": {
            "name": "find_shortest_path",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bool",
                    "None",
                    "str"
                ],
                "destination": [
                    "bool",
                    "None",
                    "str"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/data_providers/neo.py": {
        "NeoNodeRepository.save": {
            "name": "save",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NeoNodeRepository.add_edge": {
            "name": "add_edge",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int",
                    "str"
                ],
                "destination": [
                    "int",
                    "str"
                ],
                "cost": [
                    "int",
                    "str"
                ]
            }
        },
        "NeoNodeRepository.find_by_id": {
            "name": "find_by_id",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "set[str]",
                    "int"
                ]
            }
        },
        "NeoNodeRepository.find_shortest_path": {
            "name": "find_shortest_path",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bool",
                    "None",
                    "str"
                ],
                "destination": [
                    "bool",
                    "None",
                    "str"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/data_providers/__init__.py": {},
    "graphx-master/packages/graphx/src/graphx/core/rest/assemblers.py": {
        "NodeAssembler.assemble_collection": {
            "name": "assemble_collection",
            "location": 10,
            "return": [
                "list[]"
            ],
            "arguments": {
                "nodes": []
            }
        },
        "EdgeAssembler.assemble_collection": {
            "name": "assemble_collection",
            "location": 16,
            "return": [
                "list[]"
            ],
            "arguments": {
                "edges": [
                    "list[graphx.core.entities.Edge]"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/rest/definitions.py": {
        "NodeConfigurator.node_collection": {
            "name": "node_collection",
            "location": 14,
            "return": [
                "NodeCollection"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfigurator.edge_collection": {
            "name": "edge_collection",
            "location": 19,
            "return": [
                "EdgeCollection"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfigurator.repository": {
            "name": "repository",
            "location": 24,
            "return": [
                "MemoryNodeRepository"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/rest/registry.py": {
        "NodeService.boot": {
            "name": "boot",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "list[purplship.core.models.Message]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/rest/resources.py": {
        "NodeCollection.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "add_node": [],
                "find_all_nodes": []
            }
        },
        "NodeCollection.on_post": {
            "name": "on_post",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "NodeCollection.on_get": {
            "name": "on_get",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "EdgeCollection.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "add_edge": [],
                "find_all_edges": []
            }
        },
        "EdgeCollection.on_post": {
            "name": "on_post",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "EdgeCollection.on_get": {
            "name": "on_get",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/rest/schemas.py": {
        "Node.from_domain_object": {
            "name": "from_domain_object",
            "location": 12,
            "return": [
                "set[]",
                "dict[str, set[str]]",
                "list[None]",
                "list[]"
            ],
            "arguments": {
                "cls": [
                    "typing.IO"
                ],
                "node": []
            }
        },
        "Edge.from_domain_object": {
            "name": "from_domain_object",
            "location": 26,
            "return": [
                "tuple[typing.Union[str,str,str,str]]",
                "typing.Pattern",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "float"
                ],
                "edge": [
                    "str",
                    "dict[str, str]"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/rest/__init__.py": {},
    "graphx-master/packages/graphx/src/graphx/core/use_cases/add_edge.py": {
        "AddEdge.execute": {
            "name": "execute",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "edge": [
                    "int"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/use_cases/add_node.py": {
        "AddNode.execute": {
            "name": "execute",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "typing.Mapping",
                    "None",
                    "int"
                ]
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/use_cases/find_all_edges.py": {
        "FindAllEdges.execute": {
            "name": "execute",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/use_cases/find_all_nodes.py": {
        "FindAllNodes.execute": {
            "name": "execute",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "graphx-master/packages/graphx/src/graphx/core/use_cases/__init__.py": {},
    "graphx-master/packages/graphx/tests/__init__.py": {},
    "graphx-master/packages/injector_provider/setup.py": {
        "execfile": {
            "name": "execfile",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str"
                ],
                "globs": [
                    "str",
                    "typing.TextIO"
                ],
                "locs": [
                    "None",
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "get_variable_from_file": {
            "name": "get_variable_from_file",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "variable": []
            }
        }
    },
    "graphx-master/packages/injector_provider/src/injector_provider/providers.py": {
        "InjectorProvider.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectorProvider.get_injector": {
            "name": "get_injector",
            "location": 11,
            "return": [
                "Injector",
                "str",
                "dict[, ]",
                "int",
                "typing.Final"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectorProvider.add_configurator": {
            "name": "add_configurator",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configurator": [
                    "float",
                    "int"
                ]
            }
        },
        "InjectorProvider.taint": {
            "name": "taint",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InjectorProvider.clean": {
            "name": "clean",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "graphx-master/packages/injector_provider/src/injector_provider/_version.py": {},
    "graphx-master/packages/injector_provider/src/injector_provider/__init__.py": {},
    "graphx-master/packages/injector_provider/tests/test_injector_provider.py": {
        "TestObjectGraphBuilder.test_can_build_without_any_configurations": {
            "name": "test_can_build_without_any_configurations",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectGraphBuilder.test_add_class": {
            "name": "test_add_class",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocked_injector_init": []
            }
        }
    },
    "graphx-master/packages/injector_provider/tests/__init__.py": {},
    "graphx-master/packages/monomanage/setup.py": {
        "execfile": {
            "name": "execfile",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str"
                ],
                "globs": [
                    "str",
                    "typing.TextIO"
                ],
                "locs": [
                    "None",
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "get_variable_from_file": {
            "name": "get_variable_from_file",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "variable": []
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/_install_requires.py": {},
    "graphx-master/packages/monomanage/src/monomanage/_version.py": {},
    "graphx-master/packages/monomanage/src/monomanage/__init__.py": {},
    "graphx-master/packages/monomanage/src/monomanage/app/api.py": {
        "package_wheels": {
            "name": "package_wheels",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "pymedphys_dir": [
                    "str"
                ]
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/app/wheels.py": {
        "build_wheels_with_yarn": {
            "name": "build_wheels_with_yarn",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "copy_wheels": {
            "name": "copy_wheels",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "packages_dir": [
                    "str"
                ],
                "new_dir": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/app/__init__.py": {},
    "graphx-master/packages/monomanage/src/monomanage/clean/core.py": {},
    "graphx-master/packages/monomanage/src/monomanage/clean/__init__.py": {},
    "graphx-master/packages/monomanage/src/monomanage/docs/api.py": {
        "pre_docs_build": {
            "name": "pre_docs_build",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "pymedphys_dir": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/docs/graphs.py": {
        "write_graphs_rst": {
            "name": "write_graphs_rst",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "save_directory": [
                    "str"
                ]
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/docs/__init__.py": {},
    "graphx-master/packages/monomanage/src/monomanage/draw/api.py": {
        "draw_all": {
            "name": "draw_all",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "save_directory": [
                    "int"
                ]
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/draw/directories.py": {
        "draw_directory_modules": {
            "name": "draw_directory_modules",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "save_directory": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "build_graph_for_a_module": {
            "name": "build_graph_for_a_module",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "graphed_package": [
                    "str",
                    "list[]",
                    "None",
                    "typing.IO",
                    "set[str]"
                ],
                "package_tree": [
                    "bool",
                    "list[str]",
                    "dict[, ]"
                ],
                "dependencies": [
                    "list[dict[str, str]]",
                    "int",
                    "None",
                    "str"
                ],
                "dependents": [
                    "list[dict[str, str]]",
                    "int",
                    "None",
                    "str"
                ],
                "save_directory": [
                    "bool",
                    "list[str]",
                    "dict[, ]"
                ]
            }
        },
        "build_graph_for_a_module.simplify": {
            "name": "simplify",
            "location": 135,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/draw/files.py": {
        "draw_file_modules": {
            "name": "draw_file_modules",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "save_directory": [
                    "str",
                    "bool",
                    "set[str]"
                ]
            }
        },
        "get_github_url": {
            "name": "get_github_url",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "module": [
                    "str"
                ]
            }
        },
        "draw_file_modules.simplify": {
            "name": "simplify",
            "location": 183,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/draw/packages.py": {
        "draw_packages": {
            "name": "draw_packages",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "save_directory": [
                    "str"
                ]
            }
        },
        "get_levels": {
            "name": "get_levels",
            "location": 62,
            "return": [
                "dict[, list[]]"
            ],
            "arguments": {
                "dag": [
                    "str",
                    "list[int]",
                    "list[str]"
                ],
                "internal_packages": [
                    "str",
                    "bytes"
                ]
            }
        },
        "remove_prefix": {
            "name": "remove_prefix",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "prefix": []
            }
        },
        "build_dot_contents": {
            "name": "build_dot_contents",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "dag": [],
                "levels": [
                    "dict[str, str]"
                ]
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/draw/utilities.py": {
        "save_dot_file": {
            "name": "save_dot_file",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "dot_contents": [
                    "bytes",
                    "str",
                    "int"
                ],
                "outfilepath": [
                    "str",
                    "bool"
                ]
            }
        },
        "remove_prefix": {
            "name": "remove_prefix",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "prefix": []
            }
        },
        "get_levels": {
            "name": "get_levels",
            "location": 74,
            "return": [
                "dict[, list[]]"
            ],
            "arguments": {
                "dependency_map": [
                    "float",
                    "typing.Sequence[int]",
                    "list[str]"
                ]
            }
        },
        "dag_from_hashmap_of_lists": {
            "name": "dag_from_hashmap_of_lists",
            "location": 101,
            "return": [],
            "arguments": {
                "dictionary": []
            }
        },
        "remove_postfix": {
            "name": "remove_postfix",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "postfix": []
            }
        },
        "convert_path_to_package": {
            "name": "convert_path_to_package",
            "location": 126,
            "return": [],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "create_href": {
            "name": "create_href",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "create_link": {
            "name": "create_link",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int",
                    "typing.Mapping"
                ]
            }
        },
        "create_labels": {
            "name": "create_labels",
            "location": 138,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "label_map": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, int]"
                ]
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/draw/__init__.py": {},
    "graphx-master/packages/monomanage/src/monomanage/parse/imports.py": {
        "get_imports": {
            "name": "get_imports",
            "location": 53,
            "return": [
                "dict[typing.Text, set[str]]"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "relative_filepath": [
                    "str",
                    "int"
                ],
                "internal_packages": [
                    "float",
                    "str"
                ],
                "depth": [
                    "int",
                    "str",
                    "float",
                    "list[str]"
                ]
            }
        },
        "get_imports.get_base_converted_module": {
            "name": "get_base_converted_module",
            "location": 67,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "get_imports.add_level_0": {
            "name": "add_level_0",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "name": []
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/parse/__init__.py": {},
    "graphx-master/packages/monomanage/src/monomanage/propagate/dependencies.py": {
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/propagate/versions.py": {
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/propagate/__init__.py": {},
    "graphx-master/packages/monomanage/src/monomanage/tree/build.py": {
        "build_tree": {
            "name": "build_tree",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "bytes",
                    "typing.Iterable[typing.Any]",
                    "int"
                ]
            }
        },
        "test_tree": {
            "name": "test_tree",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "typing.BinaryIO"
                ]
            }
        },
        "assert_tree_unchanged": {
            "name": "assert_tree_unchanged",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "tree": [
                    "list[str]",
                    "typing.Type",
                    "typing.MutableMapping",
                    "list[]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "PackageTree.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "bool",
                    "dict[int, bool]",
                    "typing.TextIO"
                ],
                "exclude_dirs": [
                    "None",
                    "list[typing.Union[str,\"SqlFile\"]]",
                    "tuple[typing.Union[str,str]]",
                    "bool",
                    "str"
                ],
                "exclude_files": [
                    "None",
                    "str",
                    "list[]",
                    "typing.MutableMapping"
                ]
            }
        },
        "PackageTree.trim_path": {
            "name": "trim_path",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PackageTree.expand_path": {
            "name": "expand_path",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "PackageTree.build_directory_digraph": {
            "name": "build_directory_digraph",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageTree.calc_properties": {
            "name": "calc_properties",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageTree.directory": {
            "name": "directory",
            "location": 125,
            "return": [
                "int",
                "str",
                "set[str]",
                "dict[str, list[str]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PackageTree.descendants_dependencies": {
            "name": "descendants_dependencies",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "filepath": [
                    "typing.Callable[, ]",
                    "float",
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "PackageTree.package_dependencies_dict": {
            "name": "package_dependencies_dict",
            "location": 147,
            "return": [
                "dict[, dict[, list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PackageTree.package_dependencies_digraph": {
            "name": "package_dependencies_digraph",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PackageTree.is_acyclic": {
            "name": "is_acyclic",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/tree/check.py": {
        "serialise_imports": {
            "name": "serialise_imports",
            "location": 36,
            "return": [],
            "arguments": {
                "imports": [
                    "dict[str, object]",
                    "dict[str, dict[str, int]]",
                    "dict[str, str]"
                ]
            }
        },
        "is_imports_json_up_to_date": {
            "name": "is_imports_json_up_to_date",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "None"
                ]
            }
        },
        "commit_hook": {
            "name": "commit_hook",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "int"
                ]
            }
        },
        "update_imports_json": {
            "name": "update_imports_json",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "bytes",
                    "None",
                    "typing.Iterable[str]"
                ]
            }
        }
    },
    "graphx-master/packages/monomanage/src/monomanage/tree/__init__.py": {},
    "graphx-master/packages/registry/setup.py": {
        "execfile": {
            "name": "execfile",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "fname": [
                    "str"
                ],
                "globs": [
                    "str",
                    "typing.TextIO"
                ],
                "locs": [
                    "None",
                    "str",
                    "typing.TextIO"
                ]
            }
        },
        "get_variable_from_file": {
            "name": "get_variable_from_file",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str"
                ],
                "variable": []
            }
        }
    },
    "graphx-master/packages/registry/src/registry/services.py": {
        "Container.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.set": {
            "name": "set",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prop": [
                    "bool"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "Container.get": {
            "name": "get",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Type",
                    "dict[str, str]",
                    "int",
                    "typing.Callable[KT, VT]",
                    "None",
                    "tuple[]"
                ]
            }
        },
        "BootableService.boot": {
            "name": "boot",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "str",
                    "typing.Container"
                ]
            }
        },
        "Registry.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.register": {
            "name": "register",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "int",
                    "str"
                ]
            }
        },
        "Registry.boot": {
            "name": "boot",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "container": [
                    "typing.Sized"
                ]
            }
        }
    },
    "graphx-master/packages/registry/src/registry/_version.py": {},
    "graphx-master/packages/registry/src/registry/__init__.py": {}
}
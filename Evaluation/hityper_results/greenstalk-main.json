{
    "greenstalk-main/tests.py": {
        "with_beanstalkd": {
            "name": "with_beanstalkd",
            "location": 42,
            "return": [],
            "arguments": {
                "address": [
                    "tuple[typing.Union[typing.Text,int]]"
                ],
                "use": [],
                "watch": []
            }
        },
        "assert_seconds": {
            "name": "assert_seconds",
            "location": 69,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "n": []
            }
        },
        "test_basic_usage": {
            "name": "test_basic_usage",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_put_priority": {
            "name": "test_put_priority",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_delays": {
            "name": "test_delays",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_ttr": {
            "name": "test_ttr",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_reserve_raises_on_timeout": {
            "name": "test_reserve_raises_on_timeout",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_reserve_job": {
            "name": "test_reserve_job",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_initialize_with_tubes": {
            "name": "test_initialize_with_tubes",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_initialize_watch_multiple": {
            "name": "test_initialize_watch_multiple",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_peek": {
            "name": "test_peek",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_peek_not_found": {
            "name": "test_peek_not_found",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_peek_ready": {
            "name": "test_peek_ready",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_peek_ready_not_found": {
            "name": "test_peek_ready_not_found",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_peek_delayed": {
            "name": "test_peek_delayed",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_peek_delayed_not_found": {
            "name": "test_peek_delayed_not_found",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_peek_buried": {
            "name": "test_peek_buried",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_peek_buried_not_found": {
            "name": "test_peek_buried_not_found",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_kick": {
            "name": "test_kick",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_kick_job": {
            "name": "test_kick_job",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_stats_job": {
            "name": "test_stats_job",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_stats_tube": {
            "name": "test_stats_tube",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_stats": {
            "name": "test_stats",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_tubes": {
            "name": "test_tubes",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_using": {
            "name": "test_using",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_watching": {
            "name": "test_watching",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_pause_tube": {
            "name": "test_pause_tube",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_max_job_size": {
            "name": "test_max_job_size",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_job_not_found": {
            "name": "test_job_not_found",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_delete_job_reserved_by_other": {
            "name": "test_delete_job_reserved_by_other",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_not_ignored": {
            "name": "test_not_ignored",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_drain_mode": {
            "name": "test_drain_mode",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_repr_inet": {
            "name": "test_client_repr_inet",
            "location": 429,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_client_repr_unix": {
            "name": "test_client_repr_unix",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "c": []
            }
        },
        "test_job_repr": {
            "name": "test_job_repr",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_buried_error_with_id": {
            "name": "test_buried_error_with_id",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_buried_error_without_id": {
            "name": "test_buried_error_without_id",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unknown_response_error": {
            "name": "test_unknown_response_error",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_chunk_unexpected_eof": {
            "name": "test_chunk_unexpected_eof",
            "location": 463,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_response_missing_crlf": {
            "name": "test_response_missing_crlf",
            "location": 469,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unexpected_eof": {
            "name": "test_unexpected_eof",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "with_beanstalkd.decorator": {
            "name": "decorator",
            "location": 47,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "with_beanstalkd.decorator.wrapper": {
            "name": "wrapper",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "greenstalk-main/docs/conf.py": {},
    "greenstalk-main/src/greenstalk/__init__.py": {
        "_to_id": {
            "name": "_to_id",
            "location": 399,
            "return": [
                "bool",
                "str",
                "None",
                "typing.Callable[..., None]",
                "typing.Sequence[str]"
            ],
            "arguments": {
                "j": [
                    "bool",
                    "str",
                    "None",
                    "typing.Callable[..., None]",
                    "typing.Sequence[str]"
                ]
            }
        },
        "_parse_response": {
            "name": "_parse_response",
            "location": 403,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[typing.Any,typing.Any]]"
                ],
                "expected": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "_parse_chunk": {
            "name": "_parse_chunk",
            "location": 448,
            "return": [],
            "arguments": {
                "data": [
                    "str"
                ],
                "size": [
                    "int",
                    "Exception",
                    "typing.Sequence[str]",
                    "typing.Match",
                    "float"
                ]
            }
        },
        "_parse_stats": {
            "name": "_parse_stats",
            "location": 458,
            "return": [
                "dict[str, int]"
            ],
            "arguments": {
                "buf": [
                    "bytes"
                ]
            }
        },
        "_parse_list": {
            "name": "_parse_list",
            "location": 476,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "buf": [
                    "bytes"
                ]
            }
        },
        "Job.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "typing.Sequence[typing.Sequence[int]]",
                    "None"
                ],
                "body": [
                    "str",
                    "list[bytes]",
                    "bytes"
                ]
            }
        },
        "Job.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownResponseError.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "bytes",
                    "list[bytes]"
                ],
                "values": [
                    "bool",
                    "bytes",
                    "list[bytes]"
                ]
            }
        },
        "BuriedWithJobIDError.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "dict[, ]",
                    "dict[str, int]",
                    "None"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str",
                    "list[str]"
                ],
                "use": [
                    "typing.Text"
                ],
                "watch": [
                    "typing.Text"
                ]
            }
        },
        "Client.__enter__": {
            "name": "__enter__",
            "location": 163,
            "return": [
                "Client"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.__exit__": {
            "name": "__exit__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.close": {
            "name": "close",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client._send_cmd": {
            "name": "_send_cmd",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": [],
                "expected": [
                    "bytes",
                    "str",
                    "list[str]",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "Client._read_chunk": {
            "name": "_read_chunk",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "Client._int_cmd": {
            "name": "_int_cmd",
            "location": 184,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "bytes",
                    "bytearray",
                    "list[dict[, ]]"
                ],
                "expected": [
                    "bytes",
                    "bytearray",
                    "list[dict[, ]]"
                ]
            }
        },
        "Client._job_cmd": {
            "name": "_job_cmd",
            "location": 188,
            "return": [
                "Job"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "bytes",
                    "str",
                    "int",
                    "typing.IO",
                    "typing.Match"
                ],
                "expected": [
                    "bytes",
                    "str",
                    "int",
                    "typing.IO",
                    "typing.Match"
                ]
            }
        },
        "Client._peek_cmd": {
            "name": "_peek_cmd",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Client._stats_cmd": {
            "name": "_stats_cmd",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Client._list_cmd": {
            "name": "_list_cmd",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "bool"
                ]
            }
        },
        "Client.put": {
            "name": "put",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "body": [],
                "priority": [
                    "int"
                ],
                "delay": [
                    "int"
                ],
                "ttr": [
                    "int"
                ]
            }
        },
        "Client.use": {
            "name": "use",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tube": [
                    "str"
                ]
            }
        },
        "Client.reserve": {
            "name": "reserve",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": [
                    "None",
                    "int",
                    "typing.Sequence[typing.Callable[, ]]",
                    "str"
                ]
            }
        },
        "Client.reserve_job": {
            "name": "reserve_job",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ]
            }
        },
        "Client.delete": {
            "name": "delete",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "None",
                    "list[str]",
                    "str"
                ]
            }
        },
        "Client.release": {
            "name": "release",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "bool",
                    "str",
                    "list[int]"
                ],
                "priority": [
                    "int"
                ],
                "delay": [
                    "int"
                ]
            }
        },
        "Client.bury": {
            "name": "bury",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "bool",
                    "str",
                    "list[int]"
                ],
                "priority": [
                    "int"
                ]
            }
        },
        "Client.touch": {
            "name": "touch",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "bool",
                    "str"
                ]
            }
        },
        "Client.watch": {
            "name": "watch",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "tube": [
                    "str"
                ]
            }
        },
        "Client.ignore": {
            "name": "ignore",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "tube": [
                    "str"
                ]
            }
        },
        "Client.peek": {
            "name": "peek",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ]
            }
        },
        "Client.peek_ready": {
            "name": "peek_ready",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.peek_delayed": {
            "name": "peek_delayed",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.peek_buried": {
            "name": "peek_buried",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.kick": {
            "name": "kick",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "bound": [
                    "int",
                    "float"
                ]
            }
        },
        "Client.kick_job": {
            "name": "kick_job",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "bool",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "Client.stats_job": {
            "name": "stats_job",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "job": [
                    "bool",
                    "str",
                    "float",
                    "None"
                ]
            }
        },
        "Client.stats_tube": {
            "name": "stats_tube",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "tube": [
                    "str"
                ]
            }
        },
        "Client.stats": {
            "name": "stats",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.tubes": {
            "name": "tubes",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.using": {
            "name": "using",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.watching": {
            "name": "watching",
            "location": 379,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.pause_tube": {
            "name": "pause_tube",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tube": [
                    "str"
                ],
                "delay": [
                    "str"
                ]
            }
        },
        "Client.__repr__": {
            "name": "__repr__",
            "location": 391,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "gridsync-master/setup.py": {},
    "gridsync-master/versioneer.py": {
        "get_root": {
            "name": "get_root",
            "location": 296,
            "return": [],
            "arguments": {}
        },
        "get_config_from_root": {
            "name": "get_config_from_root",
            "location": 335,
            "return": [],
            "arguments": {
                "root": []
            }
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 373,
            "return": [],
            "arguments": {
                "vcs": [],
                "method": []
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 384,
            "return": [],
            "arguments": {
                "commands": [],
                "args": [],
                "cwd": [],
                "verbose": [],
                "hide_stderr": [],
                "env": []
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 945,
            "return": [],
            "arguments": {
                "versionfile_abs": []
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 974,
            "return": [],
            "arguments": {
                "keywords": [],
                "tag_prefix": [],
                "verbose": []
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 1029,
            "return": [],
            "arguments": {
                "tag_prefix": [],
                "root": [],
                "verbose": [],
                "run_command": []
            }
        },
        "do_vcs_install": {
            "name": "do_vcs_install",
            "location": 1120,
            "return": [],
            "arguments": {
                "manifest_in": [],
                "versionfile_source": [],
                "ipy": []
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 1158,
            "return": [],
            "arguments": {
                "parentdir_prefix": [],
                "root": [],
                "verbose": []
            }
        },
        "versions_from_file": {
            "name": "versions_from_file",
            "location": 1201,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "write_to_version_file": {
            "name": "write_to_version_file",
            "location": 1218,
            "return": [],
            "arguments": {
                "filename": [],
                "versions": []
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 1229,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 1236,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 1261,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 1277,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 1304,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 1326,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 1346,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render": {
            "name": "render",
            "location": 1366,
            "return": [],
            "arguments": {
                "pieces": [],
                "style": []
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 1402,
            "return": [],
            "arguments": {
                "verbose": []
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 1478,
            "return": [],
            "arguments": {}
        },
        "get_cmdclass": {
            "name": "get_cmdclass",
            "location": 1483,
            "return": [],
            "arguments": {}
        },
        "do_setup": {
            "name": "do_setup",
            "location": 1697,
            "return": [],
            "arguments": {}
        },
        "scan_setup_py": {
            "name": "scan_setup_py",
            "location": 1779,
            "return": [],
            "arguments": {}
        },
        "get_config_from_root.get": {
            "name": "get",
            "location": 347,
            "return": [],
            "arguments": {
                "parser": [],
                "name": []
            }
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 375,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "get_cmdclass.cmd_version.initialize_options": {
            "name": "initialize_options",
            "location": 1510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.finalize_options": {
            "name": "finalize_options",
            "location": 1513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.run": {
            "name": "run",
            "location": 1516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_build_py.run": {
            "name": "run",
            "location": 1548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.run": {
            "name": "run",
            "location": 1629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.make_release_tree": {
            "name": "make_release_tree",
            "location": 1637,
            "return": [],
            "arguments": {
                "self": [],
                "base_dir": [],
                "files": []
            }
        },
        "get_cmdclass.cmd_build_exe.run": {
            "name": "run",
            "location": 1572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_py2exe.run": {
            "name": "run",
            "location": 1601,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/cli.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "TahoeVersion.__call__": {
            "name": "__call__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "None"
                ],
                "namespace": [
                    "str",
                    "None"
                ],
                "values": [
                    "str",
                    "None"
                ],
                "option_string": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "gridsync-master/gridsync/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "None"
                ]
            }
        },
        "Config.set": {
            "name": "set",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str",
                    "dict[, ]"
                ],
                "option": [
                    "str",
                    "int",
                    "bytes",
                    "typing.Pattern"
                ],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "typing.Pattern"
                ]
            }
        },
        "Config.get": {
            "name": "get",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str",
                    "tuple[typing.Union[str,...]]",
                    "dict[str, str]"
                ],
                "option": [
                    "str",
                    "tuple[typing.Union[str,...]]",
                    "dict[str, str]"
                ]
            }
        },
        "Config.save": {
            "name": "save",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings_dict": [
                    "dict[str, float]",
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "Config.load": {
            "name": "load",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/core.py": {
        "DequeHandler.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deque": [
                    "int",
                    "float"
                ]
            }
        },
        "DequeHandler.emit": {
            "name": "emit",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str"
                ]
            }
        },
        "LogFormatter.formatTime": {
            "name": "formatTime",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "None",
                    "bool",
                    "tuple[]"
                ],
                "datefmt": [
                    "None",
                    "str",
                    "bool",
                    "tuple[]"
                ]
            }
        },
        "Core.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Core.get_tahoe_version": {
            "name": "get_tahoe_version",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.get_magic_folder_version": {
            "name": "get_magic_folder_version",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core._start_gateway": {
            "name": "_start_gateway",
            "location": 129,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "gateway": []
            }
        },
        "Core._get_executable_versions": {
            "name": "_get_executable_versions",
            "location": 142,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.start_gateways": {
            "name": "start_gateways",
            "location": 159,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.show_message": {
            "name": "show_message",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Core.initialize_logger": {
            "name": "initialize_logger",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "to_stdout": [
                    "bool"
                ]
            }
        },
        "Core.stop_gateways": {
            "name": "stop_gateways",
            "location": 243,
            "return": [
                "typing.Generator[DeferredList]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.start": {
            "name": "start",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/crypto.py": {
        "randstr": {
            "name": "randstr",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "length": [
                    "int"
                ],
                "alphabet": [
                    "typing.Text"
                ]
            }
        },
        "trunchash": {
            "name": "trunchash",
            "location": 22,
            "return": [],
            "arguments": {
                "s": [
                    "str",
                    "bytes",
                    "int"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 30,
            "return": [],
            "arguments": {
                "message": [
                    "str"
                ],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 45,
            "return": [
                "int",
                "dict[, ]",
                "list[int]",
                "list[list[int]]",
                "str"
            ],
            "arguments": {
                "ciphertext": [
                    "str"
                ],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "Crypter.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict[str, str]",
                    "int",
                    "None",
                    "typing.Mapping",
                    "bytes",
                    "str",
                    "list[str]",
                    "dict[, ]"
                ],
                "password": [
                    "str",
                    "typing.Callable[[], None]",
                    "int",
                    "dict[str, typing.Any]",
                    "None",
                    "list[]"
                ]
            }
        },
        "Crypter.encrypt": {
            "name": "encrypt",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Crypter.decrypt": {
            "name": "decrypt",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/desktop.py": {
        "_txdbus_notify": {
            "name": "_txdbus_notify",
            "location": 22,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "title": [
                    "str",
                    "bool"
                ],
                "message": [
                    "str",
                    "bool"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "notify": {
            "name": "notify",
            "location": 46,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "systray": [],
                "title": [],
                "message": [],
                "duration": [
                    "int"
                ]
            }
        },
        "_desktop_open": {
            "name": "_desktop_open",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "open_enclosing_folder": {
            "name": "open_enclosing_folder",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "open_path": {
            "name": "open_path",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_clipboard_modes": {
            "name": "get_clipboard_modes",
            "location": 97,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "get_clipboard_text": {
            "name": "get_clipboard_text",
            "location": 107,
            "return": [],
            "arguments": {
                "mode": []
            }
        },
        "set_clipboard_text": {
            "name": "set_clipboard_text",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "mode": []
            }
        },
        "_autostart_enable_linux": {
            "name": "_autostart_enable_linux",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "executable": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "_autostart_enable_mac": {
            "name": "_autostart_enable_mac",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "executable": [
                    "str",
                    "typing.IO"
                ]
            }
        },
        "_autostart_enable_windows": {
            "name": "_autostart_enable_windows",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "executable": [
                    "str",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "autostart_enable": {
            "name": "autostart_enable",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "autostart_is_enabled": {
            "name": "autostart_is_enabled",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "autostart_disable": {
            "name": "autostart_disable",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_browser_name": {
            "name": "get_browser_name",
            "location": 209,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/gridsync/errors.py": {},
    "gridsync-master/gridsync/filter.py": {
        "get_filters": {
            "name": "get_filters",
            "location": 11,
            "return": [],
            "arguments": {
                "core": [
                    "str",
                    "dict[str, typing.Any]",
                    "tuple[str]"
                ]
            }
        },
        "apply_filters": {
            "name": "apply_filters",
            "location": 108,
            "return": [
                "str",
                "typing.BinaryIO",
                "typing.Callable[, ]"
            ],
            "arguments": {
                "in_str": [
                    "str",
                    "typing.BinaryIO",
                    "typing.Callable[, ]"
                ],
                "filters": [
                    "str"
                ]
            }
        },
        "get_mask": {
            "name": "get_mask",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "list[str]"
                ],
                "tag": [
                    "str"
                ],
                "identifier": [
                    "str"
                ]
            }
        },
        "apply_filter": {
            "name": "apply_filter",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "dict[, ]"
                ],
                "key": [
                    "dict[, ]",
                    "str",
                    "bool"
                ],
                "tag": [
                    "list[dict[, ]]",
                    "str",
                    "bytes",
                    "dict[, ]"
                ],
                "identifier": [
                    "None",
                    "list[dict[, ]]",
                    "str",
                    "bytes",
                    "dict[, ]"
                ]
            }
        },
        "_apply_filter_by_action_type": {
            "name": "_apply_filter_by_action_type",
            "location": 128,
            "return": [],
            "arguments": {
                "msg": [],
                "action_type": [
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "list[]",
                    "None"
                ],
                "identifier": [
                    "None",
                    "list[\"custom_index\"]"
                ]
            }
        },
        "_apply_filter_by_message_type": {
            "name": "_apply_filter_by_message_type",
            "location": 223,
            "return": [],
            "arguments": {
                "msg": [],
                "message_type": [
                    "list[dict[str, typing.Any]]",
                    "bool",
                    "list[]",
                    "None"
                ]
            }
        },
        "filter_tahoe_log_message": {
            "name": "filter_tahoe_log_message",
            "location": 287,
            "return": [],
            "arguments": {
                "message": [
                    "dict[, ]",
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "typing.OrderedDict",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "identifier": [
                    "bool"
                ]
            }
        },
        "filter_eliot_logs": {
            "name": "filter_eliot_logs",
            "location": 301,
            "return": [
                "list[]"
            ],
            "arguments": {
                "messages": [
                    "bytes",
                    "set[str]",
                    "dict[str, int]"
                ],
                "identifier": [
                    "None",
                    "bool",
                    "str"
                ]
            }
        },
        "join_eliot_logs": {
            "name": "join_eliot_logs",
            "location": 310,
            "return": [
                "str"
            ],
            "arguments": {
                "messages": [
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "gridsync-master/gridsync/invite.py": {
        "is_valid_code": {
            "name": "is_valid_code",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "str"
                ]
            }
        },
        "InviteReceiver.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "known_gateways": [
                    "None",
                    "float",
                    "int"
                ],
                "use_tor": [
                    "bool"
                ]
            }
        },
        "InviteReceiver.cancel": {
            "name": "cancel",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteReceiver._run_setup": {
            "name": "_run_setup",
            "location": 82,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "from_wormhole": [
                    "bytes",
                    "Exception",
                    "None"
                ]
            }
        },
        "InviteReceiver.receive": {
            "name": "receive",
            "location": 89,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "settings": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "InviteSender.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_tor": [
                    "bool"
                ]
            }
        },
        "InviteSender.cancel": {
            "name": "cancel",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteSender._get_folder_invite": {
            "name": "_get_folder_invite",
            "location": 135,
            "return": [
                "tuple[typing.Union[str,int,float,typing.Generator[]]]"
            ],
            "arguments": {
                "gateway": [
                    "str",
                    "bool",
                    "None"
                ],
                "folder": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "InviteSender._get_folder_invites": {
            "name": "_get_folder_invites",
            "location": 141,
            "return": [
                "dict[list[], dict[typing.Text, typing.Union[str,int,dict[typing.Any, str]]]]"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "list[]",
                    "int"
                ],
                "folders": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "InviteSender.send": {
            "name": "send",
            "location": 157,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "gateway": [],
                "folders": [
                    "None",
                    "bytes",
                    "float",
                    "typing.Mapping",
                    "list[dict[str, typing.Any]]",
                    "typing.Sequence[str]"
                ]
            }
        }
    },
    "gridsync-master/gridsync/lock.py": {
        "FilesystemLock.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "float"
                ]
            }
        },
        "FilesystemLock.acquire": {
            "name": "acquire",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilesystemLock.release": {
            "name": "release",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/magic_folder.py": {
        "MagicFolderMonitor.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "magic_folder": [
                    "list[str]"
                ]
            }
        },
        "MagicFolderMonitor._maybe_do_scan": {
            "name": "_maybe_do_scan",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_id": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "MagicFolderMonitor._schedule_magic_folder_scan": {
            "name": "_schedule_magic_folder_scan",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "MagicFolderMonitor._maybe_do_poll": {
            "name": "_maybe_do_poll",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_id": [
                    "str"
                ],
                "folder_name": [
                    "str",
                    "None"
                ]
            }
        },
        "MagicFolderMonitor._schedule_magic_folder_poll": {
            "name": "_schedule_magic_folder_poll",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "MagicFolderMonitor._check_errors": {
            "name": "_check_errors",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_state": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "previous_state": []
            }
        },
        "MagicFolderMonitor._parse_operations": {
            "name": "_parse_operations",
            "location": 180,
            "return": [
                "tuple[typing.Union[dict[str, int],str,typing.DefaultDict,dict[, ],typing.KeysView,tuple[typing.Union[typing.Any,typing.Literal]],dict[str, str]]]"
            ],
            "arguments": {
                "state": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "tuple[typing.Union[bool,typing.Any]]",
                    "dict[str, bool]"
                ]
            }
        },
        "MagicFolderMonitor._check_operations_started": {
            "name": "_check_operations_started",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_operations": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict[str, dict[str, typing.Any]]"
                ],
                "previous_operations": [],
                "started_signal": [
                    "int",
                    "None",
                    "str",
                    "dict[str, int]"
                ]
            }
        },
        "MagicFolderMonitor._check_operations_finished": {
            "name": "_check_operations_finished",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_operations": [
                    "str"
                ],
                "previous_operations": [
                    "dict[, ]",
                    "dict[tuple[typing.Union[int,...]], float]"
                ],
                "finished_signal": [
                    "typing.IO",
                    "typing.Callable[, ]",
                    "typing.Iterable[T]",
                    "str"
                ]
            }
        },
        "MagicFolderMonitor._parse_folder_statuses": {
            "name": "_parse_folder_statuses",
            "location": 217,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "tuple[typing.Union[bool,typing.Any]]",
                    "dict[str, bool]"
                ]
            }
        },
        "MagicFolderMonitor._check_folder_statuses": {
            "name": "_check_folder_statuses",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_statuses": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "MagicFolderMonitor._check_overall_status": {
            "name": "_check_overall_status",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_statuses": []
            }
        },
        "MagicFolderMonitor.compare_states": {
            "name": "compare_states",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_state": [
                    "str",
                    "dict[, ]"
                ],
                "previous_state": [
                    "dict[, ]",
                    "bytes"
                ]
            }
        },
        "MagicFolderMonitor.compare_folders": {
            "name": "compare_folders",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_folders": [],
                "previous_folders": []
            }
        },
        "MagicFolderMonitor.compare_backups": {
            "name": "compare_backups",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_backups": [
                    "str"
                ],
                "previous_backups": [
                    "str"
                ]
            }
        },
        "MagicFolderMonitor._parse_file_status": {
            "name": "_parse_file_status",
            "location": 336,
            "return": [
                "tuple[typing.Union[dict[, ],list[int],int]]"
            ],
            "arguments": {
                "file_status": [
                    "bytes",
                    "tuple[str]"
                ],
                "magic_path": [
                    "str",
                    "list[pathlib.Path]",
                    "bytes"
                ]
            }
        },
        "MagicFolderMonitor._compare_file_status": {
            "name": "_compare_file_status",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "dict[, ]"
                ],
                "magic_path": [
                    "str"
                ],
                "file_status": [
                    "str",
                    "dict[str, dict[str, typing.Any]]",
                    "dict[str, str]"
                ],
                "previous_file_status": [
                    "str",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "MagicFolderMonitor._check_total_folders_size": {
            "name": "_check_total_folders_size",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolderMonitor.compare_files": {
            "name": "compare_files",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_folders": [
                    "dict[str, str]"
                ],
                "previous_folders": [
                    "dict[str, typing.Any]",
                    "list[str]",
                    "int"
                ]
            }
        },
        "MagicFolderMonitor._check_last_polls": {
            "name": "_check_last_polls",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        },
        "MagicFolderMonitor.on_status_message_received": {
            "name": "on_status_message_received",
            "location": 417,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "MagicFolderMonitor._get_file_status": {
            "name": "_get_file_status",
            "location": 426,
            "return": [
                "tuple[typing.Union[str,typing.Generator[]]]"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ]
            }
        },
        "MagicFolderMonitor.do_check": {
            "name": "do_check",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolderMonitor.start": {
            "name": "start",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolderMonitor.stop": {
            "name": "stop",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder.__init__": {
            "name": "__init__",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "str",
                    "int",
                    "bytes"
                ],
                "executable": [
                    "typing.Text"
                ],
                "logs_maxlen": [
                    "int"
                ]
            }
        },
        "MagicFolder.on_stdout_line_received": {
            "name": "on_stdout_line_received",
            "location": 503,
            "return": [
                "None"
            ],
            "arguments": {
                "line": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "MagicFolder._is_eliot_log_message": {
            "name": "_is_eliot_log_message",
            "location": 507,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "MagicFolder.on_stderr_line_received": {
            "name": "on_stderr_line_received",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "MagicFolder.get_log_messages": {
            "name": "get_log_messages",
            "location": 526,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder._base_command_args": {
            "name": "_base_command_args",
            "location": 529,
            "return": [
                "list[typing.Union[int,dict[str, int],str,dict[tuple[typing.Union[int,int]], int],float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder._command": {
            "name": "_command",
            "location": 536,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "MagicFolder.version": {
            "name": "version",
            "location": 551,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder.stop": {
            "name": "stop",
            "location": 556,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder._read_api_token": {
            "name": "_read_api_token",
            "location": 560,
            "return": [
                "str",
                "typing.Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder._read_api_port": {
            "name": "_read_api_port",
            "location": 570,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder._on_started": {
            "name": "_on_started",
            "location": 590,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder.start": {
            "name": "start",
            "location": 596,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder.await_running": {
            "name": "await_running",
            "location": 628,
            "return": [
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder._request": {
            "name": "_request",
            "location": 633,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "path": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "body": [
                    "bytes"
                ],
                "error_404_ok": [
                    "bool"
                ]
            }
        },
        "MagicFolder.get_folders": {
            "name": "get_folders",
            "location": 659,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder.add_folder": {
            "name": "add_folder",
            "location": 667,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "author": [
                    "str",
                    "typing.Callable[str, str]",
                    "dict[str, pathlib.Path]",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "name": [
                    "typing.Text"
                ],
                "poll_interval": [
                    "int"
                ],
                "scan_interval": [
                    "int"
                ]
            }
        },
        "MagicFolder.leave_folder": {
            "name": "leave_folder",
            "location": 692,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ],
                "missing_ok": [
                    "bool"
                ]
            }
        },
        "MagicFolder.get_directory": {
            "name": "get_directory",
            "location": 706,
            "return": [],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "typing.Mapping",
                    "None"
                ]
            }
        },
        "MagicFolder.folder_is_local": {
            "name": "folder_is_local",
            "location": 709,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "int"
                ]
            }
        },
        "MagicFolder.folder_is_remote": {
            "name": "folder_is_remote",
            "location": 712,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "MagicFolder.folder_exists": {
            "name": "folder_exists",
            "location": 715,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "bool",
                    "None",
                    "float"
                ]
            }
        },
        "MagicFolder.get_snapshots": {
            "name": "get_snapshots",
            "location": 722,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder.add_snapshot": {
            "name": "add_snapshot",
            "location": 727,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "None"
                ],
                "filepath": [
                    "str",
                    "list[]"
                ]
            }
        },
        "MagicFolder.get_participants": {
            "name": "get_participants",
            "location": 742,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "MagicFolder.add_participant": {
            "name": "add_participant",
            "location": 751,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "list[str]"
                ],
                "author_name": [
                    "str",
                    "int"
                ],
                "personal_dmd": [
                    "str",
                    "int"
                ]
            }
        },
        "MagicFolder.get_file_status": {
            "name": "get_file_status",
            "location": 762,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ]
            }
        },
        "MagicFolder.get_object_sizes": {
            "name": "get_object_sizes",
            "location": 769,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ]
            }
        },
        "MagicFolder.get_all_object_sizes": {
            "name": "get_all_object_sizes",
            "location": 776,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder.scan": {
            "name": "scan",
            "location": 785,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "MagicFolder.poll": {
            "name": "poll",
            "location": 794,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "MagicFolder.create_folder_backup": {
            "name": "create_folder_backup",
            "location": 803,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "typing.Mapping",
                    "int"
                ]
            }
        },
        "MagicFolder.get_folder_backups": {
            "name": "get_folder_backups",
            "location": 816,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MagicFolder.remove_folder_backup": {
            "name": "remove_folder_backup",
            "location": 832,
            "return": [
                "typing.Generator[DeferredList]"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ]
            }
        },
        "MagicFolder.restore_folder_backup": {
            "name": "restore_folder_backup",
            "location": 849,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ],
                "local_path": [
                    "str"
                ]
            }
        }
    },
    "gridsync-master/gridsync/monitor.py": {
        "_parse_vouchers": {
            "name": "_parse_vouchers",
            "location": 86,
            "return": [
                "_VoucherParse"
            ],
            "arguments": {
                "vouchers": [
                    "list[list[float]]"
                ],
                "time_started": [
                    "dict[, ]",
                    "float",
                    "int",
                    "str",
                    "list[int]"
                ]
            }
        },
        "GridChecker.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "int",
                    "float"
                ]
            }
        },
        "GridChecker.do_check": {
            "name": "do_check",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZKAPChecker.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "int",
                    "float"
                ]
            }
        },
        "ZKAPChecker.consumption_rate": {
            "name": "consumption_rate",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZKAPChecker._maybe_emit_low_zkaps_warning": {
            "name": "_maybe_emit_low_zkaps_warning",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZKAPChecker._maybe_load_last_redeemed": {
            "name": "_maybe_load_last_redeemed",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZKAPChecker._update_unpaid_vouchers": {
            "name": "_update_unpaid_vouchers",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unpaid_vouchers": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "ZKAPChecker._update_redeeming_vouchers": {
            "name": "_update_redeeming_vouchers",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redeeming_vouchers": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "ZKAPChecker._update_zkaps_last_redeemed": {
            "name": "_update_zkaps_last_redeemed",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zkaps_last_redeemed": []
            }
        },
        "ZKAPChecker._maybe_load_last_total": {
            "name": "_maybe_load_last_total",
            "location": 229,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZKAPChecker.emit_zkaps_updated": {
            "name": "emit_zkaps_updated",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remaining": [],
                "total": [
                    "int"
                ]
            }
        },
        "ZKAPChecker.update_price": {
            "name": "update_price",
            "location": 268,
            "return": [
                "typing.Generator[]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZKAPChecker._update_zkaps": {
            "name": "_update_zkaps",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remaining": [
                    "float",
                    "str",
                    "int"
                ],
                "total": [
                    "int",
                    "str"
                ]
            }
        },
        "ZKAPChecker._update_renewal_cost": {
            "name": "_update_renewal_cost",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "int",
                    "list[]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "ZKAPChecker.do_check": {
            "name": "do_check",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "int",
                    "float"
                ]
            }
        },
        "Monitor.do_checks": {
            "name": "do_checks",
            "location": 437,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.start": {
            "name": "start",
            "location": 442,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interval": [
                    "int"
                ]
            }
        }
    },
    "gridsync-master/gridsync/msg.py": {
        "_msgbox": {
            "name": "_msgbox",
            "location": 10,
            "return": [
                "QMessageBox"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "typing.Callable[, ]",
                    "bytes",
                    "int"
                ],
                "title": [
                    "str",
                    "None"
                ],
                "text": [
                    "str",
                    "typing.Type",
                    "list[str]",
                    "int"
                ],
                "detailed_text": [
                    "typing.Text"
                ]
            }
        },
        "info": {
            "name": "info",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "bool",
                    "tuple[typing.Type]",
                    "dict[, ]",
                    "str",
                    "None",
                    "set[str]",
                    "list[str]"
                ],
                "title": [
                    "str",
                    "dict[str, str]"
                ],
                "text": [
                    "str",
                    "dict[str, str]"
                ],
                "detailed_text": [
                    "typing.Text"
                ]
            }
        },
        "question": {
            "name": "question",
            "location": 37,
            "return": [
                "None",
                "bool"
            ],
            "arguments": {
                "parent": [
                    "None",
                    "int",
                    "typing.Iterable[str]",
                    "str"
                ],
                "title": [
                    "None",
                    "int",
                    "typing.Iterable[str]",
                    "str"
                ],
                "text": [
                    "None",
                    "int",
                    "typing.Iterable[str]",
                    "str"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "title": [
                    "str",
                    "dict[, ]",
                    "set[str]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "text": [
                    "str",
                    "dict[, ]",
                    "set[str]",
                    "None",
                    "typing.Sequence[str]"
                ],
                "detailed_text": [
                    "typing.Text"
                ]
            }
        },
        "critical": {
            "name": "critical",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [
                    "str",
                    "int",
                    "bytes"
                ],
                "text": [
                    "str",
                    "int",
                    "bytes"
                ],
                "detailed_text": [
                    "typing.Text"
                ]
            }
        }
    },
    "gridsync-master/gridsync/network.py": {
        "get_local_network_ip": {
            "name": "get_local_network_ip",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "get_free_port": {
            "name": "get_free_port",
            "location": 17,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "port": [
                    "int"
                ],
                "range_min": [
                    "int"
                ],
                "range_max": [
                    "int"
                ]
            }
        }
    },
    "gridsync-master/gridsync/news.py": {
        "NewscapChecker.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "NewscapChecker._download_messages": {
            "name": "_download_messages",
            "location": 44,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "downloads": [
                    "str",
                    "list[int]",
                    "list[str]"
                ]
            }
        },
        "NewscapChecker._check_v1": {
            "name": "_check_v1",
            "location": 57,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewscapChecker._do_check": {
            "name": "_do_check",
            "location": 89,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewscapChecker._schedule_delayed_check": {
            "name": "_schedule_delayed_check",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "None",
                    "float",
                    "int",
                    "typing.Iterable[typing.Iterable[float]]",
                    "typing.Iterable[float]"
                ]
            }
        },
        "NewscapChecker.start": {
            "name": "start",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/preferences.py": {
        "set_preference": {
            "name": "set_preference",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "section": [
                    "str",
                    "None"
                ],
                "option": [
                    "str",
                    "None"
                ],
                "value": [
                    "str",
                    "None"
                ],
                "config_file": [
                    "None",
                    "str"
                ]
            }
        },
        "get_preference": {
            "name": "get_preference",
            "location": 56,
            "return": [],
            "arguments": {
                "section": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "option": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "config_file": [
                    "None",
                    "str",
                    "bytes"
                ]
            }
        },
        "Preferences.set": {
            "name": "set",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str",
                    "dict[str, int]",
                    "dict[, ]",
                    "None",
                    "list[str]"
                ],
                "option": [
                    "str",
                    "dict[str, int]",
                    "dict[, ]",
                    "None",
                    "list[str]"
                ],
                "value": [
                    "str",
                    "dict[str, int]",
                    "dict[, ]",
                    "None",
                    "list[str]"
                ]
            }
        },
        "Preferences.get": {
            "name": "get",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ],
                "option": [
                    "str"
                ]
            }
        }
    },
    "gridsync-master/gridsync/qtreactor.py": {
        "posixinstall": {
            "name": "posixinstall",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "win32install": {
            "name": "win32install",
            "location": 377,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TwistedSocketNotifier.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [],
                "reactor": [],
                "watcher": [],
                "socketType": []
            }
        },
        "TwistedSocketNotifier.shutdown": {
            "name": "shutdown",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistedSocketNotifier.read": {
            "name": "read",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fd": []
            }
        },
        "TwistedSocketNotifier.write": {
            "name": "write",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": []
            }
        },
        "QtReactor.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtReactor._add": {
            "name": "_add",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xer": [],
                "primary": [],
                "type": []
            }
        },
        "QtReactor.addReader": {
            "name": "addReader",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": []
            }
        },
        "QtReactor.addWriter": {
            "name": "addWriter",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": []
            }
        },
        "QtReactor._remove": {
            "name": "_remove",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xer": [],
                "primary": []
            }
        },
        "QtReactor.removeReader": {
            "name": "removeReader",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": []
            }
        },
        "QtReactor.removeWriter": {
            "name": "removeWriter",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": []
            }
        },
        "QtReactor.removeAll": {
            "name": "removeAll",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtReactor.getReaders": {
            "name": "getReaders",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtReactor.getWriters": {
            "name": "getWriters",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QtReactor.callLater": {
            "name": "callLater",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "howlong": []
            }
        },
        "QtReactor.reactorInvocation": {
            "name": "reactorInvocation",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtReactor._iterate": {
            "name": "_iterate",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "None"
                ],
                "fromqt": [
                    "bool"
                ]
            }
        },
        "QtReactor.iterate_qt": {
            "name": "iterate_qt",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "None"
                ]
            }
        },
        "QtReactor.doIteration": {
            "name": "doIteration",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "None"
                ],
                "fromqt": [
                    "bool"
                ]
            }
        },
        "QtReactor.runReturn": {
            "name": "runReturn",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "installSignalHandlers": [
                    "bool"
                ]
            }
        },
        "QtReactor.run": {
            "name": "run",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "installSignalHandlers": [
                    "bool"
                ]
            }
        },
        "QtEventReactor.__init__": {
            "name": "__init__",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtEventReactor.addEvent": {
            "name": "addEvent",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "fd": [],
                "action": []
            }
        },
        "QtEventReactor.removeEvent": {
            "name": "removeEvent",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "QtEventReactor.doEvents": {
            "name": "doEvents",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QtEventReactor._runAction": {
            "name": "_runAction",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [],
                "fd": []
            }
        },
        "QtEventReactor.iterate": {
            "name": "iterate",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "None"
                ],
                "fromqt": [
                    "bool"
                ]
            }
        },
        "TwistedSocketNotifier.read._read": {
            "name": "_read",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TwistedSocketNotifier.write._write": {
            "name": "_write",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/gridsync/recovery.py": {
        "get_recovery_key": {
            "name": "get_recovery_key",
            "location": 22,
            "return": [
                "deferToThreadPool"
            ],
            "arguments": {
                "password": [
                    "str",
                    "int",
                    "float"
                ],
                "gateway": []
            }
        },
        "export_recovery_key": {
            "name": "export_recovery_key",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "ciphertext": [
                    "str",
                    "typing.IO",
                    "dict[str, P]"
                ],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "RecoveryKeyImporter.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "tuple[typing.Type]"
                ]
            }
        },
        "RecoveryKeyImporter._on_decryption_failed": {
            "name": "_on_decryption_failed",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "RecoveryKeyImporter._on_decryption_succeeded": {
            "name": "_on_decryption_succeeded",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "plaintext": []
            }
        },
        "RecoveryKeyImporter._decrypt_content": {
            "name": "_decrypt_content",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "RecoveryKeyImporter._parse_content": {
            "name": "_parse_content",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "RecoveryKeyImporter._load_from_file": {
            "name": "_load_from_file",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "RecoveryKeyImporter._select_file": {
            "name": "_select_file",
            "location": 182,
            "return": [
                "str",
                "list[]",
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecoveryKeyImporter.do_import": {
            "name": "do_import",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "gridsync-master/gridsync/rootcap.py": {
        "RootcapManager.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "str",
                    "None",
                    "tuple[str]",
                    "int"
                ],
                "basedir": [
                    "typing.Text"
                ]
            }
        },
        "RootcapManager.get_rootcap": {
            "name": "get_rootcap",
            "location": 49,
            "return": [
                "str",
                "bytes",
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootcapManager.set_rootcap": {
            "name": "set_rootcap",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cap": [
                    "str",
                    "bytes"
                ],
                "overwrite": [
                    "bool"
                ]
            }
        },
        "RootcapManager.create_rootcap": {
            "name": "create_rootcap",
            "location": 67,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootcapManager._get_basedircap": {
            "name": "_get_basedircap",
            "location": 97,
            "return": [
                "dict[int, str]",
                "dict[str, bool]",
                "dict[str, str]",
                "int",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RootcapManager.create_backup_cap": {
            "name": "create_backup_cap",
            "location": 120,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Type",
                    "list[str]"
                ],
                "basedircap": [
                    "typing.Text"
                ]
            }
        },
        "RootcapManager.get_backup_cap": {
            "name": "get_backup_cap",
            "location": 134,
            "return": [
                "dict[, ]",
                "int",
                "dict[str, typing.Union[typing.Any,typing.Any,typing.Any,typing.Any]]",
                "str",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict[, ]",
                    "typing.MutableMapping"
                ],
                "basedircap": [
                    "typing.Text"
                ]
            }
        },
        "RootcapManager.add_backup": {
            "name": "add_backup",
            "location": 154,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "dirname": [
                    "str",
                    "float",
                    "None"
                ],
                "name": [
                    "str",
                    "int",
                    "None"
                ],
                "cap": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "RootcapManager.get_backup": {
            "name": "get_backup",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "dirname": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "RootcapManager.get_backups": {
            "name": "get_backups",
            "location": 181,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "dirname": [
                    "dict[str, set[str]]",
                    "str",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "RootcapManager.remove_backup": {
            "name": "remove_backup",
            "location": 187,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "dirname": [
                    "str",
                    "float",
                    "None"
                ],
                "name": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "gridsync-master/gridsync/setup.py": {
        "is_onion_grid": {
            "name": "is_onion_grid",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "settings": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "is_zkap_grid": {
            "name": "is_zkap_grid",
            "location": 44,
            "return": [
                "tuple[typing.Union[bool,set[]]]"
            ],
            "arguments": {
                "settings": [
                    "dict[, ]"
                ]
            }
        },
        "prompt_for_leaky_tor": {
            "name": "prompt_for_leaky_tor",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "grid_name": [
                    "str",
                    "list[str]"
                ],
                "hosts": [
                    "str"
                ],
                "parent": [
                    "None",
                    "str"
                ]
            }
        },
        "prompt_for_grid_name": {
            "name": "prompt_for_grid_name",
            "location": 102,
            "return": [],
            "arguments": {
                "grid_name": [
                    "str"
                ],
                "parent": [
                    "None",
                    "str",
                    "typing.Type",
                    "list[str]"
                ]
            }
        },
        "validate_grid": {
            "name": "validate_grid",
            "location": 115,
            "return": [],
            "arguments": {
                "settings": [],
                "parent": [
                    "None",
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "prompt_for_folder_name": {
            "name": "prompt_for_folder_name",
            "location": 143,
            "return": [],
            "arguments": {
                "folder_name": [
                    "str"
                ],
                "grid_name": [
                    "str"
                ],
                "parent": [
                    "None",
                    "str"
                ]
            }
        },
        "validate_folders": {
            "name": "validate_folders",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "known_gateways": [],
                "parent": [
                    "None",
                    "str",
                    "bytes",
                    "tuple[str]",
                    "int"
                ]
            }
        },
        "validate_settings": {
            "name": "validate_settings",
            "location": 180,
            "return": [
                "str",
                "list[]"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "dict[, ]",
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "known_gateways": [
                    "str",
                    "typing.Type",
                    "bool"
                ],
                "parent": [
                    "bool",
                    "str",
                    "dict[str, str]",
                    "typing.BinaryIO"
                ],
                "from_wormhole": [
                    "bool"
                ]
            }
        },
        "SetupRunner.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "known_gateways": [
                    "int",
                    "str",
                    "float",
                    "typing.Iterable[typing.Iterable[]]"
                ],
                "use_tor": [
                    "bool"
                ]
            }
        },
        "SetupRunner.get_gateway": {
            "name": "get_gateway",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "introducer": [
                    "int",
                    "str",
                    "list[int]"
                ],
                "servers": [
                    "str",
                    "bool"
                ]
            }
        },
        "SetupRunner.calculate_total_steps": {
            "name": "calculate_total_steps",
            "location": 218,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "SetupRunner.decode_icon": {
            "name": "decode_icon",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ],
                "dest": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "SetupRunner.fetch_icon": {
            "name": "fetch_icon",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "dest": [
                    "str",
                    "list[str]",
                    "tuple[typing.Union[str,...]]",
                    "None"
                ]
            }
        },
        "SetupRunner.join_grid": {
            "name": "join_grid",
            "location": 263,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str"
                ]
            }
        },
        "SetupRunner.ensure_recovery": {
            "name": "ensure_recovery",
            "location": 321,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "SetupRunner.join_folders": {
            "name": "join_folders",
            "location": 375,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "folders_data": [
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "SetupRunner.run": {
            "name": "run",
            "location": 393,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "settings": []
            }
        },
        "SetupRunner.ensure_recovery.status_updated": {
            "name": "status_updated",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "stage": [],
                "failure_reason": []
            }
        }
    },
    "gridsync-master/gridsync/streamedlogs.py": {
        "TahoeLogReader.onMessage": {
            "name": "onMessage",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "isBinary": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "StreamedLogs.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reactor": [
                    "int",
                    "float"
                ],
                "maxlen": [
                    "None",
                    "float",
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "typing.Hashable"
                ]
            }
        },
        "StreamedLogs.add_message": {
            "name": "add_message",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "float",
                    "int"
                ]
            }
        },
        "StreamedLogs.start": {
            "name": "start",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeurl": [
                    "str",
                    "int",
                    "float"
                ],
                "api_token": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "StreamedLogs.stop": {
            "name": "stop",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamedLogs.get_streamed_log_messages": {
            "name": "get_streamed_log_messages",
            "location": 80,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StreamedLogs._create_client_service": {
            "name": "_create_client_service",
            "location": 86,
            "return": [
                "ClientService"
            ],
            "arguments": {
                "self": [],
                "nodeurl": [
                    "str",
                    "bytes",
                    "list[str]"
                ],
                "api_token": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "gridsync-master/gridsync/supervisor.py": {
        "Supervisor.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pidfile": [
                    "None",
                    "int",
                    "float"
                ],
                "restart_delay": [
                    "int"
                ]
            }
        },
        "Supervisor.is_running": {
            "name": "is_running",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Supervisor.stop": {
            "name": "stop",
            "location": 46,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Supervisor._start_process": {
            "name": "_start_process",
            "location": 70,
            "return": [
                "typing.Generator[]",
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Supervisor._schedule_restart": {
            "name": "_schedule_restart",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "typing.Iterable[C]"
                ]
            }
        },
        "Supervisor.start": {
            "name": "start",
            "location": 118,
            "return": [
                "typing.Generator[]",
                "tuple[typing.Union[list[str],set[str],dict[int, str],tuple[typing.Union[str,str]],str,dict[str, str],None]]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "started_trigger": [
                    "typing.Text"
                ],
                "stdout_line_collector": [
                    "None",
                    "float",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "stderr_line_collector": [
                    "None",
                    "float",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ],
                "call_before_start": [
                    "None",
                    "int",
                    "typing.Sequence[str]",
                    "set[]",
                    "str"
                ],
                "call_after_start": [
                    "None",
                    "int",
                    "typing.Sequence[str]",
                    "set[]",
                    "str"
                ]
            }
        }
    },
    "gridsync-master/gridsync/system.py": {
        "which": {
            "name": "which",
            "location": 22,
            "return": [],
            "arguments": {
                "cmd": [
                    "str"
                ]
            }
        },
        "process_name": {
            "name": "process_name",
            "location": 42,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "pid": [
                    "typing.Mapping"
                ]
            }
        },
        "is_running": {
            "name": "is_running",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "pid": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "bytes"
                ]
            }
        },
        "terminate": {
            "name": "terminate",
            "location": 57,
            "return": [
                "None",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "pid": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "kill_after": [
                    "None",
                    "int",
                    "float",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "SubprocessProtocol.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback_triggers": [
                    "None",
                    "int"
                ],
                "errback_triggers": [
                    "None",
                    "int"
                ],
                "stdout_line_collector": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ],
                "stderr_line_collector": [
                    "None",
                    "bool",
                    "str",
                    "float"
                ],
                "on_process_ended": [
                    "None",
                    "int"
                ]
            }
        },
        "SubprocessProtocol._check_triggers": {
            "name": "_check_triggers",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "SubprocessProtocol.childDataReceived": {
            "name": "childDataReceived",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "childFD": [
                    "tuple[typing.Union[str,bool]]",
                    "float",
                    "list[]"
                ],
                "data": [
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "SubprocessProtocol.processEnded": {
            "name": "processEnded",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "gridsync-master/gridsync/tahoe.py": {
        "is_valid_furl": {
            "name": "is_valid_furl",
            "location": 35,
            "return": [],
            "arguments": {
                "furl": [
                    "str"
                ]
            }
        },
        "get_nodedirs": {
            "name": "get_nodedirs",
            "location": 39,
            "return": [
                "list[typing.Union[str,dict[, ],list[],bytes]]"
            ],
            "arguments": {
                "basedir": [
                    "str",
                    "None",
                    "tuple[i]"
                ]
            }
        },
        "storage_options_to_config": {
            "name": "storage_options_to_config",
            "location": 749,
            "return": [
                "dict[typing.Text, dict[typing.Text, typing.Union[typing.Text,dict[str, typing.Any]]]]",
                "None"
            ],
            "arguments": {
                "options": [
                    "dict[, ]",
                    "dict[str, dict[str, typing.Any]]"
                ]
            }
        },
        "Tahoe.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodedir": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "executable": [
                    "None",
                    "int",
                    "dict[str, typing.Any]",
                    "str"
                ],
                "reactor": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "Tahoe.load_newscap": {
            "name": "load_newscap",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.config_set": {
            "name": "config_set",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str",
                    "int",
                    "bytes"
                ],
                "option": [
                    "str",
                    "int",
                    "bytes"
                ],
                "value": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "Tahoe.config_get": {
            "name": "config_get",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "section": [
                    "str",
                    "dict[str, str]",
                    "None"
                ],
                "option": [
                    "str",
                    "dict[str, str]",
                    "None"
                ]
            }
        },
        "Tahoe.save_settings": {
            "name": "save_settings",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "dict[str, str]",
                    "dict[str, bool]"
                ]
            }
        },
        "Tahoe.load_settings": {
            "name": "load_settings",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.get_settings": {
            "name": "get_settings",
            "location": 211,
            "return": [
                "str",
                "bool",
                "typing.Deque",
                "typing.Type",
                "typing.TextIO"
            ],
            "arguments": {
                "self": [],
                "include_secrets": [
                    "bool"
                ]
            }
        },
        "Tahoe.export": {
            "name": "export",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dest": [
                    "str",
                    "int",
                    "tuple[typing.Union[str,str]]",
                    "bytes"
                ],
                "include_secrets": [
                    "bool"
                ]
            }
        },
        "Tahoe._read_servers_yaml": {
            "name": "_read_servers_yaml",
            "location": 242,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.get_storage_servers": {
            "name": "get_storage_servers",
            "location": 249,
            "return": [
                "dict[, ]",
                "list[]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe._configure_storage_plugins": {
            "name": "_configure_storage_plugins",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage_options": [
                    "str",
                    "list[]"
                ]
            }
        },
        "Tahoe.add_storage_server": {
            "name": "add_storage_server",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_id": [
                    "int",
                    "str"
                ],
                "furl": [
                    "int",
                    "str",
                    "None"
                ],
                "nickname": [
                    "None",
                    "int",
                    "str"
                ],
                "storage_options": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Tahoe.add_storage_servers": {
            "name": "add_storage_servers",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage_servers": []
            }
        },
        "Tahoe.line_received": {
            "name": "line_received",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "list[str]",
                    "None",
                    "bool"
                ]
            }
        },
        "Tahoe.command": {
            "name": "command",
            "location": 327,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "callback_trigger": [
                    "None",
                    "dict[, ]",
                    "str",
                    "bytes"
                ]
            }
        },
        "Tahoe.create_node": {
            "name": "create_node",
            "location": 352,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.create_client": {
            "name": "create_client",
            "location": 380,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.is_storage_node": {
            "name": "is_storage_node",
            "location": 385,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.stop": {
            "name": "stop",
            "location": 391,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.get_streamed_log_messages": {
            "name": "get_streamed_log_messages",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tahoe._on_started": {
            "name": "_on_started",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe._remove_twistd_pid": {
            "name": "_remove_twistd_pid",
            "location": 448,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.start": {
            "name": "start",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.set_nodeurl": {
            "name": "set_nodeurl",
            "location": 511,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodeurl": [
                    "bool",
                    "float"
                ]
            }
        },
        "Tahoe.get_grid_status": {
            "name": "get_grid_status",
            "location": 520,
            "return": [
                "None",
                "tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.get_connected_servers": {
            "name": "get_connected_servers",
            "location": 545,
            "return": [
                "None",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.is_ready": {
            "name": "is_ready",
            "location": 562,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.await_ready": {
            "name": "await_ready",
            "location": 570,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.mkdir": {
            "name": "mkdir",
            "location": 574,
            "return": [
                "typing.Generator[]",
                "str",
                "dict[str, typing.Any]",
                "dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "parentcap": [
                    "str"
                ],
                "childname": [
                    "None",
                    "dict[, ]",
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ]
            }
        },
        "Tahoe.diminish": {
            "name": "diminish",
            "location": 591,
            "return": [],
            "arguments": {
                "self": [],
                "cap": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "Tahoe.create_rootcap": {
            "name": "create_rootcap",
            "location": 596,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.upload": {
            "name": "upload",
            "location": 601,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "local_path": [
                    "str"
                ],
                "dircap": [
                    "typing.Text"
                ],
                "mutable": [
                    "bool"
                ]
            }
        },
        "Tahoe.download": {
            "name": "download",
            "location": 623,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "cap": [
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "local_path": [
                    "str"
                ]
            }
        },
        "Tahoe.link": {
            "name": "link",
            "location": 636,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "dircap": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ],
                "childname": [
                    "int",
                    "list[pathlib.Path]",
                    "None",
                    "BaseException"
                ],
                "childcap": [
                    "str",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Tahoe.unlink": {
            "name": "unlink",
            "location": 662,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "dircap": [
                    "str",
                    "dict[str, typing.Any]",
                    "bool"
                ],
                "childname": [
                    "str",
                    "int",
                    "list[pathlib.Path]"
                ],
                "missing_ok": [
                    "bool"
                ]
            }
        },
        "Tahoe.get_json": {
            "name": "get_json",
            "location": 679,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cap": [
                    "str",
                    "int"
                ]
            }
        },
        "Tahoe.ls": {
            "name": "ls",
            "location": 693,
            "return": [
                "typing.Generator[]",
                "None",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "cap": [
                    "typing.Callable[, ]",
                    "list[T]"
                ],
                "exclude_dirnodes": [
                    "bool"
                ],
                "exclude_filenodes": [
                    "bool"
                ]
            }
        },
        "Tahoe.get_rootcap": {
            "name": "get_rootcap",
            "location": 717,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.scan_storage_plugins": {
            "name": "scan_storage_plugins",
            "location": 721,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tahoe.__init__.poll": {
            "name": "poll",
            "location": 113,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/gridsync/tor.py": {
        "tor_required": {
            "name": "tor_required",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "furl": [
                    "str"
                ]
            }
        },
        "get_tor": {
            "name": "get_tor",
            "location": 34,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "reactor": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_tor_with_prompt": {
            "name": "get_tor_with_prompt",
            "location": 51,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "reactor": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "list[]"
                ],
                "parent": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "gridsync-master/gridsync/types.py": {},
    "gridsync-master/gridsync/util.py": {
        "b58encode": {
            "name": "b58encode",
            "location": 17,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "b": [
                    "bytes",
                    "list[list[str]]"
                ]
            }
        },
        "b58decode": {
            "name": "b58decode",
            "location": 33,
            "return": [
                "bytes"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "to_bool": {
            "name": "to_bool",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "humanized_list": {
            "name": "humanized_list",
            "location": 64,
            "return": [
                "None",
                "str"
            ],
            "arguments": {
                "list_": [],
                "kind": [
                    "typing.Text"
                ]
            }
        },
        "strip_html_tags": {
            "name": "strip_html_tags",
            "location": 90,
            "return": [],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "until": {
            "name": "until",
            "location": 97,
            "return": [
                "bool",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "predicate": [
                    "dict[, ]",
                    "int"
                ],
                "result": [
                    "bool"
                ],
                "timeout": [
                    "int"
                ],
                "period": [
                    "float"
                ],
                "reactor": [
                    "None",
                    "bool",
                    "tuple[typing.Union[int,...]]",
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "_TagStripper.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TagStripper.handle_data": {
            "name": "handle_data",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "list[]",
                    "dict[str, list[str]]",
                    "int"
                ]
            }
        },
        "_TagStripper.get_data": {
            "name": "get_data",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poller.wait_for_completion": {
            "name": "wait_for_completion",
            "location": 136,
            "return": [
                "Deferred"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poller._iterate_poll": {
            "name": "_iterate_poll",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poller._completed": {
            "name": "_completed",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poller._deliver_result": {
            "name": "_deliver_result",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "list[dict[str, typing.Any]]",
                    "str",
                    "None",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "Poller._schedule": {
            "name": "_schedule",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/voucher.py": {
        "generate_voucher": {
            "name": "generate_voucher",
            "location": 10,
            "return": [],
            "arguments": {
                "data": [
                    "bytes"
                ]
            }
        },
        "hyphenate": {
            "name": "hyphenate",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        },
        "dehyphenate": {
            "name": "dehyphenate",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "get_checksum": {
            "name": "get_checksum",
            "location": 26,
            "return": [],
            "arguments": {
                "b": [
                    "int"
                ],
                "length": [
                    "int"
                ]
            }
        },
        "generate_code": {
            "name": "generate_code",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "is_valid": {
            "name": "is_valid",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "code": [
                    "str",
                    "Exception"
                ],
                "checksum_length": [
                    "int"
                ]
            }
        }
    },
    "gridsync-master/gridsync/watchdog.py": {
        "_WatchdogEventHandler.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "watchdog": [
                    "dict[, ]",
                    "bool"
                ],
                "path": [
                    "str",
                    "int",
                    "typing.Iterable[str]"
                ]
            }
        },
        "_WatchdogEventHandler.on_any_event": {
            "name": "on_any_event",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str"
                ]
            }
        },
        "Watchdog.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Watchdog.add_watch": {
            "name": "add_watch",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Watchdog.remove_watch": {
            "name": "remove_watch",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "Watchdog.stop": {
            "name": "stop",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Watchdog.start": {
            "name": "start",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/websocket.py": {
        "WebSocketReaderProtocol.onOpen": {
            "name": "onOpen",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketReaderProtocol.onMessage": {
            "name": "onMessage",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [],
                "isBinary": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "WebSocketReaderProtocol.onClose": {
            "name": "onClose",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wasClean": [
                    "bool",
                    "list[str]",
                    "tuple[str]",
                    "None",
                    "typing.Callable[int, None]",
                    "str"
                ],
                "code": [
                    "str",
                    "None",
                    "dict[, ]",
                    "tuple[typing.Union[str,int]]",
                    "dict[str, typing.Any]"
                ],
                "reason": [
                    "str",
                    "None",
                    "dict[, ]",
                    "tuple[typing.Union[str,int]]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "WebSocketReaderService.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bytes",
                    "int",
                    "list[str]"
                ],
                "headers": [
                    "dict[, ]",
                    "str",
                    "bytes",
                    "dict[str, typing.Any]",
                    "None",
                    "tuple[typing.Union[int,int]]",
                    "bool"
                ],
                "collector": []
            }
        },
        "WebSocketReaderService._create_client_service": {
            "name": "_create_client_service",
            "location": 51,
            "return": [
                "ClientService"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketReaderService.stop": {
            "name": "stop",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebSocketReaderService.start": {
            "name": "start",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/wormhole_.py": {
        "wormhole_receive": {
            "name": "wormhole_receive",
            "location": 136,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "code": [
                    "str",
                    "bytes",
                    "None",
                    "int"
                ],
                "use_tor": [
                    "bool"
                ]
            }
        },
        "wormhole_send": {
            "name": "wormhole_send",
            "location": 143,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "dict[str, str]",
                    "list[T]",
                    "bool"
                ],
                "code": [
                    "None",
                    "str",
                    "dict[str, str]",
                    "list[T]",
                    "bool"
                ],
                "use_tor": [
                    "bool"
                ]
            }
        },
        "Wormhole.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_tor": [
                    "bool"
                ]
            }
        },
        "Wormhole.connect": {
            "name": "connect",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wormhole.close": {
            "name": "close",
            "location": 53,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wormhole.receive": {
            "name": "receive",
            "location": 66,
            "return": [
                "typing.Generator[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        },
        "Wormhole.send": {
            "name": "send",
            "location": 106,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "list[]",
                    "bytes"
                ],
                "code": [
                    "None",
                    "str",
                    "typing.Type",
                    "list[int]",
                    "list[]"
                ]
            }
        }
    },
    "gridsync-master/gridsync/zkapauthorizer.py": {
        "ZKAPAuthorizer.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "float",
                    "int"
                ]
            }
        },
        "ZKAPAuthorizer.converted_batch_size": {
            "name": "converted_batch_size",
            "location": 37,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "None",
                    "int",
                    "float",
                    "dict[, ]"
                ]
            }
        },
        "ZKAPAuthorizer._request": {
            "name": "_request",
            "location": 54,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "path": [
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ],
                "data": [
                    "None",
                    "str",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "ZKAPAuthorizer.get_version": {
            "name": "get_version",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZKAPAuthorizer._get_content": {
            "name": "_get_content",
            "location": 79,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "cap": [
                    "dict[, ]",
                    "typing.Mapping",
                    "int",
                    "dict[str, typing.Any]",
                    "Exception"
                ]
            }
        },
        "ZKAPAuthorizer.get_sizes": {
            "name": "get_sizes",
            "location": 87,
            "return": [
                "list[]",
                "list[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZKAPAuthorizer.calculate_price": {
            "name": "calculate_price",
            "location": 114,
            "return": [
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "sizes": [
                    "str"
                ]
            }
        },
        "ZKAPAuthorizer.get_price": {
            "name": "get_price",
            "location": 127,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZKAPAuthorizer.add_voucher": {
            "name": "add_voucher",
            "location": 133,
            "return": [
                "None",
                "str",
                "dict[, ]",
                "bytes",
                "int",
                "dict[str, typing.Any]",
                "dict[str, typing.Union[dict[, ],typing.Any,typing.Any,typing.Any]]",
                "typing.Deque"
            ],
            "arguments": {
                "self": [],
                "voucher": [
                    "None",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ZKAPAuthorizer.get_voucher": {
            "name": "get_voucher",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "voucher": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "ZKAPAuthorizer.get_vouchers": {
            "name": "get_vouchers",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZKAPAuthorizer.zkap_payment_url": {
            "name": "zkap_payment_url",
            "location": 159,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "self": [],
                "voucher": [
                    "str",
                    "typing.BinaryIO",
                    "dict[str, typing.Any]",
                    "typing.IO"
                ]
            }
        },
        "ZKAPAuthorizer.get_lease_maintenance": {
            "name": "get_lease_maintenance",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZKAPAuthorizer.replicate": {
            "name": "replicate",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZKAPAuthorizer.recover": {
            "name": "recover",
            "location": 201,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "dircap": [
                    "str",
                    "bool",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "on_status_update": [
                    "bool",
                    "str",
                    "None",
                    "list[str]"
                ]
            }
        },
        "ZKAPAuthorizer.backup_zkaps": {
            "name": "backup_zkaps",
            "location": 242,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZKAPAuthorizer.snapshot_exists": {
            "name": "snapshot_exists",
            "location": 265,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZKAPAuthorizer.restore_zkaps": {
            "name": "restore_zkaps",
            "location": 285,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "on_status_update": [
                    "str",
                    "int"
                ]
            }
        },
        "ZKAPAuthorizer.recover.status_update": {
            "name": "status_update",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "raw_data": [],
                "is_binary": [
                    "bool"
                ]
            }
        }
    },
    "gridsync-master/gridsync/_version.py": {
        "get_keywords": {
            "name": "get_keywords",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "get_config": {
            "name": "get_config",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 63,
            "return": [],
            "arguments": {
                "vcs": [],
                "method": []
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 74,
            "return": [],
            "arguments": {
                "commands": [],
                "args": [],
                "cwd": [],
                "verbose": [],
                "hide_stderr": [],
                "env": []
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 111,
            "return": [],
            "arguments": {
                "parentdir_prefix": [],
                "root": [],
                "verbose": []
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 137,
            "return": [],
            "arguments": {
                "versionfile_abs": []
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 166,
            "return": [],
            "arguments": {
                "keywords": [],
                "tag_prefix": [],
                "verbose": []
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 221,
            "return": [],
            "arguments": {
                "tag_prefix": [],
                "root": [],
                "verbose": [],
                "run_command": []
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 312,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 319,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 344,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 360,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 387,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 409,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 429,
            "return": [],
            "arguments": {
                "pieces": []
            }
        },
        "render": {
            "name": "render",
            "location": 449,
            "return": [],
            "arguments": {
                "pieces": [],
                "style": []
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 481,
            "return": [],
            "arguments": {}
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 65,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "gridsync-master/gridsync/__init__.py": {
        "resource": {
            "name": "resource",
            "location": 138,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "load_settings_from_cheatcode": {
            "name": "load_settings_from_cheatcode",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "cheatcode": [
                    "str"
                ]
            }
        },
        "cheatcode_used": {
            "name": "cheatcode_used",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "cheatcode": [
                    "str"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 184,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/gridsync/gui/charts.py": {
        "ZKAPPieChart.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZKAPPieChart.update_tooltip": {
            "name": "update_tooltip",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZKAPBarChart.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "ZKAPBarChart.update_chart": {
            "name": "update_chart",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "used": [
                    "int"
                ],
                "cost": [
                    "int"
                ],
                "available": [
                    "int"
                ],
                "period": [
                    "int"
                ]
            }
        },
        "ZKAPCompactPieChartView.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZKAPBarChartView.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "int",
                    "float"
                ]
            }
        },
        "ZKAPBarChartView.get_chart": {
            "name": "get_chart",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/gui/color.py": {
        "is_dark": {
            "name": "is_dark",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "color": []
            }
        },
        "BlendedColor.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color_a": [],
                "color_b": [],
                "pct_a": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "gridsync-master/gridsync/gui/debug.py": {
        "log_fmt": {
            "name": "log_fmt",
            "location": 80,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "gateway_name": [
                    "str",
                    "bool"
                ],
                "tahoe_log": [
                    "str",
                    "bool"
                ],
                "magic_folder_log": [
                    "str",
                    "bool"
                ]
            }
        },
        "LogLoader.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "int",
                    "float"
                ]
            }
        },
        "LogLoader.load": {
            "name": "load",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugExporter.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [],
                "parent": [
                    "None",
                    "typing.Mapping"
                ]
            }
        },
        "DebugExporter.on_checkbox_state_changed": {
            "name": "on_checkbox_state_changed",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "float",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "DebugExporter.on_filter_info_button_clicked": {
            "name": "on_filter_info_button_clicked",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugExporter.on_loaded": {
            "name": "on_loaded",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugExporter.load": {
            "name": "load",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugExporter.copy_to_clipboard": {
            "name": "copy_to_clipboard",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugExporter.export_to_file": {
            "name": "export_to_file",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/gui/font.py": {
        "Font.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point_size": [
                    "int"
                ]
            }
        }
    },
    "gridsync-master/gridsync/gui/history.py": {
        "HistoryItemWidget.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "dict[, ]",
                    "str",
                    "None",
                    "bool"
                ],
                "data": [],
                "parent": []
            }
        },
        "HistoryItemWidget.update_text": {
            "name": "update_text",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryItemWidget._do_load_thumbnail": {
            "name": "_do_load_thumbnail",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryItemWidget.load_thumbnail": {
            "name": "load_thumbnail",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryItemWidget.unhighlight": {
            "name": "unhighlight",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryItemWidget.enterEvent": {
            "name": "enterEvent",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "float"
                ]
            }
        },
        "HistoryListWidget.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "int",
                    "float",
                    "None",
                    "typing.Sequence[str]",
                    "str"
                ],
                "deduplicate": [
                    "bool"
                ],
                "max_items": [
                    "int"
                ]
            }
        },
        "HistoryListWidget.on_double_click": {
            "name": "on_double_click",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "typing.Sequence[tuple[typing.Union[str,typing.Any]]]",
                    "float"
                ]
            }
        },
        "HistoryListWidget.on_right_click": {
            "name": "on_right_click",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "list[dict[, ]]",
                    "dict[str, float]"
                ]
            }
        },
        "HistoryListWidget.add_item": {
            "name": "add_item",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "HistoryListWidget._on_file_added": {
            "name": "_on_file_added",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "list[str]",
                    "str",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]"
                ],
                "data": [
                    "str",
                    "bytes",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "HistoryListWidget._on_file_modified": {
            "name": "_on_file_modified",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "list[str]",
                    "list[dict[, ]]",
                    "bool"
                ],
                "data": [
                    "bytes",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "HistoryListWidget._on_file_removed": {
            "name": "_on_file_removed",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "list[str]",
                    "list[dict[, ]]",
                    "bool"
                ],
                "data": [
                    "bytes",
                    "str",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "HistoryListWidget.update_visible_widgets": {
            "name": "update_visible_widgets",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryListWidget.showEvent": {
            "name": "showEvent",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "float"
                ]
            }
        },
        "HistoryView.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "int",
                    "None"
                ],
                "gui": [
                    "int",
                    "None",
                    "str"
                ],
                "deduplicate": [
                    "bool"
                ],
                "max_items": [
                    "int"
                ]
            }
        }
    },
    "gridsync-master/gridsync/gui/invite.py": {
        "show_failure": {
            "name": "show_failure",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "failure": [
                    "str",
                    "bool",
                    "typing.MutableMapping"
                ],
                "parent": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "float"
                ]
            }
        },
        "InviteCodeCompleter.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteCodeCompleter.pathFromIndex": {
            "name": "pathFromIndex",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "list[str]"
                ]
            }
        },
        "InviteCodeCompleter.splitPath": {
            "name": "splitPath",
            "location": 51,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "InviteCodeLineEdit.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "tuple[typing.Type]"
                ]
            }
        },
        "InviteCodeLineEdit.update_action_button": {
            "name": "update_action_button",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "None",
                    "str",
                    "set[str]"
                ]
            }
        },
        "InviteCodeLineEdit.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "InviteCodeLineEdit.return_pressed": {
            "name": "return_pressed",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteCodeLineEdit.button_clicked": {
            "name": "button_clicked",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteCodeWidget.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "tuple[typing.Type]"
                ],
                "tor_available": [
                    "bool"
                ]
            }
        },
        "InviteCodeWidget.maybe_enable_tor_checkbox": {
            "name": "maybe_enable_tor_checkbox",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteCodeWidget.toggle_tor_status": {
            "name": "toggle_tor_status",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "InviteCodeWidget.on_tor_info_button_clicked": {
            "name": "on_tor_info_button_clicked",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteCodeWidget.on_code_info_button_clicked": {
            "name": "on_code_info_button_clicked",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/gui/main_window.py": {
        "run_coroutine": {
            "name": "run_coroutine",
            "location": 52,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "parent": [
                    "typing.Callable[..., None]",
                    "typing.Type",
                    "str"
                ],
                "coro": [
                    "dict[str, typing.Union[str,None]]"
                ]
            }
        },
        "get_save_filename": {
            "name": "get_save_filename",
            "location": 119,
            "return": [
                "Path",
                "None"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "int"
                ],
                "prompt": [
                    "str",
                    "int"
                ],
                "more": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_encrypt_password": {
            "name": "_get_encrypt_password",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "parent": [
                    "dict[str, typing.Any]",
                    "str",
                    "None",
                    "dict[, ]"
                ]
            }
        },
        "_encryption_animation": {
            "name": "_encryption_animation",
            "location": 165,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "CentralWidget.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui": [
                    "str"
                ]
            }
        },
        "CentralWidget._add_folders_view": {
            "name": "_add_folders_view",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "int",
                    "dict[int, dict[, ]]"
                ]
            }
        },
        "CentralWidget._add_history_view": {
            "name": "_add_history_view",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "int",
                    "str",
                    "tuple[typing.Union[int,int]]",
                    "float"
                ]
            }
        },
        "CentralWidget._add_usage_view": {
            "name": "_add_usage_view",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": []
            }
        },
        "CentralWidget.add_gateway": {
            "name": "add_gateway",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "str",
                    "float",
                    "list[str]",
                    "None"
                ]
            }
        },
        "MainWindow.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui": [
                    "int",
                    "None"
                ]
            }
        },
        "MainWindow.populate": {
            "name": "populate",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateways": [
                    "list[]"
                ]
            }
        },
        "MainWindow.show_news_message": {
            "name": "show_news_message",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "str",
                    "list[str]",
                    "float"
                ],
                "title": [
                    "bool",
                    "str",
                    "float",
                    "typing.Hashable",
                    "None"
                ],
                "message": [
                    "str",
                    "set[str]",
                    "bool",
                    "None"
                ]
            }
        },
        "MainWindow._maybe_show_news_message": {
            "name": "_maybe_show_news_message",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "float",
                    "bool",
                    "None",
                    "str"
                ],
                "title": [
                    "float",
                    "bool",
                    "None",
                    "str"
                ],
                "message": [
                    "float",
                    "bool",
                    "None",
                    "str"
                ]
            }
        },
        "MainWindow.on_message_received": {
            "name": "on_message_received",
            "location": 300,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "str",
                    "dict[, ]",
                    "set[]",
                    "bool"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "MainWindow.on_upgrade_required": {
            "name": "on_upgrade_required",
            "location": 307,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "str",
                    "bool",
                    "list[]"
                ]
            }
        },
        "MainWindow.current_view": {
            "name": "current_view",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.select_folder": {
            "name": "select_folder",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.set_current_grid_status": {
            "name": "set_current_grid_status",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.show_folders_view": {
            "name": "show_folders_view",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.show_history_view": {
            "name": "show_history_view",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.show_usage_view": {
            "name": "show_usage_view",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.show_welcome_dialog": {
            "name": "show_welcome_dialog",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.on_grid_selected": {
            "name": "on_grid_selected",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MainWindow.confirm_exported": {
            "name": "confirm_exported",
            "location": 386,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "gateway": [
                    "bool",
                    "str",
                    "None",
                    "float",
                    "list[tuple[typing.Union[str,str]]]"
                ]
            }
        },
        "MainWindow.export_recovery_key": {
            "name": "export_recovery_key",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "None",
                    "dict[str, typing.Any]",
                    "float",
                    "str"
                ]
            }
        },
        "MainWindow.import_recovery_key": {
            "name": "import_recovery_key",
            "location": 452,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.prompt_for_export": {
            "name": "prompt_for_export",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "typing.Iterable[typing.Any]",
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "MainWindow.on_invite_received": {
            "name": "on_invite_received",
            "location": 483,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "int",
                    "float"
                ]
            }
        },
        "MainWindow.on_invite_closed": {
            "name": "on_invite_closed",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "MainWindow.open_invite_receiver": {
            "name": "open_invite_receiver",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.open_invite_sender_dialog": {
            "name": "open_invite_sender_dialog",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow._is_folder_syncing": {
            "name": "_is_folder_syncing",
            "location": 515,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow._is_zkap_auth_required": {
            "name": "_is_zkap_auth_required",
            "location": 521,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.confirm_quit": {
            "name": "confirm_quit",
            "location": 527,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MainWindow.closeEvent": {
            "name": "closeEvent",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "MainWindow.showEvent": {
            "name": "showEvent",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "gridsync-master/gridsync/gui/menu.py": {
        "Menu.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui": [
                    "float",
                    "bool"
                ],
                "show_open_action": [
                    "bool"
                ]
            }
        }
    },
    "gridsync-master/gridsync/gui/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view": [
                    "int",
                    "str",
                    "collections.abc.AsyncIterator"
                ]
            }
        },
        "Model.on_error_occurred": {
            "name": "on_error_occurred",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ],
                "summary": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ]
            }
        },
        "Model.on_connected": {
            "name": "on_connected",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_disconnected": {
            "name": "on_disconnected",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.on_updated_files": {
            "name": "on_updated_files",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ],
                "files_list": [
                    "str"
                ],
                "action": [
                    "str"
                ],
                "author": [
                    "str"
                ]
            }
        },
        "Model.on_files_updated": {
            "name": "on_files_updated",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ],
                "files": [
                    "str"
                ]
            }
        },
        "Model.data": {
            "name": "data",
            "location": 117,
            "return": [
                "QSize",
                "dict[str, typing.Union[typing.Any,typing.Any]]",
                "dict[str, bool]",
                "dict[, ]",
                "list[tuple[typing.Union[str,str]]]",
                "str",
                "list[]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict[, ]",
                    "str",
                    "float",
                    "list[float]"
                ],
                "role": [
                    "int",
                    "typing.Callable[int, None]",
                    "dict[str, str]"
                ]
            }
        },
        "Model.add_folder": {
            "name": "add_folder",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Model.remove_folder": {
            "name": "remove_folder",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ]
            }
        },
        "Model.update_folder_icon": {
            "name": "update_folder_icon",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "dict[, ]",
                    "bool",
                    "str",
                    "None"
                ],
                "overlay_file": [
                    "typing.Text"
                ]
            }
        },
        "Model.set_status_private": {
            "name": "set_status_private",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ]
            }
        },
        "Model.set_status_shared": {
            "name": "set_status_shared",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ]
            }
        },
        "Model.update_overlay": {
            "name": "update_overlay",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ]
            }
        },
        "Model.on_members_updated": {
            "name": "on_members_updated",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "dict[, ]",
                    "int",
                    "None",
                    "bytes",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "members": [
                    "dict[, ]",
                    "float",
                    "dict[str, typing.Any]",
                    "list[float]"
                ]
            }
        },
        "Model._errors_to_str": {
            "name": "_errors_to_str",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "errors": []
            }
        },
        "Model.is_folder_syncing": {
            "name": "is_folder_syncing",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.set_status": {
            "name": "set_status",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "set[str]",
                    "dict[str, D]"
                ],
                "status": [
                    "str",
                    "int",
                    "dict[str, typing.Union[typing.Any,typing.Any,typing.Any]]"
                ]
            }
        },
        "Model.set_transfer_progress": {
            "name": "set_transfer_progress",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ],
                "transferred": [
                    "int"
                ],
                "total": [
                    "int"
                ]
            }
        },
        "Model.fade_row": {
            "name": "fade_row",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "int",
                    "None",
                    "list[]"
                ],
                "overlay_file": [
                    "typing.Text"
                ]
            }
        },
        "Model.unfade_row": {
            "name": "unfade_row",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ]
            }
        },
        "Model.set_mtime": {
            "name": "set_mtime",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "mtime": [
                    "str",
                    "int",
                    "typing.Any",
                    "None",
                    "dict[str, typing.Any]",
                    "list[dict[, ]]"
                ]
            }
        },
        "Model.set_size": {
            "name": "set_size",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "size": [
                    "str",
                    "int"
                ]
            }
        },
        "Model.update_natural_times": {
            "name": "update_natural_times",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.add_remote_folder": {
            "name": "add_remote_folder",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "overlay_file": [
                    "typing.Text"
                ]
            }
        },
        "Model.on_folder_removed": {
            "name": "on_folder_removed",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "gridsync-master/gridsync/gui/password.py": {
        "PasswordDialog.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "typing.Text"
                ],
                "ok_button_text": [
                    "typing.Text"
                ],
                "help_text": [
                    "typing.Text"
                ],
                "show_stats": [
                    "bool"
                ],
                "parent": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        },
        "PasswordDialog.update_color": {
            "name": "update_color",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "bool",
                    "str"
                ]
            }
        },
        "PasswordDialog.toggle_visibility": {
            "name": "toggle_visibility",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordDialog.update_stats": {
            "name": "update_stats",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "PasswordDialog.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "PasswordDialog.get_password": {
            "name": "get_password",
            "location": 171,
            "return": [
                "tuple[typing.Type]"
            ],
            "arguments": {
                "label": [
                    "typing.Text"
                ],
                "ok_button_text": [
                    "typing.Text"
                ],
                "help_text": [
                    "typing.Text"
                ],
                "show_stats": [
                    "bool"
                ],
                "parent": [
                    "None",
                    "int",
                    "str"
                ]
            }
        }
    },
    "gridsync-master/gridsync/gui/pixmap.py": {
        "Pixmap.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_filename": [
                    "int",
                    "str",
                    "None"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "CompositePixmap.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "str",
                    "int"
                ],
                "overlay": [
                    "None",
                    "int",
                    "typing.Callable[, ]"
                ],
                "grayout": [
                    "bool"
                ]
            }
        },
        "BadgedPixmap.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pixmap": [
                    "bool",
                    "Exception",
                    "tuple[]"
                ],
                "text": [
                    "typing.Text"
                ],
                "size": [
                    "float"
                ],
                "corner": []
            }
        }
    },
    "gridsync-master/gridsync/gui/preferences.py": {
        "GeneralPane.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preferences": [
                    "int",
                    "float"
                ]
            }
        },
        "GeneralPane.load_preferences": {
            "name": "load_preferences",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneralPane.on_checkbox_minimize_changed": {
            "name": "on_checkbox_minimize_changed",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "GeneralPane.on_checkbox_autostart_changed": {
            "name": "on_checkbox_autostart_changed",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "NotificationsPane.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preferences": [
                    "int",
                    "float"
                ]
            }
        },
        "NotificationsPane.load_preferences": {
            "name": "load_preferences",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationsPane.on_checkbox_connection_changed": {
            "name": "on_checkbox_connection_changed",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "NotificationsPane.on_checkbox_folder_changed": {
            "name": "on_checkbox_folder_changed",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "NotificationsPane.on_checkbox_invite_changed": {
            "name": "on_checkbox_invite_changed",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "PreferencesWindow.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preferences": [
                    "None",
                    "float",
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "typing.Hashable"
                ]
            }
        },
        "PreferencesWindow.on_general_button_clicked": {
            "name": "on_general_button_clicked",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreferencesWindow.on_notifications_button_clicked": {
            "name": "on_notifications_button_clicked",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreferencesWindow.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "gridsync-master/gridsync/gui/share.py": {
        "InviteSenderDialog.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "bool",
                    "str"
                ],
                "gui": [
                    "int",
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "None"
                ],
                "folder_names": [
                    "str"
                ]
            }
        },
        "InviteSenderDialog.set_box_title": {
            "name": "set_box_title",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "InviteSenderDialog.on_copy_button_clicked": {
            "name": "on_copy_button_clicked",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteSenderDialog.on_got_code": {
            "name": "on_got_code",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        },
        "InviteSenderDialog.on_got_introduction": {
            "name": "on_got_introduction",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteSenderDialog.on_send_completed": {
            "name": "on_send_completed",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteSenderDialog.handle_failure": {
            "name": "handle_failure",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failure": [
                    "typing.IO",
                    "str"
                ]
            }
        },
        "InviteSenderDialog.on_created_invite": {
            "name": "on_created_invite",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteSenderDialog.go": {
            "name": "go",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteSenderDialog.closeEvent": {
            "name": "closeEvent",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "InviteSenderDialog.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "InviteReceiverDialog.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateways": [
                    "int",
                    "float"
                ]
            }
        },
        "InviteReceiverDialog.reset": {
            "name": "reset",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteReceiverDialog.show_error": {
            "name": "show_error",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "InviteReceiverDialog.update_progress": {
            "name": "update_progress",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "bool",
                    "dict[, ]"
                ]
            }
        },
        "InviteReceiverDialog.set_joined_folders": {
            "name": "set_joined_folders",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folders": [
                    "int"
                ]
            }
        },
        "InviteReceiverDialog.on_got_icon": {
            "name": "on_got_icon",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "InviteReceiverDialog.on_done": {
            "name": "on_done",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "InviteReceiverDialog.on_grid_already_joined": {
            "name": "on_grid_already_joined",
            "location": 451,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid_name": [
                    "str"
                ]
            }
        },
        "InviteReceiverDialog.got_message": {
            "name": "got_message",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "InviteReceiverDialog.got_welcome": {
            "name": "got_welcome",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InviteReceiverDialog.handle_failure": {
            "name": "handle_failure",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failure": [
                    "int",
                    "str",
                    "typing.Callable[, ]",
                    "float",
                    "None"
                ]
            }
        },
        "InviteReceiverDialog.go": {
            "name": "go",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "InviteReceiverDialog.enterEvent": {
            "name": "enterEvent",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "InviteReceiverDialog.closeEvent": {
            "name": "closeEvent",
            "location": 505,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "InviteReceiverDialog.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 513,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "gridsync-master/gridsync/gui/status.py": {
        "StatusPanel.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ],
                "gui": [
                    "bool",
                    "str",
                    "list[str]",
                    "None"
                ]
            }
        },
        "StatusPanel._update_status_label": {
            "name": "_update_status_label",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusPanel.on_sync_status_updated": {
            "name": "on_sync_status_updated",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int"
                ]
            }
        },
        "StatusPanel.on_space_updated": {
            "name": "on_space_updated",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bytes_available": [
                    "int",
                    "bytearray",
                    "bytes"
                ]
            }
        },
        "StatusPanel.on_nodes_updated": {
            "name": "on_nodes_updated",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connected": [
                    "int"
                ],
                "known": [
                    "int"
                ]
            }
        },
        "StatusPanel.on_total_folders_size_updated": {
            "name": "on_total_folders_size_updated",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "str",
                    "list[]",
                    "bool"
                ]
            }
        },
        "StatusPanel.on_days_remaining_updated": {
            "name": "on_days_remaining_updated",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "days": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "gridsync-master/gridsync/gui/systray.py": {
        "SystemTrayIcon.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui": [
                    "int"
                ]
            }
        },
        "SystemTrayIcon.add_operation": {
            "name": "add_operation",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "int"
                ]
            }
        },
        "SystemTrayIcon.remove_operation": {
            "name": "remove_operation",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "SystemTrayIcon.update": {
            "name": "update",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemTrayIcon.on_click": {
            "name": "on_click",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "gridsync-master/gridsync/gui/toolbar.py": {
        "ComboBox.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None"
                ]
            }
        },
        "ComboBox.on_activated": {
            "name": "on_activated",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "bool",
                    "str"
                ]
            }
        },
        "ComboBox.add_gateway": {
            "name": "add_gateway",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "str",
                    "None",
                    "int"
                ]
            }
        },
        "ComboBox.activate": {
            "name": "activate",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "tuple[str]",
                    "int"
                ]
            }
        },
        "ToolBar.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "main_window": [
                    "bool",
                    "str"
                ]
            }
        },
        "ToolBar._update_action_visibility": {
            "name": "_update_action_visibility",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolBar._maybe_enable_actions": {
            "name": "_maybe_enable_actions",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolBar.update_actions": {
            "name": "update_actions",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolBar.on_folders_activated": {
            "name": "on_folders_activated",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolBar.on_usage_activated": {
            "name": "on_usage_activated",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ToolBar.on_history_activated": {
            "name": "on_history_activated",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/gui/usage.py": {
        "make_explainer_label": {
            "name": "make_explainer_label",
            "location": 34,
            "return": [
                "QLabel"
            ],
            "arguments": {}
        },
        "make_redeeming_label": {
            "name": "make_redeeming_label",
            "location": 47,
            "return": [
                "QLabel"
            ],
            "arguments": {}
        },
        "make_title": {
            "name": "make_title",
            "location": 60,
            "return": [
                "QLabel"
            ],
            "arguments": {}
        },
        "make_info_label": {
            "name": "make_info_label",
            "location": 70,
            "return": [
                "QLabel"
            ],
            "arguments": {}
        },
        "make_status_label": {
            "name": "make_status_label",
            "location": 76,
            "return": [
                "QLabel"
            ],
            "arguments": {}
        },
        "make_loading_storage_time": {
            "name": "make_loading_storage_time",
            "location": 82,
            "return": [
                "QLabel"
            ],
            "arguments": {}
        },
        "UsageView._zkaps_required_label_default": {
            "name": "_zkaps_required_label_default",
            "location": 136,
            "return": [
                "QLabel"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView._chart_view_default": {
            "name": "_chart_view_default",
            "location": 151,
            "return": [
                "ZKAPBarChartView"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView._button_default": {
            "name": "_button_default",
            "location": 159,
            "return": [
                "QPushButton"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView._voucher_link_default": {
            "name": "_voucher_link_default",
            "location": 173,
            "return": [
                "QLabel"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView._groupbox_default": {
            "name": "_groupbox_default",
            "location": 181,
            "return": [
                "QGroupBox"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView.is_commercial_grid": {
            "name": "is_commercial_grid",
            "location": 207,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView.__attrs_pre_init__": {
            "name": "__attrs_pre_init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView._reset_status": {
            "name": "_reset_status",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView.add_voucher": {
            "name": "add_voucher",
            "location": 251,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "voucher": [
                    "typing.Text"
                ]
            }
        },
        "UsageView._traceback": {
            "name": "_traceback",
            "location": 265,
            "return": [
                "str"
            ],
            "arguments": {
                "exc": [
                    "dict[str, str]",
                    "typing.Generator[]"
                ]
            }
        },
        "UsageView.on_voucher_link_clicked": {
            "name": "on_voucher_link_clicked",
            "location": 274,
            "return": [
                "None",
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView._open_zkap_payment_url": {
            "name": "_open_zkap_payment_url",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView.on_button_clicked": {
            "name": "on_button_clicked",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView._update_info_label": {
            "name": "_update_info_label",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView.on_zkaps_redeemed": {
            "name": "on_zkaps_redeemed",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "UsageView._update_chart": {
            "name": "_update_chart",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsageView.on_redeeming_vouchers_updated": {
            "name": "on_redeeming_vouchers_updated",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vouchers": [
                    "bool",
                    "list[list[str]]"
                ]
            }
        },
        "UsageView.on_zkaps_updated": {
            "name": "on_zkaps_updated",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "used": [
                    "int",
                    "list[int]",
                    "float"
                ],
                "remaining": [
                    "int"
                ]
            }
        },
        "UsageView.on_zkaps_renewal_cost_updated": {
            "name": "on_zkaps_renewal_cost_updated",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cost": [
                    "bool",
                    "list[list[str]]"
                ],
                "period": [
                    "bool",
                    "list[list[str]]"
                ]
            }
        },
        "UsageView.on_days_remaining_updated": {
            "name": "on_days_remaining_updated",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "days": [
                    "int",
                    "str"
                ]
            }
        },
        "UsageView.on_total_folders_size_updated": {
            "name": "on_total_folders_size_updated",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "tuple[typing.Union[int,int]]",
                    "str"
                ]
            }
        },
        "UsageView.on_low_zkaps_warning": {
            "name": "on_low_zkaps_warning",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/gui/view.py": {
        "Delegate.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str"
                ]
            }
        },
        "Delegate.on_frame_changed": {
            "name": "on_frame_changed",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Delegate.paint": {
            "name": "paint",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "painter": [],
                "option": [
                    "dict[, ]",
                    "bytes"
                ],
                "index": []
            }
        },
        "View.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui": [
                    "int",
                    "float",
                    "list[list[int]]"
                ],
                "gateway": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "View.get_model": {
            "name": "get_model",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View._create_rootcap": {
            "name": "_create_rootcap",
            "location": 169,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.maybe_prompt_for_recovery": {
            "name": "maybe_prompt_for_recovery",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.show_drop_label": {
            "name": "show_drop_label",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "None",
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "View.hide_drop_label": {
            "name": "hide_drop_label",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.on_double_click": {
            "name": "on_double_click",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float"
                ]
            }
        },
        "View.open_invite_sender_dialog": {
            "name": "open_invite_sender_dialog",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "View.download_folder": {
            "name": "download_folder",
            "location": 227,
            "return": [
                "typing.Generator[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ],
                "dest": [
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "View.select_download_location": {
            "name": "select_download_location",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folders": [
                    "str"
                ]
            }
        },
        "View.show_failure": {
            "name": "show_failure",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failure": [
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "View.remove_folder_backup": {
            "name": "remove_folder_backup",
            "location": 259,
            "return": [
                "typing.Generator[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str"
                ]
            }
        },
        "View.confirm_remove_folder_backup": {
            "name": "confirm_remove_folder_backup",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folders": []
            }
        },
        "View.remove_folder": {
            "name": "remove_folder",
            "location": 307,
            "return": [
                "typing.Generator[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "folder_name": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ],
                "remove_backup": [
                    "bool"
                ]
            }
        },
        "View.confirm_stop_syncing": {
            "name": "confirm_stop_syncing",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folders": []
            }
        },
        "View.open_folders": {
            "name": "open_folders",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "folders": [
                    "str",
                    "bytes"
                ]
            }
        },
        "View.deselect_local_folders": {
            "name": "deselect_local_folders",
            "location": 391,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.deselect_remote_folders": {
            "name": "deselect_remote_folders",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.get_selected_folders": {
            "name": "get_selected_folders",
            "location": 413,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.on_right_click": {
            "name": "on_right_click",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "dict[str, i]"
                ]
            }
        },
        "View.add_folder": {
            "name": "add_folder",
            "location": 499,
            "return": [
                "typing.Generator[]",
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "View.add_folders": {
            "name": "add_folders",
            "location": 519,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "list[P]",
                    "str"
                ]
            }
        },
        "View.select_folder": {
            "name": "select_folder",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "View.dragEnterEvent": {
            "name": "dragEnterEvent",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "View.dragLeaveEvent": {
            "name": "dragLeaveEvent",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "View.dragMoveEvent": {
            "name": "dragMoveEvent",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "View.dropEvent": {
            "name": "dropEvent",
            "location": 570,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "View.eventFilter": {
            "name": "eventFilter",
            "location": 579,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int"
                ],
                "event": [
                    "dict[, ]"
                ]
            }
        },
        "View.paintEvent": {
            "name": "paintEvent",
            "location": 594,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "View.showEvent": {
            "name": "showEvent",
            "location": 611,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "gridsync-master/gridsync/gui/voucher.py": {
        "VoucherCodeDialog.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None"
                ]
            }
        },
        "VoucherCodeDialog.on_return_pressed": {
            "name": "on_return_pressed",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoucherCodeDialog.get_voucher": {
            "name": "get_voucher",
            "location": 58,
            "return": [
                "tuple[typing.Union[str,list[int],None]]"
            ],
            "arguments": {
                "parent": [
                    "None",
                    "str",
                    "int"
                ]
            }
        }
    },
    "gridsync-master/gridsync/gui/welcome.py": {
        "WelcomeWidget.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "None",
                    "str",
                    "dict[, ]",
                    "bytes",
                    "bool",
                    "float"
                ]
            }
        },
        "WelcomeWidget.show_error": {
            "name": "show_error",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict[str, typing.Any]",
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "WelcomeWidget.reset": {
            "name": "reset",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgressBarWidget.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgressBarWidget.update_progress": {
            "name": "update_progress",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "ProgressBarWidget.is_complete": {
            "name": "is_complete",
            "location": 245,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgressBarWidget.reset": {
            "name": "reset",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WelcomeDialog.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gui": [
                    "float",
                    "int",
                    "tuple[]",
                    "str"
                ],
                "known_gateways": [
                    "None",
                    "float",
                    "int",
                    "tuple[]",
                    "str"
                ]
            }
        },
        "WelcomeDialog.on_configure_link_activated": {
            "name": "on_configure_link_activated",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WelcomeDialog.update_progress": {
            "name": "update_progress",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str"
                ]
            }
        },
        "WelcomeDialog.show_error": {
            "name": "show_error",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "WelcomeDialog.reset": {
            "name": "reset",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WelcomeDialog.load_service_icon": {
            "name": "load_service_icon",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "bool",
                    "typing.Iterable[]",
                    "typing.Type"
                ]
            }
        },
        "WelcomeDialog.handle_failure": {
            "name": "handle_failure",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failure": [
                    "Exception",
                    "None"
                ]
            }
        },
        "WelcomeDialog.on_done": {
            "name": "on_done",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateway": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "WelcomeDialog.on_already_joined": {
            "name": "on_already_joined",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "grid_name": [
                    "str"
                ]
            }
        },
        "WelcomeDialog.verify_settings": {
            "name": "verify_settings",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "bool"
                ],
                "from_wormhole": [
                    "bool"
                ]
            }
        },
        "WelcomeDialog.on_import_done": {
            "name": "on_import_done",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "dict[str, str]"
                ]
            }
        },
        "WelcomeDialog.on_restore_link_activated": {
            "name": "on_restore_link_activated",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WelcomeDialog.go": {
            "name": "go",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "None"
                ],
                "settings": [
                    "None",
                    "str"
                ]
            }
        },
        "WelcomeDialog.cancel_button_clicked": {
            "name": "cancel_button_clicked",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WelcomeDialog.on_accepted": {
            "name": "on_accepted",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WelcomeDialog.finish_button_clicked": {
            "name": "finish_button_clicked",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WelcomeDialog.enterEvent": {
            "name": "enterEvent",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "WelcomeDialog.closeEvent": {
            "name": "closeEvent",
            "location": 477,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "gridsync-master/gridsync/gui/widgets.py": {
        "VSpacer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HSpacer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClickableLabel.mousePressEvent": {
            "name": "mousePressEvent",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "list[dict[, ]]",
                    "tuple[]",
                    "None"
                ]
            }
        },
        "ConnectionSettings.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionSettings.maybe_enable_tor": {
            "name": "maybe_enable_tor",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodingParameters.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncodingParameters.on_value_changed": {
            "name": "on_value_changed",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "None",
                    "typing.Mapping",
                    "tuple[bool]"
                ]
            }
        },
        "EncodingParameters.on_total_changed": {
            "name": "on_total_changed",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "typing.ByteString",
                    "float"
                ]
            }
        },
        "TahoeConfigForm.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TahoeConfigForm.set_name": {
            "name": "set_name",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TahoeConfigForm.set_introducer": {
            "name": "set_introducer",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "introducer": [
                    "str",
                    "int"
                ]
            }
        },
        "TahoeConfigForm.set_shares_total": {
            "name": "set_shares_total",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shares": []
            }
        },
        "TahoeConfigForm.set_shares_needed": {
            "name": "set_shares_needed",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shares": []
            }
        },
        "TahoeConfigForm.set_shares_happy": {
            "name": "set_shares_happy",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shares": []
            }
        },
        "TahoeConfigForm.get_name": {
            "name": "get_name",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TahoeConfigForm.get_introducer": {
            "name": "get_introducer",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TahoeConfigForm.get_shares_total": {
            "name": "get_shares_total",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TahoeConfigForm.get_shares_needed": {
            "name": "get_shares_needed",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TahoeConfigForm.get_shares_happy": {
            "name": "get_shares_happy",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TahoeConfigForm.reset": {
            "name": "reset",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TahoeConfigForm.get_settings": {
            "name": "get_settings",
            "location": 192,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/gridsync/gui/__init__.py": {
        "AbstractGui.show": {
            "name": "show",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGui.show_preferences_window": {
            "name": "show_preferences_window",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGui.show_debug_exporter": {
            "name": "show_debug_exporter",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractGui.show_message": {
            "name": "show_message",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "message": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "Gui._default_welcome_dialog": {
            "name": "_default_welcome_dialog",
            "location": 48,
            "return": [
                "WelcomeDialog"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui._main_window_default": {
            "name": "_main_window_default",
            "location": 52,
            "return": [
                "MainWindow"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui._default_preferences_window": {
            "name": "_default_preferences_window",
            "location": 56,
            "return": [
                "PreferencesWindow"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui._systray_default": {
            "name": "_systray_default",
            "location": 60,
            "return": [
                "SystemTrayIcon"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui._debug_exporter_default": {
            "name": "_debug_exporter_default",
            "location": 64,
            "return": [
                "DebugExporter"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui.show_message": {
            "name": "show_message",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "bytes",
                    "typing.Callable[bytes, bytes]",
                    "dict[, ]",
                    "str"
                ],
                "message": [
                    "bytes",
                    "typing.Callable[bytes, bytes]",
                    "dict[, ]",
                    "str"
                ],
                "duration": [
                    "int"
                ]
            }
        },
        "Gui.show_welcome_dialog": {
            "name": "show_welcome_dialog",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui.show_main_window": {
            "name": "show_main_window",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui.show_preferences_window": {
            "name": "show_preferences_window",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui.show_systray": {
            "name": "show_systray",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui.show": {
            "name": "show",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui.hide": {
            "name": "hide",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui.toggle": {
            "name": "toggle",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gui.populate": {
            "name": "populate",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gateways": [
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "Gui.show_debug_exporter": {
            "name": "show_debug_exporter",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/misc/dmgbuild_settings.py": {
        "icon_from_app": {
            "name": "icon_from_app",
            "location": 40,
            "return": [],
            "arguments": {
                "app_path": []
            }
        }
    },
    "gridsync-master/pyinstaller-hooks/hook-twisted.plugins.py": {
        "hook": {
            "name": "hook",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "api": []
            }
        }
    },
    "gridsync-master/pyinstaller-hooks/pre_safe_import_module/hook-twisted.plugins.py": {
        "pre_safe_import_module": {
            "name": "pre_safe_import_module",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "api": []
            }
        }
    },
    "gridsync-master/pyinstaller-hooks/rthooks/runtime-twisted.plugins.py": {
        "load_cache": {
            "name": "load_cache",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "getCache": {
            "name": "getCache",
            "location": 20,
            "return": [
                "None",
                "dict[, ]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "list[tuple[typing.Union[str,str]]]",
                    "bool"
                ]
            }
        }
    },
    "gridsync-master/scripts/call_dmgbuild.py": {},
    "gridsync-master/scripts/check_outdated.py": {
        "check_outdated": {
            "name": "check_outdated",
            "location": 10,
            "return": [
                "tuple[typing.Union[str,list[str],int,list[]]]"
            ],
            "arguments": {
                "pip_path": [
                    "str",
                    "bool",
                    "None"
                ],
                "env_name": [
                    "str",
                    "list[str]",
                    "int"
                ]
            }
        },
        "get_virtualenvs": {
            "name": "get_virtualenvs",
            "location": 29,
            "return": [
                "list[tuple[str]]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/scripts/codesign.py": {
        "codesign_app": {
            "name": "codesign_app",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "developer_id": [
                    "str",
                    "list[]"
                ],
                "path": [
                    "str",
                    "list[]"
                ]
            }
        },
        "codesign_dmg": {
            "name": "codesign_dmg",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "developer_id": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "codesign_verify": {
            "name": "codesign_verify",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[pathlib.Path]"
                ]
            }
        },
        "codesign_display": {
            "name": "codesign_display",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[pathlib.Path]"
                ]
            }
        },
        "spctl_assess_app": {
            "name": "spctl_assess_app",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "spctl_assess_dmg": {
            "name": "spctl_assess_dmg",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list[pathlib.Path]"
                ]
            }
        }
    },
    "gridsync-master/scripts/extract_dmg.py": {},
    "gridsync-master/scripts/get_yum_packages.py": {
        "get_files": {
            "name": "get_files",
            "location": 9,
            "return": [
                "list[]"
            ],
            "arguments": {
                "appimage_path": [
                    "str"
                ]
            }
        },
        "get_libs": {
            "name": "get_libs",
            "location": 18,
            "return": [
                "set[typing.Union[list[str],str]]"
            ],
            "arguments": {
                "files": [
                    "list[]"
                ]
            }
        },
        "get_pkg_name": {
            "name": "get_pkg_name",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "pkg": [
                    "str"
                ]
            }
        },
        "get_pkg": {
            "name": "get_pkg",
            "location": 37,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "lib": [
                    "str",
                    "int"
                ]
            }
        },
        "get_pkgs": {
            "name": "get_pkgs",
            "location": 48,
            "return": [
                "set[typing.Union[str,dict[str, int]]]"
            ],
            "arguments": {
                "libs": [
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "gridsync-master/scripts/gpg.py": {},
    "gridsync-master/scripts/irc-notify.py": {
        "_pf": {
            "name": "_pf",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "gridsync-master/scripts/make_appimage.py": {},
    "gridsync-master/scripts/make_archive.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/scripts/make_installer.py": {},
    "gridsync-master/scripts/make_source_tarball.py": {
        "should_ignore": {
            "name": "should_ignore",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "gridsync-master/scripts/make_zip.py": {
        "make_zip": {
            "name": "make_zip",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "base_name": [
                    "str",
                    "bool",
                    "None"
                ],
                "root_dir": [
                    "None",
                    "str",
                    "bytes"
                ],
                "base_dir": [
                    "None",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "gridsync-master/scripts/mypy-wrapper.py": {},
    "gridsync-master/scripts/notarize.py": {
        "sha256sum": {
            "name": "sha256sum",
            "location": 23,
            "return": [],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "make_zipfile": {
            "name": "make_zipfile",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "src_path": [
                    "str"
                ],
                "dst_path": [
                    "str"
                ]
            }
        },
        "notarize_app": {
            "name": "notarize_app",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "None"
                ],
                "bundle_id": [
                    "str",
                    "bool"
                ],
                "username": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ]
            }
        },
        "notarization_info": {
            "name": "notarization_info",
            "location": 65,
            "return": [
                "dict[str, typing.Union[str,set[str],tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal,typing.Literal,typing.Literal]],list[]]]"
            ],
            "arguments": {
                "uuid": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "staple": {
            "name": "staple",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "notarize": {
            "name": "notarize",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "None"
                ],
                "bundle_id": [
                    "str",
                    "bool",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "username": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "password": [
                    "bool",
                    "str",
                    "None",
                    "dict[, ]"
                ],
                "sha256_hash": [
                    "None",
                    "str"
                ]
            }
        }
    },
    "gridsync-master/scripts/reproducible-pip.py": {},
    "gridsync-master/scripts/sha256sum.py": {
        "sha256sum": {
            "name": "sha256sum",
            "location": 12,
            "return": [],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/scripts/signtool.py": {},
    "gridsync-master/scripts/test_determinism.py": {
        "sha256sum": {
            "name": "sha256sum",
            "location": 17,
            "return": [],
            "arguments": {
                "filepath": [
                    "str"
                ]
            }
        },
        "call_make_clean_zip": {
            "name": "call_make_clean_zip",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/scripts/update_permissions.py": {
        "update_permissions": {
            "name": "update_permissions",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "gridsync-master/scripts/update_timestamps.py": {
        "git_timestamp": {
            "name": "git_timestamp",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "update_timestamps": {
            "name": "update_timestamps",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "timestamp": [
                    "str"
                ]
            }
        }
    },
    "gridsync-master/scripts/upload_artifacts.py": {},
    "gridsync-master/tests/conftest.py": {
        "reactor": {
            "name": "reactor",
            "location": 72,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "_tahoe": {
            "name": "_tahoe",
            "location": 76,
            "return": [
                "Tahoe"
            ],
            "arguments": {
                "tmpdir_factory": [],
                "reactor": [
                    "str",
                    "typing.Any",
                    "None",
                    "tuple[typing.Any]",
                    "list[int]",
                    "int"
                ]
            }
        },
        "tahoe_factory": {
            "name": "tahoe_factory",
            "location": 104,
            "return": [],
            "arguments": {
                "tmpdir_factory": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "tahoe": {
            "name": "tahoe",
            "location": 109,
            "return": [],
            "arguments": {
                "tmpdir_factory": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ],
                "reactor": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "fake_tahoe": {
            "name": "fake_tahoe",
            "location": 114,
            "return": [
                "Mock"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/tests/test_config.py": {
        "test_config_set": {
            "name": "test_config_set",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_config_get": {
            "name": "test_config_get",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_config_get_no_section_error": {
            "name": "test_config_get_no_section_error",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_config_get_no_option_error": {
            "name": "test_config_get_no_option_error",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "dict[, ]"
                ]
            }
        },
        "test_config_save": {
            "name": "test_config_save",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": [
                    "dict[, ]"
                ]
            }
        },
        "test_config_load": {
            "name": "test_config_load",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "gridsync-master/tests/test_crypto.py": {
        "fast_kdf": {
            "name": "fast_kdf",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "ciphertext_with_argon2": {
            "name": "ciphertext_with_argon2",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "crypter": {
            "name": "crypter",
            "location": 21,
            "return": [
                "Crypter"
            ],
            "arguments": {}
        },
        "test_randstr_random": {
            "name": "test_randstr_random",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_randstr_length": {
            "name": "test_randstr_length",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_randstr_alphabet": {
            "name": "test_randstr_alphabet",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_argon2id_saltbytes": {
            "name": "test_argon2id_saltbytes",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_argon2id_opslimit": {
            "name": "test_argon2id_opslimit",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_argon2id_memlimit": {
            "name": "test_argon2id_memlimit",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_secretbox_key_size": {
            "name": "test_secretbox_key_size",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_secretbox_nonce_size": {
            "name": "test_secretbox_nonce_size",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_encrypt_decrypt_success_kdf_monkeypatch": {
            "name": "test_encrypt_decrypt_success_kdf_monkeypatch",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_encrypt_decrypt_fail_wrong_password_kdf_monkeypatch": {
            "name": "test_encrypt_decrypt_fail_wrong_password_kdf_monkeypatch",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_decrypt_success_slow": {
            "name": "test_decrypt_success_slow",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "ciphertext_with_argon2": [
                    "str",
                    "float"
                ]
            }
        },
        "test_decrypt_fail_incorrect_password_slow": {
            "name": "test_decrypt_fail_incorrect_password_slow",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "ciphertext_with_argon2": [
                    "typing.Type",
                    "str"
                ]
            }
        },
        "test_decrypt_fail_incorrect_version_byte": {
            "name": "test_decrypt_fail_incorrect_version_byte",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_crypter_encrypt_succeeded_signal": {
            "name": "test_crypter_encrypt_succeeded_signal",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "crypter": [],
                "monkeypatch": [],
                "qtbot": [
                    "str",
                    "float"
                ]
            }
        },
        "test_crypter_encrypt_failed_signal": {
            "name": "test_crypter_encrypt_failed_signal",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "crypter": [],
                "monkeypatch": [],
                "qtbot": [
                    "str",
                    "float"
                ]
            }
        },
        "test_crypter_decrypt_succeeded_signal": {
            "name": "test_crypter_decrypt_succeeded_signal",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "crypter": [],
                "monkeypatch": [],
                "qtbot": [
                    "str",
                    "float"
                ]
            }
        },
        "test_crypter_decrypt_failed_signal": {
            "name": "test_crypter_decrypt_failed_signal",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "crypter": [],
                "monkeypatch": [],
                "qtbot": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "gridsync-master/tests/test_desktop.py": {
        "test_notify_calls__txdbus_notify_on_linux": {
            "name": "test_notify_calls__txdbus_notify_on_linux",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_fallback_to_show_message_on_dbus_notify_error": {
            "name": "test_fallback_to_show_message_on_dbus_notify_error",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "error": [],
                "monkeypatch": []
            }
        },
        "test_notify_call_systray_show_message": {
            "name": "test_notify_call_systray_show_message",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test__desktop_open_call_qdesktopservices_openurl": {
            "name": "test__desktop_open_call_qdesktopservices_openurl",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_open_enclosing_folder": {
            "name": "test_open_enclosing_folder",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "platform": [
                    "str",
                    "bool"
                ],
                "mocked_call": [],
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_open_enclosing_folder_log_warn_if_not_exists": {
            "name": "test_open_enclosing_folder_log_warn_if_not_exists",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_open_path": {
            "name": "test_open_path",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "platform": [
                    "str",
                    "bool"
                ],
                "mocked_call": [
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_open_path_log_warn_if_not_exists": {
            "name": "test_open_path_log_warn_if_not_exists",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_get_clipboard_modes": {
            "name": "test_get_clipboard_modes",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clipboard_text": {
            "name": "test_clipboard_text",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tmpfile": {
            "name": "tmpfile",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ]
            }
        },
        "test_autostart_is_enabled_true": {
            "name": "test_autostart_is_enabled_true",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpfile": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "test_autostart_is_enabled_false": {
            "name": "test_autostart_is_enabled_false",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpfile": [
                    "bool"
                ],
                "monkeypatch": []
            }
        },
        "test_autostart_enable": {
            "name": "test_autostart_enable",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpfile": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "monkeypatch": []
            }
        },
        "test_autostart_enable_appimage": {
            "name": "test_autostart_enable_appimage",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpfile": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "monkeypatch": []
            }
        },
        "test_autostart_enable_frozen": {
            "name": "test_autostart_enable_frozen",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpfile": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "monkeypatch": []
            }
        },
        "test_autostart_enable_linux": {
            "name": "test_autostart_enable_linux",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpfile": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "monkeypatch": []
            }
        },
        "test_autostart_enable_mac": {
            "name": "test_autostart_enable_mac",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpfile": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ],
                "monkeypatch": []
            }
        },
        "test_autostart_enable_windows": {
            "name": "test_autostart_enable_windows",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpfile": [],
                "monkeypatch": []
            }
        },
        "test_autostart_disable": {
            "name": "test_autostart_disable",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpfile": [],
                "monkeypatch": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_get_browser_name": {
            "name": "test_get_browser_name",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "mocked_name": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "None"
                ],
                "result": [
                    "str"
                ]
            }
        },
        "test_get_browser_name_fallback_if_errors": {
            "name": "test_get_browser_name_fallback_if_errors",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "side_effect": []
            }
        },
        "test_get_browser_name_fallback_if_get_returns_none": {
            "name": "test_get_browser_name_fallback_if_get_returns_none",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_notify_calls__txdbus_notify_on_linux.fake_dbus_notify": {
            "name": "fake_dbus_notify",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [],
                "message": [],
                "duration": []
            }
        },
        "test_fallback_to_show_message_on_dbus_notify_error.fake_show_message": {
            "name": "fake_show_message",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [],
                "message": [],
                "msecs": []
            }
        },
        "test_notify_call_systray_show_message.fake_show_message": {
            "name": "fake_show_message",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "title": [],
                "message": [],
                "msecs": []
            }
        }
    },
    "gridsync-master/tests/test_filter.py": {
        "core": {
            "name": "core",
            "location": 21,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "test_get_filters_pair_in_default_filters": {
            "name": "test_get_filters_pair_in_default_filters",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "core": [
                    "int"
                ],
                "pair": [
                    "str",
                    "dict[str, float]",
                    "bool"
                ]
            }
        },
        "test_apply_filters_string_not_in_result": {
            "name": "test_apply_filters_string_not_in_result",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "core": [
                    "str",
                    "list[]"
                ],
                "string": [
                    "str",
                    "dict[, ]",
                    "dict[str, str]"
                ]
            }
        },
        "test_apply_filters_filtered_string_in_result": {
            "name": "test_apply_filters_filtered_string_in_result",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "core": [
                    "str",
                    "list[str]"
                ],
                "string": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ],
                "filtered": [
                    "list[str]"
                ]
            }
        },
        "test__apply_filter_by_action_type": {
            "name": "test__apply_filter_by_action_type",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [],
                "keys": [
                    "str"
                ]
            }
        },
        "test__apply_filter_by_message_type": {
            "name": "test__apply_filter_by_message_type",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [],
                "keys": [
                    "str"
                ]
            }
        },
        "test_filter_eliot_logs_apply_filter": {
            "name": "test_filter_eliot_logs_apply_filter",
            "location": 637,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filter_eliot_logs_apply_filter_use_identifier": {
            "name": "test_filter_eliot_logs_apply_filter_use_identifier",
            "location": 647,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_join_eliot_logs_sort_output": {
            "name": "test_join_eliot_logs_sort_output",
            "location": 657,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/tests/test_invite.py": {
        "test_is_valid_code": {
            "name": "test_is_valid_code",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "int"
                ],
                "result": [
                    "str",
                    "list[str]",
                    "dict[, ]",
                    "int"
                ]
            }
        },
        "test_invite_code_widget_lineedit": {
            "name": "test_invite_code_widget_lineedit",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invite_code_widget_tor_checkbox": {
            "name": "test_invite_code_widget_tor_checkbox",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_show_failure": {
            "name": "test_show_failure",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "failure": [
                    "str",
                    "float"
                ],
                "monkeypatch": []
            }
        },
        "test_show_failure.fake_failure": {
            "name": "fake_failure",
            "location": 60,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "failure": []
            }
        }
    },
    "gridsync-master/tests/test_lock.py": {
        "test_lock_acquire": {
            "name": "test_lock_acquire",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_lock_acquire_filepath_created": {
            "name": "test_lock_acquire_filepath_created",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_lock_acquire_raise_filesystemlockerror_on_second_call": {
            "name": "test_lock_acquire_raise_filesystemlockerror_on_second_call",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_lock_acquire_raise_filesystemlockerror_from_second_instance": {
            "name": "test_lock_acquire_raise_filesystemlockerror_from_second_instance",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_lock_release": {
            "name": "test_lock_release",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "gridsync-master/tests/test_magic_folder.py": {
        "test__read_api_token": {
            "name": "test__read_api_token",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test__read_api_token_raises_magic_folder_config_error_if_missing": {
            "name": "test__read_api_token_raises_magic_folder_config_error_if_missing",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test__read_api_port": {
            "name": "test__read_api_port",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test__read_api_port_raises_magic_folder_config_error_if_missing": {
            "name": "test__read_api_port_raises_magic_folder_config_error_if_missing",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test__read_api_port_raises_magic_folder_error_if_not_running": {
            "name": "test__read_api_port_raises_magic_folder_error_if_not_running",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test__read_api_port_raises_magic_folder_config_error_if_not_int": {
            "name": "test__read_api_port_raises_magic_folder_config_error_if_not_int",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_magic_folder_monitor__parse_folder_statuses": {
            "name": "test_magic_folder_monitor__parse_folder_statuses",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "int"
                ],
                "state": [
                    "str",
                    "None"
                ],
                "status": [
                    "str",
                    "dict[str, typing.Any]",
                    "None",
                    "list[str]"
                ]
            }
        }
    },
    "gridsync-master/tests/test_monitor.py": {
        "test_grid_checker_emit_space_updated": {
            "name": "test_grid_checker_emit_space_updated",
            "location": 13,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [
                    "str"
                ]
            }
        },
        "test_grid_checker_emit_nodes_updated_": {
            "name": "test_grid_checker_emit_nodes_updated_",
            "location": 22,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": []
            }
        },
        "test_grid_checker_emit_connected": {
            "name": "test_grid_checker_emit_connected",
            "location": 31,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [
                    "str",
                    "float"
                ]
            }
        },
        "test_grid_checker_emit_disconnected": {
            "name": "test_grid_checker_emit_disconnected",
            "location": 39,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [
                    "str",
                    "float"
                ]
            }
        },
        "test_grid_checker_not_connected": {
            "name": "test_grid_checker_not_connected",
            "location": 48,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_monitor_emit_check_finished": {
            "name": "test_monitor_emit_check_finished",
            "location": 56,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "typing.Mapping"
                ],
                "qtbot": []
            }
        },
        "test_monitor_start": {
            "name": "test_monitor_start",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_monitor_multiple_start": {
            "name": "test_monitor_multiple_start",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zkaps_update_last_redeemed": {
            "name": "test_zkaps_update_last_redeemed",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [
                    "str"
                ]
            }
        },
        "test__parse_voucher_contains_redeeming_vouchers": {
            "name": "test__parse_voucher_contains_redeeming_vouchers",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test__update_redeeming_vouchers_emits_redeeming_vouchers_updated": {
            "name": "test__update_redeeming_vouchers_emits_redeeming_vouchers_updated",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": []
            }
        }
    },
    "gridsync-master/tests/test_network.py": {
        "test_get_local_network_ip_returns_str": {
            "name": "test_get_local_network_ip_returns_str",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_local_network_ip_is_ip_address": {
            "name": "test_get_local_network_ip_is_ip_address",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_free_port_returns_int": {
            "name": "test_get_free_port_returns_int",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_free_port_is_random": {
            "name": "test_get_free_port_is_random",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_free_port_with_port_in_use": {
            "name": "test_get_free_port_with_port_in_use",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_free_port_raise_error": {
            "name": "test_get_free_port_raise_error",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "gridsync-master/tests/test_news.py": {
        "newscap_checker": {
            "name": "newscap_checker",
            "location": 14,
            "return": [
                "NewscapChecker"
            ],
            "arguments": {
                "tahoe": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "test_newscap_checker_init_override_check_delay_values": {
            "name": "test_newscap_checker_init_override_check_delay_values",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker_init_delay_max_not_less_than_min": {
            "name": "test_newscap_checker_init_delay_max_not_less_than_min",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__download_messages": {
            "name": "test_newscap_checker__download_messages",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__download_messages_warn": {
            "name": "test_newscap_checker__download_messages_warn",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__download_emit_message_received_signal_newest_file": {
            "name": "test_newscap_checker__download_emit_message_received_signal_newest_file",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": [],
                "qtbot": []
            }
        },
        "test_newscap_checker__check_v1_return_early_no_content": {
            "name": "test_newscap_checker__check_v1_return_early_no_content",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__check_v1_return_early_warn_index_error": {
            "name": "test_newscap_checker__check_v1_return_early_warn_index_error",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__check_v1_return_early_warn_key_error": {
            "name": "test_newscap_checker__check_v1_return_early_warn_key_error",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__check_v1_make_messages_dirpath": {
            "name": "test_newscap_checker__check_v1_make_messages_dirpath",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__check_v1_append_downloads_win32_replace_colon": {
            "name": "test_newscap_checker__check_v1_append_downloads_win32_replace_colon",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__do_check_return_early_no_newscap": {
            "name": "test_newscap_checker__do_check_return_early_no_newscap",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__do_check_return_early_no_content": {
            "name": "test_newscap_checker__do_check_return_early_no_content",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__do_check_return_early_warn_index_error": {
            "name": "test_newscap_checker__do_check_return_early_warn_index_error",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__do_check_return_early_warn_key_error": {
            "name": "test_newscap_checker__do_check_return_early_warn_key_error",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__do_check_emit_upgrade_required_signal": {
            "name": "test_newscap_checker__do_check_emit_upgrade_required_signal",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": [],
                "qtbot": []
            }
        },
        "test_newscap_checker__do_check_call__check_v1": {
            "name": "test_newscap_checker__do_check_call__check_v1",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__do_check_write_last_checked_time_to_file": {
            "name": "test_newscap_checker__do_check_write_last_checked_time_to_file",
            "location": 450,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__do_check_log_warning_v1_not_dirnode": {
            "name": "test_newscap_checker__do_check_log_warning_v1_not_dirnode",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__do_check_log_warning_v1_not_found": {
            "name": "test_newscap_checker__do_check_log_warning_v1_not_found",
            "location": 547,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker__schedule_delayed_check_no_delay_use_randint": {
            "name": "test_newscap_checker__schedule_delayed_check_no_delay_use_randint",
            "location": 567,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": [],
                "qtbot": [
                    "str"
                ]
            }
        },
        "test_newscap_checker_start_idempotent": {
            "name": "test_newscap_checker_start_idempotent",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker_start_schedule_delayed_check_minimum_seconds": {
            "name": "test_newscap_checker_start_schedule_delayed_check_minimum_seconds",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        },
        "test_newscap_checker_start_schedule_delayed_check_random_seconds": {
            "name": "test_newscap_checker_start_schedule_delayed_check_random_seconds",
            "location": 601,
            "return": [
                "None"
            ],
            "arguments": {
                "newscap_checker": [],
                "monkeypatch": []
            }
        }
    },
    "gridsync-master/tests/test_recovery.py": {
        "test_show_error_msg_if_recovery_key_file_contains_only_numeric_chars": {
            "name": "test_show_error_msg_if_recovery_key_file_contains_only_numeric_chars",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_show_error_msg_if_recovery_file_is_a_directory": {
            "name": "test_show_error_msg_if_recovery_file_is_a_directory",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmp_path_factory": []
            }
        },
        "test_show_error_msg_if_os_error_raises": {
            "name": "test_show_error_msg_if_os_error_raises",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_show_error_msg_with_human_friendly_title": {
            "name": "test_show_error_msg_with_human_friendly_title",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        },
        "test_show_error_msg_if_recovery_file_is_empty": {
            "name": "test_show_error_msg_if_recovery_file_is_empty",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmp_path": []
            }
        }
    },
    "gridsync-master/tests/test_setup.py": {
        "test_is_onion_grid": {
            "name": "test_is_onion_grid",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "list[str]",
                    "None",
                    "str",
                    "bytes",
                    "list[int]"
                ],
                "result": [
                    "list[str]",
                    "None",
                    "str",
                    "bytes",
                    "list[int]"
                ]
            }
        },
        "test_is_zkap_grid": {
            "name": "test_is_zkap_grid",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "list[str]",
                    "None",
                    "str",
                    "bytes",
                    "list[int]"
                ],
                "result": [
                    "list[str]",
                    "None",
                    "str",
                    "bytes",
                    "list[int]"
                ]
            }
        },
        "test_prompt_for_grid_name": {
            "name": "test_prompt_for_grid_name",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_validate_grid_no_nickname": {
            "name": "test_validate_grid_no_nickname",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir_factory": []
            }
        },
        "test_validate_grid_conflicting_introducer": {
            "name": "test_validate_grid_conflicting_introducer",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir_factory": []
            }
        },
        "test_validate_grid_conflicting_servers": {
            "name": "test_validate_grid_conflicting_servers",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir_factory": []
            }
        },
        "test_prompt_for_folder_name": {
            "name": "test_prompt_for_folder_name",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_validate_folders_no_known_gateways": {
            "name": "test_validate_folders_no_known_gateways",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_folders_skip_folder": {
            "name": "test_validate_folders_skip_folder",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir_factory": []
            }
        },
        "test_validate_folders_rename_folder": {
            "name": "test_validate_folders_rename_folder",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir_factory": []
            }
        },
        "fake_validate": {
            "name": "fake_validate",
            "location": 226,
            "return": [
                "int",
                "str",
                "typing.Iterable[i]"
            ],
            "arguments": {
                "settings": [
                    "int",
                    "str",
                    "typing.Iterable[i]"
                ]
            }
        },
        "test_validate_settings_strip_rootcap": {
            "name": "test_validate_settings_strip_rootcap",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_validate_settings_strip_convergence_secret": {
            "name": "test_validate_settings_strip_convergence_secret",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "dict[str, typing.Any]",
                    "None",
                    "bool"
                ]
            }
        },
        "test_validate_settings_validate_folders": {
            "name": "test_validate_settings_validate_folders",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "test_get_gateway_no_gateways": {
            "name": "test_get_gateway_no_gateways",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fake_gateway": {
            "name": "fake_gateway",
            "location": 258,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "test_get_gateway_match_from_introducer": {
            "name": "test_get_gateway_match_from_introducer",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_gateway": [
                    "str"
                ]
            }
        },
        "test_get_gateway_match_from_servers": {
            "name": "test_get_gateway_match_from_servers",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_gateway": [
                    "str",
                    "None"
                ]
            }
        },
        "test_get_gateway_no_match": {
            "name": "test_get_gateway_no_match",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_gateway": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_calculate_total_steps_1_already_joined_grid": {
            "name": "test_calculate_total_steps_1_already_joined_grid",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_gateway": [
                    "str"
                ]
            }
        },
        "test_calculate_total_steps_5_need_to_join_grid": {
            "name": "test_calculate_total_steps_5_need_to_join_grid",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_gateway": [
                    "str"
                ]
            }
        },
        "test_calculate_total_steps_6_need_to_join_grid_and_1_folder": {
            "name": "test_calculate_total_steps_6_need_to_join_grid_and_1_folder",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_gateway": [
                    "str"
                ]
            }
        },
        "test_calculate_total_steps_7_need_to_join_grid_and_2_folders": {
            "name": "test_calculate_total_steps_7_need_to_join_grid_and_2_folders",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_gateway": [
                    "str"
                ]
            }
        },
        "test_decode_icon_b64decode": {
            "name": "test_decode_icon_b64decode",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_decode_icon_emit_got_icon_signal": {
            "name": "test_decode_icon_emit_got_icon_signal",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [],
                "tmpdir": []
            }
        },
        "test_decode_icon_no_emit_got_icon_signal": {
            "name": "test_decode_icon_no_emit_got_icon_signal",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ],
                "tmpdir": []
            }
        },
        "fake_get": {
            "name": "fake_get",
            "location": 339,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "fake_get_code_500": {
            "name": "fake_get_code_500",
            "location": 345,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "test_fetch_icon": {
            "name": "test_fetch_icon",
            "location": 352,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir": []
            }
        },
        "test_fetch_icon_use_tor": {
            "name": "test_fetch_icon_use_tor",
            "location": 363,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir": []
            }
        },
        "test_fetch_icon_use_tor_raise_tor_error": {
            "name": "test_fetch_icon_use_tor_raise_tor_error",
            "location": 389,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir": []
            }
        },
        "test_fetch_icon_emit_got_icon_signal": {
            "name": "test_fetch_icon_emit_got_icon_signal",
            "location": 398,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "qtbot": [],
                "tmpdir": []
            }
        },
        "test_fetch_icon_no_emit_got_icon_signal": {
            "name": "test_fetch_icon_no_emit_got_icon_signal",
            "location": 409,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "qtbot": [
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ],
                "tmpdir": []
            }
        },
        "test_join_grid_emit_update_progress_signal": {
            "name": "test_join_grid_emit_update_progress_signal",
            "location": 418,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "qtbot": [],
                "tmpdir": []
            }
        },
        "test_join_grid_emit_update_progress_signal_via_tor": {
            "name": "test_join_grid_emit_update_progress_signal_via_tor",
            "location": 431,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "qtbot": [],
                "tmpdir": []
            }
        },
        "test_join_grid_emit_got_icon_signal_nickname_least_authority_s4": {
            "name": "test_join_grid_emit_got_icon_signal_nickname_least_authority_s4",
            "location": 446,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "qtbot": [],
                "tmpdir": []
            }
        },
        "test_join_grid_emit_got_icon_signal_icon_base64": {
            "name": "test_join_grid_emit_got_icon_signal_icon_base64",
            "location": 461,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "qtbot": [],
                "tmpdir": []
            }
        },
        "test_join_grid_emit_got_icon_signal_icon_url": {
            "name": "test_join_grid_emit_got_icon_signal_icon_url",
            "location": 475,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "qtbot": [],
                "tmpdir": []
            }
        },
        "test_join_grid_no_emit_icon_signal_exception": {
            "name": "test_join_grid_no_emit_icon_signal_exception",
            "location": 490,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "qtbot": [
                    "typing.Iterable[tuple[typing.Union[int,int]]]"
                ],
                "tmpdir": []
            }
        },
        "test_join_grid_storage_servers": {
            "name": "test_join_grid_storage_servers",
            "location": 508,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir": []
            }
        },
        "test_ensure_recovery_write_settings": {
            "name": "test_ensure_recovery_write_settings",
            "location": 526,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_ensure_recovery_create_rootcap": {
            "name": "test_ensure_recovery_create_rootcap",
            "location": 538,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir": []
            }
        },
        "test_ensure_recovery_create_rootcap_pass_on_error": {
            "name": "test_ensure_recovery_create_rootcap_pass_on_error",
            "location": 556,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir": []
            }
        },
        "test_join_folders_emit_joined_folders_signal": {
            "name": "test_join_folders_emit_joined_folders_signal",
            "location": 576,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "qtbot": [],
                "tmpdir": []
            }
        },
        "test_run_raise_upgrade_required_error": {
            "name": "test_run_raise_upgrade_required_error",
            "location": 588,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "test_run_join_grid": {
            "name": "test_run_join_grid",
            "location": 595,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_run_join_grid_use_tor": {
            "name": "test_run_join_grid_use_tor",
            "location": 616,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_run_join_grid_use_tor_raise_tor_error": {
            "name": "test_run_join_grid_use_tor_raise_tor_error",
            "location": 637,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_run_emit_grid_already_joined_signal": {
            "name": "test_run_emit_grid_already_joined_signal",
            "location": 646,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "qtbot": [
                    "typing.Type",
                    "str"
                ]
            }
        },
        "test_run_emit_done_signal": {
            "name": "test_run_emit_done_signal",
            "location": 667,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "qtbot": []
            }
        },
        "test_fetch_icon_use_tor.fake_tor": {
            "name": "fake_tor",
            "location": 368,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "test_fetch_icon_use_tor.fake_treq_get": {
            "name": "fake_treq_get",
            "location": 375,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "test_join_grid_storage_servers.fake_add_storage_servers": {
            "name": "fake_add_storage_servers",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ensure_recovery_create_rootcap.fake_link": {
            "name": "fake_link",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "dircap": [],
                "name": [],
                "childcap": []
            }
        },
        "test_ensure_recovery_create_rootcap_pass_on_error.fake_link": {
            "name": "fake_link",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "_": [],
                "dircap": [],
                "name": [],
                "childcap": []
            }
        },
        "test_run_join_grid.fake_join_grid": {
            "name": "fake_join_grid",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/tests/test_streamedlogs.py": {
        "test_do_nothing_before_start": {
            "name": "test_do_nothing_before_start",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "reactor": [],
                "tahoe": []
            }
        },
        "test_connect_to_nodeurl": {
            "name": "test_connect_to_nodeurl",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "reactor": [
                    "int",
                    "str"
                ],
                "tahoe": [
                    "typing.Callable[str, None]"
                ]
            }
        },
        "fake_log_server": {
            "name": "fake_log_server",
            "location": 40,
            "return": [],
            "arguments": {
                "protocol": [
                    "str",
                    "list[bytes]",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "twlog": {
            "name": "twlog",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "connect_to_log_endpoint": {
            "name": "connect_to_log_endpoint",
            "location": 78,
            "return": [],
            "arguments": {
                "reactor": [
                    "typing.Callable[t, float]",
                    "bool",
                    "list[int]"
                ],
                "tahoe": [
                    "str",
                    "int",
                    "float"
                ],
                "real_reactor": [
                    "int",
                    "str",
                    "float"
                ],
                "protocolClass": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_collect_eliot_logs": {
            "name": "test_collect_eliot_logs",
            "location": 98,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "reactor": [
                    "bool",
                    "str"
                ],
                "tahoe": []
            }
        },
        "test_bounded_streamed_log_buffer": {
            "name": "test_bounded_streamed_log_buffer",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "reactor": [],
                "tahoe": []
            }
        },
        "test_binary_messages_dropped": {
            "name": "test_binary_messages_dropped",
            "location": 143,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "reactor": [],
                "tahoe": [
                    "bool"
                ]
            }
        },
        "advance_mock_clock": {
            "name": "advance_mock_clock",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "reactor": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "test_reconnect_to_websocket": {
            "name": "test_reconnect_to_websocket",
            "location": 179,
            "return": [
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "reactor": [
                    "bool",
                    "str",
                    "float"
                ],
                "tahoe": [
                    "bool",
                    "float"
                ]
            }
        },
        "test_stop": {
            "name": "test_stop",
            "location": 206,
            "return": [
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "reactor": [
                    "bool",
                    "str",
                    "dict[str, typing.Any]"
                ],
                "tahoe": [
                    "str",
                    "int"
                ]
            }
        },
        "test_path": {
            "name": "test_path",
            "location": 228,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "reactor": [
                    "str",
                    "int",
                    "None"
                ],
                "tahoe": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "test_authentication": {
            "name": "test_authentication",
            "location": 249,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "reactor": [],
                "tahoe": []
            }
        },
        "FakeLogServerProtocol.onOpen": {
            "name": "onOpen",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryMessageServerProtocol.onOpen": {
            "name": "onOpen",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_path.PathCheckingProtocol.onConnect": {
            "name": "onConnect",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "test_authentication.AuthorizationCheckingProtocol.onConnect": {
            "name": "onConnect",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "gridsync-master/tests/test_supervisor.py": {
        "test_supervisor_sets_pid_attribute_on_start": {
            "name": "test_supervisor_sets_pid_attribute_on_start",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_supervisor_sets_name_attribute_on_start": {
            "name": "test_supervisor_sets_name_attribute_on_start",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_supervisor_unsets_pid_attribute_on_stop": {
            "name": "test_supervisor_unsets_pid_attribute_on_stop",
            "location": 29,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmp_path": [
                    "list[str]"
                ]
            }
        },
        "test_supervisor_unsets_name_attribute_on_stop": {
            "name": "test_supervisor_unsets_name_attribute_on_stop",
            "location": 39,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_supervisor_writes_pid_to_pidfile_on_start": {
            "name": "test_supervisor_writes_pid_to_pidfile_on_start",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_supervisor_writes_name_to_pidfile_on_start": {
            "name": "test_supervisor_writes_name_to_pidfile_on_start",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_supervisor_removes_pidfile_on_stop": {
            "name": "test_supervisor_removes_pidfile_on_stop",
            "location": 65,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_supervisor_restarts_process_when_killed": {
            "name": "test_supervisor_restarts_process_when_killed",
            "location": 76,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_supervisor_does_not_restart_process_when_stopped": {
            "name": "test_supervisor_does_not_restart_process_when_stopped",
            "location": 87,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_supervisor_calls_call_before_start": {
            "name": "test_supervisor_calls_call_before_start",
            "location": 97,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_supervisor_calls_call_after_start": {
            "name": "test_supervisor_calls_call_after_start",
            "location": 112,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_supervisor_calls_call_before_start.f": {
            "name": "f",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_supervisor_calls_call_after_start.f": {
            "name": "f",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/tests/test_system.py": {
        "test_which": {
            "name": "test_which",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_which_raises_environment_error": {
            "name": "test_which_raises_environment_error",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/tests/test_tahoe.py": {
        "fake_get": {
            "name": "fake_get",
            "location": 27,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "fake_get_code_500": {
            "name": "fake_get_code_500",
            "location": 33,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "fake_put": {
            "name": "fake_put",
            "location": 39,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "fake_put_code_500": {
            "name": "fake_put_code_500",
            "location": 45,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "fake_post": {
            "name": "fake_post",
            "location": 51,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "fake_post_code_500": {
            "name": "fake_post_code_500",
            "location": 57,
            "return": [
                "MagicMock"
            ],
            "arguments": {}
        },
        "test_is_valid_furl": {
            "name": "test_is_valid_furl",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_valid_furl_no_port": {
            "name": "test_is_valid_furl_no_port",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_valid_furl_no_host_separator": {
            "name": "test_is_valid_furl_no_host_separator",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_valid_furl_invalid_char_in_connection_hint": {
            "name": "test_is_valid_furl_invalid_char_in_connection_hint",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_valid_furl_tub_id_not_base32": {
            "name": "test_is_valid_furl_tub_id_not_base32",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_nodedirs": {
            "name": "test_get_nodedirs",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [
                    "str"
                ],
                "tmpdir_factory": []
            }
        },
        "test_get_nodedirs_empty": {
            "name": "test_get_nodedirs_empty",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [
                    "str",
                    "bool"
                ],
                "tmpdir_factory": []
            }
        },
        "test_raise_tahoe_error": {
            "name": "test_raise_tahoe_error",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raise_tahoe_command_error": {
            "name": "test_raise_tahoe_command_error",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_raise_tahoe_web_error": {
            "name": "test_raise_tahoe_web_error",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tahoe_default_nodedir": {
            "name": "test_tahoe_default_nodedir",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tahoe_set_streamedlogs_maxlen_from_config_txt": {
            "name": "test_tahoe_set_streamedlogs_maxlen_from_config_txt",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "given": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_tahoe_load_newscap_from_global_settings": {
            "name": "test_tahoe_load_newscap_from_global_settings",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_load_newscap_from_newscap_file": {
            "name": "test_tahoe_load_newscap_from_newscap_file",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": []
            }
        },
        "test_config_get": {
            "name": "test_config_get",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [
                    "str",
                    "int"
                ]
            }
        },
        "test_config_set": {
            "name": "test_config_set",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": []
            }
        },
        "test_get_settings": {
            "name": "test_get_settings",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": []
            }
        },
        "test_get_settings_includes_convergence_secret": {
            "name": "test_get_settings_includes_convergence_secret",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": []
            }
        },
        "test_get_settings_exclude_convergence_secret_by_default": {
            "name": "test_get_settings_exclude_convergence_secret_by_default",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [
                    "list[str]"
                ]
            }
        },
        "test_save_settings_includes_convergence_secret": {
            "name": "test_save_settings_includes_convergence_secret",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": []
            }
        },
        "test_export": {
            "name": "test_export",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "tmpdir_factory": []
            }
        },
        "test_get_storage_servers_empty": {
            "name": "test_get_storage_servers_empty",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [
                    "str"
                ]
            }
        },
        "test_get_storage_servers_non_empty": {
            "name": "test_get_storage_servers_non_empty",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [
                    "str"
                ]
            }
        },
        "test_add_storage_server": {
            "name": "test_add_storage_server",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": []
            }
        },
        "test_add_storage_servers": {
            "name": "test_add_storage_servers",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_add_storage_servers_no_add_missing_furl": {
            "name": "test_add_storage_servers_no_add_missing_furl",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_storage_options_to_config_unknown": {
            "name": "test_storage_options_to_config_unknown",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_storage_options_to_config_no_optional_values": {
            "name": "test_storage_options_to_config_no_optional_values",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_storage_options_to_config_pass_value": {
            "name": "test_storage_options_to_config_pass_value",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_storage_options_to_config_default_token_count": {
            "name": "test_storage_options_to_config_default_token_count",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_storage_options_to_config_allowed_public_keys": {
            "name": "test_storage_options_to_config_allowed_public_keys",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_storage_options_to_config_lease_crawl_interval_mean": {
            "name": "test_storage_options_to_config_lease_crawl_interval_mean",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_storage_options_to_config_lease_crawl_interval_range": {
            "name": "test_storage_options_to_config_lease_crawl_interval_range",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_storage_options_to_config_lease_min_time_remaining": {
            "name": "test_storage_options_to_config_lease_min_time_remaining",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_storage_servers_writes_zkapauthorizer_allowed_public_keys": {
            "name": "test_add_storage_servers_writes_zkapauthorizer_allowed_public_keys",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_tahoe_create_client_nodedir_exists_error": {
            "name": "test_tahoe_create_client_nodedir_exists_error",
            "location": 405,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": []
            }
        },
        "test_tahoe_create_client_args": {
            "name": "test_tahoe_create_client_args",
            "location": 411,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_create_client_args_compat": {
            "name": "test_tahoe_create_client_args_compat",
            "location": 421,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_create_client_args_hide_ip": {
            "name": "test_tahoe_create_client_args_hide_ip",
            "location": 431,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_create_client_add_storage_servers": {
            "name": "test_tahoe_create_client_add_storage_servers",
            "location": 442,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tmpdir": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_stop_kills_pid_in_pidfile": {
            "name": "test_tahoe_stop_kills_pid_in_pidfile",
            "location": 459,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_stop_locked": {
            "name": "test_tahoe_stop_locked",
            "location": 469,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "locked": [],
                "call_count": [
                    "int",
                    "dict[, ]"
                ],
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_get_grid_status": {
            "name": "test_get_grid_status",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_get_connected_servers": {
            "name": "test_get_connected_servers",
            "location": 525,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_is_ready_false_not_shares_happy": {
            "name": "test_is_ready_false_not_shares_happy",
            "location": 534,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": [
                    "str"
                ]
            }
        },
        "test_is_ready_false_not_connected_servers": {
            "name": "test_is_ready_false_not_connected_servers",
            "location": 540,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_is_ready_true": {
            "name": "test_is_ready_true",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_is_ready_false_connected_less_than_happy": {
            "name": "test_is_ready_false_connected_less_than_happy",
            "location": 560,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_await_ready": {
            "name": "test_await_ready",
            "location": 570,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_concurrent_await_ready": {
            "name": "test_concurrent_await_ready",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [
                    "str",
                    "typing.Mapping"
                ],
                "monkeypatch": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_tahoe_mkdir": {
            "name": "test_tahoe_mkdir",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_mkdir_fail_code_500": {
            "name": "test_tahoe_mkdir_fail_code_500",
            "location": 642,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_upload": {
            "name": "test_tahoe_upload",
            "location": 651,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_upload_fail_code_500": {
            "name": "test_tahoe_upload_fail_code_500",
            "location": 662,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_download": {
            "name": "test_tahoe_download",
            "location": 673,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_download_fail_code_500": {
            "name": "test_tahoe_download_fail_code_500",
            "location": 688,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "test_tahoe_link": {
            "name": "test_tahoe_link",
            "location": 697,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_link_fail_code_500": {
            "name": "test_tahoe_link_fail_code_500",
            "location": 705,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_unlink": {
            "name": "test_tahoe_unlink",
            "location": 714,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_unlink_fail_code_500": {
            "name": "test_tahoe_unlink_fail_code_500",
            "location": 722,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_tahoe_start_use_tor_false": {
            "name": "test_tahoe_start_use_tor_false",
            "location": 731,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir_factory": []
            }
        },
        "test_tahoe_starts_streamedlogs": {
            "name": "test_tahoe_starts_streamedlogs",
            "location": 756,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "tahoe_factory": [
                    "str",
                    "int"
                ]
            }
        },
        "test_tahoe_stops_streamedlogs": {
            "name": "test_tahoe_stops_streamedlogs",
            "location": 778,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "tahoe_factory": [
                    "str",
                    "float"
                ]
            }
        },
        "test_tahoe_start_use_tor_true": {
            "name": "test_tahoe_start_use_tor_true",
            "location": 799,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir_factory": []
            }
        },
        "test_concurrent_await_ready.measure_poll_count": {
            "name": "measure_poll_count",
            "location": 588,
            "return": [
                "typing.Generator[list[]]",
                "int"
            ],
            "arguments": {
                "how_many_waiters": []
            }
        },
        "test_tahoe_download.fake_collect": {
            "name": "fake_collect",
            "location": 674,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [],
                "collector": []
            }
        },
        "test_concurrent_await_ready.measure_poll_count.check_ready": {
            "name": "check_ready",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "gridsync-master/tests/test_tor.py": {
        "test_tor_required": {
            "name": "test_tor_required",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "furl": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        },
        "test_get_tor": {
            "name": "test_get_tor",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_tor_return_none": {
            "name": "test_get_tor_return_none",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_tor_return_none_feature_disabled": {
            "name": "test_get_tor_return_none_feature_disabled",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_tor_with_prompt_retry": {
            "name": "test_get_tor_with_prompt_retry",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_get_tor_with_prompt_abort": {
            "name": "test_get_tor_with_prompt_abort",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        }
    },
    "gridsync-master/tests/test_util.py": {
        "test_b58encode": {
            "name": "test_b58encode",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "b": [
                    "str",
                    "None"
                ],
                "encoded": [
                    "str",
                    "None"
                ]
            }
        },
        "test_b58decode": {
            "name": "test_b58decode",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "decoded": [
                    "bool",
                    "str"
                ],
                "s": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_b58decode_value_error": {
            "name": "test_b58decode_value_error",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_bool": {
            "name": "test_to_bool",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "typing.Callable[..., T]",
                    "dict[, ]"
                ],
                "result": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "typing.Callable[..., T]",
                    "dict[, ]"
                ]
            }
        },
        "test_humanized_list": {
            "name": "test_humanized_list",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "typing.Sequence[typing.Hashable]",
                    "set[str]",
                    "int",
                    "list[]"
                ],
                "kind": [
                    "typing.Sequence[typing.Hashable]",
                    "set[str]",
                    "int",
                    "list[]"
                ],
                "humanized": [
                    "typing.Sequence[typing.Hashable]",
                    "set[str]",
                    "int",
                    "list[]"
                ]
            }
        },
        "test_strip_html_tags": {
            "name": "test_strip_html_tags",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "float"
                ],
                "expected": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "gridsync-master/tests/test_voucher.py": {
        "test_generate_voucher": {
            "name": "test_generate_voucher",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [],
                "expected": []
            }
        },
        "test_generate_voucher_with_random_data": {
            "name": "test_generate_voucher_with_random_data",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hyphenate": {
            "name": "test_hyphenate",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "expected": []
            }
        },
        "test_dehyphenate": {
            "name": "test_dehyphenate",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [],
                "expected": []
            }
        },
        "test_get_checksum": {
            "name": "test_get_checksum",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_code": {
            "name": "test_generate_code",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_valid": {
            "name": "test_is_valid",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [],
                "expected": []
            }
        }
    },
    "gridsync-master/tests/test_wormhole.py": {
        "wormhole": {
            "name": "wormhole",
            "location": 14,
            "return": [
                "Wormhole"
            ],
            "arguments": {}
        },
        "test_wormhole_init__wormhole_object_is_none": {
            "name": "test_wormhole_init__wormhole_object_is_none",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_wormhole_connect_emit_got_welcome_signal": {
            "name": "test_wormhole_connect_emit_got_welcome_signal",
            "location": 26,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [],
                "monkeypatch": []
            }
        },
        "test_wormhole_connect_use_tor": {
            "name": "test_wormhole_connect_use_tor",
            "location": 39,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [],
                "monkeypatch": [],
                "wormhole": []
            }
        },
        "test_wormhole_use_tor_raise_tor_error": {
            "name": "test_wormhole_use_tor_raise_tor_error",
            "location": 56,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [],
                "monkeypatch": [],
                "wormhole": []
            }
        },
        "test_wormhole_close_emit_closed_signal": {
            "name": "test_wormhole_close_emit_closed_signal",
            "location": 65,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [],
                "wormhole": []
            }
        },
        "test_wormhole_close_emit_closed_signal_with_wormhole_error_pass": {
            "name": "test_wormhole_close_emit_closed_signal_with_wormhole_error_pass",
            "location": 72,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": []
            }
        },
        "test_wormhole_close_return_early_no_wormhole_no_emit_closed": {
            "name": "test_wormhole_close_return_early_no_wormhole_no_emit_closed",
            "location": 82,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": []
            }
        },
        "test_wormhole_receive_via_xfer_util": {
            "name": "test_wormhole_receive_via_xfer_util",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [
                    "str",
                    "typing.Mapping"
                ],
                "monkeypatch": []
            }
        },
        "test_wormhole_receive_via_xfer_util_raise_unknown_offer": {
            "name": "test_wormhole_receive_via_xfer_util_raise_unknown_offer",
            "location": 104,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [
                    "str",
                    "typing.Mapping"
                ],
                "monkeypatch": []
            }
        },
        "test_wormhole_receive_emit_got_introduction_signal": {
            "name": "test_wormhole_receive_emit_got_introduction_signal",
            "location": 121,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [],
                "monkeypatch": []
            }
        },
        "test_wormhole_receive_raise_upgrade_required_no_abilities": {
            "name": "test_wormhole_receive_raise_upgrade_required_no_abilities",
            "location": 136,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "test_wormhole_receive_raise_upgrade_required_bad_version": {
            "name": "test_wormhole_receive_raise_upgrade_required_bad_version",
            "location": 151,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "test_wormhole_receive_succeed_return_msg_dict": {
            "name": "test_wormhole_receive_succeed_return_msg_dict",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "qtbot": [],
                "monkeypatch": []
            }
        },
        "test_wormhole_receive_succeed_emit_got_message_signal": {
            "name": "test_wormhole_receive_succeed_emit_got_message_signal",
            "location": 183,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [],
                "monkeypatch": []
            }
        },
        "test_wormhole_send_emit_got_introduction_signal": {
            "name": "test_wormhole_send_emit_got_introduction_signal",
            "location": 199,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [],
                "monkeypatch": []
            }
        },
        "test_wormhole_send_raise_upgrade_required_no_abilities": {
            "name": "test_wormhole_send_raise_upgrade_required_no_abilities",
            "location": 214,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "test_wormhole_send_raise_upgrade_required_bad_version": {
            "name": "test_wormhole_send_raise_upgrade_required_bad_version",
            "location": 227,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "test_wormhole_send_allocate_code_emit_got_code_signal": {
            "name": "test_wormhole_send_allocate_code_emit_got_code_signal",
            "location": 242,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [],
                "monkeypatch": []
            }
        },
        "test_wormhole_send_succeed_emit_send_completed_signal": {
            "name": "test_wormhole_send_succeed_emit_send_completed_signal",
            "location": 259,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "qtbot": [
                    "str",
                    "float"
                ],
                "monkeypatch": []
            }
        },
        "test_wormhole_receive_function": {
            "name": "test_wormhole_receive_function",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_wormhole_send_function": {
            "name": "test_wormhole_send_function",
            "location": 284,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_wormhole_connect_use_tor.fake_create": {
            "name": "fake_create",
            "location": 42,
            "return": [],
            "arguments": {}
        }
    },
    "gridsync-master/tests/test_zkapauthorizer.py": {
        "fake_treq_request_resp_code_200": {
            "name": "fake_treq_request_resp_code_200",
            "location": 11,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "fake_treq_request_resp_code_500": {
            "name": "fake_treq_request_resp_code_500",
            "location": 19,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "test__request_url": {
            "name": "test__request_url",
            "location": 27,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test__request_headers": {
            "name": "test__request_headers",
            "location": 38,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_add_voucher_with_voucher": {
            "name": "test_add_voucher_with_voucher",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_add_voucher_without_voucher": {
            "name": "test_add_voucher_without_voucher",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_add_voucher_raise_tahoe_web_error": {
            "name": "test_add_voucher_raise_tahoe_web_error",
            "location": 66,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [
                    "dict[str, typing.Any]"
                ],
                "monkeypatch": []
            }
        },
        "test_get_voucher": {
            "name": "test_get_voucher",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_get_voucher_raise_tahoe_web_error": {
            "name": "test_get_voucher_raise_tahoe_web_error",
            "location": 82,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "test_get_vouchers": {
            "name": "test_get_vouchers",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [],
                "monkeypatch": []
            }
        },
        "test_get_vouchers_raise_tahoe_web_error": {
            "name": "test_get_vouchers_raise_tahoe_web_error",
            "location": 100,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "test_zkap_payment_url": {
            "name": "test_zkap_payment_url",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [
                    "dict[str, typing.Any]",
                    "None"
                ],
                "zkap_payment_url_root": [],
                "voucher": [
                    "str"
                ],
                "expected": [
                    "str",
                    "int"
                ]
            }
        },
        "test_zkap_payment_url_empty_zkap_payment_root_url": {
            "name": "test_zkap_payment_url_empty_zkap_payment_root_url",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": []
            }
        },
        "test__get_content": {
            "name": "test__get_content",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [
                    "int"
                ],
                "monkeypatch": []
            }
        },
        "test__get_content_raise_tahoe_web_error": {
            "name": "test__get_content_raise_tahoe_web_error",
            "location": 148,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe": [
                    "str"
                ],
                "monkeypatch": []
            }
        },
        "test_get_version": {
            "name": "test_get_version",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe": [
                    "int"
                ],
                "monkeypatch": []
            }
        }
    },
    "gridsync-master/tests/test___init__.py": {
        "test_the_approval_of_RMS": {
            "name": "test_the_approval_of_RMS",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test___version__": {
            "name": "test___version__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pkgdir": {
            "name": "test_pkgdir",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_frozen_pkgdir": {
            "name": "test_frozen_pkgdir",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_append_tahoe_bundle_to_PATH": {
            "name": "test_append_tahoe_bundle_to_PATH",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_frozen_del_reactor": {
            "name": "test_frozen_del_reactor",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_frozen_del_reactor_pass_without_twisted": {
            "name": "test_frozen_del_reactor_pass_without_twisted",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_override_settings_via_environment_variables": {
            "name": "test_override_settings_via_environment_variables",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_settings_via_environment_variables": {
            "name": "test_add_settings_via_environment_variables",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_dir_win32": {
            "name": "test_config_dir_win32",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_config_dir_darwin": {
            "name": "test_config_dir_darwin",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_config_dir_other": {
            "name": "test_config_dir_other",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_config_dir_xdg_config_home": {
            "name": "test_config_dir_xdg_config_home",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_resource": {
            "name": "test_resource",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_settings_from_cheatcode": {
            "name": "test_load_settings_from_cheatcode",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir_factory": [],
                "monkeypatch": []
            }
        },
        "test_load_settings_from_cheatcode_none": {
            "name": "test_load_settings_from_cheatcode_none",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir_factory": [],
                "monkeypatch": []
            }
        }
    },
    "gridsync-master/tests/gui/conftest.py": {
        "preferences_config_file": {
            "name": "preferences_config_file",
            "location": 20,
            "return": [],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "preferences": {
            "name": "preferences",
            "location": 31,
            "return": [
                "Preferences"
            ],
            "arguments": {
                "preferences_config_file": [
                    "str",
                    "None",
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "gui": {
            "name": "gui",
            "location": 40,
            "return": [
                "Gui"
            ],
            "arguments": {
                "preferences": []
            }
        }
    },
    "gridsync-master/tests/gui/test_color.py": {
        "test_is_dark": {
            "name": "test_is_dark",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "color": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ],
                "result": [
                    "str",
                    "dict[str, str]",
                    "dict[, ]"
                ]
            }
        }
    },
    "gridsync-master/tests/gui/test_debug.py": {
        "test_system_module_variable_is_not_none": {
            "name": "test_system_module_variable_is_not_none",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_module_variable_is_not_none": {
            "name": "test_header_module_variable_is_not_none",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_warning_text_module_variable_is_not_none": {
            "name": "test_warning_text_module_variable_is_not_none",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "core": {
            "name": "core",
            "location": 31,
            "return": [
                "Mock"
            ],
            "arguments": {}
        },
        "test_log_loader_load_content": {
            "name": "test_log_loader_load_content",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "core": []
            }
        },
        "test_log_loader_load_filtered_content": {
            "name": "test_log_loader_load_filtered_content",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "core": []
            }
        },
        "test_log_loader_load_warning_text_in_content": {
            "name": "test_log_loader_load_warning_text_in_content",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "core": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_log_loader_load_warning_text_in_filtered_content": {
            "name": "test_log_loader_load_warning_text_in_filtered_content",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "core": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "test_debug_exporter_on_checkbox_state_changed_toggle_content": {
            "name": "test_debug_exporter_on_checkbox_state_changed_toggle_content",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "checkbox_state": [
                    "bool",
                    "str"
                ],
                "expected_content": [
                    "str"
                ]
            }
        },
        "test_debug_exporter_on_checkbox_state_changed_keep_scrollbar_position": {
            "name": "test_debug_exporter_on_checkbox_state_changed_keep_scrollbar_position",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_debug_exporter_on_info_button_clicked": {
            "name": "test_debug_exporter_on_info_button_clicked",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_debug_exporter_load_content": {
            "name": "test_debug_exporter_load_content",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "core": [],
                "qtbot": []
            }
        },
        "test_debug_exporter_load_filtered_content": {
            "name": "test_debug_exporter_load_filtered_content",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "core": [],
                "qtbot": []
            }
        },
        "test_debug_exporter_load_warning_text_in_content": {
            "name": "test_debug_exporter_load_warning_text_in_content",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "core": [],
                "qtbot": []
            }
        },
        "test_debug_exporter_load_warning_text_in_filtered_content": {
            "name": "test_debug_exporter_load_warning_text_in_filtered_content",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "core": [
                    "dict[, ]"
                ],
                "qtbot": []
            }
        },
        "test_debug_exporter_load_return_early_thread_running": {
            "name": "test_debug_exporter_load_return_early_thread_running",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "core": [
                    "typing.Callable[, ]"
                ],
                "qtbot": [
                    "bool",
                    "float"
                ]
            }
        },
        "test_debug_exporter_copy_to_clipboard": {
            "name": "test_debug_exporter_copy_to_clipboard",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_debug_exporter_export_to_file_no_dest_return": {
            "name": "test_debug_exporter_export_to_file_no_dest_return",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_debug_exporter_export_to_file_success": {
            "name": "test_debug_exporter_export_to_file_success",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_debug_exporter_export_to_file_failure": {
            "name": "test_debug_exporter_export_to_file_failure",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "tmpdir": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "gridsync-master/tests/gui/test_font.py": {
        "test_font_default": {
            "name": "test_font_default",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "platform": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "expected": [
                    "str",
                    "bool",
                    "None",
                    "list[str]"
                ],
                "monkeypatch": []
            }
        },
        "test_font_upscale_on_macos": {
            "name": "test_font_upscale_on_macos",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "point_size": [
                    "int",
                    "str"
                ],
                "point_size_mac": [
                    "int",
                    "float",
                    "str"
                ],
                "monkeypatch": []
            }
        }
    },
    "gridsync-master/tests/gui/test_history.py": {
        "hiw": {
            "name": "hiw",
            "location": 17,
            "return": [
                "HistoryItemWidget"
            ],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "test_history_item_widget_init": {
            "name": "test_history_item_widget_init",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "hiw": [
                    "bool"
                ]
            }
        },
        "test_history_item_widget__do_load_thumbnail": {
            "name": "test_history_item_widget__do_load_thumbnail",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "hiw": []
            }
        },
        "test_history_item_widget_load_thumbnail": {
            "name": "test_history_item_widget_load_thumbnail",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "hiw": [],
                "monkeypatch": []
            }
        },
        "test_history_item_widget_unhilight": {
            "name": "test_history_item_widget_unhilight",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "hiw": []
            }
        },
        "test_history_item_widget_enter_event": {
            "name": "test_history_item_widget_enter_event",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "hiw": []
            }
        },
        "test_history_item_widget_enter_event_call_unhighlight": {
            "name": "test_history_item_widget_enter_event_call_unhighlight",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "hiw": []
            }
        },
        "test_history_item_widget_enter_event_pass_runtime_error": {
            "name": "test_history_item_widget_enter_event_pass_runtime_error",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "hiw": []
            }
        },
        "hlw": {
            "name": "hlw",
            "location": 79,
            "return": [
                "HistoryListWidget"
            ],
            "arguments": {
                "tmpdir_factory": []
            }
        },
        "test_history_list_widget_on_double_click": {
            "name": "test_history_list_widget_on_double_click",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "hlw": [],
                "monkeypatch": []
            }
        },
        "test_history_list_widget_on_right_click": {
            "name": "test_history_list_widget_on_right_click",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "hlw": [],
                "monkeypatch": []
            }
        },
        "test_history_list_widget_on_right_click_no_item_return": {
            "name": "test_history_list_widget_on_right_click_no_item_return",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "hlw": [],
                "monkeypatch": []
            }
        },
        "test_history_list_widget_add_item": {
            "name": "test_history_list_widget_add_item",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "hlw": []
            }
        },
        "test_history_list_widget_add_item_deduplicate": {
            "name": "test_history_list_widget_add_item_deduplicate",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "hlw": []
            }
        },
        "test_history_list_widget_update_visible_widgets": {
            "name": "test_history_list_widget_update_visible_widgets",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "hlw": [],
                "monkeypatch": []
            }
        },
        "test_history_list_widget_update_visible_widgets_return": {
            "name": "test_history_list_widget_update_visible_widgets_return",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "hlw": [],
                "monkeypatch": []
            }
        },
        "test_history_list_widget_update_visible_widgets_on_show_event": {
            "name": "test_history_list_widget_update_visible_widgets_on_show_event",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "hlw": [],
                "monkeypatch": []
            }
        },
        "test_history_view_init": {
            "name": "test_history_view_init",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/tests/gui/test_password.py": {
        "password_dialog": {
            "name": "password_dialog",
            "location": 10,
            "return": [
                "PasswordDialog"
            ],
            "arguments": {}
        },
        "test_password_line_edit_toggle_visibility_on": {
            "name": "test_password_line_edit_toggle_visibility_on",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "password_dialog": []
            }
        },
        "test_password_line_edit_toggle_visibility_off": {
            "name": "test_password_line_edit_toggle_visibility_off",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "password_dialog": []
            }
        },
        "test_password_dialog_very_weak": {
            "name": "test_password_dialog_very_weak",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "password_dialog": []
            }
        },
        "test_password_dialog_weak": {
            "name": "test_password_dialog_weak",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "password_dialog": []
            }
        },
        "test_password_dialog_alright": {
            "name": "test_password_dialog_alright",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "password_dialog": []
            }
        },
        "test_password_dialog_good": {
            "name": "test_password_dialog_good",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "password_dialog": []
            }
        },
        "test_password_dialog_excellent": {
            "name": "test_password_dialog_excellent",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "password_dialog": []
            }
        },
        "test_password_dialog_blank": {
            "name": "test_password_dialog_blank",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "password_dialog": []
            }
        }
    },
    "gridsync-master/tests/gui/test_pixmap.py": {
        "test_pixmap": {
            "name": "test_pixmap",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_composite_pixmap": {
            "name": "test_composite_pixmap",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "gui": [
                    "str",
                    "typing.Mapping"
                ]
            }
        },
        "test_badged_pixmap": {
            "name": "test_badged_pixmap",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "gui": [
                    "str",
                    "typing.Mapping"
                ]
            }
        }
    },
    "gridsync-master/tests/gui/test_status.py": {
        "test_status_panel_hide_tor_button": {
            "name": "test_status_panel_hide_tor_button",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_tahoe": []
            }
        },
        "test_on_sync_status_updated": {
            "name": "test_on_sync_status_updated",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "num_connected": [
                    "int",
                    "str"
                ],
                "shares_happy": [
                    "bool",
                    "str",
                    "list[str]",
                    "None",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ],
                "overall_status": [
                    "str",
                    "int",
                    "dict[str, int]",
                    "typing.Callable[, ]",
                    "typing.Mapping",
                    "None"
                ],
                "use_tor": [
                    "bool",
                    "None"
                ],
                "text": [
                    "str"
                ],
                "fake_tahoe": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test__update_grid_info": {
            "name": "test__update_grid_info",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "num_connected": [
                    "int",
                    "tuple[int]"
                ],
                "num_known": [
                    "int",
                    "tuple[int]"
                ],
                "available_space": [
                    "str",
                    "float",
                    "int"
                ],
                "tooltip": [
                    "int"
                ],
                "fake_tahoe": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_on_space_updated_humanize": {
            "name": "test_on_space_updated_humanize",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_tahoe": []
            }
        },
        "test_on_nodes_updated_set_num_connected_and_num_known": {
            "name": "test_on_nodes_updated_set_num_connected_and_num_known",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_tahoe": [
                    "int"
                ]
            }
        },
        "test_on_nodes_updated_grid_name_in_status_label": {
            "name": "test_on_nodes_updated_grid_name_in_status_label",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_tahoe": []
            }
        },
        "test_on_nodes_updated_tor_usage_in_status_label": {
            "name": "test_on_nodes_updated_tor_usage_in_status_label",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_tahoe": []
            }
        },
        "test_on_nodes_updated_node_count_in_status_label_when_connecting": {
            "name": "test_on_nodes_updated_node_count_in_status_label_when_connecting",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_tahoe": []
            }
        }
    },
    "gridsync-master/tests/gui/test_usage.py": {
        "test_initial_state": {
            "name": "test_initial_state",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_tahoe": [
                    "list[dict[str, typing.Any]]",
                    "int"
                ],
                "gui": [
                    "list[dict[str, typing.Any]]",
                    "int"
                ]
            }
        },
        "test_on_zkaps_updated_some_remaining": {
            "name": "test_on_zkaps_updated_some_remaining",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_tahoe": [
                    "list[dict[str, typing.Any]]"
                ],
                "gui": [
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_on_zkaps_updated_none_remaining": {
            "name": "test_on_zkaps_updated_none_remaining",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_tahoe": [
                    "list[dict[str, typing.Any]]"
                ],
                "gui": [
                    "list[dict[str, typing.Any]]"
                ]
            }
        },
        "test_on_redeeming_vouchers_updated_redeeming_label_visibility": {
            "name": "test_on_redeeming_vouchers_updated_redeeming_label_visibility",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "fake_tahoe": [
                    "int",
                    "None"
                ],
                "gui": [
                    "int",
                    "None"
                ],
                "vouchers": [
                    "int",
                    "str",
                    "float",
                    "dict[str, typing.Any]",
                    "None"
                ],
                "expected_visibility": [
                    "bool",
                    "str",
                    "list[str]"
                ]
            }
        }
    },
    "gridsync-master/tests/gui/test_welcome.py": {
        "test_init_welcome_dialog": {
            "name": "test_init_welcome_dialog",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/tests/gui/test_widgets.py": {
        "test_decrement_shares_needed_with_shares_total": {
            "name": "test_decrement_shares_needed_with_shares_total",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decrement_shares_happy_with_shares_total": {
            "name": "test_decrement_shares_happy_with_shares_total",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_increment_shares_total_with_shares_needed": {
            "name": "test_increment_shares_total_with_shares_needed",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_increment_shares_total_with_shares_happy": {
            "name": "test_increment_shares_total_with_shares_happy",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tahoe_config_form_get_settings": {
            "name": "test_tahoe_config_form_get_settings",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "gridsync-master/tests/integration/test_magic_folder_integration.py": {
        "leave_all_folders": {
            "name": "leave_all_folders",
            "location": 85,
            "return": [
                "typing.Generator[deferLater]",
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": []
            }
        },
        "test_version": {
            "name": "test_version",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "magic_folder": []
            }
        },
        "test_get_folders": {
            "name": "test_get_folders",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "magic_folder": []
            }
        },
        "test_add_folder": {
            "name": "test_add_folder",
            "location": 106,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_leave_folder": {
            "name": "test_leave_folder",
            "location": 117,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_leave_folder_with_missing_ok_true": {
            "name": "test_leave_folder_with_missing_ok_true",
            "location": 133,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_leave_folder_with_missing_ok_false": {
            "name": "test_leave_folder_with_missing_ok_false",
            "location": 150,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_leave_folder_removes_from_magic_folders_dict": {
            "name": "test_leave_folder_removes_from_magic_folders_dict",
            "location": 161,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_folder_is_local_true": {
            "name": "test_folder_is_local_true",
            "location": 176,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [
                    "str",
                    "None"
                ],
                "tmp_path": []
            }
        },
        "test_folder_is_local_false": {
            "name": "test_folder_is_local_false",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "magic_folder": [
                    "typing.Callable[, ]",
                    "str",
                    "list[str]"
                ],
                "tmp_path": [
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_folder_is_remote_true": {
            "name": "test_folder_is_remote_true",
            "location": 190,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_folder_is_remote_false": {
            "name": "test_folder_is_remote_false",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "magic_folder": [
                    "typing.Callable[, ]",
                    "str",
                    "list[str]"
                ],
                "tmp_path": [
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_folder_exists_true": {
            "name": "test_folder_exists_true",
            "location": 205,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [
                    "str",
                    "None"
                ],
                "tmp_path": []
            }
        },
        "test_folder_exists_false": {
            "name": "test_folder_exists_false",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "magic_folder": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "tmp_path": [
                    "dict[str, typing.Sequence[str]]"
                ]
            }
        },
        "test_get_participants": {
            "name": "test_get_participants",
            "location": 219,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_add_participant": {
            "name": "test_add_participant",
            "location": 230,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_get_snapshots": {
            "name": "test_get_snapshots",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "magic_folder": []
            }
        },
        "test_add_snapshot": {
            "name": "test_add_snapshot",
            "location": 252,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_snapshot_uploads_to_personal_dmd": {
            "name": "test_snapshot_uploads_to_personal_dmd",
            "location": 267,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_scanner_uploads_to_personal_dmd": {
            "name": "test_scanner_uploads_to_personal_dmd",
            "location": 288,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_get_file_status": {
            "name": "test_get_file_status",
            "location": 309,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_get_object_sizes": {
            "name": "test_get_object_sizes",
            "location": 336,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_get_all_object_sizes": {
            "name": "test_get_all_object_sizes",
            "location": 357,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_scan": {
            "name": "test_scan",
            "location": 384,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_poll": {
            "name": "test_poll",
            "location": 395,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_create_folder_backup": {
            "name": "test_create_folder_backup",
            "location": 406,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": []
            }
        },
        "test_get_folder_backups": {
            "name": "test_get_folder_backups",
            "location": 423,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": []
            }
        },
        "test_remove_folder_backup": {
            "name": "test_remove_folder_backup",
            "location": 433,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": []
            }
        },
        "test_remote_magic_folders_dict_is_updated_by_folder_backups": {
            "name": "test_remote_magic_folders_dict_is_updated_by_folder_backups",
            "location": 451,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": []
            }
        },
        "test_create_folder_backup_preserves_collective_writecap": {
            "name": "test_create_folder_backup_preserves_collective_writecap",
            "location": 464,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": []
            }
        },
        "test_local_folders_have_backups": {
            "name": "test_local_folders_have_backups",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "magic_folder": []
            }
        },
        "test_restore_folder_backup": {
            "name": "test_restore_folder_backup",
            "location": 483,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": []
            }
        },
        "test_alice_add_folder": {
            "name": "test_alice_add_folder",
            "location": 496,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "alice_magic_folder": [],
                "tmp_path": []
            }
        },
        "test_bob_receive_folder": {
            "name": "test_bob_receive_folder",
            "location": 511,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "alice_magic_folder": [],
                "bob_magic_folder": [],
                "tmp_path": []
            }
        },
        "test_monitor_emits_sync_progress_updated_signal": {
            "name": "test_monitor_emits_sync_progress_updated_signal",
            "location": 530,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_monitor_emits_upload_started_signal": {
            "name": "test_monitor_emits_upload_started_signal",
            "location": 550,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": []
            }
        },
        "test_monitor_emits_upload_finished_signal": {
            "name": "test_monitor_emits_upload_finished_signal",
            "location": 566,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": []
            }
        },
        "test_monitor_emits_files_updated_signal": {
            "name": "test_monitor_emits_files_updated_signal",
            "location": 582,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": [
                    "dict[, ]"
                ]
            }
        },
        "test_monitor_emits_error_occured_signal": {
            "name": "test_monitor_emits_error_occured_signal",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [
                    "dict[str, typing.Sequence[str]]"
                ],
                "qtbot": []
            }
        },
        "test_monitor_emits_folder_added_signal": {
            "name": "test_monitor_emits_folder_added_signal",
            "location": 616,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_monitor_emits_folder_added_signal_via_status_message": {
            "name": "test_monitor_emits_folder_added_signal_via_status_message",
            "location": 628,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_monitor_emits_folder_mtime_updated_signal": {
            "name": "test_monitor_emits_folder_mtime_updated_signal",
            "location": 645,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_monitor_emits_folder_size_updated_signal": {
            "name": "test_monitor_emits_folder_size_updated_signal",
            "location": 674,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": []
            }
        },
        "test_monitor_emits_folder_removed_signal": {
            "name": "test_monitor_emits_folder_removed_signal",
            "location": 695,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": []
            }
        },
        "test_monitor_emits_file_added_signal": {
            "name": "test_monitor_emits_file_added_signal",
            "location": 711,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": [
                    "dict[, ]"
                ]
            }
        },
        "test_monitor_emits_file_size_updated_signal": {
            "name": "test_monitor_emits_file_size_updated_signal",
            "location": 733,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": []
            }
        },
        "test_monitor_emits_file_mtime_updated_signal": {
            "name": "test_monitor_emits_file_mtime_updated_signal",
            "location": 754,
            "return": [
                "typing.Generator[]",
                "typing.Generator[deferLater]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": [
                    "dict[, ]"
                ]
            }
        },
        "test_monitor_emits_file_modified_signal": {
            "name": "test_monitor_emits_file_modified_signal",
            "location": 788,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": []
            }
        },
        "test_monitor_emits_folder_status_changed_signal": {
            "name": "test_monitor_emits_folder_status_changed_signal",
            "location": 811,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": []
            }
        },
        "test_monitor_emits_overall_status_changed_signal": {
            "name": "test_monitor_emits_overall_status_changed_signal",
            "location": 830,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "magic_folder": [],
                "tmp_path": [],
                "qtbot": []
            }
        },
        "test_eliot_logs_collected": {
            "name": "test_eliot_logs_collected",
            "location": 848,
            "return": [
                "None"
            ],
            "arguments": {
                "magic_folder": [
                    "dict[, ]"
                ]
            }
        }
    },
    "gridsync-master/tests/integration/test_rootcap_integration.py": {
        "rootcap_manager": {
            "name": "rootcap_manager",
            "location": 7,
            "return": [],
            "arguments": {
                "tahoe_client": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "test_create_rootcap_doesnt_override_existing_rootcap": {
            "name": "test_create_rootcap_doesnt_override_existing_rootcap",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "rootcap_manager": []
            }
        },
        "test_add_backup": {
            "name": "test_add_backup",
            "location": 27,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe_client": [],
                "rootcap_manager": []
            }
        },
        "test_remove_backup": {
            "name": "test_remove_backup",
            "location": 35,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe_client": [],
                "rootcap_manager": []
            }
        },
        "test_remove_backup_is_idempotent": {
            "name": "test_remove_backup_is_idempotent",
            "location": 44,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe_client": [],
                "rootcap_manager": []
            }
        }
    },
    "gridsync-master/tests/integration/test_tahoe_integration.py": {
        "test_tahoe_start_creates_pidfile": {
            "name": "test_tahoe_start_creates_pidfile",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe_client": [
                    "str"
                ]
            }
        },
        "test_tahoe_client_connected_servers": {
            "name": "test_tahoe_client_connected_servers",
            "location": 33,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe_client": []
            }
        },
        "test_tahoe_client_mkdir": {
            "name": "test_tahoe_client_mkdir",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe_client": []
            }
        },
        "test_diminish": {
            "name": "test_diminish",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe_client": []
            }
        },
        "test_upload_convergence_secret_determines_cap": {
            "name": "test_upload_convergence_secret_determines_cap",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe_client": [
                    "str",
                    "tuple[typing.Union[str,str,str]]"
                ],
                "tmp_path": []
            }
        },
        "test_upload_to_dircap": {
            "name": "test_upload_to_dircap",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe_client": [],
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_upload_mutable": {
            "name": "test_upload_mutable",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe_client": [
                    "str"
                ],
                "tmp_path": []
            }
        },
        "test_upload_to_dircap_mutable": {
            "name": "test_upload_to_dircap_mutable",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe_client": [],
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_upload_to_dircap_mutable_uses_same_cap": {
            "name": "test_upload_to_dircap_mutable_uses_same_cap",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe_client": [],
                "tmp_path": []
            }
        },
        "test_ls": {
            "name": "test_ls",
            "location": 110,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe_client": [],
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_ls_exclude_dirnodes": {
            "name": "test_ls_exclude_dirnodes",
            "location": 123,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe_client": [],
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_ls_exclude_filenodes": {
            "name": "test_ls_exclude_filenodes",
            "location": 136,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe_client": [],
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_ls_includes_most_authoritative_cap": {
            "name": "test_ls_includes_most_authoritative_cap",
            "location": 149,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "tahoe_client": [],
                "tmp_path": [
                    "bool"
                ]
            }
        },
        "test_ls_nonexistent_path": {
            "name": "test_ls_nonexistent_path",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "tahoe_client": [],
                "tmp_path": [
                    "list[str]",
                    "bool"
                ]
            }
        }
    },
    "gridsync-master/tests/integration/test_tls.py": {
        "test_tls": {
            "name": "test_tls",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "reactor": [
                    "str",
                    "typing.Mapping"
                ]
            }
        }
    },
    "gridsync-master/tests/integration/test_watchdog_integration.py": {
        "watchdog": {
            "name": "watchdog",
            "location": 9,
            "return": [
                "typing.Generator[Watchdog]"
            ],
            "arguments": {}
        },
        "test_watchdog_emits_path_modified_signal": {
            "name": "test_watchdog_emits_path_modified_signal",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "watchdog": [],
                "tmp_path": [],
                "qtbot": [
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "gridsync-master/tests/integration/test_zkapauthorizer_plugin.py": {
        "test_zkapauthorizer_version": {
            "name": "test_zkapauthorizer_version",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "zkapauthorizer": []
            }
        },
        "test_zkapauthorizer_add_and_get_voucher": {
            "name": "test_zkapauthorizer_add_and_get_voucher",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "zkapauthorizer": []
            }
        },
        "test_zkapauthorizer_calculate_price": {
            "name": "test_zkapauthorizer_calculate_price",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "zkapauthorizer": []
            }
        }
    }
}
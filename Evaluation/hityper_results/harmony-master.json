{
    "harmony-master/setup.py": {},
    "harmony-master/harmony/clock.py": {
        "cmp_": {
            "name": "cmp_",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "Clock.from_dict": {
            "name": "from_dict",
            "location": 14,
            "return": [],
            "arguments": {
                "class_": [
                    "str",
                    "int",
                    "list[str]"
                ],
                "d": [
                    "str",
                    "int",
                    "list[str]"
                ]
            }
        },
        "Clock.to_dict": {
            "name": "to_dict",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Clock.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clock.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Clock.compare": {
            "name": "compare",
            "location": 31,
            "return": [
                "None",
                "int",
                "dict[, ]",
                "dict[typing.Hashable, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "Clock.update": {
            "name": "update",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                    "str"
                ]
            }
        },
        "Clock.increase": {
            "name": "increase",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "dict[, ]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Clock.comparable": {
            "name": "comparable",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "typing.Hashable"
                ]
            }
        },
        "Clock.__lt__": {
            "name": "__lt__",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Clock.__eq__": {
            "name": "__eq__",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "typing.AbstractSet"
                ]
            }
        },
        "Clock.__gt__": {
            "name": "__gt__",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Clock.__le__": {
            "name": "__le__",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Clock.__ge__": {
            "name": "__ge__",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "harmony-master/harmony/file_state_logic.py": {
        "commit": {
            "name": "commit",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "local_location_id": [
                    "str"
                ],
                "working_directory": [],
                "location_states": [],
                "repository_state": [
                    "int",
                    "str"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 134,
            "return": [
                "tuple[typing.Union[dict[, tuple[]],RepositoryState]]"
            ],
            "arguments": {
                "local_state": [],
                "remote_state": [],
                "merger_id": [
                    "str",
                    "dict[int, dict[, ]]",
                    "int",
                    "None",
                    "dict[str, int]"
                ]
            }
        },
        "auto_rename": {
            "name": "auto_rename",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "working_directory": [
                    "None",
                    "typing.Callable[int, float]",
                    "list[int]",
                    "typing.IO"
                ],
                "repository_state": [
                    "str"
                ]
            }
        }
    },
    "harmony-master/harmony/hashers.py": {
        "get_hasher": {
            "name": "get_hasher",
            "location": 8,
            "return": [],
            "arguments": {
                "h": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "get_hasher.hasher": {
            "name": "hasher",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "s": []
            }
        }
    },
    "harmony-master/harmony/location_states.py": {
        "LocationState.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "files": [
                    "None",
                    "str",
                    "int",
                    "typing.Container"
                ],
                "clock": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "list[str]"
                ],
                "last_modification": [
                    "None",
                    "int",
                    "str",
                    "float",
                    "list[str]"
                ],
                "modified": [
                    "bool"
                ],
                "location": [
                    "None",
                    "str",
                    "bool",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "LocationState.from_dict": {
            "name": "from_dict",
            "location": 31,
            "return": [
                "str",
                "dict[, ]",
                "dict[str, str]"
            ],
            "arguments": {
                "class_": [
                    "bool",
                    "typing.Type",
                    "tuple[typing.Union[typing.Any,...]]",
                    "Exception",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "d": [
                    "str",
                    "bool",
                    "None"
                ]
            }
        },
        "LocationStates.now": {
            "name": "now",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "LocationStates.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "str",
                    "list[str]"
                ],
                "items": [
                    "None",
                    "str",
                    "list[]",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "LocationStates.get_clock": {
            "name": "get_clock",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [
                    "int",
                    "None",
                    "str"
                ]
            }
        },
        "LocationStates.item_to_dict": {
            "name": "item_to_dict",
            "location": 56,
            "return": [
                "typing.Pattern",
                "list[dict[str, typing.Any]]",
                "dict[, ]",
                "dict[str, typing.Literal]",
                "set[str]",
                "typing.OrderedDict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict[, ]",
                    "list[]",
                    "dict[str, bool]"
                ]
            }
        },
        "LocationStates.get_file_state": {
            "name": "get_file_state",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "None"
                ],
                "path": [
                    "str",
                    "bytes"
                ]
            }
        },
        "LocationStates.get_all_paths": {
            "name": "get_all_paths",
            "location": 76,
            "return": [
                "dict[str, str]",
                "dict[, ]",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, str]"
                ]
            }
        },
        "LocationStates.get_locations": {
            "name": "get_locations",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocationStates.iterate_file_states": {
            "name": "iterate_file_states",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [
                    "int",
                    "str"
                ]
            }
        },
        "LocationStates.update": {
            "name": "update",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list[typing.Type]",
                    "set[str]",
                    "str",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "LocationStates.update_file_state": {
            "name": "update_file_state",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "None",
                    "list[str]"
                ],
                "file_state_": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "LocationStates.was_modified": {
            "name": "was_modified",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "id_": [
                    "int",
                    "None",
                    "str"
                ]
            }
        }
    },
    "harmony-master/harmony/protocols.py": {
        "ProtocolMeta.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "None"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "str",
                    "float"
                ],
                "dict_": [
                    "str",
                    "float"
                ]
            }
        },
        "Protocol.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str",
                    "bytes",
                    "int",
                    "None"
                ]
            }
        },
        "Protocol.connect": {
            "name": "connect",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "class_": [
                    "list[]",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "set[VT]",
                    "float",
                    "int",
                    "list[tuple[]]"
                ],
                "uri": [
                    "int",
                    "str"
                ]
            }
        },
        "FileProtocol.is_valid": {
            "name": "is_valid",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "class_": [],
                "uri": [
                    "str",
                    "list[typing.Union[str,typing.Any]]"
                ]
            }
        },
        "FileProtocol.parse_uri": {
            "name": "parse_uri",
            "location": 60,
            "return": [],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ],
                "uri": [
                    "str",
                    "bytes"
                ]
            }
        },
        "FileProtocol.__enter__": {
            "name": "__enter__",
            "location": 71,
            "return": [
                "FileProtocol"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileProtocol.__exit__": {
            "name": "__exit__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "exc_value": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ],
                "trackeback": [
                    "typing.Type",
                    "None",
                    "BaseException"
                ]
            }
        },
        "FileProtocol.pull_harmony_files": {
            "name": "pull_harmony_files",
            "location": 77,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "str"
                ]
            }
        },
        "FileProtocol.pull_working_files": {
            "name": "pull_working_files",
            "location": 80,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "list[str]"
                ],
                "working_directory": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ScpProtocol.is_valid": {
            "name": "is_valid",
            "location": 95,
            "return": [],
            "arguments": {
                "class_": [],
                "uri": [
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "ScpProtocol.parse_uri": {
            "name": "parse_uri",
            "location": 99,
            "return": [
                "None",
                "Address"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "bool",
                    "typing.Type",
                    "dict[str, typing.Union[str,int,bool]]",
                    "list[S]"
                ],
                "uri": [
                    "str"
                ]
            }
        },
        "ScpProtocol.abspath": {
            "name": "abspath",
            "location": 112,
            "return": [
                "str",
                "typing.Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "ScpProtocol.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [
                    "str",
                    "None",
                    "float"
                ]
            }
        },
        "ScpProtocol.__enter__": {
            "name": "__enter__",
            "location": 122,
            "return": [
                "ScpProtocol"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScpProtocol.__exit__": {
            "name": "__exit__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "typing.Type",
                    "BaseException"
                ],
                "exc_value": [
                    "typing.Type",
                    "BaseException"
                ],
                "traceback": [
                    "typing.Type",
                    "BaseException"
                ]
            }
        },
        "ScpProtocol.pull_harmony_files": {
            "name": "pull_harmony_files",
            "location": 139,
            "return": [
                "str",
                "list[]",
                "dict[, ]"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "list[pathlib.Path]"
                ]
            }
        },
        "ScpProtocol.pull_working_files": {
            "name": "pull_working_files",
            "location": 152,
            "return": [
                "dict[typing.Union[str,list[str]], ]"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "list[pathlib.Path]"
                ],
                "working_directory": []
            }
        }
    },
    "harmony-master/harmony/remotes.py": {
        "Remotes.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "by_name": [
                    "None",
                    "str",
                    "bool"
                ],
                "by_id": [
                    "None",
                    "str",
                    "list[str]",
                    "int",
                    "list[\"Address\"]"
                ]
            }
        },
        "Remotes.from_dict": {
            "name": "from_dict",
            "location": 38,
            "return": [],
            "arguments": {
                "class_": [
                    "str",
                    "typing.Any",
                    "None",
                    "list[]",
                    "float"
                ],
                "d": [
                    "str",
                    "list[]"
                ]
            }
        },
        "Remotes.to_dict": {
            "name": "to_dict",
            "location": 43,
            "return": [
                "dict[typing.Text, list[]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remotes.add": {
            "name": "add",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "str",
                    "int",
                    "bytes",
                    "typing.Callable[, ]"
                ],
                "id_": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "Remotes.get_location_any": {
            "name": "get_location_any",
            "location": 63,
            "return": [
                "str",
                "int",
                "typing.Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "int",
                    "typing.Sequence[str]"
                ]
            }
        },
        "Remotes.get_location": {
            "name": "get_location",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "None",
                    "int",
                    "str"
                ],
                "name": [
                    "None",
                    "str",
                    "float"
                ]
            }
        },
        "Remotes.get_remotes": {
            "name": "get_remotes",
            "location": 79,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Remotes.Remote.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "None"
                ],
                "name": [
                    "None"
                ],
                "location": [
                    "None"
                ]
            }
        },
        "Remotes.Remote.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Remotes.Remote.__lt__": {
            "name": "__lt__",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Remotes.Remote.__hash__": {
            "name": "__hash__",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "harmony-master/harmony/repository.py": {
        "Repository.init": {
            "name": "init",
            "location": 31,
            "return": [
                "Repository"
            ],
            "arguments": {
                "class_": [],
                "working_directory": [
                    "str",
                    "None"
                ],
                "name": [
                    "None",
                    "str",
                    "list[str]",
                    "dict[str, str]"
                ]
            }
        },
        "Repository.find": {
            "name": "find",
            "location": 72,
            "return": [],
            "arguments": {
                "class_": [],
                "working_directory": [
                    "str",
                    "bool",
                    "typing.Type"
                ]
            }
        },
        "Repository.load": {
            "name": "load",
            "location": 84,
            "return": [],
            "arguments": {
                "class_": [],
                "harmony_directory": [
                    "typing.Callable[, ]",
                    "list[]",
                    "int"
                ]
            }
        },
        "Repository.clone": {
            "name": "clone",
            "location": 119,
            "return": [],
            "arguments": {
                "class_": [],
                "working_directory": [
                    "None",
                    "str",
                    "list[tuple[typing.Union[int,str]]]",
                    "bool"
                ],
                "location": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "name": [
                    "None",
                    "dict[str, str]",
                    "bool",
                    "str"
                ]
            }
        },
        "Repository.generate_name": {
            "name": "generate_name",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "int"
                ],
                "working_directory": [
                    "str",
                    "typing.TextIO",
                    "list[str]"
                ]
            }
        },
        "Repository.find_harmony_directory_here": {
            "name": "find_harmony_directory_here",
            "location": 154,
            "return": [
                "Path"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "list[str]",
                    "dict[str, typing.Any]",
                    "bool",
                    "None",
                    "dict[, ]"
                ],
                "working_directory": [
                    "str"
                ]
            }
        },
        "Repository.find_harmony_directory": {
            "name": "find_harmony_directory",
            "location": 161,
            "return": [
                "str",
                "None",
                "typing.Pattern",
                "bytes"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "None",
                    "int"
                ],
                "working_directory": [
                    "str",
                    "list[typing.TextIO]",
                    "list[str]",
                    "typing.BinaryIO",
                    "typing.IO",
                    "None"
                ]
            }
        },
        "Repository.find_working_directory_here": {
            "name": "find_working_directory_here",
            "location": 185,
            "return": [
                "list[]",
                "dict[str, list[typing.Any]]",
                "list[int]",
                "tuple[tuple[typing.Union[str,typing.Any]]]",
                "typing.Pattern"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "bytes",
                    "typing.IO"
                ],
                "working_directory": []
            }
        },
        "Repository.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "working_directory": [
                    "int"
                ],
                "harmony_directory": [
                    "None",
                    "bool",
                    "float",
                    "list[str]",
                    "str"
                ]
            }
        },
        "Repository.short_id": {
            "name": "short_id",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repository.save": {
            "name": "save",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.commit": {
            "name": "commit",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repository.pull_state": {
            "name": "pull_state",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "remote_spec": [
                    "float",
                    "int",
                    "tuple[float]"
                ]
            }
        },
        "Repository.fetch": {
            "name": "fetch",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "remote_spec": [
                    "str",
                    "int",
                    "dict[int, int]"
                ]
            }
        },
        "Repository.pull_file": {
            "name": "pull_file",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "remote_spec": [
                    "str",
                    "int",
                    "None",
                    "tuple[typing.Union[float,float,float,float]]"
                ]
            }
        },
        "Repository.add_remote": {
            "name": "add_remote",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "typing.Sequence[object]",
                    "int",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "str"
                ],
                "location": [
                    "typing.Sequence[object]",
                    "int",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "str"
                ],
                "id_": [
                    "None",
                    "typing.Sequence[object]",
                    "int",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "str"
                ]
            }
        },
        "Repository.remove_remote": {
            "name": "remove_remote",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "typing.Pattern"
                ]
            }
        },
        "Repository.get_remotes": {
            "name": "get_remotes",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Repository.get_file_stats": {
            "name": "get_file_stats",
            "location": 322,
            "return": [
                "list[FileStatus]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.init.make_component": {
            "name": "make_component",
            "location": 48,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "Repository.load.load_component": {
            "name": "load_component",
            "location": 100,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "Repository.get_file_stats.FileStatus.__init__": {
            "name": "__init__",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Repository.get_file_stats.FileStatus.__repr__": {
            "name": "__repr__",
            "location": 332,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "harmony-master/harmony/repository_state.py": {
        "RepositoryFileState.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None",
                    "int"
                ],
                "digest": [
                    "None",
                    "bool",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ],
                "clock": [
                    "Clock"
                ],
                "wipe": [
                    "bool"
                ]
            }
        },
        "RepositoryFileState.from_dict": {
            "name": "from_dict",
            "location": 34,
            "return": [
                "str",
                "typing.Final",
                "int",
                "tuple[typing.Union[str,str,str,str,str,str,str,str,str,str,str,str]]",
                "dict[str, typing.Any]",
                "list[str]"
            ],
            "arguments": {
                "class_": [
                    "bool",
                    "typing.Type",
                    "tuple[typing.Union[typing.Any,...]]",
                    "Exception",
                    "str",
                    "None",
                    "dict[str, typing.Any]"
                ],
                "d": [
                    "str"
                ]
            }
        },
        "RepositoryFileState.contents_different": {
            "name": "contents_different",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool"
                ]
            }
        },
        "RepositoryFileState.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepositoryState.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "str",
                    "list[tuple[typing.Union[int,str]]]"
                ],
                "files": [
                    "None",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "RepositoryState.from_dict": {
            "name": "from_dict",
            "location": 54,
            "return": [],
            "arguments": {
                "class_": [
                    "list[]",
                    "dict[str, typing.Any]",
                    "typing.Type",
                    "typing.Mapping",
                    "dict[, ]"
                ],
                "d": [
                    "list[]"
                ]
            }
        },
        "RepositoryState.get_paths": {
            "name": "get_paths",
            "location": 63,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepositoryState.get": {
            "name": "get",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Sequence[str]"
                ],
                "default": [
                    "None",
                    "str",
                    "typing.Sequence[str]"
                ]
            }
        },
        "RepositoryState.__getitem__": {
            "name": "__getitem__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "RepositoryState.__setitem__": {
            "name": "__setitem__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "v": [
                    "str"
                ]
            }
        },
        "RepositoryState.overwrite": {
            "name": "overwrite",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict[, ]",
                    "str",
                    "set[]",
                    "int"
                ]
            }
        },
        "RepositoryState.update_file_state": {
            "name": "update_file_state",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_state": [
                    "str",
                    "int",
                    "list[dict[str, typing.Any]]",
                    "dict[str, int]"
                ],
                "id_": [
                    "str",
                    "None",
                    "int",
                    "typing.Iterable[str]",
                    "bytes"
                ],
                "clock_value": [
                    "str",
                    "None",
                    "int",
                    "typing.Iterable[str]",
                    "bytes"
                ]
            }
        }
    },
    "harmony-master/harmony/ruleset.py": {
        "Ruleset.init": {
            "name": "init",
            "location": 21,
            "return": [],
            "arguments": {
                "class_": [
                    "str",
                    "None",
                    "bool",
                    "typing.BinaryIO"
                ],
                "path": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "Ruleset.load": {
            "name": "load",
            "location": 49,
            "return": [
                "list[str]",
                "str",
                "typing.Pattern",
                "list[]"
            ],
            "arguments": {
                "class_": [
                    "bool",
                    "str",
                    "typing.Iterable[str]",
                    "bytes"
                ],
                "path": [
                    "str",
                    "None",
                    "int",
                    "list[]"
                ]
            }
        },
        "Ruleset.match_path": {
            "name": "match_path",
            "location": 58,
            "return": [],
            "arguments": {
                "path": [
                    "list[str]",
                    "str"
                ],
                "pattern": [
                    "str"
                ]
            }
        },
        "Ruleset.match_directory": {
            "name": "match_directory",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "pattern": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Ruleset.match_filename": {
            "name": "match_filename",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "pattern": [
                    "str",
                    "list[int]",
                    "set[str]",
                    "list[]"
                ]
            }
        },
        "Ruleset.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "rules": [
                    "None",
                    "bool",
                    "list[str]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "Ruleset.iterate_committable_files": {
            "name": "iterate_committable_files",
            "location": 141,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": [],
                "working_directory": [
                    "str",
                    "None"
                ]
            }
        },
        "Ruleset.iterate_files": {
            "name": "iterate_files",
            "location": 146,
            "return": [
                "typing.Generator[FileInfo]"
            ],
            "arguments": {
                "self": [],
                "working_directory": [
                    "str",
                    "typing.Final"
                ]
            }
        },
        "Ruleset.get_rule": {
            "name": "get_rule",
            "location": 163,
            "return": [
                "dict[typing.Text, bool]"
            ],
            "arguments": {
                "self": [],
                "relfn": [
                    "str",
                    "bool"
                ]
            }
        },
        "Ruleset.add_rule": {
            "name": "add_rule",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ruleset.match_path.match_recursive": {
            "name": "match_recursive",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "i_pattern": [],
                "i_path": []
            }
        }
    },
    "harmony-master/harmony/serialization.py": {
        "read": {
            "name": "read",
            "location": 9,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "write": {
            "name": "write",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "str",
                    "int",
                    "NameError",
                    "None",
                    "list[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "dump": {
            "name": "dump",
            "location": 23,
            "return": [],
            "arguments": {
                "d": [
                    "dict[, ]",
                    "tuple[]"
                ]
            }
        },
        "Serializable.get_path": {
            "name": "get_path",
            "location": 30,
            "return": [],
            "arguments": {
                "class_": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None"
                ],
                "harmony_directory": [
                    "bool",
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]",
                    "dict[, ]",
                    "None"
                ]
            }
        },
        "Serializable.init": {
            "name": "init",
            "location": 34,
            "return": [],
            "arguments": {
                "class_": [
                    "str",
                    "None",
                    "bool"
                ],
                "path": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "Serializable.from_dict": {
            "name": "from_dict",
            "location": 43,
            "return": [
                "int",
                "typing.Counter",
                "dict[int, str]",
                "typing.Pattern"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "typing.Iterator",
                    "typing.Callable[, ]"
                ],
                "d": [
                    "str",
                    "typing.Iterator",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Serializable.prepare_value_for_dict": {
            "name": "prepare_value_for_dict",
            "location": 51,
            "return": [
                "tuple[typing.Union[str,typing.Sequence[str],list[],typing.OrderedDict,list[float],int]]"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "None",
                    "int"
                ],
                "k": [
                    "str",
                    "typing.Sequence[str]"
                ],
                "v": []
            }
        },
        "Serializable.to_dict": {
            "name": "to_dict",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "skip": [
                    "tuple[]"
                ]
            }
        },
        "Serializable.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "None",
                    "int"
                ]
            }
        },
        "DirectorySerializable.init": {
            "name": "init",
            "location": 90,
            "return": [],
            "arguments": {
                "class_": [
                    "str",
                    "None",
                    "bool",
                    "typing.BinaryIO"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "DirectorySerializable.load": {
            "name": "load",
            "location": 96,
            "return": [],
            "arguments": {
                "class_": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "DirectorySerializable.from_dict": {
            "name": "from_dict",
            "location": 108,
            "return": [],
            "arguments": {
                "class_": [
                    "dict[, ]",
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[str, list[typing.Callable[, ]]]",
                    "list[P]"
                ],
                "d": []
            }
        },
        "DirectorySerializable.to_dict": {
            "name": "to_dict",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DirectorySerializable.item_from_dict": {
            "name": "item_from_dict",
            "location": 119,
            "return": [],
            "arguments": {
                "class_": [
                    "int",
                    "tuple[str]",
                    "list[P]",
                    "str",
                    "list[str]"
                ],
                "d": [
                    "int",
                    "tuple[str]",
                    "list[P]",
                    "str",
                    "list[str]"
                ]
            }
        },
        "DirectorySerializable.item_to_dict": {
            "name": "item_to_dict",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "DirectorySerializable.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "typing.Callable[str, bool]",
                    "bool"
                ],
                "items": [
                    "dict[, ]",
                    "typing.Mapping",
                    "dict[str, bool]",
                    "str",
                    "dict[str, dict[, ]]"
                ]
            }
        },
        "DirectorySerializable.save": {
            "name": "save",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSerializable.load": {
            "name": "load",
            "location": 139,
            "return": [],
            "arguments": {
                "class_": [
                    "str"
                ],
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "FileSerializable.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "None"
                ]
            }
        },
        "FileSerializable.save": {
            "name": "save",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "harmony-master/harmony/util.py": {
        "datetime_to_iso": {
            "name": "datetime_to_iso",
            "location": 10,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "iso_to_datetime": {
            "name": "iso_to_datetime",
            "location": 14,
            "return": [],
            "arguments": {
                "s": [
                    "int",
                    "str",
                    "None"
                ]
            }
        },
        "shortened_id": {
            "name": "shortened_id",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "id_": [
                    "str"
                ]
            }
        }
    },
    "harmony-master/harmony/working_directory.py": {
        "FileState.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "digest": [],
                "size": [],
                "mtime": [],
                "wipe": []
            }
        },
        "FileState.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "memo": []
            }
        },
        "FileState.exists": {
            "name": "exists",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileState.contents_different": {
            "name": "contents_different",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "WorkingDirectory.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "ruleset": []
            }
        },
        "WorkingDirectory.normalize": {
            "name": "normalize",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "relpath": []
            }
        },
        "WorkingDirectory.get_filenames": {
            "name": "get_filenames",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkingDirectory.__contains__": {
            "name": "__contains__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "WorkingDirectory.file_maybe_modified": {
            "name": "file_maybe_modified",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "file_state": []
            }
        },
        "WorkingDirectory.generate_file_state": {
            "name": "generate_file_state",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "harmony-master/harmony/__init__.py": {},
    "harmony-master/harmony/cli/argument_parser.py": {
        "run_command": {
            "name": "run_command",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "harmony-master/harmony/cli/command.py": {
        "Command.add_to_parser": {
            "name": "add_to_parser",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "subparsers": []
            }
        },
        "Command.setup_parser": {
            "name": "setup_parser",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Command.make_repository": {
            "name": "make_repository",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "ns": []
            }
        },
        "Command.run": {
            "name": "run",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "ns": []
            }
        },
        "CommandGroup.add_to_parser": {
            "name": "add_to_parser",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "subparsers": []
            }
        },
        "CommandGroup.setup_parser": {
            "name": "setup_parser",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "CommandGroup.make_repository": {
            "name": "make_repository",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "ns": []
            }
        },
        "CommandGroup.run": {
            "name": "run",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "ns": []
            }
        }
    },
    "harmony-master/harmony/cli/commands.py": {
        "InitCommand.setup_parser": {
            "name": "setup_parser",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "InitCommand.execute": {
            "name": "execute",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "int",
                    "dict[str, int]"
                ]
            }
        },
        "CommitCommand.execute": {
            "name": "execute",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "int"
                ]
            }
        },
        "PullStateCommand.setup_parser": {
            "name": "setup_parser",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "PullStateCommand.execute": {
            "name": "execute",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "int"
                ]
            }
        },
        "CloneCommand.setup_parser": {
            "name": "setup_parser",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "CloneCommand.execute": {
            "name": "execute",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "int"
                ]
            }
        },
        "StatusCommand.execute": {
            "name": "execute",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "int"
                ]
            }
        },
        "GetCommand.setup_parser": {
            "name": "setup_parser",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "GetCommand.execute": {
            "name": "execute",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": [
                    "int",
                    "str",
                    "typing.Pattern"
                ]
            }
        },
        "StatusCommand.execute.status": {
            "name": "status",
            "location": 66,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "f": []
            }
        },
        "RemoteCommand.AddCommand.setup_parser": {
            "name": "setup_parser",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "RemoteCommand.AddCommand.execute": {
            "name": "execute",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": []
            }
        },
        "RemoteCommand.RemoveCommand.setup_parser": {
            "name": "setup_parser",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "RemoteCommand.RemoveCommand.execute": {
            "name": "execute",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": []
            }
        },
        "RemoteCommand.ListCommand.execute": {
            "name": "execute",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ns": []
            }
        }
    },
    "harmony-master/harmony/cli/console.py": {
        "write_table": {
            "name": "write_table",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "rows": [],
                "headers": [
                    "None"
                ]
            }
        },
        "write_list": {
            "name": "write_list",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "elements": [
                    "list[]",
                    "str"
                ]
            }
        },
        "write_table.print_row": {
            "name": "print_row",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "row": []
            }
        }
    },
    "harmony-master/tests/test_clock.py": {
        "test_clock_construction": {
            "name": "test_clock_construction",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clock_compare_equal": {
            "name": "test_clock_compare_equal",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clock_compare_lower": {
            "name": "test_clock_compare_lower",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clock_compare_greater": {
            "name": "test_clock_compare_greater",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "harmony-master/tests/test_hashers.py": {
        "test_throw_on_incorrect_hasher_name": {
            "name": "test_throw_on_incorrect_hasher_name",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_has_sha1": {
            "name": "test_has_sha1",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sha1_of_empty": {
            "name": "test_sha1_of_empty",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "harmony-master/tests/test_protocols.py": {
        "setup": {
            "name": "setup",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scp_normalize": {
            "name": "test_scp_normalize",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scp_transfer_localhost": {
            "name": "test_scp_transfer_localhost",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "harmony-master/tests/test_repository.py": {
        "setup": {
            "name": "setup",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_workdir_here": {
            "name": "test_find_workdir_here",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init_creates_harmony_dir": {
            "name": "test_init_creates_harmony_dir",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init_fails_with_existing_harmony_dir": {
            "name": "test_init_fails_with_existing_harmony_dir",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_find_repository_from_subdir": {
            "name": "test_find_repository_from_subdir",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_repository_from_harmony_dir": {
            "name": "test_load_repository_from_harmony_dir",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pull_state_copies_certain_files": {
            "name": "test_pull_state_copies_certain_files",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone_empty": {
            "name": "test_clone_empty",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_clone_copies_certain_files": {
            "name": "test_clone_copies_certain_files",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_one_location_state_iff_there_have_been_local_commits_only": {
            "name": "test_one_location_state_iff_there_have_been_local_commits_only",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pull_state_finds_conflict": {
            "name": "test_pull_state_finds_conflict",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pull_state_automerge_same_content_clock_value": {
            "name": "test_pull_state_automerge_same_content_clock_value",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pull_state_finds_conflicts": {
            "name": "test_pull_state_finds_conflicts",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pull_state_conflicts_on_adding": {
            "name": "test_pull_state_conflicts_on_adding",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pull_state_auto_merges_equal_content": {
            "name": "test_pull_state_auto_merges_equal_content",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pull_file_simple": {
            "name": "test_pull_file_simple",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pull_state_autodetects_rename": {
            "name": "test_pull_state_autodetects_rename",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rename_does_nothing_for_unpulled": {
            "name": "test_rename_does_nothing_for_unpulled",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rename_updates_location_state": {
            "name": "test_rename_updates_location_state",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "harmony-master/tests/test_ruleset.py": {
        "test_match_path": {
            "name": "test_match_path",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_match_directory": {
            "name": "test_match_directory",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "harmony-master/tests/test_serialization.py": {
        "test_dict_conversion": {
            "name": "test_dict_conversion",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Dummy.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "bool",
                    "bytes",
                    "typing.Iterable[typing.Any]"
                ],
                "s": [
                    "bool",
                    "bytes",
                    "typing.Iterable[typing.Any]"
                ],
                "l": [
                    "int",
                    "list[str]",
                    "str",
                    "float"
                ],
                "d": [
                    "bool",
                    "bytes",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "Dummy.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "typing.Iterable[T]"
                ]
            }
        }
    },
    "harmony-master/tests/test_working_directory.py": {
        "make_mess": {
            "name": "make_mess",
            "location": 15,
            "return": [
                "tuple[typing.Union[set[Path],dict[typing.Text, typing.Text]]]"
            ],
            "arguments": {
                "d": []
            }
        },
        "ruleset_all": {
            "name": "ruleset_all",
            "location": 42,
            "return": [
                "Ruleset"
            ],
            "arguments": {
                "d": [
                    "int",
                    "dict[, ]"
                ]
            }
        },
        "test_get_filenames_normalized": {
            "name": "test_get_filenames_normalized",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_contains_normalized": {
            "name": "test_contains_normalized",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_generate_file_state_normalized": {
            "name": "test_generate_file_state_normalized",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "harmony-master/tests/utils.py": {
        "directories_equal": {
            "name": "directories_equal",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "dir1": [
                    "str",
                    "list[str]"
                ],
                "dir2": [
                    "str",
                    "list[str]"
                ],
                "msg": [
                    "typing.Text"
                ],
                "failure_base": [
                    "None",
                    "str"
                ]
            }
        },
        "TempDir.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempDir.__enter__": {
            "name": "__enter__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TempDir.__exit__": {
            "name": "__exit__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "BaseException",
                    "None",
                    "typing.Callable[str,object, None]",
                    "typing.Iterable[float]",
                    "bool"
                ],
                "value": [
                    "BaseException",
                    "None",
                    "typing.Callable[str,object, None]",
                    "typing.Iterable[float]",
                    "bool"
                ],
                "tb": [
                    "BaseException",
                    "None",
                    "typing.Callable[str,object, None]",
                    "typing.Iterable[float]",
                    "bool"
                ]
            }
        },
        "TestCase.assertFilesEqual": {
            "name": "assertFilesEqual",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str"
                ],
                "b": [
                    "str"
                ]
            }
        },
        "TestCase.assertFileNotExists": {
            "name": "assertFileNotExists",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.assertFileExists": {
            "name": "assertFileExists",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.assertDirectoriesEqual": {
            "name": "assertDirectoriesEqual",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dir1": [
                    "str"
                ],
                "dir2": [
                    "str"
                ],
                "msg": [
                    "typing.Text"
                ],
                "failure_base": [
                    "None",
                    "str",
                    "typing.Mapping",
                    "dict[str, typing.Any]",
                    "int"
                ]
            }
        },
        "TestCase.assertFileContentsEqual": {
            "name": "assertFileContentsEqual",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename1": [
                    "str"
                ],
                "filename2": [
                    "str"
                ],
                "msg": [
                    "typing.Text"
                ]
            }
        }
    },
    "harmony-master/tests/__init__.py": {}
}
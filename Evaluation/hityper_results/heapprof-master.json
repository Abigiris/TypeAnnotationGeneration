{
    "heapprof-master/setup.py": {
        "findEgg": {
            "name": "findEgg",
            "location": 20,
            "return": [],
            "arguments": {
                "prefix": [
                    "str",
                    "bool"
                ]
            }
        },
        "findCMake": {
            "name": "findCMake",
            "location": 38,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {}
        },
        "BuildExtWithABSL.run": {
            "name": "run",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "heapprof-master/docs_src/conf.py": {
        "setup": {
            "name": "setup",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "heapprof-master/heapprof/flow_graph.py": {
        "FlowGraph.asDotFile": {
            "name": "asDotFile",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "dotFile": [],
                "minNodeFraction": [
                    "float"
                ],
                "minEdgeFraction": [
                    "float"
                ],
                "collapseNodes": [
                    "bool"
                ],
                "sizeNodesBasedOnLocalUsage": [
                    "bool"
                ]
            }
        },
        "FlowGraph.writeDotFile": {
            "name": "writeDotFile",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "FlowGraph.compare": {
            "name": "compare",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "dotFileName": []
            }
        }
    },
    "heapprof-master/heapprof/lowlevel.py": {
        "HPM.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filebase": [
                    "str"
                ]
            }
        },
        "HPM.initialTime": {
            "name": "initialTime",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HPM.samplingRate": {
            "name": "samplingRate",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HPM.rawTrace": {
            "name": "rawTrace",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "traceindex": [
                    "int"
                ]
            }
        },
        "HPM.trace": {
            "name": "trace",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "traceindex": [
                    "str",
                    "int",
                    "typing.Callable[, ]"
                ]
            }
        },
        "HPM.scaleFactor": {
            "name": "scaleFactor",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "eventSize": [
                    "int"
                ]
            }
        },
        "HPM.warmRawTraceCache": {
            "name": "warmRawTraceCache",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HPM.close": {
            "name": "close",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HPM.__del__": {
            "name": "__del__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HPM._makeHeapTrace": {
            "name": "_makeHeapTrace",
            "location": 118,
            "return": [
                "None",
                "list[TraceLine]"
            ],
            "arguments": {
                "self": [],
                "rawTrace": []
            }
        },
        "HPD.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filebase": [
                    "str",
                    "list[str]"
                ],
                "hpm": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "HPD.__iter__": {
            "name": "__iter__",
            "location": 157,
            "return": [
                "typing.Generator[HPDEvent]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HPC.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filebase": [
                    "str"
                ],
                "hpm": [
                    "None",
                    "int",
                    "float"
                ]
            }
        },
        "HPC.__del__": {
            "name": "__del__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HPC.__len__": {
            "name": "__len__",
            "location": 190,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HPC.__getitem__": {
            "name": "__getitem__",
            "location": 193,
            "return": [
                "Snapshot"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "tuple[typing.Union[int,int]]"
                ]
            }
        },
        "HPC.__iter__": {
            "name": "__iter__",
            "location": 201,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HPC.__contains__": {
            "name": "__contains__",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "HPC.close": {
            "name": "close",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HPC.make": {
            "name": "make",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict[str, typing.Any]",
                    "bool",
                    "dict[, ]"
                ],
                "filebase": [
                    "float",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, None]"
                ],
                "timeInterval": [],
                "precision": [
                    "float",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, None]"
                ],
                "verbose": [
                    "float",
                    "str",
                    "bool",
                    "typing.Callable[typing.Any, None]"
                ]
            }
        }
    },
    "heapprof-master/heapprof/reader.py": {
        "Reader.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filebase": [
                    "int",
                    "float"
                ]
            }
        },
        "Reader.hasDigest": {
            "name": "hasDigest",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.makeDigest": {
            "name": "makeDigest",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeInterval": [
                    "int"
                ],
                "precision": [
                    "float"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "Reader.close": {
            "name": "close",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.__enter__": {
            "name": "__enter__",
            "location": 70,
            "return": [
                "Reader"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.__exit__": {
            "name": "__exit__",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.initialTime": {
            "name": "initialTime",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.finalTime": {
            "name": "finalTime",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.elapsedTime": {
            "name": "elapsedTime",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.samplingRate": {
            "name": "samplingRate",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.snapshotInterval": {
            "name": "snapshotInterval",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.trace": {
            "name": "trace",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "traceindex": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "Reader.rawTrace": {
            "name": "rawTrace",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "traceindex": [
                    "str",
                    "list[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Reader.snapshots": {
            "name": "snapshots",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.snapshotAt": {
            "name": "snapshotAt",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "relativeTime": [
                    "int"
                ]
            }
        },
        "Reader.hpm": {
            "name": "hpm",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.hpd": {
            "name": "hpd",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.hpc": {
            "name": "hpc",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reader.fastGetUsage": {
            "name": "fastGetUsage",
            "location": 153,
            "return": [
                "tuple[typing.Union[tuple[],int]]"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "dict[str, str]",
                    "tuple[bytes]",
                    "dict[str, int]",
                    "dict[, ]",
                    "bool"
                ],
                "lines": [
                    "str"
                ],
                "cumulative": [
                    "bool"
                ]
            }
        },
        "Reader.timePlot": {
            "name": "timePlot",
            "location": 262,
            "return": [
                "TimePlot"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "None",
                    "str",
                    "typing.Sequence[str]",
                    "list[str]",
                    "list[list[str]]",
                    "typing.Collection",
                    "tuple[typing.Hashable]"
                ]
            }
        },
        "Reader.flowGraph": {
            "name": "flowGraph",
            "location": 310,
            "return": [
                "FlowGraph"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "dict[int, dict[int, int]]",
                    "dict[str, int]",
                    "dict[str, float]"
                ]
            }
        },
        "Reader.flowGraphAt": {
            "name": "flowGraphAt",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "relativeTime": [
                    "int",
                    "float"
                ]
            }
        },
        "Reader.compareFlowGraphs": {
            "name": "compareFlowGraphs",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dotFile": [
                    "str",
                    "None",
                    "bool"
                ]
            }
        },
        "Reader.flameGraph": {
            "name": "flameGraph",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "snapshot": [
                    "dict[, ]",
                    "str",
                    "dict[str, int]"
                ],
                "output": []
            }
        },
        "Reader.flameGraphAt": {
            "name": "flameGraphAt",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "relativeTime": [
                    "int",
                    "None",
                    "tuple[typing.Union[str,int,int]]",
                    "str",
                    "float",
                    "list[str]"
                ],
                "output": [
                    "int",
                    "None",
                    "tuple[typing.Union[str,int,int]]",
                    "str",
                    "float",
                    "list[str]"
                ]
            }
        },
        "Reader.writeFlameGraph": {
            "name": "writeFlameGraph",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "when": [
                    "typing.IO",
                    "list[int]",
                    "int",
                    "bytes",
                    "tuple[typing.Union[int,int,int]]"
                ]
            }
        },
        "Reader._openHPC": {
            "name": "_openHPC",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reader.TimePlot.pyplot": {
            "name": "pyplot",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scale": [
                    "int"
                ]
            }
        }
    },
    "heapprof-master/heapprof/types.py": {
        "RawTraceLine.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawTraceLine.parse": {
            "name": "parse",
            "location": 17,
            "return": [
                "RawTraceLine"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "dict[str, str]"
                ],
                "value": [
                    "str",
                    "None",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Snapshot.totalUsage": {
            "name": "totalUsage",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "heapprof-master/heapprof/_flow_graph.py": {
        "makeDotFile": {
            "name": "makeDotFile",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "output": [],
                "graphs": [],
                "minNodeFraction": [
                    "float"
                ],
                "minEdgeFraction": [
                    "float"
                ],
                "collapseNodes": [
                    "bool"
                ],
                "sizeNodesBasedOnLocalUsage": [
                    "bool"
                ]
            }
        },
        "_nodeId": {
            "name": "_nodeId",
            "location": 45,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "line": []
            }
        },
        "_fontSize": {
            "name": "_fontSize",
            "location": 70,
            "return": [
                "int"
            ],
            "arguments": {
                "sizeFrac": []
            }
        },
        "_color": {
            "name": "_color",
            "location": 74,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "cumSizeFrac": []
            }
        },
        "_colorAsHex": {
            "name": "_colorAsHex",
            "location": 82,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "v": []
            }
        },
        "_makeNodes": {
            "name": "_makeNodes",
            "location": 156,
            "return": [
                "dict[, _NodeInfo]"
            ],
            "arguments": {
                "graphs": [],
                "minNodeFraction": []
            }
        },
        "_makeEdges": {
            "name": "_makeEdges",
            "location": 191,
            "return": [
                "_NodeEdges"
            ],
            "arguments": {
                "graphs": [],
                "nodes": [],
                "minEdgeFraction": []
            }
        },
        "_makeRootNode": {
            "name": "_makeRootNode",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "graphs": [],
                "nodes": [],
                "edges": []
            }
        },
        "_collapseNodes": {
            "name": "_collapseNodes",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "graphs": [],
                "nodes": [],
                "edges": [],
                "nodeMap": []
            }
        },
        "_render": {
            "name": "_render",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "output": [],
                "graphs": [],
                "nodes": [],
                "edges": [],
                "nodeMap": [],
                "minEdgeFraction": [],
                "sizeNodesBasedOnLocalUsage": []
            }
        },
        "_NodeInfo.add": {
            "name": "add",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_NodeInfo.fontSize": {
            "name": "fontSize",
            "location": 110,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "graphs": [],
                "usageSizing": []
            }
        },
        "_NodeInfo.label": {
            "name": "label",
            "location": 119,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "graphs": []
            }
        }
    },
    "heapprof-master/heapprof/_si_prefix.py": {
        "siPrefixString": {
            "name": "siPrefixString",
            "location": 41,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "value": [],
                "threshold": [
                    "float"
                ],
                "precision": [
                    "int"
                ],
                "binary": [
                    "bool"
                ],
                "iecFormat": [
                    "bool"
                ],
                "failOnOverflow": [
                    "bool"
                ]
            }
        },
        "bytesString": {
            "name": "bytesString",
            "location": 81,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "value": [],
                "iecFormat": [
                    "bool"
                ]
            }
        },
        "_siExponent": {
            "name": "_siExponent",
            "location": 100,
            "return": [
                "tuple[int]",
                "tuple[]"
            ],
            "arguments": {
                "value": [],
                "base": [],
                "threshold": []
            }
        },
        "_prefix": {
            "name": "_prefix",
            "location": 119,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "power": [],
                "iec": []
            }
        }
    },
    "heapprof-master/heapprof/__init__.py": {
        "start": {
            "name": "start",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "filebase": [
                    "str",
                    "tuple[int]",
                    "typing.Callable[, ]"
                ],
                "samplingRate": [
                    "None",
                    "str",
                    "tuple[int]",
                    "typing.Callable[, ]"
                ]
            }
        },
        "gatherStats": {
            "name": "gatherStats",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stop": {
            "name": "stop",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "isProfiling": {
            "name": "isProfiling",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 61,
            "return": [
                "Reader"
            ],
            "arguments": {
                "filebase": [
                    "str",
                    "int"
                ],
                "timeInterval": [
                    "int"
                ],
                "precision": [
                    "float"
                ]
            }
        }
    },
    "heapprof-master/heapprof/__main__.py": {},
    "heapprof-master/heapprof/tests/end_to_end_test.py": {
        "EndToEndTest.testGatherStats": {
            "name": "testGatherStats",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EndToEndTest.testHeapProfiler": {
            "name": "testHeapProfiler",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "heapprof-master/heapprof/tests/si_prefix_test.py": {
        "SIPrefixTest.testDecimal": {
            "name": "testDecimal",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SIPrefixTest.testBinary": {
            "name": "testBinary",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SIPrefixTest.testIEC": {
            "name": "testIEC",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "heapprof-master/heapprof/tests/__init__.py": {},
    "heapprof-master/tools/docs.py": {
        "findCommand": {
            "name": "findCommand",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "commandName": [
                    "str",
                    "bool"
                ]
            }
        },
        "ensureRequirements": {
            "name": "ensureRequirements",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "clearOldSite": {
            "name": "clearOldSite",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "rebuildSphinx": {
            "name": "rebuildSphinx",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "configureSite": {
            "name": "configureSite",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "heapprof-master/tools/lint.py": {
        "addFileToList": {
            "name": "addFileToList",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "list[str]",
                    "dict[str, typing.Any]",
                    "str",
                    "typing.Sequence[typing.Any]"
                ],
                "pyFiles": [
                    "list[str]"
                ],
                "cppFiles": [
                    "list[str]"
                ]
            }
        },
        "findFiles": {
            "name": "findFiles",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "rootDir": [
                    "str"
                ],
                "pyFiles": [
                    "list[str]",
                    "str"
                ],
                "cppFiles": [
                    "list[str]",
                    "str"
                ],
                "seenDirs": [
                    "None",
                    "list[str]",
                    "dict[, ]",
                    "dict[str, str]",
                    "set[]",
                    "str",
                    "typing.Type"
                ]
            }
        },
        "runCommand": {
            "name": "runCommand",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "lintPyFiles": {
            "name": "lintPyFiles",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "files": []
            }
        },
        "fixPyFiles": {
            "name": "fixPyFiles",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "files": [
                    "list[str]",
                    "str"
                ]
            }
        },
        "lintCppFiles": {
            "name": "lintCppFiles",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "files": []
            }
        },
        "fixCppFiles": {
            "name": "fixCppFiles",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "files": [
                    "list[str]",
                    "str",
                    "None"
                ]
            }
        }
    },
    "heapprof-master/tools/_common.py": {}
}
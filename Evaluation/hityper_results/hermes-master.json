{
    "hermes-master/carbon-ledger/fetch_data_from_csv.py": {
        "epoch_to_datetime": {
            "name": "epoch_to_datetime",
            "location": 84,
            "return": [],
            "arguments": {
                "ts": []
            }
        },
        "datetime_to_string": {
            "name": "datetime_to_string",
            "location": 91,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "append": {
            "name": "append",
            "location": 95,
            "return": [
                "list[typing.Union[str,int,dict[str, typing.Any]]]"
            ],
            "arguments": {
                "d": [
                    "dict[, ]"
                ],
                "key": [
                    "str",
                    "dict[, ]",
                    "list[]"
                ],
                "value": [
                    "int",
                    "dict[str, typing.Any]",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "parse_csv": {
            "name": "parse_csv",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "csv_file_name": [
                    "typing.Text"
                ]
            }
        },
        "extract_metadata": {
            "name": "extract_metadata",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "extract_latencies": {
            "name": "extract_latencies",
            "location": 135,
            "return": [
                "tuple[typing.Union[list[tuple[int]],list[str]]]"
            ],
            "arguments": {
                "latency_type": [
                    "str",
                    "int",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "get_statistics": {
            "name": "get_statistics",
            "location": 168,
            "return": [
                "tuple[typing.Union[Counter,list[tuple[int]]]]"
            ],
            "arguments": {}
        }
    },
    "hermes-master/carbon-ledger/fetch_data_from_tangle.py": {
        "epoch_to_datetime": {
            "name": "epoch_to_datetime",
            "location": 24,
            "return": [],
            "arguments": {
                "ts": []
            }
        },
        "datetime_to_string": {
            "name": "datetime_to_string",
            "location": 31,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "process_transaction_bundle_data": {
            "name": "process_transaction_bundle_data",
            "location": 35,
            "return": [
                "tuple[typing.Union[typing.Text,list[str]]]"
            ],
            "arguments": {
                "transactions": [
                    "str",
                    "list[str]"
                ]
            }
        },
        "fetch_data_from_address": {
            "name": "fetch_data_from_address",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "address": [
                    "None",
                    "str",
                    "typing.Hashable"
                ]
            }
        }
    },
    "hermes-master/carbon-ledger/setup.py": {},
    "hermes-master/carbon-ledger/bin/carbon-ledger.py": {
        "signal_handler": {
            "name": "signal_handler",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hermes-master/carbon-ledger/src/carbon/__init__.py": {},
    "hermes-master/carbon-ledger/src/carbon/ledger/backends.py": {},
    "hermes-master/carbon-ledger/src/carbon/ledger/connectors.py": {
        "get_connector": {
            "name": "get_connector",
            "location": 181,
            "return": [
                "IOTAConnector"
            ],
            "arguments": {
                "ledger": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Block.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ],
                "next_link": [
                    "typing.Sequence[tuple[typing.Union[str,int]]]",
                    "bool",
                    "list[str]",
                    "list[dict[, ]]",
                    "bytes"
                ],
                "previous_link": [
                    "typing.Sequence[tuple[typing.Union[str,int]]]",
                    "bool",
                    "list[str]",
                    "list[dict[, ]]",
                    "bytes"
                ],
                "data": [
                    "dict[str, str]",
                    "str",
                    "dict[str, list[int]]",
                    "dict[, ]",
                    "None",
                    "list[list[int]]"
                ],
                "metadata": [
                    "str",
                    "bool",
                    "dict[str, str]"
                ]
            }
        },
        "LedgerConnector.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "int",
                    "float"
                ]
            }
        },
        "LedgerConnector.fetch": {
            "name": "fetch",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "dict[, ]",
                    "None",
                    "str",
                    "list[float]"
                ],
                "log": [
                    "int",
                    "dict[, ]",
                    "None",
                    "str",
                    "list[float]"
                ]
            }
        },
        "IOTAConnector.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_address": [
                    "typing.Text"
                ]
            }
        },
        "IOTAConnector.fetch": {
            "name": "fetch",
            "location": 53,
            "return": [
                "int",
                "list[]",
                "dict[str, tuple[typing.Union[typing.Any,typing.Any]]]",
                "tuple[int]",
                "list[int]",
                "dict[, ]",
                "str",
                "typing.Type"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "dict[str, typing.Any]",
                    "str",
                    "list[dict[, ]]"
                ],
                "log": [
                    "dict[str, str]",
                    "dict[, ]",
                    "None",
                    "str",
                    "typing.Optional[]",
                    "bytes"
                ]
            }
        },
        "Stream.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ledger_connector": [
                    "str",
                    "bool",
                    "dict[, ]"
                ],
                "root_address": [
                    "str",
                    "list[int]"
                ],
                "logger": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, bytes]",
                    "None"
                ]
            }
        },
        "Stream._fetch": {
            "name": "_fetch",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "int"
                ],
                "latest": [
                    "bool"
                ]
            }
        },
        "Stream.__iter__": {
            "name": "__iter__",
            "location": 163,
            "return": [
                "LazyIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.__reversed__": {
            "name": "__reversed__",
            "location": 166,
            "return": [
                "LazyIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.__len__": {
            "name": "__len__",
            "location": 169,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.__getitem__": {
            "name": "__getitem__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "list[str]",
                    "typing.Mapping"
                ]
            }
        },
        "Stream.data": {
            "name": "data",
            "location": 177,
            "return": [
                "LazyDataIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "IOTAConnector.fetch.get_transactions": {
            "name": "get_transactions",
            "location": 62,
            "return": [],
            "arguments": {
                "address": []
            }
        },
        "IOTAConnector.fetch.get_signature_string": {
            "name": "get_signature_string",
            "location": 66,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "Stream.LazyIterator.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [],
                "reverse_order": [
                    "bool"
                ]
            }
        },
        "Stream.LazyIterator.__next__": {
            "name": "__next__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stream.LazyIterator.__iter__": {
            "name": "__iter__",
            "location": 120,
            "return": [
                "LazyIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.LazyDataIterator.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [],
                "reverse_order": [
                    "bool"
                ]
            }
        },
        "Stream.LazyDataIterator.__next__": {
            "name": "__next__",
            "location": 130,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stream.LazyDataIterator.__iter__": {
            "name": "__iter__",
            "location": 139,
            "return": [
                "LazyIterator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hermes-master/carbon-ledger/src/carbon/ledger/data.py": {
        "Packet.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "typing.Text"
                ],
                "tag": [
                    "typing.Text"
                ],
                "other_tags": [
                    "typing.Text"
                ],
                "timestamp": [
                    "typing.Text"
                ],
                "data": [
                    "None",
                    "str",
                    "bool"
                ],
                "block": [
                    "None",
                    "str",
                    "bool",
                    "list[str]",
                    "typing.Type"
                ]
            }
        },
        "Packet._parse_raw": {
            "name": "_parse_raw",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet._to_raw": {
            "name": "_to_raw",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Packet.tag": {
            "name": "tag",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packet.tags": {
            "name": "tags",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packet.from_raw": {
            "name": "from_raw",
            "location": 55,
            "return": [
                "Packet"
            ],
            "arguments": {
                "raw": [
                    "str",
                    "typing.Callable[, ]"
                ]
            }
        },
        "Packet.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packet.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Packet.__metrics_20__": {
            "name": "__metrics_20__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hermes-master/carbon-ledger/src/carbon/ledger/protocols.py": {
        "epoch_to_datetime": {
            "name": "epoch_to_datetime",
            "location": 16,
            "return": [],
            "arguments": {
                "ts": []
            }
        },
        "datetime_to_string": {
            "name": "datetime_to_string",
            "location": 23,
            "return": [],
            "arguments": {
                "dt": []
            }
        },
        "get_protocol_parser": {
            "name": "get_protocol_parser",
            "location": 69,
            "return": [
                "HermesPlaintextParser"
            ],
            "arguments": {
                "protocol_id": [
                    "str"
                ]
            }
        },
        "ProtocolParser.parse_headers": {
            "name": "parse_headers",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "address": [
                    "str",
                    "bool",
                    "None",
                    "list[str]"
                ],
                "raw_data": [
                    "str",
                    "bool",
                    "None",
                    "list[str]"
                ],
                "log": [
                    "str",
                    "bool",
                    "None",
                    "list[str]"
                ]
            }
        },
        "ProtocolParser.parse_data": {
            "name": "parse_data",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "dict[str, str]",
                    "list[]"
                ],
                "log": [
                    "dict[str, str]",
                    "list[]"
                ]
            }
        },
        "HermesPlaintextParser.parse_headers": {
            "name": "parse_headers",
            "location": 42,
            "return": [
                "Block"
            ],
            "arguments": {
                "address": [
                    "str"
                ],
                "raw_data": [
                    "str",
                    "typing.Mapping"
                ],
                "log": []
            }
        },
        "HermesPlaintextParser.parse_data": {
            "name": "parse_data",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "str"
                ],
                "log": [
                    "dict[str, str]",
                    "list[]"
                ]
            }
        }
    },
    "hermes-master/carbon-ledger/src/carbon/ledger/__init__.py": {},
    "hermes-master/marketplace/setup.py": {},
    "hermes-master/marketplace/src/hermes/config.py": {},
    "hermes-master/marketplace/src/hermes/currencies.py": {},
    "hermes-master/marketplace/src/hermes/db.py": {
        "init_db": {
            "name": "init_db",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hermes-master/marketplace/src/hermes/errors.py": {},
    "hermes-master/marketplace/src/hermes/exceptions.py": {},
    "hermes-master/marketplace/src/hermes/server.py": {},
    "hermes-master/marketplace/src/hermes/signals.py": {
        "register_signals": {
            "name": "register_signals",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "register_signals.after_request": {
            "name": "after_request",
            "location": 12,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "register_signals.exceptions": {
            "name": "exceptions",
            "location": 29,
            "return": [],
            "arguments": {
                "e": []
            }
        }
    },
    "hermes-master/marketplace/src/hermes/types.py": {},
    "hermes-master/marketplace/src/hermes/utils.py": {
        "make_json_response": {
            "name": "make_json_response",
            "location": 4,
            "return": [],
            "arguments": {
                "status_code": [
                    "int"
                ]
            }
        },
        "send_email": {
            "name": "send_email",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hermes-master/marketplace/src/hermes/views.py": {
        "view_decorator_factory": {
            "name": "view_decorator_factory",
            "location": 39,
            "return": [],
            "arguments": {
                "http_method": [
                    "str",
                    "typing.Callable[, ]",
                    "list[str]"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 62,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "deregister": {
            "name": "deregister",
            "location": 97,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "None"
                ]
            }
        },
        "login": {
            "name": "login",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "get_emails": {
            "name": "get_emails",
            "location": 127,
            "return": [],
            "arguments": {
                "user_id": [
                    "str"
                ]
            }
        },
        "delete_email_view": {
            "name": "delete_email_view",
            "location": 135,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "bool"
                ],
                "email_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "verify_email_view": {
            "name": "verify_email_view",
            "location": 146,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ],
                "email_id": [
                    "str",
                    "int"
                ]
            }
        },
        "list_public_keys": {
            "name": "list_public_keys",
            "location": 167,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "post_su": {
            "name": "post_su",
            "location": 177,
            "return": [],
            "arguments": {
                "user_id": [
                    "str"
                ]
            }
        },
        "list_users": {
            "name": "list_users",
            "location": 190,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "me": {
            "name": "me",
            "location": 196,
            "return": [],
            "arguments": {}
        },
        "get_user_details": {
            "name": "get_user_details",
            "location": 204,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "None"
                ]
            }
        },
        "patch_user": {
            "name": "patch_user",
            "location": 220,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_key_verification_message": {
            "name": "get_key_verification_message",
            "location": 225,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "None"
                ],
                "key_id": [
                    "str",
                    "bytes"
                ]
            }
        },
        "list_tokens_view": {
            "name": "list_tokens_view",
            "location": 248,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "create_token": {
            "name": "create_token",
            "location": 253,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "revoke_token_view": {
            "name": "revoke_token_view",
            "location": 281,
            "return": [],
            "arguments": {
                "user_id": [
                    "str",
                    "int",
                    "None"
                ],
                "token_name": [
                    "str"
                ]
            }
        },
        "create_ad_view": {
            "name": "create_ad_view",
            "location": 296,
            "return": [],
            "arguments": {}
        },
        "list_ads": {
            "name": "list_ads",
            "location": 317,
            "return": [],
            "arguments": {}
        },
        "get_ad": {
            "name": "get_ad",
            "location": 342,
            "return": [],
            "arguments": {
                "ad_id": [
                    "int",
                    "str"
                ]
            }
        },
        "modify_ad": {
            "name": "modify_ad",
            "location": 350,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "ad_id": [
                    "int",
                    "str",
                    "float",
                    "None",
                    "list[]",
                    "bytes"
                ]
            }
        },
        "delete_ad": {
            "name": "delete_ad",
            "location": 356,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "ad_id": [
                    "str",
                    "int",
                    "list[]"
                ]
            }
        },
        "register_views_to_app": {
            "name": "register_views_to_app",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": []
            }
        },
        "log_error_and_make_response": {
            "name": "log_error_and_make_response",
            "location": 366,
            "return": [],
            "arguments": {
                "err": [
                    "Exception",
                    "str",
                    "dict[, ]",
                    "None"
                ],
                "error_code": [
                    "str",
                    "int",
                    "bytes",
                    "list[I]",
                    "typing.Mapping"
                ],
                "msg": [
                    "typing.Text"
                ]
            }
        },
        "view_decorator_factory.rule_decorator": {
            "name": "rule_decorator",
            "location": 43,
            "return": [],
            "arguments": {
                "rule": []
            }
        },
        "view_decorator_factory.rule_decorator.view_decorator": {
            "name": "view_decorator",
            "location": 44,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "hermes-master/marketplace/src/hermes/wsgi.py": {},
    "hermes-master/marketplace/src/hermes/__init__.py": {},
    "hermes-master/marketplace/src/hermes/ad/controllers.py": {
        "resolve_ad": {
            "name": "resolve_ad",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "ad_id": [
                    "str",
                    "int"
                ]
            }
        },
        "create_ad": {
            "name": "create_ad",
            "location": 23,
            "return": [
                "Ad"
            ],
            "arguments": {
                "owner": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "int"
                ],
                "data_type": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "int"
                ],
                "data_unit": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "int"
                ],
                "start_of_stream_address": [
                    "str",
                    "None",
                    "dict[str, str]",
                    "int"
                ],
                "longitude": [
                    "list[int]",
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "latitude": [
                    "list[int]",
                    "None",
                    "str",
                    "list[str]",
                    "int"
                ],
                "protocol": [
                    "typing.Text"
                ],
                "mobile": [
                    "bool"
                ],
                "rate": [],
                "currency": []
            }
        },
        "ad_to_json": {
            "name": "ad_to_json",
            "location": 106,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "ad": [
                    "int"
                ]
            }
        },
        "ping_ad": {
            "name": "ping_ad",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "ad_id": [
                    "str",
                    "None"
                ],
                "requesting_user": [
                    "str",
                    "typing.Callable[[], None]",
                    "int",
                    "float"
                ]
            }
        },
        "delete_ad": {
            "name": "delete_ad",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "ad_id": [
                    "str"
                ],
                "requesting_user": [
                    "str"
                ]
            }
        },
        "AdQuery.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdQuery.active": {
            "name": "active",
            "location": 57,
            "return": [
                "AdQuery"
            ],
            "arguments": {
                "self": [],
                "active": [
                    "bool"
                ]
            }
        },
        "AdQuery.inactive": {
            "name": "inactive",
            "location": 64,
            "return": [
                "AdQuery"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdQuery.by_location": {
            "name": "by_location",
            "location": 71,
            "return": [
                "AdQuery"
            ],
            "arguments": {
                "self": [],
                "latitude": [
                    "int",
                    "list[]"
                ],
                "longitude": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "height": [
                    "int"
                ]
            }
        },
        "AdQuery.by_data_type": {
            "name": "by_data_type",
            "location": 89,
            "return": [
                "AdQuery"
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "str"
                ]
            }
        },
        "AdQuery.resolve": {
            "name": "resolve",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdQuery.to_json": {
            "name": "to_json",
            "location": 102,
            "return": [
                "list[]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hermes-master/marketplace/src/hermes/ad/models.py": {
        "Ad.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ad.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hermes-master/marketplace/src/hermes/ad/__init__.py": {},
    "hermes-master/marketplace/src/hermes/payments/models.py": {
        "Purchase.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Purchase.__str__": {
            "name": "__str__",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "hermes-master/marketplace/src/hermes/payments/__init__.py": {},
    "hermes-master/marketplace/src/hermes/rabbtimq/api.py": {
        "list_vhosts": {
            "name": "list_vhosts",
            "location": 8,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "add_vhost": {
            "name": "add_vhost",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "list_users": {
            "name": "list_users",
            "location": 31,
            "return": [
                "list[]"
            ],
            "arguments": {}
        },
        "add_user": {
            "name": "add_user",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "None",
                    "dict[str, typing.Any]",
                    "list[str]"
                ],
                "password": [
                    "str",
                    "dict[, ]",
                    "None",
                    "int"
                ],
                "tags": [
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "ping": {
            "name": "ping",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "hermes-master/marketplace/src/hermes/rabbtimq/__init__.py": {},
    "hermes-master/marketplace/src/hermes/user/controllers.py": {
        "resolve_user": {
            "name": "resolve_user",
            "location": 33,
            "return": [
                "None",
                "User"
            ],
            "arguments": {
                "some_user": [
                    "typing.Iterable[str]",
                    "typing.Mapping",
                    "None",
                    "typing.Sequence[str]"
                ]
            }
        },
        "resolve_token": {
            "name": "resolve_token",
            "location": 70,
            "return": [
                "None",
                "BaseToken"
            ],
            "arguments": {
                "some_token": [
                    "str",
                    "None",
                    "bool",
                    "dict[str, str]",
                    "list[str]",
                    "bytes"
                ]
            }
        },
        "resolve_public_key": {
            "name": "resolve_public_key",
            "location": 99,
            "return": [
                "None",
                "PublicKey"
            ],
            "arguments": {
                "some_key": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "check_password_strength": {
            "name": "check_password_strength",
            "location": 124,
            "return": [],
            "arguments": {
                "password": []
            }
        },
        "hash_password": {
            "name": "hash_password",
            "location": 144,
            "return": [],
            "arguments": {
                "passwd": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "bytes"
                ]
            }
        },
        "hash_value": {
            "name": "hash_value",
            "location": 159,
            "return": [],
            "arguments": {
                "some_str": [
                    "str",
                    "int",
                    "set[str]"
                ]
            }
        },
        "valid_ecdsa_public_key": {
            "name": "valid_ecdsa_public_key",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "check_rsa_public_key": {
            "name": "check_rsa_public_key",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "register_user": {
            "name": "register_user",
            "location": 195,
            "return": [
                "tuple[typing.Union[User,None,str,tuple[typing.Union[typing.Literal,typing.Literal]],list[list[int]],int,typing.Iterator,dict[str, str]]]"
            ],
            "arguments": {
                "email": [
                    "typing.Text"
                ],
                "password": [
                    "typing.Text"
                ],
                "name": [
                    "typing.Text"
                ],
                "fullname": [
                    "typing.Text"
                ],
                "public_key": [
                    "typing.Text"
                ],
                "public_key_type": [
                    "typing.Text"
                ],
                "admin": [
                    "bool"
                ]
            }
        },
        "deregister_user": {
            "name": "deregister_user",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "user_uuid": [
                    "str"
                ]
            }
        },
        "authenticate_user": {
            "name": "authenticate_user",
            "location": 308,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "email_or_username": [
                    "typing.Text"
                ],
                "password_plaintext": [
                    "typing.Text"
                ],
                "proof_of_ownership_token": [
                    "typing.Text"
                ],
                "proof_of_ownership": [
                    "typing.Text"
                ]
            }
        },
        "user_details": {
            "name": "user_details",
            "location": 341,
            "return": [
                "dict[typing.Text, str]"
            ],
            "arguments": {
                "requesting_user": [],
                "user": [
                    "int"
                ]
            }
        },
        "generate_api_token": {
            "name": "generate_api_token",
            "location": 374,
            "return": [
                "list[typing.Union[typing.Any,typing.Any,typing.Any]]",
                "str"
            ],
            "arguments": {
                "user": []
            }
        },
        "revoke_token": {
            "name": "revoke_token",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int"
                ],
                "token": [
                    "str",
                    "int"
                ]
            }
        },
        "su": {
            "name": "su",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "list[str]"
                ],
                "user_to_su": [
                    "str",
                    "bool"
                ]
            }
        },
        "exit_su": {
            "name": "exit_su",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "session": []
            }
        },
        "list_keys": {
            "name": "list_keys",
            "location": 475,
            "return": [
                "list[]"
            ],
            "arguments": {
                "user": []
            }
        },
        "list_emails": {
            "name": "list_emails",
            "location": 507,
            "return": [
                "list[]"
            ],
            "arguments": {
                "user": [
                    "list[typing.Any]",
                    "None"
                ]
            }
        },
        "list_tokens": {
            "name": "list_tokens",
            "location": 541,
            "return": [
                "list[]"
            ],
            "arguments": {
                "user": []
            }
        },
        "generate_email_verification_token": {
            "name": "generate_email_verification_token",
            "location": 573,
            "return": [
                "EmailVerificationToken"
            ],
            "arguments": {
                "email": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Callable[, ]"
                ]
            }
        },
        "generate_password_reset_token": {
            "name": "generate_password_reset_token",
            "location": 618,
            "return": [
                "int",
                "dict[str, typing.Any]",
                "float",
                "typing.Pattern",
                "str"
            ],
            "arguments": {
                "user": []
            }
        },
        "generate_public_key_verification_request": {
            "name": "generate_public_key_verification_request",
            "location": 656,
            "return": [
                "PublicKeyVerificationRequest"
            ],
            "arguments": {
                "public_key": [
                    "bytes",
                    "str",
                    "list[dict[, ]]"
                ]
            }
        },
        "verify_email": {
            "name": "verify_email",
            "location": 709,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "int",
                    "None",
                    "list[str]"
                ],
                "email_id": [
                    "str",
                    "int",
                    "None"
                ],
                "email_verification_token": [
                    "str",
                    "list[str]",
                    "list[int]"
                ]
            }
        },
        "reset_password": {
            "name": "reset_password",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "None",
                    "bool"
                ],
                "new_password": [
                    "bool",
                    "str",
                    "None",
                    "dict[str, tuple[typing.Union[str,str]]]"
                ],
                "password_reset_token": [
                    "str",
                    "dict[str, str]",
                    "typing.Callable[, ]",
                    "None"
                ]
            }
        },
        "verify_username_and_pass": {
            "name": "verify_username_and_pass",
            "location": 774,
            "return": [
                "str"
            ],
            "arguments": {
                "email_or_username": [
                    "str",
                    "bool"
                ],
                "password_plaintext": [
                    "str",
                    "typing.Sequence[float]",
                    "list[str]",
                    "None"
                ]
            }
        },
        "verify_public_key": {
            "name": "verify_public_key",
            "location": 786,
            "return": [],
            "arguments": {
                "public_key_verification_token": [
                    "str",
                    "None",
                    "bool"
                ],
                "proof_of_ownership": [
                    "int",
                    "bytes",
                    "None",
                    "list[S]"
                ]
            }
        },
        "list_active_api_token": {
            "name": "list_active_api_token",
            "location": 829,
            "return": [],
            "arguments": {}
        },
        "list_keys.to_json": {
            "name": "to_json",
            "location": 496,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "public_key": []
            }
        },
        "list_emails.to_json": {
            "name": "to_json",
            "location": 528,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "email": []
            }
        },
        "list_tokens.to_json": {
            "name": "to_json",
            "location": 561,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "token": []
            }
        }
    },
    "hermes-master/marketplace/src/hermes/user/decorators.py": {
        "authenticated_only": {
            "name": "authenticated_only",
            "location": 13,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "owner_or_admin": {
            "name": "owner_or_admin",
            "location": 27,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "unauthenticated_only": {
            "name": "unauthenticated_only",
            "location": 41,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "admin_only": {
            "name": "admin_only",
            "location": 55,
            "return": [],
            "arguments": {
                "func": [
                    "typing.Callable[, ]"
                ]
            }
        },
        "authenticated_only.decorator": {
            "name": "decorator",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "owner_or_admin.decorator": {
            "name": "decorator",
            "location": 34,
            "return": [],
            "arguments": {
                "user_id": []
            }
        },
        "unauthenticated_only.decorator": {
            "name": "decorator",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "admin_only.decorator": {
            "name": "decorator",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "hermes-master/marketplace/src/hermes/user/models.py": {
        "User.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseToken.owner_id": {
            "name": "owner_id",
            "location": 94,
            "return": [
                "Column"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict[, ]",
                    "None",
                    "typing.Callable[dict[, ], None]"
                ]
            }
        },
        "BaseToken.owner": {
            "name": "owner",
            "location": 98,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "typing.Type",
                    "int"
                ]
            }
        },
        "BaseToken.is_expired": {
            "name": "is_expired",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseToken.revoke": {
            "name": "revoke",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseToken.refresh": {
            "name": "refresh",
            "location": 120,
            "return": [
                "BaseToken"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticationToken.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticationToken.proxy": {
            "name": "proxy",
            "location": 141,
            "return": [
                "int",
                "float",
                "dict[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthenticationToken.is_anonymous": {
            "name": "is_anonymous",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionToken.__repr__": {
            "name": "__repr__",
            "location": 159,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionToken.is_su_session": {
            "name": "is_su_session",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PasswordResetToken.is_expired": {
            "name": "is_expired",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProxySession.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "ProxySession.__getitem__": {
            "name": "__getitem__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "ProxySession.__setitem__": {
            "name": "__setitem__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "ProxySession.__delitem__": {
            "name": "__delitem__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "ProxySession.__getattr__": {
            "name": "__getattr__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict[str, typing.Any]",
                    "dict[, ]"
                ]
            }
        },
        "ProxySession.__setattr__": {
            "name": "__setattr__",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "None"
                ],
                "value": [
                    "str",
                    "bytes",
                    "None"
                ]
            }
        },
        "ProxySession.__iter__": {
            "name": "__iter__",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProxySession.__len__": {
            "name": "__len__",
            "location": 262,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxySession.__init__.json_updater": {
            "name": "json_updater",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "updated_dict": []
            }
        }
    },
    "hermes-master/marketplace/src/hermes/user/session.py": {
        "HermesSession._empty_session": {
            "name": "_empty_session",
            "location": 18,
            "return": [],
            "arguments": {
                "db_session": []
            }
        },
        "HermesSession.open_session": {
            "name": "open_session",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "app": [
                    "dict[str, typing.Any]",
                    "None",
                    "dict[, ]"
                ],
                "request": [
                    "dict[, ]",
                    "None",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "HermesSession.save_session": {
            "name": "save_session",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "dict[str, typing.Any]"
                ],
                "session": [],
                "response": [
                    "dict[str, typing.Any]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "hermes-master/marketplace/src/hermes/user/signals.py": {
        "setup_api_token_name": {
            "name": "setup_api_token_name",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "mapper": [
                    "bool",
                    "list[]",
                    "dict[, ]"
                ],
                "connection": [
                    "bool",
                    "list[]",
                    "dict[, ]"
                ],
                "target": [
                    "str",
                    "BaseException"
                ]
            }
        }
    },
    "hermes-master/marketplace/src/hermes/user/__init__.py": {},
    "hermes-master/marketplace/tests/conftest.py": {},
    "hermes-master/marketplace/tests/utils.py": {
        "request_wrapper": {
            "name": "request_wrapper",
            "location": 8,
            "return": [],
            "arguments": {
                "method_name": [
                    "str",
                    "tuple[typing.Union[str,str]]",
                    "set[str]",
                    "bytes"
                ]
            }
        },
        "request_wrapper.do_request": {
            "name": "do_request",
            "location": 9,
            "return": [],
            "arguments": {
                "endpoint": [],
                "data": [
                    "None"
                ],
                "api_token": [
                    "None"
                ],
                "no_cookies": [
                    "bool"
                ]
            }
        }
    },
    "hermes-master/marketplace/tests/__init__.py": {},
    "hermes-master/marketplace/tests/hermes/test_rabbitmq.py": {
        "test_list_rabbitmq_users": {
            "name": "test_list_rabbitmq_users",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "http_get": [],
                "rabbitmq_user_response": []
            }
        },
        "test_list_rabbitmq_vhosts": {
            "name": "test_list_rabbitmq_vhosts",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "http_get": [],
                "rabbitmq_vhost_response": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_ping_rabbitmq": {
            "name": "test_ping_rabbitmq",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "http_get": [
                    "bool",
                    "str",
                    "dict[, ]"
                ],
                "rabbitmq_overview_response": [
                    "bool",
                    "str",
                    "dict[, ]"
                ]
            }
        }
    },
    "hermes-master/marketplace/tests/hermes/utils.py": {
        "mock_response": {
            "name": "mock_response",
            "location": 4,
            "return": [
                "MagicMock"
            ],
            "arguments": {
                "status_code": [
                    "int"
                ],
                "json_response": [
                    "int",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "hermes-master/marketplace/tests/hermes/__init__.py": {},
    "hermes-master/marketplace/tests/hermes/ad/test_controllers.py": {
        "test_create_ad_controller": {
            "name": "test_create_ad_controller",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "ecdsa_key_pair": [
                    "typing.Iterator"
                ]
            }
        },
        "test_ad_queries": {
            "name": "test_ad_queries",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "ecdsa_key_pair": [
                    "typing.Iterator"
                ]
            }
        }
    },
    "hermes-master/marketplace/tests/hermes/ad/test_views.py": {
        "test_create_ad_controller": {
            "name": "test_create_ad_controller",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "ecdsa_key_pair": [
                    "typing.Iterator"
                ]
            }
        }
    },
    "hermes-master/marketplace/tests/hermes/ad/__init__.py": {},
    "hermes-master/marketplace/tests/hermes/fixtures/flask.py": {
        "flask_app": {
            "name": "flask_app",
            "location": 16,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "api_client": {
            "name": "api_client",
            "location": 52,
            "return": [],
            "arguments": {
                "flask_app": []
            }
        },
        "sqlalchemy_test_session": {
            "name": "sqlalchemy_test_session",
            "location": 57,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {
                "flask_app": []
            }
        }
    },
    "hermes-master/marketplace/tests/hermes/fixtures/rabbitmq.py": {
        "rabbitmq_overview_response": {
            "name": "rabbitmq_overview_response",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "rabbitmq_user_response": {
            "name": "rabbitmq_user_response",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "rabbitmq_vhost_response": {
            "name": "rabbitmq_vhost_response",
            "location": 91,
            "return": [],
            "arguments": {}
        }
    },
    "hermes-master/marketplace/tests/hermes/fixtures/seeds.py": {},
    "hermes-master/marketplace/tests/hermes/fixtures/users.py": {
        "infinite_user_generator": {
            "name": "infinite_user_generator",
            "location": 14,
            "return": [
                "typing.Generator[tuple[typing.Union[str,typing.Pattern,dict[str, typing.Union[int,str]],str]]]"
            ],
            "arguments": {
                "user_model_factory": [
                    "str"
                ],
                "email_model_factory": [
                    "str",
                    "None",
                    "bool",
                    "list[str]"
                ],
                "admin_user": [
                    "bool"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 37,
            "return": [],
            "arguments": {
                "flask_app": []
            }
        },
        "admin_user": {
            "name": "admin_user",
            "location": 45,
            "return": [],
            "arguments": {
                "flask_app": [
                    "None",
                    "str",
                    "int"
                ]
            }
        },
        "user_session_factory": {
            "name": "user_session_factory",
            "location": 53,
            "return": [],
            "arguments": {
                "flask_app": []
            }
        },
        "random_email": {
            "name": "random_email",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "rsa_key_pair": {
            "name": "rsa_key_pair",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "ecdsa_key_pair": {
            "name": "ecdsa_key_pair",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "user_session_factory.session_factory": {
            "name": "session_factory",
            "location": 56,
            "return": [
                "SessionToken"
            ],
            "arguments": {
                "user": []
            }
        },
        "random_email.email_generator": {
            "name": "email_generator",
            "location": 69,
            "return": [
                "typing.Generator[typing.Text]"
            ],
            "arguments": {}
        },
        "rsa_key_pair.rsa_key_pair_generator": {
            "name": "rsa_key_pair_generator",
            "location": 80,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "ecdsa_key_pair.ecdsa_key_pair_generator": {
            "name": "ecdsa_key_pair_generator",
            "location": 88,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        }
    },
    "hermes-master/marketplace/tests/hermes/fixtures/__init__.py": {},
    "hermes-master/marketplace/tests/hermes/user/test_controllers.py": {
        "test_resolve_user_helper": {
            "name": "test_resolve_user_helper",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "typing.Iterator"
                ]
            }
        },
        "test_resolve_token_helper": {
            "name": "test_resolve_token_helper",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "typing.Iterator"
                ],
                "user_session_factory": [
                    "bool",
                    "str",
                    "typing.Mapping",
                    "typing.Iterator"
                ]
            }
        },
        "test_generate_api_token": {
            "name": "test_generate_api_token",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "typing.Iterator"
                ]
            }
        },
        "test_revoke_token": {
            "name": "test_revoke_token",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "typing.Iterator"
                ]
            }
        },
        "test_user_details": {
            "name": "test_user_details",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "typing.Iterator"
                ],
                "admin_user": [
                    "typing.Iterator"
                ]
            }
        },
        "test_list_keys": {
            "name": "test_list_keys",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "typing.Iterator"
                ]
            }
        },
        "test_user_registration": {
            "name": "test_user_registration",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "rsa_key_pair": [
                    "typing.Iterator"
                ],
                "random_email": []
            }
        },
        "test_email_verification": {
            "name": "test_email_verification",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "rsa_key_pair": [
                    "typing.Iterator"
                ],
                "random_email": []
            }
        },
        "test_public_key_verification": {
            "name": "test_public_key_verification",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "rsa_key_pair": [
                    "typing.Iterator"
                ]
            }
        },
        "test_public_key_verification_for_ecdsa": {
            "name": "test_public_key_verification_for_ecdsa",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "ecdsa_key_pair": [
                    "typing.Iterator"
                ]
            }
        },
        "test_user_authentication": {
            "name": "test_user_authentication",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "rsa_key_pair": [
                    "typing.Iterator"
                ],
                "random_email": []
            }
        },
        "test_resolve_user_helper.assert_user": {
            "name": "assert_user",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [],
                "other_user": []
            }
        },
        "test_list_keys.get_public_key": {
            "name": "get_public_key",
            "location": 160,
            "return": [
                "PublicKey"
            ],
            "arguments": {
                "user": []
            }
        }
    },
    "hermes-master/marketplace/tests/hermes/user/test_decorators.py": {
        "test_authenticated_only_decorator_forbids_anonymous_session": {
            "name": "test_authenticated_only_decorator_forbids_anonymous_session",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": []
            }
        },
        "test_authenticated_only_decorator_forbids_expired_session": {
            "name": "test_authenticated_only_decorator_forbids_expired_session",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": [],
                "user": [],
                "user_session_factory": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_authenticated_only_decorator_allows_authenticated_session": {
            "name": "test_authenticated_only_decorator_allows_authenticated_session",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": [],
                "user": [],
                "user_session_factory": [
                    "str"
                ]
            }
        },
        "test_unauthenticated_only_decorator_allows_anonymous_session": {
            "name": "test_unauthenticated_only_decorator_allows_anonymous_session",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": []
            }
        },
        "test_unauthenticated_only_decorator_redirects_authenticated_session": {
            "name": "test_unauthenticated_only_decorator_redirects_authenticated_session",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": [],
                "user": [],
                "user_session_factory": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_admin_only_decorator_forbids_anonymous_session": {
            "name": "test_admin_only_decorator_forbids_anonymous_session",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": []
            }
        },
        "test_admin_only_decorator_forbids_non_admin_session": {
            "name": "test_admin_only_decorator_forbids_non_admin_session",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": [],
                "user": [],
                "user_session_factory": [
                    "str"
                ]
            }
        },
        "test_admin_only_decorator_allows_admin_session": {
            "name": "test_admin_only_decorator_allows_admin_session",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "flask_app": [],
                "admin_user": [],
                "user_session_factory": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_authenticated_only_decorator_forbids_anonymous_session.test_func": {
            "name": "test_func",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_authenticated_only_decorator_forbids_expired_session.test_func": {
            "name": "test_func",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_authenticated_only_decorator_allows_authenticated_session.test_func": {
            "name": "test_func",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unauthenticated_only_decorator_allows_anonymous_session.test_func": {
            "name": "test_func",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unauthenticated_only_decorator_redirects_authenticated_session.test_func": {
            "name": "test_func",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_admin_only_decorator_forbids_anonymous_session.test_func": {
            "name": "test_func",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_admin_only_decorator_forbids_non_admin_session.test_func": {
            "name": "test_func",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_admin_only_decorator_allows_admin_session.test_func": {
            "name": "test_func",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hermes-master/marketplace/tests/hermes/user/test_views.py": {
        "test_register_view": {
            "name": "test_register_view",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "random_email": [
                    "typing.Iterator"
                ],
                "ecdsa_key_pair": [
                    "typing.Iterator"
                ],
                "rsa_key_pair": [
                    "typing.Iterator",
                    "bytes",
                    "list[bytes]",
                    "int"
                ]
            }
        },
        "test_generate_api_token_view": {
            "name": "test_generate_api_token_view",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "ecdsa_key_pair": [
                    "typing.Iterator"
                ]
            }
        },
        "test_cant_generate_token_twice_with_same_verification_request": {
            "name": "test_cant_generate_token_twice_with_same_verification_request",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "ecdsa_key_pair": [
                    "typing.Iterator"
                ]
            }
        },
        "test_new_verification_request_expires_old_one": {
            "name": "test_new_verification_request_expires_old_one",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "ecdsa_key_pair": [
                    "typing.Iterator"
                ]
            }
        },
        "test_user_details_endpoint": {
            "name": "test_user_details_endpoint",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "ecdsa_key_pair": [
                    "typing.Iterator"
                ]
            }
        },
        "test_list_and_revoke_token_endpoints": {
            "name": "test_list_and_revoke_token_endpoints",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "ecdsa_key_pair": [
                    "typing.Iterator"
                ]
            }
        },
        "test_electrum_sigs": {
            "name": "test_electrum_sigs",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "hermes-master/marketplace/tests/hermes/user/utils.py": {
        "register_user": {
            "name": "register_user",
            "location": 17,
            "return": [
                "tuple[typing.Union[int,str,None]]"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "passwd": [
                    "typing.Text"
                ],
                "name": [
                    "typing.Text"
                ],
                "email": [
                    "typing.Text"
                ],
                "admin": [
                    "bool"
                ]
            }
        },
        "register_user_and_get_token": {
            "name": "register_user_and_get_token",
            "location": 72,
            "return": [
                "tuple[typing.Union[str,dict[str, dict[str, typing.Any]],dict[str, str]]]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool"
                ],
                "passwd": [
                    "typing.Text"
                ],
                "name": [
                    "typing.Text"
                ],
                "email": [
                    "typing.Text"
                ],
                "admin": [
                    "bool"
                ]
            }
        }
    },
    "hermes-master/marketplace/tests/hermes/user/__init__.py": {}
}
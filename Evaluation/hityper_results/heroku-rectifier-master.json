{
    "heroku-rectifier-master/app.py": {
        "home": {
            "name": "home",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "submit_configuration": {
            "name": "submit_configuration",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "health_check": {
            "name": "health_check",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "on_uncaught_exception": {
            "name": "on_uncaught_exception",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "RectifierThread.run": {
            "name": "run",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebThread.run": {
            "name": "run",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "heroku-rectifier-master/rectifier/get_random_key.py": {
        "get_random_key": {
            "name": "get_random_key",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "keys": [
                    "list[str]",
                    "str",
                    "None",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "heroku-rectifier-master/rectifier/health_checker.py": {
        "HealthChecker.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "redis_storage": [
                    "int",
                    "float"
                ]
            }
        },
        "HealthChecker._redis_available": {
            "name": "_redis_available",
            "location": 27,
            "return": [
                "tuple[typing.Union[bool,typing.Text]]",
                "tuple[typing.Union[bool,list[tuple[typing.Union[str,int]]],dict[str, typing.Any],str,list[str],list[]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HealthChecker.run": {
            "name": "run",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "heroku-rectifier-master/rectifier/obfuscate_string.py": {
        "obfuscate_string": {
            "name": "obfuscate_string",
            "location": 4,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "input": [
                    "str",
                    "bytes",
                    "list[str]"
                ],
                "visible_chars_length": [
                    "int"
                ]
            }
        }
    },
    "heroku-rectifier-master/rectifier/rectifier.py": {
        "Rectifier.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "str",
                    "dict[, ]",
                    "list[str]",
                    "int",
                    "typing.Generator[typing.Union[str,None,None]]"
                ],
                "broker": [
                    "int",
                    "float"
                ],
                "infrastructure_provider": [
                    "int",
                    "float"
                ]
            }
        },
        "Rectifier.update_configuration": {
            "name": "update_configuration",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rectifier.run": {
            "name": "run",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rectifier.scale": {
            "name": "scale",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "heroku-rectifier-master/rectifier/settings.py": {},
    "heroku-rectifier-master/rectifier/__init__.py": {},
    "heroku-rectifier-master/rectifier/config/config.py": {},
    "heroku-rectifier-master/rectifier/config/config_parser.py": {
        "ConfigParser.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage": [
                    "str"
                ]
            }
        },
        "ConfigParser.from_dict": {
            "name": "from_dict",
            "location": 47,
            "return": [
                "Config"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ConfigParser.validate": {
            "name": "validate",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "typing.Type",
                    "typing.Iterable[]",
                    "typing.Callable[, ]",
                    "int"
                ],
                "data": [
                    "dict[, ]"
                ]
            }
        },
        "ConfigParser._queue_configs": {
            "name": "_queue_configs",
            "location": 130,
            "return": [
                "typing.Generator[tuple[typing.Union[tuple[typing.Union[str,typing.Any]],tuple[typing.Union[str,typing.Any]]]]]"
            ],
            "arguments": {
                "app_config": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "heroku-rectifier-master/rectifier/config/__init__.py": {},
    "heroku-rectifier-master/rectifier/consumer_updates_coordinator/consumer_updates_coordinator.py": {
        "ConsumerUpdatesCoordinator.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "storage": [
                    "dict[str, typing.Any]",
                    "None"
                ]
            }
        },
        "ConsumerUpdatesCoordinator._update_time": {
            "name": "_update_time",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "str",
                    "dict[str, str]"
                ],
                "queue_name": [
                    "str",
                    "dict[str, str]"
                ]
            }
        },
        "ConsumerUpdatesCoordinator.compute_consumers_count": {
            "name": "compute_consumers_count",
            "location": 62,
            "return": [
                "tuple[None]",
                "tuple[typing.Optional[int]]",
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str"
                ],
                "app_mode": [
                    "str",
                    "bool",
                    "float"
                ],
                "queue": [
                    "str",
                    "None"
                ]
            }
        }
    },
    "heroku-rectifier-master/rectifier/consumer_updates_coordinator/__init__.py": {},
    "heroku-rectifier-master/rectifier/infrastructure_provider/heroku.py": {
        "Heroku.scale": {
            "name": "scale",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "str",
                    "dict[str, int]",
                    "None"
                ],
                "scale_requests": [
                    "dict[str, int]",
                    "str"
                ]
            }
        },
        "Heroku.broker_uri": {
            "name": "broker_uri",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "app_name": [
                    "str",
                    "dict[str, typing.Any]",
                    "list[str]",
                    "bool"
                ]
            }
        },
        "Heroku._key": {
            "name": "_key",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "Heroku._connection": {
            "name": "_connection",
            "location": 83,
            "return": [],
            "arguments": {
                "app_name": [
                    "str"
                ],
                "api_key": [
                    "str",
                    "bool",
                    "bytes",
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "heroku-rectifier-master/rectifier/infrastructure_provider/infrastructure_provider.py": {
        "InfrastructureProvider.scale": {
            "name": "scale",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "bool",
                    "None",
                    "str",
                    "list[str]",
                    "list[]"
                ],
                "scale_requests": [
                    "bool",
                    "None",
                    "str",
                    "list[str]",
                    "list[]"
                ]
            }
        },
        "InfrastructureProvider.broker_uri": {
            "name": "broker_uri",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "str",
                    "tuple[typing.Union[str,str]]"
                ]
            }
        }
    },
    "heroku-rectifier-master/rectifier/infrastructure_provider/__init__.py": {},
    "heroku-rectifier-master/rectifier/message_brokers/broker.py": {
        "Broker.stats": {
            "name": "stats",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "uri": [
                    "int",
                    "str",
                    "typing.Iterable['Context']"
                ]
            }
        },
        "Broker.queues": {
            "name": "queues",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "interest_queues": [
                    "list[str]",
                    "dict[, ]",
                    "str"
                ],
                "stats": [
                    "list[str]",
                    "dict[, ]",
                    "str"
                ]
            }
        }
    },
    "heroku-rectifier-master/rectifier/message_brokers/rabbitmq.py": {
        "RabbitMQ.stats": {
            "name": "stats",
            "location": 31,
            "return": [],
            "arguments": {
                "uri": [
                    "int",
                    "typing.Callable[, ]",
                    "str"
                ]
            }
        },
        "RabbitMQ.queues": {
            "name": "queues",
            "location": 89,
            "return": [
                "list[]"
            ],
            "arguments": {
                "cls": [],
                "interest_queues": [
                    "dict[str, typing.Any]",
                    "str"
                ],
                "stats": [
                    "dict[, ]",
                    "str"
                ]
            }
        },
        "RabbitMQ._handle_single_queue_config": {
            "name": "_handle_single_queue_config",
            "location": 107,
            "return": [
                "None",
                "Queue"
            ],
            "arguments": {
                "cls": [],
                "stats": [
                    "str",
                    "typing.Callable[, ]"
                ],
                "queue_name": [
                    "str",
                    "typing.Callable[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "RabbitMQ._handle_multiple_queues_config": {
            "name": "_handle_multiple_queues_config",
            "location": 123,
            "return": [
                "None",
                "Queue"
            ],
            "arguments": {
                "cls": [],
                "stats": [
                    "str",
                    "None",
                    "typing.Mapping",
                    "dict[, ]",
                    "typing.Callable[[], typing.Any]"
                ],
                "raw_queue_names": [
                    "str"
                ]
            }
        },
        "RabbitMQ._single_queue_configs": {
            "name": "_single_queue_configs",
            "location": 148,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "interest_queues": [
                    "list[str]"
                ]
            }
        },
        "RabbitMQ._multiple_queue_configs": {
            "name": "_multiple_queue_configs",
            "location": 156,
            "return": [
                "list[str]"
            ],
            "arguments": {
                "interest_queues": [
                    "list[str]"
                ]
            }
        },
        "RabbitMQ._filter_stats": {
            "name": "_filter_stats",
            "location": 164,
            "return": [
                "list[]"
            ],
            "arguments": {
                "stats": [
                    "dict[, ]",
                    "list[str]",
                    "str"
                ],
                "queue_names": [
                    "dict[, ]",
                    "list[str]",
                    "str"
                ]
            }
        }
    },
    "heroku-rectifier-master/rectifier/message_brokers/__init__.py": {},
    "heroku-rectifier-master/rectifier/queue/queue.py": {},
    "heroku-rectifier-master/rectifier/queue/__init__.py": {},
    "heroku-rectifier-master/rectifier/storage/redis_storage.py": {
        "RedisSubscription.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pubsub": [
                    "int",
                    "float"
                ]
            }
        },
        "RedisSubscription.get_message": {
            "name": "get_message",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisStorage.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisStorage.set": {
            "name": "set",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "dict[, ]"
                ],
                "value": [
                    "bytes",
                    "str",
                    "dict[, ]"
                ]
            }
        },
        "RedisStorage.get": {
            "name": "get",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "None"
                ]
            }
        },
        "RedisStorage.subscribe": {
            "name": "subscribe",
            "location": 32,
            "return": [
                "RedisSubscription"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "list[str]"
                ]
            }
        },
        "RedisStorage.publish": {
            "name": "publish",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "list[str]"
                ],
                "message": [
                    "None",
                    "str",
                    "typing.Callable[, ]",
                    "int",
                    "list[str]"
                ]
            }
        }
    },
    "heroku-rectifier-master/rectifier/storage/storage.py": {
        "StorageSubscription.get_message": {
            "name": "get_message",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Storage.get": {
            "name": "get",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "typing.Iterable[str]"
                ]
            }
        },
        "Storage.set": {
            "name": "set",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ],
                "value": [
                    "str",
                    "int",
                    "None",
                    "bytes"
                ]
            }
        },
        "Storage.publish": {
            "name": "publish",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Any",
                    "None"
                ],
                "message": [
                    "None",
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Any"
                ]
            }
        },
        "Storage.subscribe": {
            "name": "subscribe",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Any",
                    "None"
                ]
            }
        }
    },
    "heroku-rectifier-master/rectifier/storage/__init__.py": {},
    "heroku-rectifier-master/schemas/config.py": {},
    "heroku-rectifier-master/schemas/rabbitmq.py": {},
    "heroku-rectifier-master/schemas/__init__.py": {},
    "heroku-rectifier-master/tests/env.py": {
        "env": {
            "name": "env",
            "location": 53,
            "return": [
                "typing.Generator[TestableEnv]"
            ],
            "arguments": {}
        },
        "TestableEnv.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestableEnv.start": {
            "name": "start",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestableEnv.stop": {
            "name": "stop",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestableEnv.rabbit_mq_uri": {
            "name": "rabbit_mq_uri",
            "location": 47,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str"
                ]
            }
        }
    },
    "heroku-rectifier-master/tests/rabbitmq_mock.py": {
        "RabbitMQAPIMock.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitMQAPIMock.start": {
            "name": "start",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitMQAPIMock.stop": {
            "name": "stop",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitMQAPIMock._run": {
            "name": "_run",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RabbitMQAPIMock._get_queues": {
            "name": "_get_queues",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "app_name": [
                    "str"
                ]
            }
        },
        "RabbitMQAPIMock.set_queue": {
            "name": "set_queue",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "consumers": [
                    "int"
                ],
                "messages": [
                    "int"
                ]
            }
        }
    },
    "heroku-rectifier-master/tests/redis_mock.py": {
        "RedisStorageMockSubscription.get_message": {
            "name": "get_message",
            "location": 7,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisStorageMock.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RedisStorageMock.get": {
            "name": "get",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "RedisStorageMock.set": {
            "name": "set",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "RedisStorageMock.publish": {
            "name": "publish",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Any",
                    "None"
                ],
                "message": [
                    "None",
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Any"
                ]
            }
        },
        "RedisStorageMock.subscribe": {
            "name": "subscribe",
            "location": 27,
            "return": [
                "RedisStorageMockSubscription"
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "bool",
                    "typing.Callable[, ]",
                    "typing.Any",
                    "None"
                ]
            }
        }
    },
    "heroku-rectifier-master/tests/test_config_reader.py": {
        "test_config_reader_dict_parsing": {
            "name": "test_config_reader_dict_parsing",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_config_reader": {
            "name": "test_config_reader",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_invalid_queue_configurations": {
            "name": "test_invalid_queue_configurations",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "typing.Container",
                    "str"
                ]
            }
        }
    },
    "heroku-rectifier-master/tests/test_heroku_exception_handling.py": {
        "test_scale_errors": {
            "name": "test_scale_errors",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "_key": [
                    "bytes",
                    "str",
                    "bool",
                    "None"
                ],
                "side_effect": [
                    "int",
                    "str",
                    "None",
                    "typing.Iterable[typing.Iterable[T]]"
                ]
            }
        },
        "test_broker_uri_errors": {
            "name": "test_broker_uri_errors",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "_key": [
                    "bytes",
                    "typing.Sequence[T]",
                    "str",
                    "int"
                ],
                "side_effect": [
                    "int",
                    "str",
                    "None",
                    "typing.Iterable[typing.Iterable[T]]",
                    "typing.Callable[, ]"
                ]
            }
        }
    },
    "heroku-rectifier-master/tests/test_monitor.py": {
        "test_monitor": {
            "name": "test_monitor",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "dict[, ]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "test_monitor_paused": {
            "name": "test_monitor_paused",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [],
                "mode": [
                    "str",
                    "bool"
                ],
                "expected_called_count": [
                    "int"
                ],
                "expected_workers": [
                    "tuple[typing.Union[paradigm.models.Base,tests.utils.Kwargs]]",
                    "dict[, ]"
                ]
            }
        },
        "test_kill_only_calls_when_needed": {
            "name": "test_kill_only_calls_when_needed",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "dict[, ]"
                ]
            }
        },
        "test_monitor_with_no_config": {
            "name": "test_monitor_with_no_config",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "env": []
            }
        },
        "test_monitor_with_no_broker_uri": {
            "name": "test_monitor_with_no_broker_uri",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "env": [
                    "int"
                ]
            }
        },
        "test_update_time_storage": {
            "name": "test_update_time_storage",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "env": []
            }
        },
        "test_monitor_common_config": {
            "name": "test_monitor_common_config",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "env": []
            }
        },
        "InfrastructureProviderMock.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "typing.Mapping",
                    "dict[, ]",
                    "list[str]"
                ]
            }
        },
        "InfrastructureProviderMock.scale": {
            "name": "scale",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_name": [
                    "str",
                    "int",
                    "dict[, ]"
                ],
                "updates": [
                    "dict[str, int]",
                    "dict[, ]",
                    "dict[str, dict[str, str]]"
                ]
            }
        },
        "InfrastructureProviderMock.broker_uri": {
            "name": "broker_uri",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "app_name": [
                    "str"
                ]
            }
        }
    },
    "heroku-rectifier-master/tests/test_obfuscate_string.py": {
        "test_obfuscate_string": {
            "name": "test_obfuscate_string",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "heroku-rectifier-master/tests/test_rabbitmq_stats.py": {
        "test_get_current_load": {
            "name": "test_get_current_load",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [],
                "interest_queues": [],
                "output": [],
                "env": []
            }
        },
        "test_get_current_load_missing_queue": {
            "name": "test_get_current_load_missing_queue",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "env": []
            }
        }
    },
    "heroku-rectifier-master/tests/test_rotating_keys.py": {
        "test_rotating_keys": {
            "name": "test_rotating_keys",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rotating_keys_no_elements": {
            "name": "test_rotating_keys_no_elements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "heroku-rectifier-master/tests/test_settings.py": {
        "empty_settings": {
            "name": "empty_settings",
            "location": 8,
            "return": [
                "typing.Generator[]"
            ],
            "arguments": {}
        },
        "heroku_api_key": {
            "name": "heroku_api_key",
            "location": 15,
            "return": [
                "typing.Generator[tuple[str]]"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "heroku_api_keys": {
            "name": "heroku_api_keys",
            "location": 25,
            "return": [
                "typing.Generator[tuple[list[str]]]"
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_empty_config": {
            "name": "test_empty_config",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_settings": [
                    "dict[str, typing.Sequence[typing.Any]]"
                ]
            }
        },
        "test_api_key_set": {
            "name": "test_api_key_set",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "heroku_api_key": [
                    "bytes",
                    "dict[str, typing.Any]",
                    "list[typing.Any]"
                ]
            }
        },
        "test_api_keys_set": {
            "name": "test_api_keys_set",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "heroku_api_keys": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "heroku-rectifier-master/tests/__init__.py": {}
}
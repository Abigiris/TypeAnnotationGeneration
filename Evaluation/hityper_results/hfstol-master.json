{
    "hfstol-master/setup.py": {},
    "hfstol-master/hfstol/constants.py": {},
    "hfstol-master/hfstol/main.py": {
        "cmd": {
            "name": "cmd",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "concat_res": {
            "name": "concat_res",
            "location": 290,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "i": []
            }
        },
        "HFSTOL.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "header": [],
                "alphabet": [],
                "transducer": [],
                "hfstol_file_path": []
            }
        },
        "HFSTOL.feed": {
            "name": "feed",
            "location": 49,
            "return": [
                "tuple[]"
            ],
            "arguments": {
                "self": [],
                "surface_form": [],
                "concat": [
                    "bool"
                ]
            }
        },
        "HFSTOL.feed_in_bulk": {
            "name": "feed_in_bulk",
            "location": 80,
            "return": [
                "dict[, set[]]"
            ],
            "arguments": {
                "self": [],
                "surface_forms": [],
                "concat": [
                    "bool"
                ]
            }
        },
        "HFSTOL.feed_in_bulk_fast": {
            "name": "feed_in_bulk_fast",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "strings": [],
                "multi_process": [
                    "int"
                ]
            }
        },
        "HFSTOL.from_file": {
            "name": "from_file",
            "location": 134,
            "return": [],
            "arguments": {
                "cls": [],
                "filename": []
            }
        },
        "HFSTOL._call_hfstol": {
            "name": "_call_hfstol",
            "location": 151,
            "return": [
                "dict[, set[]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "multi_process": []
            }
        },
        "HFSTOL.__del__": {
            "name": "__del__",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HFSTOL._terminate_all_processes": {
            "name": "_terminate_all_processes",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HFSTOL._terminate_all_active_hfstol_processes": {
            "name": "_terminate_all_active_hfstol_processes",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "HFSTOL._call_hfstol.interact_with_process": {
            "name": "interact_with_process",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "p": [],
                "mq": [],
                "words": []
            }
        },
        "HFSTOL._call_hfstol.interact_with_process._write_lines": {
            "name": "_write_lines",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "stdin": [],
                "lines": []
            }
        }
    },
    "hfstol-master/hfstol/shared.py": {
        "match": {
            "name": "match",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "transition_symbol": [
                    "str"
                ],
                "input_symbol": [
                    "str"
                ]
            }
        },
        "Header.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "Header._handle_hfst3_header": {
            "name": "_handle_hfst3_header",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "remaining": [
                    "typing.IO",
                    "str",
                    "typing.BinaryIO"
                ]
            }
        },
        "Alphabet.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "number_of_symbols": [
                    "str",
                    "dict[str, str]",
                    "None",
                    "int"
                ]
            }
        },
        "LetterTrie.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LetterTrie.addString": {
            "name": "addString",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str",
                    "None",
                    "dict[str, str]"
                ],
                "symbolNumber": [
                    "str",
                    "None",
                    "dict[str, str]"
                ]
            }
        },
        "LetterTrie.findKey": {
            "name": "findKey",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "indexstring": [
                    "str",
                    "int",
                    "dict[str, typing.Any]",
                    "typing.Type"
                ]
            }
        },
        "Indexlist.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list[]"
                ]
            }
        },
        "Indexlist.get": {
            "name": "get",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "adjustment": [
                    "int"
                ]
            }
        },
        "Indexlist.put": {
            "name": "put",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "float",
                    "typing.Callable[, ]",
                    "str"
                ],
                "adjustment": [
                    "int"
                ]
            }
        },
        "Indexlist.save": {
            "name": "save",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Indexlist.restore": {
            "name": "restore",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Indexlist.last": {
            "name": "last",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagDiacriticOperation.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "op": [
                    "typing.Callable[, ]",
                    "str",
                    "bool",
                    "typing.Sequence[]"
                ],
                "feat": [
                    "typing.Callable[, ]",
                    "str",
                    "bool",
                    "typing.Sequence[]"
                ],
                "val": [
                    "str",
                    "typing.Any",
                    "None"
                ]
            }
        },
        "FlagDiacriticStateStack.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagDiacriticStateStack.clear": {
            "name": "clear",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagDiacriticStateStack.pop": {
            "name": "pop",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagDiacriticStateStack.duplicate": {
            "name": "duplicate",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlagDiacriticStateStack.push": {
            "name": "push",
            "location": 187,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "flag_diacritic": [
                    "str",
                    "bytes"
                ]
            }
        },
        "LetterTrie.Node.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LetterTrie.Node.add": {
            "name": "add",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "string": [],
                "symbolNumber": []
            }
        },
        "LetterTrie.Node.find": {
            "name": "find",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "indexstring": []
            }
        }
    },
    "hfstol-master/hfstol/transducer.py": {
        "Transducer.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "bytes",
                    "str",
                    "list[]",
                    "None"
                ],
                "header": [
                    "str",
                    "bool",
                    "typing.Iterable[I]",
                    "bytes"
                ],
                "alphabet": []
            }
        },
        "Transducer.tryEpsilonIndices": {
            "name": "tryEpsilonIndices",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "None",
                    "typing.Callable[dict[, ], None]",
                    "str"
                ]
            }
        },
        "Transducer.tryEpsilonTransitions": {
            "name": "tryEpsilonTransitions",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "float"
                ]
            }
        },
        "Transducer.findIndex": {
            "name": "findIndex",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "dict[, ]"
                ]
            }
        },
        "Transducer.findTransitions": {
            "name": "findTransitions",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Transducer.getAnalyses": {
            "name": "getAnalyses",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "bool",
                    "list[tuple[typing.Union[str,int]]]"
                ]
            }
        },
        "Transducer.noteAnalysis": {
            "name": "noteAnalysis",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transducer.analyze": {
            "name": "analyze",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "Transducer.printAnalyses": {
            "name": "printAnalyses",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transducer.TransitionIndex.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_symbol": [],
                "transition": []
            }
        },
        "Transducer.TransitionIndex.matches": {
            "name": "matches",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "Transducer.TransitionIndex.isFinal": {
            "name": "isFinal",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transducer.IndexTable.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "number_of_indices": []
            }
        },
        "Transducer.Transition.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input": [],
                "output": [],
                "target": []
            }
        },
        "Transducer.Transition.matches": {
            "name": "matches",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "Transducer.Transition.isFinal": {
            "name": "isFinal",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transducer.TransitionTable.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "number_of_transitions": []
            }
        },
        "Transducer.TransitionTable.set": {
            "name": "set",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "Transducer.TransitionTable.at": {
            "name": "at",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "Transducer.TransitionTable.isFinal": {
            "name": "isFinal",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        }
    },
    "hfstol-master/hfstol/__init__.py": {},
    "hfstol-master/tests/conftest.py": {
        "cree_analyzer": {
            "name": "cree_analyzer",
            "location": 13,
            "return": [],
            "arguments": {
                "shared_datadir": []
            }
        },
        "cree_generator": {
            "name": "cree_generator",
            "location": 21,
            "return": [],
            "arguments": {
                "shared_datadir": []
            }
        }
    },
    "hfstol-master/tests/test_apply.py": {
        "test_single_analysis_single_deep_form": {
            "name": "test_single_analysis_single_deep_form",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_analyzer": [],
                "surface_form": [],
                "result": []
            }
        },
        "test_single_analysis_single_deep_form_split": {
            "name": "test_single_analysis_single_deep_form_split",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_analyzer": [],
                "surface_form": [],
                "result": []
            }
        },
        "test_singled_analysis_multiple_deep_form": {
            "name": "test_singled_analysis_multiple_deep_form",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_analyzer": [],
                "surface_form": [],
                "result": []
            }
        },
        "test_singled_analysis_multiple_deep_form_split": {
            "name": "test_singled_analysis_multiple_deep_form_split",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_analyzer": [],
                "surface_form": [],
                "result": []
            }
        },
        "test_singled_analysis_out_side_alphabet": {
            "name": "test_singled_analysis_out_side_alphabet",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_analyzer": [],
                "surface_form": [],
                "result": []
            }
        },
        "test_multiple_analyses": {
            "name": "test_multiple_analyses",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_analyzer": [],
                "surface_forms": [],
                "result": []
            }
        },
        "test_multiple_analyses_split": {
            "name": "test_multiple_analyses_split",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_analyzer": [],
                "surface_forms": [],
                "result": []
            }
        },
        "test_multiple_analyses_fast": {
            "name": "test_multiple_analyses_fast",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_analyzer": [],
                "surface_forms": [],
                "result": []
            }
        },
        "test_single_generation_single_deep_form": {
            "name": "test_single_generation_single_deep_form",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_generator": [],
                "surface_form": [],
                "result": []
            }
        },
        "test_single_generation_single_deep_form_split": {
            "name": "test_single_generation_single_deep_form_split",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_generator": [],
                "surface_form": [],
                "result": []
            }
        },
        "test_single_generation_multiple_deep_form": {
            "name": "test_single_generation_multiple_deep_form",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_generator": [],
                "surface_form": [],
                "result": []
            }
        },
        "test_single_generation_multiple_deep_form_split": {
            "name": "test_single_generation_multiple_deep_form_split",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_generator": [],
                "surface_form": [],
                "result": []
            }
        },
        "test_single_generation_outside_of_alphabet": {
            "name": "test_single_generation_outside_of_alphabet",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_generator": [],
                "surface_form": [],
                "result": []
            }
        },
        "test_multiple_generation": {
            "name": "test_multiple_generation",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_generator": [],
                "surface_forms": [],
                "result": []
            }
        },
        "test_multiple_generation_split": {
            "name": "test_multiple_generation_split",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_generator": [],
                "surface_forms": [],
                "result": []
            }
        },
        "test_multiple_generation_fast": {
            "name": "test_multiple_generation_fast",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_generator": [],
                "surface_forms": [],
                "result": []
            }
        }
    },
    "hfstol-master/tests/test_process_terminate.py": {
        "test_process_decreases_after_del": {
            "name": "test_process_decreases_after_del",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "shared_datadir": []
            }
        },
        "count_child_processes": {
            "name": "count_child_processes",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "hfstol-master/tests/test_regression_0_bulk_bulk_fast.py": {
        "test_multiple_analyses_fast": {
            "name": "test_multiple_analyses_fast",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_analyzer": [],
                "surface_forms": [],
                "result": []
            }
        }
    },
    "hfstol-master/tests/test_regression_1_fast_consecutive.py": {
        "test_consecutive_analyses_fast": {
            "name": "test_consecutive_analyses_fast",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "cree_analyzer": []
            }
        }
    },
    "hfstol-master/tests/__init__.py": {}
}
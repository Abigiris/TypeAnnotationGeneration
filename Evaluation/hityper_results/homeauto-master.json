{
    "homeauto-master/espNode/readcam.py": {
        "imageUri": {
            "name": "imageUri",
            "location": 92,
            "return": [],
            "arguments": {
                "jpg": []
            }
        },
        "CameraReceiver.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [],
                "host": []
            }
        },
        "CameraReceiver.on_state": {
            "name": "on_state",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "CameraReceiver.analyze": {
            "name": "analyze",
            "location": 66,
            "return": [
                "dict[typing.Text, list[float]]"
            ],
            "arguments": {
                "self": [],
                "jpg": []
            }
        }
    },
    "homeauto-master/espNode/tasks.py": {
        "get_dev_esphome": {
            "name": "get_dev_esphome",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "pull_esphome": {
            "name": "pull_esphome",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "program_board_over_usb": {
            "name": "program_board_over_usb",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "board": []
            }
        },
        "program_board_over_wifi": {
            "name": "program_board_over_wifi",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "board": []
            }
        },
        "monitor_usb": {
            "name": "monitor_usb",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "board": []
            }
        }
    },
    "homeauto-master/lib/localdisplay.py": {
        "setDisplayToLocalX": {
            "name": "setDisplayToLocalX",
            "location": 3,
            "return": [],
            "arguments": {}
        }
    },
    "homeauto-master/lib/stategraph.py": {
        "StateGraph.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "StateGraph.add": {
            "name": "add",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateGraph.ntLines": {
            "name": "ntLines",
            "location": 30,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateGraph.asTrig": {
            "name": "asTrig",
            "location": 36,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateGraph.asJsonLd": {
            "name": "asJsonLd",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateGraph.asAccepted": {
            "name": "asAccepted",
            "location": 42,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "self": [],
                "acceptHeader": []
            }
        }
    },
    "homeauto-master/lib/cycloneerr/cycloneerr.py": {
        "PrettyErrorHandler.get_error_html": {
            "name": "get_error_html",
            "location": 11,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "status_code": []
            }
        }
    },
    "homeauto-master/lib/cycloneerr/setup.py": {},
    "homeauto-master/lib/cycloneerr/tasks.py": {
        "release": {
            "name": "release",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/lib/cycloneerr/__init__.py": {},
    "homeauto-master/lib/devices_shared/devices_shared.py": {
        "_rgbFromHex": {
            "name": "_rgbFromHex",
            "location": 11,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "h": []
            }
        },
        "roundedLit": {
            "name": "roundedLit",
            "location": 61,
            "return": [
                "Literal"
            ],
            "arguments": {
                "x": []
            }
        },
        "PixelColumnsFromImages.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PixelColumnsFromImages.get": {
            "name": "get",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "x": [],
                "y": [],
                "h": []
            }
        },
        "AnimChannel.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AnimChannel.animTo": {
            "name": "animTo",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x2": [],
                "rate": []
            }
        },
        "AnimChannel.get": {
            "name": "get",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScanGroup.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "numLeds": []
            }
        },
        "ScanGroup.animateTo": {
            "name": "animateTo",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "height": [],
                "src": [],
                "rate": [
                    "int"
                ],
                "interpolate": []
            }
        },
        "ScanGroup.updateCurrent": {
            "name": "updateCurrent",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScanGroup.currentStatements": {
            "name": "currentStatements",
            "location": 93,
            "return": [
                "list[tuple[Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScanGroup.colorForIndex": {
            "name": "colorForIndex",
            "location": 102,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "i": []
            }
        },
        "RgbPixelsAnimation.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "updateOutput": []
            }
        },
        "RgbPixelsAnimation.setupGroups": {
            "name": "setupGroups",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixelsAnimation.maxIndex": {
            "name": "maxIndex",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RgbPixelsAnimation.hostStatements": {
            "name": "hostStatements",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RgbPixelsAnimation.getColorOrder": {
            "name": "getColorOrder",
            "location": 149,
            "return": [
                "tuple[None]"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": []
            }
        },
        "RgbPixelsAnimation.step": {
            "name": "step",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixelsAnimation.onStatements": {
            "name": "onStatements",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": [],
                "_groups": [
                    "bool"
                ]
            }
        },
        "RgbPixelsAnimation.outputPatterns": {
            "name": "outputPatterns",
            "location": 186,
            "return": [
                "list[tuple[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixelsAnimation.outputWidgets": {
            "name": "outputWidgets",
            "location": 193,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixelsAnimation.currentColors": {
            "name": "currentColors",
            "location": 196,
            "return": [
                "typing.Generator[tuple[tuple]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/lib/devices_shared/setup.py": {},
    "homeauto-master/lib/devices_shared/tasks.py": {
        "release": {
            "name": "release",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/lib/devices_shared/__init__.py": {},
    "homeauto-master/lib/export_to_influxdb/export_to_influxdb.py": {
        "RetentionPolicies.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "influx": []
            }
        },
        "RetentionPolicies.getCreatedPolicy": {
            "name": "getCreatedPolicy",
            "location": 25,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": [],
                "days": []
            }
        },
        "InfluxExporter.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configGraph": [],
                "influxHost": [
                    "typing.Text"
                ]
            }
        },
        "InfluxExporter.exportStats": {
            "name": "exportStats",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [],
                "paths": [],
                "period_secs": [
                    "int"
                ],
                "retain_days": [
                    "int"
                ]
            }
        },
        "InfluxExporter.exportToInflux": {
            "name": "exportToInflux",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "currentStatements": []
            }
        },
        "InfluxExporter.influxValue": {
            "name": "influxValue",
            "location": 125,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "rdfValue": []
            }
        },
        "InfluxExporter.shouldSendNewPoint": {
            "name": "shouldSendNewPoint",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "now": [],
                "subj": [],
                "measurementName": [],
                "tags": [],
                "value": [],
                "pointsAtLeastEvery": []
            }
        },
        "InfluxExporter.exportStats.send": {
            "name": "send",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "InfluxExporter.exportStats.send.getVal": {
            "name": "getVal",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "homeauto-master/lib/export_to_influxdb/setup.py": {},
    "homeauto-master/lib/export_to_influxdb/tasks.py": {
        "release": {
            "name": "release",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/lib/export_to_influxdb/__init__.py": {},
    "homeauto-master/lib/homeauto_anynode/setup.py": {},
    "homeauto-master/lib/homeauto_anynode/tasks.py": {
        "release": {
            "name": "release",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/lib/homeauto_anynode/__init__.py": {},
    "homeauto-master/lib/mqtt_client/mqtt_client.py": {
        "MQTTService.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [],
                "factory": [],
                "observersByTopic": [],
                "clientId": []
            }
        },
        "MQTTService.startService": {
            "name": "startService",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MQTTService.ensureSubscribed": {
            "name": "ensureSubscribed",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": []
            }
        },
        "MQTTService._subscribeToLatestTopic": {
            "name": "_subscribeToLatestTopic",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [],
                "topic": []
            }
        },
        "MQTTService._subscribeAll": {
            "name": "_subscribeAll",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MQTTService.connectToBroker": {
            "name": "connectToBroker",
            "location": 41,
            "return": [
                "typing.Generator",
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": []
            }
        },
        "MQTTService._onProtocolMessage": {
            "name": "_onProtocolMessage",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [],
                "payload": [],
                "qos": [],
                "dup": [],
                "retain": [],
                "msgId": []
            }
        },
        "MQTTService._onProtocolDisconnection": {
            "name": "_onProtocolDisconnection",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "MQTTService.publish": {
            "name": "publish",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "msg": []
            }
        },
        "MqttClient.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clientId": [],
                "brokerHost": [
                    "typing.Text"
                ],
                "brokerPort": [
                    "int"
                ]
            }
        },
        "MqttClient.publish": {
            "name": "publish",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "topic": [],
                "msg": []
            }
        },
        "MqttClient.subscribe": {
            "name": "subscribe",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "topic": []
            }
        },
        "MQTTService.publish._logFailure": {
            "name": "_logFailure",
            "location": 71,
            "return": [],
            "arguments": {
                "failure": []
            }
        }
    },
    "homeauto-master/lib/mqtt_client/setup.py": {},
    "homeauto-master/lib/mqtt_client/tasks.py": {
        "release": {
            "name": "release",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/lib/mqtt_client/__init__.py": {},
    "homeauto-master/lib/patchablegraph/browser_test.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/lib/patchablegraph/patchablegraph.py": {
        "_graphFromQuads2": {
            "name": "_graphFromQuads2",
            "location": 39,
            "return": [
                "ConjunctiveGraph"
            ],
            "arguments": {
                "q": []
            }
        },
        "jsonFromPatch": {
            "name": "jsonFromPatch",
            "location": 47,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "patchFromJson": {
            "name": "patchFromJson",
            "location": 55,
            "return": [
                "Patch"
            ],
            "arguments": {
                "j": []
            }
        },
        "graphAsJson": {
            "name": "graphAsJson",
            "location": 63,
            "return": [],
            "arguments": {
                "g": []
            }
        },
        "PatchableGraph.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatchableGraph.serialize": {
            "name": "serialize",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PatchableGraph.patch": {
            "name": "patch",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "PatchableGraph.asJsonLd": {
            "name": "asJsonLd",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PatchableGraph.addObserver": {
            "name": "addObserver",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "onPatch": []
            }
        },
        "PatchableGraph.removeObserver": {
            "name": "removeObserver",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "onPatch": []
            }
        },
        "PatchableGraph.setToGraph": {
            "name": "setToGraph",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newGraph": []
            }
        },
        "CycloneGraphHandler.initialize": {
            "name": "initialize",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "masterGraph": []
            }
        },
        "CycloneGraphHandler.get": {
            "name": "get",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CycloneGraphHandler._writeGraphResponse": {
            "name": "_writeGraphResponse",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CycloneGraphHandler._writeGraphForBrowser": {
            "name": "_writeGraphForBrowser",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CycloneGraphEventsHandler.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [],
                "request": [],
                "masterGraph": []
            }
        },
        "CycloneGraphEventsHandler.bind": {
            "name": "bind",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CycloneGraphEventsHandler.onPatch": {
            "name": "onPatch",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "patchJson": []
            }
        },
        "CycloneGraphEventsHandler.unbind": {
            "name": "unbind",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/lib/patchablegraph/patchsource.py": {
        "PatchSource.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "agent": []
            }
        },
        "PatchSource.state": {
            "name": "state",
            "location": 39,
            "return": [
                "dict[typing.Text, typing.Union[dict[typing.Text, ],bool]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatchSource.addPatchListener": {
            "name": "addPatchListener",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "PatchSource.stop": {
            "name": "stop",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PatchSource._onDisconnect": {
            "name": "_onDisconnect",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "PatchSource._onError": {
            "name": "_onError",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "PatchSource._onFullGraph": {
            "name": "_onFullGraph",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PatchSource._onPatch": {
            "name": "_onPatch",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PatchSource._sendPatch": {
            "name": "_sendPatch",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "fullGraph": []
            }
        },
        "PatchSource.__del__": {
            "name": "__del__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReconnectingPatchSource.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "listener": [],
                "reconnectSecs": [
                    "int"
                ],
                "agent": [
                    "typing.Text"
                ]
            }
        },
        "ReconnectingPatchSource._reconnect": {
            "name": "_reconnect",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReconnectingPatchSource._onPatch": {
            "name": "_onPatch",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "fullGraph": []
            }
        },
        "ReconnectingPatchSource.state": {
            "name": "state",
            "location": 139,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReconnectingPatchSource.stop": {
            "name": "stop",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReconnectingPatchSource._onConnectionFailed": {
            "name": "_onConnectionFailed",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "ReconnectingPatchSource._onConnectionLost": {
            "name": "_onConnectionLost",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        }
    },
    "homeauto-master/lib/patchablegraph/setup.py": {},
    "homeauto-master/lib/patchablegraph/tasks.py": {
        "release": {
            "name": "release",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "browser_test_build": {
            "name": "browser_test_build",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "browser_test": {
            "name": "browser_test",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/lib/patchablegraph/__init__.py": {},
    "homeauto-master/lib/standardservice/logsetup.py": {
        "enableTwistedLog": {
            "name": "enableTwistedLog",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "verboseLogging": {
            "name": "verboseLogging",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "yes": []
            }
        }
    },
    "homeauto-master/lib/standardservice/scalessetup.py": {
        "gatherProcessStats": {
            "name": "gatherProcessStats",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "gatherProcessStats.updateTimeStat": {
            "name": "updateTimeStat",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "homeauto-master/lib/standardservice/setup.py": {},
    "homeauto-master/lib/standardservice/tasks.py": {
        "release": {
            "name": "release",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/lib/standardservice/__init__.py": {},
    "homeauto-master/service/announce/announce.py": {
        "chromecastPlay": {
            "name": "chromecastPlay",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "ip": [],
                "url": [],
                "volume": [
                    "None"
                ]
            }
        },
        "tts": {
            "name": "tts",
            "location": 69,
            "return": [
                "bytes"
            ],
            "arguments": {
                "input_xml": [],
                "affect": [
                    "typing.Text"
                ],
                "ptype": [
                    "typing.Text"
                ]
            }
        },
        "Index.get": {
            "name": "get",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostAnnouncement.post": {
            "name": "post",
            "location": 27,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.get": {
            "name": "get",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "which": []
            }
        }
    },
    "homeauto-master/service/announce/tasks.py": {},
    "homeauto-master/service/arduinoNode/arduinoNode.py": {
        "rdfGraphBody": {
            "name": "rdfGraphBody",
            "location": 366,
            "return": [
                "Graph"
            ],
            "arguments": {
                "body": [],
                "headers": []
            }
        },
        "currentSerialDevices": {
            "name": "currentSerialDevices",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "masterGraph": [],
                "slowMode": [
                    "bool"
                ]
            }
        },
        "Config.watchEtcd": {
            "name": "watchEtcd",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.configChanged": {
            "name": "configChanged",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.cancelRead": {
            "name": "cancelRead",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.reread": {
            "name": "reread",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.serialDevices": {
            "name": "serialDevices",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.setupBoards": {
            "name": "setupBoards",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev": [],
                "configGraph": [],
                "masterGraph": [],
                "uri": []
            }
        },
        "Board.description": {
            "name": "description",
            "location": 147,
            "return": [
                "dict[typing.Text, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.open": {
            "name": "open",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.startPolling": {
            "name": "startPolling",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "period": [
                    "float"
                ]
            }
        },
        "Board._poll": {
            "name": "_poll",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board._pollWork": {
            "name": "_pollWork",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board._updateMasterWithNewPollStatements": {
            "name": "_updateMasterWithNewPollStatements",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev": [],
                "new": []
            }
        },
        "Board._sendOneshot": {
            "name": "_sendOneshot",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oneshot": []
            }
        },
        "Board.outputStatements": {
            "name": "outputStatements",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmts": []
            }
        },
        "Board.syncMasterGraphToHostStatements": {
            "name": "syncMasterGraphToHostStatements",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev": []
            }
        },
        "Board.staticStmts": {
            "name": "staticStmts",
            "location": 278,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.generateArduinoCode": {
            "name": "generateArduinoCode",
            "location": 281,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board._readBoardChecksum": {
            "name": "_readBoardChecksum",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "Board._boardIsCurrent": {
            "name": "_boardIsCurrent",
            "location": 301,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "currentChecksum": []
            }
        },
        "Board.deployToArduino": {
            "name": "deployToArduino",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board._arduinoMake": {
            "name": "_arduinoMake",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workDir": [],
                "code": []
            }
        },
        "Board.currentGraph": {
            "name": "currentGraph",
            "location": 343,
            "return": [
                "Graph"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dot.get": {
            "name": "get",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArduinoCode.get": {
            "name": "get",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputPage.post": {
            "name": "post",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputPage.put": {
            "name": "put",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boards.get": {
            "name": "get",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/arduinoNode/devices.py": {
        "readLine": {
            "name": "readLine",
            "location": 15,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "read": []
            }
        },
        "register": {
            "name": "register",
            "location": 171,
            "return": [],
            "arguments": {
                "deviceType": []
            }
        },
        "byteFromFloat": {
            "name": "byteFromFloat",
            "location": 386,
            "return": [
                "str"
            ],
            "arguments": {
                "f": []
            }
        },
        "makeDevices": {
            "name": "makeDevices",
            "location": 729,
            "return": [
                "list"
            ],
            "arguments": {
                "graph": [],
                "board": []
            }
        },
        "DeviceType.findInstances": {
            "name": "findInstances",
            "location": 24,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "cls": [],
                "graph": [],
                "board": []
            }
        },
        "DeviceType.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "pinNumber": []
            }
        },
        "DeviceType.hostStateInit": {
            "name": "hostStateInit",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.description": {
            "name": "description",
            "location": 60,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.readFromPoll": {
            "name": "readFromPoll",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "read": []
            }
        },
        "DeviceType.wantIdleOutput": {
            "name": "wantIdleOutput",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.outputIdle": {
            "name": "outputIdle",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write": []
            }
        },
        "DeviceType.hostStatements": {
            "name": "hostStatements",
            "location": 85,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.watchPrefixes": {
            "name": "watchPrefixes",
            "location": 95,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.generateIncludes": {
            "name": "generateIncludes",
            "location": 104,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.generateArduinoLibs": {
            "name": "generateArduinoLibs",
            "location": 108,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.generateGlobalCode": {
            "name": "generateGlobalCode",
            "location": 112,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.generateSetupCode": {
            "name": "generateSetupCode",
            "location": 119,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.generateIdleCode": {
            "name": "generateIdleCode",
            "location": 123,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.generatePollCode": {
            "name": "generatePollCode",
            "location": 127,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.generateActionCode": {
            "name": "generateActionCode",
            "location": 135,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.outputPatterns": {
            "name": "outputPatterns",
            "location": 144,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.outputWidgets": {
            "name": "outputWidgets",
            "location": 151,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.sendOutput": {
            "name": "sendOutput",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": [],
                "write": [],
                "read": []
            }
        },
        "PingInput.findInstances": {
            "name": "findInstances",
            "location": 178,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "graph": [],
                "board": []
            }
        },
        "PingInput.generatePollCode": {
            "name": "generatePollCode",
            "location": 181,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PingInput.readFromPoll": {
            "name": "readFromPoll",
            "location": 184,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": [],
                "read": []
            }
        },
        "PingInput.watchPrefixes": {
            "name": "watchPrefixes",
            "location": 190,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MotionSensorInput.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "pinNumber": []
            }
        },
        "MotionSensorInput.generateSetupCode": {
            "name": "generateSetupCode",
            "location": 200,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MotionSensorInput.generatePollCode": {
            "name": "generatePollCode",
            "location": 205,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "MotionSensorInput.readFromPoll": {
            "name": "readFromPoll",
            "location": 210,
            "return": [
                "dict[typing.Text, list[tuple]]"
            ],
            "arguments": {
                "self": [],
                "read": []
            }
        },
        "MotionSensorInput.recentMotionStatements": {
            "name": "recentMotionStatements",
            "location": 227,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": [],
                "motion": []
            }
        },
        "MotionSensorInput.watchPrefixes": {
            "name": "watchPrefixes",
            "location": 239,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushbuttonInput.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "pinNumber": []
            }
        },
        "PushbuttonInput.generateSetupCode": {
            "name": "generateSetupCode",
            "location": 254,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushbuttonInput.generatePollCode": {
            "name": "generatePollCode",
            "location": 259,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushbuttonInput.readFromPoll": {
            "name": "readFromPoll",
            "location": 265,
            "return": [
                "dict[typing.Text, list[tuple]]"
            ],
            "arguments": {
                "self": [],
                "read": []
            }
        },
        "PushbuttonInput.watchPrefixes": {
            "name": "watchPrefixes",
            "location": 286,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneWire.hostStateInit": {
            "name": "hostStateInit",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneWire.generateIncludes": {
            "name": "generateIncludes",
            "location": 309,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneWire.generateArduinoLibs": {
            "name": "generateArduinoLibs",
            "location": 312,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneWire.generateGlobalCode": {
            "name": "generateGlobalCode",
            "location": 315,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneWire.generateSetupCode": {
            "name": "generateSetupCode",
            "location": 333,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneWire.generatePollCode": {
            "name": "generatePollCode",
            "location": 336,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneWire.readFromPoll": {
            "name": "readFromPoll",
            "location": 355,
            "return": [
                "list[tuple[URIRef]]"
            ],
            "arguments": {
                "self": [],
                "read": []
            }
        },
        "OneWire.watchPrefixes": {
            "name": "watchPrefixes",
            "location": 381,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedOutput.hostStateInit": {
            "name": "hostStateInit",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedOutput.generateSetupCode": {
            "name": "generateSetupCode",
            "location": 395,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedOutput.outputPatterns": {
            "name": "outputPatterns",
            "location": 400,
            "return": [
                "list[tuple[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedOutput.sendOutput": {
            "name": "sendOutput",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": [],
                "write": [],
                "read": []
            }
        },
        "LedOutput.hostStatements": {
            "name": "hostStatements",
            "location": 411,
            "return": [
                "list[tuple[Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedOutput.generateActionCode": {
            "name": "generateActionCode",
            "location": 414,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedOutput.outputWidgets": {
            "name": "outputWidgets",
            "location": 420,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,int,float]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOutput.hostStateInit": {
            "name": "hostStateInit",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOutput.generateSetupCode": {
            "name": "generateSetupCode",
            "location": 436,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOutput.outputPatterns": {
            "name": "outputPatterns",
            "location": 441,
            "return": [
                "list[tuple[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOutput.sendOutput": {
            "name": "sendOutput",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": [],
                "write": [],
                "read": []
            }
        },
        "DigitalOutput.hostStatements": {
            "name": "hostStatements",
            "location": 450,
            "return": [
                "list[tuple[Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOutput.generateActionCode": {
            "name": "generateActionCode",
            "location": 454,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "DigitalOutput.outputWidgets": {
            "name": "outputWidgets",
            "location": 460,
            "return": [
                "list[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PwmBoard.findInstances": {
            "name": "findInstances",
            "location": 472,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "cls": [],
                "graph": [],
                "board": []
            }
        },
        "PwmBoard.__init__": {
            "name": "__init__",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "dev": [],
                "outs": []
            }
        },
        "PwmBoard.hostStateInit": {
            "name": "hostStateInit",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PwmBoard.hostStatements": {
            "name": "hostStatements",
            "location": 499,
            "return": [
                "list[tuple[Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PwmBoard.generateIncludes": {
            "name": "generateIncludes",
            "location": 503,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PwmBoard.generateArduinoLibs": {
            "name": "generateArduinoLibs",
            "location": 506,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PwmBoard.generateGlobalCode": {
            "name": "generateGlobalCode",
            "location": 509,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PwmBoard.generateSetupCode": {
            "name": "generateSetupCode",
            "location": 514,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PwmBoard.generateActionCode": {
            "name": "generateActionCode",
            "location": 520,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "PwmBoard.outputPatterns": {
            "name": "outputPatterns",
            "location": 529,
            "return": [
                "list[tuple[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PwmBoard.sendOutput": {
            "name": "sendOutput",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": [],
                "write": [],
                "read": []
            }
        },
        "PwmBoard.outputWidgets": {
            "name": "outputWidgets",
            "location": 541,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,int,float]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ST7576Lcd.findInstances": {
            "name": "findInstances",
            "location": 555,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "cls": [],
                "graph": [],
                "board": []
            }
        },
        "ST7576Lcd.__init__": {
            "name": "__init__",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "dev": [],
                "connections": []
            }
        },
        "ST7576Lcd.generateIncludes": {
            "name": "generateIncludes",
            "location": 578,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ST7576Lcd.generateArduinoLibs": {
            "name": "generateArduinoLibs",
            "location": 581,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ST7576Lcd.generateGlobalCode": {
            "name": "generateGlobalCode",
            "location": 584,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ST7576Lcd.generateSetupCode": {
            "name": "generateSetupCode",
            "location": 595,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ST7576Lcd.outputPatterns": {
            "name": "outputPatterns",
            "location": 605,
            "return": [
                "list[tuple[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ST7576Lcd.sendOutput": {
            "name": "sendOutput",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": [],
                "write": [],
                "read": []
            }
        },
        "ST7576Lcd.hostStatements": {
            "name": "hostStatements",
            "location": 615,
            "return": [
                "list[tuple[Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ST7576Lcd.outputWidgets": {
            "name": "outputWidgets",
            "location": 618,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,int]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ST7576Lcd.generateActionCode": {
            "name": "generateActionCode",
            "location": 627,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.__init__": {
            "name": "__init__",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "pinNumber": []
            }
        },
        "RgbPixels.generateIncludes": {
            "name": "generateIncludes",
            "location": 658,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.generateArduinoLibs": {
            "name": "generateArduinoLibs",
            "location": 662,
            "return": [
                "list[typing.Text]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.myId": {
            "name": "myId",
            "location": 666,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.generateGlobalCode": {
            "name": "generateGlobalCode",
            "location": 669,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.generateSetupCode": {
            "name": "generateSetupCode",
            "location": 672,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.sendOutput": {
            "name": "sendOutput",
            "location": 675,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": [],
                "write": [],
                "read": []
            }
        },
        "RgbPixels.updateOutput": {
            "name": "updateOutput",
            "location": 682,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.wantIdleOutput": {
            "name": "wantIdleOutput",
            "location": 689,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.outputIdle": {
            "name": "outputIdle",
            "location": 692,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write": []
            }
        },
        "RgbPixels.hostStatements": {
            "name": "hostStatements",
            "location": 696,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.outputPatterns": {
            "name": "outputPatterns",
            "location": 699,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.outputWidgets": {
            "name": "outputWidgets",
            "location": 702,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.generateActionCode": {
            "name": "generateActionCode",
            "location": 705,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/arduinoNode/dotrender.py": {
        "render": {
            "name": "render",
            "location": 3,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "configGraph": [],
                "boards": []
            }
        },
        "render.addNode": {
            "name": "addNode",
            "location": 8,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "node": []
            }
        },
        "render.addStmt": {
            "name": "addStmt",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "stmt": []
            }
        }
    },
    "homeauto-master/service/arduinoNode/loggingserial.py": {
        "LoggingSerial.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "None"
                ],
                "ports": [
                    "None"
                ],
                "baudrate": [
                    "int"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "LoggingSerial.flush": {
            "name": "flush",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingSerial.close": {
            "name": "close",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingSerial.write": {
            "name": "write",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "LoggingSerial.read": {
            "name": "read",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "errorOnTimeout": [
                    "bool"
                ]
            }
        }
    },
    "homeauto-master/service/arduinoNode/pushConfig.py": {},
    "homeauto-master/service/arduinoNode/rdflib_patch.py": {
        "fixQnameOfUriWithTrailingSlash": {
            "name": "fixQnameOfUriWithTrailingSlash",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fixQnameOfUriWithTrailingSlash.new_split": {
            "name": "new_split",
            "location": 5,
            "return": [
                "tuple[typing.Text]"
            ],
            "arguments": {
                "uri": []
            }
        }
    },
    "homeauto-master/service/arduinoNode/tasks.py": {
        "build_image": {
            "name": "build_image",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "push_image": {
            "name": "push_image",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "shell": {
            "name": "shell",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "local_run": {
            "name": "local_run",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "push_config": {
            "name": "push_config",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "redeploy": {
            "name": "redeploy",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "lightsout": {
            "name": "lightsout",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "lightstest": {
            "name": "lightstest",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/service/arduinoNode/write_arduino_code.py": {
        "writeMakefile": {
            "name": "writeMakefile",
            "location": 4,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "dev": [],
                "tag": [],
                "allLibs": []
            }
        },
        "writeCode": {
            "name": "writeCode",
            "location": 19,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "baudrate": [],
                "devs": [],
                "devCommandNum": []
            }
        },
        "indent": {
            "name": "indent",
            "location": 105,
            "return": [],
            "arguments": {
                "code": []
            }
        }
    },
    "homeauto-master/service/audioInputLevels/audioInputLevelsPulse.py": {},
    "homeauto-master/service/beacon/beaconmap.py": {},
    "homeauto-master/service/beacon/db.py": {},
    "homeauto-master/service/beacon/locator.py": {},
    "homeauto-master/service/beacon/rssiscan.py": {},
    "homeauto-master/service/bluetoothButtons/bluetooth_buttons.py": {},
    "homeauto-master/service/cardReader/rfid.py": {
        "uidUri": {
            "name": "uidUri",
            "location": 61,
            "return": [
                "URIRef"
            ],
            "arguments": {
                "card_id": []
            }
        },
        "randomBody": {
            "name": "randomBody",
            "location": 65,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "looksLikeBigasterisk": {
            "name": "looksLikeBigasterisk",
            "location": 68,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "OutputPage.put": {
            "name": "put",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputPage._onQueryStringStatement": {
            "name": "_onQueryStringStatement",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [],
                "p": [],
                "body": []
            }
        },
        "OutputPage._onGraphBodyStatements": {
            "name": "_onGraphBodyStatements",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [],
                "headers": []
            }
        },
        "OutputPage._onStatements": {
            "name": "_onStatements",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmts": []
            }
        },
        "Rewrite.post": {
            "name": "post",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadLoop.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader": [],
                "masterGraph": [],
                "overwrite_any_tag": []
            }
        },
        "ReadLoop.poll": {
            "name": "poll",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReadLoop.flushOldReads": {
            "name": "flushOldReads",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "now": []
            }
        },
        "ReadLoop.startCardRead": {
            "name": "startCardRead",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cardUri": [],
                "text": []
            }
        },
        "ReadLoop.endCardRead": {
            "name": "endCardRead",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cardUri": []
            }
        },
        "ReadLoop._sendOneshot": {
            "name": "_sendOneshot",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oneshot": []
            }
        },
        "ReadLoop._sendOneshot.err": {
            "name": "err",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "e": []
            }
        }
    },
    "homeauto-master/service/cardReader/tags.py": {
        "FakeNfc.getTags": {
            "name": "getTags",
            "location": 8,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "NfcDevice.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NfcDevice.__del__": {
            "name": "__del__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NfcDevice.getTags": {
            "name": "getTags",
            "location": 39,
            "return": [
                "typing.Generator[NfcTag]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NfcError.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [],
                "strerror": []
            }
        },
        "NfcTag.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "NfcTag._check": {
            "name": "_check",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ret": []
            }
        },
        "NfcTag.tagType": {
            "name": "tagType",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NfcTag.uid": {
            "name": "uid",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NfcTag.connect": {
            "name": "connect",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NfcTag.disconnect": {
            "name": "disconnect",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NfcTag.readBlock": {
            "name": "readBlock",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "blockNumber": []
            }
        },
        "NfcTag.writeBlock": {
            "name": "writeBlock",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blockNumber": [],
                "data": []
            }
        }
    },
    "homeauto-master/service/cardReader/tags_test.py": {
        "TestNfc.test_open_close": {
            "name": "test_open_close",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNfc.test_update_tag": {
            "name": "test_update_tag",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/collector/collector.py": {
        "abbrevTerm": {
            "name": "abbrevTerm",
            "location": 96,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "abbrevStmt": {
            "name": "abbrevStmt",
            "location": 103,
            "return": [],
            "arguments": {
                "stmt": []
            }
        },
        "Metrics.get": {
            "name": "get",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalStatements.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "applyPatch": []
            }
        },
        "LocalStatements.setSourceState": {
            "name": "setSourceState",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "state": []
            }
        },
        "PatchSink.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "application": [],
                "request": []
            }
        },
        "PatchSink.__repr__": {
            "name": "__repr__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PatchSink.state": {
            "name": "state",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PatchSink.bind": {
            "name": "bind",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PatchSink.unbind": {
            "name": "unbind",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostDeleter.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "statements": []
            }
        },
        "PostDeleter.__enter__": {
            "name": "__enter__",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostDeleter.add": {
            "name": "add",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "stmt": []
            }
        },
        "PostDeleter.__exit__": {
            "name": "__exit__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "ActiveStatements.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveStatements.state": {
            "name": "state",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveStatements.postDeleteStatements": {
            "name": "postDeleteStatements",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveStatements.pprintTable": {
            "name": "pprintTable",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActiveStatements.makeSyncPatch": {
            "name": "makeSyncPatch",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "handler": [],
                "sources": []
            }
        },
        "ActiveStatements.applySourcePatch": {
            "name": "applySourcePatch",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "p": []
            }
        },
        "ActiveStatements.replaceSourceStatements": {
            "name": "replaceSourceStatements",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "stmts": []
            }
        },
        "ActiveStatements.discardHandler": {
            "name": "discardHandler",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "ActiveStatements.discardSource": {
            "name": "discardSource",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "GraphClients.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphClients.state": {
            "name": "state",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphClients._sourcesForHandler": {
            "name": "_sourcesForHandler",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "GraphClients._onPatch": {
            "name": "_onPatch",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "p": [],
                "fullGraph": []
            }
        },
        "GraphClients._sendUpdatePatch": {
            "name": "_sendUpdatePatch",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "GraphClients.addSseHandler": {
            "name": "addSseHandler",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "GraphClients.removeSseHandler": {
            "name": "removeSseHandler",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "GraphClients._stopClient": {
            "name": "_stopClient",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "GraphClients.cleanup": {
            "name": "cleanup",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.get": {
            "name": "get",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphList.get": {
            "name": "get",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/collector/collector_config.py": {},
    "homeauto-master/service/colplay/colplay.py": {
        "currentAudio": {
            "name": "currentAudio",
            "location": 25,
            "return": [
                "float"
            ],
            "arguments": {
                "location": [
                    "typing.Text"
                ]
            }
        },
        "hexFromRgb": {
            "name": "hexFromRgb",
            "location": 94,
            "return": [],
            "arguments": {
                "rgb": []
            }
        },
        "setColor": {
            "name": "setColor",
            "location": 97,
            "return": [],
            "arguments": {
                "lightName": [],
                "rgb": []
            }
        },
        "Img.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "Img.reread": {
            "name": "reread",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Img.getColor": {
            "name": "getColor",
            "location": 56,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "setColor.err": {
            "name": "err",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "e": []
            }
        },
        "setColor.done": {
            "name": "done",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "ret": []
            }
        },
        "LightState.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightState.mute": {
            "name": "mute",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "secs": []
            }
        },
        "LightState.step": {
            "name": "step",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneShot.post": {
            "name": "post",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexHandler.get": {
            "name": "get",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/dhcpleases/dhcpleases.py": {
        "timeLiteral": {
            "name": "timeLiteral",
            "location": 28,
            "return": [
                "Literal"
            ],
            "arguments": {
                "dt": []
            }
        },
        "macUri": {
            "name": "macUri",
            "location": 32,
            "return": [
                "URIRef"
            ],
            "arguments": {
                "macAddress": []
            }
        },
        "Poller.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": []
            }
        },
        "Poller.anythingToRead": {
            "name": "anythingToRead",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poller.poll": {
            "name": "poll",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/dhcpleases/tasks.py": {},
    "homeauto-master/service/dpms/dpms_service.py": {
        "getMonitorState": {
            "name": "getMonitorState",
            "location": 33,
            "return": [
                "typing.Text"
            ],
            "arguments": {}
        },
        "Root.get": {
            "name": "get",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.get": {
            "name": "get",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Monitor.put": {
            "name": "put",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poller.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poller.poll": {
            "name": "poll",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/dpms/tasks.py": {
        "build_image_x86": {
            "name": "build_image_x86",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "build_image_pi": {
            "name": "build_image_pi",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "push_image_x86": {
            "name": "push_image_x86",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "push_image_pi": {
            "name": "push_image_pi",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "shell": {
            "name": "shell",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "local_run": {
            "name": "local_run",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "redeploy": {
            "name": "redeploy",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/service/environment/environment.py": {
        "update": {
            "name": "update",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "masterGraph": []
            }
        },
        "main": {
            "name": "main",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CycloneGraphEventsHandlerWithCors.flush": {
            "name": "flush",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "main.Application.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/environment/rdfdoc.py": {
        "Doc.get": {
            "name": "get",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/environment/tasks.py": {},
    "homeauto-master/service/environment/twilight.py": {
        "isWithinTwilight": {
            "name": "isWithinTwilight",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": []
            }
        }
    },
    "homeauto-master/service/frontDoorLock/front_door_lock.py": {
        "rdfGraphBody": {
            "name": "rdfGraphBody",
            "location": 35,
            "return": [
                "Graph"
            ],
            "arguments": {
                "body": [],
                "headers": []
            }
        },
        "mqttMessageFromState": {
            "name": "mqttMessageFromState",
            "location": 40,
            "return": [
                "bytes"
            ],
            "arguments": {
                "state": []
            }
        },
        "stateFromMqtt": {
            "name": "stateFromMqtt",
            "location": 46,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "requestUser": {
            "name": "requestUser",
            "location": 52,
            "return": [
                "URIRef"
            ],
            "arguments": {
                "req": []
            }
        },
        "OutputPage.put": {
            "name": "put",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputPage._onStatement": {
            "name": "_onStatement",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "stmt": []
            }
        },
        "SimpleState.post": {
            "name": "post",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoLock.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "masterGraph": [],
                "mqtt": []
            }
        },
        "AutoLock.relock": {
            "name": "relock",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoLock.reportTimes": {
            "name": "reportTimes",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unlockedFor": []
            }
        },
        "AutoLock.clearReport": {
            "name": "clearReport",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoLock.pollCheck": {
            "name": "pollCheck",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoLock.check": {
            "name": "check",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoLock.onUnlockedStmt": {
            "name": "onUnlockedStmt",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoLock.onLockedStmt": {
            "name": "onLockedStmt",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BluetoothButton.post": {
            "name": "post",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "toGraph": {
            "name": "toGraph",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": []
            }
        },
        "setEspState": {
            "name": "setEspState",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "payload": []
            }
        }
    },
    "homeauto-master/service/frontDoorLock/tasks.py": {
        "program_board_over_usb": {
            "name": "program_board_over_usb",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "monitor_usb": {
            "name": "monitor_usb",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "tail_mqtt": {
            "name": "tail_mqtt",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "mqtt_force_open": {
            "name": "mqtt_force_open",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "mqtt_force_lock": {
            "name": "mqtt_force_lock",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/service/iot2/devices.py": {
        "hello": {
            "name": "hello",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "homeauto-master/service/iot2/py_read_messages_demo.py": {},
    "homeauto-master/service/iot2/tasks.py": {
        "nim_install": {
            "name": "nim_install",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "py_install": {
            "name": "py_install",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "py_deps": {
            "name": "py_deps",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "nim_deps": {
            "name": "nim_deps",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "nim_build_x86": {
            "name": "nim_build_x86",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "arm_cross_compiler_install": {
            "name": "arm_cross_compiler_install",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "nim_build_arm": {
            "name": "nim_build_arm",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "local_run": {
            "name": "local_run",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "install_nim_capnp": {
            "name": "install_nim_capnp",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "messages_build_nim": {
            "name": "messages_build_nim",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "setup_esp_build": {
            "name": "setup_esp_build",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "nim_build_esp32": {
            "name": "nim_build_esp32",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "esp32_flash": {
            "name": "esp32_flash",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "esp32_monitor": {
            "name": "esp32_monitor",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/service/irRemote/irRemote.py": {
        "Listener.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Listener.run": {
            "name": "run",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Listener.next_key": {
            "name": "next_key",
            "location": 51,
            "return": [
                "tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/button_events.py": {
        "button_events": {
            "name": "button_events",
            "location": 13,
            "return": [],
            "arguments": {
                "min_hold_sec": [],
                "release_after_sec": [],
                "scheduler": []
            }
        },
        "button_events.op": {
            "name": "op",
            "location": 17,
            "return": [
                "Observable"
            ],
            "arguments": {
                "source": []
            }
        },
        "button_events.op.subscribe": {
            "name": "subscribe",
            "location": 19,
            "return": [
                "CompositeDisposable"
            ],
            "arguments": {
                "observer": [],
                "scheduler_": [
                    "None"
                ]
            }
        },
        "button_events.op.subscribe.set_state": {
            "name": "set_state",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "state": []
            }
        },
        "button_events.op.subscribe.on_next": {
            "name": "on_next",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "x": []
            }
        },
        "button_events.op.subscribe.on_error": {
            "name": "on_error",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "exception": []
            }
        },
        "button_events.op.subscribe.on_completed": {
            "name": "on_completed",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "button_events.op.subscribe.on_next.action": {
            "name": "action",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler": [],
                "state": [
                    "None"
                ]
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/candidate_binding.py": {
        "CandidateBinding.__post_init__": {
            "name": "__post_init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CandidateBinding.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "CandidateBinding.key": {
            "name": "key",
            "location": 31,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "CandidateBinding.apply": {
            "name": "apply",
            "location": 35,
            "return": [
                "typing.Generator[tuple]"
            ],
            "arguments": {
                "self": [],
                "g": [],
                "returnBoundStatementsOnly": [
                    "bool"
                ]
            }
        },
        "CandidateBinding.applyTerm": {
            "name": "applyTerm",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "term": [],
                "failUnbound": [
                    "bool"
                ]
            }
        },
        "CandidateBinding.addNewBindings": {
            "name": "addNewBindings",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newBindings": []
            }
        },
        "CandidateBinding.copy": {
            "name": "copy",
            "location": 67,
            "return": [
                "CandidateBinding"
            ],
            "arguments": {
                "self": []
            }
        },
        "CandidateBinding.contains": {
            "name": "contains",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "term": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/inference.py": {
        "debug": {
            "name": "debug",
            "location": 43,
            "return": [],
            "arguments": {
                "logger": [],
                "slog": [],
                "msg": []
            }
        },
        "ChunkLooper.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChunkLooper.__post_init__": {
            "name": "__post_init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChunkLooper._prevBindings": {
            "name": "_prevBindings",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChunkLooper.advance": {
            "name": "advance",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChunkLooper._advanceWithPlainMatches": {
            "name": "_advanceWithPlainMatches",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "augmentedWorkingSet": []
            }
        },
        "ChunkLooper._advanceWithFunctions": {
            "name": "_advanceWithFunctions",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChunkLooper._testAndKeepNewBinding": {
            "name": "_testAndKeepNewBinding",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "newBinding": [],
                "sourceChunk": []
            }
        },
        "ChunkLooper.localBinding": {
            "name": "localBinding",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChunkLooper.currentBinding": {
            "name": "currentBinding",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChunkLooper.pastEnd": {
            "name": "pastEnd",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChunkLooper.restart": {
            "name": "restart",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lhs.__post_init__": {
            "name": "__post_init__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lhs.__repr__": {
            "name": "__repr__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lhs.findCandidateBindings": {
            "name": "findCandidateBindings",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "knownTrue": [],
                "stats": [],
                "slog": [],
                "ruleStatementsIterationLimit": []
            }
        },
        "Lhs._debugChunkStack": {
            "name": "_debugChunkStack",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "chunkStack": []
            }
        },
        "Lhs._checkPredicateCounts": {
            "name": "_checkPredicateCounts",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "knownTrue": []
            }
        },
        "Lhs._assembleRings": {
            "name": "_assembleRings",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "knownTrue": [],
                "stats": [],
                "slog": []
            }
        },
        "Lhs._unpartitionedGraphPermutations": {
            "name": "_unpartitionedGraphPermutations",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lhs._partitionedGraphPermutations": {
            "name": "_partitionedGraphPermutations",
            "location": 336,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lhs._advanceTheStack": {
            "name": "_advanceTheStack",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "looperRings": []
            }
        },
        "Lhs._assertAllRingsAreValid": {
            "name": "_assertAllRingsAreValid",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "looperRings": []
            }
        },
        "Rule.__post_init__": {
            "name": "__post_init__",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rule.applyRule": {
            "name": "applyRule",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "workingSet": [],
                "implied": [],
                "stats": [],
                "slog": [],
                "ruleStatementsIterationLimit": []
            }
        },
        "Rule.generateImpliedFromRhs": {
            "name": "generateImpliedFromRhs",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "binding": []
            }
        },
        "Inference.__init__": {
            "name": "__init__",
            "location": 453,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Inference.setRules": {
            "name": "setRules",
            "location": 457,
            "return": [],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "Inference.nonRuleStatements": {
            "name": "nonRuleStatements",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Inference.infer": {
            "name": "infer",
            "location": 470,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "htmlLog": []
            }
        },
        "Inference._iterateAllRules": {
            "name": "_iterateAllRules",
            "location": 522,
            "return": [],
            "arguments": {
                "self": [],
                "workingSet": [],
                "implied": [],
                "stats": [],
                "slog": []
            }
        },
        "Inference._logRuleApplicationHeader": {
            "name": "_logRuleApplicationHeader",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "workingSet": [],
                "i": [],
                "r": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/inference_functions.py": {
        "Gt.bind": {
            "name": "bind",
            "location": 21,
            "return": [
                "CandidateBinding"
            ],
            "arguments": {
                "self": [],
                "existingBinding": []
            }
        },
        "AsFarenheit.bind": {
            "name": "bind",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "existingBinding": []
            }
        },
        "Sum.bind": {
            "name": "bind",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "existingBinding": []
            }
        },
        "ChildResource.bind": {
            "name": "bind",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "existingBinding": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/inference_test.py": {
        "N3": {
            "name": "N3",
            "location": 21,
            "return": [
                "ConjunctiveGraph"
            ],
            "arguments": {
                "txt": []
            }
        },
        "makeInferenceWithRules": {
            "name": "makeInferenceWithRules",
            "location": 34,
            "return": [
                "Inference"
            ],
            "arguments": {
                "n3": []
            }
        },
        "WithGraphEqual.assertGraphEqual": {
            "name": "assertGraphEqual",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "g": [],
                "expected": []
            }
        },
        "TestInferenceWithoutVars.testEmitNothing": {
            "name": "testEmitNothing",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithoutVars.testSimple": {
            "name": "testSimple",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithoutVars.testTwoRounds": {
            "name": "testTwoRounds",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNonRuleStatements.test": {
            "name": "test",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithVars.testVarInSubject": {
            "name": "testVarInSubject",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithVars.testVarInObject": {
            "name": "testVarInObject",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithVars.testVarMatchesTwice": {
            "name": "testVarMatchesTwice",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithVars.testTwoRulesApplyIndependently": {
            "name": "testTwoRulesApplyIndependently",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithVars.testOneRuleActivatesAnother": {
            "name": "testOneRuleActivatesAnother",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithVars.testRuleMatchesStaticStatement": {
            "name": "testRuleMatchesStaticStatement",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVarLinksTwoStatements.setUp": {
            "name": "setUp",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVarLinksTwoStatements.testOnlyOneStatementPresent": {
            "name": "testOnlyOneStatementPresent",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVarLinksTwoStatements.testObjectsConflict": {
            "name": "testObjectsConflict",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVarLinksTwoStatements.testObjectsAgree": {
            "name": "testObjectsAgree",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBnodeMatching.testRuleBnodeBindsToInputBnode": {
            "name": "testRuleBnodeBindsToInputBnode",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBnodeMatching.testRuleVarBindsToInputBNode": {
            "name": "testRuleVarBindsToInputBNode",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBnodeAliasingSetup.setUp": {
            "name": "setUp",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBnodeAliasingSetup.assertResult": {
            "name": "assertResult",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actual": []
            }
        },
        "TestBnodeAliasingSetup.testMatchesDistinctStatements": {
            "name": "testMatchesDistinctStatements",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBnodeAliasingSetup.testMatchesDistinctBnodes": {
            "name": "testMatchesDistinctBnodes",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBnodeAliasingSetup.testProdCase": {
            "name": "testProdCase",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBnodeGenerating.testRuleBnodeMakesNewBnode": {
            "name": "testRuleBnodeMakesNewBnode",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBnodeGenerating.testRuleBnodeMakesNewBnodesEachTime": {
            "name": "testRuleBnodeMakesNewBnodesEachTime",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelfFulfillingRule.test1": {
            "name": "test1",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithMathFunctions.testBoolFilter": {
            "name": "testBoolFilter",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithMathFunctions.testNonFiringMathRule": {
            "name": "testNonFiringMathRule",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithMathFunctions.testStatementGeneratingRule": {
            "name": "testStatementGeneratingRule",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithMathFunctions.test2Operands": {
            "name": "test2Operands",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithMathFunctions.test3Operands": {
            "name": "test3Operands",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithCustomFunctions.testAsFarenheit": {
            "name": "testAsFarenheit",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithCustomFunctions.testChildResource": {
            "name": "testChildResource",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInferenceWithCustomFunctions.testChildResourceSegmentQuoting": {
            "name": "testChildResourceSegmentQuoting",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUseCases.testSimpleTopic": {
            "name": "testSimpleTopic",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUseCases.testTopicIsList": {
            "name": "testTopicIsList",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUseCases.testPerformance0": {
            "name": "testPerformance0",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUseCases.testPerformance1": {
            "name": "testPerformance1",
            "location": 355,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUseCases.testEmitBnodes": {
            "name": "testEmitBnodes",
            "location": 378,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUseCases.testRemap": {
            "name": "testRemap",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListPerformance.testList1": {
            "name": "testList1",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListPerformance.testList2": {
            "name": "testList2",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListPerformance.testList3": {
            "name": "testList3",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/inference_types.py": {},
    "homeauto-master/service/mqtt_to_rdf/infer_perf_test.py": {
        "TestPerf.test": {
            "name": "test",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/lhs_evaluation.py": {
        "_numericNode": {
            "name": "_numericNode",
            "location": 21,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "register": {
            "name": "register",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "functionsFor": {
            "name": "functionsFor",
            "location": 100,
            "return": [
                "typing.Generator",
                "None"
            ],
            "arguments": {
                "pred": []
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunk": []
            }
        },
        "Function.getOperandNodes": {
            "name": "getOperandNodes",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "existingBinding": []
            }
        },
        "Function.getNumericOperands": {
            "name": "getNumericOperands",
            "location": 42,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "existingBinding": []
            }
        },
        "Function.bind": {
            "name": "bind",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "existingBinding": []
            }
        },
        "Function.valueInObjectTerm": {
            "name": "valueInObjectTerm",
            "location": 53,
            "return": [
                "CandidateBinding"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "SubjectFunction.getOperandNodes": {
            "name": "getOperandNodes",
            "location": 63,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "existingBinding": []
            }
        },
        "SubjectObjectFunction.getOperandNodes": {
            "name": "getOperandNodes",
            "location": 72,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "existingBinding": []
            }
        },
        "ListFunction.getOperandNodes": {
            "name": "getOperandNodes",
            "location": 81,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "existingBinding": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/lhs_evaluation_test.py": {
        "N3": {
            "name": "N3",
            "location": 9,
            "return": [
                "ConjunctiveGraph"
            ],
            "arguments": {
                "txt": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/mqtt_message.py": {
        "graphFromMessage": {
            "name": "graphFromMessage",
            "location": 11,
            "return": [],
            "arguments": {
                "topic": [],
                "body": []
            }
        },
        "_maybeAddJson": {
            "name": "_maybeAddJson",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [],
                "message": [],
                "bodyStr": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/mqtt_message_test.py": {
        "TestGraphFromMessage.testTopicOutput": {
            "name": "testTopicOutput",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraphFromMessage.testFloatBody": {
            "name": "testFloatBody",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraphFromMessage.testStrBody": {
            "name": "testStrBody",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraphFromMessage.testJsonEmptyBody": {
            "name": "testJsonEmptyBody",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraphFromMessage.testJsonBody": {
            "name": "testJsonBody",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/mqtt_to_rdf.py": {
        "logGraph": {
            "name": "logGraph",
            "location": 51,
            "return": [],
            "arguments": {
                "debug": [],
                "label": [],
                "graph": []
            }
        },
        "appendLimit": {
            "name": "appendLimit",
            "location": 56,
            "return": [],
            "arguments": {
                "lst": [],
                "elem": [],
                "n": []
            }
        },
        "parseDurationLiteral": {
            "name": "parseDurationLiteral",
            "location": 61,
            "return": [],
            "arguments": {
                "lit": []
            }
        },
        "truncTime": {
            "name": "truncTime",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "tightN3": {
            "name": "tightN3",
            "location": 215,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "serializeWithNs": {
            "name": "serializeWithNs",
            "location": 219,
            "return": [],
            "arguments": {
                "graph": [],
                "hidePrefixes": []
            }
        },
        "StreamPipelineStep.makeOutputStream": {
            "name": "makeOutputStream",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "inStream": []
            }
        },
        "Filters.makeOutputStream": {
            "name": "makeOutputStream",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "inStream": []
            }
        },
        "Parser.makeOutputStream": {
            "name": "makeOutputStream",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "inStream": []
            }
        },
        "Parser.getParser": {
            "name": "getParser",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.getParserFunc": {
            "name": "getParserFunc",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "parserType": []
            }
        },
        "Parser.tagIdToUri": {
            "name": "tagIdToUri",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Parser.parseJsonBrightness": {
            "name": "parseJsonBrightness",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "mqttValue": []
            }
        },
        "Parser.remap": {
            "name": "remap",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "valueStr": []
            }
        },
        "Parser.parseJsonRfCode": {
            "name": "parseJsonRfCode",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "mqttValue": []
            }
        },
        "Parser.parseTradfriMessage": {
            "name": "parseTradfriMessage",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "mqttValue": []
            }
        },
        "Converters.makeOutputStream": {
            "name": "makeOutputStream",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "inStream": []
            }
        },
        "Converters.conversionStep": {
            "name": "conversionStep",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "conv": []
            }
        },
        "Converters.c2f": {
            "name": "c2f",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Rdfizer.makeOutputStream": {
            "name": "makeOutputStream",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "inStream": []
            }
        },
        "Rdfizer.makeQuads": {
            "name": "makeQuads",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "inStream": [],
                "plan": []
            }
        },
        "MqttStatementSource.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "config": [],
                "masterGraph": [],
                "mqtt": [],
                "internalMqtt": [],
                "debugPageData": [],
                "influxExport": [],
                "inference": []
            }
        },
        "MqttStatementSource.onMessage": {
            "name": "onMessage",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "MqttStatementSource.topicFromConfig": {
            "name": "topicFromConfig",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "MqttStatementSource.subscribeMqtt": {
            "name": "subscribeMqtt",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "topic": []
            }
        },
        "MqttStatementSource.countIncomingMessage": {
            "name": "countIncomingMessage",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "MqttStatementSource.updateInflux": {
            "name": "updateInflux",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "newGraphs": []
            }
        },
        "MqttStatementSource.updateMasterGraph": {
            "name": "updateMasterGraph",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "newGraph": []
            }
        },
        "Metrics.get": {
            "name": "get",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DebugPageData.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "application": [],
                "request": []
            }
        },
        "DebugPageData.watch": {
            "name": "watch",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DebugPageData.bind": {
            "name": "bind",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DebugPageData.unbind": {
            "name": "unbind",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WatchFiles.__post_init__": {
            "name": "__post_init__",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WatchFiles.refresh": {
            "name": "refresh",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rdfizer.makeQuads.quadsFromValue": {
            "name": "quadsFromValue",
            "location": 190,
            "return": [],
            "arguments": {
                "valueNode": []
            }
        },
        "Rdfizer.makeQuads.emptyQuads": {
            "name": "emptyQuads",
            "location": 193,
            "return": [],
            "arguments": {
                "element": []
            }
        },
        "Filters.makeOutputStream.eq": {
            "name": "eq",
            "location": 83,
            "return": [],
            "arguments": {
                "jsonBytes": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/patch_cyclone_sse.py": {
        "patchCycloneSse": {
            "name": "patchCycloneSse",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patchCycloneSse.sendEvent": {
            "name": "sendEvent",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "event": [],
                "eid": [],
                "retry": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/rdflib_debug_patches.py": {
        "patchSlimReprs": {
            "name": "patchSlimReprs",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "patchBnodeCounter": {
            "name": "patchBnodeCounter",
            "location": 48,
            "return": [],
            "arguments": {
                "always": []
            }
        },
        "patchSlimReprs.ur": {
            "name": "ur",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "patchSlimReprs.br": {
            "name": "br",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "patchSlimReprs.vr": {
            "name": "vr",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "patchBnodeCounter.n": {
            "name": "n",
            "location": 58,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "_sn_gen": [],
                "_prefix": []
            }
        },
        "patchBnodeCounter.newBlankNode": {
            "name": "newBlankNode",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "uri": [],
                "why": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/rdf_debug.py": {
        "graphDump": {
            "name": "graphDump",
            "location": 14,
            "return": [
                "typing.Text",
                "str"
            ],
            "arguments": {
                "g": [],
                "oneLine": [
                    "bool"
                ]
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/stmt_chunk.py": {
        "_termIsStatic": {
            "name": "_termIsStatic",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "term": []
            }
        },
        "applyChunky": {
            "name": "applyChunky",
            "location": 150,
            "return": [
                "typing.Generator[AlignedRuleChunk]"
            ],
            "arguments": {
                "cb": [],
                "g": []
            }
        },
        "AlignedRuleChunk.__post_init__": {
            "name": "__post_init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlignedRuleChunk.newBindingIfMatched": {
            "name": "newBindingIfMatched",
            "location": 31,
            "return": [
                "CandidateBinding"
            ],
            "arguments": {
                "self": [],
                "prevBindings": []
            }
        },
        "AlignedRuleChunk.matches": {
            "name": "matches",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chunk.__post_init__": {
            "name": "__post_init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chunk.__hash__": {
            "name": "__hash__",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chunk.__lt__": {
            "name": "__lt__",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Chunk._allTerms": {
            "name": "_allTerms",
            "location": 95,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chunk.ruleMatchesFrom": {
            "name": "ruleMatchesFrom",
            "location": 107,
            "return": [
                "typing.Generator[AlignedRuleChunk]"
            ],
            "arguments": {
                "self": [],
                "workingSet": []
            }
        },
        "Chunk.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chunk.isFunctionCall": {
            "name": "isFunctionCall",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "functionsFor": []
            }
        },
        "Chunk.isStatic": {
            "name": "isStatic",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Chunk.apply": {
            "name": "apply",
            "location": 132,
            "return": [
                "Chunk"
            ],
            "arguments": {
                "self": [],
                "cb": []
            }
        },
        "ChunkedGraph.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "bnodeType": [],
                "functionsFor": []
            }
        },
        "ChunkedGraph.allPredicatesExceptFunctions": {
            "name": "allPredicatesExceptFunctions",
            "location": 218,
            "return": [
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkedGraph.noPredicatesAppear": {
            "name": "noPredicatesAppear",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "preds": []
            }
        },
        "ChunkedGraph.__bool__": {
            "name": "__bool__",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkedGraph.__repr__": {
            "name": "__repr__",
            "location": 227,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkedGraph.allChunks": {
            "name": "allChunks",
            "location": 230,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChunkedGraph.__contains__": {
            "name": "__contains__",
            "location": 233,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ch": []
            }
        },
        "ChunkedGraph.__init__.gatherList": {
            "name": "gatherList",
            "location": 185,
            "return": [
                "list"
            ],
            "arguments": {
                "start": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/stmt_chunk_test.py": {
        "TestChunkedGraph.testMakesSimpleChunks": {
            "name": "testMakesSimpleChunks",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChunkedGraph.testSeparatesPatternChunks": {
            "name": "testSeparatesPatternChunks",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChunkedGraph.testBoolMeansEmpty": {
            "name": "testBoolMeansEmpty",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChunkedGraph.testContains": {
            "name": "testContains",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChunkedGraph.testNoPredicatesAppear": {
            "name": "testNoPredicatesAppear",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListCollection.testSubjList": {
            "name": "testSubjList",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListCollection.testObjList": {
            "name": "testObjList",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListCollection.testVariableInListMakesAPatternChunk": {
            "name": "testVariableInListMakesAPatternChunk",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListCollection.testListUsedTwice": {
            "name": "testListUsedTwice",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListCollection.testUnusedListFragment": {
            "name": "testUnusedListFragment",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApplyChunky.testAllStatements": {
            "name": "testAllStatements",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/mqtt_to_rdf/structured_log.py": {
        "htmlRule": {
            "name": "htmlRule",
            "location": 141,
            "return": [],
            "arguments": {
                "r": []
            }
        },
        "htmlGraph": {
            "name": "htmlGraph",
            "location": 145,
            "return": [],
            "arguments": {
                "label": [],
                "g": []
            }
        },
        "htmlStmtRow": {
            "name": "htmlStmtRow",
            "location": 149,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "htmlTerm": {
            "name": "htmlTerm",
            "location": 153,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "htmlBinding": {
            "name": "htmlBinding",
            "location": 159,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "htmlChunkLooper": {
            "name": "htmlChunkLooper",
            "location": 163,
            "return": [],
            "arguments": {
                "looper": [],
                "showBindings": [
                    "bool"
                ]
            }
        },
        "htmlChunkedGraph": {
            "name": "htmlChunkedGraph",
            "location": 185,
            "return": [],
            "arguments": {
                "g": [],
                "highlightChunk": [
                    "None"
                ]
            }
        },
        "htmlChunk": {
            "name": "htmlChunk",
            "location": 193,
            "return": [],
            "arguments": {
                "ch": [],
                "highlight": [
                    "bool"
                ]
            }
        },
        "StructuredLog.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output": []
            }
        },
        "StructuredLog.say": {
            "name": "say",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "StructuredLog.startIteration": {
            "name": "startIteration",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "StructuredLog.rule": {
            "name": "rule",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workingSet": [],
                "i": [],
                "rule": []
            }
        },
        "StructuredLog.foundBinding": {
            "name": "foundBinding",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bound": []
            }
        },
        "StructuredLog.looperConsider": {
            "name": "looperConsider",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "looper": [],
                "newBinding": [],
                "fullBinding": [],
                "isNew": []
            }
        },
        "StructuredLog.odometer": {
            "name": "odometer",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chunkStack": []
            }
        },
        "StructuredLog.render": {
            "name": "render",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/piNode/devices.py": {
        "setupPwm": {
            "name": "setupPwm",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "pi": [],
                "pinNumber": [],
                "hz": [
                    "int"
                ]
            }
        },
        "register": {
            "name": "register",
            "location": 130,
            "return": [],
            "arguments": {
                "deviceType": []
            }
        },
        "setPud": {
            "name": "setPud",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "pi": [],
                "pinNumber": [],
                "p": []
            }
        },
        "makeDevices": {
            "name": "makeDevices",
            "location": 718,
            "return": [
                "list"
            ],
            "arguments": {
                "graph": [],
                "board": [],
                "pi": []
            }
        },
        "DeviceType.findInstances": {
            "name": "findInstances",
            "location": 39,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "cls": [],
                "graph": [],
                "board": [],
                "pi": []
            }
        },
        "DeviceType.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "pi": [],
                "pinNumber": []
            }
        },
        "DeviceType.hostStateInit": {
            "name": "hostStateInit",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.description": {
            "name": "description",
            "location": 73,
            "return": [
                "dict[typing.Text, ]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.hostStatements": {
            "name": "hostStatements",
            "location": 83,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.watchPrefixes": {
            "name": "watchPrefixes",
            "location": 93,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.poll": {
            "name": "poll",
            "location": 102,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.outputPatterns": {
            "name": "outputPatterns",
            "location": 105,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.outputWidgets": {
            "name": "outputWidgets",
            "location": 112,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.sendOutput": {
            "name": "sendOutput",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": []
            }
        },
        "MotionSensorInput.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "pi": [],
                "pinNumber": []
            }
        },
        "MotionSensorInput.hostStateInit": {
            "name": "hostStateInit",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MotionSensorInput.poll": {
            "name": "poll",
            "location": 177,
            "return": [
                "dict[typing.Text, list[tuple]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MotionSensorInput.recentMotionStatements": {
            "name": "recentMotionStatements",
            "location": 196,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": [],
                "now": [],
                "motion": []
            }
        },
        "MotionSensorInput.watchPrefixes": {
            "name": "watchPrefixes",
            "location": 207,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbStrip.findInstances": {
            "name": "findInstances",
            "location": 224,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "cls": [],
                "graph": [],
                "board": [],
                "pi": []
            }
        },
        "RgbStrip.__init__": {
            "name": "__init__",
            "location": 243,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "pi": [],
                "r": [],
                "g": [],
                "b": []
            }
        },
        "RgbStrip.setup": {
            "name": "setup",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbStrip.hostStatements": {
            "name": "hostStatements",
            "location": 252,
            "return": [
                "list[tuple[Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbStrip.outputPatterns": {
            "name": "outputPatterns",
            "location": 255,
            "return": [
                "list[tuple[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbStrip._rgbFromHex": {
            "name": "_rgbFromHex",
            "location": 258,
            "return": [
                "list[int]"
            ],
            "arguments": {
                "self": [],
                "h": []
            }
        },
        "RgbStrip.sendOutput": {
            "name": "sendOutput",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": []
            }
        },
        "RgbStrip.outputWidgets": {
            "name": "outputWidgets",
            "location": 273,
            "return": [
                "list[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempHumidSensor.__init__": {
            "name": "__init__",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempHumidSensor.poll": {
            "name": "poll",
            "location": 296,
            "return": [
                "set[tuple[Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TempHumidSensor.watchPrefixes": {
            "name": "watchPrefixes",
            "location": 328,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushbuttonInput.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushbuttonInput.poll": {
            "name": "poll",
            "location": 348,
            "return": [
                "dict[typing.Text, list[tuple]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushbuttonInput.watchPrefixes": {
            "name": "watchPrefixes",
            "location": 369,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneWire.__init__": {
            "name": "__init__",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneWire.poll": {
            "name": "poll",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneWire.watchPrefixes": {
            "name": "watchPrefixes",
            "location": 418,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilteredValue.__init__": {
            "name": "__init__",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setter": [],
                "slew": [
                    "float"
                ],
                "accel": [
                    "int"
                ]
            }
        },
        "FilteredValue.set": {
            "name": "set",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "goal": []
            }
        },
        "FilteredValue.step": {
            "name": "step",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedOutput.hostStateInit": {
            "name": "hostStateInit",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedOutput.setup": {
            "name": "setup",
            "location": 479,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedOutput.outputPatterns": {
            "name": "outputPatterns",
            "location": 482,
            "return": [
                "list[tuple[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedOutput.sendOutput": {
            "name": "sendOutput",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": []
            }
        },
        "LedOutput._setPwm": {
            "name": "_setPwm",
            "location": 492,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "LedOutput.hostStatements": {
            "name": "hostStatements",
            "location": 496,
            "return": [
                "list[tuple[Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedOutput.outputWidgets": {
            "name": "outputWidgets",
            "location": 499,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,int,float]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnboardTemperature.findInstances": {
            "name": "findInstances",
            "location": 515,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "cls": [],
                "graph": [],
                "board": [],
                "pi": []
            }
        },
        "OnboardTemperature.poll": {
            "name": "poll",
            "location": 524,
            "return": [
                "list[tuple[Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnboardTemperature.watchPrefixes": {
            "name": "watchPrefixes",
            "location": 532,
            "return": [
                "list[tuple]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.hostStateInit": {
            "name": "hostStateInit",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.sendOutput": {
            "name": "sendOutput",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": []
            }
        },
        "RgbPixels.updateOutput": {
            "name": "updateOutput",
            "location": 561,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.poll": {
            "name": "poll",
            "location": 578,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.hostStatements": {
            "name": "hostStatements",
            "location": 582,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.outputPatterns": {
            "name": "outputPatterns",
            "location": 585,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RgbPixels.outputWidgets": {
            "name": "outputWidgets",
            "location": 588,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Lcd8544.findInstances": {
            "name": "findInstances",
            "location": 597,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "cls": [],
                "graph": [],
                "board": [],
                "pi": []
            }
        },
        "Lcd8544.__init__": {
            "name": "__init__",
            "location": 613,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "uri": [],
                "pi": [],
                "din": [],
                "clk": [],
                "dc": [],
                "rst": []
            }
        },
        "Lcd8544.hostStatements": {
            "name": "hostStatements",
            "location": 628,
            "return": [
                "list",
                "list[tuple[Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lcd8544.outputPatterns": {
            "name": "outputPatterns",
            "location": 632,
            "return": [
                "list",
                "list[tuple[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lcd8544.sendOutput": {
            "name": "sendOutput",
            "location": 636,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": []
            }
        },
        "Lcd8544.outputWidgets": {
            "name": "outputWidgets",
            "location": 647,
            "return": [
                "list",
                "list[dict[typing.Text, typing.Text]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PwmBoard.findInstances": {
            "name": "findInstances",
            "location": 670,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "cls": [],
                "graph": [],
                "board": [],
                "pi": []
            }
        },
        "PwmBoard.__init__": {
            "name": "__init__",
            "location": 683,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "dev": [],
                "pi": [],
                "outs": []
            }
        },
        "PwmBoard.hostStatements": {
            "name": "hostStatements",
            "location": 691,
            "return": [
                "list[tuple[Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PwmBoard.outputPatterns": {
            "name": "outputPatterns",
            "location": 695,
            "return": [
                "list[tuple[None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PwmBoard.sendOutput": {
            "name": "sendOutput",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statements": []
            }
        },
        "PwmBoard.outputWidgets": {
            "name": "outputWidgets",
            "location": 707,
            "return": [
                "list[dict[typing.Text, typing.Union[typing.Text,int,float]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedOutput.hostStateInit.Instant.set": {
            "name": "set",
            "location": 474,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "goal": []
            }
        }
    },
    "homeauto-master/service/piNode/piNode.py": {
        "sendOneshot": {
            "name": "sendOneshot",
            "location": 183,
            "return": [],
            "arguments": {
                "oneshot": []
            }
        },
        "rdfGraphBody": {
            "name": "rdfGraphBody",
            "location": 251,
            "return": [],
            "arguments": {
                "body": [],
                "headers": []
            }
        },
        "main": {
            "name": "main",
            "location": 284,
            "return": [],
            "arguments": {}
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "masterGraph": []
            }
        },
        "Config.watchEtcd": {
            "name": "watchEtcd",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.configChanged": {
            "name": "configChanged",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.cancelRead": {
            "name": "cancelRead",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.reread": {
            "name": "reread",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.setupBoards": {
            "name": "setupBoards",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceRunner.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "dev": [],
                "masterGraph": [],
                "sendOneshot": [],
                "influx": []
            }
        },
        "DeviceRunner.syncMasterGraphToHostStatements": {
            "name": "syncMasterGraphToHostStatements",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceRunner.poll": {
            "name": "poll",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceRunner.filterIncomingStatements": {
            "name": "filterIncomingStatements",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "stmts": []
            }
        },
        "DeviceRunner.onPutStatements": {
            "name": "onPutStatements",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "stmts": []
            }
        },
        "sendOneshot.ok": {
            "name": "ok",
            "location": 194,
            "return": [],
            "arguments": {
                "k": []
            }
        },
        "sendOneshot.err": {
            "name": "err",
            "location": 197,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "masterGraph": [],
                "uri": []
            }
        },
        "Board.sendOneshot": {
            "name": "sendOneshot",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "oneshot": []
            }
        },
        "Board.outputStatements": {
            "name": "outputStatements",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "stmts": []
            }
        },
        "Board.staticStmts": {
            "name": "staticStmts",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Board.description": {
            "name": "description",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutputPage.put": {
            "name": "put",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Boards.get": {
            "name": "get",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/piNode/rdflib_pi_opt.py": {
        "patchRandid": {
            "name": "patchRandid",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "patchRandid.randid": {
            "name": "randid",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "homeauto-master/service/piNode/tasks.py": {
        "build_image": {
            "name": "build_image",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "build_image_check": {
            "name": "build_image_check",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "push_image": {
            "name": "push_image",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "shell": {
            "name": "shell",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "check": {
            "name": "check",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "check_shell": {
            "name": "check_shell",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "local_run": {
            "name": "local_run",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "auto_button_test": {
            "name": "auto_button_test",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "redeploy": {
            "name": "redeploy",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "push_config": {
            "name": "push_config",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/service/playSound/playSound.py": {
        "SoundEffects.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoundEffects._getSound": {
            "name": "_getSound",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "SoundEffects.playEffect": {
            "name": "playEffect",
            "location": 33,
            "return": [
                "bytes",
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "SoundEffects.done": {
            "name": "done",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": []
            }
        },
        "SoundEffects.stopAll": {
            "name": "stopAll",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.get": {
            "name": "get",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlaySound.post": {
            "name": "post",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Volume.put": {
            "name": "put",
            "location": 70,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "StopAll.post": {
            "name": "post",
            "location": 75,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/playSound/tasks.py": {},
    "homeauto-master/service/powerEagle/reader.py": {
        "Poller.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out": [],
                "graph": []
            }
        },
        "Poller.poll": {
            "name": "poll",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metrics.get": {
            "name": "get",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/rdf_to_mqtt/rdf_over_http.py": {
        "rdfGraphBody": {
            "name": "rdfGraphBody",
            "location": 7,
            "return": [
                "Graph"
            ],
            "arguments": {
                "body": [],
                "headers": []
            }
        },
        "expandQueryParamUri": {
            "name": "expandQueryParamUri",
            "location": 13,
            "return": [
                "URIRef"
            ],
            "arguments": {
                "txt": []
            }
        },
        "rdfStatementsFromRequest": {
            "name": "rdfStatementsFromRequest",
            "location": 20,
            "return": [
                "typing.Generator[tuple[Literal]]",
                "typing.Generator"
            ],
            "arguments": {
                "arg": [],
                "body": [],
                "headers": []
            }
        }
    },
    "homeauto-master/service/rdf_to_mqtt/rdf_to_mqtt.py": {
        "OutputPage.put": {
            "name": "put",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputPage._onStatement": {
            "name": "_onStatement",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmt": []
            }
        },
        "OutputPage._publishOnOff": {
            "name": "_publishOnOff",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [],
                "brightness": []
            }
        },
        "OutputPage._publishRgbw": {
            "name": "_publishRgbw",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attrs": [],
                "brightness": []
            }
        },
        "OutputPage._publishFrontScreenText": {
            "name": "_publishFrontScreenText",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "stmt": []
            }
        },
        "OutputPage._publish": {
            "name": "_publish",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "topic": [],
                "messageJson": [
                    "None"
                ],
                "message": []
            }
        }
    },
    "homeauto-master/service/rdf_to_mqtt/tasks.py": {
        "program_board_over_usb": {
            "name": "program_board_over_usb",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "monitor_usb": {
            "name": "monitor_usb",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "tail_mqtt": {
            "name": "tail_mqtt",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/service/reasoning/actions.py": {
        "secsFromLiteral": {
            "name": "secsFromLiteral",
            "location": 20,
            "return": [
                "float"
            ],
            "arguments": {
                "v": []
            }
        },
        "ntStatement": {
            "name": "ntStatement",
            "location": 26,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "stmt": []
            }
        },
        "ntStatement.compact": {
            "name": "compact",
            "location": 28,
            "return": [],
            "arguments": {
                "u": []
            }
        },
        "Actions.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputGraph": [],
                "sendToLiveClients": [],
                "mockOutput": [
                    "bool"
                ]
            }
        },
        "Actions.putResults": {
            "name": "putResults",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inferred": []
            }
        },
        "Actions._putDevices": {
            "name": "_putDevices",
            "location": 63,
            "return": [
                "set[tuple]"
            ],
            "arguments": {
                "self": [],
                "deviceGraph": [],
                "inferred": []
            }
        },
        "Actions._oneShotPostActions": {
            "name": "_oneShotPostActions",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deviceGraph": [],
                "inferred": []
            }
        },
        "Actions.putDefaults": {
            "name": "putDefaults",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deviceGraph": [],
                "activated": []
            }
        },
        "Actions._getRefreshSecs": {
            "name": "_getRefreshSecs",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "Actions._put": {
            "name": "_put",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "payload": [],
                "refreshSecs": [],
                "agent": [
                    "None"
                ]
            }
        },
        "PutOutputsTable.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "application": [],
                "request": []
            }
        },
        "PutOutputsTable.bind": {
            "name": "bind",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PutOutputsTable.unbind": {
            "name": "unbind",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PutOutputsTable.loop": {
            "name": "loop",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Actions._oneShotPostActions.err": {
            "name": "err",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "e": []
            }
        }
    },
    "homeauto-master/service/reasoning/escapeoutputstatements.py": {
        "escapeOutputStatements": {
            "name": "escapeOutputStatements",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [],
                "outputPatterns": []
            }
        },
        "unquoteOutputStatements": {
            "name": "unquoteOutputStatements",
            "location": 116,
            "return": [
                "Graph"
            ],
            "arguments": {
                "graph": []
            }
        },
        "fromN3": {
            "name": "fromN3",
            "location": 143,
            "return": [
                "Graph"
            ],
            "arguments": {
                "n3": []
            }
        },
        "impliedGraph": {
            "name": "impliedGraph",
            "location": 149,
            "return": [],
            "arguments": {
                "g": []
            }
        },
        "TestEscapeOutputStatements.testPassThrough": {
            "name": "testPassThrough",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEscapeOutputStatements.testMatchCompletePattern": {
            "name": "testMatchCompletePattern",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEscapeOutputStatements.testMatchWildcardPatternOnObject": {
            "name": "testMatchWildcardPatternOnObject",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEscapeOutputStatements.testWildcardAndNonMatchingStatements": {
            "name": "testWildcardAndNonMatchingStatements",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEscapeOutputStatements.testTwoMatchingStatements": {
            "name": "testTwoMatchingStatements",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEscapeOutputStatements.testDontReplaceSourceStatements": {
            "name": "testDontReplaceSourceStatements",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/reasoning/graphop.py": {
        "graphWithoutMetadata": {
            "name": "graphWithoutMetadata",
            "location": 7,
            "return": [
                "ConjunctiveGraph"
            ],
            "arguments": {
                "g": [],
                "ignorePredicates": [
                    "list"
                ]
            }
        },
        "graphEqual": {
            "name": "graphEqual",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [],
                "b": [],
                "ignorePredicates": [
                    "list"
                ]
            }
        }
    },
    "homeauto-master/service/reasoning/httpputoutputs.py": {
        "HttpPutOutput.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "refreshSecs": [],
                "mockOutput": [
                    "bool"
                ]
            }
        },
        "HttpPutOutput.report": {
            "name": "report",
            "location": 30,
            "return": [
                "dict[typing.Text, typing.Union[float,str,None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpPutOutput.setPayload": {
            "name": "setPayload",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [],
                "foafAgent": []
            }
        },
        "HttpPutOutput.makeRequest": {
            "name": "makeRequest",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpPutOutput.currentRefreshSecs": {
            "name": "currentRefreshSecs",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HttpPutOutput.onResponse": {
            "name": "onResponse",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": []
            }
        },
        "HttpPutOutput.onError": {
            "name": "onError",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "err": []
            }
        },
        "HttpPutOutputs.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mockOutput": [
                    "bool"
                ]
            }
        },
        "HttpPutOutputs.put": {
            "name": "put",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "payload": [],
                "foafAgent": [],
                "refreshSecs": []
            }
        },
        "HttpPutOutput.currentRefreshSecs.secsFromLiteral": {
            "name": "secsFromLiteral",
            "location": 79,
            "return": [
                "float"
            ],
            "arguments": {
                "v": []
            }
        },
        "HttpPutOutput.currentRefreshSecs.recv": {
            "name": "recv",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "v": []
            }
        }
    },
    "homeauto-master/service/reasoning/inference.py": {
        "_loadAndEscape": {
            "name": "_loadAndEscape",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "ruleStore": [],
                "n3": [],
                "outputPatterns": []
            }
        },
        "readRules": {
            "name": "readRules",
            "location": 45,
            "return": [
                "tuple[typing.Union[str,None,ConjunctiveGraph]]"
            ],
            "arguments": {
                "rulesPath": [],
                "outputPatterns": []
            }
        },
        "infer": {
            "name": "infer",
            "location": 71,
            "return": [
                "ConjunctiveGraph"
            ],
            "arguments": {
                "graph": [],
                "rules": []
            }
        }
    },
    "homeauto-master/service/reasoning/inputgraph.py": {
        "parseRdf": {
            "name": "parseRdf",
            "location": 24,
            "return": [],
            "arguments": {
                "text": [],
                "contentType": []
            }
        },
        "RemoteData.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "onChange": []
            }
        },
        "RemoteData._finishInit": {
            "name": "_finishInit",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteData.onPatch": {
            "name": "onPatch",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "fullGraph": []
            }
        },
        "InputGraph.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "inputDirs": [],
                "onChange": []
            }
        },
        "InputGraph.onChangeLocal": {
            "name": "onChangeLocal",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "oneShot": [],
                "oneShotGraph": []
            }
        },
        "InputGraph._rxUpdate": {
            "name": "_rxUpdate",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "subj": [],
                "pred": [],
                "default": [],
                "rxv": []
            }
        },
        "InputGraph.rxValue": {
            "name": "rxValue",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "subj": [],
                "pred": [],
                "default": []
            }
        },
        "InputGraph.updateFileData": {
            "name": "updateFileData",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InputGraph.addOneShot": {
            "name": "addOneShot",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "InputGraph.addOneShotFromString": {
            "name": "addOneShotFromString",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "body": [],
                "contentType": []
            }
        },
        "InputGraph.getGraph": {
            "name": "getGraph",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/reasoning/rdflibtrig.py": {
        "addTrig": {
            "name": "addTrig",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "graph": [],
                "url": [],
                "timeout": [
                    "int"
                ]
            }
        }
    },
    "homeauto-master/service/reasoning/reasoning.py": {
        "ntStatement": {
            "name": "ntStatement",
            "location": 51,
            "return": [
                "typing.Text"
            ],
            "arguments": {
                "stmt": []
            }
        },
        "sendToLiveClients": {
            "name": "sendToLiveClients",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "None"
                ],
                "asJson": [
                    "None"
                ]
            }
        },
        "configLogging": {
            "name": "configLogging",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "arg": []
            }
        },
        "ntStatement.compact": {
            "name": "compact",
            "location": 53,
            "return": [],
            "arguments": {
                "u": []
            }
        },
        "Reasoning.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mockOutput": [
                    "bool"
                ]
            }
        },
        "Reasoning.updateRules": {
            "name": "updateRules",
            "location": 76,
            "return": [
                "tuple[list[tuple[Literal]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reasoning.graphChanged": {
            "name": "graphChanged",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inputGraph": [],
                "oneShot": [
                    "bool"
                ],
                "oneShotGraph": [
                    "None"
                ]
            }
        },
        "Reasoning.copyOutput": {
            "name": "copyOutput",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reasoning._makeInferred": {
            "name": "_makeInferred",
            "location": 144,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "inputGraph": []
            }
        },
        "Index.get": {
            "name": "get",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmediateUpdate.put": {
            "name": "put",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneShot.post": {
            "name": "post",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphResource.get": {
            "name": "get",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "which": []
            }
        },
        "GraphResource.jsonRdf": {
            "name": "jsonRdf",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "g": []
            }
        },
        "NtGraphs.get": {
            "name": "get",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rules.get": {
            "name": "get",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.get": {
            "name": "get",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Static.get": {
            "name": "get",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Events.connectionMade": {
            "name": "connectionMade",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Events.connectionLost": {
            "name": "connectionLost",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "Events.messageReceived": {
            "name": "messageReceived",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Metrics.get": {
            "name": "get",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reasoning": []
            }
        }
    },
    "homeauto-master/service/shuttlepro/shuttlepro.py": {},
    "homeauto-master/service/shuttlepro/shuttleservice.py": {},
    "homeauto-master/service/store/store.py": {
        "ValuesResource.put": {
            "name": "put",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValuesResource._onQueryStringStatement": {
            "name": "_onQueryStringStatement",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [],
                "p": [],
                "body": []
            }
        },
        "ValuesResource._onGraphBodyStatements": {
            "name": "_onGraphBodyStatements",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": [],
                "headers": []
            }
        },
        "ValuesResource._onStatements": {
            "name": "_onStatements",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmts": []
            }
        }
    },
    "homeauto-master/service/store/tasks.py": {},
    "homeauto-master/service/tinyScreen/tiny_screen.py": {
        "rdfGraphBody": {
            "name": "rdfGraphBody",
            "location": 102,
            "return": [
                "Graph"
            ],
            "arguments": {
                "body": [],
                "headers": []
            }
        },
        "Screen.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spiDevice": [
                    "int"
                ],
                "rotation": [
                    "int"
                ]
            }
        },
        "Screen._stateImage": {
            "name": "_stateImage",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Screen._initOutput": {
            "name": "_initOutput",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spiDevice": [],
                "rotation": []
            }
        },
        "Screen.setContrast": {
            "name": "setContrast",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contrast": []
            }
        },
        "Screen.hide": {
            "name": "hide",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.show": {
            "name": "show",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screen.display": {
            "name": "display",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img": []
            }
        },
        "Screen.animateTo": {
            "name": "animateTo",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Screen.setNews": {
            "name": "setNews",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Screen.renderNews": {
            "name": "renderNews",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenSim._initOutput": {
            "name": "_initOutput",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScreenSim.display": {
            "name": "display",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img": []
            }
        },
        "OutputPage.put": {
            "name": "put",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputPage._onStatement": {
            "name": "_onStatement",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmts": []
            }
        }
    },
    "homeauto-master/service/tradfri/tradfri.py": {
        "devUri": {
            "name": "devUri",
            "location": 27,
            "return": [],
            "arguments": {
                "dev": []
            }
        },
        "main": {
            "name": "main",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Hub.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "graph": [],
                "ip": [],
                "key": []
            }
        },
        "Hub.startObserve": {
            "name": "startObserve",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev": []
            }
        },
        "Hub.description": {
            "name": "description",
            "location": 60,
            "return": [
                "dict[typing.Text, typing.Union[typing.Text,list[dict[typing.Text, typing.Union[None,list[tuple[None]]]]]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hub.updateCur": {
            "name": "updateCur",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dev": [
                    "None"
                ]
            }
        },
        "Hub.deviceStatements": {
            "name": "deviceStatements",
            "location": 85,
            "return": [
                "typing.Generator[tuple]",
                "typing.Generator[tuple[Literal]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hub.currentStateStatements": {
            "name": "currentStateStatements",
            "location": 98,
            "return": [
                "typing.Generator[tuple[Literal]]"
            ],
            "arguments": {
                "self": [],
                "devs": []
            }
        },
        "Hub.outputStatements": {
            "name": "outputStatements",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stmts": []
            }
        },
        "OutputPage.put": {
            "name": "put",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boards.get": {
            "name": "get",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hub.startObserve.onUpdate": {
            "name": "onUpdate",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "dev": []
            }
        },
        "Hub.startObserve.onErr": {
            "name": "onErr",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "err": []
            }
        }
    },
    "homeauto-master/service/wifi/scrape.py": {
        "macUri": {
            "name": "macUri",
            "location": 16,
            "return": [
                "URIRef"
            ],
            "arguments": {
                "macAddress": []
            }
        },
        "SeenNode.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "mac": [],
                "ip": [],
                "stmts": []
            }
        },
        "Wifi.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Wifi._loader": {
            "name": "_loader",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "homeauto-master/service/wifi/scrape_unmaintained.py": {
        "loadUvaData": {
            "name": "loadUvaData",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "loadCiscoData": {
            "name": "loadCiscoData",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "jsValue": {
            "name": "jsValue",
            "location": 38,
            "return": [],
            "arguments": {
                "js": [],
                "variableName": []
            }
        },
        "_parseZyxel": {
            "name": "_parseZyxel",
            "location": 44,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "routerName": []
            }
        },
        "_parseTomato": {
            "name": "_parseTomato",
            "location": 55,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "routerName": []
            }
        }
    },
    "homeauto-master/service/wifi/tasks.py": {},
    "homeauto-master/service/wifi/wifi.py": {
        "whenConnected": {
            "name": "whenConnected",
            "location": 62,
            "return": [],
            "arguments": {
                "mongo": [],
                "macThatIsNowConnected": []
            }
        },
        "connectedAgoString": {
            "name": "connectedAgoString",
            "location": 75,
            "return": [],
            "arguments": {
                "conn": []
            }
        },
        "Index.get": {
            "name": "get",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.get": {
            "name": "get",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Json.get": {
            "name": "get",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poller.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wifi": [],
                "mongo": []
            }
        },
        "Poller.onNodes": {
            "name": "onNodes",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "newAddrs": []
            }
        },
        "Poller.computeActions": {
            "name": "computeActions",
            "location": 164,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "newWithSignal": []
            }
        },
        "Poller.deltaSinceLastArrive": {
            "name": "deltaSinceLastArrive",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Poller.updateGraph": {
            "name": "updateGraph",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "masterGraph": []
            }
        },
        "RemoteSuspend.post": {
            "name": "post",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metrics.get": {
            "name": "get",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Table.get.rowDict": {
            "name": "rowDict",
            "location": 83,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "Poller.computeActions.makeAction": {
            "name": "makeAction",
            "location": 167,
            "return": [],
            "arguments": {
                "addr": [],
                "act": []
            }
        }
    },
    "homeauto-master/service/xidle/tasks.py": {
        "build_image_x86": {
            "name": "build_image_x86",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "build_image_pi": {
            "name": "build_image_pi",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "push_image_x86": {
            "name": "push_image_x86",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "push_image_pi": {
            "name": "push_image_pi",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "shell": {
            "name": "shell",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "local_run": {
            "name": "local_run",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "redeploy": {
            "name": "redeploy",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "homeauto-master/service/xidle/xidle.py": {
        "get_idle_time": {
            "name": "get_idle_time",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "Root.get": {
            "name": "get",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Idle.get": {
            "name": "get",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poller.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poller.poll": {
            "name": "poll",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}